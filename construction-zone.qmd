```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

## Transformation {.unnumbered}

[Transformations](https://onlinestatbook.com/2/transformations/contents.html)

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: false
#| label: fig-pretest-rank
#| fig-align: center
#| fig-height: 4
#| fig-width: 8
#| fig-cap: "Zusammenhang vom Mittelwert, Median und dem Modus zur Feststellung einer Normalverteilung. Der Modus ist hierbei der häufigste Wert. **(A)** Linksschiefe Verteilung. Der Modus ist größer als der Median ist größer als der Mittelwert. **(B)** Symmetrische Normalverteilung. Der Mittelwert und Median sowie Modus sind gleich. **(C)** Rechtsschiefe Verteilung der Mittelwert ist größer als der Median ist größer als der Modus. *[Zum Vergrößern anklicken]*"

p2kurt + p1kurt + p3kurt +
  plot_layout(ncol = 3) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

Quadratwurzel moderat schiefe Messwerte:

-   `sqrt(y)` für positiv, schiefe Messwerte
-   `sqrt(max(y+1) - y)` für negative, schiefe Messwerte

Logarithmus für starke schiefe Messwerte:

-   `log10(y)` für positiv, schiefe Messwerte
-   `log10(max(y+1) - y)` für negative, schiefe Messwerte

Die Inverse für extrem, schiefe Messwerte:

-   `1/y` für positiv, schiefe Messwerte
-   `1/(max(y+1) - y)` für negative, schiefe Messwerte

Die Transformation mit Rängen `rank()`

Automatisierte Transformationen

-   `Gaussianize()` aus dem [R Paket `{LambertW}`](https://cran.r-project.org/web/packages/LambertW/index.html)
-   `transformTukey()` aus dem R Paket `{rcompanion}`

::: panel-tabset
## `sqrt(y)`

```{r}
#| eval: false
sqrt_tbl <- fac2_tbl |> 
  mutate(sqrt_hatch_time = sqrt(hatch_time))
```

```{r}
#| message: false
#| echo: false
#| eval: false
#| label: fig-log-pretest-2
#| fig-align: center
#| fig-height: 3.5
#| fig-width: 8
#| fig-cap: "Histogramm der nicht transfomierten und transformierten Daten. **(A)** Nicht transformierte, rohe Daten. **(B)** $sqrt$-transformierte Daten. *[Zum Vergrößern anklicken]*"
#| layout-nrow: 1

p1 <- ggplot(sqrt_tbl, aes(hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[2], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in [h]", y = "") +
  xlim(-100, NA)

p2 <- ggplot(sqrt_tbl, aes(sqrt_hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[3], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in sqrt(h)", y = "")

p1 + p2 +
  theme(panel.grid.minor.x = element_blank()) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))

```

## `log(y)`

```{r}
#| eval: false
log_tbl <- fac2_tbl |> 
  mutate(log_hatch_time = log(hatch_time))
```

```{r}
#| message: false
#| echo: false
#| eval: false
#| label: fig-log-pretest-1
#| fig-align: center
#| fig-height: 3.5
#| fig-width: 8
#| fig-cap: "Histogramm der nicht transfomierten und transformierten Daten. **(A)** Nicht transformierte, rohe Daten. **(B)** $log$-transformierte Daten. *[Zum Vergrößern anklicken]*"
#| layout-nrow: 1

p1 <- ggplot(log_tbl, aes(hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[2], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in [h]", y = "") +
  xlim(-100, NA) 

p2 <- ggplot(log_tbl, aes(log_hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[3], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in log(h)", y = "")  

p1 + p2 +
  theme(panel.grid.minor.x = element_blank()) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))

```

## `1/y`

```{r}
#| eval: false
inverse_tbl <- fac2_tbl |> 
  mutate(inverse_hatch_time = 1/hatch_time)
```

```{r}
#| message: false
#| echo: false
#| eval: false
#| label: fig-inverse-pretest-1
#| fig-align: center
#| fig-height: 3.5
#| fig-width: 8
#| fig-cap: "Histogramm der nicht transfomierten und transformierten Daten. **(A)** Nicht transformierte, rohe Daten. **(B)** $inverse$-transformierte Daten. *[Zum Vergrößern anklicken]*"
#| layout-nrow: 1

p1 <- ggplot(inverse_tbl, aes(hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[2], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in [h]", y = "") +
  xlim(-100, NA) 

p2 <- ggplot(inverse_tbl, aes(inverse_hatch_time)) +
  theme_minimal() +
  geom_density(fill = cbbPalette[3], color = "black") +
  labs(x = "Zeit bis zum Schlüpfen in (1/h)", y = "")  

p1 + p2 +
  theme(panel.grid.minor.x = element_blank()) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))

```
:::

## Ranked t-Test {.unnumbered}

Warum rechnen wir nicht einfach einen nicht-parametrischen Test?

Das ganze kommt dann in das Kapitel statistisches Testen in R plus den entsprechenden Kapiteln

[Beware the Friedman test!](https://seriousstats.wordpress.com/2012/02/14/friedman/)

[Equivalent to Welch's t-test in GLS framework](https://stats.stackexchange.com/questions/142685/equivalent-to-welchs-t-test-in-gls-framework)

[Common statistical tests are linear models](https://lindeloev.github.io/tests-as-linear/)

[Are parametric tests on rank transformed data equivalent to non-parametric test on raw data?](https://stats.stackexchange.com/questions/210529/are-parametric-tests-on-rank-transformed-data-equivalent-to-non-parametric-test?noredirect=1#comment399981_210529)

@conover1981rank mit [Rank Transformations as a Bridge Between Parametric and Nonparametric Statistics](https://www.jstor.org/stable/2683975)

```{r}
set.seed(20250345)
ranked_tbl <- tibble(grp = gl(3, 7, labels = c("cat", "dog", "fox")),
                     rsp_lognormal = c(round(rlnorm(7, 4, 1), 2),
                                       round(rlnorm(7, 4, 1), 2),
                                       round(rlnorm(7, 4, 1), 2)),
                     ranked_lognormal = rank(rsp_lognormal),
                     rsp_normal = c(round(rnorm(7, 4, 1), 2),
                                    round(rnorm(7, 5, 1), 2),
                                    round(rnorm(7, 7, 1), 2)),
                     ranked_normal = rank(rsp_normal)) 

rank_tbl <- tibble(id = 1:14, 
                   trt = gl(2, 7, label = c("A", "B")),
                   unranked = c(c(1.2, 2.1, 3.5, 4.1, 6.2, 6.5, 7.1), 
                               c(4.7, 6.3, 6.8, 7.3, 8.2, 9.1, 10.3)),
                   ranked = rank(unranked))

```

```{r}
t.test(ranked ~ trt, data = rank_tbl)
```

```{r}
wilcox.test(unranked ~ trt, data = rank_tbl)
```

```{r}
ranked_tbl |> 
  filter(grp != "fox") |> 
  group_by(grp) |> 
  summarise(mean(rsp_normal), sd(rsp_normal), mean(ranked_normal), sd(ranked_normal)) |> 
  mutate_if(is.numeric, round, 2) |> 
  set_names(c("Gruppe", "$\\bar{y}_{normal}$", "$s_{normal}$", "$\\bar{y}_{ranked}$", "$s_{ranked}$")) |> 
  tt(width = 1, align = "c", theme = "striped")
```

```{r}
t.test(ranked_normal ~ grp, data = filter(ranked_tbl, grp != "fox")) |> 
  tidy() |> 
  select(p.value)
```

```{r}
wilcox.test(rsp_normal ~ grp, data = filter(ranked_tbl, grp != "fox")) |> 
  tidy() |> 
  select(p.value)
```

```{r}
aov(ranked_normal ~ grp, data = ranked_tbl) |> 
  tidy() 
```

```{r}
kruskal.test(ranked_normal ~ grp, data = ranked_tbl) |> 
  tidy() 
```

```{r}
signed_rank <- function(x) sign(x) * rank(abs(x))
```

```{r}
rank(c(3.6, 3.4, -5.0, 8.2))
signed_rank(c(3.6, 3.4, -5.0, 8.2))
```

### Welch t-Test und GLS {.unnumbered}

```{r}
# the t-statistic not assuming equal variances
t.test(rsp_normal ~ grp, data = filter(ranked_tbl, grp != "fox"), var.equal = FALSE)
```

```{r}
library(nlme)
summary(gls(rsp_normal ~ grp, data = filter(ranked_tbl, grp != "fox"), 
            weights = varIdent(form = ~ 1 | grp)))
```

### Chi Quadrat Test und GLM {.unnumbered}

```{r}
conflicts_prefer(stats::chisq.test)
D <- data.frame(mood = c('happy', 'sad', 'meh'),
               counts = c(60, 90, 70))
chisq.test(D$counts)
```

[Score test oder Rao Statistik](https://en.wikipedia.org/wiki/Score_test)

```{r}
glm(counts ~ mood, data = D, family = poisson()) |> 
  anova(test = 'Rao')
```

Jetzt brauchen wir eine 2x2 Tabelle also zwei Spalten...

```{r}
D = data.frame(
  mood = c('happy', 'happy', 'meh', 'meh', 'sad', 'sad'),
  sex = c('male', 'female', 'male', 'female', 'male', 'female'),
  Freq = c(100, 70, 30, 32, 110, 120)
)

MASS::loglm(Freq ~ mood + sex, D)
```
