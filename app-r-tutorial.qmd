```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Tutorium in R

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

In diesem Kapitel gibt es eine etwas *wilde* Sammlung an Fragen und Antworten, die im Rahmen des R Tutoriums aufkamen. Vielleicht findest du ja was, was dich inspiriert.

-   Wie setze ich um einen farbigen Punkt einen schwarzen Rand? (siehe @sec-black-circle-point)
-   Wie kann ich die Anordnung der Nutzungen bzw. Behandlungen in einer Grafik definieren? (siehe @sec-order-x-names)
-   Wie kann ich die Anordnung der Fehlerbalken in einem Barplot verändern? (siehe @sec-order-error-bars)

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r }
#| echo: true
#| message: false
#| warning: false

pacman::p_load(tidyverse, magrittr, readxl, 
               conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("summarise", "dplyr")
```

Schaue dir bitte erst den R Code zu deiner Frage an und dann kannst du die Pakete noch nachinstallieren. Es werden sich hier sicherlich eine Menge ansammeln.

## Wie setze ich um einen farbigen Punkt einen schwarzen Rand? {#sec-black-circle-point}

In ggplot können wir verschiedene Typen von Punkte auswählen - auch `shape` genannt. Der `shape` mit der Nummer 21 hat die Möglichkeit die Füllung `fill` anders zu wählen, als die Randfarbe über `color`. Daher können wir die Punkte nach dem Faktor `trt` einfärben und setzen dann in dem `geom_point()` die Randfarbe auf `black`. Wir könnten da auch jede andere Farbe nehmen.

```{r}
#| echo: true
#| message: false
#| label: fig-r-tutorium-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Farbige Punkte mit einem schwarzen Rand."

plot_tbl <- tibble(x = 1:10,
                   y = rnorm(10, 5, 1),
                   trt = rep(c("A", "B"), each = 5)) %>% 
  mutate(trt =  as_factor(trt))

ggplot(plot_tbl, aes(x, y, fill = trt)) +
  geom_point(color = "black", shape = 21, size = 4) +
  theme_bw() 

```

## Wie kann ich die Anordnung der Nutzungen bzw. Behandlungen in einer Grafik definieren? {#sec-order-x-names}

Häufig ist es so, dass unser Behandlungs oder Nutzenspalte eine bestimmte Ordnung hat. Wenn wir die Ordnung beibehalten wollen, wie die Ordnung auch im Datensatz ist, dann können wir nach dem Einlesen der Daten die Funktion `as_factor()` nutzen. Dann bleibt die *ursprüngliche* Ordnung erhalten.

Wenn wir eine andere Ordnung haben wollen, dann können wir mit der Funktion `factor()` und der Option `level =` eine neue Ordnung der *existierenden* Level vorgeben.

Für die Umbenennung in R empfehle ich die Funktion [`recode()`](https://dplyr.tidyverse.org/reference/recode.html).

```{r}
#| echo: true
#| message: false
#| label: fig-r-tutorium-02
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Neuordnung des Faktors `trt` für die Boxplots."

plot_tbl <- tibble(y = rnorm(20, 5, 1),
                   trt = rep(c("Gemüse", "Obst", "Strauch", "Brache"), 
                             each = 5)) %>% 
  mutate(trt =  factor(trt, level = c("Obst", "Strauch", "Brache", "Gemüse")))

ggplot(plot_tbl, aes(trt, y, fill = trt)) +
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none")

```

## Wie kann ich die Anordnung der Fehlerbalken in einem Barplot verändern? {#sec-order-error-bars}

In dem @sec-eda-ggplot haben wir uns ja nur mit Balkendiagrammen mit einem Faktor beschäftigt. Das heist, wir haben den Faktor auf die x-Achse gelegt und schon hatten wir den Plot. Wenn wir zwei Faktoren haben, dann müssen wir über die Option `position = position_dodge()` etwas spielen. Wir können auch die Position und des Abstand etwas ändern. Ich habe hier `0.9` für die Fehlerbalken in `position = position_dodge()` probiert und es sieht ziemlich gut aus.

```{r}
#| echo: true
#| message: false
#| label: fig-r-tutorium-03
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Fehlerbalken für einen Barplot mit zwei Faktoren."

plot_tbl <- expand_grid(site = 1:4, 
                        trt = 1:2, 
                        rep = 1:5) %>% 
  mutate(site = factor(site, labels = c("A", "B", "C", "D")),
         trt = factor(trt, labels = c("new", "old")),
         rsp = rnorm(n(), 10, 2))

stat_tbl <- plot_tbl %>% 
  group_by(site, trt) %>% 
  summarise(mean = mean(rsp),
            sd = sd(rsp))

ggplot(stat_tbl, aes(x = site, y = mean, group = trt, fill = trt)) + 
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                width = 0.2, position = position_dodge(0.9)) +
  theme_bw() +
  labs(fill = "Behandlung")


```
