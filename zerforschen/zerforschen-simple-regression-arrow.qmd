In diesem Zerforschenbeispiel wollen wir uns eine simple lineare Regression in einem Scatterplot anschauen. Das schöne an dem Beispiel ist, dass wir hier zum einen noch einen Pfeil einfügen wollen und dass wir nur einen Bereich darstellen wollen. Die Gerade fürht also nicht durch den gesamten Plot. Sonst haben wir dann noch die Herausforderung, dass wir einmal die Geradengleichung zusammen mit dem Bestimmtheitsmaß $R^2$ ergänzen müssen.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Eine simple lineare Regression mit Bestimmtheitsmaß $R^2$ für die Gerade durch die Punkte.](images/eda/zerforschen_regression_linear_02.jpeg){#fig-simple-regression fig-align="center" width="70%"}

Auch hier mache ich es mir etwas einfacher und erschaffe mir die Daten dann direkt in R. Ich baue mir also einen `tibble()` mit den ungefähren Werten aus der Abbildung. Das war ein wenig aufwendig, aber nach einigem Hin und Her passte dann auch die Werte zu der Abbildung.

```{r}
shoot_n_tbl <- tibble(n_in_shoot = c(2.5, 3.5, 3.9, 4.1, 4.2, 4.3 ,4.5, 4.7, 5.1, 5.1, 5.8),
                      freshmass = c(7.5, 9, 12.5, 11, 18, 16, 12, 17, 16, 20, 21))
```

Dann rechnen wir auch schon die lineare Regression mit der Funktion `lm()` die uns dann die Koeffizienten der Geraden wiedergibt.

```{r}
shoot_n_fit <- lm(freshmass ~ n_in_shoot, data = shoot_n_tbl)
```

Dann einmal die Koeffizienten mit der Funktion `coef()` ausgelesen. Den Rest brauchen wir hier nicht für die Abbildung.

```{r}
shoot_n_fit |> coef()
```

Aus den Koeffizienten baue ich mir dann auch die Geradengleichung einmal in R. Ich kann dann die Gleichung mit der Funktion `geom_function()` gleich in meine nachgebaute Abbildung ergänzen.

```{r}
shoot_n_func <- \(x){4.35 * x - 4.33}
```

Ich berechne dann einmal das Bestimmtheitsmaß $R^2$ mit der Funktion `r2()` aus dem R Paket `{performance}`. Wir sehen, ich habe die Werte recht gut abgelesen, dass passt ganz gut mit dem Bestimmtheitsmaß $R^2$.

```{r}
shoot_n_fit |> r2()
```

Und dann bauen wir uns schon die @fig-zerforschen-shoot_n-01 einmal nach. Der etwas aufwendigere Teil sind die Achsenbeschriftungen sowie die Ergänzung des Pfeils und der Beschriftung. Das verbraucht dann immer etwas mehr Code und Platz. Ich habe dann etwas die Achseneinteilung geändert und stelle nicht den ganzen Bereich dar. Es reicht auch vollkommen nur den Bereich zu visualisieren, der von Interesse ist. Daher beginnt dann meine $x$-Achse auch bei Zwei und nicht bei Null.

```{r}
#| echo: true
#| warning: false
#| message: false
#| label: fig-zerforschen-shoot_n-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Visualisierung der simplen linearen Regression mit einem Pfeil sowie den Informationen zu der Geradengleichung und dem Bestimmtheitsmaß $R^2$."

shoot_n_tbl |> 
  ggplot(aes(n_in_shoot, freshmass)) +
  theme_minimal() +
  geom_point(size = 4, color = "red4") +
  geom_function(fun = shoot_n_func, color = "black", size = 1, xlim = c(2.5, 6)) + 
  labs(x = "N in shoot [% DM]", y = TeX(r"(Shoot fresh mass \[g plant$^{-1}$\] - 17 DAP)")) +
  scale_x_continuous(breaks = c(2, 3, 4, 5, 6), limits = c(2, 6)) +
  scale_y_continuous(breaks = c(0, 5, 10, 15, 20, 25), limits = c(0, 25)) +
  annotate("text", x = 2.5, y = 22, hjust = "left", color = "black", size = 4, 
           label = TeX(r"($y = 4.35 \cdot x - 4.33$)")) +
  annotate("text", x = 2.5, y = 20, hjust = "left", color = "black", size = 4, 
           label = TeX(r"($R^2 = 0.75$)")) +
  geom_curve(x = 3.5, y = 5.1, xend = 2.55, yend = 7,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.5) +
  annotate("text", x = 3.6, y = 4.5, label = "Trt. with\n50% cattail",
           hjust = "left", size = 4)
```
