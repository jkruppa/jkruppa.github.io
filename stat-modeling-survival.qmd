```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Überlebenszeitanalysen {#sec-survival}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

In diesem Abschnitt wollen wir uns nochmal mit der Zeit beschäftigen. Wir haben hier aber keine zeitlichen Messwiederholungen an dem gleichen Subjekt, Tier oder Pflanze vorliegen sondern wir schauen uns an, wie lange es dauert bis ein Ereignis eintritt. Deshalb nennen wir diese Analysen algemein Ereigniszeitanalysen. Häufig schauen wir uns aber die zeit an, die es braucht, bis das Ereignis "tot" für eine Beobachtung eintritt. Daher heißt der Abschnitt auch Überlebenszeitanalysen (eng. *survival analysis*).

Überlebenszeitanalysen sind in den Humanwissenschaften und inbesondere in der Onkologie *das* Thema schlechthin. Wir beantworten hier die Fragen nach *3 Monatsmortalität* und wollen wissen, wie viele patienten nach einer Behandlung mit einem Krebsmedikament nach drei Monaten noch leben. Du kanst dir vorstellen, dass es hier eine Menge an Annahmen und Modellen gibt. Wir wollen uns hier in dem Abschnitt die Grundlagen anschauen. Da vieles in der Wissenschaft meist in englischer Sprache abläuft, kann ich hier sehr den das Buch von @david2012survival empfehlen. Insbesondere die Einführungskapitel sind sehr gut geschrieben. Diese Ddetailtiefe wie bei @david2012survival werde ich in diesem Abschnitt nicht erreichen. In den Agrarwissenschaften ist alles ein wenig anders als in den Humanwissenschaften.

Wenn wir Überlebenszeit in den Agrarwisenschaften anschauen, dann sind wir eigentlich immer in der Tierzucht. Wir haben verschiedenen Verfahren, die wir miteinander vergleichen wollen um zu sehen, ob wir weniger Tierverluste über die Zeit haben. Da wir aber alle Tiere beobachten, werden wir keine Tiere verlieren. In einer klinischen Studie mit Menschen kann es zu zensierten Ereignissen kommen, wenn der Patient nicht wieder auftaucht oder die Studie verlässt. Eine Zensierung ist in den Agrarwissenschaften faktisch nicht möglich. Mir fällt kein Setting ein indem Tiere aus dem Versuch *verschwinden* und der versucht trotzdem noch auswertbar bleibt.

::: column-margin
Wir immer gibt es eine gute Auswahl an aktuellen Tutorien [Survival Analysis Basics](http://www.sthda.com/english/wiki/survival-analysis-basics), die hier auch aufgegrifen werden. Ein umfangreicheres Tutorium in R findet sich unter [Survival Analysis in R](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html).
:::

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               survminer, survival)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

https://rviews.rstudio.com/2017/09/25/survival-analysis-with-r/

```{r}

c(1561, 0, 0, -2, -3, 0, -1) %>% cumsum()

tibble(death = c(rep(0, 4,), rpois(10, 0.75)),
       count = cumsum(c(1512, -1*death[-1]))) %>% 
  uncount(death, .remove = FALSE)

library(tidyr) # version >= 0.8.0
df <- data.frame(var1=c('a', 'b', 'c'), var2=c('d', 'e', 'f'), freq=1:3)
df %>% 
  uncount(freq)

```

## Visualisierung über Kaplan Meier Kurven

```{r}
#| message: false

set.seed(20220929)
surv_tbl <- tibble(times_raw = round(c(rpois(50, 10), rpois(50, 14))),
                   status = rbinom(100, 1, 0.8),
                   trt = factor(gl(2, 50), labels = c("fruitflyEx", "control")),
                   sex = sample(factor(gl(2, 50), labels = c("male", "female"))),
                   times= ifelse(sex == "male", times_raw - 2, times_raw + 5),
                   weight = round(c(rnorm(50, 11, 3), rnorm(50, 19, 3)), 2),
                   weight_bin = ifelse(weight <= 15, "low", "high"))

fit <- survfit(Surv(times, status) ~ sex,
               data = surv_tbl)
# Visualize with survminer
ggsurvplot(fit, data = surv_tbl, risk.table = TRUE,
           surv.median.line = "hv",
           ggtheme = theme_light(),
           palette = cbbPalette[2:8])

fit <- survfit(Surv(times, status) ~ trt,
               data = surv_tbl)
# Visualize with survminer
ggsurvplot(fit, data = surv_tbl, risk.table = TRUE,
           surv.median.line = "hv",
           ggtheme = theme_light(),
           palette = cbbPalette[2:8])

fit <- survfit(Surv(times, status) ~ weight_bin,
               data = surv_tbl)
# Visualize with survminer
ggsurvplot(fit, data = surv_tbl, risk.table = TRUE,
           surv.median.line = "hv",
           ggtheme = theme_light(),
           palette = cbbPalette[2:8])

coxph(Surv(times, status) ~ trt + sex + weight, data = surv_tbl)

coxph(Surv(times, status) ~ trt + sex + weight_bin, data = surv_tbl)


```

## Cox Proportional-Hazards Modell

::: column-margin
Auch im Fall des Cox Proportional-Hazards Modells kann ich hier nur eine Übersicht geben. Es findet sich natürlich auch ein Tutorium zum [Cox Proportional-Hazards Model Tools](http://www.sthda.com/english/wiki/cox-proportional-hazards-model)
:::

## Referenzen {.unnumbered}
