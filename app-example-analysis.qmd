```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Beispielhafte Auswertungen {#sec-beispiel-auswertung}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

::: callout-tip
## Beispielhafte Auswertungen per Video

Du findest auf YouTube in der Playlist [Spielweise in R (Level 3)](https://www.youtube.com/playlist?list=PLe51bCp9JvEFZeYClBKad6yurjUzc8jXp) viele der Analysen hier einmal als Video. Ich werde zwar alles nochmal hier als Text aufschreiben, aber manchmal ist das Sehen und Hören dann einfacher.
:::

Worum geht es in diesem Kapitel? Ich rechne hier fröhlich Dinge und präsentiere dann die Ergebnisse. Das heißt, du findest hier beispielhafte Auswertungen, die eventuell auch deine Problemstellung betreffen. Da *ich selber* meist keine Ahnung von der Biologie hinter den Experimenten habe, musst du mir nachsehen, dass ich hier nie zu einem echten biologischen Schluss oder Auswertung komme.

-   In @sec-app-example-iso schauen wir uns einmal die Erstellung eines Isoplethendiagramms für Münster & Osnabrück aus den frei verfügbaren Daten des Deutschen Wetterdienstes an.
-   In @sec-app-example-number-groups rechnen wir einmal ein simples Beispiel für Zähldaten in zwei Gruppen. Wir haben hier nicht wiederholt gezählt, sondern nur jeweils einmal an einer Stelle.
-   In @sec-app-example-anova-inter rechnen wir nochmal eine zweifaktorielle ANOVA mit Interaktionsterm durch. Wir kriegen dann unser *Compact letter display* wie auch die Konfidenzintervalle wieder.
-   In @sec-mult-map-ght rechnen wir einen Games Howell Test für normalverteilte Daten mit Varianzheterogenität. Hier hauen wir ein wenig auf die Pauke und rechnen alles in wenigen Zeilen mit der Funktion `map()`. War eine spaßige Auswerung für mich, da ich hier mal wieder programmieren üben konnte.
-   In @sec-root-quality schauen wir uns ein größeres Beispiel für die Analyse von Wurzelbonituren an. Im Prinzip geht das natürlich auch alles für jede andere Bonitur. Wenn du eine andere Bonitur hast, kannst du natürlich auch den Weg der Analyse gehen.
-   In @sec-cutting haben wir ein etwas komplexeres Beispiel für vier Outcomes, die an acht Terminen gemessen wurden. Wir sehen hier einmal, wie die Daten eingelesen werden und ein Korrelationsplot über die vier Outcomes erstellt wird.
-   In @sec-tukeyHSD schauen wir uns den Tukey Test für paaweise Vergleiche einmal an. Wir nutzen hier die schnelle Variante mit der Funktion `aov()`. Für das *Compact letter display* müssen wir uns dann ein wenig strecken, aber es geht dann auch.
-   In @sec-plowing-data haben wir nochmal ein schönes Beispiel für eine Analyse mit mehreren Faktoren und verschiedenen Outcomes. Wir haben also einen Blumenstrauß an Daten, die wir sortieren und auswerten müssen. Da ich selber keine Ahnung vom Pflügen habe, gehen wir die Sache distanziert durch.
-   In @sec-app-mixed-cutting schauen wir uns ein lineares gemischtes Modell an. Das heißt, wir wollen einen Gruppenvergleich rechnen und dabei die verschiedenen Zeitpunkte mit berücksichtigen. Anstatt also jeden Zeitpunkt einzeln, rechnen wir alle Zeitpunkte zusammen.
-   In @sec-app-spinach-metal wollen wir uns die Konzentration von drei Spurenelementen als Outcome in Blättern und Stielen der Spinatpflanze anschauen. Wir haben hierfür dann die Konzentration von Fe, Cd und Zn gemessen. Insgesamt gab es sieben verschiedene Behandlungsformen.
-   In @sec-app-logger

Je weiter du nach unten in diesem Kapitel kommst, desto weniger Text wirst du finden. Ich werde noch eine Zeit brauchen, bis ich alles wieder schon mit Text hier verarbeitet habe. Es wird aber immer mal wieder etwas *messy* aussehen. Hier wird eben auch gearbeitet. Der R Code wird dann aber immer funktionieren, nur die Beschreibungen sind dann eben manchmal nicht da.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, readxl, janitor,
               broom, multcomp, emmeans, effectsize, report,
               see, metR, parameters, multcompView,
               modelsummary, rstatix, corrplot, psych,
               ordinal, rcompanion, lme4, performance,
               scales, lubridate,
               conflicted)
## resolve some conflicts with same function naming
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("chisq.test", "stats")
conflict_prefer("%+%", "ggplot2")
conflict_prefer("eta_squared", "effectsize")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Isoplethendiagramm für Münster & Osnabrück {#sec-app-example-iso}

{{< include app-example-analysis/app-example-analysis-01.qmd >}}

## Analyse von Anzahlen in zwei Gruppen {#sec-app-example-number-groups}

{{< include app-example-analysis/app-example-analysis-02.qmd >}}

## Auswertung zweifaktorielle ANOVA mit Interaktion {#sec-app-example-anova-inter}

{{< include app-example-analysis/app-example-analysis-03.qmd >}}

## Multiples Testen mit Games Howell Test {#sec-mult-map-ght}

{{< include app-example-analysis/app-example-analysis-04.qmd >}}

## Wurzelqualität in einem zweifaktoriellen Design {#sec-root-quality}

{{< include app-example-analysis/app-example-analysis-05.qmd >}}

## Wachstum nach Rückschnitt mit Messwiederholung {#sec-cutting}

{{< include app-example-analysis/app-example-analysis-06.qmd >}}

## Einen TukeyHSD Test rechnen {#sec-tukeyHSD}

{{< include app-example-analysis/app-example-analysis-07.qmd >}}

## Auswertung von Pflugdaten mit `ggplot` Templates {#sec-plowing-data}

{{< include app-example-analysis/app-example-analysis-08.qmd >}}

## Auswertung mit Messwiederholungen {#sec-app-mixed-cutting}

{{< include app-example-analysis/app-example-analysis-09.qmd >}}

## Spurenelemente in Spinatblättern und Stielen {#sec-app-spinach-metal}

{{< include app-example-analysis/app-example-analysis-10.qmd >}}

## Daten eines automatischen Loggers {#sec-app-logger}

```{r}
log_tbl <- read_excel("data/log_data.xlsx") %>% 
  mutate(date = as_date(date, format = '%d.%m.%Y'),
         date_time = as_datetime(str_c(date, " ", time))) %>% 
  select(date_time, everything())
```

Insgesamt hat unsere Datei $n = `r nrow(log_tbl)`$ Beobachtungen für die Zeit vom 21. November 2022 bis zum 16. Dezember 2022.

```{r}
log_tbl
```

Wir wollen dann auch die Outcomes nochmal anders benennen.

```{r}
log_plot_tbl <- log_tbl %>% 
  pivot_longer(cols = co2:relh, 
               names_to = "outcome",
               values_to = "rsp") %>% 
  mutate(outcome = factor(outcome, 
                          labels = c("CO2", "Temperatur", "Rel. Luftfeuchtigkeit"))) 
```

@fig-app-log-01

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-log-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Abbildung der drei Outcomes über alle `r nrow(log_tbl)` Messpunkte."

ggplot(log_plot_tbl, aes(date_time, rsp, color = outcome)) +
  theme_minimal() +
  geom_line() +
  facet_wrap(~ outcome, scales = "free_y", nrow = 3) +
  scale_x_datetime(date_labels = "%b %d", date_breaks = "3 day",
                   date_minor_breaks = "1 day") +
  theme(legend.position = "none") +
  labs(x = "Datum", y = "")
```

```{r}
#| message: false
#| warning: false

log_plot_sum_tbl <- log_plot_tbl %>% 
  group_by(date, outcome) %>% 
  summarise(mean = mean(rsp),
            median = median(rsp),
            sd = sd(rsp))
```

@fig-app-log-02

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-log-02
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Abbildung der drei Outcomes gemittelt für jeden Tag mit der Standardabweichung für den jeweiligen Tag über alle Zeitpunkte."

ggplot(log_plot_sum_tbl, aes(date, mean)) +
  theme_minimal() +
  geom_line(aes(color = outcome)) +
  geom_ribbon(aes(ymin = mean - sd, 
                  ymax = mean + sd, 
                  fill = outcome), alpha = .2) +
  facet_wrap(~ outcome, scales = "free_y", nrow = 3) +
  scale_x_date(date_labels = "%b %d", date_breaks = "3 day",
               date_minor_breaks = "1 day") +
  theme(legend.position = "none") +
  labs(x = "Datum", y = "")
```

```{r}
#| message: false
#| warning: false

log_plot_filter_tbl <- log_plot_tbl %>% 
  filter(time == "12:00:00")
```

@fig-app-log-03

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-log-03
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Abbildung der drei Outcomes für den Zeitpunkt 12:00:00."

ggplot(log_plot_filter_tbl, aes(date, rsp, color = outcome)) +
  theme_minimal() +
  geom_line() +
  facet_wrap(~ outcome, scales = "free_y", nrow = 3) +
  scale_x_date(date_labels = "%b %d", date_breaks = "3 day",
               date_minor_breaks = "1 day") +
  theme(legend.position = "none") +
  labs(x = "Datum", y = "")
```
