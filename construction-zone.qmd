```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, glue, ggtext,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
theme_marginal <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (seit 07.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zum Beginn des WiSe 2025/26 eine neue Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll.
:::

::: {layout="[15,85]" layout-valign="top"}
![](images/personal_opinion.png){fig-align="center" width="100%"}

> *"Aktuell wird gerade an den Marginal effects models gebaut... das wird jedenfalls so seine Zeit noch brauchen, bis ich hier einen Strang und Grund drin habe." --- Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.*
:::

!["foo" Quelle: https://easystats.github.io/modelbased](images/allregressions.png){#fig-all-regression fig-align="center" width="100%"}

1.  Draw what you want to visualize
2.  Make models for it
3.  Select the best model
4.  Visualize the best model
5.  Investigate its parameters

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,
               ggpmisc, readxl, conflicted)
conflicts_prefer(dplyr::mutate)
conflicts_prefer(dplyr::summarize)
conflicts_prefer(dplyr::filter)
conflicts_prefer(ggplot2::annotate)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
## 
nice_number <- label_number(style_negative = "minus", accuracy = 0.01)
nice_p <- label_pvalue(prefix = c("p < ", "p = ", "p > "))
find_intercept <- function(x1, y1, slope) {
  intercept <- slope * (-x1) + y1
  return(intercept)
}
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_model_tbl <- read_excel("data/fleas_model_data.xlsx") |> 
  mutate(feeding = as_factor(feeding),
         stage = as_factor(stage),
         bonitur = as.numeric(bonitur),
         infected = factor(infected, labels = c("healthy", "infected"))) |> 
  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)
```

## Hypothesen

$$
Z=\frac{h(\hat{\theta})-H_0}{\sqrt{\hat{V}[h(\hat{\theta})]}}
$$

```{r}
feeding_fit = lm(jump_length ~ 0 + feeding, data = flea_model_tbl)
coef(feeding_fit)
```

```{r}
summary(feeding_fit) |> coef()
```

$$
Z = \cfrac{\hat{\beta_1}-H_0}{\sqrt{\widehat{V}[\beta_1]}} = \cfrac{75.43938 - 0}{4.791469} = 15.74
$$

```{r}
2*pt(15.74452, df = 45, lower.tail = FALSE)
```

```{r}
feeding_fit <-  lm(jump_length ~ feeding * stage, data = flea_model_tbl)
coef(feeding_fit)
```

## Prädiktion

```{r}
simple_tbl <- flea_model_tbl |> 
  filter(stage == "adult")
simple_fit <- lm(jump_length ~ feeding, simple_tbl)
coef(simple_fit)
```

```{r}
predictions(simple_fit)
avg_predictions(simple_fit)
```

```{r}
plot_predictions(simple_fit, by = "feeding")
```

```{r}
simple_2_tbl <- flea_model_tbl |> 
  filter(stage == "adult")
simple_2_fit <- lm(jump_length ~ weight*feeding, simple_2_tbl)
coef(simple_2_fit)
```

```{r}
#| eval: false
simple_2_fit |> broom::augment()
predictions(simple_2_fit)
avg_predictions(simple_2_fit, by = "feeding")

tibble(weight = simple_2_tbl$weight,
       jump_length = simple_2_tbl$jump_length, 
       feeding = simple_2_tbl$feeding,
       estimate = predictions(simple_2_fit)$estimate) |> 
  ggplot(aes(weight, estimate, shape = feeding)) +
  geom_point(aes(weight, jump_length), color = "blue") +
  geom_point(color = "red") +
  geom_line(aes(y = predict(simple_2_fit))) +
  geom_hline(yintercept = avg_predictions(simple_2_fit, by = "feeding")$estimate)

```

```{r}
plot_predictions(simple_2_fit, by = c("weight", "feeding"))
```

## Counterfactual

```{r}
avg_comparisons(feeding_fit,
    by = "stage",
    variables = list("feeding" = "pairwise"),
    vcov = "HC3")
```

## Weitere R Pakete

Das [R Paket `{modelbased}`](https://easystats.github.io/modelbased/)

## Marginal effects models

## Philosophien zur Mittelwertbildung

### Average marginal effects (AME)

```{r}
jump_weight_slope <- function(x) 2.62 + (2 *-0.04 * x)
jump_weight_slope(c(5, 10, 15))
```

![foo. Modifiziert nach @heiss2022](images/marginal/flow-ame-trans.png){#fig-utest-intro-03 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-5

tangents <- model_sq |> 
  augment(newdata = tibble(weight = c(1:27))) |> 
  mutate(slope = jump_weight_slope(weight),
         intercept = find_intercept(weight, .fitted, slope)) |> 
  mutate(nice_label = glue("Gewicht: {weight}<br>",
                           "Fitted Gewicht: {nice_number(.fitted)}<br>",
                           "Steigung: **{nice_number(slope)}**"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  geom_abline(data = tangents, aes(slope = slope, intercept = intercept), 
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_point(data = tangents, aes(x = weight, y = .fitted), 
             size = 4, shape = 18, color = cb_pal[9]) +
  geom_richtext(aes(x = 15, y = 88, label = "Gemittelte Steigung: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Average marginal effects (AME)") 
```

```{r}
mfx_sq <- slopes(model_sq)
head(mfx_sq)
```

```{r}
mfx_sq |> 
  group_by(term) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
avg_slopes(model_sq)
```

### Marginal effects at the mean (MEM)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mem-trans.png){#fig-utest-intro-06 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-6

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_abline(intercept = find_intercept(9.95375, 69.24257, 1.83), slope = 1.83,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  annotate("point", x = 9.95375, y = 69.24, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 10, y = 75, label = "Steigung am Mittelwert: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Marginal effects at the mean (MEM)") 
```

```{r}
avg_jump_weight <- mean(flea_model_tbl$weight)
avg_jump_weight
```

```{r}
jump_weight_fitted <- model_sq |> 
  augment(newdata = tibble(weight = c(avg_jump_weight, avg_jump_weight + 0.001)))
jump_weight_fitted
```

```{r}
model_sq |> 
  emtrends(~ weight, var = "weight")
```

```{r}
model_sq |> 
  avg_slopes(newdata = "mean")
```

### Gruppierte marginale Effekte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-game-trans.png){#fig-utest-intro-05 fig-align="center" width="100%"}

Hier ist die Anordugn wichtig. Erst kommt die gruppierende Variable, dann der Rest.

```{r}
model_grp_sq <- lm(jump_length ~ stage * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-7

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

::: panel-tabset
## Schritt-für-Schritt

```{r}
mfx_grp_sq <- model_grp_sq |> 
  slopes(variables = "weight")
head(mfx_grp_sq)
```

```{r}
mfx_grp_sq |> 
  group_by(stage) |> 
  summarize(stage_ame = mean(estimate))
```

## `slopes()`

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         by = "stage")
```
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-8

weight_sum <- flea_model_tbl |> 
  group_by(stage) |> 
  summarise(mean(weight))

pred <- predict(model_grp_sq, newdata = tibble(weight = 14.05, stage = "adult"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_abline(intercept = find_intercept(14.05, 75.6691, 0.438), slope = 0.438,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  geom_abline(intercept = find_intercept(5.85, 58.59134, 0.807), slope = 0.807,
              linewidth = 0.5, color = cb_pal[7], linetype = "21") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25,
            fullrange = TRUE) +
  annotate("point", x = 14.05, y = 75.6691, size = 4, shape = 18, 
           color = cb_pal[9]) +
  annotate("point", x = 5.85, y = 58.59134, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 14.05, y = 81, label = "Steigung adult: 0.44"),
                site = 20, color = "black") +
  geom_richtext(aes(x = 5.85, y = 64.5, label = "Steigung juvenile: 0.81"),
                site = 20, color = "black") +
  scale_color_okabeito()
```

### Repräsentative Werte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mer-trans.png){#fig-utest-intro-07 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ feeding * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-9

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = feeding)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

```{r}
datagrid(model = model_grp_sq,
         weight = c(5, 10, 15),
         feeding = unique)
```

::: panel-tabset
## Ohne Gruppenvergleich

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5, 10, 15),
                            feeding = unique))
```

## Mit Gruppenvergleich

```{r}
comp_tbl <- as.data.frame(t(combn(levels(flea_model_tbl$feeding), 2))) |> 
    unite("z", sep = " - ")
```

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5),
                            feeding = unique))
```

```{r}
#| eval: false
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5),
                            feeding = unique),
         hypothesis = "pairwise")  |> 
  mutate(term = pluck(comp_tbl, "z"))
```
:::

```{r}
model_grp_sq |> 
  emtrends(~ weight + feeding, 
           var = "weight",
           at = list(weight = c(5, 10, 15),
                     feeding = c("sugar_water", "ketchup", "blood")),
           regrid = "response") 
```

### Kontrafaktische Vergleiche

Kontrafaktische Vergleiche (eng. *counterfactual*)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-counterfactual-trans.png){#fig-utest-intro-04 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ weight*I(weight^2)*feeding + count_leg,
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
cfct_data <- datagrid(model = model_grp_sq,
                      weight = c(5, 15),
                      grid_type = "counterfactual")
```

```{r}
nrow(flea_model_tbl)
nrow(cfct_data)
```

```{r}
mfx_cfct <- model_grp_sq |> 
  slopes(datagrid(weight = c(5, 15),
                  grid_type = "counterfactual"),
         variables = "weight")

rbind(head(mfx_cfct), tail(mfx_cfct))
```

```{r}
mfx_cfct |> 
  group_by(weight) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
model_grp_sq |> 
  avg_slopes(newdata = datagrid(weight = c(5, 20),
                                grid_type = "counterfactual"),
             variables = "weight",
             by = c("weight", "feeding"))
```

## Analyse von Zeitreihen

Hier nochmal `{mgcv}` und `{gamm4}`

[Introduction to Generalized Additive Mixed Models](https://r.qcbs.ca/workshop08/book-en/introduction-to-generalized-additive-mixed-models-gamms.html)

`s()` und Interaktion mit `s(x_1, by = f_1)`

## Links

-   [Mixed](https://stats.stackexchange.com/questions/95054/how-to-get-an-overall-p-value-and-effect-size-for-a-categorical-factor-in-a-mi)
-   [Mixed II](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html)
-   [Marginal and conditional effects for GLMMs with {marginaleffects} \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2022/11/29/conditional-marginal-marginaleffects/)
-   [R Paket `{gapminder}`](https://github.com/jennybc/gapminder)
-   [Gapminder](https://www.gapminder.org/data/)
-   [Lists are my secret weapon for reporting stats with knitr - Higher Order Functions](https://tjmahr.github.io/lists-knitr-secret-weapon/)
-   [Visualizing {dplyr}’s mutate(), summarize(), group_by(), and ungroup() with animations \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2024/04/04/group_by-summarize-ungroup-animations/)

## Referenzen {.unnumbered}
