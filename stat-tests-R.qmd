```{r echo = FALSE}
set.seed(2011654)
pacman::p_load(tidyverse, readxl, knitr, kableExtra, see,
               latex2exp, patchwork, parsnip)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

# Testen in R {#sec-test-R}

*Letzte Änderung am `r format(fs::file_info("stat-tests-R.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Alles andere wäre auch Wahnsinn." --- Bjarne Mädel, Der Tatortreiniger*

------------------------------------------------------------------------

![](images/caution.png){fig-align="center" width="50%"}

**Dieses Kapitel wird ist eine Baustelle und wird es vermutlich auch über das Jahr 2024 bleiben. Aktuell weiß ich nämlich noch nicht, wo ich mit dem Kapitel hin will und wo es stehen sollte. Daher können Teile des Codes und des Textes kurzfristig keinen Sinn ergeben oder nicht funktional sein. Es ist geplant eine fertige Version noch 2024 vorliegen zu haben.**

------------------------------------------------------------------------

Dieses Startkapitel zu den statistischen Gruppenvergleichen gibt dir nochmal eine Übersicht über das statistische Test in R.

[R Paket `{infer}`](https://infer.netlify.app/)

[`calculate()`](https://infer.netlify.app/reference/calculate)

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen. Ich setze auch noch das Theme in `{ggplot}` global auf `theme_minimal()` um hier dann Code zu sparen.

```{r echo = TRUE}
pacman::p_load(tidyverse, infer, conflicted)
theme_set(theme_minimal(base_size = 12))
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal)) |> 
  select(jump_length, animal)
```

```{r}
#| echo: false
#| message: false
#| tbl-cap: "Tabelle  der Sprunglängen [cm] von Hunden und Katzen."
#| label: tbl-data-ttest

data_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal)) |> 
  select(jump_length, animal)

data_tbl |> kable(align = "c", "pipe")
```

## R Paket `{infer}`

[Full infer Pipeline Examples](https://infer.netlify.app/articles/observed_stat_examples)

Als erstes müssen wir uns natürlich unsere Teststatistik $T_D$ aus unseren Daten berechnen. Ich nutze hier als Beispiel den Weg über den t-Test. Deshalb auch gleich die Option `stat = "t"`. Wie du dann aber in den folgenden Kapiteln sehen wirst, geht da noch mehr.

Aktuell haben wir folgende Optionen einmal in der @tbl-infer-option-calculate dargestellt. Das R Paket `{infer}` unterstützt dabei nur theoretische Tests für einen oder zwei Mittelwerte über die t-Verteilung oder einen oder zwei Anteile über die z-Verteilung. Wir können die Funktion [`calculate()`](https://infer.netlify.app/reference/calculate) nutzen um zwischen den verschiedenen statistischen Maßzahlen zu wählen, die wir Testen wollen.

| Option `stat =` in `calculate()` | Beschreibung |
|:--------------------------------:|:------------:|
|             `"mean"`             |              |
|            `"median"`            |              |
|             `"sum"`              |              |
|              `"sd"`              |              |
|             `"prop"`             |              |
|            `"count"`             |              |
|        `"diff in means"`         |              |
|       `"diff in medians"`        |              |
|        `"diff in props"`         |              |
|            `"chisq"`             |              |
|              `"f"`               |              |
|              `"t"`               |              |
|              `"z"`               |              |
|        `"ratio of props"`        |              |
|            `"slope"`             |              |
|          `"odds ratio"`          |              |
|        `"ratio of means"`        |              |
|         `"correlation"`          |              |

: Mögliche statistische Maßzahlen, die sich mit dem R Paket `{infer}` und der Funktion [`calculate()`](https://infer.netlify.app/reference/calculate) statistisch Testen lassen. Teilweise muss die Nullhypothese nochmal gesondert numerisch spezifiziert werden. {#tbl-infer-option-calculate}

### Berechung der Teststatistik $T_D$

::: panel-tabset
## Detailiert

```{r}
t_d <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") %>%
  calculate(stat = "t", order = c("dog", "cat"))
```

## `observed()`

```{r}
t_d <- flea_tbl |>
  observe(jump_length ~ animal,
          stat = "t", order = c("dog", "cat"))
```
:::

Was ist meine Nullhypothese

::: panel-tabset
## Simmulierte Null

```{r}
null_dist <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") %>%
  generate(reps = 1000, type = "permute") %>% 
  calculate(stat = "t", order = c("dog", "cat"))
```

## Theoretische Null

```{r}
null_dist_theory <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  assume("t")
```
:::

Dann schauen wir uns die Daten einmal zusammen mit der Nullhypothese an.

::: panel-tabset
## Simmulierte Null mit $T_D$

```{r}
visualize(null_dist) +
  shade_p_value(obs_stat = t_d, direction = "two-sided")
```

## Theoretische Null mit $T_D$

```{r}
visualize(null_dist_theory) +
  shade_p_value(obs_stat = t_d, direction = "two-sided")
```
:::

### Berechung vom $p$-Wert

```{r}
null_dist %>%
  get_p_value(obs_stat = t_d, direction = "two-sided")
```

### Berechnung vom 95% Konfidenzintervall

```{r}
boot_dist <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  generate(reps = 1000, type = "bootstrap") %>% 
  calculate(stat = "t", order = c("dog", "cat"))
```

::: panel-tabset
## Perzentile

```{r}
percentile_ci <- boot_dist |> 
  get_ci(type = "percentile")
```

## Standardfehler

```{r}
standard_error_ci <- boot_dist %>%
  get_ci(type = "se", point_estimate = t_d)
```
:::

```{r}
visualize(boot_dist) +
  shade_confidence_interval(endpoints = percentile_ci)
```

::: callout-note
## XX Test in `{infer}`

Auch hier können wir den XX Test in dem R Paket `{infer}` realisieren. Ein Vorteil von `{infer}` ist, dass wir die Funktionen sehr gut mit dem `|>`-Operator nutzen können. Deshalb hier einmal die *bessere* Implementierung.

::: panel-tabset
## `{infer}`

## `{base}`
:::

Eine detailliertere Einführung mit mehr Beispielen für die Nutzung vom [R Paket `{infer}`](https://infer.netlify.app/) findest du im Kapitel [Testen in R](#sec-test-R). Hier soll es dann bei der kurzen Gegenüberstellung bleiben.
:::

## R Paket `{report}`

[R Paket `{report}`](https://easystats.github.io/report/)
