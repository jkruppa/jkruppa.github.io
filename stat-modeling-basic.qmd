```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Multiple lineare Regression

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

::: {.callout-caution collapse="true"}
## Ein Wort zur Klausur

Wir nutzen folgende
:::

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               see, performance)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

```{r}
#| message: false

model_tbl <- read_csv2("data/flea_dog_cat_length_weight.csv") %>%
  mutate(animal = as_factor(animal),
         sex = as_factor(sex),
         log_hatch_time = round(log(hatch_time), 2))
```

In der @tbl-model-1 ist der Datensatz `model_tbl` nochmal dargestellt.

```{r}
#| message: false
#| echo: false
#| tbl-cap: Datensatz mit mehreren Outcomes zu Flöhen auf verschiedenen Tierarten.
#| label: tbl-model-1

model_raw_tbl <- model_tbl %>% 
  mutate(animal = as.character(animal),
         sex = as.character(sex))
rbind(head(model_raw_tbl),
      rep("...", times = ncol(model_raw_tbl)),
      tail(model_raw_tbl)) %>% 
  kable(align = "c", "pipe")

```

## Multiple lineare Regression

$$
y \sim x_1 + x_2 + ... + x_p
$$

$$
y \sim \beta_0 + \beta_1 x_1 + \beta_2 x_2 + ... + \beta_p x_p + \epsilon
$$

$$
\epsilon \sim \mathcal{N}(0, s^2_y)
$$

@fig-stat-modeling-mult-01-1

@fig-stat-modeling-mult-01-2

@fig-stat-modeling-mult-01-3

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| label: fig-stat-modeling-mult-01
#| fig-cap: "Darstellung des *counfounder* Effekts anhand des Zusammenhangs der Sprungweite in [cm] und dem Gewicht von Flöhen [mg]."
#| fig-subcap: 
#|   - "jump_length ~ weight"
#|   - "jump_length ~ weight + animal"
#|   - "jump_length ~ weight + animal + sex"
#| layout-nrow: 1
#| column: page

ggplot(model_tbl, aes(x = weight, y = jump_length)) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_bw() +
  geom_point() 

ggplot(model_tbl, aes(x = weight, y = jump_length, color = animal)) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_color_okabeito() +
  theme_bw() +
  geom_point() +
  labs(color  = "Tierart")

ggplot(model_tbl, aes(x = weight, y = jump_length, color = animal, shape = sex)) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_color_okabeito() +
  theme_bw() +
  geom_point() +
  labs(color  = "Tierart", shape = "Geschlecht")

```

## Interpretation von kontinuierlichen $x$

```{r}
lm(jump_length ~ weight, data = model_tbl) %>% 
  tidy() %>% 
  select(term, estimate)
```

```{r}
#| message: false
#| echo: true
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: foo
#| label: fig-stat-modeling-basic-00

ggplot(model_tbl, aes(x = weight, y = jump_length)) +
  theme_bw() +
  geom_point() 
```

## Interpretation von kategoriellen $x$ (2 Level)

```{r}
lm(jump_length ~ sex, data = model_tbl) %>% 
  tidy() %>% 
  select(term, estimate)
```

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: foo
#| label: fig-stat-modeling-basic-01

ggplot(model_tbl, aes(x = sex, y = jump_length, color = sex)) +
  theme_bw() +
  geom_jitter(width = 0.1) +
  geom_hline(yintercept = c(18.06, 18.06 + 4.90), 
             color = cbbPalette[c(2:3)], size = 1) +
  scale_color_okabeito() +
  theme(legend.position = "none") 

```

## Interpretation von kategoriellen $x$ ($2>$ Level)

```{r}
lm(jump_length ~ animal, data = model_tbl) %>% 
  tidy() %>% 
  select(term, estimate)
```

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: foo
#| label: fig-stat-modeling-basic-02

ggplot(model_tbl, aes(x = animal, y = jump_length, color = animal)) +
  theme_bw() +
  geom_jitter(width = 0.1) +
  geom_hline(yintercept = c(17.91, 17.91 + 2.61, 17.91 + 5.19), 
             color = cbbPalette[c(2:4)], size = 1) +
  scale_color_okabeito() +
  theme(legend.position = "none") 

```

## Vergleich von Modellen

### Welche Variable soll ins Modell?

```{r}
fit_1 <- lm(jump_length ~ animal, data = model_tbl)
fit_2 <- lm(jump_length ~ animal + sex, data = model_tbl)
fit_3 <- lm(jump_length ~ animal + sex + weight, data = model_tbl)
fit_4 <- lm(jump_length ~ animal + sex + sex:weight + animal:weight, data = model_tbl)
fit_5 <- lm(log(jump_length) ~ animal + sex, data = model_tbl)
```

```{r}
comp_res <- compare_performance(fit_1, fit_2, fit_3, fit_4, fit_5, rank = TRUE)

comp_res
```

```{r}
plot(comp_res)
```

```{r}
test_vuong(fit_1, fit_2, fit_3, fit_4, fit_5)
```

### War die Transformation sinnvoll?

```{r}
fit_1 <- lm(hatch_time ~ animal + sex, data = model_tbl)
fit_2 <- lm(log_hatch_time ~ animal + sex, data = model_tbl)
```

```{r}
comp_res <- compare_performance(fit_1, fit_2, rank = TRUE)

comp_res
```

## Generalisierung von `lm()` zu `glm()` und `[g]lmer()`

-   Die Funktion `lm()` nutzen wir, wenn das Outcome $y$ einer Normalverteilung folgt.
-   Die Funktion `glm()` nutzen wir, wenn das Outcome $y$ einer *andere* Verteilung folgt.
-   Die Funktion `lmer()` nutzen wir, wenn das Outcome $y$ einer Normalverteilung folgt *und* wir noch einen Block- oder Clusterfaktor vorliegen haben.
-   Die Funktion `glmer()` nutzen wir, wenn das Outcome $y$ einer *andere* Verteilung folgt *und* wir noch einen Block- oder Clusterfaktor vorliegen haben.
