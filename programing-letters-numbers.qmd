# Von Buchstaben und Zahlen {#sec-letter-number}

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
data_tbl <- read_excel("data/flea_dog_cat.xlsx")

```

Im vorherigen Kapitel haben wir die Datentabelle @tbl-dog-cat-long erschaffen. Bevor wir uns weiter mit statistischen Kennzahlen beschäftigen, wollen wir uns einmal die Realisierung der Tabelle @tbl-dog-cat-long in R anschauen. Dabei wollen wir auch Eigenschaften von Zahlen und Buchstaben lernen, die notwendig sind um mit einem Programm wie R kommunizieren zu können. Nun haben wir Tabelle @tbl-dog-cat-long mit Daten zu verschiedenen Oucomes, wie Sprungweite \[cm\], Anzahl an Flöhen auf Hunden und Katzen, die Boniturnoten oder aber den Infektionsstatus. Die Tabelle @tbl-dog-cat-long ist zwar nicht groß aber auch nicht wirklich klein. Wir wollen uns nun damit beschäftigen, die Zahlen sinnvoll in R darzustellen.

```{r dog-cat-long, echo = FALSE}
#| tbl-cap: Sprunglängen [cm] für Hunde- und Katzenflöhe. Die Tabelle ist im *Long*-Format dargestellt.

data_tbl %>%
  kable(align = "c", "pipe")


data_tbl <- data_tbl %>%
  mutate(flea_count = as.integer(flea_count),
         infected = as.logical(infected))

```

## Daten in R sind `tibble()`

Im folgenden sehen wir die Datentabelle @tbl-dog-cat-long in R als `tibble` dargestellt. Was ist nun ein `tibble`? Ein `tibble` ist zu aller erst ein Speicher für Daten in R. Das heist wir haben Spalten und Zeilen. Jede Spalte repräsentiert eine Messung oder Variable und die Zeilen jeweils eine Beobachtung.

```{r echo = FALSE}
data_tbl 
```

Als erstes erfahren wir, dass wir einen `A tibble: 14 x 5` vorliegen haben. Das heist, wir haben 14 Zeile und 5 Spalten. In einem `tibble` wird immer in der ersten Zeile angezeigt wieviele Beobachtungen wir in dem Datensatz haben. Wenn das `tibble` zu groß wird, werden wir nicht mehr das ganze `tibble` sehen sondern nur noch einen Ausschnitt. Im Weiteren hat jede Spalte noch eine Eigenschaft unter dem Spaltennamen

-   `<chr>` bedeutet `character`. Wir haben also hier Worte vorliegen.
-   `<dbl>` bedeutet `double`. Ein `double` ist eine Zahl mit Kommastellen.
-   `<int>` bedeutet `integer`. Ein `integer` ist eine ganze Zahl ohne Kommastellen.
-   `<lgl>` bedeutet `logical` oder `boolean`. Hier gibt es nur die Ausprägung *wahr* oder *falsch*. Somit `TRUE` oder `FALSE`. Statt den Worten `TRUE` oder `FALSE` kann hier auch 0 oder 1 stehen.
-   `<str>` bedeutet `string` der aus verschiedenen `character` besteht kann, getrennt durch Leerzeichen.

::: {.callout-note appearance="simple"}
This book was originally created using [bookdown](https://bookdown.org) and published at <https://rstudio-education.github.io/hopr/>. This site is a port of the original book source to the [Quarto](https://quarto.org) publishing system in order to provide an example of it's use.
:::

[Einführung in R - Teil 06 - Zahlen, Buchstaben, Skalenniveau - Was ist das eigentlich?](https://youtu.be/OnRaSmybhOQ)

::: column-page
| Variablenname | Beispiel                    | R         | Infomatik        | Skalenniveau                     | Verteilungsfamilie |
|---------------|-----------------------------|-----------|------------------|----------------------------------|--------------------|
| weight        | 12.3, 12.4, 5.4, 21.3, 13.4 | numeric   | double           | continuous                       | Gaussian           |
| count         | 5, 0, 12, 23, 1, 4, 21      | integer   | integer          | continuous                       | Poisson            |
| dosis         | low, mid, high              | ordered   |                  | categorical / discrete / ordinal | Ordinal            |
| field         | mainz, berlin, kiel         | factor    |                  | categorical / discrete           | Multinomial        |
| cancer        | 0, 1                        | factor    |                  | dichotomous / binary / nominal   | Binomial           |
| treatment     | "placebo", "aspirin"        | character | character/string | dichotomous / binary / nominal   | Binomial           |
| birth         | 2001-12-02, 2005-05-23      | date      |                  |                                  |                    |
:::

## Faktoren als Wörter zu Zahlen

Ein Computer und somit auch eine Programmsprache wie R kann keine Buchstaben **verrechnen**. Ein Programm kann nur mit Zahlen rechnen. Wir haben aber in der Datentabelle @tbl-dog-cat-long in der Spalte `animal` Buchstaben stehen. Da wir hier einen Kompromiss eingehen müssen führen wir Faktoren ein. Ein Faktor kombiniert Buchstaben mit Zahlen. Wir als Anwender sehen die Buchstaben, die Wörter bilden. Intern steht aber jedes Wort für eine Zahl, so dass R mit den Zahlen rechnen kann. Klingt ein wenig kryptisch, aber wir schauen uns einen `factor` einmal an.

```{r }

as_factor(data_tbl$animal[1:8])

```

Mit dem `$` Zeichen können wir uns eine einzelne Zeile aus dem Datensatz `data_tbl` rausziehen. Du kannst dir das `$` wie einen Kleiderbügel und das `data_tbl` als einen Schrank für Kleiderbügel verstellen. An dem Kleiderbügel hängen dann die einzelnen Zahlen und Worte. Im Weiteren nehmen wir nicht den ganzen Vektor `animal` mit vierzehn Einträgen sondern nur die ersten acht. Das machen wir mit `[1-8]` hinter dem `animal`. Schauen wir auf das Ergebnis, so erhalten wir sieben Mal `dog` und einmal `cat`. Insgesamt die ersten acht Einträge der Datentabelle. Darüber hinaus sehen wir auch, dass die der Faktor jetzt `Levels` hat. Exakt zwei Stück. Jeweils einen für `dog` und einen für `cat`.

```{r }
animal <- c("dog", "dog", "dog", "cat", "cat", "cat")

as.factor(animal)

factor(animal, levels = c("dog", "cat"))

factor(animal, labels = c("katze", "hund"))

as_factor(animal)


dose <- c("low", "low", "mid", "mid", "high", "high")

as.factor(dose)

factor(dose, levels = c("low", "mid", "high"))



```

## Von Wörtern und Objekten

Das mag etwas verwirrend sein, denn es gibt in R Wörter `string <str>` oder `character <chr>`. Wörter sind was anderes als Objekte. Streng genommen sind beides Wörter, aber in Objekten werden Dinge gespeichert wohin gegen das Wort einfach ein Wort ist. Deshalb kennezeichnen wir Wörter auch mit `"wort"` und zeigen damit, dass es sich hier um einen String handelt.

### Ein `string <str>` oder `character <chr>`

Wir tippen `"animal"` in R und erhalten `"animal"` zurück.

```{r}
"animal"
```

### Ein Objekt

Wir tippen `animal` ohne die Anführungszeichen in R und erhalten den Inhalt von `animal` ausgegeben.

```{r}
animal
```

Sollte es das Objekt `animal` nicht geben, also nicht über den Zuweisungspfeil `<-` erschaffen worden, dann wird eine Fehlermeldung von R ausgegeben:

`Fehler in eval(expr, envir, enclos) : Objekt 'animal' nicht gefunden`
