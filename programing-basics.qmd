# Grundlagen {#sec-basics}

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
data_tbl <- read_excel("data/flea_dog_cat.xlsx")

```

## Der Zuweisungspfeil `<-` {#sec-R-pfeil}

Mit dem Zuweisungspfeil speichern wir *Dinge* in Objekte in R. Das heist wir speichern damit intern in R Datensätze und viele andere Sachen, die wir dan später wieder verwenden wollen. Schauen wir uns das einmal im Beispiel an. Schrieben wir nur den Vektor `c()` mit Hunden und Katzen darin, so erscheint eine Ausgabe in R.

```{r}
c("dog", "dog", "cat", "cat", "fox", "fox")
```

Schreiben wir den gleichen Vektor und nutzen den Zuweisungspfeil, dann wird der Vektor in dem Objekt `animal` gespeichert.

```{r}
animal <- c("dog", "dog", "cat", "cat", "fox", "fox")
```

Wie kommen wir jetzt an die Sachen, die in `animal` drin sind? Wir können einfach `animal` in R schreiben und dann wird uns der Inhalt von `animal` ausgegeben.

```{r}
animal
```

## Funktionen {#sec-R-function}

**Was sind Funktionen**

## Die Pipe `%>%`

Im Weiteren nutzen wir den Pipe Operator dargestellt als `%\>%`. Du kannst dir den Pipe Operator als eine Art Röhre vorstellen in dem die Daten verändert werden und dann an die nächste Funktion weitergeleitet werden. Nehmen wir nochmal das Beispiel von weiter oben. Wir wollen die `character` Spalte aus dem Datensatz `data_tbl` extrahieren und dann in einen Faktor umwandeln.

```{r}
animal_1_tbl <- select(data_tbl, animal, jump_length)
animal_2_tbl <- filter(animal_1_tbl, jump_length >= 4)
sort(animal_2_tbl$jump_length)


data_tbl %>% 
  select(animal, jump_length) %>% 
  filter(jump_length >= 4) %>% 
  pull(jump_length) %>% 
  sort

```

Zuerst siehst du das alte Beispiel und dann die Nutzung des Pipe Operators `%>%`. Das Ergebnis ist das gleiche, aber der Code ist einfacher zu lesen. Wir nehmen den Datensatz `data_tbl` leiten den Datensatz in den Funktion `pull()` und ziehen uns damit den Vektor `animal` aus dem Datensatz. Den Vektor leiten wir dann weiter in die Funktion `extract()` und nehmen nur die ersten 5 Werte aus dem Vektor.

## Pakete und `library()`

In der Vanilla[^programing-basics-1] Variante hat R sehr wenige Funktionen. Ohne zusätzliche Pakete ist R mehr ein sehr potenter Taschenrechner. Leider mit der Funktionalität aus den 90'zigern, was die Programmierumgebeung und die Funktionen angeht. Das wollen wir aber nicht. Wir wollen auf den aktuellen Stand der Technik und auch Sprache programmieren. Daher nutzen wir zusätzliche R Pakete.

[^programing-basics-1]: Als Vanilla beschreibt man in der Informatikerwelt ein Programm, was keine zusätzlichen Pakete geladen hat. Also die reinst Form ohne zusätzlichen Geschmack.

![Auf den Reiter *Packages* klicken und dann *Install*. In der deutschen version vom RStudio mögen die Begriffe leicht anders sein.](images/programing_01.PNG){#fig-pro-01 fig-align="center" width="300"}

In @fig-pro-01 wird gezeigt wie du ein zusätzliches Paket installieren kannst. Hierbei ist nochmal wichtig den semantischen Unterschied zu wissen. Es gibt das Paket `tidyverse` was wir viel nutzen. Wir isnatllieren *einmalig* Pakete der Funktion `install.packages()` oder eben wie in @fig-pro-01 gezeigt. Wir nutzen die Funktion `library()` um ein Paket in R zu laden. Ja, es müsste anders heisen, tut es aber nicht.

```{r}
#| eval: false

## Das Paket tidyverse installieren - einmalig
install.packages(tidyverse)

## Das Paket tidyverse laden - jedes Mal
library(tidyverse)
```

Nun muss man sich immer merken, ob das Paket schon installiert ist oder man schreibt relativ viele `library()` untereinander. Das passiert schnell, wenn du viele Pakete laden willst. Dafür erlaubt dir das Paket `pacman` eine Vereinfachung. Die Funktion `p_load()` installiert Pakete, wenn die Pakete nicht installiert sind. Sollten die Pakete installiert sein, so werden die Pakete geladen. Du musst nur einmal `install.packages(pacman)` ausführen um das Paket `pacman` zu installieren.

```{r}
#| eval: false

pacman::p_load(tidyverse, magrittr, readxl)
```

Schlussendlich gibt es noch die Möglichkeit sich alles nochmal bei YoTube anzuschauen.

::: callout-tip
## Unterschied von Packages und Libraries in R

Du findest auf YouTube [Einführung in R - Teil 03 - Unterschied Packages und Libraries in R](https://youtu.be/TWimhd3ZyMM) als Video. Hier erkläre ich nochmal den Ablauf zwischen Installieren eines Paketes und dem Laden eines Paketes.
:::
