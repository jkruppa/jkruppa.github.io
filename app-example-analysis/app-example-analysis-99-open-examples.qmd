## Auswertung von Gewichten

```{r}
#| echo: false
data_tbl <- expand_grid(trt = 1:3, 
                        block = 1:3,
                        rep = 1:4) %>% 
  mutate(rsp = 10 + 2 * trt + block + rnorm(n(), 0, 2),
         trt = factor(trt, labels = c("low", "mid", "high")),
         block = factor(block, labels = c("I", "II", "III")))
```

```{r}
#| echo: false
data_tbl %>% 
  mutate(rsp = round(rsp, 2)) %>% 
  kable(align = "c", "pipe")
```

### Explorative Datenanalyse (EDA)

```{r}
ggplot(data_tbl, aes(trt, rsp, color = block)) +
  geom_boxplot()
```

```{r}
#| message: false

stat_tbl <- data_tbl %>% 
  group_by(trt, block) %>% 
  summarise(mean = mean(rsp),
            sd = sd(rsp),
            se = sd/sqrt(n()))

ggplot(stat_tbl, aes(x = trt, y = mean, fill = block)) + 
    geom_bar(position = position_dodge(), stat = "identity") +
    geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                  width = 0.2,
                  position = position_dodge(.9))
```

### Lineares Modell

```{r}
fit_1 <- lm(rsp ~ trt + block, data = data_tbl)

```

### ANOVA

```{r}
fit_1 %>% anova
```

### Gruppenvergleich mit dem `multcomp` Paket

https://broom.tidymodels.org/reference/tidy.glht.html

```{r}

fit_1 %>% 
  glht(linfct = mcp(trt = "Tukey")) %>% 
  tidy %>% 
  select(contrast, estimate, adj.p.value) %>% 
  mutate(across(where(is.numeric), round, 4))



```

### Gruppenvergleich mit der `emmeans` Paket

https://broom.tidymodels.org/reference/tidy.emmGrid.html

```{r}
fit_1 %>% 
  emmeans("trt") %>% 
  contrast(method = "pairwise") %>% 
  tidy %>% 
  select(contrast, estimate, adj.p.value) %>% 
  mutate(across(where(is.numeric), round, 4))

```

## Auswertung von Boniturnoten

```{r}
#| echo: false 

data_tbl <- tibble(block = 1:5,
                   A = c(2,3,4,3,2),
                   B = c(7,9,8,9,7),
                   C = c(6,5,4,7,4),
                   D = c(2,4,1,2,3),
                   E = c(4,5,3,7,6)) %>%
  gather(key = "variety", value = "rating", A:E) %>% 
  mutate(variety = as_factor(variety),
         block = factor(block, labels = c("I", "II", "III", "IV", "V"))) %>% 
 select(variety, block, rating)


data_tbl <- tibble(block = rep(1:3, each = 5),
                   A = c(2,3,3,4,1,3,2,2,4,4,2,2,3,1,2),
                   B = c(8,9,8,9,7,7,7,8,8,7,8,9,7,9,8),
                   C = c(6,5,5,6,4,4,5,3,6,4,7,6,4,6,4),
                   D = c(2,4,1,2,2,2,4,4,1,3,3,4,2,1,3),
                   E = c(4,4,2,7,5,4,3,4,7,7,5,5,4,6,6)) %>%
  gather(key = "variety", value = "rating", A:E) %>% 
  mutate(variety = as_factor(variety),
         block = factor(block, labels = c("I", "II", "III"))) %>% 
  select(variety, block, rating) %>% 
  arrange(variety, block)  

#data_tbl <- tibble(A = sample(1:9, 18, replace = TRUE, 
#                              prob = c(0, 0, 0, 0, 0.1, 0.2, 0.4, 0.2, 0.1)),
 #                  B = sample(1:9, 18, replace = TRUE, 
  #                            prob = c(0, 0, 0.1, 0.2, 0.4, 0.2, 0.1, 0, 0)),
   #                C = sample(1:9, 18, replace = TRUE, 
    #                          prob = c(0, 0, 0, 0.1, 0.2, 0.4, 0.2, 0.1, 0)),
     #              D = sample(1:9, 18, replace = TRUE, 
      #                        prob = c(0, 0, 0, 0, 0, 0.1, 0.2, 0.4, 0.3))) %>% 
  #gather(key = "trt", value = "rating") %>% 
  #mutate(trt = as_factor(trt), 
   #      block = rep(gl(3, 6), 4),
    #     block = factor(block, labels = c("I", "II", "III"))) %>% 
#  select(trt, block, rating)

```

```{r}
#| echo: false
data_tbl %>% 
  kable(align = "c", "pipe")
```

### Explorative Datenanalyse (EDA)

```{r}
#| message: false

ggplot(data_tbl, aes(variety, rating, color = block)) +
  geom_boxplot() +
  geom_dotplot(aes(fill = block), binaxis = "y", stackdir='center', 
               position=position_dodge(0.8))  

```

```{r}
#| message: false

ggplot(data_tbl, aes(variety, rating, fill = block)) +
  geom_dotplot(binaxis = "y", stackdir='center', 
               position=position_dodge(0.8)) +
  stat_summary(fun = median, fun.min = median, fun.max = median,
               geom = "crossbar", width = 0.5, 
               position=position_dodge(0.8)) 

```

### Friedman Test

```{r}

#friedman.test(rating ~ variety | block, data = data_tbl)

data_tbl <- tibble(Block = 1:4,
                   Sorte_1 = c(2,3,4,3),
                   Sorte_2 = c(7,9,8,9),
                   Sorte_3 = c(6,5,4,7),
                   Sorte_4 = c(2,4,1,2),
                   Sorte_5 = c(4,5,3,7)) %>%
  gather(key, value, Sorte_1:Sorte_5)

friedman.test(value ~ key | Block, data = data_tbl)


```

## Keimung

```{r}
germ_tbl <- read_excel("data/germination_data.xlsx")


```

## Schweine

```{r}
pig_tbl <- read_excel("data/pig_feed_data.xlsx")


```

## Komplexes Weizenbeispiel

Wir wollen uns nun ein kpmplexeres Datenbeispiel anschauen. In diesem Beispiel liegen zum einen die Daten in einem ungünstigen Wide-Format vor und müssen über `gather()` erst in das Long-Format gebracht werden. Zum anderen entstehen dadurch ungünstige Einträge in der `key`-Spalte, so dass wir hier nochmal einen regulären Ausdruck benötigen um den `character` Vektor umwandeln zu können.

Als wäre dies nicht schon kompliziert genug, schauen wir uns nicht nur ein Outcome an, sondern in der Summe die Outcomes Weizenhöhe, Chlorophyllgehalt sowie Frisch- und Trockengewichte. Der Weizen wurde in vier Blöcken angezogen und zu verschiedenen Zeitpunkten gemessen. Hierdurch entsteht ein komplexer Versuchsaufbau.

### Weizenhöhe

Die Höhe der Weizenpflanzen \[cm\] wurde in vier Blöcken an insgesamt neun Tagen gemessen. Die Datei `corn_plant_height.csv` beinhaltet die Daten des Versuchs. Für die folgende Auswertung nehmen wir an, das die Weizenhöhe normalverteilt ist. Wie beginnen mit einer exploratven Datenanalyse udn schauen uns die Daten einmal an.

#### Exlorative Datenanalyse

```{r}
#| message: false

plant_tbl <- read_csv2("data/corn_plant_height.csv") %>% 
  gather(key = "day", value = "height", "1...3":"9...47") %>% 
  mutate(day = str_replace(day, "...\\d+", ""),
         day = as_factor(day),
         treatment = as_factor(treatment),
         block = factor(block, labels = c("I", "II", "III", "IV")))

```

In der `csv`-Datei sind die die Tage jeweils fünfmal mit einer 1 bis 9 in den Spalten abgebildet. Wir nutzen die Funktion `read_csv2` um mit dem deutschen Format der `csv`-Datei umgehen zu können. Die Funktion `read_csv2` erkennt das `;` als Separator. Da R nicht mit gleichen Benennungen in den Spalten umgehen kann, setzt R hinter jeden Spaltennamen, der gleich ist drei Punkte und eine fortlaufende Zahl. Mit der Funktion `gather()` können wir die Spalten `1...3` bis `9...47` untereinanderkleben. Abschließend müssen wir noch den `...[Zahl]`-Teil loswerden. Das machen wir über den regulären Ausdruck in der Funktion `str_replace()`. Reguläre Ausdrücke musst du nicht verstehen, sind aber sehr mächtige Werkzeuge im Umgang mit großen Datensätzen.

Schauen wir uns nun einmal die Daten an. Unser Outcome (Y) ist `height` und auf X wollen wir das `treatment`. Das wollen wir die Boxplots noch nach dem Tag einfärben und jeweils ein Subplot für die vier Blöcke bauen.

```{r}
#| column: page
#| fig-height: 7
#| fig-width: 14
#| label: fig-crop-boxplot-1
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."


ggplot(plant_tbl, aes(x = treatment, y = height, fill = day)) +
  geom_boxplot() +
  facet_wrap(~ block) +
  labs(x = "Behandlung", y = "Weizenhöhe [cm]", fill = "Messtag") +
  theme_bw()
```

@fig-crop-boxplot-1 zeigt den entsprechenden Boxplot. Du siehst, dass du auf den ersten Blick nichts siehst. Bei einer so großen Datenmenge ist es selbst mit einem guten `ggplot()` schwer etwas zu erkennen. Hier müssen wir uns mehrere Fragen stellen...

-   ... wollen wir wirklich alle Blöcke getrennt auswerten?
-   ... wollen wir uns wirklich alle Tage anschauen? Oder geht es nicht eher um die Pflanzenhöhe **am Ende** des Versuches?
-   ... wollen wir wirklich alle `treatment` Stufen vergleichen?

```{r}
#| fig-align: center
#| label: fig-crop-boxplot-2
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."

plant_tbl %>% 
  filter(block == "I") %>% 
  filter(day %in% c(6, 7, 8, 9)) %>% 
  ggplot(aes(x = treatment, y = height, fill = day)) +
  geom_boxplot() +
  facet_wrap(~ block) +
  labs(x = "Behandlung", y = "Weizenhöhe [cm]", fill = "Messtag") +
  theme_bw()
```

@fig-crop-boxplot-2 zeigt einen Auschnitt in dem wir nur nach Block I und den Tagen 6 bis 9 gefiltert haben. In diesem Fall könnten wir auf den vollen Datensatz weitermachen *oder* vorab über `filter()` einen kleinern Datensatz bauen, der unsere Fragestellung bgut beantworten kann. Wir gehen jetzt den steinigeren Weg und analysieren den ganzen Datensatz - das muss nicht der bessere Weg sein!

#### Lineares Modell mit `lm()`

Wir beginnen mit einer ANOVA und müssen dafür ein lineare Modell schätzen. Dafür nutzen wir erst die Funktion `lm()` und anschließend mit dem Ergebnis des linearen Modells die Funktion `anova()` um eine Varianzanalyse durchzuführen.

```{r}
fit_height <- lm(height ~ treatment + day + block + 
                   treatment:day + treatment:block, 
                 data = plant_tbl)

fit_height %>% anova
```

Wir konzentrieren uns auf die Spalte `Pr(>F)` welche den p-Wert beinhaltet. Wir schauen welcher p-Wert kleiner ist als $\alpha = 5\% = 0.05$. Alle p-Werte sind signifikant. Mindestens zwei `treatment` Level unterscheiden sich, mindestens zwei `day` Level unterschieden sich und mindestens zwei `block` Level unterscheiden sich. Abschließend ist auch der Interaktionsterm zwischen den Behandlungen und den Tagen sowie den Behandlungen und den Blöcken signifikant.

```{r}
fit_height %>% anova %>% eta_squared(partial = FALSE)
```

```{r}
fit_height_lme <- lmer(height ~ treatment + block + (1|day), 
                       data = plant_tbl)

fit_height_lme %>% summary

fit_height_lme %>% 
  tidy(conf.int = TRUE, effects = "fixed")

model_performance(fit_height_lme) 

r2(fit_height_lme)

conf_tbl <- glht(fit_height_lme, linfct = mcp(treatment = "Tukey")) %>% 
  tidy(conf.int = TRUE) %>% 
  arrange(estimate) %>% 
  mutate(contrast = as_factor(contrast))

ggplot(conf_tbl, aes(x = contrast, y = estimate, 
                     ymin = conf.low, ymax = conf.high)) +
  geom_pointrange() +
  geom_hline(yintercept = 0, color = "red") +
  labs(x = "", y = "Mittelwertsdifferenz der Weizenhöhe [cm]") +
  coord_flip() +
  theme_bw()
```

### Chlorophyllgehalt

```{r}
#| message: false

chlorophyl_tbl <- read_csv2("data/corn_chlorophyl.csv") %>% 
  gather(key = "day", value = "chlorophyl", "1...3":"3...62") %>% 
  mutate(day = str_replace(day, "...\\d+", ""),
         day = as_factor(day),
         treatment = as_factor(treatment),
         block = factor(block, labels = c("I", "II", "III", "IV"))) %>% 
  filter(chlorophyl >= 20 & chlorophyl <= 100)

```

```{r}
#| column: page
#| fig-height: 7
#| fig-width: 14

ggplot(chlorophyl_tbl, aes(x = treatment, y = chlorophyl, fill = day)) +
  geom_boxplot() +
  facet_wrap(~ block) +
  labs(x = "Behandlung", y = "Chlorophyllgehalt", fill = "Messtag") +
  theme_bw()
```

### Frisch- und Trockenmasse

```{r}
#| message: false

burn_tbl <- read_csv2("data/corn_burning.csv") %>% 
  gather(key = "day_outcome", value = "drymatter", "1_FM":"3_TMperc") %>%
  separate(day_outcome, c("day", "outcome")) %>% 
  mutate(day = as_factor(day),
         treatment = as_factor(treatment),
         block = factor(block, labels = c("I", "II", "III", "IV")),
         outcome = as_factor(outcome)) 

```

```{r}
burn_tbl %>% 
  filter(outcome == "FM") %>% 
  ggplot(aes(x = treatment, y = drymatter, color = day)) +
  geom_point() +
  ##facet_wrap(~ block, scales = "free_y") +
  labs(x = "Behandlung", y = "Gewicht", fill = "Messtag") +
  theme_bw()
```
