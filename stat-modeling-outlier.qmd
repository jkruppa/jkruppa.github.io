```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Ausreißer {#sec-outlier}

*Letzte Änderung am `r format(fs::file_info("stat-modeling-outlier.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"You should be far more concentrated with your current trajectory than with your current results" --- Atomic Habits'*

------------------------------------------------------------------------

![](images/caution.png){fig-align="center" width="50%"}

------------------------------------------------------------------------

Was sind Ausreißer (eng. *Outlier*) in einem Datensatz? An sich schon eine schwierige Frage. Einige Wissenschaftler behaupten es gebe keine Ausreißer. Die Daten müssten so ausgewertet werden wie die Daten erhoben wurden. Was es gäbe wären technische Artefakte, diese müssten entdeckt und entfernt werden. Andere Wissenschaftler meinen, dass Ausreißer schon existieren und entfernt werden müssen, wenn diese Ausreißer nicht zu der Fragestellung oder den restlichen Daten passen. Es ist eine unbekannte Subpopulation, die sich mit einem oder zwei Vertretern in unsere Daten geschmuggelt hat. Diese Subpopulation verzerrt nur das Ergebnis, da wir mit diesen wenigen anderen Beobachtungen sowieso keine Aussage treffen können. Am Ende geht es aber darum Ausreißer zu finden und diese aus den Daten zu entfernen. Wir setzen dann diese Werte der Ausreißer auf `NA` für fehlender Wert (eng. *not available*). Oder aber wir ersetzen die Ausreißer durch passendere Werte aus unseren Daten. Im Prinzip ein wenig wie finde den Ausreißer und imputiere den Ausreißer mit einer anderen Zahl. Mehr zur Imputation von fehlenden Werten findest du in @sec-missing. Vermeide bitte eine Ausreißer/Imputationsschleife in der du immer wieder Ausreißer findest und diese dann wieder imputierst! Gerade dieses Thema Ausreißer kann sehr gut von biologischen Fachexperten diskutiert werden. In den folgenden Abschnitten wollen wir uns verschiedene Möglichkeiten der Detektion von Ausreißern annähern. Es geht wie immer von algorithmisch einfach zu komplexer.

::: {layout="[15,85]" layout-valign="top"}
![](images/angel_01.png){fig-align="center" width="100%"}

> Bitte beiße dich nicht an der *statistischen* Auslegung eines Ausreißers fest. Du bist der Herr oder die Frau über deine Daten. Kein Algorithmus weiß mehr als du. Das macht statistischen Engel natürlich traurig...
:::

Bitte beachte, dass wenn du weist, dass ein Wert nicht richtig ist, diesen dann auch entfernt. Wenn du während der Beprobung feststellst, dass du leider auf dem Feld zu wenig Erde mitgenommen hast, dann trage ein `NA` in die Tabelle ein. Unsinnige Werte einzutragen nur weil die ja so entstanden sind, macht keinen Sinn. Auch kann es sein, dass du dich mal vertippst. Das heißt, du hast in die Exceltabelle eine 0 oder ein Komma falsch gesetzt. Das findest du jetzt in der explorativen Datenanalyse raus. Dann bitte korrigiere diese Werte und mache bitte nicht hier mit der Detektion von Ausreißern weiter. Wenn du selber weist, warum da so ein komischer Wert in der Tabelle steht, dann korrigiere den Wert und schreibe in deinen Bericht, was du getan hast.

@lyons2013discovering und der wissenschaftlichen Veröffentlichung [Discovering the sigificance of 5$\sigma$](https://arxiv.org/pdf/1310.1284.pdf)

[Why do physicists mention "five sigma" in their results?](https://home.cern/resources/faqs/five-sigma)

@cook2021philosophy und der wissenschaftlichen Veröffentlichung [The Philosophy of Outliers: Reintegrating Rare Events Into Biological Science](https://academic.oup.com/icb/article/61/6/2191/6324573)

@michel2020new und der Veröffentlichung [New Author Guidelines for Displaying Data and Reporting Data Analysis and Statistical Methods in Experimental Biology](https://jpet.aspetjournals.org/content/jpet/372/1/136.full.pdf)

> *"Before identifying outliers, authors should consider the possibility that the data come from a lognormal distribution, which may make a value look as an outlier on a linear but not on a logarithmic scale."* --- @michel2020new, p. 139

Siehe auch das Kapitel zu dem [Transformieren von Daten](#sec-eda-transform)

> *"The choice of the appropriate method for handling apparent outliers depends on the specific circumstances and is up to the investigators. The \[journal\] ask authors to state in the methods or results section what quality control criteria were used to remove 'bad experiments' or outliers, whether these criteria were set in advance, and how many bad points or experiments were removed. "* --- @michel2020new, p. 139

> *" It may also make sense to report in an online supplement the details on every value or experiment removed as outliers, and to report in that supplement how the results would differ if outliers were not removed."* --- @michel2020new, p. 139

Siehe dazu auch das Kapitel der [Sensitivitätsanalyse](#sec-sensitivity). Nachdem wir Beobachtungen aus unseren Daten entfernt haben, ist es häufig üblich noch eine Sensitivitätsanalysen durchzuführen. Wir Vergleich dann das *gereinigte* Modell mit *anderen* Modellen. Oder wir wollen die Frage beantworten, was hat eigentlich mein Entfernen von Ausreißern am Ergebnis geändert? Habe ich eine wichtige Beobachtung rausgeschmissen? Am Ende musst dud ann natürlich enstscheiden, ob das Ergebnis ohne Ausreißer biologisch sinnvoller ist als das Experiment mit Ausreißern. Besonders wenn dann auch andere Ergbnisse rauskommen.

::: callout-tip
## Weitere Tutorien für das Finden von Ausreißern

-   [Outliers detection in R](https://statsandr.com/blog/outliers-detection-in-r/)
-   [8 methods to find outliers in R (with examples)](https://www.reneshbedre.com/blog/find-outliers.html)
-   [Outliers detection in R](https://rpubs.com/Alema/1000582)
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
set.seed(20240116)
pacman::p_load(tidyverse, magrittr, dlookr, broom, readxl,
               see, performance, 
               conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
conflict_prefer("set_names", "magrittr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Um die Detektion von Ausreißern besser zu verstehen, schauen wir uns zwei Beispieldaten an. Zum einen den Datensatz zu den langnasigen Hechten. Der Datensatz der langnasigen Hechte ist ein echter Datensatz, so dass wir hier eventuell Ausreißer finden werden.

```{r}
#| message: false
#| warning: false
longnose_tbl <- read_csv2("data/longnose.csv") 
```

In der @tbl-longnose-1 ist der Datensatz `longnose_tbl` nochmal für die ersten sieben Zeilen dargestellt. Wir haben hier keine fehlenden Werte vorliegen.

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Auszug aus dem Datensatz `longnose_tbl`. Wir betrachten die ersten sieben Zeilen des Datensatzes."
#| label: tbl-longnose-1

longnose_tbl %>% head(7) %>% kable(align = "c", "pipe")
```

Im Weiteren betrachten wir noch das Beispiel der Gummibärchendaten. Auch hier haben wir echte Daten vorliegen, so dass wir eventuell Ausreißer entdecken könnten. Da wir hier fehlende Werte in den Daten haben, entfernen wir alle fehlenden Werte mit der Funktion `na.omit()`. Damit löschen wir jede Zeile in den Daten, wo mindestens ein fehlender Wert auftritt. Da wir hier mittlerweile sehr viele Daten vorliegen haben, wollen wir das Problem auf die beiden Quellen *FU Berlin* und dem *Girls and Boys Day* eingrenzen.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  %>%
  filter(module %in% c("FU Berlin", "Girls and Boys Day")) %>% 
  select(gender, age, height, semester, most_liked) %>% 
  mutate(gender = as_factor(gender),
         most_liked = as_factor(most_liked)) %>% 
  na.omit()
```

In der @tbl-gummi-1 ist der Datensatz `gummi_tbl` nochmal für die ersten sieben Zeilen dargestellt. Nun haben wir hier in dem Datensatz zu den Gummibärchen auch keine fehlenden Werte mehr.

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Auszug aus dem Datensatz `gummi_tbl`. Wir betrachten die ersten sieben Zeilen des Datensatzes."
#| label: tbl-gummi-1

gummi_tbl %>% head(7) %>% kable(align = "c", "pipe")
```

Nun wollen wir uns aber erstmal den simpelsten Fall von Ausreißern und die Problematik dahinter visualisieren.

## Ausreißer mit Cook\`s Abstand

Mit der Cook'schen Distanz können wir herausfinden, ob eine einzelne Beobachtung ein Ausreißer im Zusammenhang zu den anderen Beobachtungen ist. Die Cook'sche Distanz misst, wie stark sich alle geschätzten Werte im Modell ändern, wenn der $i$-te Datenpunkt gelöscht wird. Veranschaulichen wir uns einmal den Zusammenhang an zwei Beispieldaten. Das [R Paket `{olsrr}`](https://olsrr.rsquaredacademy.com/articles/influence_measures.html) erlaubt eine weitreichende Diagnostik auf Ausreißer für einem normalverteilten Outcome $y$.

```{r}
#| message: false
#| echo: false
#| label: tbl-cook-tables
#| tbl-cap: "Zwei Datentabellen zum Vergleich der Detektion von Ausreißern nach Cook's Abstand."
#| tbl-subcap:
#|   - "Keine Ausreißer"
#|   - "Zwei Ausreißer"
#| layout-ncol: 2

no_out_tbl <- tibble(weight = c(1.2, 2.1, 2.5, 3.1, 4.6, 5.1, 7.9, 3.1, 4.3, 5.5),
                     jump_length = c(22, 23, 24, 23, 19, 34, 35, 36, 23, 22))

out_tbl <- tibble(weight = c(1.1, 2.3, 2.1, 3.7, 4.1, 5.4, 7.6, 4.3, 5.8, 8.1),
                  jump_length = c(190, 23, 24, 23, 19, 24, 25, 26, 28, 180))

no_out_tbl %>% kable(align = "c", "pipe")
out_tbl %>% kable(align = "c", "pipe")
```

Wir können uns die Daten der @tbl-cook-tables auch als Visualisierung in @fig-cooks-1 anschauen. Wir sehen die starken Ausreißer in der Visualisierung. Das ist auch so gewollt, wir haben die Ausreißer extra sehr extrem gewählt.

```{r}
#| message: false
#| echo: false
#| label: fig-cooks-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Scatterplots der Datentablle zum Vergleich der Detektion von Ausreißern nach Cook's Abstand."
#| fig-subcap: 
#|   - "Scatterplot ohne Ausreißer"
#|   - "Scatterplot mit Ausreißer"
#| layout-nrow: 1

ggplot(data = no_out_tbl, aes(x = weight, y = jump_length)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  ylim(0, 200) +
  theme_minimal()

ggplot(data = out_tbl, aes(x = weight, y = jump_length)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  ylim(0, 200) +
  theme_minimal()

```

Im Folgenden rechnen wir eine simple Gaussian lineare Regression auf den Daten und schauen einmal, was wir dann über die einzelnen Beobachtungen erfahren und ob wir die eingestellten Ausreißer wiederfinden.

```{r}
fit_cook <- lm(jump_length ~ weight, data = out_tbl)
```

Wir können die Funktion `augment()` nutzen um die Cook'sche Distanz als `.cooksd` aus dem linearen Modellfit zu berechnen. Wir lassen uns noch die Variable `weight` wiedergeben um uns später dann die Visualisierung zu erleichtern.

```{r}
cook_tbl <- fit_cook %>% 
  augment %>% 
  select(weight, .cooksd)
cook_tbl
```

Zuerst sehen wir, dass die $1$-ste und die $10$-te Beobachtung sehr hohe Werte der Cook'schen Distanz haben. Das heist hier ist irgendwas nicht in Ordnung. Das haben wir ja auch so erwartet. Die beiden Beobachtungen sind ja auch unsere erschaffene Ausreißer. Nun brauchen wir noch einen Threshold um zu entscheiden ab wann wir eine Beobachtung als Ausreißer definieren. Es hat sich als "Kulturkonstante" der Wert von $4/n$ als Threshold etabliert. Berechnen wir also einmal den Threshold für unseren Datensatz indem wir $4$ durch $n = 10$ teilen.

```{r}
cooks_border <- 4/nrow(cook_tbl)
cooks_border
```

Wir erhalten einen Threshold von $0.4$ gespeichert in `cooks_border`. In @fig-cook-2 haben wir den Threshold einmal eingezeichnet. Auf der x-Achse ist das `weight`, damit sich die Punkte etwas verteilen. Wir könnten auch den Index auf die x-Achse legen.

```{r}
#| echo: true
#| message: false
#| label: fig-cook-2
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Visualisierung der Ausreißer nach der Cook'schen Distanz. Die Grenze als rote Linie ist mit $4/n = 0.4$ berechnet worden."

ggplot(cook_tbl, aes(weight, .cooksd)) +
  geom_point() +
  geom_hline(yintercept = cooks_border, color = "red") +
  theme_minimal()
```

Wir können jetzt mit der Funktion `which()` bestimmen welche Beobachtungen wir als Ausreißer identifiziert haben. Was wir jetzt mit den Ausreißern machen, müssen wir uns überlegen. Im Prinzip haben wir zwei Möglichkeiten. Entweder entfernen wir die Beobachtungen aus unserem Datensatz oder aber wir setzen die Werte der Ausreißer auf `NA` oder eine andere *passendere* Zahl.

```{r}
#| message: false
remove_weight_id <- which(cook_tbl$.cooksd > cooks_border)
```

Weil es hier am Anfang noch relativ einfach sein soll, entfernen wir einfach die beiden Ausreißer aus unseren Daten. Wir erhalten dann einen kleineren Datensatz mit $n = 8$ Beobachtungen.

```{r}
#| message: false
out_tbl <- out_tbl[-remove_weight_id,]

out_tbl
```

Du siehst, dieser Zugang an die Detektion von Ausreißern ist sehr simple. Wir schauen einfach auf die Cook'sche Distanz und haben so einen schnellen Überblick. Ich empfehle auch gerne dieses Vorgehen um einmal einen Überblick über die Daten zu erhalten. Leider leifern nicht alle Modelle eine Cook'sche Distanz, daher müssen wir uns jetzt etwas strecken und noch andere Verfahren einmal ausprobieren.

## Ausreißer mit *leverage* (deu. *Hebelwirkung*)

```{r}
fit_leverage <- lm(jump_length ~ weight, data = out_tbl)
```

```{r}
fit_leverage %>% 
  augment()
```

Leverage `.hat`

:   Im Allgemeinen sollte ein Punkt mit einer Hebelwirkung von mehr als $(2k+2)/n$ sorgfältig geprüft werden, wobei $k$ die Anzahl der Prädiktorvariablen und $n$ die Anzahl der Beobachtungen ist.

## Ausreißer mit `{performance}`

Nun wollen wir uns den echten Daten zuwenden und dort einmal schauen, ob wir Ausreißer finden können. Wir nutzen hierzu einmal die Funktion `check_outliers()` aus dem R Paket `{performance}`. Die Funktion `check_outliers()` rechnet nicht *eine* statistische Maßzahl für die Bestimmung eines Ausreißers sondern eine ganze Reihe an Maßzahlen und gewichtet diese Maßzahlen. Am Ende trifft die Funktion `check_outliers()` dann eine Entscheidung welche Beobachtungen Ausreißer sind. Dabei werden alle Variablen betrachtet. Es gibt keinen Unterschied zwischen $y$ oder $x$. Wir nutzen den ganzen Datensatz. Das R Paket `{performance}` hat die Möglichkeit zur [Outliers detection (check for influential observations)](https://easystats.github.io/performance/reference/check_outliers.html).

```{r}
check_outliers(longnose_tbl)
```

Wir finden also sieben Ausreißer in unseren Daten. Wir können diese Beobachtungen einmal mit der Funktion `extract()` rausziehen und uns anschauen. Wie immer mit so Datensätzen erkennen wir hier noch nicht so ein richtiges Muster. Da müssen wir dann nochmal andere Funktionen nutzen.

```{r}
longnose_tbl %>% 
  extract(c(8, 17, 18, 21, 28, 43, 44), )
```

Ebenso schauen wir einmal bei dem Gummibärchendaten nach, welche der Beobachtungen ein Ausreißer sein könnten.

```{r}
check_outliers(gummi_tbl)
```

Wir wissen ja, dass wir recht viele Beobachtungen haben und wie wir sehen, scheint sich so ein Cluster in den hohen Zweihundertsiebzigern gebildet zu haben. Manchmal echt spannend, was man so finden kann.

```{r}
gummi_tbl %>% 
  extract(c(95, 119, 122, 179), )
```

Am Ende muss man dann bei der Funktion `check_outliers()` daran glauben, dass es sich um Ausreißer handelt. Wir müssen uns dann die Daten genau anschauen und entscheiden, ob wir wirklich *so viele* Beobachtungen entfernen wollen. Darüber hinaus wissen wir jetzt gar nicht, warum wir eine Beobachtung als Ausreißer definiert haben. Dafür müsstest du dann tiefer in die Funktion mit der Hilfeseite `?check_outliers()` einsteigen.

## Ausreißer mit `{dlookr}`

::: callout-caution
## Installation von `{dlookr}`

Aktuell ist das R Paket `{dlookr}` nur über GitHub zu installieren. Dafür einmal das R Paket `{devtools}` installieren und dann folgenden Code ausführen.

```{r}
#| eval: false
devtools::install_github("choonghyunryu/dlookr")
```
:::

Eine weitere Möglichkeit Ausreißer zu finden bietet das R Paket `{dlookr}` mit der Funktion `diagnose_outlier()`. Neben dieser Funktion hat das R Paket `{dlookr}` noch eine Vielzahl an weiteren Funktionen, die im Bereich der explorativen Datenanalyse von nutzen sein mögen. Schau dir einfach einmal das [R Paket und die Webseite](https://choonghyunryu.github.io/dlookr/articles/transformation.html#imputation-of-outliers) näher an.

Wir wollen hier jetzt nur die Funktion `diagnose_outlier()` und `plot_outlier()` nutzen. Also wir werden zuerst die Ausreißer finden und dann die Ausreißer einmal visualisieren. Im Gegensatz zu dem R Paket `{performance}` nutzt das R Paket `{dlookr}` nicht eine große Auswahl an Algorithmen und pooled die Ergebnisse. Wir schauen einmal was wir so finden und was die Vorteile und Nachteile sind.

```{r}
diagnose_outlier(longnose_tbl) %>% 
  filter(outliers_cnt > 0) %>% 
  arrange(desc(outliers_cnt))
```

Nachdem wir wieder den ganzen Datensatz unser langnasigen Hechte in dei Funktion `diagnose_outlier()` gesteckt haben, kriegen wir einen Datensatz wieder in dem jede Variable mit ihrer anzahl an Ausreißern `outliers_cnt` angezeigt wird. Wir haben also $7$ Ausreißer in dem Outcome `longnose` sowie in anderen Variablen für $x$. Schauen wir uns einmal die Ausreißer und deren Effekt in der @fig-miss-dlookr-plot-out an.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-miss-dlookr-plot-out
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Boxplot und Histogramm der Variablen `longnose` und `area` mit und ohne Ausreißer."
#| fig-subcap: 
#|   - "Outcome `longnose`."
#|   - "Variable `area`."
#| layout-nrow: 1

longnose_tbl %>% plot_outlier(longnose)
longnose_tbl %>% plot_outlier(area)
```

In @fig-miss-dlookr-plot-out-1 sehen wir den Boxplot und das Histogramm der des Outcomes `longnose` einmal mit den Ausreißern und einmal ohne die Ausreißer. Wie du sehen kannst ändert sih die Verteilung des Outcomes dramatisch, wenn wir die Ausreißer entfernen. Deshalb müssen wir besonders bei einem Outcome gut überlegen, ob es eine gute Idee ist, die Ausreißer zu entfernen. Auch in @fig-miss-dlookr-plot-out-2 sehen wir für die Variable `area` die Boxplots und das Histogramm einmal mit den Ausreißern und einmal ohne die Ausreißer. Auch hier sehen wir eine Veränderung in der Verteilung, wenn wir die Ausreißer entfernen. Du siehst, Ausreißer sind immer Teil der Daten und ändern deren Verteilung.

Wir machen jetzt einfach weiter und stören uns nicht an möglichen biologischen Implikationen. Wir wollen jetzt die Ausreißer nicht nur entfernen, sondern durch neue Datenpunkte ersetzen. Faktisch imputieren wir die Ausreißer. Wenn unsere zu imputierende Variable kontinuierlich ist, dann können wir folgende Verfahren nutzen um die Ausreißer in der Variablen zu ersetzen.

-   **mean**: Wir ersetzen die gefundenen Ausreißer mit dem Mittelwert der Variable.
-   **median** : Wir ersetzen die gefundenen Ausreißer mit dem Median der Variable.
-   **mode** : Wir ersetzen die gefundenen Ausreißer mit dem Modus der Variable. Also dem am meisten vorkommenden Wert in der Variable.
-   **capping** : Wir imputieren die "oberen" Ausreißer mit dem 95% Quantile und die "unteren" Ausreißer mit dem 5% Quantile. Wir schneiden sozusagen die Verteilungsenden ab.

Im folgenden nutzen wir einmal das `capping` oder die Quantileimputation sowie die `median` Imputation. Schauen wir mal was dann pasiert.

```{r}
longnose_imp_tbl <- longnose_tbl %>% 
  mutate(longnose_capping = imputate_outlier(., longnose, method = "capping"),
         longnose_median = imputate_outlier(., longnose, method = "median"))

```

In @fig-miss-dlookr-plot-out-imp sehen wir die beiden Imputationsmethoden `capping` und `median` für die Ausreißer in den Daten einmal dargestellt. Wir sehen das in der @fig-miss-dlookr-plot-out-imp-1 durch die Quantilimputation die Ausreißer alle nach links geschoben werden. Es entsteht ein neues lokales Maximum. Ob das so sinnvoll ist, sei mal dahingestellt. Der Vorteil ist, dass sich dadurch die anderen Teile der Verteilung nicht ändern. Wenn wir die Medianimputation durchführen, dann erhöhen wir das Maximum der ursprünglichen Verteilung noch weiter. Dafür verlieren wir dann eben alle Werte über Einhundert. Hier müssen wir vermutlich wirklich mal an die Sensitivitätsanalyse ran.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-miss-dlookr-plot-out-imp
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Densityplot der Verteilungen vor und nach der Imputation."
#| fig-subcap: 
#|   - "Imputation mit dem Mittelwert."
#|   - "Imputation mit dem Median."
#| layout-nrow: 1

pluck(longnose_imp_tbl, "longnose_capping") %>% 
  plot

pluck(longnose_imp_tbl, "longnose_median") %>% 
  plot
```

Wie du siehst ist eine Detektion von Ausreißern nicht so einfach. Zum einen brauchen wir dazu Daten, damit wir auch Ausreißer finden können. Zu irgendwas müssen wir ja die einzelnen Beobachtungen vergleichen. Zum anderen können wir durch die Imputation die Verteilung der Daten stark ändern. Es bleibt ein Drahtseilakt.

::: callout-tip
## Anwendungsbeispiel: Ausreißer in einer simplen Regression

```{r}
standard_colorink_tbl <- read_excel("data/standard_colorink.xlsx")
```

```{r}
fit <- lm(standard ~ colorink, standard_colorink_tbl)
```

```{r}
fit %>% r2
```

```{r}
fit %>% augment()
```

Leverage `.hat`

:   Im Allgemeinen sollte ein Punkt mit einer Hebelwirkung von mehr als $(2k+2)/n$ sorgfältig geprüft werden, wobei $k$ die Anzahl der Prädiktorvariablen und n die Anzahl der Beobachtungen ist. Unsere Grenze wäre damit bei $(2 \cdot 1 + 2)/18 = 0.22$

Cook's Abstand `.cooksd`

:   @hardin2007generalized bezeichnen Werte, die über $4/n$ liegen als problematisch. $n$ ist hierbei die Stichprobengröße. Unsere Grenze wäre damit bei $4/18 = 0.22$

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-app-compare-outlier-1
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| fig-cap: "Densityplot der Verteilungen vor und nach der Imputation."

standard_colorink_tbl %>% 
  ggplot(aes(colorink, standard)) +
  theme_minimal() +
  ylim(0, 100) + xlim(0, 100) +
  geom_point() +
  geom_line(aes(y = predict(fit)), color = "red")
```
:::

## Referenzen {.unnumbered}
