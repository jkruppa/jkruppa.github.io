```{r echo = FALSE}
set.seed(2011654)
pacman::p_load(tidyverse, readxl, knitr, kableExtra, see,
               latex2exp, patchwork, parsnip)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

# Testen in R {#sec-test-R}

*Letzte Änderung am `r format(fs::file_info("stat-tests-R.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Alles andere wäre auch Wahnsinn." --- Bjarne Mädel, Der Tatortreiniger*

------------------------------------------------------------------------

![](images/caution.png){fig-align="center" width="50%"}

**Dieses Kapitel wird ist eine Baustelle und wird es vermutlich auch über das Jahr 2024 bleiben. Aktuell weiß ich nämlich noch nicht, wo ich mit dem Kapitel hin will und wo es stehen sollte. Daher können Teile des Codes und des Textes kurzfristig keinen Sinn ergeben oder nicht funktional sein. Es ist geplant eine fertige Version noch 2024 vorliegen zu haben.**

------------------------------------------------------------------------

Wohin mit der Anwendung von statistischen Tests in R? Also der direkten Anwendung? Ich habe mich jetzt hier für ein einführendes zusätzliches Kapitel entschieden. Du erfährst hier nochmal, wie du einfache Gruppenvergleiche in R durchführst. Mit einfachen Gruppenvergleichen meine ich Gruppenvergleiche, die nur zwei Gruppen beinhalten. Konkret heißt es, dass du die Sprungweite von Hunde- und Katzenflöhen miteinander vergleichen möchtest. Wenn du dann noch Fuchsflöhe hast, dann hast du drei Gruppen und wir sind in dem [Kapitel zu multiplen Vergleichen & PostHoc-Tests](#sec-posthoc).

Dieses Startkapitel zu den statistischen Gruppenvergleichen gibt dir somit nochmal eine Übersicht über das statistischen Test in R. Wir konzentrieren uns hier einmal auf das [R Paket `{infer}`](https://infer.netlify.app/). Natürlich kannst du auch alle statistischen Tests mit den Standardfunktionen in R rechnen. Das ist auch vollkommen in Ordnung. Für mich hat das R Paket `{infer}` aber ein paar Vorteile beim Erklären und Verstehen vom statistischen Testen. Du findest aber dann in den folgenden Kapiteln immer beide Varianten. Eine allgemeine Übersicht findest du auf der Hilfsseite mit den [Full `{infer}` Pipeline Examples](https://infer.netlify.app/articles/observed_stat_examples)

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, infer, conflicted)
```

Ich setze auch noch das Theme in `{ggplot}` global auf `theme_minimal()` um hier dann bei den Abbildungen jeweils Code zu sparen.

```{r echo = TRUE}
theme_set(theme_minimal(base_size = 12))
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

Für dieses Übersichtskapitel nutzen wir die Daten der Hund- und Katzenflöhe für die Sprunglängen \[cm\], Anzahl an Flöhen, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus.

```{r}
flea_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal)) 
```

In der @tbl-data-infer siehst du nochmal den Datensatz in voller Länge. Wir haben jeweils sieben Hunde sowwie sieben Katzenbeobachtungen vorliegen. An den jeweils sieben Beobachtungen haben wir dann unterschiedliche Outcomes $y$ gemessen. Betrachten wir also einmal im Folgenden verschiedene Möglichkeiten der Analyse von unseren verschiedenen Outcomes $y$ für die beiden Gruppen der Hunde- und Katzenflöhe.

```{r}
#| echo: false
#| message: false
#| tbl-cap: "Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus von Hunde- und Katzenflöhe."
#| label: tbl-data-infer

data_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal)) 

data_tbl |> kable(align = "c", "pipe")
```

## Welcher Vergleich soll es sein?

Wie du schon in der Einleitung zu diesen Kapiteln der statistischen Gruppenvergleiche gelesen hast, gibt es verschiedene Möglichkeiten statistische Maßzahlen zu testen. Zum einen können wir uns Mittelwerte anschauen und diese miteinander oder zu einem festen Wert vergleichen, wenn unser Outcome $y$ einer Normalverteilung folgt. Wenn unser Outcome $y$ jedoch nicht einer Normalverteilung folgt und damit auch der Mittelwert nicht die passende zu vergleichende Größe ist, können wir auch Mediane miteinander vergleichen. Etwas seltener haben wir dann den Fall vorliegen, dass wir Anteile oder Prozente in zwei Gruppen vergleichen wollen.

... von Mittelwerten

:   Meine Daten sind normalverteilt. Wenn deine Daten normalverteilt sind, dann kannst du die Mittelwerte miteinander vergleichen. In unserem Beispiel ist die Sprunglänge `jump_length` oder das Gewicht der Flöhe `weight` normalverteilt. Wir können also mit einem statistischen Test die mittlere Sprunglänge zwischen Hunde- und Katzenflöhen miteinander vergleichen. Wir würden hier [einen t-Test](#sec-ttest) rechnen. Je nachdem, ob die Varianz in den beiden Tiergruppen gleich ist, würden wir uns bei gleicher Varianz für einen Student t-Test entscheiden oder aber bei ungleicher Varianz für einen Welche t-Test.

::: callout-note
## Was macht der t-Test?

[Der t-Test](#sec-ttest) vergleicht zwei Mittelwerte, gewichtet nach der Standardabweichung und der Fallzahl, miteinander. Etwas statistisch genauer vergleicht der t-Test die Parameter zweier Normalverteilungen miteinander.
:::

... von Medianen

:   Meine Daten sind nicht nromalverteilt. Wenn du Daten vorliegen hast, die keiner Normalverteilung folgen, dann kannst du die Mediane zwischen zwei Grupen miteinander Vergleichen. In unserem Datenbeispiel wäre es die Anzahl an Flöhen `flea_count` oder die Boniturnote `grade`, die sich als ein Vergleich der Mediane zwischen den Hunde- und Katzenflöhen anbieten würde. Wir würden in diesem Fall einen [Wilcoxon-Mann-Whitney-Test oder U-Test](#sec-utest) rechnen.

::: callout-note
## Was macht der U-Test?

[Der U-Test](#sec-utest) vergleicht die Mediane zweier beliebiger Verteilungen miteinander.
:::

... von Anteilen

:   Du bist an einem Vergleich eines Anteils zwischen zwei Gruppen interessiert. Diese Frage kommt in den Agrarwissenschaften eher selten vor. In unserem Beispiel würden wir wissen wollen, ob wir den gleichen Anteil an infizirter Hunde wie auch Katzen in der Spalte `infected` vorliegen haben. Dafür würden wir die `1` in jeder Gruppe zählen und deren Anteil an der Gesamtzahl an Hunde- oder Katzenflöhen bestimmen. Dann können wir einen [$\mathcal{X}^2$-Test](#sec-chi-test) oder einen Anteilstest rechnen.

::: callout-note
## Was macht der $\mathcal{X}^2$-Test?

[Der $\mathcal{X}^2$-Test](#sec-chi-test) vergleicht die Anteile zweier oder mehrerer Gruppen. Da Anteile Wahrscheinlichkeiten sind, vergleicht der $\mathcal{X}^2$-Test damit auch Wahrscheinlichkeiten.
:::

## R Paket `{infer}`

Es gibt in R *mindestens* zwei Möglichkeiten einen statistischen Gruppenvergleich zwischen zwei Gruppen zu rechnen. Zum einen stelle ich hier immer die Standardimplementierung `{base}` jedes statistischen Tests sowie die Nutzung des neuen R Paketes `{infer}` vor. Eine allgemeine Übersicht findest du auf der Hilfsseite mit den [Full `{infer}` Pipeline Examples](https://infer.netlify.app/articles/observed_stat_examples). Ich gehe dann auf die einzelnen Beispiele dann in den folgenden Kapiteln ein. Hier soll es erstmal um den allgeminen Ablauf in `{infer}` gehen. Was müssen wir machen, damit wir in `{infer}` einen Gruppenvergleich rechnen können? Dabei wird dir vielelicht auch klar, warum teilweise der Ansatz von `{infer}` etwas intuitiver ist, als die einfache Verwenung der Standardfunktion in `{base}`.

Wie gehen wir als vor? Die Idee von `{infer}` orientiert sich sehr schön an dem allgemeinen Prinzip des statistsichen Testens. Als erstes müssen wir uns natürlich unsere Teststatistik $T_D$ aus unseren Daten berechnen. Danach berechnen wir uns eine Nullverteilung zu der der wir unsere berechnetete Teststatistik aus den Daten $T_D$ vergleichen. Dann könnenw ir uns auch den p-Wert visualisieren lassen und schauen, ob alles sowit geklappt hat. Am Ende geht dann auch noch ein 95% Konfidenzintervall, wenn du genug Daten vorliegen hast. Das ist vermutlich die einzige Einschränkung, wenn du nicht genug Beobachtungen pro Gruppe hast, dann gehen die KOnfidenzintervalle mit `{infer}` eher schwieriger. Dazu dann aber weiter unten mehr.

Ich nutze hier als Beispiel für den Weg in `{infer}` den t-Test. Deshalb auch gleich die Option `stat = "t"` in allen möglichen Funktionen. Wie du dann aber in den folgenden Kapiteln sehen wirst, geht da natürlich noch mehr. Wir können als Option auch andere Statistiken wählen. Ich habe einmal in der @tbl-infer-option-calculate alle möglichen Optionen an zu testenden Statistiken dargestellt. Das R Paket `{infer}` unterstützt dabei nur theoretische Tests für einen oder zwei Mittelwerte über die t-Verteilung oder einen oder zwei Anteile über die z-Verteilung. Wir können die Funktion [`calculate()`](https://infer.netlify.app/reference/calculate) nutzen um zwischen den verschiedenen statistischen Maßzahlen zu wählen, die wir Testen wollen. Dabei haben wir dann eine große Auswahl an auch einigen etwas exotischeren Werten, wie zum Beispiel die Summe oder aber dem Quotienten zweier Mittelwerte.

|      `stat =`       |                                                                                             Frage & *Beispiel*                                                                                             |
|:-------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|
|      `"mean"`       |       Unterscheidet sich der beobachtete Mittelwert von einem vorgebenen Mittelwert? *Ist mein beobachteter Mittelwert* $\bar{y}_D = 14.2$ *signifikant von* $\bar{y}_{H_0} = 10$ *unterschiedlich?*       |
|     `"median"`      |         Unterscheidet sich der beobachtete Median von einem vorgebenen Median? *Ist mein beobachteter Mittelwert* $\tilde{y}_D = 13.9$ *signifikant von* $\tilde{y}_{H_0} = 9$ *unterschiedlich?*          |
|       `"sum"`       |                Unterscheidet sich die beobachtete Summe von einer vorgebenen Summe? *Ist meine beobachtete Summe* $\sum_D = 212.2$ *signifikant von* $\sum_{H_0} = 200$ *unterschiedlich?*                 |
|       `"sd"`        | Unterscheidet sich die beobachtete Standardabweichung von einer vorgebenen Standardabweichung? *Ist meine beobachtete Standardabweichung* $s_D = 12.2$ *signifikant von* $s_{H_0} = 15$ *unterschiedlich?* |
|      `"prop"`       |                                                                                                                                                                                                            |
|      `"count"`      |                                                                                                                                                                                                            |
|  `"diff in means"`  |                                                                                                                                                                                                            |
| `"diff in medians"` |                                                                                                                                                                                                            |
|  `"diff in props"`  |                                                                                                                                                                                                            |
|      `"chisq"`      |                                                                                                                                                                                                            |
|        `"f"`        |                                                                                                                                                                                                            |
|        `"t"`        |                                                                                                                                                                                                            |
|        `"z"`        |                                                                                                                                                                                                            |
| `"ratio of props"`  |                                                                                                                                                                                                            |
|      `"slope"`      |                                                                                                                                                                                                            |
|   `"odds ratio"`    |                                                                                                                                                                                                            |
| `"ratio of means"`  |                                                                                                                                                                                                            |
|   `"correlation"`   |                                                                                                                                                                                                            |

: Mögliche statistische Maßzahlen, die sich mit dem R Paket `{infer}` sowie der Funktion [`calculate()`](https://infer.netlify.app/reference/calculate) und der Option `stat =` statistisch Testen lassen. Teilweise muss die Nullhypothese nochmal gesondert numerisch spezifiziert werden. {#tbl-infer-option-calculate}

### Berechung der Teststatistik $T_D$

Wenn wir die Teststatistik $T_D$ aus unseren Daten berechnen wollen, dann können wir dies in dem R Paket `{infer}` auf zwei Arten tun. Zum einen über die Funktionen `specify()`, `hypothesize()` und `calculate()` oder aber über die zusammenfassende Funktion `observed()`. Je nachdem wie gut du schon im Thema drin bist, ist natürlich die Funktion `observe()` kürzer und etwas weniger Code. Da die Funktion `observe()` eben auch nur die drei Funktionen zusammenfasst, erkläre ich jetzt erstmal den etwas längeren Weg. Du kannst dann dir nochmal beides in den folgenden Tabs einmal anschauen. Wie immer ist es eine Geschmacksfrage, wie du dir die Sachen berechnen willst. Der etwas längere Weg über drei Funktionen ist dann auch etwas logischer und besser anchzuvollziehen. Wenn man alles verstanden hat, dann ist natürlich `observe()` schneller.

::: panel-tabset
## ... mit `specify()`, `hypothesize()` und `calculate()`

Im Folgenden einmal der etwas längere Weg die beobachtete Teststatistik $T_D$ aus unseren Daten zu berechnen. Ich persönlich mag den längeren Weg lieber, da ich hier besser sehe, was ich eigentlich mache.

`specify()`

:   Die Funktion legt fest, was unser Outcome und was unsere Gruppen sind. Oder noch konkreter, in welcher Spalte unseres Datensatzes ist das Outcome `jump_length` und in welcher Spalte die Gruppen `animal` verortet?

`hypothesize()`

:   Die Funktion legt fest, ob wir zwei Gruppen auf einen Unterschied mit der Option `null = "independence"` testen wollen oder aber wissen wollen, ob sich der Wert von unserem Outcome von einem fixen Wert mit der Option `null = "point"` unterscheidet.

`calculate()`

:   Die Funktion rechnet dann die Teststatistik `stat` in der Ordnung `order`. Wenn wir zum Beispiel zwei Mittelwerte haben, dann können wir über die Ordnung angeben, welcher Mittelwert von welchem abgezogen wird.

Damit haben wir dann auch alles zusammen und können einmal für unseren Sprunglängen der Hunde- und Katzenflöhe die Teststatistik `t` eines t-Tests berechnen.

```{r}
t_d <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") %>%
  calculate(stat = "t", order = c("dog", "cat"))
```

Dann schauen wir uns einmal die berechnete Teststatistik $T_D$ aus den Daten an. Beachte wie immer, die Teststatistik ist eine einheitslose Statistik und sagt erstmal so nichts weiter aus.

```{r}
t_d
```

## ... mit `observe()`

Hier die schnelle Variante. Du gibts im Prinzip gleich in der Funktion die Formel für den Vergleich ein. Dann spezifizierst du die Statistik, die berechnet werden soll und musst noch die Ordnung der beiden Gruppen angeben. Die Variante ist natürlich super kompakt und macht vermutlich mehr Sinn, wenn du mehrere Tests rechnest und die Idee hinter `{infer}` verstanden hast.

```{r}
t_d <- flea_tbl |>
  observe(jump_length ~ animal,
          stat = "t", order = c("dog", "cat"))
```

Dann schauen wir uns einmal die berechnete Teststatistik $T_D$ aus den Daten an. Beachte wie immer, die Teststatistik ist eine einheitslose Statistik und sagt erstmal so nichts weiter aus.

```{r}
t_d
```
:::

Mit der Teststatistik $T_D$ aus unseren Daten können wir dann weitermachen und unseren $p$-Wert berechnen in dem wir die Teststatistik $T_D$ zu einer Verteilung der Nullhypothese vergleichen.

### Berechnung der Verteilung der Nullhypothese

::: panel-tabset
## Simmulierte Nullhypothese

```{r}
null_dist <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") %>%
  generate(reps = 1000, type = "permute") %>% 
  calculate(stat = "t", order = c("dog", "cat"))
```

## Theoretische Nullhypothese

```{r}
null_dist_theory <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  assume("t")
```
:::

Dann schauen wir uns die Daten einmal zusammen mit der Nullhypothese an.

::: panel-tabset
## Simmulierte Nullhypothese mit $T_D$

```{r}
visualize(null_dist) +
  shade_p_value(obs_stat = t_d, direction = "two-sided")
```

## Theoretische Nullhypothese mit $T_D$

```{r}
visualize(null_dist_theory) +
  shade_p_value(obs_stat = t_d, direction = "two-sided")
```
:::

### Berechung vom $p$-Wert

```{r}
null_dist %>%
  get_p_value(obs_stat = t_d, direction = "two-sided")
```

### Berechnung vom 95% Konfidenzintervall

```{r}
boot_dist <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  generate(reps = 1000, type = "bootstrap") %>% 
  calculate(stat = "t", order = c("dog", "cat"))
```

::: panel-tabset
## Perzentile

```{r}
percentile_ci <- boot_dist |> 
  get_ci(type = "percentile")
```

## Standardfehler

```{r}
standard_error_ci <- boot_dist %>%
  get_ci(type = "se", point_estimate = t_d)
```
:::

```{r}
visualize(boot_dist) +
  shade_confidence_interval(endpoints = percentile_ci)
```

::: callout-note
## XX Test in `{infer}`

Auch hier können wir den XX Test in dem R Paket `{infer}` realisieren. Ein Vorteil von `{infer}` ist, dass wir die Funktionen sehr gut mit dem `|>`-Operator nutzen können. Deshalb hier einmal die *bessere* Implementierung.

::: panel-tabset
## `{infer}`

## `{base}`
:::

Eine detailliertere Einführung mit mehr Beispielen für die Nutzung vom [R Paket `{infer}`](https://infer.netlify.app/) findest du im Kapitel [Testen in R](#sec-test-R). Hier soll es dann bei der kurzen Gegenüberstellung bleiben.
:::

## R Paket `{report}`

[R Paket `{report}`](https://easystats.github.io/report/)
