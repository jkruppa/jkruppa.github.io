```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Äquivalenz oder Nichtunterlegenheit {#sec-noninf}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

In diesem Kapitel wollen wir uns mit Gleichheit beschäftigen. Dabei gibt es zwei Arten von Gleichheit. Zum einen können wir uns die technische Gleichheit anschauen oder aber die medizinische- oder Behandlungsgruppengleichheit. Wir definieren die beiden Settings daher wie folgt.

-   **Technische Gleichheit** wollen wir nachweisen, wenn wir zwei *technische* Messmethoden miteinander vergleichen. Wir messen also einmal ein Wachstum mit dem Verfahren A und einmal mit dem Verfahren B. In beiden Fällen erhalten wir dann eine kontinuierliche Zahl, wie zum Beispiel das Gewicht. Jetzt wollen wir wissen, ob das Verfahren A gleich dem Verfahren B das Wachstum gemessen hat.
-   **Medizinische- oder Behandlungsgleichheit** wollen wir nachweisen, wenn wir verschiedene Behandlungs*gruppen* haben. Damit wollen wir auch verschiedene Hypothesen testen. Diese Behandlungsgruppen vergleichen wir dann zu *einer* Kontrolle oder Standard und wollen nachweisen, dass unsere Behandlungsgruppen *gleich* zu dem Standard sind. Die Anwendung ist auch eher bei Tieren oder Menschen zu finden. Wir wollen hier also explizit keine technische Gleichheit nachweisen.

Je nachdem welche *Gleichheit* du dir anschauen willst, musst du natürlich auch andere statistsiche Verfahren wählen. Wir schauen uns daher in diesem Kapitel zuerst einmal die technische Gelichheit an - die ich hier mal so benenne - und danach die medizinische Gleichheit, die sich auf das statistische Hypothesentesten bezieht.

::: column-margin
Bei der *technischen* Gleichheit nutzen wir die lineare Regression und deren Gütekriterien. Bei der *medizinischen* Gleichheit drehen wir die statistischen Null- und Alternativehypothese und haben damit andere Probleme. Wir rechnen aber einen klassischen Hypothesentest.
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, broom, readxl,
               effectsize, multcompView, multcomp,
               janitor, see, parameters, yardstick,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::mutate)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Als erstes wollen wir uns einmal die Daten für die Überprüfung der technischen Gleichheit anschauen. Die Daten stammen aus Dronenüberflügen zur Bestimmung der Grasdichte auf Weideflächen aus der Datei `drone_tech.xlsx`. Dabei haben wir zum einen die Grasdichte traditionell mit einem Druckstab gemessen `pressure_stick` und vergleichen diese Werte dann mit den Werten aus dem Dronenüberflug. Der Drohnenüberflug liefert uns Bilder und aus den Bildern extrahieren wir einen RGB-Wert (abk. *Red, Green, Blue*) in der Spalte `drone_rgb` oder einen CMYK-Wert (abk. *Cyan, Magenta, Yellow (Gelb), Key (Schwarz)*) in der Spalte `drone_cmyk`. Wir wollen nun schauen, ob wir die drei Werte sinnvoll in ein Verhältnis setzen können. Ein Auszug aus den Daten ist nochmal in der @tbl-equal-tech-01 dargestellt.

```{r}
#| message: false
#| echo: false

set.seed(20230564)
drone_tbl <- tibble(pressure_stick = rnorm(317, 1000, 200),
                    drone_rgb = -1000 + 1.20 * pressure_stick + rnorm(length(pressure_stick), 100, 60),
                    drone_cmyk = -1200 + 0.2 * pressure_stick + rpois(length(pressure_stick), 1200)) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  filter(drone_rgb > 1 & drone_cmyk > 1)

write.xlsx(drone_tbl, "data/drone_tech.xlsx", rowNames = FALSE)
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Datentabelle für den technischen Vergleich eines Druckstabes und dem RGB-Werten eines Dronenüberflugs auf die Grasdichte auf Weideflächen."
#| label: tbl-equal-tech-01

rbind(head(drone_tbl, n = 3),
      rep("...", times = ncol(drone_tbl)),
      tail(drone_tbl, n = 3)) %>% 
  kable(align = "c", "pipe")
```

In unserem zweiten Datenbeispiel schauen wir uns die Keimungsdaten nach Behandlung mit sechs biologischen Pilzmittel unter zwei Kältebehandlungen aus der Datei `cold_seeds.xlsx` an. Dabei ist wichtig zu wissen, dass es eine Kontrolle gibt, die das chemische Standardpräparat repräsentiert. Wir wollen jetzt wissen, ob unsere biologischen Alternativen *gleich* gut sind. Das heißt, wir wollen nicht mehr oder weniger als das Standardpräparat sondern gleichviel. Als Outcome zählen wir die Sporen auf den jungen Keimlingen. Da unsere Pflanze auch eine Kältebehandlung überstehen würde, haben wir auch noch die beiden Kältevarianten mit untersucht. In der @tbl-noninf-01 sind die Daten einmal dargestellt.

```{r}
#| message: false
#| echo: false
cold_seed_raw_tbl <- read_excel("data/cold_seeds.xlsx") %>% 
  mutate_if(is.numeric, round, 2)

cold_seed_tbl <- cold_seed_raw_tbl
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Nicht transformierter Datensatz zu dem Keimungsexperiment mit biologischen Pilzpräparaten."
#| label: tbl-noninf-01

rbind(head(cold_seed_raw_tbl, n = 6),
      rep("...", times = ncol(cold_seed_raw_tbl)),
      tail(cold_seed_raw_tbl, n = 6)) %>% 
  kable(align = "c", "pipe")
```

Wir müssen jetzt leider nochmal ran und die Daten etwas aufräumen. Zum einen muss die erste Behandlung raus, hier handelt es sich nur um eine positive Kontrolle, ob überhaupt etwas gewachsen ist. Dann wollen wir uns die Daten auch log-transformieren. Das hat den Grund, dass die statistischen Verfahren in der Äquivalenzanalyse eine Normalverteilung verlangen. Mit der log-Transformation erreichen wir log-normalverteilte Daten, die einer Normalverteilung recht nahe kommen. Am Ende wollen wir dann auch die zweite Behandlung so benennen, dass wir auch immer die Kontrolle erkennen.

```{r}
cold_seed_tbl <- cold_seed_tbl %>%   
  clean_names %>% 
  filter(trt != 1) %>% 
  mutate(trt = as_factor(trt),
         log_cold = log(cold),
         log_non_cold = log(non_cold),
         trt = fct_recode(trt, ctrl = "2")) 
```

Es ergibt sich dann die @tbl-noninf-02. Wir werden dann in der folgenden Analyse nur noch die log-transformierten Spalten `log_cold` und `log_non_cold` nutzen.

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Transformierter Datensatz zu dem Keimungsexperiment mit biologischen Pilzpräparaten."
#| label: tbl-noninf-02

cold_seed_tab_tbl <- cold_seed_tbl %>% 
  mutate(trt = as.character(trt)) %>% 
  mutate_if(is.numeric, round, 2)

rbind(head(cold_seed_tab_tbl, n = 4),
      rep("...", times = ncol(cold_seed_tab_tbl)),
      tail(cold_seed_tab_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

## Technische Gleichheit

Beginnen wir also mit der Beurteilung von der technischen Gleichheit zweier Verfahren. Ich nutze hier das Wort *technische* Gleichheit, da wir hier nicht zwei Gruppen miteinander vergleichen, sondern eben kontinuierlich gemessene Werte haben und wissen wollen, ob diese gemessenen Werte aus den beiden Verfahren gleich sind. In unserem Beispiel wollen wir wissen, ob wir den Druckstab zum Messen der Grasdichte durch einen Drohnenüberflug erstetzen können. Der Dronenflug produziert Bilder und wir können auf zwei Arten Zahlen aus den Bildern generieren. Wir extrahieren entweder die RGB-Werte der Bilder oder aber die CMYK-Werte. Hier ist natürlich ein Schritt den ich überspringe, wir erhalten am Ende eben einen Wert für ein Bild. Oder andersherum, wir können genau einer Messung mit dem Druckstab ein Bild der Drone zuordnen.

In der @fig-equal-tech-01-1 und in der @fig-equal-tech-01-2 sehen wir den Zusammenhang zwischend dem Druckstab und der Dronenmessung für beide Farbskalenwerte nochmal visualisiert.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-equal-tech-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "test."
#| fig-subcap: 
#|   - "Dronenmessung mit RGB-Werten."
#|   - "Dronenmessung mit CMYK-Werten."
#| layout-nrow: 1
#| column: page

ggplot(drone_tbl, aes(drone_rgb, pressure_stick)) +
  theme_bw() +
  geom_point()

ggplot(drone_tbl, aes(drone_cmyk, pressure_stick)) +
  theme_bw() +
  geom_point()
```

```{r}
fit_drone <- lm(pressure_stick ~ drone_rgb, data = drone_tbl)
```

### Bestimmtheitsmaß $R^2$

$$
\mathit{R}^2 = 
\cfrac{\sum_{i=1}^N \left(\hat{y}_i- \bar{y}\right)^2}{\sum_{i=1}^N \left(y_i - \bar{y}\right)^2}
$$

```{r}
#| message: false

fit_drone %>% 
  glance() %>% 
  select(r.squared, adj.r.squared)
```

## Korrelation

```{r}
drone_tbl %$% 
  cor(pressure_stick, drone_rgb, method = "pearson")

drone_tbl %$% 
  cor(pressure_stick, drone_rgb, method = "kendall")

drone_tbl %$% 
  cor(pressure_stick, drone_rgb, method = "spearman")
```

### MSE, RMSE, nRMSE und MAE

$$
MSE = \sqrt{\cfrac{1}{N}\sum^N_{i=1}(y_i - \hat{y}_i)^2}
$$

https://yardstick.tidymodels.org/reference/index.html

https://en.wikipedia.org/wiki/Mean_absolute_error

$$
RMSE = \sqrt{MSE}
$$

```{r}
drone_tbl %>%
  rmse(pressure_stick, drone_rgb)
```

Der RMSE ist ein gewichtetes Maß für die Modellgenauigkeit, das auf der gleichen Skala wie das Vorhersageziel angegeben wird. Einfach ausgedrückt kann der RMSE als der durchschnittliche Fehler interpretiert werden, den die Vorhersagen des Modells im Vergleich zum tatsächlichen Wert aufweisen, wobei größere Vorhersagefehler zusätzlich gewichtet werden.

Je näher der RMSE-Wert bei 0 liegt, desto genauer ist das Modell. Der RMSE-Wert wird jedoch auf derselben Skala zurückgegeben wie das Ziel, für das Sie Vorhersagen treffen, und daher gibt es keine allgemeine Regel für die Interpretation von Wertebereichen. Die Interpretation Ihres Wertes kann nur innerhalb Ihres Datensatzes bewertet werden.

$$
nRMSE = \cfrac{RMSE}{\bar{y}} = \cfrac{\sqrt{MSE}}{\bar{y}} = \cfrac{\sqrt{\cfrac{1}{N}\sum^N_{i=1}(y_i - \hat{y}_i)^2}}{\bar{y}}
$$

https://stats.stackexchange.com/questions/598437/how-to-interpret-r-squared-versus-nrmse-for-a-random-forest-model

$$
MAE = \cfrac{\sum_{i=1}^n\left| y_i - \hat{y}_i\right|}{n} =\cfrac{\sum_{i=1}^n\left| e_i \right|}{n}
$$

Der MAE hat gegenüber dem RMSD Vorteile in der Interpretierbarkeit. Der MAE ist der Durchschnitt der absoluten Werte der Fehler. MAE ist grundsätzlich leichter zu verstehen als die Quadratwurzel aus dem Durchschnitt der quadrierten Fehler. Außerdem beeinflusst jeder Fehler den MAE in direktem Verhältnis zum absoluten Wert des Fehlers, was bei der RMSD nicht der Fall ist.

Der MAE ist nicht identisch mit dem mittleren quadratischen Fehler (RMSE), auch wenn einige Forscher ihn so angeben und interpretieren. MAE ist konzeptionell einfacher und auch leichter zu interpretieren als RMSE: Es ist einfach der durchschnittliche absolute vertikale oder horizontale Abstand zwischen jedem Punkt in einem Streudiagramm und der Linie $Y=X$. Mit anderen Worten: MAE ist die durchschnittliche absolute Differenz zwischen $X$ und $Y$. Außerdem trägt jeder Fehler proportional zum absoluten Wert des Fehlers zum MAE bei.

```{r}
drone_tbl %>%
  mae(pressure_stick, drone_rgb)
```

```{r}
drone_tbl %>%
  metrics(pressure_stick, drone_rgb)
```

Der Vergleich der beiden Farbskalen

```{r}
drone_tbl %>%
  metrics(pressure_stick, drone_rgb)

drone_tbl %>%
  metrics(pressure_stick, drone_cmyk)
```

## Medizinische- oder Behandlungsgleichheit

[EFSA](https://www.efsa.europa.eu/de)

The limits for equivalence were set to $-\cfrac{1}{2}\log$ and $\cfrac{1}{2}\log$ equal to -0.5 and 0.5 because of the log transformation of the outcome.

[Allgemeine Methoden des Institut für Qualität und Wirtschaftlichkeit im Gesundheitswesen (IQWiG)](https://www.iqwig.de/ueber-uns/methoden/methodenpapier/)

"Umgekehrt erfordert auch die Interpretation nicht statistisch signifikanter Ergebnisse Aufmerksamkeit. Insbesondere wird ein solches Ergebnis nicht als Nachweis für das Nichtvorhandensein eines Effekts (Abwesenheit bzw. Äquivalenz) gewertet"

9.3.5 Nachweis der Gleichheit

$$
\begin{aligned} 
H_0: \bar{y}_{1} &\neq \bar{y}_{2} \\  
H_A: \bar{y}_{1} &= \bar{y}_{2} \\   
\end{aligned}
$$

@altman1995statistics

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-noninf-1
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| fig-cap: "test"

cold_seed_tbl %>% 
  pivot_longer(cold:last_col(),
               names_to = "type",
               values_to = "growth") %>% 
  mutate(type = as_factor(type)) %>% 
  ggplot(aes(trt, growth, fill = trt)) +
  theme_bw() +
  geom_boxplot() +
  facet_wrap(~ type, scales = "free_y") +
  scale_fill_okabeito() +
  theme(legend.position = "none")
```

### ANOVA mit Effektschätzer

```{r}
#| message: false
lm_non_cold_fit <- lm(log_non_cold ~ trt, data = cold_seed_tbl)

lm_non_cold_fit %>% anova %>% model_parameters()
```

```{r}
#| message: false
lm_non_cold_fit %>% eta_squared()
```

```{r}
#| message: false
lm_cold_fit <- lm(log_cold ~ trt, data = cold_seed_tbl)

lm_cold_fit %>% anova %>% model_parameters()
```

```{r}
#| message: false
lm_cold_fit %>% eta_squared()
```

### Äquivalenztest

```{r}
res_non_cold <- equivalence_test(lm_non_cold_fit, 
                                 ci = 0.95,
                                 range = c(-0.5, 0.5))
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-noninf-2
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| fig-cap: "test"

plot(res_non_cold) +
  theme_minimal()
```

```{r}
res_cold <- equivalence_test(lm_cold_fit, 
                             ci = 0.95,
                             range = c(-0.5, 0.5))
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-noninf-3
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| fig-cap: "test"

plot(res_cold) +
  theme_minimal()
```

## Links

https://www.bmj.com/content/311/7003/485

https://www.google.com/search?q=noninferiority+R&sxsrf=AJOqlzW7GmsZSD9QfcFTDil2ONGUUNudHw%3A1674985644154&ei=rEDWY4CKCeaSxc8PoO6D6Ag&ved=0ahUKEwiAkMviv-z8AhVmSfEDHSD3AI0Q4dUDCBA&uact=5&oq=noninferiority+R&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAzIICAAQgAQQywEyCAgAEIAEEMsBMggIABCABBDLATIICAAQFhAeEAoyBggAEBYQHjIGCAAQFhAeMgsIABAeEA0QDxDxBDILCAAQHhANEA8Q8QQyBggAEBYQHjIGCAAQFhAeOgUIABCABDoHCAAQgAQQCkoECEEYAEoECEYYAFAAWJoJYMUKaABwAXgAgAFZiAGEApIBATOYAQCgAQKgAQHAAQE&sclient=gws-wiz-serp

https://cran.r-project.org/web/packages/PowerTOST/vignettes/NI.html
