```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Post-hoc Tests {#sec-posthoc}

1)  Einfaktorielle ANOVA gerechnet @sec-fac1
2)  Mehrfaktorielle ANOVA gerechnet @sec-fac2

@sec-anova

@sec-statistisches-testen-alpha-adjust

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               multcomp, emmeans)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

```{r}
#| message: false

fac1_tbl <- read_csv2("data/flea_dog_cat_fox.csv") %>%
  select(animal, jump_length, grade) %>% 
  mutate(animal = as_factor(animal))
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: Selektierter Datensatz mit einer normalverteilten Variable `jump_length` sowie der multinominalverteilten Variable `grade` und einem Faktor `animal` mit drei Leveln.
#| label: tbl-data-posthoc-1

fac1_tbl %>% kable(align = "c", "pipe")
```

## Paarweise Gruppenvergleiche {#sec-posthoc-pairwise}

### Paarweiser t Test

```{r}
pairwise.t.test(fac1_tbl$jump_length, fac1_tbl$animal,
                p.adjust.method = "bonferroni") %>% 
  tidy %>% 
  mutate_if(is.numeric, round, 3)
```

### Paarweiser Wilcoxon Test

```{r}
#| warning: false

pairwise.wilcox.test(fac1_tbl$grade, fac1_tbl$animal,
                     p.adjust.method = "bonferroni") %>% 
  tidy %>% 
  mutate_if(is.numeric, round, 3)
```

## Gruppenvergleich mit dem `multcomp` Paket {#sec-posthoc-multcomp}

https://broom.tidymodels.org/reference/tidy.glht.html

```{r}
fit_1 <- lm(jump_length ~ animal, data = fac1_tbl)

comp_1_obj <- glht(fit_1, linfct = mcp(animal = "Tukey")) 
```

```{r}
res_1_obj <- comp_1_obj %>% 
  tidy(conf.int = TRUE) %>% 
  select(contrast, estimate, adj.p.value, conf.low, conf.high) %>% 
  mutate_if(is.numeric, round, 3)

res_1_obj

```

For later: https://stackoverflow.com/questions/50221298/how-to-plot-glht-confidence-intervals-with-ggplot

```{r}

  ggplot(res_1_obj, aes(contrast, y=estimate, ymin=conf.low, ymax=conf.high)) +
    geom_hline(yintercept=0, linetype="11", colour="grey60") +
    geom_errorbar(width=0.1) + 
    geom_point() +
    coord_flip() +
    theme_classic()
```

## Gruppenvergleich mit der `emmeans` Paket {#sec-posthoc-emmeans}

https://broom.tidymodels.org/reference/tidy.emmGrid.html

::: column-margin
Wir können hier nicht alles erklären und im Detail durchgehen. Hier gibt es noch ein aufwendiges Tutorium zu `emmeans`: [Getting started with emmeans](https://aosmith.rbind.io/2019/03/25/getting-started-with-emmeans/)
:::

```{r}
fit_2 <- lm(jump_length ~ animal, data = fac1_tbl)

comp_2_obj <- fit_2 %>% 
  emmeans("animal") %>% 
  contrast(method = "pairwise") 
```

```{r}
res_2_obj <- comp_2_obj %>% 
  tidy(conf.int = TRUE) %>% 
  select(contrast, estimate, adj.p.value, conf.low, conf.high) %>% 
  mutate(across(where(is.numeric), round, 4))

res_2_obj
```

```{r}

  ggplot(res_2_obj, aes(contrast, y=estimate, ymin=conf.low, ymax=conf.high)) +
    geom_hline(yintercept=0, linetype="11", colour="grey60") +
    geom_errorbar(width=0.1) + 
    geom_point() +
    coord_flip() +
    theme_classic()
```
