```{r echo = FALSE}
#| warning: false
#| message: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, see, modelr, ggforce,
               latex2exp, patchwork, parsnip, ggdag, conflicted)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
conflicts_prefer(dplyr::filter)
set.seed(20250701)
theme_modeling <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(size = 12, face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

```{r}
#| eval: true
#| echo: false
#| cache: true
#| message: false
#| warning: false
#| label: sim-mean-samplesize
source("simulation/sim-gen-data-mean.R")
```

```{r}
#| echo: false
#| message: false
#| warning: false
source("images/R/stat-modeling-R.R")
source("images/R/eda-generation.R")
```

# Generierung von Daten {#sec-eda-gen-data}

*Letzte Änderung am `r format(fs::file_info("eda-generation.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Je größer die Insel des Wissens, desto größer der Strand der Verzweiflung." --- unbekannt*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (pausiert)

Dieses Kapitel wird in den nächsten Monaten geschrieben und ist damit eine zukünftige Großbaustelle. Ich plane zum Beginn des SoSe 2026 eine fertige Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll. Bitte daher hier dann abwarten.
:::

In diesem Kapitel geht es um die Erstellung von zufälligen Daten. Oder anderherum, wir wollen uns künstliche Daten (eng. *artificial data* oder eng. *synthetic data*) generieren. Warum machen wir das? Eine Frage, die sich vermutlich kein Statistiker oder Date Scientist stellen würde, ist es doch Teil der wissenschaftlichen Arbeit simulierte Daten zu erstellen. Auf diesen simulierten Daten werden dann die neuen entwickelten Algorithmen getestet. Für Menschen außerhalb der Data Science mag es seltsam erscheinen, dass wir uns einfach Daten erschaffen können. Diese synthetischen Daten kommen dann aber den biologischen Daten manchmal recht Nahe. Daher kannst auch du dir deine Daten theoretisch einfach selber bauen, nachdem du dieses Kapitel gelesen hast.

::: callout-warning
## Achtung, bitte beachten!

> *"With great power comes great responsibility." --- Uncle Ben to Peter Parker in Spiderman*

Keine Daten für die Abschlussarbeit erschaffen. Auch wenn die Daten mal nicht so passen, wie du dir das aus einem Experiment erhofft hast, ist es nicht erlaubt sich einfach die Daten selber zu simulieren. Simulierte Daten haben keinen wissenschaftlichen Wert abseits der Validierung von neuen Algoithmen.
:::

Daher nutzen wir diesen Kapitel auch anders. Wir erschaffen uns ja Daten um Algorithmen zu verstehen. Wenn wir wissen wie die Daten aufgebaut sind, dann können wir auch besser verstehen was uns ein Modell oder ein statistischer Test wiedergibt. Dafür brauchen wir dann die synthetischen Daten. Ich komme dann immer mal wieder auf dieses Kapitel zurück, wenn ich in anderen Kapiteln mal künstliche Daten brauche. Wir schauen uns verschiedene Wege künstliche Daten zu erschaffen einmal an und es geht auch in Excel relativ einfach.

## Allgemeiner Hintergrund

> *"We test our framework both on synthetic data, as the only source of ground truth on which we can objectively assess the performance of our algorithms, as well as on real data to demonstrate its real-world practicability." --- @jackson2009intelligent*

Wenn wir Daten generieren wollen, dann müssen wir auch wissen, was wir genieren wollen. Dafür müssen wir dann verstehen, wovon wir sprechen. Da wir es bei der Datengenerierung auch immer mit statistischen Modellen zu tun haben, müssen wir auch die Fachsprache der statistsichen Modellierung nutzen.

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6.5
#| fig-cap: "Darstellung eines einfaktoriellen Datensatzes als Säulendiagramm (eng. *barplot*) mit zwei Gruppen und unterschiedlichen Mittelwerten bei gleicher Varianz für einen normalverteilten Messwert. Der Effekt ist hier die Mittelwertsdifferenz. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-03

p_barplot_intro 
```

#### Sprachlicher Hintergrund {.unnumbered .unlisted}

> *"In statistics courses taught by statisticians we don't use independent variable because we use independent on to mean stochastic independence. Instead we say predictor or covariate (either). And, similarly, we don't say "dependent variable" either. We say response." --- [User berf auf r/AskStatistics](https://www.reddit.com/r/AskStatistics/comments/qt1hvu/comment/hkigiks/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button)*

Wenn wir uns mit dem statistischen Modellieren beschäftigen wollen, dann brauchen wir auch Worte um über das Thema reden zu können. Statistik wird in vielen Bereichen der Wissenschaft verwendet und in jedem Bereich nennen wir dann auch Dinge anders, die eigentlich gleich sind. Daher werde ich mir es hier herausnehmen und auch die Dinge so benennen, wie ich sie für didaktisch sinnvoll finde. Wir wollen hier was verstehen und lernen, somit brauchen wir auch eine klare Sprache.

::: {layout="[15,85]" layout-valign="top"}
![](images/personal_opinion.png){fig-align="center" width="100%"}

> *"Jeder nennt in der Statistik sein Y und X wie er möchte. Da ich hier nicht nur von Y und X schreiben will, führe ich eben die Worte ein, die ich nutzen will. Damit sind die Worte dann auch richtig, da der Kontext definiert ist. Andere mögen es dann anders machen. Ich mache es eben dann so. Danke." --- Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.*
:::

In dem folgenden Kasten erkläre ich nochmal den Gebrauch meiner Begriffe im statistischen Testen. Es ist wichtig, dass wir hier uns klar verstehen. Zum einen ist es angenehmer auch mal ein Wort für ein Symbol zu schreiben. Auf der anderen Seite möchte ich aber auch, dass du dann das Wort richtig einem Konzept im statistischen Modellieren zuordnen kannst. Deshalb einmal hier meine persönliche und didaktische Zusammenstellung meiner Wort im statistischen Modellieren. Du kannst dann immer zu dem Kasten zurückgehen, wenn wir mal ein Wort nicht mehr ganz klar ist. Die fetten Begriffe sind die üblichen in den folgenden Kapiteln. Die anderen Worte werden immer mal wieder in der Literatur genutzt.

{{< include stat-modeling/stat-modeling-callout-words.qmd >}}

#### Einschränkungen bei der Generierung {.unnumbered .unlisted}

Wir konzentrieren uns hier nur auf einen kleinen Teil der möglichen Simulationen und Datengenerierungen.

#### Welche Pakete gibt es eigentlich? {.unnumbered .unlisted}

[R Paket `{simstudy}`](https://cran.r-project.org/web/packages/simstudy/vignettes/simstudy.html)

[R Paket `{simdata}`](https://cran.r-project.org/web/packages/simdata/vignettes/Demo.html)

## Theoretischer Hintergrund

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Visualisierung der Abweichung des beobachteten Mittelwerts von dem theoretischen Mittelwert der Verteilung. Fünf Simulationen mit je fünf Beobachtungen wurden durchgeführt und jeweils der Mittelwert berechnet. Die Beobachtungen wurde aus einer Standardnormalverteilung mit $\\mathcal{N}(0, 1)$ gezogen. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-normal

p_theo_observed
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 7.5
#| fig-cap: "Zusammenhang zwischen der simulierten Anzahl an Beobachtungen und dem beobachteten Mittelwert zu dem theoretischen Mittelwert der Verteilung aus der die Beobachtungen generiert wurden. Die Beobachtungen wurde aus einer Standardnormalverteilung mit $\\mathcal{N}(0, 1)$ gezogen. Es wurden 1000 Simulationen durchgeführt. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-mean-sim

p1_mean + p2_mean +
  plot_layout(ncol = 2, widths = c(7, 1)) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

#### Effekt und Streuung {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 7
#| fig-width: 9
#| fig-cap: "foo. **(A)** foo. **(B)** foo. **(C)** foo. **(D)** foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-square-cov

p1_square_cov + p2_square_cov + p3_square_cov + p4_square_cov +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 7
#| fig-width: 9
#| fig-cap: "foo. **(A)** foo. **(B)** foo. **(C)** foo. **(D)** foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-square-fac

p1_square_fac + p2_square_fac + p3_square_fac + p4_square_fac +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 3.7
#| fig-width: 7
#| fig-cap: "Erweiterte Darstellung der statistischen Modellierung. Die Messwerte $Y$ folgen einer Verteilung. Die Einflussvariablen liegen kontinuierlich als Kovariaten oder aber kategorial als Faktoren vor. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-02

p_lhs_rhs_detail
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-venn

p_venn_gen
```

#### Welche Effekte gibt es? {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6.5
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-04

group_tbl <- tibble(f = c(rep(1, 6), rep(2, 6)),
                    y = c(4, 5, 5.5, 6.5, 7, 8,  
                          7, 8, 8.5, 9.5, 10, 11)) 

group_fit <- lm(y ~f, data = group_tbl)


group_tbl |> 
  ggplot(aes(f, y)) +
  theme_minimal() +
  geom_line(aes(y = predict(group_fit)), color = "#CC79A7", linewidth = 1) +
  geom_point(color = "gray50", alpha = 0.5, size = 3) +
  stat_summary(fun.data=mean_sdl, , fun.args = list(mult = 1), 
               geom="pointrange", shape = 23, 
               fill = c("#56B4E9", "#E69F00"), size = 0.75) +
  annotate("label", x = c(1, 2), y = 13, label = c(expression(n[1]~"="~6), 
                                                   expression(n[2]~"="~6))) +
  annotate("label", x = 1.5, y = 7.5, label = expression(atop(bold(Delta[abs]~"="~+"3.0"),
                                                         bold(Delta[rel]~"="%*%"1.5"))),
           color = "#CC79A7", size = 5) +
  scale_y_continuous(limits = c(3, 12), breaks = c(6, 9)) +
  scale_x_continuous(limits = c(0.5, 2.5),breaks = c(1, 2), label = c("A.1", "A.2")) +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(), 
        legend.position = "none",
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 12, face = "bold"),
        plot.subtitle = element_text(size = 12, face = "italic"),
        title = element_text(size = 14, face = "bold")) +
  labs(x = "Faktor A", y = "Messwert (y)",
       title = "Mittelwertsdifferenz",
       subtitle = "Vergleich absoluter und relativer Effekt zwischen zwei Gruppen") 

```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6.5
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-05

p_rr_or
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6.5
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-06

p_rr
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6.5
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-07

p_or
```

::: callout-tip
## Weitere Tutorien für die Genierung von Daten

Wir immer geht natürlich mehr als ich hier Vorstellen kann. Du findest im Folgenden Tutorien, die mich hier in dem Kapitel inspiriert haben. Ich habe mich ja in diesem Kapitel auf die Durchführbarkeit in R und die allgemeine Verständlichkeit konzentriert.

-   Einen guten Überblick liefert Brad Duthie in seinem Tutorium [Creating simulated data sets in R](https://stirlingcodingclub.github.io/simulating_data/index.html). Hier kannst du dich dann nochmal in die Grundlagen einlesen.
-   Auch Excel kann künstliche Daten generieren. Dafür schaue ich dann immer in die [statistischen Funktionen (Referenz)](https://support.microsoft.com/de-de/office/statistische-funktionen-referenz-624dac86-a375-4435-bc25-76d659719ffd) Seite nach. Die Seite ist leider etwas schwer zu lesen.
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, simstudy, simdata, modelr, 
               ggpmisc, conflicted)
set.seed(20250820)
conflicts_prefer(ggplot2::annotate)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Simulationen

[The distribution zoo](https://ben18785.shinyapps.io/distribution-zoo/)

@dormann2013parametrische

### Normalverteilter Messwert

#### Einfaktoriell $f_A$ mit 2 Leveln {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches simples Modell mit einem Messwert $Y$ und einer kategorialen Einflussvariablen als Faktor $f_A$ mit zwei Leveln dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f1lvl2-theo

p_1fac_2lvl_model
```

```{r}
fac1_tbl <- tibble("1" = rnorm(5, 3, 0.001),
                   "2" = rnorm(5, 6, 0.001)) |> 
  gather(key = "f_a", value = "y")
```

```{r}
lm(y ~ f_a, fac1_tbl) |> coef() |> round(2)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-model-in-R-fa-1

ggplot(fac1_tbl, aes(f_a, y)) +
  theme_modeling() +
  geom_vline(xintercept = 1, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 3, linewidth = 0.5, color = "#CC79A7") +
  geom_point() +
  stat_summary(fun = "mean", geom = "label", 
               aes(label = round(..y..)), position = position_nudge(0.1)) +
  scale_x_discrete(labels = c("A.1", "A.2", "A.3")) +
  labs(title = "Einfaktorielle Simulation mit 2 Leveln",
       subtitle = "Intercept ist der Mittelwert von Gruppe A.1",
       x = "Faktor A", y = "Messwert (Y)")
```

#### Einfaktoriell $f_A$ mit \>2 Leveln {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches simples Modell mit einem Messwert $Y$ und einer kategorialen Einflussvariablen als Faktor $f_A$ mit drei Leveln dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f1lvl3-theo

p_1fac_3lvl_model
```

```{r}
fac1_tbl <- tibble("1" = rnorm(5, 2, 0.001),
                   "2" = rnorm(5, 6, 0.001),
                   "3" = rnorm(5, 4, 0.001)) |> 
  gather(key = "f_a", value = "y")
```

[R Library Contrast Coding Systems for categorical variables](https://stats.oarc.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/)

::: panel-tabset
## Treatment coding (default) {.unnumbered .unlisted}

*Treatment coding* mit `contr.treatment` (default)

```{r}
lm(y ~ f_a, fac1_tbl, contrasts = list(f_a = "contr.treatment")) |> 
  coef() |> round(2)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-model-in-R-fa-21

ggplot(fac1_tbl, aes(f_a, y)) +
  theme_modeling() +
  geom_vline(xintercept = 1, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 2, linewidth = 0.5, color = "#CC79A7") +
  geom_point() +
  stat_summary(fun = "mean", geom = "label", 
               aes(label = round(..y..)), position = position_nudge(0.1)) +
  scale_x_discrete(labels = c("A.1", "A.2", "A.3")) +
  labs(title = "Treatment coding",
       subtitle = "Intercept ist der Mittelwert von Gruppe A.1",
       x = "Faktor A", y = "Messwert (Y)")
```

## Effect coding

*Effect coding* mit `contr.sum`

```{r}
lm(y ~ f_a, fac1_tbl, contrasts = list(f_a = "contr.sum")) |> 
  coef() |> round(2)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-model-in-R-fa-22

ggplot(fac1_tbl, aes(f_a, y)) +
  theme_modeling() +
  geom_vline(xintercept = 1, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 4, linewidth = 0.5, color = "#CC79A7") +
  geom_point() +
  stat_summary(fun = "mean", geom = "label", 
               aes(label = round(..y..)), position = position_nudge(0.1)) +
  scale_x_discrete(labels = c("A.1", "A.2", "A.3")) +
  labs(title = "Effect coding",
       subtitle = "Intercept ist der globale Mittelwert",
       x = "Faktor A", y = "Messwert (Y)")
```
:::

#### Zweifaktoriell ohne Interaktion $f_A + f_B$ {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches simples Modell mit einem Messwert $Y$ und einer kategorialen Einflussvariablen als Faktor $f_A$ mit drei Leveln sowie einer kategorialen Einflussvariablen als Faktor $f_B$ mit zwei Leveln dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f2nointer-theo

p_2fac_nointer_model +
  labs(title = "") 
```

```{r}
fac2_nointer_tbl <- tibble(f_a = rep(gl(3, 5), 2),
                           f_b = gl(2, 15),
                           y = 2 + 
                             2 * as.numeric(f_a) + 
                             3 * as.numeric(f_b) + 
                             rnorm(15, 0, 0.001))
```

```{r}
lm(y ~ f_a + f_b, fac2_nointer_tbl) |> 
  coef() |> round(2)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f2nointer

ggplot(fac2_nointer_tbl, aes(f_a, y, color = f_b)) +
  theme_modeling() +
  geom_vline(xintercept = 1, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 7, linewidth = 0.5, color = "#CC79A7") +
  geom_abline(intercept = 8, slope = 2, color = "#56B4E9") +
  geom_abline(intercept = 5, slope = 2, color = "#E69F00") +
  geom_point() +
  stat_summary(fun = "mean", geom = "label", 
               aes(label = round(..y..)), position = position_nudge(0.1)) +
  scale_x_discrete(labels = c("A.1", "A.2", "A.3")) +
  labs(title = "Zweifaktorielle Simulation",
       subtitle = "Intercept ist der Mittelwert von Gruppe A.1",
       x = "Faktor A", y = "Messwert (Y)", color = "Faktor B") +
  scale_color_okabeito(label = c("B.1", "B.2")) +
  theme(legend.position = "top")
```

#### Zweifaktoriell mit Interaktion $f_A + f_B + f_A \times f_B$ {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches simples Modell mit einem Messwert $Y$ und einer kategorialen Einflussvariablen als Faktor $f_A$ mit drei Leveln sowie einer kategorialen Einflussvariablen als Faktor $f_B$ mit zwei Leveln und deren Interaktion $f_A \\times f_B$ dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f2inter-theo

p_2fac_model +
  labs(title = "") 
```

```{r}
fac2_tbl <- expand_grid(f_a = 1:3, f_b = 1:2, rep = 1:1000) |> 
  mutate(f_a = as_factor(f_a),
         f_b = as_factor(f_b))

fac2_mat <- fac2_tbl |> 
  model_matrix(~ f_a * f_b) |> 
  as.matrix()

eff_vec <- c(7, 2, 4, 3, 0, -6)

eff <- fac2_mat %*% eff_vec 

fac2_inter_tbl <- fac2_tbl |> 
  mutate(y = eff + rnorm(length(eff), 0, 0.001))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-f2inter

ggplot(fac2_inter_tbl, aes(f_a, y, color = f_b, group = f_b)) +
  theme_modeling() +
  geom_vline(xintercept = 1, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 7, linewidth = 0.5, color = "#CC79A7") +
#  geom_abline(intercept = 8, slope = 2, color = "#56B4E9") +
 # geom_abline(intercept = 5, slope = 2, color = "#E69F00") +
  geom_point() +
  stat_summary(fun = "mean", geom = "line", show.legend = FALSE) +
  stat_summary(fun = "mean", geom = "label", show.legend = FALSE, 
               aes(label = round(..y..)), position = position_nudge(0.1)) +
  scale_x_discrete(labels = c("A.1", "A.2", "A.3")) +
  labs(title = "Zweifaktorielle Simulation",
       subtitle = "Intercept ist der Mittelwert von Gruppe A.1",
       x = "Faktor A", y = "Messwert (Y)", color = "Faktor B") +
  scale_color_okabeito(label = c("B.1", "B.2")) +
  theme(legend.position = "top")
```

#### Einkovariat $c_1$ {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches simples Modell mit einem Messwert $Y$ und einer kontinuierlichen Einflussvariable als Kovariate $c_1$ dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-c1-theo

p_1cov_model 
```

```{r}
cov1_tbl <- tibble(c_1 = rnorm(10, 0, 1),
                   y = 2 + 
                       2 * c_1 + 
                           rnorm(10, 0, 0.001))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-c1

ggplot(cov1_tbl, aes(c_1, y)) +
  theme_modeling() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_point() +
  stat_poly_line(color = "#E69F00", linewidth = 0.5) +
  stat_poly_eq(use_label("eq"), size = 8) +
  scale_x_continuous(breaks = -3:2) +
  scale_y_continuous(breaks = c(-4, -2, 0, 2, 4, 6)) +  
  labs(title = "Einkovariate Simulation",
       subtitle = "Intercept ist der y-Achsenabschnitt",
       x = "Covariate 1", y = "Messwert (Y)")
```

#### Zweikovariat unabhängig $c_1 + c_2$ {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 7
#| fig-cap: "Schemantisches multiples Modell mit einem Messwert $Y$ und zwei kontinuierlichen Einflussvariablen als Kovariate $c_1$ und Kovariate $c_2$ dargestellt. *[Zum Vergrößern anklicken]*"
#| label: fig-eda-gen-c2-theo

p_2cov_model
```

```{r}
cov2_tbl <- tibble(c_1 = rnorm(10, 0, 1),
                   c_2 = rnorm(10, 0, 1),
                   y = 2 + 
                       1 * c_1 + 
                       2 * c_2 + 
                           rnorm(10, 0, 0.001))
```

```{r}
lm(y ~ c_1 + c_2, cov2_tbl) |> 
  coef() |> round(2)
```

#### Zweikovariat abhängig $c_1 + c_2$ {.unnumbered .unlisted}

#### Komplexere Modelle {.unnumbered .unlisted}

::: panel-tabset
## `tibble()`

## `{simstudy}`

## Excel

`NORM.INV(ZUFALLSZAHL(); 0; 5)`
:::

### Possionverteilter Messwert

### Binomialverteilter Messwert

### Zeitreihen

[Spline Data](https://kgoldfeld.github.io/simstudy/articles/spline.html)

## Referenzen {.unnumbered}
