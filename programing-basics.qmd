# Operatoren, Funktionen und Pakete {#sec-basics}

Es ist immer schwierig, wann die Grundlagen von R einmal gelehrt werden sollte. Wenn du nichts von Programmierung bis jetzt gehört hast, dann mag es keinen Sinn ergeben mit Operatoren, wie dem Zuweisungspfeil `<-` und der Pipe `%>%` zu beginnen. Wir brauchen aber für die Programmierung folgende zentrale Konzepte.

-   Wir müssen zusätzliche Pakete in R installieren und laden können (siehe @sec-R-packages).
-   Wir müssen verstehen wie wir uns einen Vektor mit `c()` bauen (siehe @sec-R-vector).
-   Wir müssen wissen was eine Funktion in R ist (siehe @sec-R-function).
-   Wir müssen den Operator Zuweisungspfeil `<-` verstehen und anwenden können (siehe @sec-R-pfeil).
-   Wir müssen den Operator Pipe `%>%` verstehen und anwenden können (siehe @sec-R-pipe).
-   Wir müssen den Operator `$` verstehen, da manche Funktionen in R nicht mit Datensätzen sondenr nur mit Vektoren arbeiten können (siehe @sec-dollar).
-   Wir müssen verstehen wie wir ein Modell in R mit der Tilde `~` definieren (siehe @sec-formula).
-   Wir müssen wissen und verstehen wie wir mit `?` englische Hilfeseiten öffnen können (siehe @sec-R-help).

Nicht alle Konzepte brauchst du *unmittelbar* aber ich nutze diese Konzepte wiederholt in allen Kapiteln, so dass du hier immer wieder mal schauen kannst, was die Grundlagen sind.

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
data_tbl <- read_excel("data/flea_dog_cat.xlsx")

```

## Pakete und `library()` {#sec-R-packages}

[Als Vanilla beschreibt man in der Informatikerwelt ein Programm, was keine zusätzlichen Pakete geladen hat. Also die reinst Form ohne zusätzlichen Geschmack.]{.aside}

In der *Vanilla*-Variante hat R sehr wenige Funktionen. Ohne zusätzliche Pakete ist R mehr ein sehr potenter Taschenrechner. Leider mit der Funktionalität aus den 90'zigern, was die Programmierumgebung und die Funktionen angeht. Das wollen wir aber nicht. Wir wollen auf den aktuellen Stand der Technik und auch Sprache programmieren. Daher nutzen wir zusätzliche R Pakete.

![Auf den Reiter *Packages* klicken und dann *Install*. In der deutschen version vom RStudio mögen die Begriffe leicht anders sein.](images/programing_01.PNG){#fig-pro-01 fig-align="center" width="80%"}

In @fig-pro-01 wird gezeigt wie du ein zusätzliches Paket installieren kannst. Hierbei ist nochmal wichtig den semantischen Unterschied zu wissen. Es gibt das Paket `tidyverse` was wir viel nutzen. Wir isnatllieren *einmalig* Pakete der Funktion `install.packages()` oder eben wie in @fig-pro-01 gezeigt. Wir nutzen die Funktion `library()` um ein Paket in R zu laden. Ja, es müsste anders heisen, tut es aber nicht.

```{r}
#| eval: false

## Das Paket tidyverse installieren - einmalig
install.packages(tidyverse)

## Das Paket tidyverse laden - jedes Mal
library(tidyverse)
```

Nun muss man sich immer merken, ob das Paket schon installiert ist oder man schreibt relativ viele `library()` untereinander. Das passiert schnell, wenn du viele Pakete laden willst. Dafür erlaubt dir das Paket `pacman` eine Vereinfachung. Die Funktion `p_load()` installiert Pakete, wenn die Pakete nicht installiert sind. Sollten die Pakete installiert sein, so werden die Pakete geladen. Du musst nur einmal `install.packages(pacman)` ausführen um das Paket `pacman` zu installieren.

```{r}
#| eval: false

pacman::p_load(tidyverse, magrittr, readxl)
```

Schlussendlich gibt es noch die Möglichkeit sich alles nochmal bei YouTube anzuschauen.

::: callout-tip
## Unterschied von Packages und Libraries in R

Du findest auf YouTube [Einführung in R - Teil 03 - Unterschied Packages und Libraries in R](https://youtu.be/TWimhd3ZyMM) als Video. Hier erkläre ich nochmal den Ablauf zwischen Installieren eines Paketes und dem Laden eines Paketes.
:::

## Einen Vektor bauen `c()` {#sec-R-vector}

Wir können mit der Funktion `c()` Zahlen und Wörter zu einem Vektor kombinieren.

```{r}
c("dog", "dog", "cat", "cat", "fox", "fox")
```

Hier werden die Wörter "dog", "cat" und "fox" miteinader in einen Vektor kombiniert. Wir erinnern uns an das `$` Zeichen, was uns erlaubt eine Variable als Vektor aus einem `tibble()`herauszuziehen.

## Funktionen {#sec-R-function}

Wir haben schon einige Funktion nebenbei in R kennengelernt. Zum einen `as.factor()` um einen Faktor zu erstellen oder aus dem @sec-R-packages, wo wir die Funktion `install.packages()` nutzen um ein Paket zu installieren oder aber die Funktion `library()` um ein Paket in R zu laden.

Funktionen sehen aus wie Wörter. Haben aber keine Gänsefüßchen und beinhalten auch keine Daten oder Vektoren. Funktionen können mit Daten und Vektoren rechnen und geben das Berechnete dann wieder. Nehmen wir als Beispiel die Funktion `mean()`, die den Mittelwert von einer Reihe Zahlen berechnet.

```{r}
y <- c(1.2, 3.4, 2.1, 6, 4.3)
mean(y)
```

Wir sehen, dass wir mit der Funktion `c()` die Zahlen $1.2, 3.4, 2.1, 6, 4.3$ zusammenkleben. Danach speichern wir die Zahlen in den Objekt `y` als einen Vektor ab. Wir müssen `y`nicht erst erschaffen, das Erschaffen und Speichern passiert in R in einem Schritt. Wir stecken nun den Vektor `y` in die Funktion `mean()` und erhalten den Mittelwert von $3.4$ der Zahlen wiedergegeben.

[Eigentlich müssen in der Programmierung Objekte erst **deklariert** werden und somit erschaffen. Erst dann können Objekte **initalisiert** und somit befüllt bzw. etwas zugewiesen werden.]{.aside}

## Zuweisungspfeil `<-` {#sec-R-pfeil}

Mit dem Zuweisungspfeil speichern wir *Dinge* in Objekte in R. Das heist wir speichern damit intern in R Datensätze und viele andere Sachen, die wir dan später wieder verwenden wollen. Schauen wir uns das einmal im Beispiel an. Schrieben wir nur den Vektor `c()` mit Hunden und Katzen darin, so erscheint eine Ausgabe in R.

```{r}
c("dog", "dog", "cat", "cat", "fox", "fox")
```

Schreiben wir den gleichen Vektor und nutzen den Zuweisungspfeil, dann wird der Vektor in dem Objekt `animal` gespeichert.

```{r}
animal <- c("dog", "dog", "cat", "cat", "fox", "fox")
```

Wie kommen wir jetzt an die Sachen, die in `animal` drin sind? Wir können einfach `animal` in R schreiben und dann wird uns der Inhalt von `animal` ausgegeben.

```{r}
animal
```

[Der Zuweisungspfeil `<-` ist zentral für die Nutzung von R.]{.aside}

Wir nutzen den Zuweisungspfeil `<-` ist zentral für die Nutzung von R. Wir brauchen den Zuweisungspfeil `<-` um Objekte in R zu erschaffen und Ergebnisse intern abzuspeichern. Zusammen mit Funktionen nutzen wir nur noch die Pipe `%>%` öfter.

## Pipe `%>%` {#sec-R-pipe}

::: callout-tip
## Pipes in R

Du findest auf YouTube [Einführung in R - Teil 11 - Pipes in R](https://youtu.be/6u4RR26eqNw) als Video. Hier erkläre ich den Zusammenhang nochmal in einem Video.
:::

Im Weiteren nutzen wir den Pipe Operator dargestellt als `%\>%`. Du kannst dir den Pipe Operator als eine Art Röhre vorstellen in dem die Daten verändert werden und dann an die nächste Funktion weitergeleitet werden. Im folgenden siehst du viele Funktionen, die aneinander über Objekte miteinander verbunden werden. Im @sec-dplyr erfährst du mehr über die Funktionen `select()`und `filter()`.

```{r}
data_tbl <- read_excel("data/flea_dog_cat.xlsx")
animal_1_tbl <- select(data_tbl, animal, jump_length)
animal_2_tbl <- filter(animal_1_tbl, jump_length >= 4)
sort(animal_2_tbl$jump_length)


data_tbl %>% 
  select(animal, jump_length) %>% 
  filter(jump_length >= 4) %>% 
  pull(jump_length) %>% 
  sort

```

Im unteren Beispiel siehst du die Nutzung des Pipe Operators `%>%`. Das Ergebnis ist das gleiche, aber der Code ist einfacher zu lesen. Wir nehmen den Datensatz `data_tbl` leiten den Datensatz in den Funktion `select()` und wählen die Spalten `animal` sowie `jump_length`. Dann filtern wir noch nach `jump_length`größer als 4 cm. Dann ziehen wir uns mit der Funktion `pull()` die Spalte `jump_length` aus dem Datensatz. Den Vektor leiten wir dann weiter in die Funktion `sort()` und erhalten die sortierten Sprunglängen zurück.

## Spalte extrahieren `$` {#sec-dollar}

Wir nutzen eigentlich die Funktion `pull()` um eine Spalte bzw. Vektor aus einem Datensatz zu extrahieren.

```{r}
data_tbl %>% 
  pull(animal)
```

Manche Funktionen in R, besonders die älteren Funktionen, benötigen keinen Datensatz sondern meist zwei bis drei Vektoren. Das heißt, wir können nicht einfach einen Datensatz in eine Funktion über `data = data_tbl` stecken sondern müssen der Funktion Vektoren übergeben. Dafür nutzen wir den `$` Operator.

```{r}
data_tbl$animal

data_tbl$jump_length
```

Wir werden versuchen diese Schreibweise zu vermeiden, aber manchmal ist es sehr nützlich die Möglichkeit zu haben auf diese Weise eine Spalte zu extrahieren.

## Modelle definieren mit `formula` {#sec-formula}

Wir müssen später Modelle in R definieren um zum Beispiel den t Test oder aber eine lineare Regression rechnen zu können. Wir nutzen dazu in R die `formula` Syntax. Das heißt links von der Tilde `~` steht das $y$, also der Spaltenname aus dem Datensatz `data =` den wir nutzen, der das Outcome repräsentiert. Rechts von der Tilde `~` stehen alle $x_1, ..., x_p$, also alle Spalten aus dem Datensatz `data =` den wir nutzen, der die Einflussfaktoren repräsentiert.

In unserem Beispiel mit den Hunde- und Katzenflöhen aus @sec-example-2 wäre das $y$ die Spalte `jump_length` und das $x$ der Faktor `animal`. Wir erstellen mit der Funktion `formula()` das Modell in R. Wir brauchen später die Funktion `formula` nur implizit, aber hier ist es gut, das du einmal siehst, wie so eine Formula in R aussieht.

```{r}
formula(jump_length ~ animal)
```

Wenn die Formel sehr lang wird bzw. wir die Namen der Spalten aus anderen Funktionen haben, können wir auch die Funktion `reformulate()` nutzen. Wir brauchen die Funktion aber eher im Bereich des maschinellen Lernens. Hier ist die Funktion `reformulate()` aufgeführt, da es inhaltlich passt.

```{r}
reformulate(termlabels = c("animal", "sex", "site"),
            response = "jump_length",
            intercept = TRUE)
```

## Hilfe mit `?` {#sec-R-help}

Das Fragezeichen `?` vor einem Funktionsnamen erlaubt die Hilfeseite zu öffnen. Die Hilfsseiten findest du auch in einem der Reiter im RStudio.

![Neben den Paketen in R findet sich auch der Reiter Help, wo du Hilfe für die einzelnen Funktionen findets..](images/basics-help.png){#fig-basic-01 fig-align="center"}
