# Visualisierung von Daten {#sec-eda-ggplot}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*


```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")


```


[Wir nennen eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche zu tun.]{.aside}

Ein wichtiger Teil in der Analyse von Daten ist die Visualisierung. Wir glauben keine Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbilungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen Y und X gibt. Wir haben ein $y$ vorliegen, was wir auf die y-Achse eines Graphen legen und daneben dann mehrere Variablen bzw. Spalten die wir $x$ nennen. Eine der Variablen legen wir auf die x-Achse des Graphen. Nach den anderen $x$ färben wir die Abbildung ein.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.


```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, 
               janitor, see, patchwork)
```


Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Grundlagen in ggplot()

[Im Gegensatz zu dem Pipe-Operator `%>%` nutzt ggplot den Operator `+` um die verschiedenen ggplot Funktionen (`geom_`) miteinander zu verbinden.]{.aside}

Wir nutzen in R das R Paket `ggplot2` um unsere Daten zu visualisieren. Die zentrale Idee von `ggplot2` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Das Konzept von `ggplot2`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `ggplot2` zu visualisieren...

::: callout-tip
## Grundlagen von ggplot() im Video

Du findest auf YouTube [Einführung in R - Teil 16.0 - Trockenübung ggplot2 simpel und einfach erklärt](https://youtu.be/SGwSVzJ9C-s) als Video.

Sowie auch auf YouTube [Einführung in R - Teil 16.1 - Abbildungen mit ggplot in R erstellen. Idee und Konzept von ggplot](https://youtu.be/SRRQQO3DXtc) als Video. Also alles nochmal als Video - vielleicht einfacher nachzuvollziehen als in einem Fließtext.
:::

Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot` für die Erstellung von Boxplots, das `geom_histogram` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an.

### Datenbeispiel

Wir importieren den Datensatz `flea_cat_dog.xlsx` und wollen einzelne Variablen visualisieren. Wir kennen den Datensatz schon aus dem @sec-example-2. Dennoch nochmal hier der Datensatz in @tbl-cat-dog-ggplot.


```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal))
```


[Spaltennamen sind in **Englisch** und haben **keine Leerzeichen**. Die Funktion `clean_names()` aus dem R Paket `janitor` ist hier eine Hilfe.]{.aside}

Im folgenden ist es wichtig, dass du dir die Spaltennamen merkst. Wir können nur die exakten, wortwörtlichen Spaltennamen verwenden. Sonst erhalten wir einen Fehler. Deshalb haben wir auch keine Leerzeichen in den Spaltennamen.


```{r}
#| echo: false
#| label: tbl-cat-dog-ggplot
#| tbl-cap: "Beispieldatensatz für Eigenschaften von Flöhen von zwei Tierarten."

flea_dog_cat_tbl %>% kable(align = "c", "pipe")
```


### Erste Abbildung in ggplot()

Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`).


```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```


Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` bennent den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die x-Achse soll, was auf die y-Achse soll sowie ob es noch andere Faktoren in den Daten gibt.
    -   `x` braucht den Spaltennamen für die Variable auf der x-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der y-Achse.

[**Faktoren** meint hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor`erschaffen haben.]{.aside}


```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```


Wir sehen, dass wir nichts sehen in @fig-ggplot-1. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen.

## Häufig verwendete Abbildungen

In diesem Kapitel wollen wir durch die häufigsten und wichtigsten Abbildungen in der explorativen Datenanalyse durchghen. Das wären im folgenden diese Abbildungen:

-   **Histogramm** in @sec-eda-histogramm für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   **Boxplot** in @sec-eda-boxplot für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable.
-   **Barplot** in @sec-eda-barplot für 5 und mehr Beobachtungen (pro Gruppe). Der Barplot oder das **Balkendiagramm** stellt den Mitelwert und die Standardabweichung da.
-   **Dotplot** in @sec-eda-dotplot für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   **Scatterplot** in @sec-eda-scatter für zwei kontinuierliche Variablen. Auch **xy-Plot** genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   **Mosaicplot** in @sec-eda-mosaic für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.

[Konkret ist eine **Variable** gleich einer **Spalte** in einem Datensatz.]{.aside}

::: callout-tip
## Histogramm, Boxplot, Scatterplot und Mosaicplot im Video

Du findest auf YouTube [Einführung in R - Teil 16.2 - Histogramm, Boxplot, Scatterplot und Mosaicplot mit ggplot in R](https://youtu.be/Zdw6NlLauNw) als Video. Weitere Videos werden dann noch folgen und ergänzt.
:::

### Histogramm {#sec-eda-histogramm}

Wir nutzen für die Erstellung eines Histogramms den Datensatz `dog_fleas_hist.csv`. Wir brauchen für ein anständiges Histogramm, wo du auch was erkennen kannst, mindestens 20 Beobachtung. Am besten mehr noch mhr Beobachtungen. Deshalb schauen wir uns jetzt einmal 39 Hunde an und zählen wieviele Flöhe die Hunde jeweils haben, dargestellt in der Spalte`flea_count`. Darüber hinaus bestimmen wir auch noch das mittlere Gewicht der Flöhe auf dem jeweiligen Hund, dargestellt in der Spalte `flea_weight`.

```{r}
#| message: false
dog_fleas_hist_tbl <- read_csv("data/dog_fleas_hist.csv")
```

```{r}
#| echo: false
#| label: tbl-cat-dog-histogram
#| tbl-cap: "Beispieldatensatz für die Anzahl an Flöhen auf 39 Hunden. Gezählt wurde die Anzahl an Flöhen `flea_count` und das gemittelte Gewicht der Flöhe `flea_weight`."

dog_fleas_hist_tbl %>% kable(align = "c", "pipe")
```

@tbl-cat-dog-histogram zeigt den Datensatz `dog_fleas_hist.csv`. Wir wollen jetzt die Variable `flea_count` und `flea_weight` jeweils abbilden. Wir beginnen mit der diskreten Variable `flea_count`. Im Gegensatz zu der Variable `flea_weight` haben wir bei der Anzahl gleiche Zahlen vorliegen, die wir dann zusammen darstellen können. @fig-dotplot-flea-1 zeigt die Darstellung der Tabelle. Auf der x-Achse ist die Anzahl an Flöhen dargestellt. Auf der y-Achse die Anzahl der jeweiligen Anzahl an Flöhen. Das klingt jetzt etwas schief, aber schauen wir uns die Abbilung näher an.

```{r }
#| echo: false
#| message: false
#| label: fig-dotplot-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Die Anzahl von Flöhen auf 39 Hunden. Jeder Punkt entspricht einem Hund und der entsprechenden Anzahl an Flöhen auf dem Hund."


ggplot(dog_fleas_hist_tbl, aes(x = flea_count)) + 
  geom_dotplot() +
  theme_bw() +
  scale_x_continuous(breaks = c(14,15,16,17,18,19)-14) +
  scale_y_continuous(labels = c(0, 5, 9, 13, 17)) +
  labs(x = "Anzahl Flöhe", y = "Anzahl") 

```

Wir sehen in @fig-dotplot-flea-1 das acht Hunde keine Flöhe hatten - also eine Anzahl an Flöhen von 0. Auf der anderen Seite hatten zwei Hunde vier Flöhe und ein Hund hatte sogar fünf Flöhe. Wir sehen also die *Verteilung* der Anzahl an Flöhen über alle unsere 39 Hundebeobachtungen.

Wir schauen uns aber die Verteilung der Anzahl an Flöhen meist nicht in der Form von gestapelten Punkten an, sondern in der Form eines Histogramms also einem Balkendiagramm. @fig-hist-flea-count zeigt das Histogramm für die Anzahl der Flöhe.

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-count
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Histogramm der Anzahl von Flöhen auf 39 Hunden."

ggplot(data = dog_fleas_hist_tbl, aes(x = flea_count)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Anzahl Flöhe", y = "Anzahl") 
```

Was sehen wir in der @fig-hist-flea-count? Anstatt von gestapelten Punkten sehen wir jetzt Balken, die die jeweilige Anzahl an Flöhen zusammenfassen. Der Unterschied ist bei einer diskreten Variable wie der Anzahl (eng. *count*) relativ gering.

Anders sieht es für kontenuierliche Variablen mit Kommazahlen aus. Schauen wir uns das Gewicht der Flöhe an, so sehen wir, dass es sehr viele Zahlen gibt, die nur einmal vorkomen. @fig-hist-flea-1 zeigt das Histogramm für das Geicht der Flöhe.

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Histogramm des Gewichts von Flöhen auf 39 Hunden."

ggplot(data = dog_fleas_hist_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Gewicht [mg]", y = "Anzahl") 
```

Wie entsteht nun ein Hisotgramm für konetnierliche Zahlen? Schauen wir uns dafür einmal ein kleineres Datenbeispiel an, in dem wir nur Flöhe mit einem Gewicht größer als 11 und kleiner als 19 wäheln. Wir nutzen dazu die Funktion `filter(flea_weight > 11 & flea_weight < 19)`. Wir erhalten folgende Zahlen und das entsprechende Histogramm.

```{r }
#| echo: false
#| message: false
#| fig-align: center
#| label: fig-hist-flea-2
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen den einzelnen Beobachtungen und der Höhe der einzelnen Balken am Beispiel von acht Hunden."

small_tbl <- dog_fleas_hist_tbl %>% 
  filter(flea_weight > 11 & flea_weight < 19)

small_tbl %>% 
  arrange(flea_weight) %>% 
  pull(flea_weight)

ggplot(data = small_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black", alpha = 0.5) +
  scale_x_continuous(breaks = 11:19) +
  scale_y_continuous(breaks = 0:5) +
  geom_vline(xintercept = seq(10.5, 19.5), color = cbbPalette[6], alpha = 0.5,
             linetype = "dashed") +
  geom_vline(xintercept = small_tbl$flea_weight, color = cbbPalette[7], size = 1.5) +
  geom_hline(yintercept = 0:5, color = cbbPalette[6], alpha = 0.5,
             linetype = "dashed") +
  theme_bw() +
  labs(x = "Gewicht [mg]", y = "Anzahl") 

```

@fig-hist-flea-2 zeigt das Histogramm der reduzierten Daten. Die roten vertikalen Linien zeigen die Position der einzelnen Flohgewichte auf der x-Achse. Die blauen Hilfslinien machen nochmal klarer, wie hoch die einzelnen Balken sind sowie welche Beobachtungen auf der x-Achse in den jeweiligen Balken mit eingehen. Wir sehen, dass wir einen Hund mit Flöhen haben, die zwischen 12.5 und 13.5 wiegen - der entsprechende Balken erhält die Anzahl von eins. Auf der anderen Seite sehen wir, dass es drei Hunde mit Flöhen, die zwischen 17.5 und 18.5 wiegen. Daher wächst der Balken auf eine Anzahl von drei.

Wir können mit der Option `binwidth` in dem `geom_histogram()` einstellen, wie breit auf der x-Achse die jeweiligen Balken sein sollen. Hier empfiehlt es sich verschiedene Zahlen für `binwidth`auszuprobieren.

### Density Plot

Eine weitere Möglichkeit sich eine Verteilung anzuschauen, ist die Daten nicht als Balkendiagramm sondern als Densityplot - also Dichteverteilung - anzusehen. Im Prinzip verwandeln wir die Balken in eine Kurve. Damit würden wir im Prinzip unterschiedliche Balkenhöhen ausgleichen udn eine "glattere" Darstellung erreichen. Wir wir aber gleich sehen werden, benötigen wir dazu eine Menge an Beoabchtungen und auch dann ist das Ergebnis eventuell nicht gut zu interpretieren.

```{r }
#| echo: true
#| message: false
#| label: fig-dens-flea-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Zusammenhang von Histogramm und Densityplot an der Anzahl der Flöhe auf 39 Hunden."
#| fig-subcap: 
#|   - "Histogramm"
#|   - "Densityplot"
#| layout-nrow: 1
#| column: page


ggplot(data = dog_fleas_hist_tbl, aes(x = flea_count)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Anzahl Flöhe", y = "Anzahl")

ggplot(data = dog_fleas_hist_tbl, aes(x = flea_count)) +
  geom_density(fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Anzahl Flöhe", y = "Häufigkeit") 


```

@fig-dens-flea-1 zeigt auf der linken Seite erneut die Abbildung des Histogramms als Balkendiagramm für die Anzahl der Flöhe auf den 39 Hunden. Auf der rechten Seite die entsprechenden gleichen Daten als Denistyplot. Klar ist die Wellenbewegung des Densityplots zu erkennen. Hier leigen zu wenige Beobachtungen und Kategorien auf der x-Achse vor, so dass der Densityplot nicht zu empfehlen ist.

```{r }
#| echo: true
#| message: false
#| label: fig-dens-flea-2
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Zusammenhang von Histogramm und Densityplot am Gewicht der Flöhe auf 39 Hunden."
#| fig-subcap: 
#|   - "Histogramm"
#|   - "Densityplot"
#| layout-nrow: 1
#| column: page


ggplot(data = dog_fleas_hist_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Gewicht [mg]", y = "Anzahl") 

ggplot(data = dog_fleas_hist_tbl, aes(x = flea_weight)) +
  geom_density(fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Gewicht [mg]", y = "Häufigkeit") 



```

@fig-dens-flea-2 zeigt auf der linken Seite erneut die Abbildung des Histogramms als Balkendiagramm für das Gewicht der Flöhe auf den 39 Hunden. Insbesondere bei dieser Abbildung erkennst du die Nachteile des Densityplot. Dadurch das es einen Peak von acht Hunden mit einem Flohgewicht von 0 gibt, zeigt der Densityplot eine seltsame Wellenform. Es emppfielt sich daher die Daten zuerst als Histogramm zu betrachten.



### Boxplot {#sec-eda-boxplot}

In @sec-desc-stat haben wir den Median und die Quartile kennengelernt. Mit dem Boxplot können wir den Median und die Quartile visualisieren. In @fig-boxplot-drawn sehen wir einen Boxplot, der den Median und die Quartile visualisiert. Die Box wird aus dem IQR gebildet. Der Median wird als Strich in der Box gezeigt. Die Schnurrhaare (eng. *Whiskers*) sind das 1.5 fache des IQR. Punkte die außerhalb der Schnurrhaare liegen werden als einzelne Punkte dargestellt. Diese einzelnen Punkte werden auch als Ausreißer (eng. *Outlier*) bezeichnet.

::: column-page
![Ein Boxplot der die statistischen Maßzahlen Median und Quartile visualisiert. Die Box wird aus dem IQR gebildet. Der Median wird als Strich in der Box gezeigt. Die Schnurrhaare sind das 1.5 fache des IQR. Punkte die außerhalb der Schnurrhaare liegen werden als einzele Punkte dargestellt.](images/boxplot-drawn.png){#fig-boxplot-drawn fig-align="center" width="100%"}
:::

In @fig-boxplot-drawn-distribution sehen wir den Zusammenhang zwischen einem Histogramm, Densityplot und dem Boxplot. Der Median $\tilde{y}$ im Boxplot zeigt die höchste Stelle des Densityplots an. Durch einen Boxplot kann die Verteilung der entsprechenden Zahlen abgeschätzt werden.

![Der Zusammenhang von Histogram, Densityplot und Boxplot.](images/boxplot-drawn-distribution.png){#fig-boxplot-drawn-distribution fig-align="center" width="100%"}

Die "liegende" Darstellung des Boxplots dient nur der Veranschaulichung und dem Verständnis des Zusammenhangs von Histogramm und Boxplot. In der @fig-boxplot-drawn-flipped sehen wir drei Boxplots für einen Faktor mit drei Leveln. Jedes Level wird duch einen Boxplot dargestellt. Zum Beispiel eine Düngerbehandlung mit drei Konzentrationen. Auf der x-Achse würden wir die Behandelung finden und auf der y-Achse das Trockengewicht in \[kg/ha\].

![Typische Darstellung von drei Gruppen jeweils dargestellt durch einen Boxplot. Boxplots werden in der Anwendung stehtend dargestellt. Insbesondere wenn die Boxplots mehrere Gruppen repräsentieren.](images/boxplot-drawn-flipped.png){#fig-boxplot-drawn-flipped fig-align="center" width="60%"}

Wie erstellen wir nun einen Boxplot in R? Zuerst laden wir die Daten mit der Funktion `read_excel()` in R, wenn du die Daten als `.xlsx` Datei vorliegen hast. Im XX kannst du nochmal das Importieren von Daten wiederholen.

```{r}
#| message: false
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

```{r }
#| echo: false
#| message: false
#| label: fig-boxplot-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."

ggplot(flea_dog_cat_tbl, aes(x = animal, y = jump_length)) + 
  geom_boxplot() +
  theme_bw() +
  labs(x = "Tierart", y = "Sprungweite [cm]") 

```

In @fig-boxplot-flea-0 ist der Boxplot für die Daten aus der Datei `flea_dog_cat.xlsx` dargestellt. Auf der x-Achse finden wir die Tierart als `cat` und `dog`. Auf der y-Achse ist die Sprungweite in \[cm\] dargestellt.

Wir erkennen auf einen Blick, dass die Sprungweite von den Hundeflöhen weiter ist als die Sprungweite der Katzenflöhe. Im Weiteren können wir abschätzen, dass die Streuung etwa gleich groß ist. Die Boxen sind in etwa gleich groß und die Whiskers in etwa gleich lang.

```{r }
#| echo: true
#| message: false
#| label: fig-boxplot-freshmatter-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."

ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  geom_jitter(width = 0.25, shape = 1) +
  theme_bw() +
  labs(x = "Tierart", y = "Sprungweite [cm]") 

```

Wir neigen dazu die Boxplots überzuinterpretieren, wenn die Anzahl der Beobachtungen klein ist. Deshalb können wir mit dem `geom_jitter()` noch die Beobachtungen zu den Boxplot ergänzen, dargestellt in @fig-boxplot-freshmatter-2. Die Funktion `geom_jitter()` streut die Punkte zufällig, so dass keine Punkte übereinanderliegen. Wir haben hier die Streuuweite durch die Option `width = 0.25` etwas eingeschränkt. Darüber hinaus habe wir das Aussehen der Punkte mit `shape = 1` geändert, so dass wir die Jitter-Punkte von den potenziellen Ausreißer-Punkten unterscheiden können. Du kannst auch andere Zahlen hinter `shape` eintragen um verschiedene Punktesymbole durchzuprobieren. Eine Übersicht an `shapes` findest du auch hier unter [Cookbook for R \> Graphs \> Shapes and line types](http://www.cookbook-r.com/Graphs/Shapes_and_line_types/).



### Barplot oder Balkendiagramm {#sec-eda-barplot}

Der Barplot oder das Balkendiagramm ist eigentlich veraltet. Wir haben mit dem Boxplot eine viel bessere Methode um eine Verteilung und *gleichzeitig* auch die Gruppenunterschiede zu visualisieren. Warum nutzen wir jetzt so viel den Braplot? Das hat damit zu tun, dass früher - oder besser bis vor kurzem - in Excel kein Boxplot möglich war. Daher nutzte jeder der mit Excel seine Daten auswertet den Barplot. Und was der Bauer nicht kennt...

::: column-margin
1.  Alles was es schon gab, als Du geboren wurdest, ist normal und gewöhnlich. Diese Dinge werden als natürlich wahrgenommen und halten die Welt am Laufen.
2.  Alles was zwischen Deinem 16ten und 36ten Lebensjahr erfunden wird ist neu, aufregend und revoltionär. Und vermutlich kannst Du in dem Bereich sogar Karriere machen.
3.  Alles was nach dem 36ten Lebensjahr erfunden wird ist gegen die natürliche Ordnung der Dinge.

-- Douglas Adams aus *Per Anhalter durch die Galaxis*
:::

Deshalb ist hier auch der Barplot dargestellt. Ich persönlich mag den Barplot übrhaupt nicht. Der Barplot ist einfach schlechter als der Boxplot. Aber gut, häufog musst du den Barplot in deiner Abschlussarbeit machen. Also dann hier der Barplot.

Wie erstellen wir nun einen Barplot in R? Zuerst laden wir die Daten mit der Funktion `read_excel()` in R, wenn du die Daten als `.xlsx` Datei vorliegen hast. Im @sec-programming-import kannst du nochmal das Importieren von Daten wiederholen.


```{r}
#| message: false
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx")
```


Wir müssen jetzt für `ggplot()` noch den Mittelwert und die Streuung für die Gruppen berechnen. Ein komplexeres Beispiel für einen Barplot findets du in @sec-beispiel-auswertung. Du kanst als Streuung die Standardabweichung oder den Standardfehler nehmen. Ich würde die Standardabweichung bei kleinen Fallzahlen kleiner als 20 Beobachtungen nehmen.


```{r}
stat_tbl <- flea_dog_cat_tbl %>% 
  group_by(animal) %>% 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length),
            se = sd/sqrt(n()))
```


Wir nutzen nun das Objekt `stat_tbl` um den Barplot mit der Funktion `ggplot()` zu erstellen. Dabei müssen wir zum einen schauen, dass die Balken nicht übereinander angeordnet sind. Nebeneinander angeordnete Balken kriegen wir mit der Option `stat = "identity"` in dem `geom_bar()`. Dann müssen wir noch die Fehlerbalken ergänzen mit dem `geom_errorbar`. Hier kann nochmal mit der Option `width =` an der Länge der Fehlerenden gedreht werden.


```{r}
#| message: false

ggplot(stat_tbl, aes(x = animal, y = mean, fill = animal)) + 
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                  width = 0.2)
```


Im Zweifel muss du nochmal googlen und schauen welche Form dir am besten zusgat. Es gibt sehr viele Möglichkeiten einen Barplot zu erstellen. Daher komm im Zweifel einmal ins R Tutorium.

### Dotplot {#sec-eda-dotplot}

Wenn wir weniger als fünf Beobachtungen haben, dann ist meist ein Boxplot verzerrend. Wir sehen eine Box und glauben, dass wir viele Datenpunkte vorliegen haben. Bei 3 bis 7 Beobachtungen je Gruppe bietet sich der Dotplot als eine Lösung an. Wir stellen hier alle Beobachtungen als einzelne Punkte dar.

Wie erstellen wir nun einen Dotplot in R? Zuerst laden wir die Daten mit der Funktion `read_excel()` in R, wenn du die Daten als `.xlsx` Datei vorliegen hast. Im XX kannst du nochmal das Importieren von Daten wiederholen.

```{r}
#| message: false
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

```{r }
#| echo: true
#| message: false
#| label: fig-dotplot-flea-eda-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Der Dotplot für die Anzahl der Flöhe für die beiden Tierarten Hund und Katze."

ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = grade,
                                    fill = animal)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  theme_bw() +
  labs(x = "Tierart", y = "Boniturnote [1-9]") 


```

In @fig-dotplot-flea-eda-0 sehen wir den Dotplot aus der Datei `flea_dog_cat.xlsx`. Auf der x-Achse sind die Level des Faktors `animal` dargestellt und auf der y-Achse die Notenbewertung `grade` der einzelnen Hunde und Katzen. Die Funktion `geom_dotplot()` erschafft das Layer für die Dots bzw. Punkte. Wir müssen in der Funktion noch zwei Dinge angeben, damit der Plot so aussieht, dass wir den Dotplot gut interpretieren können. Zum einen müssen wir die Option `binaxis = y` wählen, damit die Punkte horizontal geordent werden. Zum anderen wollen wir auch, dass die Punkte zentriert sind und nutzen dafür die Option `stackdir = center`.

```{r }
#| echo: true
#| message: false
#| label: fig-dotplot-flea-eda-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Der Dotplot für die Anzahl der Flöhe für die beiden Tierarten Hund und Katze. Die schwarze Linie stelt den Median für die beiden Tierarten dar."

ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = grade,
                            fill = animal)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  stat_summary(fun = median, fun.min = median, fun.max = median,
               geom = "crossbar", width = 0.5) +
  theme_bw() +
  labs(x = "Tierart", y = "Boniturnote [1-9]") 


```

Nun macht es wenig Sinn bei sehr wenigen Beobachtungen noch statistische Maßzahlen mit in den Plot zu zeichnen. Sonst hätten wir auch gleich einen Boxplot als Visualisierung der Daten wählen können. In @fig-dotplot-flea-eda-1 sehen wir die Ergänzung des Medians. Hier müssen wir etwas mehr angeben, aber immerhin haben wir so eine Idee, wo die "meisten" Beobachtungen wären. Aber auch hier ist Vorsicht geboten. Wir haben sehr wenige Beobachtungen, so dass eine Beobachtung mehr oder weniger große Auswirkungen auf den Median und die Interpretation hat.



### Scatterplot {#sec-eda-scatter}

Der Scatterplot wird auch xy-Plot genannt. Wir stellen in einem Scatterplot zwei kontenuierliche Variablen dar. Dann wollen wir eine Linie durch die Punkte legen. Im Prinzip fragen wir uns, wie hänge die Werte auf der y-Achse von den Werten auf der x-Achse ab? Wenn sich also die Werte auf der x-Achse erhöhen, wie verhalten sich dann die Werte auf der y-Achse?


```{r }
#| echo: true
#| message: false
#| label: fig-scatter-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und der Anzahl an Flöhen auf den 39 Hunden. Jeder Punkt stellt einen Hund dar."

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_bw() +
  labs(x = "Anzahl der Flöhe", y = "Sprungweite in [cm]") 

```


@fig-scatter-flea-0 zeigt den Scatterplot für die Spalte `flea_count` auf der x-Achse und `jump_length` auf der y-Achse. Mit der Funktion `geom_point()` können wir die Punktepaare für jede Beobachtung zeichnen. In unserem Fall zeichnen wir mit der Funktion `stat_smooth()` noch die entsprechende Grade durch die Punkte. Es handelt sich hierbei um eine Regression. Du kannst im Kapitel XX mehr darüber erfahren.

### Mosaic Plot {#sec-eda-mosaic}

Wenn wir zwei Spalten visualisieren wollen, die aus zwei Faktoren bestehen mit jeweils zwei Leveln, dann nutzen wir den Mosaic Plot. Wir nutzen den Datensatz `flea_dog_cat.xlsx` mit vierzehn Beobachtungen. Zuerst drehen wir nochmal die Ordnung der Level in dem Faktor `animal`.


```{r}
flea_dog_cat_mosaic_tbl <- flea_dog_cat_tbl %>%
  mutate(animal = factor(animal, levels = c("dog", "cat"))) 
```


Schauen wir uns einmal die 2x2 Kreuztabelle der beiden Spalten `animal` and `infected` an. Um die 2x2 Tabelle in R in der richtigen Orientierung zu vorliegen zu haben, müssen wir nochmal einen kleinen Klimmzug über `mutate()` nehmen. Wir wandeln die Variable `infected` in einen Faktor um und sortieren die Level entsprechend, so dass wir die richtige Ordnung wie später im Mosaic Plot vorliegen haben. Dieser Umweg hat nur didaktische Gründe, später plotten wir den Mosaic Plot direkt und schauen uns vorher nicht die 2x2 Tabelle in R an.


```{r}
flea_dog_cat_mosaic_tbl %>% 
  mutate(infected = factor(infected, levels = c(1, 0))) %>% 
  tabyl(infected, animal) 
```


Wir sehen in der Tabelle, dass wir mehr uninfizierte Tiere (n = 9) als infizierte Tiere haben (n = 5). Die Aufteilung zwischen den beiden Tierarten ist nahezu gleich. Im folgenden wollen wir diese Tabelle durch einen Mosaic Plot einmal visualisieren.

Um jetzt einen Mosaic Plot zeichnen zu können müssen wir die relativen Anteile pro Spalte bzw. für jedes Level von $x$ berechnen. In unserem Fall ist $x$ die Variable `animal` und die Level sind `dog` und `cat`. In der folgenden 2x2 Kreutablle werden die relativen Anteile für die Hunde- und Katzenflöhe für den Infektionsstatus berechnet.

|              |           |                       |                       |              |
|:------------:|:---------:|:---------------------:|:---------------------:|:------------:|
|              |           |      **Animal**       |                       |              |
|              |           |         *Dog*         |         *Cat*         |              |
| **Infected** | *Yes (1)* | $\cfrac{3}{7} = 0.43$ | $\cfrac{2}{7} = 0.29$ | $\mathbf{5}$ |
|              | *No (0)*  | $\cfrac{4}{7} = 0.57$ | $\cfrac{5}{7} = 0.71$ | $\mathbf{9}$ |
|              |           |     $\mathbf{7}$      |     $\mathbf{7}$      |   $n = 14$   |

Wir können jetzt die relativen Anteile in den Mosaic Plot übertragen und erhalten die @fig-mosaic-flea-0. Wir müssen also zuerst die absoluten Anteile bestimmen um dann die relativen Anteile für die Spalten berechnen zu können. Abschließend zeichnen wir dann den Mosaic Plot. Wir nutzen dafür das R Paket `ggmosaic` mit der Funktion `geom_mosaic()`.


```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-mosaic-flea-0
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Visualisierung einer 2x2 Tabelle als Mosaic Plot. Die unterschiedlich großen Flächen geben die Verhältnisse wieder."

ggplot(data = flea_dog_cat_mosaic_tbl) +
  geom_mosaic(aes(x = product(infected, animal), fill = animal)) +
  theme(legend.position = "none")

```


@fig-mosaic-flea-0 zeigt den Mosaic Plot für die Variable `animal` and `infected`. Die untrschiedlich großen Flächen bilden die Verhältnisse der 2x2 Tabelle ab. So sehen wir, dass es mehr uninfizierte Tiere als infizierte Tiere gibt. Am meisten gibt es uninfizierte Katzen. Am wenigstens treten infizierte Katzen auf.

## Überschriften, Achsen und Legenden

Wenn du mehr machen willst, also die Überschriften anpassen oder aber die Achsenbeschriftung ändern, dann gibt es hier global Hilfe im [ggplot Manual](https://ggplot2.tidyverse.org/reference/index.html). Die Webseite [R Cookbook](https://ggplot2.tidyverse.org/reference/index.html) hat auch spezielle Hilfe für ggplot().

-   [Überschriften von Abbildungen](http://www.cookbook-r.com/Graphs/Titles_(ggplot2)/)
-   [Achsenbeschriftung](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/)
-   [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/)
-   [Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)

[Im @sec-r-tutorium findest du Informationen zum R Tutorium, wann und wo es stattfindet.]{.aside}

In @fig-labels-0 siehst du eine Abbildung mit Titel und veränderten Beschriftungen. Die Möglichkeiten sind nahezu unbegrenzt und sprengen auch hier den Rahmen. Im Zweifel im R Tutorium vorbeischauen oder aber in der Vorlesung fragen.


```{r }
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung mit Titel und geänderter Achsenbeschrittung"


ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha") +
  scale_x_discrete(labels = c("Katze", "Hund")) +
  scale_fill_discrete(name = "Behandlung", labels = c("Katze", "Hund")) +
  theme_bw() 

```


## Die Okabe-Ito Farbpalette

::: column-margin
Mehr zum R Paket `see` auf der [Hilfeseite des Paketes](https://easystats.github.io/see/index.html)
:::

Neben den klassischen Farben im R Paket `ggplot`gibt es noch weit, weit mehr Farbpaletten. Wir nutzen in der Folge immer wieder die Okabe-Ito Farbpalette aus dem R Paket `see`. Die Okabe-Ito Farbpalette ist speziell so gebaut, dass die Farben sich gut für farbenblinde Personen unterscheiden. Der Kontrast zwischen den Farben ist sehr gut. Wenn du eine andere Farbpalette nutzen willst, findest du hier noch andere [Color Scales](https://easystats.github.io/see/articles/seecolorscales.html).


```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Boxplots."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           fill = animal)) +
  geom_boxplot() +
  scale_fill_okabeito() +
  theme_bw()
```

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Punkte."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```


## Abbildungen nebeneinander

Das [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) erlaubt es mehrere `ggplot` Abbildungen nebeneinander oder in einem beliebigen Layout miteinander zu verbinden. Das tolle ist, dass die Idee sehr intutiv ist. Wir nutzen wieder das `+` um verschiedene Plots miteinander zu verbinden.

Im Folgenden erschaffen wir uns zwei `ggplots` und speichern die Plots in den Objekten `p1` und `p2`. Das ist wie wir es bisher kennen, nur das jetzt keine Abbildung erscheint sondern beide Plots in zwei Objekten gespeichert sind.


```{r}
#| warning: false
#| echo: true
#| message: false

p1 <- ggplot(data = flea_dog_cat_tbl, 
             aes(x = flea_count, y = jump_length,
                 color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()

p2 <- ggplot(data = flea_dog_cat_tbl, 
                aes(x = animal, y = jump_length,
                    color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```


Wie können wir nun die beiden Abbildungen nebeneinander zeichnen? Wir nutzen einfach das `+` Symbol.


```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-patchwork-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 9
#| fig-cap: "Beispielhafte Abbildung der zweier Plots nebeneinander."

p1 + p2
```


Auf der Seite des [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) findest du viel mehr Möglichkeiten das Layout anzupassen und auch die einzelnen [Subplots zu beschriften](https://patchwork.data-imaginist.com/articles/guides/annotation.html).

