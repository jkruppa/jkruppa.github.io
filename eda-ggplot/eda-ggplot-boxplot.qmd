Mit dem Boxplot können wir den Median und die Quartile visualisieren. Im Folgenden unterscheide ich dann einmal die theoretische Betrachtung des Boxplots sowie die händische Darstellung für unsere Flohdaten als Beispiel. Dann implementieren wir den Boxplot für die Sprungweiten der Hunde- und Katzenflöhe noch einmal abschließend in `{ggplot}`. Im Folgenden siehst du im ersten Tab einen Boxplot, der den Median und die Quartile eines beliebigen Datensatzes visualisiert.

::: panel-tabset
## Theoretisch

Die Box wird aus dem Interquartilesabstand (abk . *IQR*) gebildet. Der Median wird als Strich in der Box gezeigt. Die Schnurrhaare (eng. *Whiskers*) sind das 1.5-fache des IQR, wenn nicht das Minimum der Beobachtungen oder das Maximum jeweils größer oder kleiner ist. Punkte die außerhalb der Whiskers liegen werden als einzelne Punkte dargestellt. Diese einzelnen Punkte werden auch als Ausreißer (eng. *Outlier*) bezeichnet. Ob es sich nun wirklich um Ausreißer handelt, muss biologisch geklärt werden.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-boxplot-drawn
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Liegender Boxplot zu Visualisierung der statistischen Maßzahlen Median und Quartile. Die Box wird aus dem Interquartilesabstand (abk . *IQR*) gebildet, welches die Distanz zwischen den $1^{st}$ und $3^{rd}$ Quartile entspricht. Der Median wird als Strich in der Box gezeigt. Die Whiskers sind das 1.5-fache des IQR, wenn das Minimum der Werte nicht größer oder das Maximum der Werte nicht kleiner ist. Punkte die außerhalb der Whiskers liegen werden als einzelne Punkte dargestellt. *[Zum Vergrößern anklicken]*"

tibble(x = c(1, 1.5, 14, 15, 17), y = 2) |> 
  ggplot(aes(x, y)) +
  theme_minimal() + 
  geom_point() +
  ylim(0.6, 3) +
  ## box 
  geom_rect(aes(xmin = 4, xmax = 10, ymin = 1.75, ymax = 2.25), fill = "gray75") +
  geom_segment(x = 4, y = 1.75, xend = 10, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 4, y = 2.25, xend = 10, yend = 2.25, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 4, y = 2.25, xend = 4, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 10, y = 2.25, xend = 10, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 8, y = 2.25, xend = 8, yend = 1.75, color = "black",
               linewidth = 1.5, linetype = 1) +
  geom_segment(x = 2.2, y = 2, xend = 4, yend = 2, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 10, y = 2, xend = 13, yend = 2, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 2.5, y = 2.75, label = expression(1^st), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 2.7, y = 2.68, xend = 4, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 6, y = 2.75, label = expression(Median), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 7.15, y = 2.7, xend = 8, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 11.5, y = 2.75, label = expression(3^rd), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 11, y = 2.68, xend = 10, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 15.5, y = 2.75, label = expression(Outlier), size = 6,
           color = "#0072B2") +
  geom_curve(x = 14.5, y = 2.68, xend = 14, yend = 2.075, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#0072B2") +
  geom_curve(x = 15.5, y = 2.6, xend = 15.1, yend = 2.075, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#0072B2") +
  geom_curve(x = 16.45, y = 2.68, xend = 17, yend = 2.075, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#0072B2") +
  annotate("text", x = 7, y = 1.5, label = expression(IQR), size = 6,
           color = "#D55E00") +
  geom_segment(x = 7.8, y = 1.5, xend = 10, yend = 1.5, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 4, y = 1.5, xend = 6.2, yend = 1.5, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 4, y = 1.55, xend = 4, yend = 1.45, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 10, y = 1.55, xend = 10, yend = 1.45, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  annotate("text", x = 2.2, y = 1, label = expression(Max*'('*3^rd-1.5%*%IQR*';'~Min*')'), 
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 2.1, y = 1, xend = 2.15, yend = 2, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#009E73") +
  annotate("text", x = 13, y = 0.65, label = expression(Min*'('*3^rd+1.5%*%IQR*';'~Max*')'),
           size = 5, color = "#009E73", hjust = "right") +
  geom_curve(x = 13.1, y = 0.65, xend = 13.05, yend = 2, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") + 
  labs(x = "", y = "") +
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) 

```

## Händisch

Jetzt können wir einmal händisch den Boxplot für die Hundeflöhe und der Sprungweite zeichnen. Ich habe dafür dann einmal die Werte für das $1^{st}$ und $3^{rd}$ Quartile mit jeweils 5.7 und 9.1 bestimmt. Der Median der Sprungweite der Hundeflöhe liegt bei 8.2 und der Interquartilesabstand (abk . *IQR*) ist 3.4, wie du in der nicht maßstabsgetreuen Abbildung sehen kannst. Die Länge der Whisker berechne ich einmal mit $1^{st} - 1.5 \times IQR = 0.6$ sowie $3^{rd} + 1.5 \times IQR = 14.2$ und vergleiche die beiden Werte mit dem Minimum von 5.7 und 11.8 der Sprungweite. In beiden Fällen entscheide ich mich dann für die Minimum und Maximum-Werte.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-boxplot-drawn-dog-flea
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Liegender Boxplot zu Visualisierung der Sprungweite der Hundeflöhe. Die Abbildung ist nicht maßstabsgetreu. Die Box wird aus dem Interquartilesabstand (abk . *IQR*) gebildet, welches die Distanz zwischen den $1^{st}$ und $3^{rd}$ Quartile entspricht. Es liegen keine Ausreißer in den Daten vor. *[Zum Vergrößern anklicken]*"

tibble(x = c(1, 1.5, 14, 15, 17), y = 2) |> 
  ggplot(aes(x, y)) +
  theme_minimal() + 
  ylim(0.6, 3) +
  ## box 
  geom_rect(aes(xmin = 4, xmax = 10, ymin = 1.75, ymax = 2.25), fill = "gray75") +
  geom_segment(x = 4, y = 1.75, xend = 10, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 4, y = 2.25, xend = 10, yend = 2.25, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 4, y = 2.25, xend = 4, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 10, y = 2.25, xend = 10, yend = 1.75, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 8, y = 2.25, xend = 8, yend = 1.75, color = "black",
               linewidth = 1.5, linetype = 1) +
  geom_segment(x = 2.2, y = 2, xend = 4, yend = 2, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 10, y = 2, xend = 13, yend = 2, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 2.5, y = 2.75, label = expression(5.7), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 3, y = 2.75, xend = 4, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 6.6, y = 2.75, label = expression(8.2), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 7.15, y = 2.725, xend = 8, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 11.5, y = 2.75, label = expression(9.1), size = 6,
           color = "#CC79A7") +
  geom_curve(x = 11, y = 2.7, xend = 10, yend = 2.3, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 7, y = 1.5, label = expression(3.4), size = 6,
           color = "#D55E00") +
  geom_segment(x = 7.8, y = 1.5, xend = 10, yend = 1.5, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 4, y = 1.5, xend = 6.2, yend = 1.5, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 4, y = 1.55, xend = 4, yend = 1.45, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 10, y = 1.55, xend = 10, yend = 1.45, color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  annotate("text", x = 2.2, y = 1, label = expression(Max*'('*0.6*';'~5.7*')'~'='~5.7), 
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 2.1, y = 1, xend = 2.15, yend = 2, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#009E73") +
  annotate("text", x = 13, y = 0.65, label = expression(Min*'('*14.2*';'~11.8*')'~'='~11.8),
           size = 5, color = "#009E73", hjust = "right") +
  geom_curve(x = 13.1, y = 0.65, xend = 13.05, yend = 2, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") + 
  labs(x = "", y = "") +
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) 

```

Auch wenn die Abbildung nicht maßstabsgetreu ist, können wir abschätzen, dass unsere Sprungweiten der Hundeflöhe in etwa normalverteilt sind, da der Median in etwa in der Mitte der Box liegt. Darüber hinaus sind auch die Whiskers in etwa gleich lang. Ja, in der Statistik ist vieles eine Abschätzung.

## `{ggplot}`

Jetzt kommt die Kür, wie erstellen wir einen Boxplot in R mit dem R Paket `{ggplot}`? Dafür schauen wir uns erstmal an, wie ein Boxplot aussehen würde. Im Folgenden siehst du einmal die Abbildung eines liegenden Boxplot der Hundeflöhe und deren Sprungweiten erstellt in `{ggplot}`. Wir du erkennen kannst, gibt es da kaum einen Unterschied zu der händischen Darstellung.

```{r }
#| echo: false
#| message: false
#| label: fig-boxplot-flea-2
#| fig-align: center
#| fig-height: 2
#| fig-width: 6
#| fig-cap: "Liegender Boxplot zu Visualisierung der Sprungweite der Hundeflöhe. Die Linien entsprechen den jeweiligen gemessenen Sprungweiten. *[Zum Vergrößern anklicken]*"

flea_dog_tbl <- flea_dog_cat_tbl |> 
  filter(animal == "dog")

flea_dog_cat_tbl |> 
  filter(animal == "dog") |> 
  ggplot(aes(x = animal, y = jump_length, fill = animal)) +
  geom_boxplot() +
  theme_minimal() +
  coord_flip() +
  labs(x = "", y = "Sprungweite [cm]") +
  scale_y_continuous(breaks = flea_dog_tbl$jump_length,
                     guide = guide_axis(n.dodge=2)) +
  scale_fill_okabeito() +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.text = element_text(size = 12))

```

Nun ist ein liegender Boxplot eher ungewöhnlich in der Darstellung. Zum zeichnen und verstehen macht das schon Sinn, aber wenn wir später dann mit dem Boxplot arbeiten, dann nutzen wir die stehende Varaiante.

```{r }
#| echo: false
#| message: false
#| label: fig-boxplot-flea-0
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 2
#| fig-cap: "Stehender Boxplot zu Visualisierung der Sprungweite der Hundeflöhe. Die Linien entsprechen den jeweiligen gemessenen Sprungweiten. *[Zum Vergrößern anklicken]*"

flea_dog_tbl |> 
  ggplot(aes(x = animal, y = jump_length, fill = animal)) +
  geom_boxplot() +
  theme_minimal() +
  labs(x = "Tierart", y = "Sprungweite [cm]") +
  scale_fill_okabeito() +
  scale_y_continuous(breaks = flea_dog_tbl$jump_length,
                     guide = guide_axis(n.dodge=2)) +
  theme(legend.position = "none",
        panel.grid.minor = element_blank(),
        axis.text = element_text(size = 11))
```

Häufig nutze wir Boxplots um Gruppen, wie hier die Tierarten, miteinander zu vergleichen. In @fig-boxplot-flea-0 ist daher der Boxplot für die Sprungweite in \[cm\] der Hunde- und Katzenflöhe dargestellt. Wir erkennen auf einen Blick, dass die Sprungweite von den Hundeflöhen weiter ist als die Sprungweite der Katzenflöhe. Im Weiteren können wir abschätzen, dass die Streuung etwa gleich groß ist. Die Boxen sind in etwa gleich groß und die Whiskers in etwa gleich lang.

```{r }
#| echo: true
#| message: false
#| label: fig-boxplot-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Stehender Boxplot zu Visualisierung der Sprungweite der Hunde- und Katzenflöhe. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length, fill = animal)) +
  theme_minimal() +
  geom_boxplot() +
  labs(x = "Tierart", y = "Sprungweite [cm]") +
  theme(legend.position = "none")

```
:::

Der Boxplot erlaubt uns auch abzuschätzen, ob wir eine Normalverteilung vorliegen haben oder aber ob die Varianz in zwei oder. mehr Gruppen annähernd ist. Wir sprechen dann von Varianzhomogenität.

Abschätzung der Normalverteilung

:   Der Median liegt in der Mitte der Box und die Whiskers sind ungefähr gleich lang. Wir können von einer approximativen Normalverteilung ausgehen.

Abschätzung der Varianzhomogenität

:   Die Boxen sind über alle Gruppen ungefähr gleich groß und auch die Whiskers haben in etwa die gleiche Länge. Wir können dann von einer Varianzhomogenität über die Gruppen ausgehen.

Schau dir auch hier mal in den Kästen zum Zerforschen rein, da findest du dann noch mehr Inspiration aus anderen Abbildungen, die ich nachgebaut habe. Ich bin einmal über den Campus gelaufen und habe geschaut, welche Abbildungen auf den Postern verwendet werden und habe diese nachgebaut.

::: {.callout-note collapse="true"}
## Zerforschen: Zweifaktorieller Barplot oder Boxplot

{{< include zerforschen/zerforschen-barplot-2fac.qmd >}}
:::

::: {.callout-note collapse="true"}
## Zerforschen: Boxplot für mehrere Outcomes

{{< include zerforschen/zerforschen-boxplot-mult.qmd >}}
:::
