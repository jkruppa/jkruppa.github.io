```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Logistische Regression {#sec-logistic}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Annahmen an die Daten

[Unser gemessenes Outcome $y$ folgt einer Binomialverteilung. Damit finden wir im Outcome nur $0$ oder $1$ Werte.]{.aside}

Im folgenden Kapitel zu der multiplen logistischen linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form *ideal* sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.

-   Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das @sec-missing zu Imputation von fehlenden Werten.
-   Wenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das @sec-outlier zu Ausreißer in den Daten.
-   Wenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das @sec-variable-selection bei der Variablenselektion.

Daher sieht unser Modell wie folgt aus. Wir haben ein $y$ und $p$-mal $x$. Wobei $p$ für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser $y$ einer Binomailverteilung. Damit finden wir im Outcome nur $0$ oder $1$ Werte. Das ist hier sehr wichtig, denn wir wollen ja eine multiple logistische lineare Regression rechnen.

$$
y \sim x_1 + x_2 + ... + x_p 
$$

Wir können in dem Modell auch Faktoren $f$ haben, aber es geht hier nicht um einen Gruppenvergleich. Das ist ganz wichtig. Wenn du einen Gruppenvergleich rechnen willst, dann musst du in @sec-posthoc nochmal nachlesen.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               parameters, performance, gtsummary)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") 

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-log-pigs
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page


rbind(head(pig_tbl),
      rep("...", times = ncol(pig_tbl)),
      tail(pig_tbl)) %>% 
  kable(align = "c", "pipe")
```

## Theoretischer Hintergrund

Modellierung der Wahrscheinlichkeit für den Eintritt des Ereignisses

$$
Y \rightarrow Pr(Y = 1)
$$

$Pr(Y = 1)$ liegt zwischen $0$ un $1$

$\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}$ oder auch Chance (eng. *Odds*) für das Eintreten von $Y=1$ liegt zwischen $0$ und $+\infty$

$\log\left(\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}\right)$ liegt zwischen $-\infty$ und $+\infty$

$\log\left(\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}\right) = \beta_0 + \beta_1 x_1 + \epsilon$

Wahrscheinlichkeit: Anteil an Allen Anteil Gewinner an allen Teilnehmern Anteil Personen mit Therapieerfolg an allen Studienteilnehmern

Chance = Odds: Verhältnis Verhältnis Gewinner zu Nichtgewinner Verhältnis Personen mit Therapieerfolg zu Personen ohne Therapieerfolg

2 Kombinationen gewinnen - 3 Kombinationen verlieren Wahrscheinlichkeit zu gewinnen: $2 / 5 = 0.40$ Chance zu gewinnen: $2:3 = 0.67$ Deutlicherer Unterschied zwischen Chance und Wahrscheinlichkeit

## Modellierung

```{r}
#| message: false
#| warning: false
fit_1 <- glm(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, 
             data = pig_tbl, family = binomial)

```

```{r}
#| message: false
#| warning: false
model_parameters(fit_1, exponentiate = TRUE)
```

```{r}
#| message: false
#| warning: false
r2(fit_1)
```

@tbl-tbl-summary-logreg

```{r}
#| message: false
#| warning: false
#| label: tbl-tbl-summary-logreg
#| tbl-cap: "."

pig_tbl %>% tbl_summary(by = infected) %>% add_p() %>% as_flex_table()
```

@tbl-tbl-regression-logreg

```{r}
#| message: false
#| warning: false
#| label: tbl-tbl-regression-logreg
#| tbl-cap: "."

fit_1 %>% tbl_regression(exponentiate = TRUE) %>% as_flex_table()
```

Wir können uns einmal die Ergebnisse des Modellfits die logistischen Gerade für eine simple lineare Regression mit dem Modell $infected \sim crp$ anschauen. Wie immer können wir uns den Zusammenhang nur in einem simplen Modell anschauen. Im Fall einer multiplen linearen Regresion können wir nicht so viele Dimensionen in einer Grpahik darstellen. Wir fitten also das Modell `fit_2` wie im folgenden dargestellt.

```{r}
fit_2 <- glm(infected ~ crp, data = pig_tbl, family = binomial)
```

Nun können wir uns mit der Funktion `predict()` die Wert auf der Geraden wiedergeben lassen. Wenn wir `predict()` nur so aufrufen, dann erhalten wir die Werte für $y$ auf der transformierten $link$-Scale wieder. Das hilft uns aber nicht weiter, wir haben ja nur 0 und 1 Werte für $y$ vorliegen.

```{r}
predict(fit_2, type = "link") %>% 
  extract(1:10) %>% 
  round(2)
```

Da wir die Werte für die Wahrscheinlichkeit das ein Ferkel infiziert ist, also die Wahrscheinlichkeit $Pr(infected = 1)$, müssen wir noch die Option `type = reponse` wählen. So erhalten wir die Wahrscheinlichkeiten wiedergegeben.

```{r}
predict(fit_2, type = "response") %>% 
  extract(1:10) %>% 
  round(2)

```

Abschließend können wir uns die Gerade auch in der @fig-log-pred visualisieren lassen. Auf der x-Achse sehen wir die `crp`-Werte und auf der y-Achse den Infektionsstatus. Auf der $reponse$-scale sehen wir eine S-Kurve. Auf der $link$-scale würden wir eine Gerade sehen.

```{r}
#| echo: true
#| message: false
#| label: fig-log-pred
#| fig-align: center
#| fig-height: 3
#| fig-width: 5
#| fig-cap: "Visualisierung der logistischen Gerade in einer simplen logistischen Regression mit der Variable `crp`."

ggplot(pig_tbl, aes(x = crp, y = infected)) +
  theme_bw() +
  geom_point() +
  geom_line(aes(y = predict(fit_2, type = "response")), color = "red") 

```
