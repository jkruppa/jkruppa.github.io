In diesem Zerforschenbeispiel wollen wir uns einen zweifaktoriellen Barplot oder Säulendiagramm anschauen. Wir haben hier ein Säulendiagramm mit den Mittelwerten über den Faktor auf der $x$-Achse vorliegen. Daher brauchen wir eigentlich gar nicht so viele Zahlen. Für jede der drei Fruchtgrößen jeweils einmal einen Mittelwert für die Höhe der Säule sowie einmal die Standardabweichung für die vier Stickstoffangebote. Das addiert sich dann auf, aber es geht noch. Die Standardabweichung addieren und subtrahieren wir dann später jeweils von dem Mittelwert und schon haben wir die Fehlerbalken. Da ich auch hier einmal als Alternative die Boxplots erstellen will, brauche ich hier mehr Werte aus denen ich dann die Mittelwerte und die Standardabweichung berechne.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Ein zweifaktorieller Barplot mit Mittelwerten über dem Faktor auf der $x$-Achse.](images/eda/zerforschen_barplot_complex_01.png){#fig-ur-barplot-02 fig-align="center" width="100%"}

Als erstes brauchen wir wieder die Daten. Die Daten habe ich mir in dem Datensatz `zerforschen_barplot_2fac.xlsx` selber ausgedacht. Ich habe einfach die obige Abbildung genommen und den Mittelwert abgeschätzt. Dann habe ich die drei Werte alle um den Mittelwert streuen lassen. Das war es dann auch schon.

```{r}
barplot_tbl <- read_excel("data/zerforschen_barplot_2fac.xlsx") |> 
  mutate(frucht = factor(frucht, 
                         levels = c("klein", "mittel", "groß"),
                         labels = c("Klein", "Mittel", "Groß")),
         nmin = as_factor(nmin))
barplot_tbl 
```

Jetzt brauchen wir noch die Mittelwerte und die Standardabweichung für jede der drei Fruchtgrößen und Stickstoffangebote. Hier nur kurz, den Code kennst du schon aus anderen Zerforschenbeispielen zu den Barplots. Das ist soweit erstmal nichts besonderes und ähnelt auch der Erstellung der anderen Barplots.

```{r}
#| message: false
#| warning: false
stat_all_tbl <- barplot_tbl |> 
  group_by(frucht, nmin) |> 
  summarise(mean = mean(yield),
            sd = sd(yield))
stat_all_tbl
```

Weil wir dann noch die globalen Mittelwerte der Früchte über alle Stickstofflevel wollen, müssen wir nochmal die Mittelwerte und die Standardabweichung nur für die drei Fruchtgrößen berechnen. Daher haben wir dann *zwei* Datensätze, die uns eine Zusammenfassung der Daten liefern.

```{r}
stat_fruit_tbl <- barplot_tbl |> 
  group_by(frucht) |> 
  summarise(mean = mean(yield))
stat_fruit_tbl
```

Auch hier möchte ich einmal den Barplot nachbauen und dann als Alternative noch den Barplot anbieten. Am nervigsten war der Zeilenumbruch in der Legendenbeschriftung mit N$_min$. Es hat echt gedauert, bis ich die Funktion `atop()` gefunden hatte, die in einer `expression()` einen Zeilenumbruch erzwingt. Meine Güte war das langwierig. Der Rest ist eigentlich wie schon in den anderen Beispielen. Da schaue dann doch nochmal da mit rein.

::: panel-tabset
## Barplot

Einmal der Barplot wie beschrieben. Vergleiche auch einmal diese Abbildung der Barplots mit der Abbildung der Boxplots in dem anderem Tab und überlege, welche der beiden Abbildungen dir mehr Informationen liefert.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut."

ggplot(data = stat_all_tbl, aes(x = frucht, y = mean,
                                fill = nmin)) +
  theme_minimal() +
  geom_bar(stat = "identity", position = position_dodge(0.9)) + 
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), 
                width = 0.2, position = position_dodge(0.9)) +
  labs(x = "Fruchtgröße zum Erntezeitpunkt", 
       y = expression(atop("Gesamtfruchtertrag", "["*kg~FM~m^"-2"*"]")),
       fill = expression(atop(N[min]~"Angebot", "["*kg~N~ha^"-1"*"]"))) +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12),
                     limits = c(0, 12)) +
  scale_fill_okabeito() +
  theme(legend.position = "right",
        legend.box.background = element_rect(color = "black"),
        legend.box.margin = margin(t = 1, l = 1),
        legend.text.align = 0) +
  annotate("text", x = c(1, 2, 3, 1.45), y = c(6, 10, 11, 3),
           label = c(expression(bar(y)*" = "*2.7),
                     expression(bar(y)*" = "*6.9),
                     expression(bar(y)*" = "*8.1),
                     "SD"))
```

## Boxplot

Für die Boxplots müssen wir gar nicht viel tun. Wir müssen nur noch das `geom_bar()` und `geom_errorbar()` entfernen und durch das `geom_boxplot()` ersetzen. Dann haben wir auch schon unsere wunderbaren Boxplots. Das Problem sind natürlich die wenigen Beobachtungen, deshalb sehen die Boxplots teilweise etwas wild aus. Beachte auch das wir die Orginaldaten nutzen und nicht die zusammengefassten Daten.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac-box
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` als Boxplot nachgebaut."

ggplot(data = barplot_tbl, aes(x = frucht, y = yield,
                               fill = nmin)) +
  theme_minimal() +
  geom_boxplot() +
  labs(x = "Fruchtgröße zum Erntezeitpunkt", 
       y = expression(atop("Gesamtfruchtertrag", "["*kg~FM~m^"-2"*"]")),
       fill = expression(atop(N[min]~"Angebot", "["*kg~N~ha^"-1"*"]"))) +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12),
                     limits = c(0, 12)) +
  scale_fill_okabeito() +
  theme(legend.position = "right",
        legend.box.background = element_rect(color = "black"),
        legend.box.margin = margin(t = 1, l = 1),
        legend.text.align = 0) +
  annotate("text", x = c(1, 2, 3), y = c(6, 10, 11),
           label = c(expression(bar(y)*" = "*2.7),
                     expression(bar(y)*" = "*6.9),
                     expression(bar(y)*" = "*8.1)))
```
:::

Am Ende kannst du dann folgenden Code noch hinter deinen `ggplot` Code ausführen um dann deine Abbildung als `*.png`-Datei zu speichern. Dann hast du die Abbildung super nachgebaut und sie sieht auch wirklich besser aus.

```{r}
#| eval: false
ggsave("my_ggplot_barplot.png", width = 5, height = 3)
```
