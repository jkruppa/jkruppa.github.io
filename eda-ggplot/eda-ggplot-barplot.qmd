Der Barplot oder das Balkendiagramm auch Säulendiagramm ist *eigentlich* veraltet. Wir haben mit dem Boxplot eine viel bessere Methode um eine Verteilung und gleichzeitig auch die Gruppenunterschiede zu visualisieren. Warum nutzen wir jetzt so viel den Barplot? Das hat damit zu tun, dass früher - oder besser bis vor kurzem - in Excel kein Boxplot möglich war. Daher nutzte jeder der mit Excel seine Daten auswertet den Barplot.

Muss die 0 mit auf die y-Achse?

:   Der *einzige* Grund, warum wir einen Barplot nutzen wollen würden, wäre wenn wir unbedingt die 0 mit auf der y-Achse haben wollten.

Weil aber eben noch viel der Barplot genutzt wird, stelle ich natürlich den Barplot auch hier vor. Der Barplot beinhaltet aber weniger Informationen als der Boxplot. Wir haben nur die Standardabweichung als Maßzahl für die Streuung. Beim Boxplot haben wir den Interquartilesabstand (abk . *IQR*), der uns mehr über die Streuung aussagt. Aber gut, häufig musst du den Barplot in deiner Abschlussarbeit machen. Zuerst betrachten wir die theoretische Darstellung. Dann zeige ich dir die Werte für unsere Sprungweiten der Hundeflöhe. Im letzten Tab findest du dann die Implementierung in `{ggplot}`.

::: panel-tabset
## Theoretisch

In den folgenden beiden Abbildungen siehst du einmal zwei Säulendigramme. Die Säulen gehen exakt so hoch wie der Mittelwert $\bar{y}$ der entsprechenden Gruppe $A$. Dann berechnen wir noch für die Fehlerbalken die Standardabweichung (abk. *SD*). Je nachdem wie wir die Säulendigramme darstellen wollen, zeigen wir nur $\bar{y} + SD$ oder aber $\bar{y} \pm SD$. Hier gibt es keine richtige Regel, das hängt sehr vom Geschmack ab und unterscheidet sich auch von Publikation zu Publikation. Je nachdem was wir als Outcome gemessen haben, können wir auch Überlegen anstatt der Standardabweichung den Standardfehler (abk. *SE*) zu nutzen.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-barplot-drawn-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 8
#| fig-cap: "Darstellung der Mittelwerte $\\bar{y}$ und der Standardabweichung (abk. *SD*) in einem Säulendigramm. Es gibt zwei Arten der Darstellung, die sich dann auf die Fehlerbalken bezieht. **(A)** Nur mit $\\bar{y} + SD$ **(B)** Mit $\\bar{y} \\pm SD$. *[Zum Vergrößern anklicken]*"

p1 <- tibble(x = c(0,  1, 2, 3), y = 8.13) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  ylim(0, 12) +
  geom_rect(aes(xmin = 0.75, xmax = 1.25, ymin = 0, ymax = 8.13), fill = "gray75",
            color = "black",  linewidth = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 10.27, xend = 1.1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 1.75, y = 9, label = expression(Mittelwert~'('*bar(y)*')'), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.7, y = 9, xend = 1.3, yend = 8.13, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 11, label = expression(bar(y)+SD), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.95, y = 11, xend = 1.1, yend = 10.5, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") + 
  labs(x = "", y = "") +
  scale_y_continuous(breaks = 0)  +
  scale_x_continuous(breaks = 1, label = "A") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) 

p2 <- tibble(x = c(0,  1, 2, 3), y = 8.13) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  ylim(0, 12) +
  geom_rect(aes(xmin = 0.75, xmax = 1.25, ymin = 0, ymax = 8.13), fill = "gray75",
            color = "black",  linewidth = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 10.27, xend = 1.1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 5.99, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 5.99, xend = 1.1, yend = 5.99, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 1.75, y = 9, label = expression(Mittelwert~'('*bar(y)*')'), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.7, y = 9, xend = 1.3, yend = 8.13, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 11, label = expression(bar(y)+SD), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.95, y = 11, xend = 1.1, yend = 10.5, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") + 
  annotate("text", x = 2, y = 7, label = expression(bar(y)-SD), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.95, y = 6.8, xend = 1.15, yend = 5.9, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") + 
  labs(x = "", y = "") +
  scale_y_continuous(breaks = 0)  +
  scale_x_continuous(breaks = 1, label = "A") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) 

p1 + p2 + 
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A') +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))

```

## Händisch

In den beiden folgenden Abbildungen siehst du einmal die Sprungweite der Hundeflöhe als ein Säulendigramm dargestellt. Wir haben den Mittelwert mit 8.13 sowie die Standardabweichung mit 2.14 berechnet. Daraus ergeben sich dann die Grenzen der Fehlerbalken. Ich habe dann in der rechten Abbildung die Fehlerbalken dann noch mit dem Standardfehler von 0.81 dargestellt. Wie du siehst, werden dann die Fehlerbalken kleiner, der Mittelwert bleibt natürlich in beiden Fällen gleich. Mehr dazu dann in dem [Kapitel zur deskriptiven Statistik](#sec-desc-stat) und unter diesem Kasten.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-barplot-drawn-02
#| fig-align: center
#| fig-height: 5
#| fig-width: 8
#| fig-cap: "Darstellung der Mittelwerte $\\bar{y}$ und der Standardabweichung (abk. *SD*) sowie dem Standardfehler (abk. *SE*) in einem Säulendigramm. **(A)** Mit $\\bar{y} \\pm SD$ **(B)** Mit $\\bar{y} \\pm SE$. *[Zum Vergrößern anklicken]*"

p1 <- tibble(x = c(0,  1, 2, 3), y = 8.13) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  ylim(0, 12) +
  geom_rect(aes(xmin = 0.75, xmax = 1.25, ymin = 0, ymax = 8.13), fill = "gray75",
            color = "black",  linewidth = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 10.27, xend = 1.1, yend = 10.27, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 5.99, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 5.99, xend = 1.1, yend = 5.99, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 2, y = 9, label = expression(8.13), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.975, y = 9, xend = 1.3, yend = 8.13, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.2, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 11, label = expression(10.27), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 2, y = 11, xend = 1.1, yend = 10.5, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 7, label = expression(5.99), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 2, y = 6.7, xend = 1.15, yend = 5.9, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") + 
  labs(x = "", y = "") +
  scale_y_continuous(breaks = 0)  +
  scale_x_continuous(breaks = 1, label = "dog") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  ggtitle("Mit Standardabweichung")

p2 <- tibble(x = c(0,  1, 2, 3), y = 8.13) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  ylim(0, 12) +
  geom_rect(aes(xmin = 0.75, xmax = 1.25, ymin = 0, ymax = 8.13), fill = "gray75",
            color = "black",  linewidth = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 8.94, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 8.94, xend = 1.1, yend = 8.94, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 1, y = 8.13, xend = 1, yend = 7.32, color = "black",
               linewidth = 1, linetype = 1) +
  geom_segment(x = 0.9, y = 7.32, xend = 1.1, yend = 7.32, color = "black",
               linewidth = 1, linetype = 1) +
  annotate("text", x = 2, y = 9, label = expression(8.13), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 1.975, y = 9, xend = 1.3, yend = 8.13, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.2, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 11, label = expression(8.94), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 2, y = 11, xend = 1.1, yend = 9.1, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#CC79A7") +
  annotate("text", x = 2, y = 7, label = expression(7.32), size = 6,
           color = "#CC79A7", hjust = "left") +
  geom_curve(x = 2, y = 6.8, xend = 1.15, yend = 7.35, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3, color = "#CC79A7") + 
  labs(x = "", y = "") +
  scale_y_continuous(breaks = 0)  +
  scale_x_continuous(breaks = 1, label = "dog") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  ggtitle("Mit Standardfehler")

p1 + p2 + 
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A') +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

## `{ggplot}`

Wir schauen uns hier einmal in `{ggplot}` den einfaktoriellen sowie zweifaktoriellen Barplot an. Wenn wir von einem einfaktoriellen Barplot sprechen, dann haben wir nur eine Gruppe auf der x-Achse vorliegen. Wenn wir einen zweifaktoriellen Barplot bauen wollen, dann brauchen wir noch einen zweiten Gruppenfaktor für die Legende. Das klingt jetzt etwas wirr, wird aber gleich im Beispiel klarer.

#### Einfaktorieller Barplot {.unnumbered .unlisted}

Wenn wir ein Säulendigramm in `ggplot()` erstellen wollen, dann müssen wir jetzt den Mittelwert und die Streuung für die Gruppen in unseren Daten der Hunde- und Katzenflöhe berechnen. Du kannst als Streuung die Standardabweichung `sd` oder den Standardfehler `se` nehmen. Wir nehmen wir einmal die Standardabweichung für die Abbildung.

```{r}
stat_fac1_tbl <- fac1_tbl |> 
  group_by(animal) |> 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length),
            se = sd/sqrt(n()))
```

Wir nutzen nun das Objekt `stat_tbl` um den Barplot mit der Funktion `ggplot()` zu erstellen. Dabei müssen wir zum einen schauen, dass die Balken nicht übereinander angeordnet sind. Nebeneinander angeordnete Balken kriegen wir mit der Option `stat = "identity"` in dem `geom_bar()`. Dann müssen wir noch die Fehlerbalken ergänzen mit dem `geom_errorbar()`. Hier kann nochmal mit der Option `width =` an der Länge der Fehlerenden gedreht werden.

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-barplot-drawn-03
#| fig-align: center
#| fig-height: 4
#| fig-width: 3.5
#| fig-cap: "Säulendigramm der Sprungweiten der Hunde- und Katzenflöhe. *[Zum Vergrößern anklicken]*"

ggplot(stat_fac1_tbl, aes(x = animal, y = mean, fill = animal)) + 
  theme_minimal() +
  geom_bar(stat = "identity") +
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                width = 0.2)

```

Dank der Funktion `coord_flip()` können wir auch schnell aus dem Säulendiagramm ein Balkendiagramm bauen. Du musst dann immer schauen, was besser in deine Visualisierung passt.

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-barplot-drawn-04
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 6
#| fig-cap: "Balkendigramm der Sprungweiten der Hunde- und Katzenflöhe. Die Funktion `coord_flip()` macht aus einem Säulendiagramm ein Balkendiagramm. *[Zum Vergrößern anklicken]*"

ggplot(stat_fac1_tbl, aes(x = animal, y = mean, fill = animal)) + 
  theme_minimal() +
  geom_bar(stat = "identity") +
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                width = 0.2) +
  coord_flip()
```

In der folgenden Abbildung siehst du dann nochmal den Barplot mit mehr Optionen und Informationen dargestellt. Auch habe ich die Farbpalette `scale_fill_okabeito()` aus dem R Paket `{see}` genutzt.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-posthoc-barplot-1fac
#| fig-align: center
#| fig-height: 4
#| fig-width: 3.5
#| fig-cap: "Beispielhafter einfaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten mit mehr Optionen und angepassten Beschriftungen."

ggplot(data = stat_fac1_tbl, 
       aes(x = animal, y = mean, fill = animal)) +
  theme_minimal() +
  geom_bar(stat = "identity") + 
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), 
                width = 0.2) + 
  labs(x = "Flohart", y = "Sprungweite in [cm]") +
  theme(legend.position = "none") + 
  scale_fill_okabeito() 
```

#### Zweifaktorieller Barplot {.unnumbered .unlisted}

Für den zweifaktoriellen Barplot brauchen wir einmal den Mittelwert und die Standardabweichung der einzelne Floharten getrennt für die beiden Messorte. Das geht natürlich auch umgedreht, also die Messorte für die Floharten. Das kommt dann auf deine Fragestellung an.

```{r}
#| message: false
#| warning: false
stat_fac2_tbl <- fac2_tbl |> 
  group_by(animal, sex) |> 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length))
stat_fac2_tbl
```

Und dann können wir auch schon den zweifaktoriellen Barplot in `{ggplot}` erstellen. Du musst schauen, was du auf die x-Achse legst und was du dann auf die Legende und daher auch so gruppierst. Damit die Positionen passen, spiele ich hier noch mit der Funktion `position_dodge()` rum.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-posthoc-barplot-2fac
#| fig-align: center
#| fig-height: 4
#| fig-width: 4
#| fig-cap: "Beispielhafter zweifaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten und den beiden Geschlechtern."

ggplot(data = stat_fac2_tbl, 
       aes(x = sex, y = mean, fill = animal)) +
  theme_minimal() +
  geom_bar(stat = "identity", width = 0.9, 
           position = position_dodge(0.9)) + 
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), 
                width = 0.2, 
                position = position_dodge(0.9)) + 
  labs(x = "Flohart", y = "Sprungweite in [cm]", fill = "Tierart") +
  scale_fill_okabeito() 
```

## `{tidyplots}`

#### Einfaktorieller Barplot {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-tidyplot-barplot-1fac
#| fig-align: center
#| fig-height: 4
#| fig-width: 3.5
#| fig-cap: "Beispielhafter einfaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten mit mehr Optionen und angepassten Beschriftungen."

tidyplot(data = fac1_tbl, 
         x = animal, y = jump_length, color = animal) |> 
  add_data_points() |>
  add_mean_bar(alpha = 0.4) |> 
  add_sd_errorbar(width = 0.2) |> 
  remove_legend() |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Flohart") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  rename_x_axis_labels(new_names = c("dog" = "Hund", "cat" = "Katze", "fox" = "Fuchs")) |> 
  adjust_size(width = NA, height = NA) 
```

#### Zweifaktorieller Barplot {.unnumbered .unlisted}

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-tidyplot-barplot-2fac
#| fig-align: center
#| fig-height: 4
#| fig-width: 4
#| fig-cap: "Beispielhafter zweifaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten und den beiden Geschlechtern der Flöhe mit mehr Optionen und angepassten Beschriftungen."

tidyplot(data = fac2_tbl, 
         x = animal, y = jump_length, color = sex) |> 
  add_data_points(alpha = 0.2, dodge_width = 1.2) |>
  add_mean_bar(alpha = 0.4) |> 
  add_sd_errorbar(width = 0.2) |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Flohart") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  adjust_legend_title("Geschlecht") |> 
  adjust_legend_position("top") |> 
  rename_x_axis_labels(new_names = c("dog" = "Hund", "cat" = "Katze", "fox" = "Fuchs")) |> 
  rename_color_labels(new_names = c("male" = "männlich", "female" = "weiblich")) |> 
  adjust_size(width = NA, height = NA) 
```

## Excel

Dann habe ich mich doch noch hingesetzt und einmal für dich die Videos gemacht, wie du dann einen Barplot oder eben ein Säulendigramm in Excel erstellst. Das ganze macht dann nur als Video Sinn, denn sonst kannst du ja nicht nachvollziehen, was ich geklickt habe.

Hier also erstmal die einfachere Variante mit dem 1-faktoriellen Barplot. Beginnen wollen wir wie immer mit der Berechnung der Mittelwerte und der Standardabweichung. Bitte nutze für die Standardabweichung die Funktion `STABW.S()` in Excel.

{{< video https://youtu.be/UdZ5p8euo64 >}}

Und im Anschluss nochmal das Video für den 2-faktoriellen Barplot. Du hast jetzt eben nicht nur eine Behandlungsgruppe vorliegen sondern zwei Behandlungsgruppen. Dann musst du etwas mehr Arbeit reinstecken um alle Mittelwerte und Standardabweichungen zu berechnen. Bitte nutze auch hier für die Standardabweichung die Funktion `STABW.S()` in Excel.

{{< video https://youtu.be/mGSMZ6C7x4E >}}
:::

Bei der Darstellung des Barplots haben wir die Wahl wie wir den Fehlerbalken darstellen. Dazu haben wir dann verschiedene Maßzahlen zu Auswahl. Theoretisch haben wir die freie Wahl zwischen der Standardabweichung und dem Standardfehler, aber es gibt Ausnahmen.

Standardabweichung (abk. *SD*) oder Standardfehler (abk. *SE*) als Fehlerbalken?

:   Wenn du etwas misst, was natürliche numerische Grenzen hat, wie zum Beispiel relative Anteile $[0,1]$ oder aber etwas zählst $[0, \infty]$, dann empfiehlt sich der Standardfehler, da dieser nicht über die numerischen Grenzen geht. Die Standardabweichung kann hier negative Werte oder aber prozentuale Werte größer 1 oder kleiner 0 liefern. Das wollen wir nicht.

Schau dir auch hier mal in den Kästen zum Zerforschen rein, da findest du dann noch mehr Inspiration aus anderen Abbildungen, die ich nachgebaut habe. Ich bin einmal über den Campus gelaufen und habe geschaut, welche Abbildungen auf den Postern verwendet werden und habe diese nachgebaut.

::: {.callout-note collapse="true"}
## Zerforschen: Einfaktorieller Barplot mit *compact letter display*

{{< include zerforschen/zerforschen-simple-barplot.qmd >}}
:::

::: {.callout-note collapse="true"}
## Zerforschen: Zweifaktorieller Barplot mit *compact letter display*

{{< include zerforschen/zerforschen-barplot-2fac-target.qmd >}}
:::

::: {.callout-note collapse="true"}
## Zerforschen: Zweifaktorieller, gekippter Barplot mit Zielbereich

{{< include zerforschen/zerforschen-barplot-2fac-flipped.qmd >}}
:::
