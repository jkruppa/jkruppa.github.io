```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, see,
               latex2exp, patchwork, parsnip)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

# Testen in R {#sec-test-R}

*Letzte Änderung am `r format(fs::file_info("stat-tests-R.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Alles andere wäre auch Wahnsinn." --- Bjarne Mädel, Der Tatortreiniger*

------------------------------------------------------------------------

![](images/caution.png){fig-align="center" width="50%"}

**Dieses Kapitel wird ist eine Baustelle und wird es vermutlich auch über das Jahr 2024 bleiben. Aktuell weiß ich nämlich noch nicht, wo ich mit dem Kapitel hin will und wo es stehen sollte. Daher können Teile des Codes und des Textes kurzfristig keinen Sinn ergeben oder nicht funktional sein. Es ist geplant eine fertige Version noch 2024 vorliegen zu haben.**

------------------------------------------------------------------------

Dieses Startkapitel zu den statistischen Gruppenvergleichen gibt dir nochmal eine Übersicht über das statistische Test in R.

[R Paket `{infer}`](https://infer.netlify.app/)

[`calculate()`](https://infer.netlify.app/reference/calculate)

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, infer)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal)) 
```

```{r}
#| echo: false
#| message: false
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Boniturnote sowie der Infektionsstatus von Hunden und Katzen.
#| label: tbl-data-ttest

data_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal))

data_tbl |> kable(align = "c", "pipe")
```

## R Paket `{infer}`

```{r}
observed_statistic <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  calculate(stat = "diff in means", order = c("dog", "cat"))

observed_statistic
```

```{r}
null_dist_2_sample <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") |> 
  generate(reps = 1000, type = "permute") |> 
  calculate(stat = "diff in means", order = c("dog", "cat"))
```

```{r}
# visualize the randomization-based null distribution and test statistic!
null_dist_2_sample %>%
  visualize() + 
  shade_p_value(observed_statistic,
                direction = "two-sided")
```

```{r}
p_value_2_sample <- null_dist_2_sample %>%
  get_p_value(obs_stat = observed_statistic,
              direction = "two-sided")

p_value_2_sample
```

```{r}
observed_t_statistic <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  calculate(stat = "t", order = c("dog", "cat"))

```

```{r}
null_dist_theory <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  assume(distribution = "t")

visualize(null_dist_theory) +
  shade_p_value(observed_t_statistic,
                direction = "greater") +
  theme_minimal()
```

```{r}
null_dist <- flea_tbl |> 
  specify(jump_length ~ animal) |> 
  hypothesize(null = "independence") |> 
  generate(reps = 1000, type = "permute") |> 
  calculate(stat = "t", order = c("dog", "cat"))
```

```{r}
null_dist %>%
  visualize(method = "both") + 
  shade_p_value(observed_t_statistic,
                direction = "greater")
```

::: callout-note
## XX Test in `{infer}`

Auch hier können wir den XX Test in dem R Paket `{infer}` realisieren. Ein Vorteil von `{infer}` ist, dass wir die Funktionen sehr gut mit dem `|>`-Operator nutzen können. Deshalb hier einmal die *bessere* Implementierung.

::: panel-tabset
## `{infer}`

## `{base}`
:::

Eine detailliertere Einführung mit mehr Beispielen für die Nutzung vom [R Paket `{infer}`](https://infer.netlify.app/) findest du im Kapitel [Testen in R](#sec-test-R). Hier soll es dann bei der kurzen Gegenüberstellung bleiben.
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, emmeans, multcomp, conflicted)
conflicts_prefer(dplyr::select)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

Wir
