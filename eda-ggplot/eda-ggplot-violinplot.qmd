Eine etwas neuere Abbildung, die eigentlich gar so neu ist, ist der Violinplot. Der Violinplot verbindet im Prinzip den Boxplot zusammen mit dem Densityplot. Wir haben am Ende eben eine Verteilung der Daten visualisiert. Wir schauen uns aber nicht wie in einem Histogramm die Werte als Balken an, sondern glätten die Balken zu einer Kurve. Wie immer gibt es auch ein Tutorium mit noch mehr Hilfe unter [ggplot2 violin plot : Quick start guide - R software and data visualization](http://www.sthda.com/english/wiki/ggplot2-violin-plot-quick-start-guide-r-software-and-data-visualization). Wir schauen uns jetzt mal die Erstellung von Violinplots in verschiedenen Kombinationen mit anderen Abbildungen an.

Da ein Violinplot keinen Median oder sonst eine deskriptive Zahl beinhaltet, müssen wir uns eine Funktion erstellen, die den Mittelwert plusminus Standardabweichung wiedergibt. Die Funktion rufen wir dann innerhalb von `ggplot()` auf und erhalten dann den Mittelwert und Standardabweichung als einen Punkt mit zwei Linien dargestellt.

```{r}
data_summary <- function(y) {
   m <- mean(y)
   ymin <- m - sd(y)
   ymax <- m + sd(y)
   return(c(y = m, ymin = ymin, ymax = ymax))
}
```

In der @fig-violin-gummi-1 siehst du einmal einen Violinplot mit der Funktion `geom_violin()`. Ich nutze eigentlich immer die Option `trim = FALSE` damit die Violinplots nicht so abgeschnitten sind. Der Nachteil ist dann, dass eventuell Werte angezeigt werden, die in den Daten nicht vorkommen, aber das ist auch sonst der Fall bei anderen Densityplots. Hier sieht es dann einfach besser aus und deshalb nutze ich es gerne. Durch die Funktion `stat_summary()` ergänze ich dann noch den Mittelwert und die Standardabweichung.

```{r}
#| echo: true
#| message: false
#| label: fig-violin-gummi-1
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 5
#| fig-cap: "Der Violinplot die Körpergröße aufgeteilt nach Geschlecht als die simpelste Art der Darstellung mit einem Violinplot. Ergänzt noch durch den Mittelwert plusminus der Standardabweichung."

ggplot(data = gummi_tbl, aes(x = gender, y = height,
                             color = gender)) +
  theme_bw() +
  geom_violin(trim = FALSE) +
  theme(legend.position = "none") +
  stat_summary(fun.data = data_summary) +
  labs(x = "Geschlecht", y = "Körpergröße in cm") +
  scale_color_okabeito()
```

In der nächsten @fig-violin-gummi-2 siehst du dann die Implementierung des Violinplot aus dem R Paket `{see}` mit der Funktion `geom_violindot()`. Auch hier trimme ich nicht die Spitzen der Violinplots und vergrößere die Punkte in dem Dotplot. Die Stärke von der Funktion ist der halbe Violinplot zusammen mit einem Dotplot, wir haben dann beides. Zum einen können wir die Werte sehen, wie sie sich in einem Histogramm anordnen würden. Zum anderen haben wir dann auch den Densityplot als geglättete Kurve daneben. Ich habe auch hier den Mittelwert und die Standardabweichung ergänzt, musste aber die Position in der $x$-Richtung etwas verschieben.

```{r}
#| echo: true
#| message: false
#| label: fig-violin-gummi-2
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 5
#| fig-cap: "Der Violinplot die Körpergröße aufgeteilt nach Geschlecht als die simpelste Art der Darstellung mit einem Violinplot. Ergänzt noch durch den Mittelwert plusminus der Standardabweichung. Hier müssen wir aber die Darstellung auf der $x$-Achse um $0.1$ etwas verschieben."
ggplot(data = gummi_tbl, aes(x = gender, y = height,
                             color = gender)) +
  theme_bw() +
  geom_violindot(dots_size = 4, trim = FALSE) +
  theme(legend.position = "none") +
  stat_summary(fun.data = data_summary, 
               position = position_nudge(x = 0.1)) +
  labs(x = "Geschlecht", y = "Körpergröße in cm") +
  scale_color_okabeito()
```

Du musst natürlich keine Funktion aus einem anderen Paket nehmen. Der Violinplot lässt sich als ganzer Plot auch mit dem Dotplot kombinieren. Wir plotten als erstes in den Hintergrund den Violinplot, ergänzen dann darüber den Dotplot und zeichnen ganz zum Schluss noch die Mittelwerte und die Standardabweichung ein. So erhalten wir dann die @fig-violin-gummi-3.

```{r}
#| echo: true
#| message: false
#| label: fig-violin-gummi-3
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 5
#| fig-cap: "Der Violinplot die Körpergröße aufgeteilt nach Geschlecht als die simpelste Art der Darstellung mit einem Violinplot. Ergänzt noch durch den Mittelwert plusminus der Standardabweichung sowie den einzelnen Beobachtungen aus einem Dotplot."
ggplot(data = gummi_tbl, aes(x = gender, y = height,
                             fill = gender)) +
  theme_bw() +
  geom_violin(alpha = 0.5, trim = FALSE) +
  geom_dotplot(binaxis = "y", stackdir = "center",
               dotsize = 0.5) +
  stat_summary(fun.data = data_summary, size = 1, linewidth = 2) +
  theme(legend.position = "none") +
  labs(x = "Geschlecht", y = "Körpergröße in cm") +
  scale_fill_okabeito()
```

In der @fig-violin-gummi-4 sehen wir dann anstatt von einem Dotplot einen Beeswarm. Wie immer ist es Geschmackssache welcher Plot einem mehr zusagt. Der Beeswarm wirkt immer etwas kompakter und so lässt sich hier auch mehr erkennen. Das Problem ist eher, dass die Punkte sich nicht füllen lassen, so dass wir dann doch ein recht einheitliches Bild kriegen. Hier muss ich dann immer überlegen, was ich dann wie einfärben will.

```{r}
#| echo: true
#| message: false
#| label: fig-violin-gummi-4
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 5
#| fig-cap: "Der Violinplot die Körpergröße aufgeteilt nach Geschlecht als die simpelste Art der Darstellung mit einem Violinplot. Ergänzt noch durch den Mittelwert plusminus der Standardabweichung sowie den einzelnen Beobachtungen aus einem Beeswarm."
ggplot(data = gummi_tbl, aes(x = gender, y = height,
                             fill = gender, color = gender)) +
  theme_bw() +
  geom_violin(alpha = 0.5, trim = FALSE) +
  geom_beeswarm() +
  theme(legend.position = "none") +
  stat_summary(fun.data = data_summary, size = 1, linewidth = 2,
               color = "black") +
  labs(x = "Geschlecht", y = "Körpergröße in cm") +
  scale_fill_okabeito() +
  scale_color_okabeito()

```
