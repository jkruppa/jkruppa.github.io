# Daten bearbeiten {#sec-dplyr}

*Letzte Änderung am `r format(fs::file_info("programing-dplyr.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"The only way to learn a new programming language is by writing programs in it." --- Dennis Ritchie*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

Wir haben in dem vorherigen Kapitel Daten eingelesen. Jetzt wollen wir die Daten aufräumen (eng. *tidy*). Es ist notwendig, dass wir die Daten so aufarbeiten, dass R damit umgehen kann. Insbesondere das Erstellen von Faktoren ist wichtig, wenn die Spalte ein Faktor ist. R muss wissen was für Eigenschaften eine Spalte hat. Sonst funktionieren spätere Anwendungen in R nicht richtig oder geben einen Fehler wieder.

Es gibt zwei Möglichkeiten wie du mit deinen Daten umgehst:

1)  Du änderst all deine Daten in Excel. Das mag bei einem kleinen Datensatz gut funktionieren. Dann musst du dich nicht mit dem *Programmieren* beschäftigen.
2)  Du willst lernen die Daten auch in R zu verändern. Dann hilft dir dieses Kapitel. Auch in den folgenden Kapiteln werde ich immer wieder Funktionen wie `select()`, `filter()` und `mutate()`nutzen. Dann kannst du hier nochmal schauen, was die Funktionen machen.
3)  Und ich nutze dieses Kapitel ein wenig dafür um für mich persönlich wichtige Funktionen und Schritte zu speichern. Irgendwo muss ja auch mein Copy & Paste Kram liegen, was ich dann immer wieder nutze. Deshalb wird es nach unten dann immer komplexer...

Im Folgenden wollen wir den Datensatz `data_tbl` in R bearbeiten. Das heißt wir wollen Spalten auswählen mit `select()` oder Zeilen auswählen mit `filter()`. Schlussendlich wollen wir auch die Eigenschaften von Spalten mit der Funktion `mutate` ändern. Wir laden also den Datensatz `flea_dog_cat.xlsx` einmal in R.

```{r}
#| warning: false

data_tbl <- read_excel("data/flea_dog_cat_fox.xlsx")
```

Es ergibt sich folgende @tbl-dog-cat-dplyr, die wir schon aus vorherigen Kapiteln kennen.

```{r}
#| echo: false
#| label: tbl-dog-cat-dplyr
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Boniturnote sowie der Infektionsstatus von Hunden, Katzen und Füchsen.

data_tbl %>%
  kable(align = "c", "pipe")
```

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, readxl, magrittr, janitor)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Spalten wählen mit `select()`

::: callout-tip
## YouTube - Spalten auswählen mit select()

Du findest auf YouTube [Einführung in R - Teil 12 - Spalten auswählen mit select()](https://youtu.be/oV_7A2nMIrM) als Video zum nochmal anschauen.
:::

[Wir nutzen die Funktion `select()`um Spalten zu wählen.]{.aside}

Der Datensatz, den wir im Experiment erschaffen, ist meist riesig. Jetzt könnten wir natürlich eine Exceltabelle mit unterschiedlichen Sheets bzw. Reitern erstellen oder aber die *Spalten* die wir brauchen in R selektieren. Wir nutzen die Funktion `select()`um Spalten zu wählen. Im folgenden Codeblock wählen wir die Spalten `animal`, `jump_length` und `flea_count`.

```{r}
data_tbl %>% 
  select(animal, jump_length, flea_count)
```

Wir können die Spalten beim selektieren auch umbenennen und in eine andere Reihenfolge bringen.

```{r}
data_tbl %>% 
  select(Sprungweite = jump_length, flea_count, animal)
```

Du findest auf der englischen [Hilfeseite für select()](https://dplyr.tidyverse.org/reference/select.html) noch weitere Beispiele für die Nutzung.

## Zeilen wählen mit `filter()`

::: callout-tip
## YouTube - Zeilen auswählen mit filter()

Du findest auf YouTube [Einführung in R - Teil 13 - Zeilen auswählen mit filter()](https://youtu.be/Pw_KnGWZjpM) als Video zum nochmal anschauen.
:::

[Wir nutzen die Funktion `filter()` um Zeilen nach Kriterien zu wählen.]{.aside}

Während wir die Auswahl an Spalten gut und gerne auch in Excel durchführen können, so ist dies bei der Auswahl der Zeilen nicht so einfach. Wir können in R hier auf die Funktion `filter()` zurückgreifen. Wir nutzen die Funktion `filter()` um Zeilen nach Kriterien zu wählen.

Im folgenden Codeblock wählen wir die Zeilen aus in denen die Worte `dog` und `fox` stehen. Wir nutzen dazu den Operator `%in%` um auszudrücken, dass wir alle Einträge in der Spalte `animal` wollen die in dem Vektor `c("dog", "fox")` beschrieben sind.

```{r}
data_tbl %>% 
  filter(animal %in% c("dog", "fox"))
```

Es stehen dir Folgende logische Operatoren zu Verfügung wie in @tbl-logical-operators gezeigt. Am Anfang ist es immer etwas schwer sich in den logischen Operatoren zurechtzufinden. Daher kann ich dir nur den Tipp geben einmal die Operatoren selber auszuprobieren und zu schauen, was du da so raus filterst.

| **Logischer Operator** | **Beschreibung**                                         |
|------------------------|----------------------------------------------------------|
| **\<**                 | kleiner als (eng. *less than*)                           |
| **\<=**                | kleiner als oder gleich (eng. *less than or equal to*)   |
| **\>**                 | größer als (eng. *greater than*)                         |
| **\>=**                | größer als oder gleich (eng. *greater than or equal to*) |
| **==**                 | exact gleich (eng. *exactly equal to*)                   |
| **!=**                 | nicht gleich (eng. *not equal to*)                       |
| **!x**                 | nicht (eng. *not x*)                                     |
| **x \| y**             | oder (eng. *x or y*)                                     |
| **x & y**              | und (eng. *x and y*)                                     |

: Logische Operatoren und R und deren Beschreibung {#tbl-logical-operators}

Hier ein paar Beispiele. Probiere gerne auch mal Operatoren selber aus. Im folgenden Codeblock wollen wir nur die Zeilen haben, die eine Anzahl an Flöhen größer von 15 haben.

```{r}
data_tbl %>% 
  filter(flea_count > 15)
```

Wir wollen nur die infizierten Tiere haben.

```{r}
data_tbl %>% 
  filter(infected == TRUE)
```

Wir wollen nur die infizierten Tiere haben UND die Tiere mit einer Flohanzahl größer als 20.

```{r}
data_tbl %>% 
  filter(infected == TRUE & flea_count > 20)
```

Du findest auf der englischen [Hilfeseite für filter()](https://dplyr.tidyverse.org/reference/filter.html%3E) noch weitere Beispiele für die Nutzung.

## Spalten ändern mit `mutate()`

::: callout-tip
## YouTube - Eigenschaften von Variablen ändern mit mutate()

Du findest auf YouTube [Einführung in R - Teil 14 - Eigenschaften von Variablen ändern mit mutate()](https://youtu.be/P6eum3wy9Ek) als Video zum nochmal anschauen.
:::

::: column-margin
Wir nutzen die Funktion `mutate()` um die Eigenschaften von Spalten daher Variablen zu ändern.

Die Reihenfolge der Funktionen ist wichtig um unliebsame Effekte zu vermeiden.

1)  Erst wählen wir die Spalten mit `select()`
2)  Dann filtern wir die Zeilen mit `filter()`
3)  Abschließend ändern wir die Eigenschaften der Spalten mit `mutate()`
:::

Nachdem wir die Spalten mit `select()` udn eventuell die Zeieln mit `filter()` gewählt haben. müssen wir jetzt noch die Eigenschaften der Spalten ändern. Das Ändern müssen wir nicht immer tun, aber häufig müssen wir noch einen Faktor erschaffen. Wir nutzen noch die Funktion `pull()` um uns die Spalte `animal` aus dem Datensatz zu ziehen. Nur so sehen wir die vollen Eigenschaften des Faktors. Später nutzen wir `pull` seltener und nur um zu kontrollieren, was wir gemacht haben.

Im folgenden Codeblock verwandeln wir die Variable `animal` in einen Faktor durch die Funktion `as_factor`. Wir sehen, dass die Level des Faktoes so sortiert sind, wie das Auftreten in der Spalte `animal`.

```{r}
data_tbl %>% 
  mutate(animal = as_factor(animal)) %>% 
  pull(animal)
```

Wollen wir die Sortierung der Level ändern, können wir die Funktion `factor()` nutzen. Wir ändern die Sortierung des Faktors zu `fox`, `dog` und `cat`.

```{r}
data_tbl %>% 
  mutate(animal = factor(animal, levels = c("fox", "dog", "cat"))) %>% 
  pull(animal)
```

Wir können auch die Namen (eng. *labels*) der Level ändern. Hier musst du nur aufpassen wie du die alten Labels überschreibst. Wenn ich *gleichzeitig* die Level und die Labels ändere komme ich häufig durcheinander. Da muss du eventuell nochmal schauen, ob auch alles so geklappt hat wie du wolltest.

```{r}
data_tbl %>% 
  mutate(animal = factor(animal, labels = c("Hund", "Katze", "Fuchs"))) %>% 
  pull(animal)
```

Du findest auf der englischen [Hilfeseite für mutate()](https://dplyr.tidyverse.org/reference/mutate.html) noch weitere Beispiele für die Nutzung. Insbesondere die Nutzung von `mutate()` über mehrere Spalten gleichzeitig erlaubt sehr effiezientes Programmieren. Aber das ist für den Anfang etwas viel.

::: callout-note
## Die Funktionen select(), filter() und mutate() in R

Bitte schaue dir auch die Hilfeseiten der Funktionen an. In diesem Skript kann ich nicht alle Funktionalitäten der Funktionen zeigen. Oder du kommst in das R Tutorium welches ich anbiete und fragst dort nach den Möglichkeiten Daten in R zu verändern.
:::

## Gruppieren mit `group_by()`

Sobald wir einen Faktor erschaffen haben, können wir die Daten in R auch nach dem Faktor *gruppieren*. Das heißt wir nutzen die Funktion `group_by()` um R mitzuteilen, dass nun folgende Funktionen *getrennt* für die einzelen Gruppen erfolgen sollen. Im folgenden Codeblock siehst du die Anwendung.

```{r}
data_tbl %>% 
  mutate(animal = as_factor(animal)) %>% 
  group_by(animal)
```

Auf den ersten Blick ändert sich nicht viel. Es entsteht aber die Zeile `# Groups: animal [3]`. Wir wissen nun, dass wir nach der Variable `animal` mit drei Gruppen die Datentabelle gruppiert haben.

## Mehr Informationen durch `glimpse()` und `str()`

Am Ende noch zwei Funktionen zur Kontrolle, was wir hier eigentlich gerade tun. Mit der Funktion `glimpse()` können wir uns einen Einblick in die Daten geben lassen. Wir sehen dann nochmal kurz und knapp wieviel Zeieln und Spalten wir haben und welche Inhalte in den Spalten stehen. Die gleichen Informationen erhalten wir auch durch die Funktion `str()`. Die Funktion `str()`geht aber noch einen Schritt weiter und nennt uns auch Informationen zu dem Objekt. Daher wir wissen jetzt, dass es sich beim dem Objekt `data_tbl` um ein `tibble()` handelt.

```{r}
glimpse(data_tbl)
str(data_tbl)
```

::: {.callout-caution collapse="true"}
## R Code des Kapitels

```{r}
#| message: false
#| warning: false
#| eval: false

pacman::p_load(tidyverse, readxl, magrittr, janitor)

data_tbl %>% 
  select(animal, jump_length, flea_count)

data_tbl %>% 
  select(Sprungweite = jump_length, flea_count, animal)


data_tbl %>% 
  filter(animal %in% c("dog", "fox"))

data_tbl %>% 
  filter(flea_count > 15)

data_tbl %>% 
  filter(infected == TRUE)

data_tbl %>% 
  filter(infected == TRUE & flea_count > 20)

data_tbl %>% 
  mutate(animal = as_factor(animal)) %>% 
  pull(animal)

data_tbl %>% 
  mutate(animal = factor(animal, levels = c("fox", "dog", "cat"))) %>% 
  pull(animal)

data_tbl %>% 
  mutate(animal = factor(animal, labels = c("Hund", "Katze", "Fuchs"))) %>% 
  pull(animal)

data_tbl %>% 
  mutate(animal = as_factor(animal)) %>% 
  group_by(animal)

glimpse(data_tbl)
str(data_tbl)
```
:::
