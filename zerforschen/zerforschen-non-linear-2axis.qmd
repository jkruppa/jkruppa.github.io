```{r}
#| echo: false
#| warning: false
cbbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

In diesem Zerforschenbeispiel wollen wir uns eine [nicht-lineare Regression](#sec-non-linear) anschauen. Das besondere hier sind die zwei Achsen auf der linken und rechten Seite der Abbildung. Wir brauchen also eine zwei $y$-Achse. Da wir auch zwei Geraden anpassen wollen, machen wir die Sache etwas komplizierter, aber es geht ja auch draum mal was Neues in `ggplot` zu lernen. Wir wollen also die folgende Abbildung einmal nachbauen.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Zwei nicht-lineare Regession mit zwei $y$-Achsen.](images/eda/zerforschen_regression_02.png){#fig-ur-regression-02 fig-align="center" width="100%"}

Hier möchte ich die Daten direkt in R erschaffen, dafür baue ich mir direkt ein `tibble` und nutze dann die Daten weiter. Natürlich kannst du auch hier eine Exceldatei erschaffen und dann die Exceldatei einlesen. Aber hier geht es so etwas schneller, wir haben ja nur eine handvoll von Beobachtungen vorliegen.

```{r}
tree_tbl <- tibble(ph = c(3.8, 4.3, 4.4, 4.8, 5.2, 5.3, 5.4, 5.6, 5.8),
                   boden = c(12.1, 6.0, 5.0, 1, 1, 0.8, 0, 0, 0),
                   nadel = c(12.0, 7.0, 12, 10, 5, 6, 5, 8, 6))
```

Wenn dich nicht interessiert, wie die Geradengleichung entsteht, dann überspringe einfach den nächsten Kasten. Ich nutze hier eine [nicht-lineare Regression](#sec-non-linear) um auf die Werte der Gleichungen für Nadeln und Blatt zu kommen. Spannenderweise kann ich die Werte in der Orginalabbildung nicht reproduzieren. Aber gut, wir nutzen dann die Koeffizienten, die zu den Daten passen.

::: panel-tabset
## Nicht-lineare Regression für Boden

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- nls(boden ~ b1 * exp(ph*b2), data = tree_tbl, 
           start = c(b1 = 1, b2 = 0)) 

fit %>% 
  parameters::model_parameters() %>% 
  select(Parameter, Coefficient)

performance::r2(fit)
```

## Nicht-lineare Regression für Nadeln

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- nls(nadel ~ b1 * exp(ph*b2), data = tree_tbl, 
           start = c(b1 = 1, b2 = 0)) 

fit %>% 
  parameters::model_parameters() %>% 
  select(Parameter, Coefficient)

performance::r2(fit)
```
:::

Wir erhalten dann die Koeffizienten für die beiden folgenden Funktionen aus der nicht-linearen Regression aus den obigen Tabs. Wir brauchen zwei Geradengleichungen, da wir ja einmal die Nadeln und einmal die Blätter abbilden müssen. Auch hier bauen wir uns dann einmal eine Funktion zusammen. Beide Funktionen nutzen wir dann gleich für die Funktion `geom_function()`.

```{r}
nadel_func <- \(x) {49.20 * exp(-0.38 * x)}
boden_func <- \(x) {10496.50 * exp(-1.77 * x)}
```

Der zentrale Punkt hier ist die zweite $y$-Achse, die wir über `sec_axis()` definieren. Hier musst du schauen, dass die zweite Achse ein Verhältnis zu der ersten Achse ist. Hier haben wir auf der linken Seite maximal 15 und auf der rechten Seite maximal 600. Daher ist das Verhältnis der Achsen zueinander 600 zu 15. Mehr dazu dann auf der Hilfeseite [Specify a secondary axis](https://ggplot2.tidyverse.org/reference/sec_axis.html). Wir fangen auch mit einem leeren Plot an und legen dann alle anderen `geom`-Funktionen darüber. Das macht uns die Konstruktion etwas einfacher, da wir dann die Punkte und Geraden besser einzeichnen können. Wir nutzen dann auch hier das R Paket `latex2exp` umd die mathematischen Formeln in der Legende zu erstellen.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-2-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Einmal die komplexe Abbildung der nicht-linearen Regression in `ggplot` nachgebaut. Für beide Quellen Nadeln und Boden wurde jewiels eine eigene $y$-Achse erstellt. Die Regressionsgleichungen aus der Orginalabbildung entsprechen nicht den Werten hier in der Abbildung."

ggplot() +
  theme_minimal() +
  geom_point(data = tree_tbl, aes(x = ph, y = boden), color = cbbPalette[7]) +
  geom_point(data = tree_tbl, aes(x = ph, y = nadel), color = cbbPalette[4]) +
  geom_function(fun = boden_func, color = cbbPalette[7]) +
  geom_function(fun = nadel_func, color = cbbPalette[4]) +

  scale_y_continuous(sec.axis = sec_axis(~ . * 600/15, name = "Al-Gehalt Nadeln\n [mg/kg TM]",
                                         breaks = c(0, 150, 300, 450, 600)),
                     limits = c(0, 15),
                     breaks = c(0, 3, 6, 9, 12, 15),
                     name = "Al-Gehalt Boden\n [mg/kg TM]") +
  xlim(3.5, 6) +
  annotate("text", x = c(4.25, 4.5), y = c(2, 12.5), hjust = "left",
           label = c("Boden", "Nadeln"), color = cbbPalette[c(7, 4)], size = 6) +
  labs(x = "pH-Wert des Bodens") +
  annotate("text", x = 3.75, y = 0.4, hjust = "left",
           label = TeX(r"($y = 10496.50 \cdot e^{-1.77\cdot x}\; R^2 = 0.974$)"), 
           color = cbbPalette[7]) + 
  annotate("text", x = 4.25, y = 11, hjust = "left", 
           label = TeX(r"($y = 49.20 \cdot e^{-0.38\cdot x}\; R^2 = 0.543$)"), 
           color = cbbPalette[4]) 
```
