# Reguläre Ausdrücke {#sec-regular-expr}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

Hier kommen wir jetzt zu einem speziellen Fall von Zeichen nämlich den Buchstaben oder `character` sowie den Wörtern oder `string`. Wörter kommen in R dann meist ja doppelt vor. Zum einen als Namen für Objekte oder aber als Bezeichnungen von Faktoren. Wir haben aber auch Spaltennamen oder aber unvollständige Einträge in Spalten. Am Ende gibt es noch das Datum oder die Zeit als Eingabe, die wollen wir uns dann auch nochmal am Ende anschauen. So häufig wirst du nicht mit Strings und Co. arbeiten, denn meist sind die Datensätze klein genug, dass du dir deine Daten dann sauber in Excel zusammenbauen kannst. Wenn die Daten aber großer werden, dann müssen wir mit besseren Tools ran. Und eins dieser Tools sind dann reguläre Ausdrück (eng. *regular expression*, abk. *RegExp* oder *Regex*). Ich nutze vieles von diesen Funktionen in dem Kapitel dann in der Anwendung. Deshalb ist dieses Kapitel auch so ein wenig für mich um meine Funktionen, die ich immer wieder nutze, parat zu haben.

::: column-margin
Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. -- Jamie Zawinski
:::

Wir brauchen nicht viele R Pakete in diesem Kapitel, aber ein paar sind es schon. Der Großteil der Funktionen steckt dann im R Paket `stingr` und das verbirgt sich dann in `tidyverse`.

```{r}
#| warning: false
#| echo: true

pacman::p_load(tidyverse, readxl, magrittr,
               conflicted)
conflict_prefer("extract", "magrittr")
```

In diesem kurzem Kapitel nutzen wir den Datensatz zu den Hunde-, Katzen- und Fuchsflöhen. Wir wollen uns aber auf die Spaltennamen konzentrieren, deshalb brauchen wir nur die ersten drei Zeilen des Datensatzes. Sonst bauen wir uns die Daten oder Vektoren einfach selber, denn hier geht es ja nur um das schnelle Zeigen und nicht um die direkte sinnvolle Anwendung.

```{r}
#| warning: false

data_tbl <- read_excel("data/flea_dog_cat_fox.xlsx") %>% 
  extract(1:3,)
```

Wir nehmen jetzt diesen Datensatz und schauen uns das R Paket `stringr` näher an. Danach werden wir dann die Sache nochmal von der Seite der regulären Ausdrück betrachten.

## Das R Paket `stringr` {#sec-stringr}

Das R Paket [`stringr`](https://stringr.tidyverse.org/) und das [Cheat Sheet zu `stringr`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf) geben eine große Übersicht über die Möglichkeiten ein `character` zu bearbeiten. Im Folgenden schauen wir uns einmal einen simplen Datensatz an. Wir wollen auf dem Datensatz ein paar Funktionen aus dem R Paket `stringr` anwenden.

```{r}
regex_tbl <- tibble(animal = c("cat", "cat", "dog", "bird"),
                    site = c("village", "village", "town", "cities"),
                    time = c("t1_1", "t2_2", "t3_3", "t3_5"))
```

Die einfachste und am meisten genutzte Funktion ist `str_c()`. Die Funktion `str_c()` klebt verschiedene Vektoren zusammen. Wir können auch Zeichen wählen, wie das `-`, um die Vektoren zu verbinden. Wir bauen uns also eine neue Spalte `animal_site` in dem wir die Spalten `animal` und `site` mit einem `-` verbinden. Wir können statt dem `-` auch ein beliebiges anderes Zeichen oder auch Wort nehmen.

```{r}
regex_tbl %>% 
  mutate(animal_site = str_c(animal, "-", site))
```

Häufig brauchen wir auch eine ID Variable, die exakt $n$ Zeichen lang ist. Hier können wir die Funktion `str_pad()` nutzen um Worte auf die Zeichenlänge `width =` zu verlängern. Wir können auch das Zeichen wählen, was angeklebt wird und die Seite des Wortes wählen an die wir kleben wollen. Wir verlängern also links die Spalte site auf ein Wort mit acht Zeichen und als Füllzeichen nehmen wir die Null.

```{r}
regex_tbl %>% 
  mutate(village_pad = str_pad(site, pad = "0", 
                               width = 8, side = "left"))
```

Abschließend können wir auch eine Spalte in zwei Spalten aufteilen. Dafür müssen wir den Separator wählen nachdem die Spalte aufgetrennt werden soll. Wir können eine Spalte auch in mehrere Spalten aufteilen, wenn der Separator eben an zwei oder mehr Stellen steht. Wir haben die Spalte `time` und trennen die Spalte `time` an der Stelle `_` in zwei Spalten auf.

```{r}
regex_tbl %>% 
  separate(time, into = c("time", "rep"), 
           sep = "_", convert = TRUE)
```

Es gibt noch sehr viel mehr Möglichkeiten einen `character` Vektor zu bearbeiten. Teilweise nutze ich `stringr` bei der [Auswertung von den Beispielen](#sec-beispiel-auswertung) im Anhang. Schau dir da mal um, dort wirst du immer mal wieder die Funktionen aus dem Paket finden.

## Regular expressions {#sec-regex}

Ein regulärer Ausdruck (eng. *regular expression*, abk. *RegExp* oder *Regex*)

[Regular expressions in stingr](https://stringr.tidyverse.org/articles/regular-expressions.html)

[Regular expressions](https://r4ds.had.co.nz/strings.html)

-   `\d`: entspricht einer beliebigen Ziffer.
-   `\s`: entspricht einem beliebigen Leerzeichen (z. B. Leerzeichen, Tabulator, Zeilenumbruch).
-   \[abc\]: passt auf a, b oder c.
-   \[\^abc\]: passt auf alles außer a, b oder c.

::: column-margin
[Regular Expressions Cheat Sheet by DaveChild](https://cheatography.com/davechild/cheat-sheets/regular-expressions/)
:::

Denk daran, dass du, um einen regulären Ausdruck zu erstellen, der `\d` oder `\s` enthält, das `\` für die Zeichenkette ausschließen musst, also gib `\\d` oder `\\s` ein.

```{r}
data_tbl %>% 
  select(matches("_"))
```

```{r}
data_tbl %>% 
  select(one_of("animal", "grade"))
```

Beachte auch folgende Funktionen [Overview of selection features](https://tidyselect.r-lib.org/reference/language.html)

-   `all_of`,
-   `any_of`,
-   `contains`,
-   `starts_with`
-   `ends_with`,
-   `everything`,
-   `last_col`,
-   `num_range`,

[Tools](https://r4ds.had.co.nz/strings.html#tools)

## Zeit und Datum {#sec-time-date}

![](images/caution.png){fig-align="center" width="50%"}

Die Arbeit mit Datumsdaten in R kann frustrierend sein. Die R Befehle für Datumszeiten sind im Allgemeinen nicht intuitiv und ändern sich je nach Art des verwendeten Datumsobjekts. Hier gibt es aber eine Lösung mit dem R Paket `lubridate`, die uns die Arbeit etwas erleichtert.

::: column-margin
[R lubridate - Make Dealing with Dates a Little Easier](https://lubridate.tidyverse.org/)
:::
