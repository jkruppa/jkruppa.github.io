# Visualisierung von Daten

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)

```

[Wir nennen eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche zu tun.]{.aside}

Ein wichtiger Teil in der Analyse von Daten ist die Visualisierung. Wir glauben keine Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbilungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen Y und X gibt.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, janitor)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Grundlagen in ggplot()

[Im Gegensatz zu dem Pipe-Operator `%>%` nutzt ggplot den Operator `+` um die verschiedenen ggplot Funktionen (`geom_`) miteinander zu verbinden.]{.aside}

Wir nutzen in R das R Paket `ggplot2` um unsere Daten zu visualisieren. Die zentrale Idee von `ggplot2` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Das Konzept von `ggplot2`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `ggplot2` zu visualisieren...

::: callout-tip
## Grundlagen von ggplot() im Video

Du findest auf YouTube [Einführung in R - Teil 16.0 - Trockenübung ggplot2 simpel und einfach erklärt](https://youtu.be/SGwSVzJ9C-s) als Video.

Sowie auch auf YouTube [Einführung in R - Teil 16.1 - Abbildungen mit ggplot in R erstellen. Idee und Konzept von ggplot](https://youtu.be/SRRQQO3DXtc) als Video. Also alles nochmal als Video - vielleicht einfacher nachzuvollziehen als in einem Fließtext.
:::

Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot` für die Erstellung von Boxplots, das `geom_histogram` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an.

### Datenbeispiel

Wir importieren den Datensatz `flea_cat_dog.xlsx` und wollen einzelne Variablen visualisieren. Wir kennen den Datensatz schon aus dem @sec-example-2. Dennoch nochmal hier der Datensatz in @tbl-cat-dog-ggplot.

```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal))
```

[Spaltennamen sind in **Englisch** und haben **keine Leerzeichen**. Die Funktion `clean_names()` aus dem R Paket `janitor` ist hier eine Hilfe.]{.aside}

Im folgenden ist es wichtig, dass du dir die Spaltennamen merkst. Wir können nur die exakten, wortwörtlichen Spaltennamen verwenden. Sonst erhalten wir einen Fehler. Deshalb haben wir auch keine Leerzeichen in den Spaltennamen.

```{r}
#| echo: false
#| label: tbl-cat-dog-ggplot
#| tbl-cap: "Beispieldatensatz für Eigenschaften von Flöhen von zwei Tierarten."

flea_dog_cat_tbl %>% kable(align = "c", "pipe")
```

### Erste Abbildung in ggplot()

Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`).

```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` bennent den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die x-Achse soll, was auf die y-Achse soll sowie ob es noch andere Faktoren in den Daten gibt.
    -   `x` braucht den Spaltennamen für die Variable auf der x-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der y-Achse.

[**Faktoren** meint hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor`erschaffen haben.]{.aside}

```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir sehen, dass wir nichts sehen in @fig-ggplot-1. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen.

## Häufig verwendete Abbildungen

In diesem Kapitel wollen wir durch die häufigsten und wichtigsten Abbildungen in der explorativen Datenanalyse durchghen. Das wären im folgenden diese Abbildungen:

-   **Histogramm** in @sec-eda-histogramm für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   **Boxplot** in @sec-eda-boxplot für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable.
-   **Dotplot** in @sec-eda-dotplot für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   **Scatterplot** in @sec-eda-scatter für zwei kontinuierliche Variablen. Auch **xy-Plot** genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   **Mosaicplot** in @sec-eda-mosaic für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.

[Konkret ist eine **Variable** gleich einer **Spalte** in einem Datensatz.]{.aside}

::: callout-tip
## Histogramm, Boxplot, Scatterplot und Mosaicplot im Video

Du findest auf YouTube [Einführung in R - Teil 16.2 - Histogramm, Boxplot, Scatterplot und Mosaicplot mit ggplot in R](https://youtu.be/Zdw6NlLauNw) als Video. Weitere Videos werden dann noch folgen und ergänzt.
:::

### Histogramm {#sec-eda-histogramm}

Wir nutzen für die Erstellung eines Histogramms den Datensatz `dog_fleas_hist.csv`. Wir brauchen für ein anständiges Histogramm, wo du auch was erkennen kannst, mindestens 20 Beobachtung. Am besten mehr. Deshalb schauen wir uns jetzt einmal 39 Hunde an und zählen wieviele Flöhe die Hunde jeweils haben `flea_count`. Darüber hinaus bestimmen wir auch noch das mittlere Gewicht der Flöhe auf dem jeweiligen Hund `flea_weight`.

```{r}
#| message: false
dog_fleas_tbl <- read_csv("data/dog_fleas_hist.csv")
```

```{r}
#| echo: false
#| label: tbl-cat-dog-histogram
#| tbl-cap: "Beispieldatensatz für die Anzahl an Flöhen auf 39 Hunden. Gezählt wurde die Anzahl an Flöhen `flea_count` und das gemittelte Gewicht der Flöhe `flea_weight`."

dog_fleas_tbl %>% kable(align = "c", "pipe")
```

@tbl-cat-dog-histogram zeigt den Datensatz `dog_fleas_hist.csv`. Wir wollen jetzt die Variable `flea_count` und `flea_weight` jeweils abbilden.

```{r }
#| echo: false
#| message: false
#| label: fig-dotplot-flea-1
#| fig-align: center
#| fig-height: 3
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."


ggplot(dog_fleas_tbl, aes(x = flea_count)) + 
  geom_dotplot() +
  theme_bw() +
  scale_x_continuous(breaks = c(12,13,14,15,16,17,18,19)) +
  scale_y_continuous(labels = c(0, 5, 9, 13, 17)) +
  labs(x = "Anzahl Flöhe", y = "Anzahl") 

```

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-1
#| fig-align: center
#| fig-height: 3
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."

ggplot(data = dog_fleas_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_bw() +
  labs(x = "Gewicht [mg]", y = "Anzahl") 
```

```{r }
#| echo: false
#| message: false
#| label: fig-hist-flea-2
#| fig-align: center
#| fig-height: 3
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."

ggplot(data = dog_fleas_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  scale_x_continuous(breaks = 10:28) +
  scale_y_continuous(breaks = 0:7) +
  geom_vline(xintercept = 10:28, color = "blue", alpha = 0.5,
             linetype = "dashed") +
  geom_hline(yintercept = 0:7, color = "blue", alpha = 0.5,
             linetype = "dashed") +
  theme_bw()

```

Wenn wir viele Beobachtungen haben. Viele meint mehr als zwanzig Beobachtungen.

```{r }
#| echo: false
#| message: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 5

small_tbl <- dog_fleas_tbl %>% 
  filter(flea_weight < 18)

small_tbl %>% 
  arrange(flea_weight)

ggplot(data = small_tbl, aes(x = flea_weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  scale_x_continuous(breaks = 10:28) +
  scale_y_continuous(breaks = 0:7) +
  geom_vline(xintercept = 10:28, color = "blue", alpha = 0.5,
             linetype = "dashed") +
  geom_hline(yintercept = 0:7, color = "blue", alpha = 0.5,
             linetype = "dashed") +
  theme_bw()

```

### Density Plot

```{r }
#| echo: true
#| message: false
#| label: fig-dens-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."


ggplot(data = dog_fleas_tbl, aes(x = flea_weight)) +
  geom_density(fill = "gray", color = "black") +
  xlim(0, 40) +
  theme_bw()

```

Wenn wir viele Beobachtungen.

### Boxplot {#sec-eda-boxplot}

```{r}
#| message: false
data_tbl <- read_excel("data/flea_dog_cat.xlsx")

dog_fleas_tbl <- read_csv("data/dog_fleas_hist.csv")

```

![kjasdsaddssd](images/boxplot-drawn.png){#fig-boxplot-drawn fig-align="center" width="100%"}

@fig-boxplot-drawn

```{r }

data_tbl <- read_excel(file.path("data/germination_data.xlsx"))

```

```{r}
#| column: page
data_tbl %>% kable(align = "c", "pipe")
```

```{r}
data_tbl <- data_tbl %>% 
  select(treatment, freshmatter, drymatter, root_health)
  
```

```{r }
#| echo: true
#| message: false
#| label: fig-boxplot-freshmatter-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."


ggplot(data = data_tbl, aes(x = treatment, y = freshmatter,
                            fill = treatment)) +
  geom_boxplot() +
  theme_bw()

```

```{r }
#| echo: true
#| message: false
#| label: fig-boxplot-freshmatter-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "An 39 Hunden wurde die Anzahl an Flöhen gezählt."


ggplot(data = data_tbl, aes(x = treatment, y = freshmatter,
                            fill = treatment)) +
  geom_boxplot() +
  geom_jitter(width = 0.25, shape = 1) +
  theme_bw()

```

Wenn wir wenige Beobachtungen haben.

### Dotplot {#sec-eda-dotplot}

Wenn wir ganz wenige Beobachtungen haben.

```{r echo = TRUE, fig.width = 5, fig.height = 5}

ggplot(data = data_tbl, aes(x = treatment, y = root_health,
                            fill = treatment)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  theme_bw()

```

```{r echo = TRUE, fig.width = 5, fig.height = 5}

ggplot(data = data_tbl, aes(x = freshmatter, fill = treatment)) +
  geom_dotplot(method="histodot", binwidth = 2.5) +
  theme_bw()

```

```{r echo = TRUE, fig.width = 5, fig.height = 5}

ggplot(data = data_tbl, aes(x = treatment, y = freshmatter,
                            fill = treatment)) +
  geom_violin() +
  geom_dotplot(binaxis = "y", stackdir = "center", fill = "black") +
  theme_bw()

```

```{r echo = TRUE, fig.width = 5, fig.height = 5}
ggplot(data = data_tbl, aes(x = treatment, y = root_health,
                            fill = treatment)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  stat_summary(fun = median, fun.min = median, fun.max = median,
               geom = "crossbar", width = 0.5) +
  theme_bw()

```

### Scatterplot {#sec-eda-scatter}

```{r echo = TRUE, fig.width = 5, fig.height = 5}
ggplot(data = data_tbl, aes(x = freshmatter, y = drymatter)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_bw()

```

### Mosaic Plot {#sec-eda-mosaic}

```{r}
#| warning: false

flea_dog_cat_tbl %>%
  tabyl(animal, infected) 

ggplot(data = flea_dog_cat_tbl) +
  geom_mosaic(aes(x = product(animal, infected), fill = animal)) 

```

### Abbildungen beschriften

```{r echo = TRUE, fig.width = 5, fig.height = 5}

ggplot(data = data_tbl, aes(x = treatment, y = freshmatter,
                            fill = treatment)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha",
       fill = "Behandlung") +
  theme_bw()

```

https://ggplot2.tidyverse.org/reference/index.html
