```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Poisson Regression {#sec-poisson}

*Letzte Änderung am `r format(fs::file_info("stat-modeling-poisson.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

::: callout-tip
## Einführung in die Poisson Regression per Video

Du findest auf YouTube [Poisson Regression](https://youtu.be/HTgsASKrpB8) als Video Reihe. Ich werde zwar alles nochmal hier als Text aufschreiben, aber manchmal ist das Sehen und Hören dann einfacher.
:::

In diesem Kapitel wollen wir eine Poisson Regression rechnen. Wir müssen uns hier wieder überlegen, was ist eigentlich unser Outcome $y$ und was sind unsere Einflussvariablen $x$. Die Poisson Regression ist je nach Hintergurnd des Anwenders eher selten. In der Ökologie, wo gerne mal gezaählt wird, wie oft etwas vorkommt, ist die Poisson Regression häufig vertreten. Sonst fristet die Poisson Regresson eher ein unbekanntes Dasein.

Ein häufig unterschätzter Vorteil der Poisson Regression ist, dass wir auch auch $0/1$ Daten eine Poisson Regression rechnen können. Moment, wirst du jetzt vielleicht denken, das machen wir doch mit der logistsichen Regression. Ja, das stimmt, aber wir können auf Zahlen viel rechnen. Wenn wir auf ein $0/1$ Outcome eine Poisson Regression rechnen, dann kriegen wir nicht Odds Ratios $OR$ als Effektschätzer sondern Risk Ratios $RR$. Wir erhalten also keine Chancen sondern Wahrscheinlichkeiten. Unter der Annahme, dass das Modell auch konvergiert und wir sinnvolle Zahlen erhalten.

Ein weiteres Problem sind die zu vielen Nullen in dem Outcome $y$. Daherher wir zählen über die Maßen viel *Nichts*. Wir nennen diesen Fall *zero inflation* und beschreiben damit die zu vielen Nullen in den Daten. Hier muss dann noch speziell modelliert werden. Eine Poisson Regression hat schon so seine speziellen Tücken.

## Annahmen an die Daten

[Unser gemessenes Outcome $y$ folgt einer Poissonverteilung.]{.aside}

Im folgenden Kapitel zu der multiplen Poisson linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form *ideal* sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.

-   Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das @sec-missing zu Imputation von fehlenden Werten.
-   Wenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das @sec-outlier zu Ausreißer in den Daten.
-   Wenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das @sec-variable-selection bei der Variablenselektion.

Daher sieht unser Modell wie folgt aus. Wir haben ein $y$ und $p$-mal $x$. Wobei $p$ für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser $y$ einer Poissonverteilung. Das ist hier sehr wichtig, denn wir wollen ja eine multiple Poisson lineare Regression rechnen.

$$
y \sim x_1 + x_2 + ... + x_p 
$$

Wir können in dem Modell auch Faktoren $f$ haben, aber es geht hier nicht um einen Gruppenvergleich. Das ist ganz wichtig. Wenn du einen Gruppenvergleich rechnen willst, dann musst du in @sec-posthoc nochmal nachlesen.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               parameters, performance, MASS, pscl, see,
               modelsummary, scales)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Im folgenden schauen wir uns ein Datenbeispiel mit Hechten an. Es handelt sich um langnasige Hechte in nordamerikanischen Flüssen. Wir haben uns insgesamt $n = 68$ Flüsse einmal angesehen und dort die Anzahl an Hechten gezählt. Im Weiteren haben wir dann noch andere Flussparameter erhoben und fragen uns nun, welche dieser Parameter einen Einfluss auf die Anzahl an Hechten in den Flussarmen haben. In @sec-example-longnose findest du nochmal mehr Informationen zu den Daten. Wir entfernen hier die Informationen zu den Flüssen, die brauchen wir in dieser Analyse nicht.

::: column-margin
Die Daten zu den langnasigen Hechten stammt von [Salvatore S. Mangiafico - An R Companion for the Handbook of Biological Statistics](https://rcompanion.org/rcompanion/e_05.html).
:::

```{r}
#| message: false
#| warning: false

longnose_tbl <- read_csv2("data/longnose.csv") %>% 
  select(-stream)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-pois-longnose
#| tbl-cap: Auszug aus dem Daten zu den langnasigen Hechten.
#| column: page

rbind(head(longnose_tbl, n = 4),
      rep("...", times = ncol(longnose_tbl)),
      tail(longnose_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

Im Folgenden werden wir die Daten nur für das Fitten eines Modells verwenden. In den anderen oben genannten Kapiteln nutzen wir die Daten dann anders. In @fig-pois-model-longnose sehen wir nochmal die Verteilung der Anzahl der Hechte in den Flüssen.

```{r}
#| echo: true
#| message: false
#| label: fig-pois-model-longnose
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Histogramm der Verteilung der Hechte in den beobachteten Flüssen."

ggplot(longnose_tbl, aes(longnose)) +
  theme_bw() +
  geom_histogram()

```

## Fit des Modells

In diesem Abschnitt wollen wir verschiedene Modelle für Zähldaten schätzen. Die Poissonverteilung hat keinen eignen Parameter für die Streung wie die Normalverteilung. Die Poissonverteilung ist mit $\mathcal{Pois}(\lambda)$ definiert und hat somit die Eigenschaft das die Varianz eins zu eins mit dem Mittelwert $\lambda$ der Poissonverteilung ansteigt. Es kann aber sein, dass wir in den Daten nicht diesen ein zu eins Zusammenhang von Mittelwert und Varianz vrliegen haben. Häufig ist die Varianz viel größer und steigt schneller an. Wenn die Varianz in Wirklichkeit sehr viel größer ist, dann würden wir die Varianz in unseren Modell unterschätzen.

-   Ein klassisches Poissonmodell `glm(..., familiy = poisson)` mit der Annahme keiner Overdisperison.
-   Ein Quasi-Poissonmodell `glm(..., family = quasipoisson)` mit der Möglichkeit der Berücksichtigung einer Overdispersion.
-   Ein negative Binomialmodell `glm.nb(...)` ebenfalls mit der Berücksichtigung einer Overdispersion.

Beginnen wollen wir aber mit einer klassischen Poissonregression ohne die Annahme von einer Overdispersion in den Daten. Wir nutzen dafür die Funktion `glm()` und spezifizieren die Verteilungsfamilie als `poisson`. Wir nehmen wieder alle Variablen in das Modell auf der rechten Seite des `~`. Auf der linken Seite des `~` kommt dann unser Outcome `longnose` was die Anzahl an Hechten erhält.

[Hier gibt es nur die Kurzfassung der *link*-Funktion. @dormann2013parametrische liefert hierzu in Kapitel 7.1.3 nochmal ein Einführung in das Thema.]{.aside}

Wir müssen für die Possionregression noch beachten, dass die Zähldaten von $0$ bis $+\infty$ laufen. Damit wir normalverteilte Residuen erhalten und einen lineren Zusammenhang, werden wir das Modell auf dem $\log$-scale fitten. Das heißt, wir werden den Zusammenhang von $y$ und $x$ logarithmieren. Wichtig ist hierbei der *Zusammenhang*. Wir transformieren nicht einfach $y$ und lassen den Rest unberührt. Das führt dazu, dass wir am Ende die Koeffizienten der Poissonregression exponieren müssen. Das können die gängigen Funktionen, wir müssen das Exponieren aber aktiv durchführen. Deshalb hier schon mal erwähnt.

```{r}
poisson_fit <- glm(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,
                    longnose_tbl, family = poisson)
```

Wir schauen uns die Ausgabe des Modells einmal mit der `summary()` Funktion an, da wir hier einmal händisch schauen wollen, ob eine Overdispersion vorliegt. Sonst könnten wir auch die Funktion `model_parameters()` nehmen. Die nutzen wir später für die Interpretation des Modells, hier wollen wir erstmal sehen, ob alles geklappt hat.

```{r}
poisson_fit %>% summary
```

Wir schauen in die Summary-Ausgabe des Poissonmodells und sehen, dass dort steht, dass `Dispersion parameter for poisson family taken to be 1`. Wir modellieren also einen eins zu eins Zusammenhang von Mittelwert und Varianz. Wenn dieser Zusammenhang nicht in unseren Daten existiert, dann haben wir eine Overdispersion vorliegen.

Wir können die Overdispersion mit abschätzen indem wir die `Residual deviance` durch die Freiheitsgrade der `Residual deviance` teilen. Daher erhalten wir eine Overdispersion von $\cfrac{1590.04}{61} \approx 26.1$. Damit haben wir eine eindeutige Overdispersion vorliegen. Damit steigt die Varianz in einem Verhältnis von ca. 1 zu 26. Wir können auch die Funktion `check_overdispersion()` aus dem R Paket `performance` nutzen um die Overdispersion zu berechnen. Die Funktion kann das schneller und ist auch in der Abfolge einer Analyse besser geeignet.

```{r}
poisson_fit %>% check_overdispersion()
```

Wenn wir Overdispersion vorliegen haben und damit die Varianz zu niedrig schätzen, dann erhalten wir viel mehr signifikante Ergebnisse als es in den Daten zu erwarten wäre. Schauen wir uns nochmal die Parameter der Poissonverteilung und die $p$-Werte einmal an.

```{r}
#| message: false

poisson_fit %>% model_parameters()
```

In der Spalte `p` finden wir die $p$-Werte für alle Variablen. Wir sehen, dass fast alle Variablen signifikant sind und das wir eine sehr niedrige Varianz in der Spalte `SE` sehen. Das heißt unser geschätzer Fehler ist sehr gering. Das ahnten wir ja schon, immerhin haben wir eine Overdisperson vorliegen. Das Modell ist somit falsch. Wir müssen uns ein neues Modell suchen, was Overdispersion berückscihtigen und modellieren kann.

Die Quasi-Poisson Verteilung hat einen zusätzlichen, unabhänigen Parameter um die Varianz der Verteilung zu schätzen. Daher können wir die Overdispersion mit einer Quasi-Poisson Verteilung berückscihtigen. Wir können eine Quasi-Poisson Verteilung auch mit der Funktion `glm()` schätzen nur müssen wir als Verteilungsfamilie `quasipoisson` angeben.

```{r}
quasipoisson_fit <- glm(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,
                        data = longnose_tbl, family = quasipoisson)
```

Nach dem Modellti können wir nochmal in der `summary()` Funktion schauen, ob wir die Overdispersion richtig berücksichtigt haben.

```{r}
quasipoisson_fit %>% summary
```

An der Zeile `Dispersion parameter for quasipoisson family taken to be 29.403319` in der Summary-Ausgabe sehen wir, dass das Modell der Quasi-Possion Verteilung die Overdispersion korrekt berücksichtigt hat. Wir können uns nun einmal die Modellparameter anschauen. Die Interpretation machen wir am Ende des Kapitels.

```{r}
#| message: false

quasipoisson_fit %>% model_parameters()
```

Jetzt sieht unser Modell und die $p$-Werte zusammen mit dem Standardfehler `SE` schon sehr viel besser aus. Wir können also diesem Modell erstmal von der Seite der Overdispersion vertrauen.

Am Ende wollen wir nochmal das Modell mit der negativen Binomialverteilung rechnen. Die negativen Binomialverteilung erlaubt auch eine Unabhängigkeit von dem Mittelwert zu der Varianz. Wir können hier auch für die Overdispersion adjustieren. Wir rechnen die negativen Binomialregression mit der Funktion `glm.nb()` aus dem R Paket `MASS`. Wir müssen keine Verteilungsfamilie angeben, die Funktion `glm.nb()` kann nur die negative Binomialverteilung modellieren.

```{r}
negativebinomial_fit <- glm.nb(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,
                               data = longnose_tbl)
```

Auch hier schauen wir mit der Funktion `summary()` einmal, ob die Overdisprsion richtig geschätzt wurde oder ob hier auch eine Unterschätzung des Zusammenhangs des Mittelwerts und der Varianz vorliegt.

```{r}
negativebinomial_fit %>% summary()
```

Auch hier sehen wir, dass die Overdispersion mit dem Parameter $\theta$ berücksichtigt wird. Wir können die Zahl $1.67$ nicht direkt mit der Overdispersion aus einer Poissonregression verglechen, aber wir sehen dass das Verhältnis von `Residual deviance` zu den Freiheitsgraden mit $\cfrac{73.65}{61} \approx 1.20$ fast bei 1:1 liegt. Wir könnten also auch eine negative Binomialverteilung für das Modellieren nutzen.

```{r}
#| message: false

negativebinomial_fit %>% model_parameters()
```

::: column-margin
Wie immer gibt es reichtlich Tipps & Tricks welches Modell du nun nehmen solltest. [How to deal with overdispersion in Poisson regression: quasi-likelihood, negative binomial GLM, or subject-level random effect?](https://stats.stackexchange.com/questions/201903/how-to-deal-with-overdispersion-in-poisson-regression-quasi-likelihood-negativ/332250#332250) und das Tutorial [Modeling Count Data](https://online.stat.psu.edu/stat504/lesson/9/9.2-0). Auch ich mus immer wieder schauen, was am besten konkret in der Anwendung passen könnte und würde.
:::

Welches Modell nun das beste Modell ist, ist schwer zu sagen. Wenn du Overdisperion vorliegen hast, dann ist natürlich nur das Quasi-Poissonmodell oder das negative Binomialmodell möglich. Welche der beiden dann das bessere ist, hängt wieder von der Fragestellung ab. Allgemein gesprochen ist das Quasi-Poissonmodell *besser* wenn dich die Zusammenhänge von $y$ zu $x$ am meisten interessieren. Und das ist in unserem Fall hier die Sachlage. Daher gehen wir mit den Quasi-Poissonmdell dann weiter.

## Performance des Modells

In diesem kurzen Abschnitt wollen wir uns einmal anschauen, ob das Modell neben der Overdispersion auch sonst aus statistischer Sicht in Ordnung ist. Wir wollen ja mit dem Modell aus dem Fit `quasipoisson_fit` weitermachen. Also schauen wir uns einmal das pseudo-$R^2$ für die Poissonregression an. Da wir es mit einem GLM zu tun haben, ist das $R^2$ mit vorsicht zu genießen. In einer Gaussianregression können wir das $R^2$ als Anteil der erklärten Varianz durch das Modell interpretieren. Im Falle von GLM's müssen wir hier vorsichtiger sein. In GLM's gibt es ja keine Varianz sondern eine Deviance.

```{r}
r2_efron(quasipoisson_fit)
```

Mit einem pseudo-$R^2$ von $0.33$ erklären wir ca. 33% der Varianz in der Anzahl der Hechte. Das ist zwar keine super gute Zahl, aber dafür, dass wir nur eine handvoll von Parametern erfasst haben, ist es dann auch wieder nicht so schlecht. Die Anzahl an Hechten wird sicherlich an ganz vielen Parametern hängen, wir konnten immerhin einige wichtige Stellschrauben vermutlich finden.

In @fig-pois-model-check schauen wir uns nochmal die Daten in den Modelgüteplots an. Wir sehen vorallem, dass wir vielelicht doch einen Ausreißer mit der Beobachtung 17 vorliegen haben. Auch ist der Fit nicht so super, wie wir an dem QQ-Plot sehen. Die Beobachtungen fallen in dem QQ-Plot nicht alle auf eine Linie. Auch sehen wir dieses Muster in dem Residualplot. Hiererwarten wir eine gerade blaue Linie und auch hier haben wir eventuell Ausreißer mit in den Daten.

```{r}
#| echo: true
#| message: false
#| label: fig-pois-model-check
#| fig-align: center
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Ausgabe ausgewählter Modelgüteplots der Funktion `check_model()`."

check_model(quasipoisson_fit, colors = cbbPalette[6:8], 
            check = c("qq", "outliers", "pp_check", "homogeneity")) 

```

## Interpretation des Modells

Um die Effektschätzer einer Poissonregression oder aber einer Quasipoisson-Regression interpretieren zu können müssen wir uns einmal einen Beispieldatensatz mit bekannten Effekten zwischen den Gruppen bauen. Im Folgenden bauen wir uns einen Datensatz mit zwei Gruppen. Einmal einer Kontrollgruppe mit einer mittleren Anzahl an $15$ und einer Behandlungsgruppe mit einer um $\beta_1 = 10$ höheren Anzahl. Wir haben also in der Kontrolle im Mittel eine Anzahl von $15$ und in der Behandlungsgruppe eine mittlere Anzahl von $25$.

```{r}
sample_size <- 100
longnose_small_tbl <- tibble(grp = rep(c(0, 1), each = sample_size),
                             count = 15 + 10 * grp + rnorm(2 * sample_size, 0, 1)) %>%
  mutate(count = round(count),
         grp = factor(grp, labels = c("ctrl", "trt")))
```

In @tbl-pois-longnose-small sehen wir nochmal die Daten als Ausschnitt dargestellt.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-pois-longnose-small
#| tbl-cap: How much is the fish? Der Datensatz über $n = 1000$ Beobachtungen an dem wir überlegen wollen wie wir die Effektschätzer einer Poissonregression zu interpretieren haben. 

longnose_small_raw_tbl <- longnose_small_tbl %>% 
  mutate(grp = as.character(grp))

rbind(head(longnose_small_raw_tbl, n = 4),
      rep("...", times = ncol(longnose_small_raw_tbl)),
      tail(longnose_small_raw_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

Da sich die Tabelle schlecht liest hier nochmal der Boxplot in @fig-pois-model-small. Wir sehen den Grupenunterschied von $10$ sowie die unterschiedlichen mittleren Anzahlen für die Kontrolle und die Behandlung.

```{r}
#| echo: true
#| message: false
#| label: fig-pois-model-small
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: How much is the fish? Der Boxplot über $n = 1000$ Beobachtungen an dem wir überlegen wollen wie wir die Effektschätzer einer Poissonregression zu interpretieren haben. 
#| fig-subcap: 
#|   - "Verteilung der Werte als Boxplot."
#|   - "Verteilung der Werte als Densityplot."
#| layout-nrow: 2

ggplot(longnose_small_tbl, aes(x = grp, y = count, fill = grp)) +
  theme_bw() +
  geom_boxplot() +
  theme(legend.position = "none") +
  scale_fill_okabeito() 

ggplot(data = longnose_small_tbl, aes(x = count, fill = grp)) +
  theme_bw() +
  geom_density(alpha = 0.75) +
  labs(x = "", y = "", fill = "Gruppe") +
  scale_fill_okabeito() +
  scale_x_continuous(breaks = seq(10, 30, by = 5), limits = c(10, 30)) 

```

Jetzt fitten wir einmal das simple Poissonmodell mit der Anzahl als Outcome und der Gruppe mit den zwei Leveln als $x$. Wir pipen dann das Ergebnis des Fittes gleich in die Funktion `model_parameters()` weiter um die Ergebnisse des Modellierens zu erhalten.

```{r}
#| message: false
#| warning: false
glm(count ~ grp, data = longnose_small_tbl, family = poisson) %>%
  model_parameters(exponentiate = TRUE)
```

Als erstes fällt auf, dass wir die Ausgabe des Modells exponieren müssen. Um einen linearen Zusamenhang hinzukriegen bedient sich die Poissonregression den Trick, das der Zusammenhang zwischen dem $y$ und dem $x$ *transformiert* wird. Wir rechnen unsere Regression nicht auf den echten Daten sondern auf dem $\log$-scale. Daher müssen wir die Koeffizienten der Poissonregression wieder zurücktransfomieren, wenn wir die Koeffizienten interpretieren wollen. Das können wir mit der Option `exponentiate = TRUE` durchführen.

Gut soweit, aber was heißen den jetzt die Zahlen? Wir haben einen Intercept von $14.99$ das entspricht der mittleren Anzahl in der Kontrollgruppe. Und was sagt jetzt die $1.67$ vom Level `trt` des Faktors `grp`? Wenn wir $14.99 \cdot 1.67$ rechnen, dann erhalten wir als Ergebnis $25.03$, also die mittlere Anzahl in der Behandlungsgruppe. Was sagt uns das jetzt aus? Wir erhalten aus der Poissonregression eine Wahrscheinlichkeit oder aber ein Risk Ratio. Wir können sagen, dass die Anzahl in der Behandlungsgruppe $1.67$-mal so groß ist wie in der Kontrollgruppe.

Schauen wir uns nochmal das volle Modell an und interpretieren die Effekte der einzelnen Variablen.

```{r}
#| message: false

quasipoisson_fit %>% 
  model_parameters(exponentiate = TRUE) 
```

So schön auch die Funktion `model_parameters()` ist, so haben wir aber hier das Problem, dass wir den Effekt von `area` nicht mehr richtig sehen. Wir kriegen hier eine zu starke Rundung auf zwei Nachkommastellen. Wir nutzen jetzt mal die Funktion `tidy()` um hier Abhilfe zu leisten. Ich muss hier noch die Spalte `estimate` mit `num(..., digits = 5)` anpassen, damit du in der Ausgabe auf der Webseite auch die Nachkommastellen siehst.

```{r}
#| message: false

quasipoisson_fit %>% 
  tidy(exponentiate = TRUE, digits = 5) %>% 
  select(term, estimate, p.value) %>% 
  mutate(p.value = pvalue(p.value),
         estimate = num(estimate, digits = 5))
```

Schauen wir uns die Effekte der Poissonregression einmal an und versuchen die Ergebnisse zu interpretieren. Dabei ist wichtig sich zu erinnern, dass kein Effekt eine 1 bedeutet. Wir schauen hier auf einen Faktor. Wenn wir eine Anzahl mal Faktor 1 nehmen, dann ändert sich nichts an der Anzahl.

-   `(Intercept)` beschreibt den Intercept der Poissonregression. Wenn wir mehr als eine simple Regression vorliegen haben, wie in diesem Fall, dann ist der Intercept schwer zu interpretieren. Wir konzentrieren uns auf die Effekte der anderen Variablen.
-   `area`, beschreibt den Effekt der Fläche. Steigt die Fläche um ein Quadratmeter an, so erhöht sich die *Anzahl an Fischen* um den $1.00001$. Daher würde man hier eher sagen, erhöht sich die Fläche um jeweils 1000qm so erhöht sich die *Anzahl an Fischen* um den Faktor $1.1$. Dann haben wir auch einen besser zu interpretierenden Effektschätzer. Die Signifikanz bleibt hier davon unbetroffen.
-   `do2`, beschreibt den Partzialdruck des Sauerstoffs. Steigt dieser um eine Einheit an, so sehen wie eine Erhöhung der *Anzahl an Fischen* um den Faktor $1.25$. Der Effekt ist gerade *nicht* signifikant.
-   `maxdepth`, beschreibt die maximale Tiefe. Je tiefer ein Fluß, desto mehr Hechte werden wir beobachten. Der Effekt von $1.01$ pro Meter Tiefe ist signifikant.
-   `no3`, beschreibt den Anteil an Nitrat in den Flüssen. Je mehr Nitrat desto signifiant mehr Hechte werden wir beobachten. Hier steigt der Faktor auch um $1.20$.
-   `so4`, beschreibt den Schwefelgehalt und mit steigenden Schwefelgehalt nimmt die *Anzahl an Fischen* leicht ab. Der Effekt ist aber überhauot nicht signifikant.
-   `temp`, beschreibt die Temperatur der Flüsse. Mit steigender Tempertaur erwarten wir mehr Hechte zu beobachten. Der Effekt von $1.08$ Fischen pro Grad Erhöhung ist signifikant.

Was nehmen wir aus der Poissonregression zu den langnasigen Hechten mit? Zum einen haben die Fläche, die Tiefe und der Nitratgehalt einen signifikanten Einfluss auf die Anzahl an Hechten. Auch führt eine höhere Temperatur zu mehr gefundenen Hechten. Die erhöhte Temperatur steht etwas im Widerspuch zu dem Sauerstoffpartizaldruck. Denn je höher die Temperatur desto weniger Sauerstoff wird in dem Wasser gelöst sein. Auch scheint die Oberfläche mit der Tiefe korreliert. Allgemein scheinen Hechte große Flüße zu mögen. Hier bietet sich also noch eine Variablenselektion oder eine Untersuchung auf Ausreißer an um solche Effekte nochmal gesondert zu betrachten.

## Zeroinflation

So eine Poissonregression hat schon einiges an Eigenheiten. Neben dem Problem der Overdispersion gibt es aber noch eine weitere Sache, die wir beachten müssen. Wir können bei einer Poissonregression auch eine Zeroinflation vorliegen haben. Das heißt, wir beobachten viel mehr Nullen in den Daen, als wir aus der Poissonverteilung erwarten würden. Es gibt also einen biologischen oder künstlichn Prozess, der uns Nullen produziert. Häufig wissen wir nicht, ob wir den Prozess, der uns die Nullen in den Daten produziert, auch abbilden. Das heißt, es kann sein, dass wir einfach nichts Zählen, weil dort nichts ist oder aber es gibt dafür einen Grund. Diesen Grund müssten wir dann irgendwie in unseren Daten erfasst haben, aber meistens haben wir das nicht.

Schauen wir usn dafür einmal ein Datenbeispiel von Eidechsen in der Lüneburgerheide an. Wir haben Eidechsen `lizard` in zwei verschiedenen Habitaten `grp` gezählt. Einmal, ob die Eidechsen eher im offenen Gelände oder eher im bedeckten Gelände zu finden waren. Im Weiteren haben wir geschaut, ob der Boden keinen Regen erhalten hatte, trocken war oder gar feucht. Mit trocken ist hier eine gewisse Restfeuchte gemeint. Am Ende haben wir noch bestimmt, ob wir eher nah an einer Siedlung waren oder eher weiter entfernt. Du kannst dir den Daten satz in der Datei `lizards.csv` nochmal anschauen. In @tbl-lizard-data sind die Daten nochmal dargestellt.

```{r}
#| message: false
#| warning: false
#| echo: false
#| tbl-cap: "Ausschnitt aus den Eidechsendaten für die zwei Habitate unter verschiedenen Feuchtigkeitsbedingungen und Nähe zur nächsten Siedlung."
#| label: tbl-lizard-data

set.seed(20210061)

lizard_zero_tbl <- expand_grid(grp = 1:2,
                               rain = 1:3,
                               pop = 1:2,
                               rep = 1:5) %>% 
  mutate(lizard = 0 + 1.5 * grp - 2 * rain + 1.2 * pop + rnorm(n(), 0, 2),
         lizard = ifelse(round(lizard) < 0, 0, round(lizard)),
         grp = factor(grp, labels = c("open", "cover")),
         rain = factor(rain, labels = c("no", "dry", "wet")),
         pop = factor(pop, labels = c("near", "far"))) %>% 
  select(-rep)

write_csv2(lizard_zero_tbl, "data/lizards.csv")

lizard_zero_tbl %>% head(n = 7) %>% kable(align = "c", "pipe")

```

In @fig-pois-lizard-data sehen wir die Zähldaten der Eidechsen nochmal als Histogramm dargestellt. Wenn wir an einem Punkt keine Eidechsen gefunden haben, dann haben wir keine fehlenden Werte eingetragen, sondern eben, dass wir keine Eidechsen gezählt haben. Wir sehen das wir sehr viele Nullen in unseren Daten haben. Ein Indiz für eine Inflation an Nullen oder eben einer Zeroinflation.

```{r}
#| echo: true
#| message: false
#| label: fig-pois-lizard-data
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Histogramm der Verteilung der Hechte in den beobachteten Flüssen."

ggplot(lizard_zero_tbl, aes(lizard)) +
  theme_bw() +
  geom_histogram() +
  labs(x = "Anzahl der gefundenen Eidechsen", y = "Anzahl") +
  scale_x_continuous(breaks = 0:7)

```

Um zu überprüfen, ob wir eine Zeroinflation in den Daten vorliegen haben, werden wir erstmal eine ganz normale Poissonregression auf den Daten rechnen. Wir ignorieren auch eine potenzielle Overdispersion. Das schauen wir uns dann in den Daten später nochmal an.

```{r}
#| message: false
#| warning: false
lizard_fit <- glm(lizard ~ grp + rain + pop, data = lizard_zero_tbl,
                  family = poisson)
```

Wie immer nutzen wir die Funktion `model_parameters()` um uns die exponierten Koeffizienten aus dem Modell wiedergeben zu lassen. Das Modell dient uns jetzt nur als Ausgangsmodell und wir werden das Poissonmodell jetzt nicht weiter tiefer verwenden.

```{r}
#| message: false
#| warning: false
lizard_fit %>% model_parameters(exponentiate = TRUE)
```

Wir sehen, dass wir in der Variable `rain` eine starke Reduzierung der Anzahl an Eidechsen sehen. Vielleicht ist dies eine Variable, die zu viele Nullen produziert. Auch hat die Variable `pop`, die für die Nähe an einer Siedlung kodiert, einen starken positiven Effekt auf unsere Anzahl an Eidechsen. Hier wollen wir also einmal auf eine Zeroinflation überprüfen. Wir nutzen dazu die Funktion `check_zeroinflation()` aus dem R Paket `performance`. Die Funktion läuft nur auf einem Modellfit.

```{r}
#| message: true
#| warning: false
check_zeroinflation(lizard_fit)
```

Die Funktion gibt uns wieder, dass wir vermutlich eine Zeroinflation vorliegen haben. Das können wir aber Modellieren. Um eine Zeroinflation *ohne Overdispersion* zu modellieren nutzen wir die Funktion `zeroinfl()` aus dem R Paket `pscl`. Der erste Teil der Funktion ist leicht erkläret. Wir bauen uns wieder unswer Model zusammen, was wir fitten wollen. Dann kommt aber ein `|` und mit diesem Symbol `|` definieren wir, ob wir wissen, woher die Nullen kommen oder aber ob wir die Nullen mit einem zufälligen Prozess modellieren wollen.

Wenn wir das Modell in der Form `y ~ f1 + f2 | 1` schreiben, dann nehmen wir an, dass das Übermaß an Nullen in unseren Daten rein zufällig entstanden sind. Wir haben keine Spalte in de Daten, die uns eine Erklärung für die zusätzlichen Nullen liefern würde.

Wir können auch `y ~ f1 + f2 | x3` schreiben. Dann haben wir eine Variable `x3` in den Daten von der wir glauben ein Großteil der Nullen herrührt. Wir könnten also in unseren Daten annehmen, dass wir den Überschuss an Nullen durch den Regen erhalten haben und damit über die Spalte `rain` den Exzess an Nullen modellieren.

Man sollte immer mit dem einfachsten Modell anfangen, deshalb werden wir jetzt einmal ein Modell fitten, dass annimmt, dass die Nullen durch einen uns unbekannten Zufallsprozess entstanden sind.

```{r}
#| message: false
#| warning: false
lizard_zero_infl_intercept_fit <- zeroinfl(lizard ~ grp + pop + rain | 1, 
                                           data = lizard_zero_tbl) 
```

Wir schauen uns das Modell dann wieder einmal an und sehen eine Zweiteilung der Ausgabe. In dem oberen Teil der Ausgabe wird unsere Anzahl an Eidechsen modelliert. In dem unteren Teil wird der Anteil der Nullen in den Daten modelliert. Daher können wir über Variablen in dem `Zero-Inflation` Block keine Aussagen über die Anzahl an Eidechsen treffen. Variablen tauchen nämlich nur in einem der beiden Blöcke auf.

```{r}
#| message: false
#| warning: false
lizard_zero_infl_intercept_fit %>% 
  model_parameters(exponentiate = TRUE)
```

Als erstes beobachten wir einen größeren Effekt der Variable `grp`. Das ist schon mal ein spannender Effekt. An der Signifikanz hat scih nicht viel geändert. Wir werden am Ende des Kapitels einmal alle Modell für die Modellierung der Zeroinflation vergleichen.

Nun könnte es auch sein, dass der Effekt der vielen Nullen in unserer Variable `rain` verborgen liegt. Wenn es also regnet, dann werden wir viel weniger Eidechsen beoabchten. Nehmen wir also `rain` als ursächliche Variable mit in das Modell für die Zeroinflation.

```{r}
#| message: false
#| warning: false
lizard_zero_infl_rain_fit <- zeroinfl(lizard ~ grp + pop | rain, 
                                      data = lizard_zero_tbl)
```

Wieder schauen wir uns einmal die Ausgabe des Modells einmal genauer an.

```{r}
#| message: false
#| warning: false
lizard_zero_infl_rain_fit %>% model_parameters(exponentiate = TRUE)
```

Es ändert sich einiges. Zum einen erfahren wir, dass der Regen anscheined doch viele Nullen in den Daten produziert. Wir haben ein extrem hohes $OR$ für die Variable `rain`. Die Signifikanz ist jedoch eher gering. Wir haben nämlich auch eine sehr hohe Streuung mit den großen $OR$ vorliegen. Au der anderen Seite verlieren wir jetzt auch die Signifikanz von unseren Habitaten und dem Standort der Population. Nur so mäßig super dieses Modell.

Wir können jetzt natürlich auch noch den Standort der Population mit in den Prozess für die Entstehung der Nullen hineinnehmen. Wir schauen uns dieses Modell aber nicht mehr im Detail an, sondern dann nur im Vergleich zu den anderen Modellen.

```{r}
#| message: false
#| warning: false
lizard_zero_infl_rain_pop_fit <- zeroinfl(lizard ~ grp | rain + pop, 
                                          data = lizard_zero_tbl)
```

Die Gefahr besteht immer, das man sich an die Wand modelliert und vor lauter Modellen die Übersicht verliert. Neben der Zeroinflation müssen wir ja auch schauen, ob wir eventuell eine Overdispersion in den Daten vorliegen haben. Wenn das der Fall ist, dann müsen wir nochmal überlegen, was wir dann machen. Wir testen nun auf Ovrdisprsion in unserem *ursprünglichen* Poissonmodell mit der Funktion `check_overdispersion()`.

```{r}
#| message: true
#| warning: false
check_overdispersion(lizard_fit)
```

Tja, und so erfahren wir, dass wir auch noch Overdispersion in unseren Daten vorliegen haben. Wir müsen also beides Modellieren. Einmal modellieren wir die Zeroinflation und einmal die Overdispersion. Wir können beides in einem negativen binominalen Modell fitten. Auch hier hilft die Funktion `zeroinfl()` mit der Option `dist = negbin`. Mit der Option geben wir an, dass wir eine negative binominal Verteilungsfamilie wählen. Damit können wir dann auch die Ovrdispersion in unseren Daten modellieren.

```{r}
#| message: false
#| warning: false
lizard_zero_nb_intercept_fit <- zeroinfl(lizard ~ grp + rain + pop | 1, 
                                         dist = "negbin", data = lizard_zero_tbl)
```

Dann schauen wir usn einmal das Modell an. Zum einen sehen wir, dass der Effekt ähnlich groß ist, wie bei dem Intercept Modell der Funktion `zeroinfl`. Auch bleiben die Signifikanzen ähnlich.

```{r}
#| message: false
#| warning: false
lizard_zero_nb_intercept_fit %>% model_parameters(exponentiate = TRUE)
```

Nun haben wir vier Modelle geschätzt und wolen jetzt wissen, was ist das beste Modell. Dafür hilft usn dann eine Gegenüberstellung der Modelle mit der Funktion `modelsummary()`. Wir könnten die Modelle auch gegeneinander statistsich Testen, aber hier behalten wir uns einmal den beschreibenden Vergleich vor. In @tbl-model-comp-zero sehen wir einmal die vier Modelle nebeneinander gestellt. Für eine bessere Übrsicht, habe ich aus allen Modellen den Intercept entfernt.

```{r}
#| message: false
#| echo: true
#| tbl-cap: "Modellvergleich mit den vier Modellen. Wir schauen in wie weit sich die Koeffizienten und Modelgüten für die einzelnen Modelle im direkten Vergleich zum vollen Modell verändert haben."
#| label: tbl-model-comp-zero

modelsummary(lst("ZeroInfl Intercept" = lizard_zero_infl_intercept_fit,
                 "ZeroInfl rain" = lizard_zero_infl_rain_fit,
                 "ZeroInfl rain+pop" = lizard_zero_infl_rain_pop_fit,
                 "NegBinom intercept" = lizard_zero_nb_intercept_fit),
             statistic = c("conf.int",
                           "s.e. = {std.error}", 
                           "t = {statistic}",
                           "p = {p.value}"),
             coef_omit = "Intercept", 
             exponentiate = TRUE)
```

Die beiden Intercept Modelle haben die kleinsten $AIC$-Werte der vier Modelle. Darüber hinaus haben dann beide Modelle auch die höchsten $R^2_{adj}$ Werte. Beide Modelle erklären also im Verhältnis viel Varianz mit 58.5%. Auch ist der $RMSE$ Wert als Fehler bei beiden Modellen am kleinsten. Damit haben wir die Qual der Wahl, welches Modell wir nehmen. Ich würde das negative binominal Modell nehmen. Wir haben ins unseren Daten vermutlich eine Zeroinflation sowie eine Overdispersion vorliegen. Daher bietest es sich an, beides in einer negativen binominalen Regression zu berücksichtigen. Zwar sind die beiden Intercept Modelle in diesem Beispielfall von den Koeffizienten fast numerisch gleich, aber das hat eher mit dem reduzierten Beispiel zu tun, als mit dem eigentlichen Modell. In unserem Fall ist die Overdispersion nicht so extrem.

Wie sehe den unser negative binominal Modell aus, wenn wir mit dem Modell einmal die zu erwartenden Eidechsen vorhersagen würden? Auch das kann helfen um abzuschätzen, ob das Modelle einigermaßen funktioniert hat. Wir haben ja hier den Vorteil, dass wir nur mit kategorialen Daten arbeiten. Wir haben keine kontiniuerlichen Variablen vorliegen und darüber hinaus auch nicht so viele Variablen insgesamt.

Daher bauen wir uns mit `expand_grid()` erstmal einen Datensatz, der nur aus den Faktorkombinationen besteht. Wir haben also nur eine Beobachtung je Faktorkombination. Danach nutzen wir die Daten einmal in der Funktion `predict()` um uns die vorhergesagten Eidechsen nach dem gefitten Modell wiedergeben zu lassen.

```{r}
newdata_tbl <- expand_grid(grp = factor(1:2, labels = c("open", "cover")),
                           rain = factor(1:3, labels = c("no", "dry", "wet")),
                           pop = factor(1:2, labels = c("near", "far")))

pred_lizards <- predict(lizard_zero_nb_intercept_fit, newdata = newdata_tbl) 
  
newdata_tbl <- newdata_tbl %>% 
  mutate(lizard = pred_lizards)
```

Nachdem wir in dem Datensatz `newdata_tbl` nun die vorhergesagten Eidechsen haben, können wir uns jetzt in der @fig-pred-lizard die Zusammenhänge nochmal anschauen.

```{r}
#| echo: true
#| message: false
#| label: fig-pred-lizard
#| fig-align: center
#| fig-height: 5
#| fig-width: 10
#| fig-cap: "Scatterplot der vorhergesagten Eidechsen in den Habitaten (`grp`), der Feuchtigkeit des Bodens nach Regen und dem Abstand zur nächsten Ortschaft."


ggplot(newdata_tbl, aes(x = rain, y = lizard, colour = grp, group = grp)) +
  theme_bw() +
  geom_point() +
  geom_line() +
  facet_wrap(~ pop) +
  labs(x = "Feuchtigkeit nach Regen", y = "Anzahl der gezählten Eidechsen",
       color = "Gruppe") +
  scale_color_okabeito()
```

Wir erkennen, dass mit der Erhöhung der Feuchtigkeit die Anzahl an aufgefundenen Eidechsen sinkt. Der Effekt ist nicht mehr so stark, wenn es schon einmal geregnet hat. Ebenso macht es einen Unterschied, ob wir nahe einer Siedlung sind oder nicht. Grundsätzlich finden wir immer mehr Eidechsen in geschützten Habitaten als in offenen Habitaten.

## Referenzen {.unnumbered}
