Wir schauen uns hier als erstes die Standardvariante in R an. Das heißt, wir nehmen die einfachen Funktionen, die in R implementiert sind und rechnen damit eine Zeitreihenanalyse. Damit haben wir dann einige Nachteile, da wir uns die Funktionen dann eventuell nochmal aus Paketen zusammensuchen müssen. Dafür ist es aber schön kleinteilig und du kannst die Analysen Schritt für Schritt durchführen. Wenn dir das zu kleinteilig oder aber veraltet ist, dann schaue gleich weiter unten in den Abschnitten zu den R Paketen `{tktime}` und `{modeltime}` nach. Beide Pakete sind die Antwort auf eine Analyse von Zeitreihen im `{tidyverse}`.

::: callout-important
## Konvertierung von verschiedenen Datumsformaten in R

Das R Paket `{timetk}` liefert dankenswerterweise Funktionen für die Konvertierung von verschiedenen Zeitformaten in R. Deshalb schaue einmal in die Hilfeseite [Time Series Class Conversion -- Between ts, xts, zoo, and tbl](https://business-science.github.io/timetk/articles/TK00_Time_Series_Coercion.html#introduction) und dann dort speziell der Abschnitt [Conversion Methods](https://business-science.github.io/timetk/articles/TK00_Time_Series_Coercion.html#conversion-methods). Leider ist Zeit in R wirklich relativ.
:::

Leider ist das Zeitformat `ts` etwas quälend. Dennoch basieren viele Tutorien auf diesem Format, deshalb hier auch einmal die Erklärung dafür. Es ist aber auch verständlich, denn das Format ist sozusagen der eingebaute Standard in R. Standard heißt hier aber nicht toll, sondern eher veraltet aus den 90zigern. Dann gibt es mit dem R Paket `{zoo}` noch ein Palette an nützlichen Funktionen, wenn du nicht so viel machen willst. Mit so viel meine ich, dass du eher an einem rollenden Mittelwert oder aber der rollenden Summe interessiert bist. Dann macht das R Paket `{zoo}` sehr viel Sinn. Einen Überblick liefert hier auch das Tutorium [Reading Time Series Data](https://a-little-book-of-r-for-time-series.readthedocs.io/en/latest/src/timeseries.html#reading-time-series-data).

Wenn wir viele Datenpunkte über die Zeit messen, dann hilft es manchmal die Spitzen und Täler aus den Daten durch eine rollende statistische Maßzahl zusammenzufassen. Das R Paket `{zoo}` hat die Funktion `rollmean()` sowie `rollmax()` und `rollsum()`. Es gibt aber noch eine Reihe weiterer Funktionen. Du musst hier einfach mal die Hilfeseite `?rollmean()` für mehr Informationen aufrufen. Mit den Funktionen können wir für ein Zeitintervall $k$ den Mittelwert bzw. der anderen Maßzahlen berechnen. In unserem Fall habe ich einmal das rollende Monatsintervall genommen. Du kannst aber auch andere Zeiten für $k$ einsetzen und überlegen welcher Wert besser zu deinen Daten passt. Hier einmal die Berechnung für das rollende Mittel, das rollende Maximum und die rollende Summe. In allen drei Fällen nutzen wir die Funktion `split()` und `map()` um effizient unseren Code auszuführen.

::: panel-tabset
## `rollmean()`

```{r}
roll_mean_tbl <- salad_long_tbl %>% 
  split(.$type) %>% 
  map(~zoo(.x$temp, .x$datum)) %>% 
  map(~rollmean(.x, k = 29)) %>% 
  map(tk_tbl) %>% 
  bind_rows(.id = "type")
```

## `rollmax()`

```{r}
roll_max_tbl <- salad_long_tbl %>% 
  split(.$type) %>% 
  map(~zoo(.x$temp, .x$datum)) %>% 
  map(~rollmax(.x, k = 29)) %>% 
  map(tk_tbl) %>% 
  bind_rows(.id = "type")
```

## `rollsum()`

```{r}
roll_sum_tbl <- salad_long_tbl %>% 
  split(.$type) %>% 
  map(~zoo(.x$temp, .x$datum)) %>% 
  map(~rollsum(.x, k = 29)) %>% 
  map(tk_tbl) %>% 
  bind_rows(.id = "type")
```
:::

In der @fig-time-salad-roll-1 siehst du einmal das Ergebnis der drei rollenden Maßzahlen. Im Folgenden habe ich zuerst das Template `p_temp` erstellt und dann über den Operator `%+%` die Datensätze zum rollenden Mittelwert, zu dem rollenden Maximum und der rollenden Summe ersetzt. Die rollende Summe habe ich noch auf der $\log$-transformierten $y$-Achse dargestellt.

```{r}
p_temp <- ggplot() +
  aes(index, value, color = type) +
  theme_bw() +
  geom_point2() +
  stat_smooth(se = FALSE) +
  labs(x = "Datum", y = "Rollende statistische Maßzahl", 
       color = "Type") +
  scale_color_okabeito() 
```

Wir sehen in der folgenden Abbildung, dass sich die Messtypen dann doch nicht so stark in durch die rollenden Maßzahlen unterscheiden. Wir haben ja schon in der Orginalabbildung das Problem gehabt, dass sich die Werte sehr stark ähneln. Das scheint auch über 29 Tage der Fall zu ein. Was man besser sieht, ist das wellenförmige Ansteigen der Temperatur über die gemessene Zeit. Wir hatten also immer mal wieder etwas kältere Phasen, die von wärmeren Phasen abgelöst wurden.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-salad-roll-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Darstellung der rollenden Mittelwerte, maximalen Werte sowie aufsummierten Werte über 29 Tage. Die aufsummierten Werte sind auf logarithmischen Skala dargestellt. Gegenüber der orginalen Abbildung sehen wir schon etwas mehr Ordnung. Die drei Arten der Messung unterscheiden sich aber weiterhin kaum."
#| fig-subcap: 
#|   - "Rollender Mittelwert."
#|   - "Rollendes Maximum."
#|   - "Rollende Summe"
#| layout-nrow: 1
#| column: page

p_temp %+%
  roll_mean_tbl +
  ylim(0, 40)

p_temp  %+%
  roll_max_tbl +
  ylim(0, 40)

p_temp  %+%
  roll_sum_tbl +
  scale_y_log10()
 
```
