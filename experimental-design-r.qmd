```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc,
               grid, agricolae, patchwork, desplot, modelr)
```

# Versuchsplanung in R {#sec-experimental-design-r}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

::: column-margin
Ein Weiteres umfangreiches Tutorium liefert [DSFAIR von P. Schmidt](https://schmidtpaul.github.io/DSFAIR/DesigningExperiments.html). Hier finden sich auch weiterführende Literatur und weitere Beispiele.
:::

In diesem Kapitel wollen wir uns die Versuchsplanung in R einmal genauer anschauen. Das heißt, dass wir hier den Fokus auf die Funktionen und Pakete legen. In den dann folgenden Kapiteln schauen wir uns die Anwendung auf die gängigen experimentellen Designs in den Agrarwissenschaften an. Wie immer schauen wir erst auf die Anwendung und gehen dann auf die Theorie. Das ist in diesem Kapitel im Besonderen der Fall. Mir geht es hier mehr um die technische Umsetzung als um den eigentlichen Hintergrund.

Wenn wir über die Versuchsplanung und R sprechen, dann kommen wir an folgender Sammlung nicht vorbei.

-   [Design of Experiments (DoE) & Analysis of Experimental Data](https://cran.r-project.org/web/views/ExperimentalDesign.html)

Nirgendwo sonst findest du so einen Überblick über mögliche Pakete und Anwendungen in R. Wir schauen uns hier dann nur eine Auswahl an Möglichkeiten an. Ich selber habe mir noch nicht alles angeschaut, dass ist einfach zu viel. Je nach Fragestellung bietet sich ja auch ein anderes Paket an. Wir belassen es wie immer bei den Grundlagen. Die Grundlagen sind ja meistens dann ausreichend und manchmal auch schon kompliziert genug.

Jetzt müssen wir doch noch auf den Begriff *nested* (deu. *verschachtelt*) kommen. Wenn wir über *nested* sprechen, dann meinen wir, dass Faktoren ineinander verschachtelt sind. Mit Faktoren meine ich experimentelle Bedingungen. Das klingt jetzt etwas wirr, aber wir machen das mal an einem Beispiel fest. Wir haben den Faktor `table` und *auf* dem Tisch stehen die Behandlungen des Faktors `trt` mit den jeweiligen Pflanzen. Also ist die Behandlung in den Tischen *genested*. Die Tische mögen in verschiedenen Gewächshäusern mit dem Faktor `location` stehen, also sind die Tische in den Gewächshäusern genested. Wir haben folgendes Schema vorliegen.

$$
\mbox{Wiederholungen} \xrightarrow[]{nested} \overbrace{\mbox{Behandlungen}}^{f_1} \xrightarrow[]{nested} \underbrace{\mbox{Tische}}_{f_2} \xrightarrow[]{nested} \overbrace{\mbox{Gewächshauser}}^{f_3} 
$$

Damit haben wir dann aber auch *meistens* folgende Abhängigkeit von den jeweiligen Beobachtungen untereinander nach der wir dann unser Experiment planen müssen.

$$
\overbrace{\mbox{Gewächshauser}}^{f_3} \xrightarrow[]{beinhaltet\; alle} \underbrace{\mbox{Tische}}_{f_2} \xrightarrow[]{beinhaltet\; alle} \overbrace{\mbox{Behandlungen}}^{f_1} \xrightarrow[]{beinhaltet\; alle} \mbox{Wiederholungen}
$$

Okay, das ist jetzt abstrakt. Machen wir das mal konkret mit einem Beispiel mit drei Behandlungen gegen Blattläuse auf jeweils vier Tischen in drei Gewächshäusern. Pro Behandlung nehmen wir fünf Pflanzen. Damit ergibt sich folgendes Schema mit den jeweiligen Anzahlen darübergeschrieben.

$$
\overbrace{\mbox{Gewächshauser}}^{n_g = 3} \xrightarrow[]{beinhaltet\; alle} \underbrace{\mbox{Tische}}_{n_t = 4} \xrightarrow[]{beinhaltet\; alle} \overbrace{\mbox{Behandlungen}}^{n_b = 3} \xrightarrow[]{beinhaltet\; alle} \underbrace{\mbox{Wiederholungen}}_{n_w = 5}
$$

Jetzt können wir auch ausrechnen, wie viele Pflanzentöpfe wir brauchen. Wir multiplizieren alle $n$-Angaben miteinander und erhalten $n_{gesamt} = n_g \cdot n_t \cdot n_b \cdot n_w = 3 \cdot 4 \cdot 3 \cdot 5 = 180$

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
set.seed(20230812)
pacman::p_load(tidyverse, magrittr, writexl, agricolae,
               desplot,
               conflicted)
conflicts_prefer(magrittr::set_names)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Selbermachen mit `expand_grid()`

Wenn wir uns das experimentelle Design selber zusammenprogrammieren können wir auf das `tidyverse` Paket zurückgreifen und haben dann ein schöneres Leben. Wir müssen zwar etwas mehr beachten, aber dafür sind wir auch sehr viel mehr flexibel. Deshalb stelle ich für die einfacheren Designs in den folgenden Kapiteln auch immer den Code zum Selbermachen vor. Hier gibt es jetzt einmal die Grundidee am *Complete randomized design (CRD)*. Wir gehen immer von einem balancierten Design aus, dass heißt in jeder Behandlungsgruppe sind gleich viele Beobachtungen.

Nehmen wir folgendes simples Modell. Wir wollen untersuchen, ob das Trockengewicht *drymatter* von einer Behandlung *trt* abhängt. Wir werden uns dann gleich noch entscheiden, wie viele Behandlungsgruppen wir wollen und wie viele Wiederholungen wir pro Behandlungsgruppe nehmen.

$$
drymatter \sim \overbrace{trt}^{f_1} 
$$

Zentral für unsere Überlegungen ist die Funktion `expand_grid()`, die es uns einfach erlaubt alle Faktorkombinationen aus zwei oder mehr Vektoren zu erstellen. Wir haben im Folgenden im Vektor `a` die Zahlen 1 bis 3 und in dem Vektor `b` die Zahlen 1 und 2. Jetzt wollen wir alle Kombinationen von `a` und `b` haben und nutzen dafür `expand_grid()`.

```{r}
expand_grid(a = 1:3, b = 1:2)
```

Jetzt einmal konkreter auf unser Beispiel angewandt. Wir wollen vier Behandlungsgruppen und in jeder Behandlungsgruppe fünf Wiederholungen `rep`. Dann benennen wir noch die Behandlungen mit `ctrl`, `A`, `B` und `C`. Unsere Wiederholungen kriegen die Zahlen von 1 bis 5. Dann ergänzen wir noch eine Pflanzenidentifizierungsnummer `pid` über die wir dann später randomisieren können. Wenn du willst, kannst du dir dann über `select()` noch die Spalten sauber sortieren.

```{r}
crd_long_tbl <- expand_grid(trt = 1:4, rep = 1:5) %>% 
  mutate(trt = factor(trt, labels = c("ctrl", "A", "B", "C")),
         rep = factor(rep, labels = 1:5),
         pid = 1:n()) %>% 
  select(pid, everything())
crd_long_tbl
```

Dann kannst du dir die Datei mit der Funktion `write_xlsx()` aus dem R Paket `writexl` raus schreiben und dann entsprechend mit deinen Messwerten für das Trockengewicht ergänzen.

```{r}
#| eval: false
#| message: false
#| warning: false
crd_long_tbl %>% 
  write_xlsx("template_sheet.xlsx")
```

Wenn du für deine zwanzig Pflanzen noch ein Randomisierungmuster brauchst, dann empfehle ich dir die Folgende schnelle Art und Weise. Du nimmst die Pflanzen ID's von 1 bis 20 und mischt die Zahlen einmal mit der Funktion `sample()` durch. Dann erstellst du dir als dein Grid für deine Pflanzen mit einer $4 \times 5$-Matrix und pflanzt nach diesem Grid die Pflanzen ein.

```{r}
crd_long_tbl$pid %>% 
  sample() %>% 
  matrix(nrow = 4, ncol = 5,
         dimnames = list(str_c("Reihe", 1:4, sep = "-"),
                         str_c("Spalte", 1:5, sep = "-")))
```

Es gibt natürlich noch andere Möglichkeiten, aber das ist jetzt die schnellste Variante.

## Das R Paket `agricolae`

Für die Erstellung von komplexeren experimentellen Designs führt kein Weg an dem R Paket `agricolae` vorbei. Bei den einfacheren Designs ist es dann so eine Sache, ob du dir mit `agricolae` einen Gefallen tust oder eher die Sache sehr stark verkomplizierst. Ich würde dir bei den einfacheren Designs empfehlen einfach `exoand_grid()` wie oben beschrieben zu nutzen. Das ist einfacher und funktioniert auch gut, wenn nicht gar besser. Darüber hinaus ist die Hilfe der Funktionen teilweise etwas sehr mager und die Weiterentwicklung eher fraglich.

Wichtige Parameter bei der Erstellung des Designs mit den Funktionen von `agricolae`:

-   `series`: Eine Konstante, die verwendet wird, um numerische Markierungsblöcke festzulegen, z. B. Nummer = 2, die Etiketten lauten: 101, 102, für die erste Reihe oder den ersten Block, 201, 202, für die folgenden, im Falle eines vollständig randomisierten Designs ist die Nummerierung fortlaufend.
-   `design`: Einige Merkmale des Entwurfs, die agricolae anfordert, werden speziell auf design.ab (faktoriell) oder design.split (geteilter Plot) angewandt, und ihre möglichen Werte sind: "rcbd", "crd" und "lsd".
-   `seed`: Der Seed für die Zufallsgenerierung und sein Wert ist ein beliebiger reeller Wert, wenn der Wert Null ist, gibt es keine reproduzierbare Generierung, in diesem Fall eine Kopie des Wertes der outdesign\$Parameter.
-   `kinds`: die Methode der Zufallsgenerierung, standardmäßig "Super-Duper".
-   `first`: Bei einigen Mustern ist die erste Wiederholung nicht zufällig, vor allem im Blockmuster, wenn Sie zu zufällig wechseln wollen, ändern Sie auf TRUE: TRUE oder FALSE. Wenn false, wird die Randomisierung nicht durchgeführt
-   `randomization`: Soll das Design randomisiert werden?

Output design:

-   `parameters`: die Eingabe zur Generierung Design, enthalten die Saatgut zur Generierung zufällig, wenn seed=0, das Programm einen Wert zu generieren und es ist möglich, das Design zu reproduzieren.
-   `book`: Feldbuch
-   `statistics`: die Informationsstatistiken das Design, z.B. Effizienzindex, Anzahl der Behandlungen.
-   `sketch`: Verteilung der Behandlungen im Feld.

Die Aufzählung der Parzellen

-   `zigzag`: ist eine Funktion, die es Ihnen ermöglicht, die Nummerierung der Plots in der Richtung der Serpentine zu platzieren: Die Zickzack-Ausgabe wird durch ein Design erzeugt
-   `fieldbook`: Ausgabe des Zickzacks, enthält Feldbuch.

[Tutorium agricolae](https://cran.r-project.org/web/packages/agricolae/vignettes/tutorial.pdf)

R Paket `agricolae` mit Beispielen von [Experimental Designs with agricolae](https://myaseen208.com/agricolae/articles/ExperimentalDesign.html) genauer einmal an.

Der Vorteil ist hier, dass wir verschiedene Anzahlen von Individuen in die Generierung nehmen können. Also zum Beispiel drei Pflanzen in der Kontrolle und dann jeweils fünf Pflanzen in der Behandlung. Weil es aber dann meistens nicht auf die zwei Kontrollpflanzen weniger ankommt, machen wir immer ein balanziertes Design. Wenn es aber sein soll, dann ist es natürlich hier einfacher umzusetzen.

```{r}
crd_obj <- design.crd(trt = c("ctrl", "A", "B", "C"), r = c(3, 5, 5, 5), serie = 3)

crd_book <- crd_obj %>% 
  pluck("book") %>% 
  set_names(c("plots", "r", "trt"))


ggdesplot(data = crd_book, flip = TRUE,
          form = trt ~ r + plots,              # fill color per variety
          text = trt, cex = 1, shorten = "no", # show variety names per plot
          main = "Field layout", show.key = F)     # formatting



```

```{r}
rcbd_obj <- design.rcbd(trt = c("ctrl", "A", "B", "C"), r = 5)

rcbd_obj %>% pluck("book")

rcbd_obj %>% pluck("sketch")
```

## Das R Paket `desplot`

[Plotting field maps with the desplot package](https://cran.r-project.org/web/packages/desplot/vignettes/desplot_examples.html)

Jetzt müssen wir noch unser Grid ergänzen auf dem wir unsere Pflanzen stellen wollen. In unserem Fall wollen wir unsere Pflanzen auf vier Zeilen `row` und fünf Spalten `col` stellen. Das bietet sich bei zwanzig Pflanzen dann ja auch an.

```{r}
crd_grid <- expand_grid(row = 1:4, col = 1:5)
crd_grid  
```

Jetzt sortieren wir unsere Daten nach den Individuen und durchmischen damit auch gleichzeitig die Zuordnung von den Behandlungen. Dann ergänzen wir unser Grid für die Pflanzenpositionen durch die Funktion `bind_cols()`.

```{r}
crd_long_tbl <- crd_long_tbl %>% 
  mutate(id = sample(1:n()))
```

```{r}
crd_plot_tbl <- crd_long_tbl %>% 
  arrange(id) %>% 
  bind_cols(crd_grid)
crd_plot_tbl  
```

In der @fig-exp-r-01 sehen wir einmal unser Design dargestellt. Wir sehen, dass wir die vier Behandlungen mit den fünf Wiederholungen zufällig über den ganzen Tisch verteilt haben.

```{r}
#| message: false
#| warning: false
#| label: fig-exp-r-01
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo"

ggdesplot(data = crd_plot_tbl, 
          form = trt ~ col + row,
          text = trt, cex = 1, show.key = FALSE, 
          shorten = "no", 
          main = "Complete randomized design (CRD)")
```

## Das R Paket `agridat`

[agridat: Agricultural Datasets](https://cran.r-project.org/web/packages/agridat/index.html)

## Das R Paket `dae`

[dae: Functions Useful in the Design and ANOVA of Experiments](https://cran.r-project.org/web/packages/dae/index.html)
