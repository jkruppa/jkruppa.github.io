```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, glue, ggtext,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
theme_marginal <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (seit 07.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zum Beginn des WiSe 2025/26 eine neue Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll.
:::

::: {layout="[15,85]" layout-valign="top"}
![](images/personal_opinion.png){fig-align="center" width="100%"}

> *"Aktuell wird gerade an den Marginal effects models gebaut... das wird jedenfalls so seine Zeit noch brauchen, bis ich hier einen Strang und Grund drin habe." --- Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.*
:::

!["foo" Quelle: https://easystats.github.io/modelbased](images/allregressions.png){#fig-all-regression fig-align="center" width="100%"}

1.  Draw what you want to visualize
2.  Make models for it
3.  Select the best model
4.  Visualize the best model
5.  Investigate its parameters

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,
               ggpmisc, readxl, conflicted)
conflicts_prefer(dplyr::mutate)
conflicts_prefer(dplyr::summarize)
conflicts_prefer(dplyr::filter)
conflicts_prefer(ggplot2::annotate)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
## 
nice_number <- label_number(style_negative = "minus", accuracy = 0.01)
nice_p <- label_pvalue(prefix = c("p < ", "p = ", "p > "))
find_intercept <- function(x1, y1, slope) {
  intercept <- slope * (-x1) + y1
  return(intercept)
}
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_model_tbl <- read_excel("data/fleas_model_data.xlsx") |> 
  mutate(feeding = as_factor(feeding),
         stage = as_factor(stage),
         bonitur = as.numeric(bonitur),
         infected = factor(infected, labels = c("healthy", "infected"))) |> 
  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)
```

## Hypothesen

$$
Z=\frac{h(\hat{\theta})-H_0}{\sqrt{\hat{V}[h(\hat{\theta})]}}
$$

```{r}
feeding_fit = lm(jump_length ~ 0 + feeding, data = flea_model_tbl)
coef(feeding_fit)
```

```{r}
summary(feeding_fit) |> coef()
```

$$
Z = \cfrac{\hat{\beta_1}-H_0}{\sqrt{\widehat{V}[\beta_1]}} = \cfrac{75.43938 - 0}{4.791469} = 15.74
$$

```{r}
2*pt(15.74452, df = 45, lower.tail = FALSE)
```

```{r}
feeding_fit <-  lm(jump_length ~ feeding * stage, data = flea_model_tbl)
coef(feeding_fit)
```

::: panel-tabset
## `{marginaleffects}`

```{r}
predictions(feeding_fit)
```

```{r}
avg_predictions(feeding_fit, by = c("stage", "feeding"), vcov = "HAC")
```

```{r}
avg_predictions(feeding_fit, by = c("stage", "feeding"), vcov = "HAC",
                hypothesis = ~pairwise | stage)
```

```{r}
plot_predictions(feeding_fit, by = c("stage", "feeding"))
```

## `{emmeans}`

```{r}
feeding_fit |> 
  emmeans(~ feeding | stage, vcov = sandwich::vcovHAC)
```

```{r}
feeding_fit |> 
  emmeans(~ feeding | stage, vcov = sandwich::vcovHAC) |> 
  contrast(method = "pairwise", adjust = "bonferroni")
```
:::

## Prädiktion

```{r}
simple_tbl <- flea_model_tbl |> 
  filter(stage == "adult")
simple_fit <- lm(jump_length ~ feeding, simple_tbl)
coef(simple_fit)
```

```{r}
predictions(simple_fit)
avg_predictions(simple_fit)
```

```{r}
plot_predictions(simple_fit, by = "feeding")
```

```{r}
simple_2_tbl <- flea_model_tbl |> 
  filter(stage == "adult")
simple_2_fit <- lm(jump_length ~ weight*feeding, simple_2_tbl)
coef(simple_2_fit)
```

```{r}
#| eval: false
simple_2_fit |> broom::augment()
predictions(simple_2_fit)
avg_predictions(simple_2_fit, by = "feeding")

tibble(weight = simple_2_tbl$weight,
       jump_length = simple_2_tbl$jump_length, 
       feeding = simple_2_tbl$feeding,
       estimate = predictions(simple_2_fit)$estimate) |> 
  ggplot(aes(weight, estimate, shape = feeding)) +
  geom_point(aes(weight, jump_length), color = "blue") +
  geom_point(color = "red") +
  geom_line(aes(y = predict(simple_2_fit))) +
  geom_hline(yintercept = avg_predictions(simple_2_fit, by = "feeding")$estimate)

```

```{r}
plot_predictions(simple_2_fit, by = c("weight", "feeding"))
```

## Counterfactual

```{r}
avg_comparisons(feeding_fit,
    by = "stage",
    variables = list("feeding" = "pairwise"),
    vcov = "HC3")
```

## Weitere R Pakete

Das [R Paket `{modelbased}`](https://easystats.github.io/modelbased/)

## Marginal effects models

:::: callout-note
## Wie zeichne ich Modelle ein?

In dem folgenden Abschnitten wollen wir immer Modell in unsere Visualisierungen einzeichen. Nehmen wir einmal einen simplen Datensatz,d en wir uns einfach selber bauen und dann wollen wir dort eine Linie durchzeichnen. Dafür nehmen wri einmal zwanzig x-Werte und bauen uns dann die y-Werte nach $y = 1.5 + 0.75 \cdot x$ zusammen. Dann addieren wir noch einen Fehler aus einer Standardnormalverteilung hinzu. Wenn wir keinen Fehler hinzuaddieren würden, dann lägen die Punkte wie auf einer Perlenschnur aneinandergereit.

```{r}
set.seed(20250703)
modell_line_tbl <- tibble(x = rnorm(20, 2, 1),
                          y = 1.5 + 0.75 * x + rnorm(length(x), 0, 1))
```

Jetzt können wir einmal das Modell anpassen und schauen, ob wir die Koeffizienten des Modells wiederfinden. Dann wollen wir natürlich auch sehen, ob unser Modell durch die Punkte läuft. Also erstmal das Modell mit `lm()` gebaut. Dann schauen wir uns noch die Koeffizienten einmal mit an. Bei nur so wenigen Beobachtungen werden die Koeffizienten aus dem Modell nicht mit den voreingestellten übereinstimmen.

```{r}
model_fit <- lm(y ~ x, modell_line_tbl)
model_fit
```

In der folgenden Abbildung siehst du dann einmal den Scatterplot von unseren x-Werten und y-Werten. Wir wollen jetzt die Gerade, die wir im Modell geschätzt haben einmal durch die Punkte legen um zu schauen, ob das Modell auch die Punkte beschreibt. Dabei soll die Gerade durch die Mitte der Punkte laufen und die Punkte sollten auf beiden Seiten der Geraden gleichmäßig verteilt sein.

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Scatterplot der x-Werte und y-Werte. Durch die Punkte soll die Gerade aus dem Modell gelegt werden. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-model-line-01

ggplot(modell_line_tbl, aes(x, y)) +
  theme_minimal() +
  geom_point()
```

Wir haben jetzt verschiedene Möglichkeiten die Koeffizienten und damit das Modell in den obigen Plot einzuzeichnen. Ich zeige dir hier einmal die häufigsten, die ich dann auch nutze. Erstmal die Anwendung direkt in `{ggplot}` und dann einmal noch in dem R Paket `{ggpmisc}`.

#### ...mit `{ggplot}` {.unnumbered .unlisted}

::: panel-tabset
## `geom_function()`

In der Funktion `geom_function()` müssen wir die Funktion angeben, die wir dann abbilden wollen. Wenn du verstehst, was die Koeffizienten in dem Modell bedeuten, dann kannst du natürlich die mathematische Funktion wie hier entsprechend ergänzen.

```{r}
#| message: false
#| echo: true
#| warning: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade mit den Koeffizienten aus dem Modell. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-model-line-02

ggplot(modell_line_tbl, aes(x, y)) +
  theme_minimal() +
  geom_point() +
  geom_function(fun = \(x) 1.9574 + 0.5534 * x, 
                color = "#CC79A7")
```

## `geom_line(aes(y = predict(model_fit)))`

Manchmal ist das Modell zu komplex, dass wir die mathematische Funktion einfach aufschreiben könnten. In dem Fall hilft die Funktion `geom_line()` die wir dann die vorhergesagten y-Werte mit der Funktion `predict()` aus dem Modell übergeben. Das funktioniert auch sehr gut.

```{r}
#| message: false
#| echo: true
#| warning: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade mit den vorhergesagten Werten aus dem Modell. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-model-line-03

ggplot(modell_line_tbl, aes(x, y)) +
  theme_minimal() +
  geom_point() +
  geom_line(aes(y = predict(model_fit)), 
                color = "#CC79A7")
```

## `geom_smooth()`

Abschließend können wir auch einfach so eine Gerade durch die Punkte legen indem wir die Funktion `geom_smooth()` als eine Art der Glättung nutzen. Aber hier muss ich sagen, dass uns dann die Geradengleichung fehlt. So mal zum gucken ist das wunderbar. Du kannst über die Option `formula` auch eine Funktion übergeben. Darüber hinaus erhalten wir dann noch einen Fehlerbalken des Standardfehlers, was in manchen Fällen nützlich ist. Wenn du die Geradengleichung brauchst, dann schaue einmal in dem Paket `{ggpmisc}` rein.

```{r}
#| message: false
#| echo: true
#| warning: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade aus einer Glättung. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-model-line-04

ggplot(modell_line_tbl, aes(x, y)) +
  theme_minimal() +
  geom_point() +
  geom_smooth(method = "lm", color = "#CC79A7") +
  geom_smooth(method = "lm", formula = y ~ I(x^4), 
              color = "#0072B2")
```
:::

#### ...mit `{ggpmisc}` {.unnumbered .unlisted}

Ich möchte hier nich zu sehr in die Tiefe von `{ggpmisc}` gehen, aber das Paket verbindet im Prinzip die Funktion `geom_smooth()` mit der Wiedergabe der Informationen zu den Regressionsgleichungen. Du findest bei StackOverflow einmal eine schöne Übersicht in [Add regression line equation and R\^2 on graph](https://stackoverflow.com/questions/7549694/add-regression-line-equation-and-r2-on-graph). Wenn du mehr willst, dann schaue dir einmal die Hilfeseite von `{ggpmisc}` mit [Fitted-Model-Based Annotations](https://cran.r-project.org/web/packages/ggpmisc/vignettes/model-based-annotations.html) näher an. Es geht echt eine Menge, von dem ich hier nur einmal den Klassiker zeige. Wir wollen einmal die Regressionsgleichung plus das Bestimmtheitsmaß einzeichnen. Das geht über drei Funktionen zusammen mit der Regressionsgeraden.

```{r}
#| message: false
#| echo: true
#| warning: false
#| fig-align: center
#| fig-height: 3
#| fig-width: 7
#| fig-cap: "Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade aus einer Glättung plus die Geradengleichung und das Bestimmtheitsmaß. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-model-line-05

ggplot(modell_line_tbl, aes(x, y)) +
  theme_minimal() +
  geom_point() +
  stat_poly_line(color = "#CC79A7") +
  stat_poly_eq(use_label("eq")) +
  stat_poly_eq(label.y = 0.9) 
```
::::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-2

p1 <- ggplot(flea_model_tbl, aes(x = hatched, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x, linewidth = 1, 
              color = cb_pal[2], se = FALSE) +
  geom_richtext(aes(x = 625, y = 113, 
                    label = "f(x) = 52.07 + 1.61x<br>f'(x) = 1.61")) +
  labs(x = "Schlupfzeit in [h]", y = "Sprungweite in [cm]",
       title = "Linearer Zusammenhang") 

p2 <- ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1, 
              color = cb_pal[3], se = FALSE) +
  geom_richtext(aes(x = 15, y = 112, 
                    label = "f(x) = 47.10 + 2.62x - 0.04x²<br>f'(x) = 2.62 - 0.08x")) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") 

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

::: panel-tabset
## Linearer Zusammenhang ($y \sim x$)

```{r}
model_ln <- lm(jump_length ~ weight,
               data = flea_model_tbl)
tidy(model_ln)
```

$$
\begin{aligned}
\operatorname{E}[y \mid x] &= \beta_0 + \beta_1 x \\[4pt]
\frac{\partial \operatorname{E}[y \mid x]}{\partial x} &= \beta_1
\end{aligned}
$$

$$
\begin{aligned}
\operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}] &= 52.10 + 1.61 \times \text{Gewicht} \\[6pt]
\frac{\partial \operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}]}{\partial\ \text{Gewicht}} &= 1.61
\end{aligned}
$$

## Quadratischer Zusammenhang ($y \sim x + x^2$)

[R Paket `{polypoly}`](https://cran.r-project.org/web/packages/polypoly/vignettes/overview.html)

[Polynomial Regression - An example](https://www.geo.fu-berlin.de/en/v/soga-r/Basics-of-statistics/Linear-Regression/Polynomial-Regression/Polynomial-Regression---An-example/index.html)

[Fitting Polynomial Regression in R](https://datascienceplus.com/fitting-polynomial-regression-r/)

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

$$
\begin{aligned}
\operatorname{E}[y \mid x] &= \beta_0 + \beta_1 x + \beta_2 x^2 \\[4pt]
\frac{\partial \operatorname{E}[y \mid x]}{\partial x} &= \beta_1 + 2 \beta_2 x
\end{aligned}
$$

$$
\begin{aligned}
\operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}] &= 47.10 + (2.62 \times \text{Gewicht}) + (−0.04 \times \text{Gewicht}^2) \\[6pt]
\frac{\partial \operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}]}{\partial\ \text{Gewicht}} &= 2.62 + (2\times −0.04 \times \text{Gewicht})
\end{aligned}
$$
:::

```{r}
jump_weight_slope <- function(x) 2.62 + (2 *-0.04 * x)
jump_weight_slope(c(5, 10, 15))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. . *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-3

tangents <- model_sq |> 
  augment(newdata = tibble(weight = c(5, 15, 25))) |> 
  mutate(slope = jump_weight_slope(weight),
         intercept = find_intercept(weight, .fitted, slope)) |> 
  mutate(nice_label = glue("Gewicht: {weight}<br>",
                           "Fitted Gewicht: {nice_number(.fitted)}<br>",
                           "Steigung: **{nice_number(slope)}**"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_abline(data = tangents, aes(slope = slope, intercept = intercept), 
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  geom_point(data = tangents, aes(x = weight, y = .fitted), 
             size = 4, shape = 18, color = cb_pal[9]) +
  geom_richtext(data = tangents,
                aes(x = weight, y = .fitted, label = nice_label), nudge_y = -7) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]") 

```

::: panel-tabset
## `{marginaleffects}`

```{r}
#| message: false
#| warning: false
model_sq |> 
  slopes(newdata = datagrid(weight = c(5, 15, 25)))
```

## `{emmeans}`

```{r}
#| message: false
#| warning: false
model_sq |> 
  emtrends(~ weight, var = "weight",
           at = list(weight = c(5, 15, 25))) |> 
  test()
```
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. . *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-4

plot_slopes(model_sq, 
            variables = "weight", 
            condition = "weight") +
  labs(x = "Civil liberties", y = "Marginal effect of civil liberties on public sector corruption",
       subtitle = "Created automatically with marginaleffects::plot_slopes()") +
  theme_marginal()
```

## Philosophien zur Mittelwertbildung

### Average marginal effects (AME)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-ame-trans.png){#fig-utest-intro-03 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-5

tangents <- model_sq |> 
  augment(newdata = tibble(weight = c(1:27))) |> 
  mutate(slope = jump_weight_slope(weight),
         intercept = find_intercept(weight, .fitted, slope)) |> 
  mutate(nice_label = glue("Gewicht: {weight}<br>",
                           "Fitted Gewicht: {nice_number(.fitted)}<br>",
                           "Steigung: **{nice_number(slope)}**"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  geom_abline(data = tangents, aes(slope = slope, intercept = intercept), 
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_point(data = tangents, aes(x = weight, y = .fitted), 
             size = 4, shape = 18, color = cb_pal[9]) +
  geom_richtext(aes(x = 15, y = 88, label = "Gemittelte Steigung: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Average marginal effects (AME)") 
```

```{r}
mfx_sq <- slopes(model_sq)
head(mfx_sq)
```

```{r}
mfx_sq |> 
  group_by(term) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
avg_slopes(model_sq)
```

### Marginal effects at the mean (MEM)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mem-trans.png){#fig-utest-intro-06 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-6

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_abline(intercept = find_intercept(9.95375, 69.24257, 1.83), slope = 1.83,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  annotate("point", x = 9.95375, y = 69.24, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 10, y = 75, label = "Steigung am Mittelwert: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Marginal effects at the mean (MEM)") 
```

```{r}
avg_jump_weight <- mean(flea_model_tbl$weight)
avg_jump_weight
```

```{r}
jump_weight_fitted <- model_sq |> 
  augment(newdata = tibble(weight = c(avg_jump_weight, avg_jump_weight + 0.001)))
jump_weight_fitted
```

```{r}
model_sq |> 
  emtrends(~ weight, var = "weight")
```

```{r}
model_sq |> 
  avg_slopes(newdata = "mean")
```

### Gruppierte marginale Effekte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-game-trans.png){#fig-utest-intro-05 fig-align="center" width="100%"}

Hier ist die Anordugn wichtig. Erst kommt die gruppierende Variable, dann der Rest.

```{r}
model_grp_sq <- lm(jump_length ~ stage * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-7

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

::: panel-tabset
## Schritt-für-Schritt

```{r}
mfx_grp_sq <- model_grp_sq |> 
  slopes(variables = "weight")
head(mfx_grp_sq)
```

```{r}
mfx_grp_sq |> 
  group_by(stage) |> 
  summarize(stage_ame = mean(estimate))
```

## `slopes()`

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         by = "stage")
```
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-8

weight_sum <- flea_model_tbl |> 
  group_by(stage) |> 
  summarise(mean(weight))

pred <- predict(model_grp_sq, newdata = tibble(weight = 14.05, stage = "adult"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_abline(intercept = find_intercept(14.05, 75.6691, 0.438), slope = 0.438,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  geom_abline(intercept = find_intercept(5.85, 58.59134, 0.807), slope = 0.807,
              linewidth = 0.5, color = cb_pal[7], linetype = "21") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25,
            fullrange = TRUE) +
  annotate("point", x = 14.05, y = 75.6691, size = 4, shape = 18, 
           color = cb_pal[9]) +
  annotate("point", x = 5.85, y = 58.59134, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 14.05, y = 81, label = "Steigung adult: 0.44"),
                site = 20, color = "black") +
  geom_richtext(aes(x = 5.85, y = 64.5, label = "Steigung juvenile: 0.81"),
                site = 20, color = "black") +
  scale_color_okabeito()
```

### Repräsentative Werte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mer-trans.png){#fig-utest-intro-07 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ feeding * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-9

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = feeding)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

```{r}
datagrid(model = model_grp_sq,
         weight = c(5, 10, 15),
         feeding = unique)
```

::: panel-tabset
## Ohne Gruppenvergleich

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5, 10, 15),
                            feeding = unique))
```

## Mit Gruppenvergleich

```{r}
comp_tbl <- as.data.frame(t(combn(levels(flea_model_tbl$feeding), 2))) |> 
    unite("z", sep = " - ")
```

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5),
                            feeding = unique))
```

```{r}
#| eval: false
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5),
                            feeding = unique),
         hypothesis = "pairwise")  |> 
  mutate(term = pluck(comp_tbl, "z"))
```
:::

```{r}
model_grp_sq |> 
  emtrends(~ weight + feeding, 
           var = "weight",
           at = list(weight = c(5, 10, 15),
                     feeding = c("sugar_water", "ketchup", "blood")),
           regrid = "response") 
```

### Kontrafaktische Vergleiche

Kontrafaktische Vergleiche (eng. *counterfactual*)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-counterfactual-trans.png){#fig-utest-intro-04 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ weight*I(weight^2)*feeding + count_leg,
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
cfct_data <- datagrid(model = model_grp_sq,
                      weight = c(5, 15),
                      grid_type = "counterfactual")
```

```{r}
nrow(flea_model_tbl)
nrow(cfct_data)
```

```{r}
mfx_cfct <- model_grp_sq |> 
  slopes(datagrid(weight = c(5, 15),
                  grid_type = "counterfactual"),
         variables = "weight")

rbind(head(mfx_cfct), tail(mfx_cfct))
```

```{r}
mfx_cfct |> 
  group_by(weight) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
model_grp_sq |> 
  avg_slopes(newdata = datagrid(weight = c(5, 20),
                                grid_type = "counterfactual"),
             variables = "weight",
             by = c("weight", "feeding"))
```

## Analyse von Zeitreihen

Hier nochmal `{mgcv}` und `{gamm4}`

[Introduction to Generalized Additive Mixed Models](https://r.qcbs.ca/workshop08/book-en/introduction-to-generalized-additive-mixed-models-gamms.html)

`s()` und Interaktion mit `s(x_1, by = f_1)`

## Links

-   [Mixed](https://stats.stackexchange.com/questions/95054/how-to-get-an-overall-p-value-and-effect-size-for-a-categorical-factor-in-a-mi)
-   [Mixed II](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html)
-   [Marginal and conditional effects for GLMMs with {marginaleffects} \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2022/11/29/conditional-marginal-marginaleffects/)
-   [R Paket `{gapminder}`](https://github.com/jennybc/gapminder)
-   [Gapminder](https://www.gapminder.org/data/)
-   [Lists are my secret weapon for reporting stats with knitr - Higher Order Functions](https://tjmahr.github.io/lists-knitr-secret-weapon/)
-   [Visualizing {dplyr}’s mutate(), summarize(), group_by(), and ungroup() with animations \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2024/04/04/group_by-summarize-ungroup-animations/)

## Referenzen {.unnumbered}
