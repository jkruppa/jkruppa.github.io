```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, glue, ggtext,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
theme_marginal <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (seit 07.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zum Beginn des WiSe 2025/26 eine neue Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll.
:::

::: {.callout-caution appearance="minimal"}
## Dieses Kapitel ist archiviert

![](images/archive.png){fig-align="center" width="100%"}

Ich benötige die Thematik aktuell nicht in meiner Lehre oder der statistischen Beratung. Mir ist es als Nachschlagewerk aber immer noch wichtig zu behalten. Archivierte Kapitel werden nicht von mir weiter gepflegt oder ergänzt. Auftretende Fehler werden aber natürlich beseitigt, wenn die Fehler mir auffallen oder gemeldet werden.
:::

```{mermaid}
%%| label: fig-mermaid-marginal-01
%%| fig-width: 10
%%| fig-cap: "Arbeitsablauf für die Verwendung der `b*`-Schreibweise in den statistischen Tests in den Funktion von `{marginaleffects}`. Die Modellierung gibt die Sortierung der zu testenden Koeffizienten `b*` vor nach der dann die folgenden Funktionen Vergleiche rechnen."
flowchart TD
    C[("**Modell**
    Anpassen des Modells mit entsprechender Funktion")]:::factor --> 
    E("**summary( )** 
    Bestimmung der Ordnung der Koeffizienten im Modell"):::function --> 
    G("**hypotheses( )**
    Vergleiche mit b*-Schreibweise rechnen"):::function
    classDef factor fill:#56B4E9,stroke:#333,stroke-width:0.75px
    classDef function fill:#F5C710,stroke:#333,stroke-width:0.75px
```

-   `rnorm()`: Erzeugt Zufallszahlen aus einer [Normalverteilung](https://en.wikipedia.org/wiki/Normal_distribution).
-   `runif()`: Erzeugt Zufallszahlen aus einer [Gleichverteilung](https://en.wikipedia.org/wiki/Continuous_uniform_distribution).
-   `rbinom()`: Generiert Zufallszahlen aus einer [Binomialverteilung](https://en.wikipedia.org/wiki/Binomial_distribution).
-   `rpois()`: Erzeugt Zufallszahlen aus einer [Poisson-Verteilung](https://en.wikipedia.org/wiki/Poisson_distribution).
-   `rgamma()`: Generiert Zufallszahlen aus einer [Gamma-Verteilung](https://en.wikipedia.org/wiki/Gamma_distribution).
-   `rexp()`: Erzeugt Zufallszahlen aus einer [Exponentialverteilung](https://en.wikipedia.org/wiki/Exponential_distribution).
-   `rt()`: Generiert Zufallszahlen aus einer [Student's t-Verteilung](https://en.wikipedia.org/wiki/Student%27s_t-distribution).
-   `rchisq()`: Erzeugt Zufallszahlen aus einer [Chi-Quadrat-Verteilung](https://en.wikipedia.org/wiki/Chi-squared_distribution).
-   `rbeta()`: Erzeugt Zufallszahlen aus einer [Beta-Verteilung](https://en.wikipedia.org/wiki/Beta_distribution).
-   `rf()`: Erzeugt Zufallszahlen aus einer [F-Verteilung](https://en.wikipedia.org/wiki/F-distribution).
-   `rlogis()`: Erzeugt Zufallszahlen aus einer [logistischen Verteilung](https://en.wikipedia.org/wiki/Logistic_distribution).
-   `rweibull()`: Erzeugt Zufallszahlen aus einer [Weibull-Verteilung](https://en.wikipedia.org/wiki/Weibull_distribution).

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-weibull

ggplot() +
  theme_marginal() +
  geom_vline(xintercept = c(0)) + 
  geom_hline(yintercept = c(0)) + 
  stat_function(fun = dweibull, linewidth = 1, args = list(scale = 1, shape = 1.5), 
                xlim = c(0, 8.25), aes(color = "1"), show.legend = FALSE) +
  stat_function(fun = dweibull, geom = "area", args = list(scale = 1, shape = 1.5), 
                alpha = 0.25, xlim = c(0, 8.25), aes(fill = "1")) +
  ylim(0, 2.5) + xlim(0, 3) +
  scale_color_okabeito() +
  scale_fill_okabeito()

```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-beta

df <- tibble(dist = c("a", "b", "c"), beta1 = c(1,3,5), beta2 = c(3,3,3))

df |> 
  group_by(dist) |> 
  reframe(x = seq(0, 1, 0.01), y = dbeta(x, beta1, beta2)) |> 
  ggplot(aes(x, y, color = dist)) +
  theme_marginal() +
  geom_line() +
  scale_color_okabeito(labels = c(expression(beta[1]*","~beta[2]), expression(beta[1]),expression(beta[1])))
```

!["foo" Quelle: https://easystats.github.io/modelbased](images/allregressions.png){#fig-all-regression fig-align="center" width="100%"}

1.  Draw what you want to visualize
2.  Make models for it
3.  Select the best model
4.  Visualize the best model
5.  Investigate its parameters

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,
               ggpmisc, readxl, conflicted)
conflicts_prefer(dplyr::mutate)
conflicts_prefer(dplyr::summarize)
conflicts_prefer(dplyr::filter)
conflicts_prefer(ggplot2::annotate)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
## 
nice_number <- label_number(style_negative = "minus", accuracy = 0.01)
nice_p <- label_pvalue(prefix = c("p < ", "p = ", "p > "))
find_intercept <- function(x1, y1, slope) {
  intercept <- slope * (-x1) + y1
  return(intercept)
}
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_model_tbl <- read_excel("data/fleas_model_data.xlsx") |> 
  mutate(feeding = as_factor(feeding),
         stage = as_factor(stage),
         bonitur = as.numeric(bonitur),
         infected = factor(infected, labels = c("healthy", "infected"))) |> 
  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)
```

## Prädiktion

```{r}
simple_2_tbl <- flea_model_tbl |> 
  filter(stage == "adult")
simple_2_fit <- lm(jump_length ~ weight*feeding, simple_2_tbl)
coef(simple_2_fit)
```

```{r}
#| eval: true
simple_2_fit |> broom::augment()
predictions(simple_2_fit)
predictions(simple_2_fit, by = "feeding")

tibble(weight = simple_2_tbl$weight,
       jump_length = simple_2_tbl$jump_length, 
       feeding = simple_2_tbl$feeding,
       estimate = predictions(simple_2_fit)$estimate) |> 
  ggplot(aes(weight, estimate, shape = feeding)) +
  geom_point(aes(weight, jump_length), color = "blue") +
  geom_point(color = "red") +
  geom_line(aes(y = predict(simple_2_fit))) +
  geom_hline(yintercept = avg_predictions(simple_2_fit, by = "feeding")$estimate)

```

## Weitere R Pakete

Das [R Paket `{modelbased}`](https://easystats.github.io/modelbased/)

## Analyse von Zeitreihen

Hier nochmal `{mgcv}` und `{gamm4}`

[Introduction to Generalized Additive Mixed Models](https://r.qcbs.ca/workshop08/book-en/introduction-to-generalized-additive-mixed-models-gamms.html)

`s()` und Interaktion mit `s(x_1, by = f_1)`

## Links

-   [Mixed](https://stats.stackexchange.com/questions/95054/how-to-get-an-overall-p-value-and-effect-size-for-a-categorical-factor-in-a-mi)
-   [Mixed II](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html)
-   [Marginal and conditional effects for GLMMs with {marginaleffects} \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2022/11/29/conditional-marginal-marginaleffects/)
-   [R Paket `{gapminder}`](https://github.com/jennybc/gapminder)
-   [Gapminder](https://www.gapminder.org/data/)
-   [Lists are my secret weapon for reporting stats with knitr - Higher Order Functions](https://tjmahr.github.io/lists-knitr-secret-weapon/)
-   [Visualizing {dplyr}’s mutate(), summarize(), group_by(), and ungroup() with animations \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2024/04/04/group_by-summarize-ungroup-animations/)

## Referenzen {.unnumbered}
