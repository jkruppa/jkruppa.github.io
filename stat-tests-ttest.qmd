```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Der t-Test {#sec-ttest}

::: callout-tip
## Einführung in den t-Test per Video

Du findest auf YouTube [Der Two Sample t-Test erklärt](https://youtu.be/iECcenEDzOM) als Video Reihe. Ich werde zwar alles nochmal hier als Text aufschreiben, aber manchmal ist das Sehen und Hören dann einfacher.
:::

::: {.callout-caution collapse="true"}
## Ein Wort zur Klausur

Wir nutzen folgende Formel in der Klausur für einen Zweistichproben t-Test:

$$
T_{calc} = \cfrac{\bar{y}_1-\bar{y}_2}{s_{pooled} \cdot \sqrt{\cfrac{2}{n_{group}}}}
$$

Wir nutzen folgende Formel in der Klausur für einen gepaarten t-Test:

$$
T_{calc} = \sqrt{n}\cfrac{\bar{d}}{s_d}
$$

Wenn nicht anders in der Klausuraufgabe angegeben dann ist $T_{\alpha = 5\%} = 1.96$ oder $\alpha = 5\%$.
:::

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, broom, readxl)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten für den t-Tests

Der t-Test ist *der* bedeutende Test, wenn es um das Verständnis der Algorithmen und Konzepte in der Statistik geht. Wir haben den t-test schon genutzt um die Idee des statistischen Testens zu verstehen und wir werdend den t-Test auch im statistischen Modellieren wiedertreffen.

Was macht also der t-Test? Der t-Test vergleicht die Mitfellwerte zweier Gruppen miteinander. Das heißt wir haben zwei Gruppen, wie Hunde und Katzen, und wollen nun wissen wie sich die Sprungweiten der Hundeflöhe im Mittel von den Katzenflöhen unterscheiden.

::: callout-note
## Was macht der t-Test?

Der t-test vergleicht zwei Mittelwerte gewichtet bei der Standardabweichung und der Fallzahl miteinander. Etwas statistisch genauer vergleicht der t-Test die Parameter zweier Normalverteilungen miteinander.
:::

Wichtig ist, dass wir schon jetzt die Modellschreibweise lernen. Wir werden die Modelschreibweise immer wieder sehen und diese Art eine Abhängigkeit zu beschreiben ist sehr wichtig in den folgenden Kapiteln.

![Modellschreibweise $y$ hängt ab von $x$. Das $y$ repräsentiert eine Spalte im Datensatz und das $x$ repräsentiert ebenso eine Spalte im Datensatz. Wir brauchen also zwei Variablen $y$ und $x$, die natürlich nicht so heißen müssen.](images/statistical_modeling_0.png){#fig-ttest-0 fig-align="center" width="30%"}

[Etwas unbefriedigend, dass der t-Test nur **zwei** Gruppen miteinander Vergleichen kann. Mehr Gruppen gehen in der ANOVA im @sec-anova]{.aside}

Was brauchen wir dafür in R? Wir brauchen dafür eine Spalte $y$ mit kontinuierlichen Zahlen und einer Spalte $x$ in dem wir einen Faktor mit zwei Leveln finden. Jedes Level steht dann für eine der beiden Gruppen. Das war es schon. Schauen wir uns nochmal den Datensatz `flea_dog_cat.xlsx` in @tbl-data-ttest an und überlegen, wie wir das realisieren können.

```{r}
#| echo: false
#| message: false
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Boniturnote sowie der Infektionsstatus von Hunden und Katzen.
#| label: tbl-data-ttest

data_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal))

data_tbl %>% kable(align = "c", "pipe")
```

In @fig-ttest-1 sehen wir einmal den Zusammenhang zwischen den Schreibweise $y \sim x$ und den beiden Variablen `jump_length` als $y$ und `animal` als $x$ aus dem Datensatz `flea_dog_cat.xlsx`. Wir haben also die `formula` Schreibweise in R als `jump_length ~ animal`.

![Modellschreibweise bzw. `formula` Schreibweise in R von $y$ hängt ab von $x$ am Beispiel des Datensatzes `flea_dog_cat.xlsx` mit den beiden Variablen `jump_length` als $y$ und `animal` als $x$.](images/statistical_modeling_1.png){#fig-ttest-1 fig-align="center" width="80%"}

::: column-margin
[Zentraler Grenzwertsatz](https://de.wikipedia.org/wiki/Zentraler_Grenzwertsatz)
:::

Wir benötigen für den t-Test ein normalverteiltes $y$ und einen Faktor mit zwei Leveln als $x$. Wir nehmen daher mit `select()`die Spalte `jump_length` und `animal` aus dem Datensatz `flea_dog_cat.xlsx`. Wichtig ist, dass wir die Spalte `animal` mit der Funktion `as_factor()` in einen Faktor umwandeln. Anschließend speichern wir die Auswahl in dem Objekt `data_tbl`.

```{r}
data_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal)) %>% 
  select(animal, jump_length)

data_tbl
```

Wir haben jetzt die Daten richtig vorbereiten und können uns nun mit dem t-Test beschäftigen. Bevor wir den t-Test jedoch rechnen können, müssen wir uns nochmal überlegen, was der t-Test eigentlich testet und uns die Daten einmal visualisieren.

## Visualiserung der Daten

Bevor wir einen statistischen Test rechnen, wollen wir uns erstmal die Daten, die dem Test zugrundeliegen, visualisieren. Wir schauen uns in @fig-boxplot-ttest einmal den Boxplot für die Sprungweiten getrennt nach Hund und Katze an.

Wir sehen, dass sich die Boxen nicht überschneiden, ein Indiz für einen signifikanten Unterschied zwischen den beiden Gruppen. Im Weiteren liegt der Median in etwa in der Mitte der beiden Boxen. Die Whisker sind ungefähr gleich bei Hunden und Katzen. Ebenso sehen wir bei beiden Gruppen keine Ausreißer.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: Boxplot der Sprungweiten [cm] von Hunden und Katzen.
#| label: fig-boxplot-ttest

ggplot(data_tbl, aes(x = animal, y = jump_length, 
                     fill = animal)) +
  geom_boxplot() +
  labs(x = "Tierart", y = "Sprungweite [cm]") +
  theme_bw() +
  theme(legend.position = "none") 

```

Manchaml ist es etwas verwirrend, dass wir uns in einem Boxplot mit Median und IQR die Daten für einen t-Test anschauen. Immerhin rechnet ja ein t-Test mit den Mittelwerten und der Standardabweichung. Hier vergleichen wir etwas Äpfel mit Birnen. Deshalb in der @fig-dotplot-ttest der Dotplot mit dem Mittelwert und den entsprechender Standardabweichung als Fehlerbalken.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: Dotplot der Sprungweiten [cm] von Hunden und Katzen zusammen mit dem Mittelwert und der Stanardabweichung als Fehlerbalken.
#| label: fig-dotplot-ttest


ggplot(data_tbl, aes(x = animal, y = jump_length, 
                     fill = animal)) + 
  geom_dotplot(binaxis = 'y', stackdir = 'center') + 
  stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), 
               geom = "errorbar", color = "black", width = 0.1) +
  stat_summary(fun = "mean", geom="point", color="black", size = 5) +
  labs(x = "Tierart", y = "Sprungweite [cm]") +
  theme_bw() +
  theme(legend.position = "none") +
  scale_x_discrete(labels = c("Hund", "Katze")) 


```

Das ist das Beispiel

## Hypothesenpaar

Ohne eine Hypothese ist das Ergebnis eines statistischen Tests wie auch der t-Test nicht zu interpretieren. Wir berechenen eine Teststatistik und einen p-Wert. Beide statistischen Maßzahlen machen eine Aussage über die beobachteten Daten $D$ unter der Annahme, das die Nullhypothese $H_0$ gilt.

Wie lautet nun das Hypothesenpaar des t-Tests? Der t-Test vergleicht die Mittelwerte von zwei Gruppen. Die Nullhypothese ist auch die Gleichheitshypothese. Die Alternativehypothese haben wir auch als Unterschiedshypothese bezeichnet.

Daher ergibt sich für unser Beispiel mit den Sprungweiten für Hunde- und Katzenflöhen folgende Hypothesen. Die Nullhypothese sagt, dass die mittleren Sprungweite für die Hundeflöhe gleich der mittleren Sprungweite der Katzenflöhe ist.

```{=tex}
\begin{align*} 
H_0: \bar{y}_{dog} &= \bar{y}_{cat} \\  
H_A: \bar{y}_{dog} &\neq \bar{y}_{cat} \\   
\end{align*}
```
## Student t-Test

```{r}
sum_tbl <- data_tbl %>% 
  group_by(animal) %>% 
  summarise(mean = round(mean(jump_length), 2), 
            sd = round(sd(jump_length), 2)) 

sd_pool <- (sum_tbl$sd[1] + sum_tbl$sd[2])/2
t_student <- round((sum_tbl$mean[1] - sum_tbl$mean[2])/(sd_pool * sqrt(2/7)), 2)
```

$$
T_{calc} = \cfrac{\bar{y}_1-\bar{y}_2}{s_{pooled} \cdot \sqrt{\cfrac{2}{n_{group}}}}
$$

Foo

::: column-margin
![](images/angel_01.png){fig-align="center" width="50%"}

Eigentlich wäre hier folgende Formel richtig...

$$
s_{pooled} = \sqrt{\frac{1}{2} (s^2_{y_1} + s^2_{y_2})}
$$ ...aber auch hier erwischen wir einen Statistikengel um es etwas einfacher zu machen.
:::

$$
s_{pooled} = \cfrac{s_{y_1} + s_{y_2}}{2}
$$

$$
s_{pooled} = \cfrac{`r sum_tbl$sd[1]` + `r sum_tbl$sd[2]`}{2} = `r sd_pool`
$$

$$
T_{calc} = \cfrac{`r sum_tbl$mean[1]`- `r sum_tbl$mean[2]`}{`r sd_pool` \cdot \sqrt{\cfrac{2}{7}}} = `r t_student`
$$

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, var.equal = TRUE)
```

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, var.equal = TRUE) %>% 
  tidy() 
```

## Welch t-Test

$$
T_{calc} = \cfrac{\bar{y_1} - \bar{y_2}}{\sqrt{\cfrac{s^2_{y_1}}{n} + \cfrac{s^2_{y_2}}{m}}}
$$

Hier muss man noch bedenken, dass die Freiheitsgrade anders berechnte werden Die Freiheitsgrade werden mit[^stat-tests-ttest-1]

[^stat-tests-ttest-1]: $$df = \cfrac{\left(\cfrac{s^2_{y_1}}{n} +
    \cfrac{s^2_{y_2}}{m}\right)^2}{\cfrac{\left(\cfrac{s^2_{y_1}}{n}\right)^2}{n-1} + \cfrac{\left(\cfrac{s^2_{y_2}}{m}\right)^2}{m-1}}$$

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, var.equal = FALSE)
```

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, var.equal = FALSE) %>% 
  tidy() 
```

## Verbundener t-Test (Paired t-Test)

$$
T_{calc} = \sqrt{n}\cfrac{\bar{d}}{s_d}
$$

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, paired = TRUE)
```

```{r}
t.test(jump_length ~ animal, 
       data = data_tbl, paired = TRUE) %>% 
  tidy() 
```

## Freiheitsgrade im t-Test

![kjk](images/t-verteilung_06.png){#fig-ttest-06 fig-align="center"}

## Die Wichtigkeit des t-Tests

$$
\text{Teststatistik} = \cfrac{\text{Signal}}{\text{Noise}}
$$

## Der t-Test in der Regression

```{r}
lm(jump_length ~ animal, 
       data = data_tbl) %>% 
  tidy() 
```
