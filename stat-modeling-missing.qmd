```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Imputation fehlender Werte {#sec-missing}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

Wann brauchen wir eigentlich die Imputation (deu. *Ersetzung*) von fehlenden Werten in unseren Daten? Zum einen brauchen wir die Imputation von fehlenden Werten, wenn wir eine multiple lineare Regression rechnen wollen. Wenn wir einen fehlenden Wert in einer Spalte haben, so fällt diese Beobachtung aus dem *gesamten* Modell heraus. Das heist, dass wir Fallzahl verlieren sobald wir fehlende Werte in den Daten haben. Tritt dies in einem geplanten Experiment auf? Das kommt darauf an. Wenn du selber die Daten erhebst, dann ist es eher unwahrscheinlich, du wirst vermutlich darauf achten möglichst alle Daten zu erheben. Meistens treten fehlende Werte bei sehr großen Datensätzen auf, die aus externen Quellen kommen. Werden diese Daten dann kombiniert, sieht die Fallzahl beeindruckend aus, aber wenn die Beobachtungen mit mindestens einem fehlenden Wert gelöscht werden, sind die Fallzahlen wieder ganz klein.

[Wir imputieren nur $x$ Werte und niemals das Outcome $y$. Im Zweifel musst du schauen, dass du dir über `select()` die einzelnen Datensätze zusammenbaust, die du imputieren willst.]{.aside}

Zum anderen imputieren wir auch Datensätze, die wir später im Rahmen des maschinellen Lernen im @sec-class-basic benutzen wollen. Auch hier dürfen keine fehlenden Werte in den Daten auftreten. Da dies aber bei sehr großen Datensätzen, die zum Beispiel automatisch erstellt wurden, schnell passieren kann, brauchen wir eine Möglichkeit die fehlenden Werte zu ersetzen. Da wir eigentlich gar nicht an dem Modell an sich interesiert sind, sondern nur an der guten Vorhersage durch das Modell können wir hier auch Daten imputieren. Auch hier haben wir natürlich wieder eine große Anzahl an möglichen Verfahren. Ich werde hier die häufigsten Vorstellen und darüber diskutieren welche am besten passen würden. Wir immer kommt es auf den Kontext der Fragestellung an. Willst du eher ein exploratives Modell rechnen, dann kommt die Imputation von fehlenden Werten eher nicht für dich in Frage. Wenn du maschinelle Lernverfahren nutzt um Modelle zur Vorhersage zu bauen, dann ist die Imputation von fehlenden Werten eher nützlich für dich.

## Was sind fehlende Werte?

Wir beschränken uns hier auf drei Arten von fehlenden Daten. Es gibt noch mehr Abstufungen, aber für den Einstieg reicht es, wenn wir nach drei Typen von fehlenden Daten unterscheiden. Die anderen Typen sind Mischtypen bzw. nicht so von Belang für die Anwendung.

-   **MCAR** (eng. *missing completely at random*): völlig zufällig fehlende Daten. Dies ist das wünschenswerte Szenario im Falle fehlender Daten. Fehlende Werte werden als *missing completely at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes weder von erfassten noch unerfassten Merkmalen abhängt. Daher kann man sagen, dass MCAR-Werte die Fallzahl reduzieren, aber das Studienergebnis nicht verzerren.
-   **MAR** (eng. *missing at random*): Fehlende Werte werden als *missing at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von einem anderen Merkmal abhängt aber nicht von der Ausprägung des fehlenden Merkmals selbst. MAR-Werte reduzieren die Fallzahl und verzerren möglicherweise das Studienergebnis.
-   **MNAR** (eng. *missing not at random*): nicht zufällig fehlende Daten. Fehlende, nicht zufällige Daten sind ein schwerwiegenderes Problem, und in diesem Fall kann es ratsam sein, den Datenerhebungsprozess weiter zu überprüfen und zu versuchen zu verstehen, warum die Informationen fehlen. Wenn zum Beispiel die meisten Teilnehmer einer Umfrage eine bestimmte Frage nicht beantwortet haben, warum haben sie das getan? War die Frage unklar? Daher werden fehlende Werte als *missing not at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von der Ausprägung des fehlenden Merkmals selbst abhängt. MNAR-Werte reduzieren die Fallzahl und verzerren das Studienergebnis. MNAR sind *Non-ignorable missings* und müssen auch berichtet werden.

Wie schon angemerkt. Die Struktur der fehlenden Werte lässt sich meist schwer vorhersagen bzw. bestimmen. Wir müssen eine Annahme treffen und diese dann auch in unseren statistischen Berichte oder Abschlussarbeit niederschreiben. Es gibt dann häufig auch Mischformen: MCAR, MAR, MNAR können ineinander verwoben sein. Häufig *glauben* wir daran, dass unsere Daten der MCAR genügen. Unter der Annahme, dass es sich bei den Daten um MCAR handelt, können auch zu viele fehlende Daten ein Problem darstellen. In der Regel liegt die sichere Obergrenze bei großen Datensätzen bei 5 % der Gesamtmenge. Wenn die fehlenden Daten für ein bestimmtes Merkmal oder eine Stichprobe mehr als 5 % betragen, sollten Sie dieses Merkmal oder diese Stichprobe wahrscheinlich weglassen. Wir prüfen daher im folgenden Abschnitten, ob in den Merkmalen (Spalten) und Stichproben (Zeilen) mehr als 5 % der Daten fehlen. Auch hier gibt es dann Möglichkeiten erstmal die Daten zu visualiseren und dann zu schauen, welches Verfahren zur Imputation geeignet ist.

## Univariat vs. multivariate Imputation

Was soll jetzt an dieser Stelle *univariat* und *multivariat* bedeuten? Wir haben uns die beiden Begriffe aufgehoben und nutzen diese Begriffe hier in dem Kontext der Imputation. Wir sprechen von einer *univariaten* Imputation, wenn wir nur *eine* Variable $x$ imputieren. Das heist, wir ignorieren die Zusammehänge der Variable $x$ zu irgendwelchen anderen Variablen in dem Datensatz. Das macht zum Beispiel für die Körpergröße in unserem Gummibärchendatensatz nicht so viel Sinn, denn wir haben ja Frauen und Männer befragt. Wir müssen die Körpergröße *getrennt* für die Variable Geschlecht imputieren. Wenn wir also Variablen mit Bezug zu anderen Variablen imputieren, dann nennen wir diese Verfahren *multivariate* Imputationsverfahren. In den folgenden Abschnitten werde ich einnmal die gängisten univariaten Verfahren vorstellen und zwei sehr gut funktionierende multivariate Verfahren.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, see, readxl,
               mice, naniar, missForest, missRanger,
               dlookr)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

In diesem Kapitel nutzen wir zwei Datensätze. Zum einen den echten Datensatz mit den Gummibärchen aus dem @sec-example-gummibears und dem Datensatz zu dem Infketionsstatus von Ferkeln aus dem @sec-example-pigs. Der Ferkeldatzensatz hat keine fehlenden Werte und deshlab müssen wir da noch einmal nachhelfen und künstlich fehlende Werte erschaffen. Schauen wir uns nochmal den Gummibärchendatensatz an und wählen nur die Spalten `gender`, `age`, `height`, `semester`, `count_bears`, `count_color` und `most_liked`. Die anderen Spalten haben keine fehlenden Werte bzw. wenn eine Farbe der Bärchen nicht in der Tüte vorkam, dann war keine drin. Das sind dann keine fehlenden Werte.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  %>%
  select(gender, age, height, semester, count_bears, count_color,
         most_liked) %>% 
  mutate(gender = as_factor(gender),
         most_liked = as_factor(most_liked),
         count_color = as_factor(count_color))
```

Zum anderen laden wir nochmal den Ferkeldatensatz mit unseren $n = 412$ Ferkeln.

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") 
```

Wir haben haben aber in dem Ferkeldatensatz keine fehlenden Werte vorliegen. Deshalb nutzen wir die Funktion `generateNA()` aus dem R Paket `missRanger`. Wir können in der Funktion `missRanger()` angeben wieviel fehlende Werte global in dem Datensatz erschaffen werden sollen oder aber per Spalte. Wir erschaffen die fehlenden Werte bei der Spalte, denn die zehnte Spalte ist unser Outcome `infected` und da wollen wir ja keine fehlenden Werte imputieren. Fehlende Werte in der Outcomespalte bedeutet dann ja, dass die Beobachtung aus den Daten entfernt wird. Das brauchen wir aber hier nicht. Wie du sehen kannst erschaffen wir in jeder Spalte ein unterschiedliches Verhältnis von fehlenden Daten.

```{r}
pig_miss_tbl <- pig_tbl %>% 
  generateNA(c(0.1, 0.15, 0.05, 0.3, 0.1, 0.05, 0.15, 0.01, 0.05, 0))
```

Nun haben wir zwei Datensätze vorliegen an denen wir einmal schauen können, wie wir fehlende Daten imputieren können.

## Visualisierung von fehlenden Werten

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-gummi-miss
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "Histogramme der Anzahl an Gummibärchen und die Anzahl an Farben in einer Tüte. Es gibt nicht mehr als sechs Farben."
#| fig-subcap: 
#|   - "Anzahl an Bärchen"
#|   - "Anzahl an Farben"
#|   - "Anzahl an Bärchen"
#| layout-nrow: 2
#| column: page

vis_miss(gummi_tbl)

gg_miss_upset(gummi_tbl)

plot_na_pareto(gummi_tbl)

```

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-pig-miss
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "Histogramme der Anzahl an Gummibärchen und die Anzahl an Farben in einer Tüte. Es gibt nicht mehr als sechs Farben."
#| fig-subcap: 
#|   - "Anzahl an Bärchen"
#|   - "Anzahl an Farben"
#|   - "Anzahl an Bärchen"
#| layout-nrow: 2
#| column: page

vis_miss(pig_miss_tbl)

gg_miss_upset(pig_miss_tbl)

plot_na_pareto(pig_miss_tbl)

```

## Univariate Imputation

::: column-margin
Das [R Paket `dlookr`](https://yuzar-blog.netlify.app/posts/2021-01-30-r-package-reviews-dlookr-diagnose-explore-and-transform-your-data/) hat eine große Auswahl an simplen Imputationsalgorithmen.
:::

predictor is numerical variable.

"mean" : arithmetic mean.

"median" : median.

"mode" : mode.

predictor is categorical variable.

"mode" : mode.

"rpart" : Recursive Partitioning and Regression Trees.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-imp-median-mean
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "Histogramme der Anzahl an Gummibärchen und die Anzahl an Farben in einer Tüte. Es gibt nicht mehr als sechs Farben."
#| fig-subcap: 
#|   - "Anzahl an Bärchen"
#|   - "Anzahl an Farben"
#|   - "Anzahl an Bärchen"
#| layout-nrow: 2
#| column: page

imp_age_tbl <- gummi_tbl %>% 
  mutate(mean_age_imp = imputate_na(gummi_tbl, semester, method = "mean"),
         median_age_imp = imputate_na(gummi_tbl, semester, method = "median"))

plot(imp_age_tbl$mean_age_imp)
plot(imp_age_tbl$median_age_imp)
```

## Multivariate Imputation

### Imputation mit `mice`

```{r}
imp_method <- c(gender = "logreg", 
                age = "pmm", 
                height = "pmm", 
                semester = "pmm", 
                count_bears = "", 
                count_color = "polyreg", 
                most_liked = "polyreg")

imp_gummi_tbl <- mice(data = gummi_tbl, m = 3, maxit = 5, 
                      method = imp_method)
```

```{r}
complete(imp_gummi_tbl) %>% vis_miss()
```

```{r}
imp_all_gummi_tbl <- imp_gummi_tbl %>% 
  complete("long", include = TRUE) %>% 
  select(-.id, imp_run = .imp) 
```

```{r}
densityplot(imp_gummi_tbl)
```

```{r}
pooled_res <- imp_gummi_tbl %>%
  mice::complete("all") %>%
  map(lm, formula = height ~ age + semester + gender) %>%
  pool()
```

Was macht `pool`?

## Imputation mit `missRanger`

```{r}
gummi_imputet <- missRanger(
  gummi_tbl, 
  formula = . ~ . ,
  num.trees = 1000, 
  verbose = 0,  
  returnOOB = TRUE)

# numeric imputation
ggplot()+
  geom_point(data = gummi_imputet, aes(age, height), 
             color = "red")+
  geom_point(data = gummi_tbl, aes(age, height))+
  theme_minimal()

# caterogical imputation
ggplot()+
  geom_bar(data = gummi_tbl, aes(gender), width = 0.3)+
  geom_bar(data = gummi_imputet, aes(gender), fill = "red",
           position = position_nudge(x = 0.25), width = 0.3)+
  
  theme_minimal()

```

Wir können auch nur Teile der Daten imputieren. Wenn wir nur die Spalten `age` und `semester` imputieren wollen, dann würden wir `age + semester ~ .` schreiben. Damit würden wir die beiden Spalten Alter und Semester dann durch die Informationen in all den anderen Spalten imputieren. Wir können die beiden Spalten auch nur durch spezifische andere Spalten imputieren lassen. Im folgenden Beispiel imputieren wir die Spalten `age` und `semester` durch die Informationen in den Spalten `height` und `gender`. Es dürfen natürlich auch gleiche Spalten auf beiden Seiten der Formel stehen.

```{r}
gummi_imputet <- missRanger(
  gummi_tbl, 
  formula = age + semester ~ height + gender ,
  num.trees = 1000, 
  verbose = 0,  
  returnOOB = TRUE)
```

## Sensitivitätsanalysen

Vergleich verschiedener Imputationsmethoden Vergleich mit complete-case Analyse

https://yuzar-blog.netlify.app/posts/2021-03-04-how-to-impute-missing-values-in-r/

https://www.analyticsvidhya.com/blog/2016/03/tutorial-powerful-packages-imputing-missing-values/

http://juliejosse.com/wp-content/uploads/2018/06/DataAnalysisMissingR.html#1)*regression_with_na*(quantitative)\_for_ozone
