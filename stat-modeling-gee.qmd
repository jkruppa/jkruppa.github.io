```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Generalized Estimating Equations (GEE) {#sec-gee}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Annahmen an die Daten

Im folgenden Kapitel zu den Generalized Estimating Equations (GEE) gehen wir davon aus, dass die Daten in der vorliegenden Form *ideal* sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.

-   Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das @sec-missing zu Imputation von fehlenden Werten.
-   Wenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das @sec-outlier zu Ausreißer in den Daten.
-   Wenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das @sec-variable-selection bei der Variablenselektion.

::: column-margin
[Getting Started with Generalized Estimating Equations](https://data.library.virginia.edu/getting-started-with-generalized-estimating-equations/)

[Generalized Estimating Equations (GEE)](https://rlbarter.github.io/Practical-Statistics/2017/05/10/generalized-estimating-equations-gee/)
:::

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               parameters, performance, geepack, gee,
               geesmv, multcomp, emmeans, scales)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Eventuell das Kuhbeispiel?

Nach Schweine ID sortieren

```{r}
pig_gain_tbl <- read_excel("data/pig_feed_data.xlsx") %>% 
  mutate(weight_gain = round(weight_gain, 2)) %>% 
  arrange(pig_id)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-gee-pigs
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page


rbind(head(pig_gain_tbl, n = 3),
      rep("...", times = ncol(pig_gain_tbl)),
      tail(pig_gain_tbl, n = 3)) %>% 
  kable(align = "c", "pipe")
```

```{r}
#| message: false
#| warning: false

milk_tbl <- read_csv2("data/milk_feeding.csv") %>% 
  rename(cow_id = id_cow) %>% 
  arrange(cow_id)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-gee-milk
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page


rbind(head(milk_tbl, n = 3),
      rep("...", times = ncol(milk_tbl)),
      tail(milk_tbl, n = 3)) %>% 
  kable(align = "c", "pipe")
```

## Theoretischer Hintergrund

-   **independence**,
-   **exchangeable**,
-   **ar1**,
-   **unstructured**,

```{r}
with(pig_gain_tbl, tapply(weight_gain, list(treatment, time), mean)) %>% 
  ftable() %>% 
  round(2)
```

## Modellieren mit `gee()`

```{r}
#| message: false
#| warning: false

gee_fit <- gee(weight_gain ~ treatment + treatment * time,
               data = pig_gain_tbl, 
               id = pig_id, 
               family = gaussian,
               corstr = "exchangeable")

pluck(gee_fit, "working.correlation") %>% 
  round(3)

gee_fit %>% model_parameters()
```

## Modellieren mit `geeglm()`

```{r}
#| message: false
#| warning: false

geeglm_fit <- geeglm(weight_gain ~ treatment + treatment * time,
                     data = pig_gain_tbl, 
                     id = pig_id, 
                     family = gaussian,
                     corstr = "exchangeable")

geeglm_fit %>% model_parameters()
```

## Multipler Vergleich mit `emmeans`

```{r}
#| message: false
#| warning: false

res_gee <- geeglm_fit %>% 
  emmeans(~ treatment) 

res_gee_cld <- res_gee %>% 
  cld(adjust = "bonferroni", Letters = letters) %>% 
  tidy() %>% 
  select(treatment, estimate, conf.low, conf.high, .group) %>% 
  mutate(across(where(is.numeric), round, 2))

res_gee_cld 

```

```{r}
#| message: false
#| warning: false

res_gee_tbl <- res_gee %>% 
  contrast(method = "pairwise") %>% 
  tidy(conf.int = TRUE) %>% 
  mutate(p.value = pvalue(adj.p.value),
         across(where(is.numeric), round, 2)) %>% 
  select(contrast, estimate, p.value,
         conf.low, conf.high) 

res_gee_tbl
```

## Multipler Vergleich mit `multcomp` und `geesmv`

::: column-margin
[geesmv: Modified Variance Estimators for Generalized Estimating Equations](https://rdrr.io/cran/geesmv/man/geesmv.html)
:::

```{r}
#| message: false
#| warning: false

geeglm_fit <- geeglm(weight_gain ~ 0 + treatment + treatment * time,
                     data = pig_gain_tbl, 
                     id = pig_id, 
                     family = gaussian,
                     corstr = "exchangeable")
```

```{r}
#| message: false
#| warning: false

beta_tbl <- coef(geeglm_fit) %>% 
  enframe
```

```{r}
#| message: false
#| warning: false

gee_lz_vcov <- GEE.var.lz(weight_gain ~ 0 + treatment + treatment * time,
                          data = as.data.frame(pig_gain_tbl), 
                          id = "pig_id",
                          family = gaussian,
                          corstr = "independence") 

vbeta_tbl <- gee_lz_vcov$cov.beta %>% 
  enframe
```

```{r}
#| message: false
#| warning: false

coef_tbl <- left_join(beta_tbl, vbeta_tbl, by = "name") %>% 
  filter(str_detect(name, "time", negate = TRUE)) %>% 
  set_names(c("parameter", "beta", "vbeta"))

```

```{r}
#| message: false
#| warning: false

contrMat_n <- setNames(rep(1, length(coef_tbl$parameter)),
                       coef_tbl$parameter) %>% 
  contrMat(type = "Tukey")

contrMat_n 
```

```{r}
#| message: false
#| warning: false

mult_gee <- glht(parm(coef = coef_tbl$beta, 
                      vcov = diag(coef_tbl$vbeta)), 
                 linfct = contrMat_n)
mult_gee$df <- geeglm_fit$df.residual
```

```{r}
#| message: false
#| warning: false

mult_gee %>% 
  tidy(conf.int = TRUE) %>% 
  select(contrast, estimate, conf.low, conf.high, adj.p.value)
```
