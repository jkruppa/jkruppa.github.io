# Daten einlesen {#sec-programming-import}

*Letzte Änderung am `r format(fs::file_info("programing-import.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Experience is the name everyone gives to their mistakes." --- Oscar Wilde*

```{r}
#| warning: false
#| echo: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra,
               conflicted)
```

{{< video https://youtu.be/tdRWkBcGAzk >}}

Die Daten aus unserem Experiment müssen rein in R. Das heißt, wir haben meist unsere Daten in einer Exceldatei vorliegen und wollen diese Daten nun in R einlesen. Leider gibt es nur sehr wenig Spielraum wie die Exceldatei aussehen darf. Das führt meistens zu einem wilden Formatieren. Deshalb hier schon mal die goldenen Regeln in einer Exceldatei...

::: callout-caution
## Goldene Regel für die Exceldatei...

-   ... es gibt **keine** verbundenen Zellen. In jeder Zelle steht ein Wert.
-   ... es gibt **keine** Leerzeichen in den Spaltennamen.
-   ... es gibt **keine** Sonderzeichen wie `ä, ü, $` oder anderes.
-   ... es gibt in jeder Zeile nur eine Beobachtung
    -   *außer* wir messen eine Messung wiederholt und haben dann pro Zeitpunkt eine Spalte.
:::

Gängige Fehler beim Einlesen von Dateien in R sind folgende Probleme. Wir wollen diese Probleme nacheinander einmal durchgehen. Aber keine Sorge, das Einlesen von Daten in R ist immer am Anfang etwas frickelig.

-   das Format der Daten ist nicht richtig (@sec-format)
-   der Pfad zur Datei ist falsch (@sec-pfad)
-   in der Datei sind komische Zeichen, wie Umlaute und Co. (@sec-umlaute)
-   in der Datei sind Leerzeichen in den Spaltennamen (@sec-spalten)

Im den [beispielhafte Auswertungen](https://jkruppa.github.io/application/) findest du Beispiele für die Auswertung von Daten. Du kannst dir dort das Format anschauen und dann entsprechend deine Daten formatieren. Du findest auch alle Dateien auf GitHub unter [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV. Schau dir die Beispiele einmal an.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, janitor, plyr)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Dateiformat {#sec-format}

::: column-margin
Das Buch *Cookbook for R* stellt auch Beispiele für die Funktion `gather()` zu Verfügung für die Umwandlung von Wide zu Long-Format: [Converting data between wide and Long-Format](http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/)
:::

Wir unterschieden bei Datenformaten zwischen den Wide-Format und dem Long-Format. Meistens gibst du die Daten intuitv im Wide-Format in Excel ein. Das ist in Excel auch übersichtlicher. R und später die Funktion `ggplot()` zur Visualisierung der Daten kann aber nur mit dem Long-Format arbeiten. Wir können aber mit der Funktion `gather()` das Wide-Format in das Long-Format umwandeln.

Das Datenformat, was wir hier erarbeiten wollen, nennen wir auch *tidy* (deu. *sauber*) nach dem [R Paket `tidyr`](https://tidyr.tidyverse.org/) was dann auch später mit die Basis für unsere Analysen in R sein wird. Wenn ein Datensatz *tidy* ist, dann erfüllt er folgende Bedingungen.

1.  Jede Variable ist eine Spalte; jede Spalte ist eine Variable.
2.  Jede Beobachtung ist eine Zeile; jede Zeile ist eine Beobachtung.
3.  Jeder Wert ist eine Zelle; jede Zelle ist ein einziger Wert.

Nach diesen Regeln bauen wir dann jeden Datensatz auf, den wir in einem Experiment gemessen haben.

### Wide-Format

In @tbl-imp-cat-dog-wide sehen wir eine typische Datentabelle in einem Wide-Format. Die Spalten egeben jeweils die Tierart wieder und die Einträge in den Spalten sind die Sprungweiten in \[cm\].

| dog  | cat  |
|:----:|:----:|
| 5.2  | 10.1 |
| 4.9  | 9.4  |
| 12.1 | 11.8 |
| 8.2  | 6.7  |
| 5.6  | 8.2  |
| 9.1  | 9.1  |
| 7.4  | 7.1  |

: Eine Datentabelle mit Sprungweiten in \[cm\] von Hunde- und Katzenflöhen im Wide-Format. {#tbl-imp-cat-dog-wide}

Wir können diese Datentablle auch in R erstellen und uns als `tibble()` wiedergeben lassen.

```{r }
jump_wide_tbl <- tibble(dog = c(5.2, 4.9, 12.1, 8.2, 5.6, 9.1, 7.4),
                        cat = c(10.1, 9.4, 11.8, 6.7, 8.2, 9.1, 7.1))
jump_wide_tbl
```

[Wenn du schon Daten hast, dann macht es eventuell mehr Sinn eine **neue** Exceldatei anzulegen in der du dann die Daten in das Long-Format kopierst.]{.aside}

Wir können aber mit einem Wide-Format nicht mit `ggplot()` die Daten aus der @tbl-imp-cat-dog-wide visualisieren. Deshalb müssen wir entweder das Wide-Format in das Long-Format umwandeln oder die Daten gleich in Excel im Long-Format erstellen.

### Long-Format

Wenn du Daten erstellst ist es wichtig, dass du die Daten in Excel im Long-Format erstellst. Dabei muss eine Beobachtung eine Zeile sein. Du siehst in @fig-imp-long ein Beispiel für eine Tabelle in Excel, die dem Long-Format folgt.

![Beispiel für eine Exceldatentabelle in Long-Format.](images/programing/import_03.png){#fig-imp-long fig-align="center" width="80%"}

Im Folgenden sehen wir einmal wie die Funktion `gather()` das `tibble()` in Wide-Format in ein `tibble()` in Long-Format umwandelt. Wir müssen dafür noch die Spalte benennen mit der Option `key =` in die die Namen der Spalten aus dem Wide-Format geschrieben werden sowie den Spaltennamen für die eigentlichen Messwerte mit der Option `value =`.

```{r }
jump_tbl <- tibble(dog = c(5.2, 4.9, 12.1, 8.2, 5.6, 9.1, 7.4),
                   cat = c(10.1, 9.4, 11.8, 6.7, 8.2, 9.1, 7.1)) |>
  gather(key = "animal", value = "jump_length")
jump_tbl
```

Wir sehen, dass ein Long-Format viel mehr Platz benötigt. Das ist aber in R kein Problem. Wir sehen die Daten kaum sondern nutzen Funktionen wie `ggplot()` um die Daten zu visualisieren. Wichtig ist, dass du die Daten in Excel sauber abgelegt hast.

## Beispiel in Excel...

Schauen wir uns den Fall nochmal als Beispiel in einer Exceldatei an. Du findest die Beispieldatei `germination_data.xlsx` auf [GitHub zum Herunterladen](https://github.com/jkruppa/jkruppa.github.io/tree/master/data). Eventuell muss du bei dir den Pfad ändern oder aber die Importfunktion des RStudios nutzen. Dafür siehe einfach den nächsten Abschnitt.

Wir haben in der Beispieldatei `germination_data.xlsx` zum einen Messwiederholungen, gekenntzeichnet durch die Spalten `t1` bis `t4` sowie einmal gemessene Spalten wie `freshmatter`, `drymatter`, `count_small_leaf` und `count_large_leaf`.

### ...ohne Messwiederholung

Wir schauen uns erstmal die Spalten ohne Messwiederholung an. Wenn du also keine Messwiederholungen hast, also die hast das Frischegewicht nur *einmal* an einer Pflanze gemessen, dann sieht deine Datei so aus wie in @fig-imp-excel-01. Ich zeige hier nur die Spalten A und F bis I aus der Datei `germination_data.xlsx`.

![Beispiel für eine Exceldatentabelle ohne Messwiederholungen.](images/programing/trt_long.png){#fig-imp-excel-01 fig-align="center" width="80%"}

Wir können dann die Datei auch über die Funktion `read_excel()` einlesen. Ich nutze noch die Funktion `select()` um die Spalten auszuwählen, die wir auch oben in der Abbildung sehen. Durch den Doppelpunkt `:` kann ich zusammenhängende Spalten auswählen und muss die Namen nicht einzeln eingeben.

```{r}
read_excel("data/germination_data.xlsx") |> 
  select(treatment, freshmatter:count_large_leaf)
```

Wir könnten jetzt die Ausgabe auch in ein Objekt schreiben und dann mit der eingelesenen Datei weiterarbeiten.

### ... mit Messwiederholung

In @fig-imp-excel-02 siehst du ein Datenbeispiel für eine Behandlung mit Messwiederholungen. Das heist wir haben immer noch eine Pflanze pro Zeile, aber die Pflanze wurde zu den Zeitpunkten `t1` bis `t4` gemessen. In dieser Form ist es viel einfacher aufzuschreiben, aber wir brauchen einen Faktor `time_point` mit vier Leveln `t1` bis `t4`.

![Beispiel für eine Exceldatentabelle mit Messwiederholungen.](images/programing/trt_wide_repeat.png){#fig-imp-excel-02 fig-align="center" width="80%"}

Wir nutzen die Funktion `pivot_longer()` um die Spalten `t1` bis `t4` zusammenzufassen und untereinander zu kleben. Die Spalte `treatment` wird dann einfach viermal wiederholt. Wir müssen dann noch die Spalte für den Faktor benennen und die Spalte für die eigentlichen Messwerte. Beides machen wir einmal über die Option `names_to =` und `values_to =`. Wir haben dann im Anschluss einen Datensatz im Long-Format mit dem wir dann weiterarbeiten können.

```{r}
read_excel("data/germination_data.xlsx") |> 
  select(treatment, t1:t4) |> 
  pivot_longer(cols = t1:t4, 
               names_to = "time_point", 
               values_to = "weight")
```

Wir könnten jetzt die Ausgabe auch in ein Objekt schreiben und dann mit der eingelesenen Datei weiterarbeiten.

### ... mit mehreren Tabellenblättern

Wenn du eine Datei mit mehreren Tabellenblättern hast, dann geht das Einlesen der Datei auch, aber dann müssen die Tabellenblätter wirklich alle für R einlesbar sein. Das heist keine Leerzeilen oder andere Dinge, die stören könnten. Als erstes musst du den Pfad zu deiner Datei angeben. Das kann ganz einfach sein, wenn die Datei in dem gleichen Ordner wie dein R Skript liegt. Dann ist der Pfad wirklich nur ein Punkt in Anführungszeichen `path <- "."`. Sicher ist natürlich du gibst den Pfad absolut ein. Hier einmal wie der Pfad in meinem Fall aussehen würde.

```{r}
path <- file.path("data/multiple_sheets.xlsx")
path
```

Wir können dann den Pfad zu der Ecxeldatei an die Funktion `excel_sheets()` pipen, die alle Tabellenblätter in der Datei findet. Dann müssen wir noch die Funktion `set_names()` verwenden um die Namen der Tabellenblätter zu recyclen. Abschließend können wir alle Exceltabellenblätter in eine Liste laden.

```{r}
data_lst <- path |> 
  excel_sheets() |> 
  rlang::set_names() |> 
  map(read_excel, path = path)
data_lst
```

Das ist ja schonmal gut, aber wie kommen wir jetzt an die einzelnen Tabellenblätter ran? Dafür gibt es die Funktion `pluck()`, die es erlaubt aus einer Liste nach Namen oder Position das Tabellenblatt herauszuziehen. Wir können dann das Tabellenblatt wieder in einem Objekt speichern und dann weiter mit den Daten arbeiten.

```{r}
pluck(data_lst, "day_3")
```

```{r}
pluck(data_lst, 2)
```

Und dann kannst du dir noch über die Funktion `ldply()` einfach einen Datensatz aus den Listen zusammenbauen. Ich nutze danach noch die Funktion `as_tibble()` um eine bessere Ausgabe der Daten zu haben. Das Schöne ist hier, dass mir dann noch eine Spalte mit der `.id` der Listennamen generiert wird. Da habe ich dann wirklich alles zusammen.

```{r}
data_lst |> 
  ldply() |> 
  as_tibble()
```

## Importieren mit RStudio

Wir können das RStudio nutzen um Daten mit Point-and-Klick rein zuladen und dann den Code wieder in den Editor kopieren. Im Prinzip ist dieser Weg der einfachste um einmal zu sehen, wie ein pfad funktioniert und der Code lautet. Später benötigt man diese 'Krücke' nicht mehr. Wir nutzen dann direkt den Pfad zu der Datei. @fig-imp-01 zeigt einen Ausschnitt, wo wir im RStudio die *Import Dataset* Funktionalität finden.

![Auf den Reiter *Einviroment* klicken und dann *Import Dataset*. In der deutschen version vom RStudio mögen die Begriffe leicht anders sein.](images/programing/import_01.PNG){#fig-imp-01 fig-align="center" width="80%"}

## Importieren per Pfad {#sec-pfad}

In @fig-imp-02 können wir sehen wie wir den Pfad zu unserer Excel Datei `flea_dog_cat.xlsx` finden. Natürlich kannst du den Pfad auch anders herausfinden bzw. aus dem Explorer oder Finder kopieren.

![Durch den Rechts-Klick auf die Eigenschaften einer Datei kann man sich den Pfad zur Datei anzeigen lassen. **Achtung!** Unter Windows muss der Slash `\` noch in den Backslash `/` gedreht werden.](images/programing/import_02.PNG){#fig-imp-02 fig-align="center" width="50%"}

Nachdem wir den Pfad gefunden haben, können wir den Pfad in die Funktion `read_excel()` kopieren und die Datei in das Objekt `data_tbl` einlesen. Ja, es wird nichts in der R Console ausgegeben, da sich die Daten jetzt in dem Object `data_tbl` befinden.

```{r}
## Ganzer Pfad zur Datei flea_dog_cat.xlsx
data_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

::: callout-important
## Unterschied zwischen `\` in Windows und `/` in R

Achte einmal auf den Slash im Pfad in R und einem im Pfsd in Windows. Einmal ist es der Slash `\` im Dateipfad und einmal der Backslash `/`. Das ist sehr ärgerlich, aber dieses Problem geht zurück in die 80'ziger. Bill hat entschieden für sein Windows `/` zu nutzen und Steve (und Unix) eben `/`. Und mit dieser Entscheidung müssen wir jetzt leben...
:::

## Auf ein englisches Wort in Dateien {#sec-umlaute}

Ein großes Problem in Datein sind Umlaute (ä,ö,ü) oder aber andere (Sonder)zeichen (ß, ?, oder #). Als dies sollte vermieden werden. Eine gute Datei für R beinhaltet nur *ganze* Wörter, Zahlen oder aber leere Felder. Ein leeres Feld ist ein fehlender Wert. @fig-imp-03 zeigt eine gute Exceldatentablle. Wir schreiben `jump_length` mit Unterstrich um den Namen besser zu lesen zu können. Sonst ist auch alles in Englisch geschrieben. Wir vermeiden durch die neglische Schreibweise *aus versehen* einen Umlaut oder anderweitig problematische Zeichen zu verwenden. Später können wir alles noch für Abbildungen anpassen.

![Beispiel für eine gute (Excel)Datentabelle. Keine Umlaute sind vorhanden und die Spaltennamen haben keine Leerzeichen oder Sonderzeichen.](images/programing/import_03.PNG){#fig-imp-03 fig-align="center" width="80%"}

## Spaltennamen in der (Excel)-Datei {#sec-spalten}

Die Funktion `clean_names()` aus dem R Paket `{janitor}` erlaubt es die Spaltennamen einer eingelesenen Datei in eine für R gute Form zu bringen.

-   Keine Leerzeichen in den Spaltennamen.
-   Alle Spaltennamen sind klein geschrieben.

```{r}
data_tbl |> 
  clean_names()
```
