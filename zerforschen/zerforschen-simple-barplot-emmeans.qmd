In diesem Zerforschenbeispiel wollen wir uns einen einfaktoriellen Barplot oder Säulendiagramm anschauen. Daher fangen wir mit der folgenden Abbildung einmal an. Wir haben hier ein Säulendiagramm mit *compact letter display* vorliegen. Daher brauchen wir eigentlich gar nicht so viele Zahlen. Für jede der vier Behandlungen jeweils einmal einen Mittelwert für die Höhe der Säule sowie einmal die Standardabweichung. Die Standardabweichung addieren und subtrahieren wir dann jeweils von dem Mittelwert und schon haben wir die Fehlerbalken. Für eine detaillierte Betrachtung der Erstellung der Abbildung schauen einmal in das Kapitel zum [Barplot oder Balkendiagramm oder Säulendiagramm](#sec-eda-barplot).

![Ursprüngliche Abbildung, die nachgebaut werden soll. Ein simples Säulendiagramm mit sehr für Farbblinde ungünstigen Farben. Es sind die Mittelwerte sowie die Standardabweichung durch die Fehlerbalken dargestellt.](images/eda/zerforschen_barplot_simple.png){#fig-ur-barplot fig-align="center" width="100%"}

Als erstes brauchen wir die Daten. Die Daten habe ich mir in dem Datensatz `zerforschen_barplot_simple.xlsx` selber ausgedacht. Ich habe einfach die obige Abbildung genommen und den Mittelwert abgeschätzt. Dann habe ich die vier Werte alle um den Mittelwert streuen lassen. Dabei habe ich darauf geachtet, dass die Streuung dann in der letzten Behandlung am größten ist.

```{r}
barplot_tbl <- read_excel("data/zerforschen_barplot_simple.xlsx") %>% 
  mutate(trt = factor(trt, 
                      levels = c("water", "rqflex", "nitra", "laqua"),
                      labels = c("Wasserdestilation",
                                 "RQflex Nitra",
                                 "Nitrachek",
                                 "Laqua Nitrat")))
barplot_tbl 
```

Im Folgenden sparen wir uns den Aufruf mit `group_by()` den du aus dem [Kapitel zum Barplot](#sec-eda-barplot) schon kennst. Wir machen das alles zusammen in der Funktion `emmeans()` aus dem gleichnamigen R Paket. Der Vorteil ist, dass wir dann auch gleich die Gruppenvergleiche und auch das *compact letter display* erhalten. Einzig die Standardabweichung $s$ wird uns nicht wiedergegeben sondern der Standardfehler $SE$. Da aber folgernder Zusammenhang vorliegt, können wir gleich den Standardfehler in die Standardabweichung umrechnen.

$$
SE = \cfrac{s}{\sqrt{n}} 
$$

Wir rechnen also gleich einfach den Standardfehler $SE$ mal der $\sqrt{n}$ um dann die Standardabweichung zu erhalten. In unserem Fall ist $n=4$ nämlich die Anzahl Beobachtungen je Gruppe. Wenn du mal etwas unterschiedliche Anzahlen hast, dann kannst du auch einfach den Mittelwert der Fallzahl der Gruppen nehmen. Da überfahren wir zwar einen statistischen Engel, aber der Genauigkeit ist genüge getan.

In den beiden Tabs siehst du jetzt einmal die Modellierung unter der Annahme der Varianzhomogenität mit der Funktion `lm()` und einmal die Modellierung unter der Annahme der Varianzheterogenität mit der Funktion `gls()` aus dem R Paket `nlme`. Wie immer lässt sich an Boxplots visuell überprüfen, ob wir Homogenität oder Heterogenität vorliegen haben. Oder aber du schaust nochmal in das Kapitel [Der Pre-Test oder Vortest](#sec-pretest), wo du mehr erfährst.

::: {.panel-tabset group="zerforschen-emmeans-barplot-1fac"}
## Varianzhomogenität

Hier gehen wir nicht weiter auf die Funktionen ein, bitte schaue dann einmal in dem Abschnitt zu [Gruppenvergleich mit dem `emmeans` Paket](#sec-posthoc-emmeans). Wir entfernen aber noch die Leerzeichen bei den Buchstaben mit der Funktion `str_trim()`.

```{r}
emmeans_homogen_tbl <- lm(nitrat ~ trt, data = barplot_tbl) %>%
  emmeans(~ trt) %>%
  cld(Letters = letters, adjust = "none") %>% 
  as_tibble() %>% 
  mutate(.group = str_trim(.group),
         sd = SE * sqrt(4)) 
emmeans_homogen_tbl
```

In dem Objekt `emmeans_homogen_tbl` ist jetzt alles enthalten für unsere Barplots mit dem *compact letter display*. Wie dir vielleicht auffällt sind alle Standardfehler und damit alle Standardabweichungen für alle Gruppen gleich, das war ja auch unsere Annahme mit der Varianzhomogenität.

## Varianzheterogenität (`gls`)

Hier gehen wir nicht weiter auf die Funktionen ein, bitte schaue dann einmal in dem Abschnitt zu [Gruppenvergleich mit dem `emmeans` Paket](#sec-posthoc-emmeans) und natürlich in den Abschnitt zu dem [Gruppenvergleich unter Varianzheterogenität](#sec-posthoc-var-heterogen). Wir entfernen aber noch die Leerzeichen bei den Buchstaben mit der Funktion `str_trim()`.

```{r}
emmeans_hetrogen_gls_tbl <- gls(nitrat ~ trt, data = barplot_tbl, 
                            weights = varIdent(form =  ~ 1 | trt)) %>%
  emmeans(~ trt) %>%
  cld(Letters = letters, adjust = "none") %>% 
  as_tibble() %>% 
  mutate(.group = str_trim(.group),
         sd = SE * sqrt(4)) 
emmeans_hetrogen_gls_tbl
```

In dem Objekt `emmeans_hetrogen_gls_tbl` ist jetzt alles enthalten für unsere Barplots mit dem *compact letter display*. In diesem Fall hier sind die Standardfehler und damit auch die Standardabweichungen nicht alle gleich, wir haben ja für jede Gruppe eine eigene Standardabweichung angenommen. Die Varianzen sollten ja auch heterogen sein.

## Varianzheterogenität (`vcovHAC`)

Hier gehen wir nicht weiter auf die Funktionen ein, bitte schaue dann einmal in dem Abschnitt zu [Gruppenvergleich mit dem `emmeans` Paket](#sec-posthoc-emmeans) und natürlich in den Abschnitt zu dem [Gruppenvergleich unter Varianzheterogenität](#sec-posthoc-var-heterogen). Wir entfernen aber noch die Leerzeichen bei den Buchstaben mit der Funktion `str_trim()`.

```{r}
emmeans_hetrogen_vcov_tbl <- lm(nitrat ~ trt, data = barplot_tbl) %>%
  emmeans(~ trt, vcov. = sandwich::vcovHAC) %>%
  cld(Letters = letters, adjust = "none") %>% 
  as_tibble() %>% 
  mutate(.group = str_trim(.group),
         sd = SE * sqrt(4)) 
emmeans_hetrogen_vcov_tbl
```

In dem Objekt `emmeans_hetrogen_vcov_tbl` ist jetzt alles enthalten für unsere Barplots mit dem *compact letter display*. In diesem Fall hier sind die Standardfehler und damit auch die Standardabweichungen nicht alle gleich, wir haben ja für jede Gruppe eine eigene Standardabweichung angenommen. Die Varianzen sollten ja auch heterogen sein.
:::

Und dann haben wir auch schon die Abbildungen hier erstellt. Ja vielleicht passen die Standardabweichungen nicht so richtig, da könnte man nochmal an den Daten spielen und die Werte solange ändern, bis es besser passt. Du hast aber jetzt eine Idee, wie der Aufbau funktioniert. Die beiden Tabs zeigen dir dann die Abbildungen für die beiden Annahmen der Varianzhomogenität oder Varianzheterogenität. Der Code ist der gleiche für die drei Abbildungen, die Daten `emmeans_homogen_tbl` oder `emmeans_hetrogen_gls_tbl` ober `emmeans_hetrogen_vcov_tbl` sind das Ausschlaggebende.

::: {.panel-tabset group="zerforschen-emmeans-barplot-1fac"}
## Varianzhomogenität

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-simple-emmeans-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut mit den Informationen aus der Funktion `emmeans()`. Das *compact letter display* wird dann über das *geom_text()* gesetzt."

ggplot(data = emmeans_homogen_tbl, aes(x = trt, y = emmean, fill = trt)) +
  theme_minimal() +
  geom_bar(stat = "identity") + 
  geom_errorbar(aes(ymin = emmean-sd, ymax = emmean+sd), 
                width = 0.2) + 
  labs(x = "", 
       y = "Nitrat-Konzentration \n im Tannensaft [mg/L]") +
  ylim(0, 250) +
  theme(legend.position = "none") + 
  scale_fill_okabeito() + 
  geom_text(aes(label = .group, y = emmean + sd + 10))
```

## Varianzheterogenität (`gls`)

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-simple-emmeans-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut mit den Informationen aus der Funktion `emmeans()`. Das *compact letter display* wird dann über das *geom_text()* gesetzt. Die Varianzheterogenität nach der Funktion `gls()` im obigen Modell berücksichtigt."

ggplot(data = emmeans_hetrogen_gls_tbl, aes(x = trt, y = emmean, fill = trt)) +
  theme_minimal() +
  geom_bar(stat = "identity") + 
  geom_errorbar(aes(ymin = emmean-sd, ymax = emmean+sd), 
                width = 0.2) + 
  labs(x = "", 
       y = "Nitrat-Konzentration \n im Tannensaft [mg/L]") +
  ylim(0, 250) +
  theme(legend.position = "none") + 
  scale_fill_okabeito() + 
  geom_text(aes(label = .group, y = emmean + sd + 10))
```

## Varianzheterogenität (`vcovHAC`)

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-simple-emmeans-3
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut mit den Informationen aus der Funktion `emmeans()`. Das *compact letter display* wird dann über das *geom_text()* gesetzt. Die Varianzheterogenität nach der Funktion `sandwich::vcovHAC` im obigen Modell berücksichtigt."

ggplot(data = emmeans_hetrogen_vcov_tbl, aes(x = trt, y = emmean, fill = trt)) +
  theme_minimal() +
  geom_bar(stat = "identity") + 
  geom_errorbar(aes(ymin = emmean-sd, ymax = emmean+sd), 
                width = 0.2) + 
  labs(x = "", 
       y = "Nitrat-Konzentration \n im Tannensaft [mg/L]") +
  ylim(0, 250) +
  theme(legend.position = "none") + 
  scale_fill_okabeito() + 
  geom_text(aes(label = .group, y = emmean + sd + 10))
```
:::

Am Ende kannst du dann folgenden Code noch hinter deinen `ggplot` Code ausführen um dann deine Abbildung als `*.png`-Datei zu speichern. Dann hast du die Abbildung super nachgebaut und sie sieht auch wirklich besser aus.

```{r}
#| eval: false
ggsave("my_ggplot_barplot.png", width = 5, height = 3)
```
