```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# $k$ nearest neighbor {#sec-knn}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

Was macht der $k$ nächste Nachbarn Algorithmus (eng. *k nearest neighbor*, abk. *k-NN*) ? Der Algorthmus ist ein sehr einfacher Algorithmus, der auf den Abständen zu den benachbarten Beobachtungen basiert. Wir wollen also für eine neue Beobachtung den Infketionstatus vorhersagen. Um diese Vorhersage zu bewerkstelligen nutzen wir die $k$-nöchsten Nachbarn zu dieser neuen Beobachtung. Wenn die Mehrzahl der $k$-nächsten Nachbarn den Infektionsstatus $1$ hat, dann vergeben wir auch der neuen Beoabchtung den Infektionsstatus $1$. Wenn dies nicht der Fall ist, dann erhält die neue Beobachtung den Infektionsstatus $0$.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, tidymodels, magrittr, 
               caret, kknn, MachineShop, conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
conflict_prefer("fit", "parsnip")
conflict_prefer("contr.dummy", "kknn")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

In dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt.

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") %>% 
  mutate(pig_id = 1:n(),
         infected = as_factor(infected)) %>% 
  select(pig_id, infected, everything())  
```

In @tbl-ml-basic-pig siehst du nochmal einen Auschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-ml-basic-pig
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page

pig_raw_tbl <- pig_tbl %>% 
  mutate(infected = as.character(infected))

rbind(head(pig_raw_tbl),
      rep("...", times = ncol(pig_raw_tbl)),
      tail(pig_raw_tbl)) %>% 
  kable(align = "c", "pipe")
```

Gehen wir jetzt mal die Wörter und Begrifflichkeiten, die wir für das maschinelle Lernen später brauchen einmal durch.

## $k$-NN theoretisch

Im Folgenden betrachten wir uns den $k$-NN Algorithmus einmal ganz simpel. Dafür nutzen wir die @fig-class-knn-01 als Startpunkt. Wir haben dort 11 Beobachtungen im Trainingsdatensatz dargestellt. Wir finden in dem Trainingsdatensatz acht infizierte Personen soiwe drei gesunde Personen. Darüber hinaus eine neue rote Beobachtung. Gegeben den Traingsdaten, welchen Status wollen wir der neuen roten Beobachtung geben?

![Darstellung von 11 Beobachtungen aus dem Traingsdatensatz und einer neuen roten Beobachtung aus den Testdaten. Die schwarzen Kugeln stellen kranke Personen und die grünen die gesunde Personen dar.](images/class-knn-01.png){#fig-class-knn-01 fig-align="center" width="70%"}

In der @fig-class-knn-02 sehen wir die Klassifizierung nach $k = 1$. Wir nehmen daher die $k = 1$ nächsten Beobachtungen und bestimmen daran den neuen Status der roten Beobachtung. Wenn wir nur die eine nächste Beobachtung als Nachbarn betrachten, so setzen wir den Status unser neuen Beobachtung auf grün und daher gesund.

![Wir nehmen mit $k=1$ nur die nächste Beobachtung zu unserer neuen Beobachtung hinzu und bestimmen die neue Beobachtung als grün.](images/class-knn-02.png){#fig-class-knn-02 fig-align="center" width="70%"}

Nun können wir das Spiel weiterspielen und wählen in der @fig-class-knn-03 die $k = 2$ nächsten Nachbarn zu unser neuen Beobachtung aus. Wir erhalten jetzt ein Unentschieden. Wir haben eine schwarze Beobachtung und eine grüne Beobachtung als $k=2$ nächste Nachbarn. Wir können hier keine Entscheidung treffen. Eine gerade Anzahl an nächsten Nachbarn ist prinzipiell nicht anzuraten. Ich empfehle immer eine ungerade Anzhl. Auch wenn es natürlich auch für eine gerade Anzahl eine algorithmische Lösung gibt. Das ist aber weit über die Anwendung hinaus und geht in die Tiefe des Algorithmus, die wir hier nicht behandeln wollen.

![Mit $k = 2$ nächste Nachbarn haben wir ein Patt vorliegen. Wir können uns nicht entscheiden, ob wir die neue Beobachtung als grün oder schwarz klassifizieren.](images/class-knn-03.png){#fig-class-knn-03 fig-align="center" width="70%"}

In der @fig-class-knn-04 sehen wir, dass wir jetzt $k = 3$ Nachbarn betrachten. Damit haben wir auf jeden Fall wieder eine Entscheidung. Wenn auch hier nur sehr knapp, da wir ja zwei schwarze und einen grünen Nachbarn haben. Wir klassifizieren dennoch die neue Beobachtung als schwarz.

![Die Klassifizierung mit $k = 3$ nächsten Nachbarn. Wir erhalten hier eine , wenn auch knappe, Entscheidung für den schwarzen Status und damit krank.](images/class-knn-04.png){#fig-class-knn-04 fig-align="center" width="70%"}

Soweit so gut. Und wie entscheide ich jetzt was weit weg ist? Wenn wir uns mit dem $k$-NN Algorithmus näher beschäftigen würden, dann werden wir feststellen, dass es eine Vielzahl an Abstandsmaßen gibt. Wir du dir vorstellen kannst, kann man die Entfernung zwischen zwei Punkten als den absoluten Abstand messen. Oder aber als den quadratischen Abstand. Es wäre auch möglich einen gewichteten Abstand einzuführen, so dass nähere Beobachtungen einen größeren Einfluss auf die Vorhersage haben als weiter entfernte Beobachtungen. Dann würden wir auch das Problem von geraden $k$ Anzahlen lösen. Du musst dann leider in den jeweiligen R Paketen schauen, welche Optionen es dort geben mag. Wir werden uns hier auf eins der R Pakete mit `kknn` konzentrieren.m

## Klassifikation

```{r}
pig_data_split <- initial_split(pig_tbl, prop = 3/4)

pig_train_data <- training(pig_data_split)
pig_test_data  <- testing(pig_data_split)
```

```{r}
pig_rec <- recipe(infected ~ age + sex + location + activity + crp + 
                   frailty + bloodpressure + weight + creatinin,
                  data = pig_train_data) %>% 
 step_range(all_numeric_predictors(), min = 0, max = 1) %>% 
 step_dummy(all_nominal_predictors()) %>% 
 step_nzv(all_predictors())
```

```{r}
knn_mod <- nearest_neighbor(neighbors = 11) %>% 
  set_engine("kknn") %>% 
  set_mode("classification") 
```

```{r}
pig_wflow <- workflow() %>% 
  add_model(knn_mod) %>% 
  add_recipe(pig_rec)
```

```{r}
pig_fit <- pig_wflow %>% 
  parsnip::fit(pig_train_data)
```

```{r}
pig_aug <- augment(pig_fit, pig_test_data ) %>% 
  select(infected, matches("pred"))
```

```{r}
pig_aug %>% 
  roc_curve(truth = infected, .pred_1, event_level = "second") %>% 
  autoplot()
```

```{r}
pig_aug %>% 
  yardstick::roc_auc(truth = infected, .pred_1, event_level = "second")
```

```{r}
pig_aug %>% 
  yardstick::accuracy(truth = infected, .pred_class)
```

```{r}
pig_cm <- pig_aug %>% 
  conf_mat(infected, .pred_class)

pig_cm
```

```{r}
pig_cm %>% summary()
```

```{r}
autoplot(pig_cm, type = "mosaic")
```

## Resampling

```{r}
folds <- vfold_cv(pig_train_data, v = 10)
folds
```

```{r}
pig_cv_fit <- pig_wflow %>% 
  fit_resamples(folds)
```

```{r}
collect_metrics(pig_cv_fit)
```

## Tuning

```{r}
tune_spec <- nearest_neighbor(neighbors = tune(),
                              weight_func = tune(), 
                              dist_power = tune()) %>% 
  set_engine("kknn") %>% 
  set_mode("classification") 

tune_spec
```

Ich nutze hier `levels = 2` damit hier die Ausführung nicht so lange läuft. Das ist natürlich etwas zu wenig. Fange am besten mit `levels = 5` an und schaue, wie lange das zusammen mit der Kreuzvalidierung dann dauert.

```{r}
pig_grid <- grid_regular(neighbors(),
                         weight_func(),
                         dist_power(),
                         levels = 5)
```

Eigentlich ist eine 10-fache Kreuzvalidierung mit $v=10$ besser. Das dauert mir dann aber hier im Skript viel zu lange. Deshalb habe ich hier nur $v=5$ gewählt. Wenn du das Tuning rechnest, nimmst du natürlich eine 10-fach Kreuzvalidierung.

```{r}
pig_folds <- vfold_cv(pig_train_data, v = 5)
```

```{r}
pig_tune_wflow <- workflow() %>% 
  add_model(tune_spec) %>% 
  add_recipe(pig_rec)
```

Wenn du `control_grid(verbose = TRUE)` wählst, dann erhälst du eine Ausgabe wie weit das Tuning gerade ist.

```{r}
#| eval: false
pig_tune_res <- pig_tune_wflow %>% 
   tune_grid(resamples = pig_folds,
             grid = pig_grid,
             control = control_grid(verbose = FALSE))
```

```{r}
#| eval: false
#| echo: false

## write_rds(pig_tune_res, "data/pig_knn_tune_res.rds")
```

```{r}
#| echo: false

pig_tune_res <- read_rds("data/pig_knn_tune_res.rds")
```

```{r}
pig_tune_res %>%
  collect_metrics() %>%
  mutate(weight_func = as_factor(weight_func),
         dist_power = as_factor(dist_power)) %>%
  ggplot(aes(neighbors, mean, color = weight_func, linetype = dist_power)) +
  geom_line(size = 1.5, alpha = 0.6) +
  geom_point(size = 2) +
  facet_wrap(~ .metric, scales = "free", nrow = 2) +
  scale_x_log10(labels = scales::label_number()) +
  scale_color_viridis_d(option = "plasma", begin = .9, end = 0)
```

```{r}
pig_tune_res %>%
  show_best("accuracy")
```

```{r}
best_knn <- pig_tune_res %>%
  select_best("accuracy")

best_knn
```

```{r}
final_pig_wf <- pig_tune_wflow %>% 
  finalize_workflow(best_knn)

final_pig_wf 
```

```{r}
final_fit <- final_pig_wf %>%
  last_fit(pig_data_split) 

final_fit %>%
  collect_metrics()

final_fit %>%
  collect_predictions() %>% 
  roc_curve(infected, .pred_1, event_level = "second") %>% 
  autoplot()
```

## kmeans Clustering

Neben der Klassifikation können wir den $k$-NN Algorithmus auch nutzen um Gruppen in den Daten zu finden. Die Idee ist recht einfach. Wir geben $k$ Cluster vor und der Algorithmus versucht nun die Daten so zu ordnen, dass sich $k$ Cluster bilden. Je nach der Nähe der Beobachtungen zueinander lassen sich dann mehr oder minder klar abgegrenzte Cluster bilden. Das Problem an der Sache ist die Definition von $k$ für die Anzahl der zu bildenden Cluster. Wir müssen nämlich selber festlegen, wie viele Cluster wir erwarten würden und der Algorithmus dann finden wird. Wenn wir $k = 3$ der Funktion `kmeans` mitgeben, dann findet die Funktion drei Cluster. Auch wenn zwei mehr Sinn gemacht hätten. Daher müssen wir immer selber ausprobieren und uns die Daten visualisieren, ob das mit den Clustern so passt.

Für Clusterbildung können wir nur numerische Variablen verwenden. Daher müssen wir hier über die Funktion `step_dummy` alle nominalen Variablen wie Faktoren in eine $0/1$-Kodierung umwandeln. Das ist eine Einschränkung des kmeans Algorithmus.

```{r}
pig_kmeans_rec <- recipe(infected ~ age + sex + location + activity + crp + 
                           frailty + bloodpressure + weight + creatinin,
                         data = pig_train_data) %>% 
  step_dummy(all_nominal_predictors()) 
```

```{r}
pig_dummy_tbl <- pig_kmeans_rec %>% 
  prep %>% 
  juice()
```

```{r}
kmeans_obj <- kmeans(pig_dummy_tbl, centers = 3)
```

```{r}
pig_dummy_tbl %>% 
  bind_cols(cluster = pluck(kmeans_obj, "cluster")) %>% 
  select(cluster, everything())
```

Das [R Paket `embed`](https://cran.r-project.org/web/packages/embed/embed.pdf) bietet noch eine Vielzahl an weiteren Funktionen für die Erstellung von kategorialen Variablen. Bier musst du schauen, ob die Funktionen dann *univariat* sind und dhaer immer nur eine variable nutzen oder aber *multivariat* und daher mehrere Spalten simultan. Der Vorteil von `kmeans` ist ja, das der Algorithmus mehrere numerische Spalten für die Clusterbildung nutzen kann.
