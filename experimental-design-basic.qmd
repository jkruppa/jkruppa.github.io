```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc,
               grid, agricolae, patchwork, desplot, modelr)
```

# Einfache Designs {#sec-experimental-design-basic}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

::: column-margin
Ein Teil der Beispiele basiert auf [DSFAIR von P. Schmidt](https://schmidtpaul.github.io/DSFAIR/DesigningExperiments.html) und wurde von mir angepasst und vereinfacht. Hier findet sich auch weiterführende Literatur und weitere Beispiele.

Im Weiteren schauen wir uns auch das R Paket `agricolae` mit Beispielen von [Experimental Designs with agricolae](https://myaseen208.com/agricolae/articles/ExperimentalDesign.html) genauer einmal an.
:::

In diesem Kapitel wollen wir uns mit der Erstellung von einfachen experimentellen Designs beschäftigen

-   [Complete randomized design (CRD)](#sec-crd)
-   [Randomized complete block design (RCBD)](#sec-rcbd)
-   [Latin square design (LSD)](#sec-lsd)

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
set.seed(2034)
pacman::p_load(tidyverse, magrittr, dae, agricolae,
               conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("set_names", "magrittr")
cbbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Complete randomized design (CRD) {#sec-crd}

Das komplett randomisierte Design ist sicherlich das einfachste Design. Aber auch das praktischste, wenn du ein gar nicht so komplexes Experiment hast. Im PRinzip hast du nur eine Behandlung mit unterschiedlichen Gruppen. Oder allgemeiner gesprochen, du hast einen Faktor $f_1$, der deine Behandlungen beinhaltet. Du kannst viele Behandlungen haben, die dann als Level des Faktors dargestellt werden. Wir gehen jetzt das *complete randomized design* einmal an einem Beispiel durch. Hier einmal für eine Behandlung `trt` mit vier Leveln oder auch Gruppen `ctrl`, `A`, `B` und `C` sowie als Outcome das Trockengewicht `drymatter`. Das Outcome müssen wir gar nicht weiter beachten, es dient nur als Gedankenstütze.

Wir haben also folgendes Modell, was wir dann in einem Design abbilden wollen.

$$
drymatter \sim \overbrace{trt}^{f_1} 
$$

Jetzt ist nur noch die Frage, wie oft wollen wir jede Behandlung wiederholen (eng. *replicate*). Wir entscheiden uns dafür jeweils 4 Pflanzen pro Behandlungsgruppe zu verwenden. Damit haben wir vier Wiederholungen für vier Behandlungsgruppen und somit insgesamt zwanzig Pflanzen oder auch Beobachtungen.

### ... mit `expand_grid()`

Warum kompliziert, wenn es auch einfach geht. Wir nutzen hier einmal die Funktion `expand_grid()` um uns das *complete randomized design* zu erstellen. Die Randomisierung kommt dann über das `sample()` und der Pflanzenidentifikationsnummer `pid`. Das geht super einfach und wir brauchen auch gar keine anderen höheren Funktionen von komplexeren R Paketen. Die Spalte `trt_rep` wird uns später helfen die Beobachtung dann in dem Grid der Pflanzenposition auf dem Tisch wiederzufinden.

```{r}
crd_long_tbl <- expand_grid(trt = 1:4, rep = 1:4) %>% 
  mutate(trt = factor(trt, labels = c("ctrl", "A", "B", "C")),
         rep = factor(rep, labels = as.roman(1:4)),
         trt_rep = str_c(trt, ".", rep),
         pid = sample(1:n())) %>% 
  select(pid, everything())
crd_long_tbl
```

Dann kannst du dir die Datei mit der Funktion `write_xlsx()` aus dem R Paket `writexl` raus schreiben und dann entsprechend mit deinen Messwerten für das Trockengewicht ergänzen.

```{r}
#| eval: false
#| message: false
#| warning: false
crd_long_tbl %>% 
  write_xlsx("template_sheet.xlsx")
```

Für die Visualisierung fehlt uns jetzt noch die Positionsangaben auf dem Feld. Daher bauen wir uns einmal ein Grid der Reihen `rows` und der Spalten `cols`. Das Grid können wir dann mit den nach den Pflanzen-ID's sortieren Design zusammenbringen. Damit haben wir dann eigentlich schon fast alles zusammen.

```{r}
crd_plot_tbl <- crd_long_tbl %>% 
  arrange(pid) %>% 
  bind_cols(expand_grid(row = 1:4, col = 1:4))
crd_plot_tbl
```

Jetzt können wir uns einmal das Grid der Pflanzungen in der @fig-exp-basic-1 einmal anschauen. Wir nutzen hier die Möglichkeiten des R Pakets `desplot`. Hier wird es dann nochmal klarer wo die Pflanzen eigentlich hin sollen. Du kannst dir dann den Tisch so einteilen, dass eben oben links die vierte Wiederholung der Behandlung `B` steht. Dann steht rechts daneben die zweite Wiederholung der Behandlung `C`. Nach der Ernte bestimmst du dann das Trockengewicht und trägst es in die Exceltabelle ein.

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Schema der Behandlungen nach dem *complete randomized design* ."

ggdesplot(data = crd_plot_tbl, 
          form = trt ~ col + row,
          text = trt_rep, cex = 1, show.key = FALSE, shorten = "no", flip = TRUE)
```

Das war jetzt die schnelle Variante mit `expand_grid()` und der anschließenden Visualisierung mit einem Plan für die Positionen der jeweiligen Beobachtungen.

### ... mit `agricolae`

```{r}
crd_obj <- design.crd(trt = c("ctrl", "A", "B", "C"), 
                      r = c(5, 5, 5, 5), serie = 2)
```

```{r}
crd_book_tbl <- crd_obj %>% 
  pluck("book") %>% 
  as_tibble() %>% 
  set_names(c("plots", "r", "trt"))
crd_book_tbl
```

```{r}
crd_plot_tbl <- crd_book_tbl %>%
  bind_cols(expand_grid(rows = 1:4,
                        cols = 1:5))
```

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo."

desplot(trt ~ rows + cols, flip = TRUE,
        text = trt, cex = 1, shorten = "no",
        data = crd_plot_tbl,
        main = "Complete randomized design (CRD)", 
        show.key = FALSE)
```

## Randomized complete block design (RCBD) {#sec-rcbd}

$$
drymatter \sim \overbrace{trt}^{f_1} + \underbrace{block}_{f_2} 
$$

### ... mit `expand_grid()`

```{r}
rcbd_long_tbl <- expand_grid(block = 1:4, 
                             trt = 1:4) %>% 
  mutate(trt = factor(trt, labels = c("ctrl", "A", "B", "C")),
         block = factor(block, labels = as.roman(1:4)),
         id = 1:n()) %>% 
  group_by(block) %>% 
  mutate(trt = sample(trt))
```

```{r}
rcbd_plot_tbl <- rcbd_long_tbl %>% 
  arrange(id) %>% 
  bind_cols(expand_grid(row = 1:4, col = 1:4))
  
```

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-3
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo."

ggdesplot(data = rcbd_plot_tbl, 
          form = trt ~ row + col,
          out1 = block,
          text = trt, cex = 1, show.key = FALSE, shorten = "no")
```

`pivot_wider()`

```{r}
rcbd_wide_tbl <- pivot_wider(rcbd_long_tbl, names_from = block, values_from = id)
rcbd_wide_tbl
```

::: {.callout-caution collapse="true"}
## Und zurück mit `pivot_longer()`

```{r}
#| eval: false
#| message: false
#| warning: false

rcbd_wide_tbl %>% 
  pivot_longer(cols = I:IV,
               names_to = "block",
               values_to = "id")
```
:::

```{r}
#| eval: false
#| message: false
#| warning: false
rcbd_wide_tbl %>% 
  write_xlsx("template_sheet.xlsx")
```

### ... mit `agricolae`

```{r}
rcbd_obj <- design.rcbd(trt = c("ctrl", "A", "B", "C"), r = 5)
```

```{r}
rcbd_book_tbl <- rcbd_obj %>% 
  pluck("book") %>% 
  as_tibble() %>% 
  set_names(c("plots", "block", "trt"))
rcbd_book_tbl
```

```{r}
rcbd_plot_tbl <- rcbd_book_tbl %>%
  mutate(rows = as.numeric(block)) %>% 
  group_by(rows) %>% 
  mutate(cols = 1:n())
```

```{r}
rcbd_obj %>% 
  pluck("sketch") %>% 
  t()
```

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-4
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo."
desplot(trt ~ rows + cols, flip = TRUE,
        text = trt, cex = 1, shorten = "no",
        out1 = block,
        data = rcbd_plot_tbl,
        main = "randomized complete block design", 
        show.key = T, key.cex = 0.5)
```

## Latin square design (LSD) {#sec-lsd}

### ... mit `agricolae`

```{r}
lsd_obj <- design.lsd(trt = c("ctrl", "A", "B", "C", "D"), 
                      seed = 42)
```

```{r}
lsd_book_tbl <- lsd_obj %>% 
  pluck("book") %>% 
  as_tibble() %>% 
  set_names(c("plots", "rows", "cols", "trt")) %>% 
  mutate(rows = as.numeric(rows),
         cols = as.numeric(cols))
lsd_book_tbl
```

```{r}
lsd_obj %>% 
  pluck("sketch") %>% 
  t()
```

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-5
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo."
desplot(trt ~ rows + cols, flip = TRUE,
        out1 = rows, out1.gpar = list(col="black", lwd=3),
        out2 = cols, out2.gpar = list(col="black", lwd=3),
        text = trt, cex = 1, shorten = "no",
        data = lsd_book_tbl,
        main = "Latin square design (LSD)", 
        show.key = FALSE, key.cex = 0.5)
```

### ... mit `dae`

```{r}
lsd_sys <- cbind(fac.gen(list(rows = 5, cols = 5)),
                 trt = factor(designLatinSqrSys(5), labels = LETTERS[1:5]))
```

```{r}
lsd_lay <- designRandomize(allocated = lsd_sys["trt"],
                            recipient = lsd_sys[c("rows", "cols")],
                            seed = 141)
```

```{r}
#| message: false
#| warning: false
#| label: fig-exp-basic-6
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "foo."
designGGPlot(lsd_lay, labels = "trt", cellalpha = 0.75,
             row.factors = "rows", column.factors = "cols",
             blockdefinition = cbind(1, 1),
             blocklinecolour = "black")
```
