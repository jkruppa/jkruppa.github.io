```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Von Flöhen auf Hunden und Katzen

## Von Flöhen und Hunden {#sec-example-1}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 8.2, 5.6, 9.1, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
```

In unserem ersten Beispiel wollen wir uns verschiedene Daten $D$ von Hunden und Hundeflöhen anschauen. Unter anderem sind dies die Sprungweite, die Anzahl an Flöhen, die Boniturnoten auf einer Hundemesse sowie der Infektionsstatus. Hier nochmal detailiert, was wir uns im Folgenden immer wieder anschauen wollen.

-   **Sprungweite** in \[cm\] von verschiedenen Flöhen $$
    Y_{jump} = \{`r str_c(y_jump_dog, collapse = ", ")`\}.
    $$

-   **Anzahl an Flöhen** auf verschiedenen Hunden $$
      Y_{count} = \{`r str_c(y_count_dog, collapse = ", ")`\}.
      $$

-   **Boniturnoten** \[1 = schlechteste bis 9 = beste Note\] von verschiedenen Hunden $$
      Y_{grade} = \{`r str_c(y_grade_dog, collapse = ", ")`\}.
      $$

-   **Infektionstatus** \[0 = gesund, 1 = infiziert\] mit Flöhen von verschiedenen Hunden $$
      Y_{infected} = \{`r str_c(y_infected_dog, collapse = ", ")`\}.
      $$

Je nachdem was wir messen, nimmt $Y$ andere Zahlenräume an. Wir sagen, $Y$ folgt einer Verteilung. Die Sprungweite ist normalverteilt, die Anzahl an Flöhen folgt einer Poisson Verteilung, die Boniturnoten sind multinominal/ordinal bzw. kategorial verteilt. Der Infektionsstatus ist binomial verteilt. Wir werden uns später die Verteilungen anschauen und visualisieren. Das können wir hier aber noch nicht. Wichtig ist, dass du schon mal gehört hast, dass $Y$ unterschiedlich *verteilt* ist, je nachdem welche Dinge wir messen.

@tbl-dog-long zeigt dir die Darstellung der Daten von oben in einer einzigen Tabelle. Bitte beachte, dass genau eine Zeile für eine Beobachutng, in diesem Fall einem Hund, vorgesehen ist.

```{r echo = FALSE}
#| label: tbl-dog-long
#| tbl-cap: Sprunglängen [cm] für Hundeflöhe. Die Tabelle ist im Long-Format dargestellt.

data_tbl <- tibble(dog = y_jump_dog) %>%
  gather(animal, jump_length) %>%
  mutate(flea_count = c(y_count_dog),
         grade = c(y_grade_dog),
         infected = c(y_infected_dog))

write.csv2(data_tbl, "data/flea_dog.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog.xlsx", rowNames = FALSE)

data_tbl %>%
  kable(align = "c", "pipe")
```

::: callout-tip
## Datei für von Flöhen und Hunden

Du findest die Datei `flea_dog.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen, Hunden und Katzen {#sec-example-2}

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 8.2, 5.6, 9.1, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
y_jump_cat <- c(3.2, 2.2, 5.4, 4.1, 4.3, 7.9, 6.1)
y_count_cat <- c(12, 13, 11, 12, 16, 9, 7)
y_grade_cat <- c(7, 5, 7, 6, 6, 6, 5)
y_infected_cat <- c(1, 0, 0, 0, 1, 0, 0)
```

Wir wollen jetzt das Beispiel von den Hunden und Flöhen um eine Spezies erweitern. Wir nehmen noch die Katzen mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit von Katzen und Hundeflöhen aus? Konzentrieren wir uns hier einmal auf die Sprungweite. Wir können wie in dem vorherigen Beispiel mit den Hundeflöhen die Sprungweiten \[cm\] der Katzenflöhe wieder in der gleichen Weise aufschreiben:

$$
Y_{jump} = \{`r str_c(y_jump_cat, collapse = ", ")`\}.
$$

Wenn wir jetzt die Sprungweiten der Hundeflöhe mit den Katzenflöhen vergleichen wollen haben wir ein Problem. Beide Zahlenvektoren heißen gleich, nämlich $Y_{jump}$. Wir könnten jeweils in die Indizes noch $dog$ und $cat$ schreiben als $Y_{jump,\, dog}$ und $Y_{jump,\, cat}$ und erhalten folgende Vektoren.

$$
Y_{jump,\, dog} = \{`r str_c(y_jump_dog, collapse = ", ")`\}
$$

$$
Y_{jump,\, cat} = \{`r str_c(y_jump_cat, collapse = ", ")`\}
$$

Dadurch werden die Indizes immer länger und unübersichtlicher. Auch das $Y$ einfach $Y_{dog}$ oder $Y_{cat}$ zu nennen ist keine Lösung - wir wollen uns vielleicht später nicht nur die Sprungweite vergleichen, sondern vielleicht auch die Anzahl an Flöhen oder den Infektionsstatus. Dann ständen wir wieder vor dem Problem die $Y$ für die verschiedenen Outcomes zu unterscheiden. Daher erstellen wir uns die @tbl-dog-cat-wide. Wir haben jetzte eine *Daten*tabelle.

```{r echo = FALSE}
#| label: tbl-dog-cat-wide
#| tbl-cap: Sprunglängen [cm] für Hunde- und Katzenflöhe. Die Tabelle ist im Wide-Format dargestellt.

tibble(dog = y_jump_dog,
       cat = y_jump_cat) %>%
  kable(align = "c", "pipe")

```

Intuitiv ist die @tbl-dog-cat-wide übersichtlich und beinhaltet die Informationen die wir wollten. Dennoch haben wir das Probem, das wir in dieser @tbl-dog-cat-wide nicht noch weitere Outcomes angeben können. Wir können die Anzahl an Flöhen auf den Hunde und Katzen nicht darstellen. Als Lösung ändern wir die @tbl-dog-cat-wide in das Long-Format. Dargestellt in @tbl-dog-cat-long. Jede Beobachtung belegt nun eine Zeile. Dies ist sehr wichtig im Kopf zu behalten, wenn du eigene Daten in z.B. Excel einstellst.

```{r }
#| echo: false
#| label: tbl-dog-cat-long
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Boniturnote sowie der Infektionsstatus von Hunde- und Katzenflöhe. Die Tabelle ist im Long-Format dargestellt.


data_tbl <- tibble(dog = y_jump_dog,
       cat = y_jump_cat) %>%
  gather(animal, jump_length) %>%
  mutate(flea_count = c(y_count_dog, y_count_cat),
         grade = c(y_grade_dog, y_grade_cat),
         infected = c(y_infected_dog, y_infected_cat))

write.csv2(data_tbl, "data/flea_dog_cat.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat.xlsx", rowNames = FALSE)


data_tbl %>%
  kable(align = "c", "pipe")

```

::: callout-tip
## Datei für von Flöhen, Hunden und Katzen

Du findest die Datei `flea_dog_cat.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::
