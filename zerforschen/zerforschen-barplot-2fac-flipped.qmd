In diesem Zerforschenbeispiel wollen wir uns einen zweifaktoriellen Barplot oder Balkendiagramm anschauen. Wir haben hier ein echtes Balkendiagramm mit *compact letter display* vorliegen. Daher brauchen wir eigentlich gar nicht so viele Zahlen. Für jede der vier Zeitpunkte und der Kontrolle jeweils einmal einen Mittelwert für die Länge des Balkens sowie einmal die Standardabweichung. Die Standardabweichung addieren und subtrahieren wir dann jeweils von dem Mittelwert und schon haben wir die Fehlerbalken. Ich habe hier dann jeweils drei Werte für jede Faktorkombination. Die brauche ich dann auch, weil ich später nochmal vergleichend den Boxplot erstellen möchte. Der macht meiner Ansicht nach hier mehr Sinn.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Ein zweifaktorielles Balkendiagramm mit einem Zielbereich und *compact letter display*](images/eda/zerforschen_barplot_complex_02.png){#fig-ur-barplot-03 fig-align="center" width="100%"}

Als erstes brauchen wir wieder die Daten. Die Daten habe ich mir in dem Datensatz `zerforschen_barplot_2fac.xlsx` selber ausgedacht. Ich habe einfach die obige Abbildung genommen und den Mittelwert abgeschätzt. Dann habe ich die drei Werte alle um den Mittelwert streuen lassen. Das war es dann auch schon.

```{r}
barplot_tbl <- read_excel("data/zerforschen_barplot_2fac_flipped.xlsx") %>% 
  mutate(iod = fct_rev(iod),
         fruit = fct_rev(fruit))
barplot_tbl
```

Jetzt brauchen wir noch die Mittelwerte und die Standardabweichung für jede der vier Behandlungen. Hier nur kurz, den Code kennst du schon aus anderen Zerforschenbeispielen zu den Barplots.

```{r}
#| message: false
#| warning: false
stat_tbl <- barplot_tbl %>% 
  group_by(iod, fruit) %>% 
  summarise(mean = mean(iod_yield),
            sd = sd(iod_yield))
stat_tbl
```

Im Folgenden stelle ich die zusammengefassten Daten `stat_tbl` als Balkendiagramm dar. Die ursprünglichen Daten `barplot_tbl` kann ich nutzen um die Boxplots zu erstellen. Hier ist wichtig nochmal zu erinnern, das wir Barplots auf dem Mittelwert und der Standardabweichung darstellen und die Boxplots auf den Originaldaten. Mit der unteren Grenze machen Boxplots mehr Sinn, wenn du wissen willst, ob du einen Zielbereich vollkommen erreicht hast.

::: panel-tabset
## Barplot

Zuerst einmal der Barplot, wie wir ihn auch schon oben in der Abbildung sehen. Wir nutzen hier zum einen die Funktion `coord_flip()` um ganz zum Schluss die Abbildung zu drehen. Deshalb musst du aufpassen, denn vor dem Flippen ist ja alles auf der $y$-Achse die $y$-Achse und umgekehrt. Deshalb müssen wir dann auch teilweise die Ordnung der Level in den einzelnen Faktoren drehen, damit wir wieder die richtige Reihenfolge *nach* dem Flip haben. Wir müssen ganz am Anfang einmal `scale_x_discrete()` setzen, damit wir den Zielbereich als erstes einzeichnen können. Sonst ist der Zielbereich nicht ganz hinten in der Abbildung und überdeckt die Balken. Deshalb ist das Wort "Zielbereich" auch recht weit hinten im Code, damit es eben im Vordergrund ist. Sonst ist eigentlich vieles gleich. Wir nutzen hier einmal das R Paket `latex2exp` für die Erstellung der mathematischen Formeln.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac-flipped
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Balkendiagramms in `ggplot` nachgebaut. Ein extra Zielbereich ist definiert sowie die Legende in die Abbildung integriert."

ggplot(data = stat_tbl, aes(x = iod, y = mean,
                            fill = fruit)) +
  theme_minimal() +
  scale_x_discrete() +
  annotate("rect", xmin = 0, xmax = 3, ymin = 50, ymax = 100, 
           alpha = 0.2, fill = cbbPalette[6]) + 
  geom_hline(yintercept = c(25, 50, 75, 100), linetype = "dashed") +
  geom_bar(stat = "identity", position = position_dodge(0.9)) + 
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), 
                width = 0.2, position = position_dodge(0.9)) +
  labs(x = "Iodform",
       y =TeX(r"(Iodgehalt $[\mu g\, l\, (100g\, FM)^{-1}]$)")) +
  scale_fill_okabeito(name = "Frucht-\ngröße [mm]", breaks=c('65-75', '75-80')) +
  theme(legend.position = c(0.85, 0.2),
        legend.box.background = element_rect(color = "black"),
        legend.box.margin = margin(t = 1, l = 1),
        legend.text.align = 0) +
  annotate("label", x = 1.5, y = 75, label = "Zielbereich", size = 5) +
  annotate("text", x = c(0.8, 1.25, 1.8, 2.25), y = c(55, 62, 72, 102),
           label = c("a", "a", "a", "b")) +
  coord_flip() 

```

## Boxplot

Für die Boxplots müssen wir gar nicht viel tun. Wir müssen nur noch das `geom_bar()` und `geom_errorbar()` entfernen und durch das `geom_boxplot()` ersetzen. Dann haben wir auch schon unsere wunderbaren Boxplots. Das Problem sind natürlich die wenigen Beobachtungen, deshalb sehen die Boxplots teilweise etwas wild aus. Beachte auch das wir die Orginaldaten nutzen und nicht die zusammengefassten Daten. Am Ende machen Boxplots mit einer unteren Grenze mehr Sinn, wenn wir uns Fragen, ob wir einen Zielbereich erreicht haben. Da sind dann doch Balkendiagramme etwas ungeeignet.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac-flipped-box
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Balkendiagramms in `ggplot` nachgebaut. Durch den Boxplot erhalten wir auch untere Grenzen, was bei der Frage, ob wir in einem Zielbereich sind, viel sinnvoller ist, als ein Balkendiagramm. Eine höhere Fallzahl als $n=3$ würde die Boxplots schöner machen."

ggplot(data = barplot_tbl, aes(x = iod, y = iod_yield,
                               fill = fruit)) +
  theme_minimal() +
  geom_hline(yintercept = c(25, 50, 75, 100), linetype = "dashed") +
  geom_boxplot() +
  labs(x = "Iodform",
       y =TeX(r"(Iodgehalt $[\mu g\, l\, (100g\, FM)^{-1}]$)")) +
  scale_fill_okabeito(name = "Frucht-\ngröße [mm]", breaks=c('65-75', '75-80')) +
  theme(legend.position = c(0.85, 0.2),
        legend.box.background = element_rect(color = "black"),
        legend.box.margin = margin(t = 1, l = 1),
        legend.text.align = 0) +
  annotate("rect", xmin = 0, xmax = 3, ymin = 50, ymax = 100, 
           alpha = 0.2, fill = cbbPalette[6]) + 
  annotate("label", x = 1.5, y = 75, label = "Zielbereich", size = 5) +
  annotate("text", x = c(0.8, 1.25, 1.8, 2.25), y = c(55, 62, 72, 102),
           label = c("a", "a", "a", "b")) +
  coord_flip() 

```
:::
