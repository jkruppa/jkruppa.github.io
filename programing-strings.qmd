# Reguläre Ausdrücke {#sec-regular-expr}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, magrittr,
               kableExtra, conflicted)
conflict_prefer("extract", "magrittr")
```

```{r}
#| warning: false

data_tbl <- read_excel("data/flea_dog_cat_fox.xlsx") %>% 
  extract(1:3,)
```

## Regular expressions {#sec-regex}

![](images/caution.png){fig-align="center" width="50%"}

Ein regulärer Ausdruck (eng. *regular expression*, abk. *RegExp* oder *Regex*)

::: column-margin
Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. -- Jamie Zawinski
:::

[Regular expressions in stingr](https://stringr.tidyverse.org/articles/regular-expressions.html)

[Regular expressions](https://r4ds.had.co.nz/strings.html)

-   `\d`: entspricht einer beliebigen Ziffer.
-   `\s`: entspricht einem beliebigen Leerzeichen (z. B. Leerzeichen, Tabulator, Zeilenumbruch).
-   \[abc\]: passt auf a, b oder c.
-   \[\^abc\]: passt auf alles außer a, b oder c.

::: column-margin
[Regular Expressions Cheat Sheet by DaveChild](https://cheatography.com/davechild/cheat-sheets/regular-expressions/)
:::

Denk daran, dass du, um einen regulären Ausdruck zu erstellen, der `\d` oder `\s` enthält, das `\` für die Zeichenkette ausschließen musst, also gib `\\d` oder `\\s` ein.

```{r}
data_tbl %>% 
  select(matches("_"))
```

```{r}
data_tbl %>% 
  select(one_of("animal", "grade"))
```

Beachte auch folgende Funktionen [Overview of selection features](https://tidyselect.r-lib.org/reference/language.html)

-   `all_of`,
-   `any_of`,
-   `contains`,
-   `starts_with`
-   `ends_with`,
-   `everything`,
-   `last_col`,
-   `num_range`,

[Tools](https://r4ds.had.co.nz/strings.html#tools)

## Das R Paket `stringr` {#sec-stringr}

Das R Paket [`stringr`](https://stringr.tidyverse.org/) und das [Cheat Sheet zu `stringr`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf) geben eine große Übersicht über die Möglichkeiten ein `character` zu bearbeiten.

Im Folgenden schauen wir uns einmal einen simplen Datensatz an. Wir wollen auf dem Datensatz ein paar Funktionen aus dem R Paket `stringr` anwenden.

```{r}
regex_tbl <- tibble(animal = c("cat", "cat", "dog", "bird"),
                    site = c("village", "village", "town", "cities"),
                    time = c("t1_1", "t2_2", "t3_3", "t3_5"))
```

Die einfachste und am meisten genutzte Funktion ist `str_c()`. Die Funktion `str_c()` klebt verschiedene Vektoren zusammen. Wir können auch Zeichen wählen, wie das `-`, um die Vektoren zu verbinden.

```{r}
regex_tbl %>% 
  mutate(animal_site = str_c(animal, "-", site))
```

Häufig brauchen wir auch eine ID Variable, die exakt $n$ Zeichen lang ist. Hier können wir die Funktion `str_pad()` nutzen um Worte auf die Zeichenlänge `width =` zu verlängern. Wir können auch das Zeichen wählen, was angeklebt wird und die Seite des Wortes wählen an die wir kleben wollen.

```{r}
regex_tbl %>% 
  mutate(village_pad = str_pad(site, pad = "0", 
                               width = 8, side = "left"))
```

Abschließend können wir auch eine Spalte in zwei Spalten aufteilen. Dafür müssen wir den Separator wählen nachdem die Spalte aufgetrennt werden soll. Wir können eine Spalte auch in mehrere Spalten aufteilen, wenn der Separator eben an zwei oder mehr Stellen steht.

```{r}
regex_tbl %>% 
  separate(time, into = c("time", "rep"), 
           sep = "_", convert = TRUE)
```

Es gibt noch sehr viel mehr Möglichkeiten einen `character` Vektor zu bearbeiten. Teilweise nutze ich `stringr` bei der [Auswertung von den Beispielen](#sec-beispiel-auswertung) im Anhang. Schau dir da mal um, dort wirst du immer mal wieder die Funktionen aus dem Paket finden.
