```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Quarto und Shiny App {#sec-quarto-shiny}

*Letzte Änderung am `r format(fs::file_info("programing-quarto-shiny.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"You have to be creative to do science. Otherwise you're just repeating tired old formulas. You arent't doing anything new." --- Steven Hawking*

![](images/caution.png){fig-align="center" width="50%"}

Ja und jetzt wird es wirklich wild. Wir schauen hinter den Vorhang der Bühne. Denn du liest ja hier, was ich in R Quarto geschrieben habe. Also ich nutze wirklich R Quarto um diese Webseite hier in R und Quarto zu erstellen. Gut ich lade dann noch alles bei [Github](https://github.com/) hoch, aber am Ende ist es wirklich nicht schwer. Denn wenn es wirklich schwer wäre, dann hätte ich es auch nicht hinbekommen. Was Webseiten programmieren und so ein Zeug angeht, habe ich nämlich Null Ahnung. Das was du hier alles siehst, macht R Quarto für mich. Und das ist ganz phantastisch.

Eine andere Sache, dir wir uns auch noch anschauen wollen, ist im Prinzip ein interaktive Visualisierung. Wir können nämlich R Shiny nutzen um reponsive (deu. *reagierend*) Abbildungen und Tabellen zu erstellen. Der vollständige Name lautet Shiny Web App, aber ich kürze gerne auf R Shiny ab. Wir können also eine Webseite mit Reglern bauen, die es uns dann ermöglichen die Abbildungen und Tabellen anhand der Einstellung am Regler sekündlich zu ändern. Das ermöglicht Dritten dann deine Auswertung auch mit einem anderen Subset deiner Daten durchzuführen oder aber sich etwas anderes in den Daten anzuschauen. Insbesondere für die Darstellung von großen Datenbanken mit Temperatur, Gewächshaustyp und Pflanzenarten ergibt sich hier ganz neue Möglichkeiten. Du findest dann den Code für alle Shiny Apps auf <https://github.com/jkruppa/shiny>.

Abschließend sei noch gesagt, dass du dann natürlich mit CSS Dateien das Look & Feel der Shiny App oder aber der Quarto Webseiten beliebig einem anderen Design anpassen kannst. Wenn du also mal später für eine Firma arbeitest, kannst du die Shiny Apps sicherlich passend in die Oberfläche einer Firmenwebseite einbauen. Die Farben und das Aussehen lässt sich dann beliebig über eine CSS Datei anpassen. Dazu dann aber auf der Hilfeseite [Using custom CSS in your app](https://shiny.posit.co/r/articles/build/css/) als möglicher Einstieg für die Umgestaltung einer Shiny App. Ich selber kenne mich mit CSS nicht aus.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, readxl, 
               janitor, see, directlabels,
               conflicted)
conflicts_prefer(dplyr::filter)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## R Quarto

Was du hier siehst ist in R Quarto geschrieben. Damit ist es recht schwer für mich dir hier in diesem Text zu zeigen, wie der Text strukturell aufgebaut ist. Dafür gibt es die tolle Hilfsseite [Welcome to Quarto](https://quarto.org/), die dir da sehr viel weiter hilft. In der folgenden @fig-quarto-shiny-04 siehst du einmal, wie du ein neues Quarto Dokument erstellst. Wir gehen hier nicht den ganzen Prozess durch, dafür gibt es dann am Ende noch ein YouTube Video.

![Um eine neues R Quarto Dokument zu erstellen klicken wir einmal auf das '+' oben links und wählen dann `Quarto Document...` aus.](images/quarto_shiny_02.png){#fig-quarto-shiny-04 fig-align="center" width="30%"}

In der @fig-quarto-shiny-05 siehst du dann das nächste Fenster, indem du dann den Titel des Dokuments und dich als Autor eintragen kannst. Darüber hinaus auch noch das Ausgabeformat. Richtig, du kannst hier auch gleich MS Word wählen. Ich nehme dann meistens HTML aber auch PDF funktioniert für mich gut. Du kannst dann aber später jederzeit die Ausgabe ändern! Du bist hier nicht an einen Typ gebunden, das ist ja das Schöne. Ein Skript, viele Ausgabenmöglichkeiten.

![Um .](images/quarto_shiny_04.png){#fig-quarto-shiny-05 fig-align="center" width="70%"}

Im Folgenden einmal die Links zu den einzelnen Kapiteln der [Hilfeseite von Quarto](https://quarto.org/), die dich dann direkt zu den entsprechenden Seiten bringen.

-   [Creating a Document](https://quarto.org/docs/output-formats/html-basics.html) --- hier einmal als Einstieg das HTML Dokument, aber du kannst natürlich auch zu den anderen Dokumenttypen leicht wechseln. Ein Dokument kannst du dann als Word erstellen und mit diesem Dokument und den erstellten Tabellen weiterarbeiten. Eine gute Möglichkeit um mal einen Projektbericht zu schreiben.\
-   [Creating a Presentation](https://quarto.org/docs/presentations/) --- hier einmal die Möglichkeit um eine Präsentation zu erstellen. Und verrückterweise gehen sogar Power Point Präsentationen. Ich habe selber noch nicht PowerPoint mit R kombiniert. Daher weiß ich auch noch nicht wie sich das dann mit R verhält.\
-   [Creating a Website](https://quarto.org/docs/websites/) --- hier einmal die Erstellung einer Webseite. Muss nicht R zusammen sein. Aber ich finde es ist ein angenehmer Weg um seine Ergebnisse anderen öffentlich zu präsentieren. Es gibt hier sicherlich auch die Möglichkeit, den Zugriff auf die Webseite zu begrenzen, so dass Google und Co. die Webseite nicht finden.
-   [Creating a Book](https://quarto.org/docs/books/) -- hier einmal die Erstellung eines Buches. Das was du hier gerade liest, ist mit dem Template eines Buches in R Quarto erstellt. Ja, du besuchst die Seite über einen Brwoser, aber die grundlegende Struktur ist die eines Buches. Theoretisch könnte ich den Text hier auch als E-Book exportieren. Dafür ist dann aber leider hier alles zu groß geworden.

Die Stärke von R Quarto kommt natürlich zu tragen, wenn wir die Analysen oder die deskriptive Statistik in einem Dokument zusammen erstellen können. Die deskriptiven Tabellen können wir leicht mit dem R Paket `modelsummary` oder `gtsummary` erstellen. Ich zeige die Erstellung einmal exemplarisch in dem Kapitel zur deskriptiven Statistik in dem Abschnitt zur [Automatisierten Tabellenerstellung in R](#sec-automated-table). Neben den beiden vorgestellten gibt es natürlich auch [Alternativen zu `gtsummary` und `modelsummary`](https://modelsummary.com/index.html#alternative-packages). Da müsstest du dann aber mal selber schauen oder mich direkt Fragen. Wie immer gibt es in R nicht nur die eine Möglichkeit eine Tabelle zu erstellen.

::: callout-tip
## Hier kommt das Video

![](images/caution.png){fig-align="center" width="25%"}
:::

## R Shiny App

Vor gar nicht allzu langer Zeit sprach ich mit einer Freundin aus meiner eigenen Studentenzeit, die jetzt bei einer großen Pharmafirma arbeitet, über R und die Anwendung von R bei ihr in der Firma. Wie sich herausstellte ist dort R Shiny sehr beliebt. Die Statistiker oder jetzt Data Scientist und Data Analyst arbeiten dort die Datenmengen in R Shiny Apps auf, so dass dann die Anderen in der Firma dann leichter an den Daten rumschrauben können. Das erspart allen sehr viel Arbeit, den fixierte Berichte müssen bei jeder Änderung ja wieder neu gemacht werden.

Deshalb kann ich nur sagen: [Welcome to Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html). Wenn du wirklich jemanden mit deiner Analyse von Daten beeindrucken willst, dann nutze R Shiny. Auf der anderen Seite gibt es manchmal Datensätze mit so vielen Subgruppen oder aber anderen Messwerten, dass ich immer gar nicht weiß, was ich alles in einer statischen Abbildung reinpacken soll. Da ist mir dann eine dynamische Abbildung hundertmal lieber. Ich kann auch hier nur die groben Umrisse liefern. Mehr erfährst du dann in dem Video zur Erstellung einer Shiny App. Aber wie immer, einfach mal selber ausprobieren. Du kannst wirklich mit wenig Aufwand richtig gute interaktive Webtools erschaffen.

Eine R Shiny App besteht immer aus zwei Teilen. Du hast immer die `ui` und einmal den `server` vorliegen. Das ist wichtig sich zu vergewissern. Gerade für Neulinge ist es dann immer etwas schwer, eine Idee davon zu entwickeln, was diese beiden Konzepte sein sollen. Deshalb hier nochmal zusammengefasst.

-   `ui`: Hier liegt alles drin, was du an Reglern und Oberfläche brauchst. Die `ui` beschreibt, was du siehst, wenn du eine Shiny App startest. Hier arbeitest du selber mit der Shiny App. Welche Regler da sind und wie die Shiny App aufgebaut ist, findets du in der `ui`.
-   `server`: Hier liegen die Funktionen drin. Der `server` erstellt die Abbidlungen oder die Tabellen. Keine Angst, es handelt sich um ganz normalen R Code, der aber im Hintergrund die interaktiven Abbildungen erstelt. Du baust also hier das Grundgerüst für die Abbdilungen und Tabellen. Auch deine Bearbeitung der Daten machst du hier.

In der @fig-quarto-shiny-01 siehst du den Zusammenhang zwischen der `ui` und dem `server` in einer komplexeren R Shiny App einmal dargestellt. Komplex meint hier aber, dass wir die Shiny App auf zwei Dateien `ui.R` und `server.R` aufteilen. Ich habe dir in der Abbildung einmal farblich dargestellt, wie die Verbindungen so sind.

### Shiny App in RStudio

Das tolle an der R Shiny App ist, dass wir alles im RStudio bauen können. In der @fig-quarto-shiny-02 siehst du einmal, wie du eine Shiny Web App einfach erstellen kannst. Wir gehen hier nicht den ganzen Prozess durch, sondern ich gehe wie immer auf die häufigsten Probleme einmal ein. Hier gibt es aber nicht so viele davon, eher Geschmacksfragen.

![Um eine neue R Shiny Web App zu erstellen klicken wir einmal auf das '+' oben links und wählen dann `Shiny Web App...` aus.](images/quarto_shiny_02.png){#fig-quarto-shiny-02 fig-align="center" width="30%"}

Jetzt öffnet sich ein neues Fenster und du kannst den Namen deiner Shiny App eintragen. Hier ist es wichtig, sich schon für einen guten Namen zu entscheiden, später wird der Name auch Teil der Webadresse mit dem du dann die Shiny App aufrufst. Natürlich nur unter der Annahme, dass du deine Shiny App ins Internet stellst. Du kannst die Shiny App auch nur privat auf deinen Rechner laufen lassen. Nochmal, der Name des Ordners bestimmt den Namen deiner Shiny App, nicht der Name der R Datei oder Sonstiges was du angibst.

Jetzt muasst du dich noch entscheiden, ob deine Shiny App eher klein wird, dann nutze die Option `Single File (app.R)`. Dann bauen wir eine einfache App, wie ich sie gleich mal in dem ersten Abschnitt vorstellen werde. Wenn deine Shiny App komplexer wird, dann solltest du `Multiple Files (ui.R/server.R)` wählen. Du kannst aber auch später leciht aus der einen Datei dann zwei Dateien bauen. Meist fange ich immer mit einer Datei `app.R` an und schaue wie komplex die Shiny App wird.

![Wir brauchen jetzte ien Namen für die Shiny Web App Application name und müssen uns entscheiden, ob wir mit einer Datei Single file (app.R) oder mehrere Dateien Multiple File (ui.R/server.R) arbeiten wollen. In beiden Fällen wird ein neuer Ordner mit dem Namem der Shiny Web App erstellt.](images/quarto_shiny_03.png){#fig-quarto-shiny-03 fig-align="center" width="70%"}

Im Folgenden schauen wir uns also die zwei Fälle einmal an. In dem ersten Fall willst du nur eine simple Shiny App mit wenigen Funktionen und einer simplen Oberfläche für die interaktive Anwendung bauen. Im zweiten Fall haben wir es dann schon mit einem komplexeren Fall zu tun und wir spalten dann die Oberfläche (`ui.R`) von den Berechnungen (`server.R`) ab.

Nachdem wir uns dann das Standardbeispiel mit der Shiny App `Hello_Shiny` angeschaut haben, werde ich dann nochmal ein komplexeres Datenbeispiel mit Daten von [Our World in Data](https://ourworldindata.org/) zeigen. Du findest dann den Code für alle Shiny Apps auf <https://github.com/jkruppa/shiny>. Dort lagere ich alle meine Shiny Apps, wenn dich da noch mehr interessiert.

::: callout-tip
## Hier kommt das Video

![](images/caution.png){fig-align="center" width="25%"}
:::

### Einfache Shiny App

Schauen wir uns als Erstes einmal eine sehr simple R Shiny App an. Mit simple meine ich, dass wir alles in eine Datei `app.R` packen. Wir brauchen nur diese eine Datei, da wir die `ui` und den `server` in zwei Funktionen auslagern. Beide Funktion sind jedoch weiterhin in der Datei `app.R`. In der @fig-mermaid-shiny-02 siehst du den Aufbau einmal dargestellt. Wir haben daher unsere `app.R` in dem Ordner `Hello_Shiny` abliegen. Unsere Shiny App heißt dementsprechend nach dem Ordner auch `Hello_Shiny`. Die beiden Funktionalitäten der `ui` und des `server` werden durch Funktionen abgebildet.

```{mermaid}
%%| label: fig-mermaid-shiny-02
%%| fig-width: 6
%%| fig-cap: "Für eine simple Shiny App brauchen wir nur eine Datei. Hier sind die Funktionen für die `ui` und dem `server` in einer Datei `app.R` enthalten."
flowchart LR
subgraph ide1 ["~/Documents/GitHub/shiny/Hello_Shiny"]
    direction TB
    A{app.R}:::nodeA --- B("ui( )"):::nodeB 
    A{app.R}:::nodeA --- C("server( )"):::nodeB 
    end
    classDef nodeA fill:#E69F00,stroke:#333,stroke-width:0.75px
    classDef nodeB fill:#56B4E9,stroke:#333,stroke-width:0.75px
    
```

Wenn du den folgenden Kasten einmal mit den Pfeil aufklappst, denn siehst du den Inhalt der `app.R` für unsere Shiny App `Hello_Shiny`. Einfach über die Zahlen am rechten Rand fahren um meine Kommentare zu lesen. Du musst immer das Paket `shiny` laden und natürlich die anderen R Pakete die du dann verwenden willst. Faktisch ist ja eine Shiny App nichts anderes als ein R Skript. Daher hier jetzt kein tieferer Text mehr, den der Code ist ja annotiert.

::: {.callout-caution icon="false" appearance="simple" collapse="true"}
## app.R

```{r}
#| eval: false
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(  # <1>

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout( # <2>
        sidebarPanel( # <3>
            sliderInput("bins", # <4>
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel( # <5>
           plotOutput("distPlot") # <5>
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {  # <6>

    output$distPlot <- renderPlot({  # <7>
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)  # <8>

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',  # <9>
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)  # <10>
```

1.  Funktion für die Erstellung der `ui`, der Benutzeroberfläche.
2.  Start des Layouts der Shiny App.
3.  Mit einem Kontrollpanel auf der Seite.
4.  Mit einem Schieberegeler als Eingabe. Die Eingabe wird in `bins` gespeichert.
5.  Im Hauptpanel ist die Abbildung `distplot`. Die Abbildung entsteht in der `server` Funktion.
6.  Funktion für die Erstellung des Histogramms mit dem `input` aus der `ui`.
7.  Die zu erstellende Ausgabe `displot` wird ins Objekt `output` geschrieben.
8.  Hier wird dynamisch der Wert aus dem `input$bins` verwendet.
9.  Das Histogramm wird dynamisch mit sich ändernden Werten für `input$bins` generiert.
10. Die eigentliche Funktion, um eine Shiny App zu starten.
:::

Die @fig-quarto-shiny-05 zeigt dir, wie du die Shiny App starten kannst. Zum einen über Button `> Run App` direkt aus dem R Studio heraus. Dann öffnet sich ein anderes Fenster und R friert ein. Du kannst während eine Shiny App läuft nicht in R programmieren. Beende dafür erst die Shiny App durch das schließen des Fensters. Die zweite Möglichkeit ist, die Shiny App zu veröffentlichen. Die Veröffentlichung findet auf <https://www.shinyapps.io/> statt und du musst dich dort erst anmelden. Dann kannst du dein RStudio über einen Tocken mit der Webseite verbinden. Es gibt einen kostenlosen Account, der eine sehr begrenzte Laufzeit der Apps erlaubt. Daher immer die Shiny Apps auf dem Dashboard von <https://www.shinyapps.io/> stoppen und auf `Sleeping` setzen. Das Schöne ist jetzt, dass du über einen Browser weltweit auf die Shiny App zugreifen kannst.

![Mit dem Button `> Run App` starten wir die Shiny App aus dem R Studio heraus. Wenn du auf den Pfeil nach unten klickst, dann kannst du auch andere Optionen für den Start der Shiny App wählen. Als zweite Möglichkeit auf den Button `Publish` rechts neben `> Run App` klicken.](images/quarto_shiny_05.png){#fig-quarto-shiny-05 fig-align="center" width="40%"}

In der @fig-quarto-shiny-06 siehst du jetzt das Ergebnis der gestarteten Shiny App `Hello_Shiny`. Auf der rechten Seite siehst du den Regler, der die Anzahl an `bins` definiert. Hier sind die `bins` die Anzahl an Säulen in dem Histogramm. Alles was du hier siehst, wird in der `ui` definiert. Der R Code für die dynamische Erstellung des Histogramms ist dann in dem `server` zu finden. Ja, es ist etwas ironisch, dass ich hier eine dynamische Webseite mit einem Screenshot darstelle.

![Ausgabe der `Hello_Shiny` Shiny App. Etwas sinnlos eine dynamische App durch einen Screenschots darzustellen . Aber so sieht dann diese sehr simple App aus.](images/quarto_shiny_06.png){#fig-quarto-shiny-06 fig-align="center" width="100%"}

Und damit haben wir unsere R Shiny App auch schon fertig. Das war jetzt das Beispiel für eine Shiny App in einer Datei. Jetzt schauen wir uns das Ganze nochmal an, wenn wir eine komplexere Shiny App bauen würden.

### Komplexere Shiny App

Im Folgenden schauen wir uns eine komplexere Shiny App an. Die Shiny App ist selber die gleiche wie eben schon, nur das wir die `ui` und den `server` auf zwei Dateien aufteilen sowie den Aufruf der Shiny App dann in eine dritte Datei auslagern. Das macht dann Sinn, wenn die `ui` sehr groß wird oder aber du noch sehr viel ändern möchtest. Schnell wird dann mal eine Datei sehr unübersichtlich. Das gleiche gilt dann auch für den `server` schnell hast du so viele Funktionen, da macht es dann Sinn, die Funktionen in eine Extradatei auszulagern. Wenn du die Shiny App aus dem RStudio startest, dann brauchst du die `app.R` mit der Funktion `runApp()` nicht, dann starte die Shiny App aus der `ui.R` Datei. In der @fig-mermaid-shiny-01 siehst du den Zusammenhang nochmal schematisch dargestellt.

```{mermaid}
%%| label: fig-mermaid-shiny-01
%%| fig-width: 6
%%| fig-cap: "Für eine komplexere Shiny App brauchen wir drei Dateien. Deshalb ist es immer gut eine Ordnerstruktur zu haben. Hier liegen unsere Dateien `ui.R`, `server.R` und `app.R` im Ordner `Hello_Shiny`."
flowchart LR
    subgraph ide1 ["~/Documents/GitHub/shiny/Hello_Shiny"]
    direction LR
    B[(ui.R)]:::nodeB --> A{app.R}:::nodeA 
    C[(server.R)]:::nodeB --> A{app.R}:::nodeA
    end
    classDef nodeA fill:#E69F00,stroke:#333,stroke-width:0.75px
    classDef nodeB fill:#56B4E9,stroke:#333,stroke-width:0.75px
    
```

Wir du im Folgenden siehst, besteht die Datei `app.R` nur noch aus dem Aufruf `runApp()`. Mit der Funktion `runApp()` startest du dann die Shiny App, die sich in dem entsprechenden Orderpfad befindet. Damit ist eigentlich schon alles gesagt, die Funktion `runApp()` sucht sich dann die `ui.R` und die `server.R` und startet die Shiny App. Deshalb müssen auch unbedingt die beiden Dateien `ui.R` und `server.R` in dem Ordner `Hello_Shiny` liegen. Hier hast du keine Wahl über den Namen der Datei. Alles andere kann natürlich auch noch im Ordner liegen, wie zum Beispiel zusätzliche Daten oder aber ausgelagerte Funktionen, die erst in der Datei `server.R` geladen werden.

::: {.callout-caution icon="false" appearance="simple" collapse="false"}
## app.R

```{r}
#| eval: false
library(shiny)

runApp("~/Documents/GitHub/shiny/Hello_Shiny")
```
:::

::: {.callout-note icon="false" appearance="simple" collapse="true"}
## ui.R

```{r}
#| eval: false
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)
```
:::

::: {.callout-note icon="false" appearance="simple" collapse="true"}
## server.R

```{r}
#| eval: false
# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#007bc2", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}
```
:::

In der @fig-quarto-shiny-01 ist nochmal die Vernetzung der beiden Dateien `ui.R` und der `server.R` dargestellt. Ich stelle mir die Sachen auch gerne als Abbildung dar, wenn ich eine Shiny App plane. Natürlich nicht als fertige App sondern als Skizze auf einem guten, alten Blattpapier. Du siehst hier sehr gut, wie die Option `input$bins` aus der `ui.R` in die `server.R` weitergeleitet werden. Hier ist eigentlich der Witz, isch klar zu machen, was wir wie weiterleiten. In Shiny gibt es eine Reihe von Slidern und Möglichkeiten einen Input zu generieren. In der `server.R` entsteht dann als Ausgabe das Histogramm, was über den `output$distPlot` wieder an die `ui.R` zurückgegebenen wird.

![Zusammenhang zwischen der `ui.R` und der `server.R`. Die `ui.R` bildet die Oberfläche ab auf der sich die Regler befinden. Die geänderten Reglerinformationen werden über `input` dann in der `server.R` Datei verarbeitet und als `ouput` wieder an die `ui.R` wiedergeben. Dann ändert sich die Wiedergabe.](images/quarto_shiny_01.png){#fig-quarto-shiny-01 fig-align="center" width="100%"}

### Best practice

Wie baut man nun am besten eine Shiny App? Da gibt es wie immer viele Wege nach Rom. Ich beschreibe dir einfach meine Gedankengänge bei der Entwicklung einer Shiny App. Je mehr Apps du dann natürlich machst, desto einfacher fällt dir die Geneierung.

1.  Baue immer erst die `ui` auf und achte darauf, dass du in der Shiny App alles siehst. Du baust dir am besten als erstes das Layout. *Ohne* eine Verbindung zu dem `server`. Du kannst ja einfach eine statische Abbildung erstellen lassen. Sonst weiß man immer nicht wo der Fehler herkommt.
2.  Beginne immer mit einem `input` und erweitere dann immer Schritt für Schritt die anderen Eingabeparameter. Ich kommentiere mir im Zweifel dann die `input`s mit dem `#` aus, damit ich immer nur an einem Regler und dessen Input arbeite.
3.  Erstelle die Ausgabegrafik oder Tabelle erstmal als statische `ggplot` Abbildung oder eben als Tabelle. In einer Shiny App etwas zu bauen, ist wirklich sehr anstrengend und zäh.
4.  Suche dir bei Google oder StackOverflow mit `R shiny <suchbegriff>` die passende Hilfe. Es gibt eigentlich nichts, was nicht geht, aber wir müssen dann eben die Lösung auch finden.
5.  Es kann Sinn machen erstmal die Shiny App in nur *einer* Datei zu bauen und dann später in `ui.R` und `server.R` aufzuspalten. Dann hast du beides in einer Datei und musst nicht zwischen den Tabs hin und her wechseln.

Am Ende ist es wie bei jedem Best practice, es kommt auf dich an und wie du programmierst. Lass dich nur nicht frsutrieren, die Verkettung von verschiedenen Funktionen macht natürlich auch eine Shiny App etwas fehleranfälliger bei der Entwicklung.

## Our World in Data

[Our World in Data](https://ourworldindata.org/)

[Global emissions have not yet peaked](https://ourworldindata.org/co2-and-greenhouse-gas-emissions#global-emissions-have-not-yet-peaked)

Oh, was für ein Segen hier dann `clean_names()` aus dem R Paket `janitor` ist.

```{r}
#| message: false
#| warning: false
co2_tbl <- read_csv("data/annual-co-emissions-by-region.csv") %>% 
  clean_names()
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-shiny-01
#| tbl-cap: "sdsd."

co2_tbl %>% 
  head(7) %>% 
  kable(align = "c", "pipe")
```

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-shiny-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "kkkn"

co2_tbl %>% 
  filter(entity %in% c("World", "Europe", "China", "Africa")) %>% 
  ggplot(aes(year, annual_co2_emissions, color = entity)) +
  theme_bw() +
  geom_line() +
  theme(legend.position = "none") +
  scale_x_continuous(expand = c(0, 30), breaks = c(seq(1750, 2021, by = 25), 2021)) +
  geom_dl(aes(label = entity), method = list(dl.trans(x = x + 0.2), "last.points", cex = 0.8))

```

::: {.callout-caution icon="false" appearance="simple" collapse="true"}
## app.R

```{r}
#| eval: false
pacman::p_load(shiny, tidyverse, magrittr, readxl, 
               janitor, see, directlabels,
               conflicted)
conflicts_prefer(dplyr::filter)

## read in the need data
co2_tbl <- read_csv("annual-co-emissions-by-region.csv") %>% 
  clean_names()

# Define UI for application that draws a histogram
ui <- fluidPage(
  
  # Application title
  titlePanel("Global emissions have not yet peaked"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      sliderInput("years",
                  "Shown years:",
                  min = 1750,
                  max = 2021,
                  step = 25,
                  value = c(1750, 2021)),
      
      selectInput("method", "Method for line:",
                  c("Linear" = "lm",
                    "Loess" = "loess",
                    "Gam" = "gam")),
      
      radioButtons("se", 
                   "Standard deviation:",
                   c("Yes" = "yes",
                     "No" = "no")),
      
    ),
    # Show a plot of the generated distribution
    mainPanel(
      plotOutput("line_plot")
    )
  )
)


# Define server logic required to draw a histogram
server <- function(input, output) {
  
  output$line_plot <- renderPlot({

    se_flag <- switch(input$se,
                      yes = TRUE,
                      no = FALSE)
    # ggplot from above with the options from `input`
    co2_tbl %>% 
      filter(entity %in% c("World", "Europe", "China", "Africa")) %>% 
      filter(year >= input$years[1] & year <= input$years[2]) %>% 
      ggplot(aes(year, annual_co2_emissions, color = entity)) +
      theme_bw() +
      geom_line() +
      stat_smooth(method = input$method, se = se_flag) +
      theme(legend.position = "none") +
      scale_x_continuous(expand = c(0, 30), breaks = c(seq(1750, 2021, by = 25), 2021)) +
      geom_dl(aes(label = entity), method = list(dl.trans(x = x + 0.2), "last.points", cex = 0.8))
    
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
:::

![Ausgabe der `co2_emissons` Shiny App. Etwas sinnlos eine dynamische App durch einen Screenschots darzustellen . Aber so sieht dann diese etwas komplexere App aus.](images/quarto_shiny_07.png){#fig-quarto-shiny-07 fig-align="center" width="100%"}
