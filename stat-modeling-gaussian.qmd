```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, patchwork)
```

# Gausian lineare Regression {#sec-gausian-reg}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               see, performance, emmeans, multcomp, scales)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Wir wollen uns erszmal mit einem einfachen Datenbeispiel beschäftigen. Wir brauchen dafür den Datensatz `flea_dog_cat_length_weight.xlsx`. In einer simplen linearen Regression schauen wir uns den Zusammenhang zwischen einem $y$ und einem $x_1$ an. Daher wählen wir aus dem Datensatz `flea_dog_cat_length_weight.xlsx` die beiden Spalten `jump_length` und `weight`. Wir wollen nun feststellen, ob es einen Zusammenhang zwischen der Sprungweite in \[cm\] und dem Flohgewicht in \[mg\] gibt. In dem Datensatz finden wir 400 Flöhe, wir wollen uns aber nur die ersten sieben Zeilen des Datensatzes zuerst anschauen.

```{r}
#| message: false

gaussian_tbl <- read_csv2("data/flea_dog_cat_length_weight.csv") %>%
  mutate(animal = as_factor(animal),
         sex = as_factor(sex))
```

In der @tbl-model-1 ist der Datensatz `gaussian_tbl` nochmal dargestellt.

```{r}
#| message: false
#| echo: false
#| tbl-cap: Datensatz mit mehreren Outcomes zu Flöhen auf verschiedenen Tierarten.
#| label: tbl-model-1

gaussian_raw_tbl <- gaussian_tbl %>% 
  mutate(animal = as.character(animal),
         sex = as.character(sex))
rbind(head(gaussian_raw_tbl),
      rep("...", times = ncol(gaussian_raw_tbl)),
      tail(gaussian_raw_tbl)) %>% 
  kable(align = "c", "pipe")

```

## Fit des Modells

```{r}
gaussian_fit <- lm(jump_length ~ animal + sex + weight, data = gaussian_tbl)
```

## Performance des Modells

```{r}
r2(gaussian_fit)
```

```{r}
check_heteroscedasticity(gaussian_fit)
```

```{r}
#| echo: true
#| message: false
#| label: fig-normal-model-check
#| fig-align: center
#| fig-height: 8
#| fig-width: 8
#| fig-cap: "Ausgabe ausgewählter Modelgüteplots der Funktion `check_model()`."

check_model(gaussian_fit, colors = cbbPalette[6:8], check = c("qq", "outliers", "pp_check", "homogeneity")) 

```

## Interpretation des Modells

```{r}
gaussian_fit %>% 
  tidy
```

## Wie weiter?

@sec-posthoc

```{r}

emmean_res <- gaussian_fit %>% 
  emmeans(~ animal, adjust = "bonferroni") 

emmean_res %>% 
  contrast(method = "pairwise")  %>% 
  tidy(conf.int = TRUE) %>% 
  select(contrast, estimate, adj.p.value, conf.low, conf.high) %>% 
  mutate(across(where(is.numeric), round, 4)) %>% 
  mutate(adj.p.value = pvalue(adj.p.value))

emmean_res %>% 
  cld(adjust = "tukey", Letters=letters, details = TRUE)

```
