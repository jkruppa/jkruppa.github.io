```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Quarto und Shiny App {#sec-quarto-shiny}

*Letzte Änderung am `r format(fs::file_info("programing-quarto-shiny.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"You have to be creative to do science. Otherwise you're just repeating tired old formulas. You arent't doing anything new." --- Steven Hawking*

![](images/caution.png){fig-align="center" width="50%"}

Ja und jetzt wird es wirklich wild. Wir schauen hinter den Vorhang der Bühne. Denn du liest ja hier, was ich in R Quarto geschrieben habe. Also ich nutze wirklich R Quarto um diese Webseite hier in R und Quarto zu erstellen. Gut ich lade dann noch alles bei [Github](https://github.com/) hoch, aber am Ende ist es wirklich nicht schwer. Denn wenn es wirklich schwer wäre, dann hätte ich es auch nicht hinbekommen. Was Webseiten programmieren und so ein Zeug angeht, habe ich nämlich Null Ahnung. Das was du hier alles siehst, macht R Quarto für mich. Und das ist ganz phantastisch.

Eine andere Sache, dir wir uns auch noch anschauen wollen, ist im Prinzip ein interaktive Visualisierung. Wir können nämlich R Shiny nutzen um reponsive (deu. *reagierend*) Abbildungen und Tabellen zu erstellen. Wir können also eine Webseite mit Reglern bauen, die es uns dann ermöglichen die Abbildungen und Tabellen anhand der Einstellung am Regler sekündlich zu ändern. Das ermöglicht Dritten dann deine Auswertung auch mit einem anderen Subset deiner Daten durchzuführen oder aber sich etwas anderes in den Daten anzuschauen. Insbesondere für die Darstellung von großen Datenbanken mit Temperatur, Gewächshaustyp und Pflanzenarten ergibt sich hier ganz neue Möglichkeiten.

## R Quarto

[Welcome to Quarto](https://quarto.org/)

## R Shiny App

[Welcome to Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html)

```{mermaid}
%%| label: fig-mermaid-basic-01
%%| fig-width: 6
%%| fig-cap: "Für eine Shiny App brauchen wir drei Dateien. Deshalb ist es immer gut eine Ordnerstruktur zu haben. Hier liegen unsere Dateien `ui.R`, `server.R` und `app.R` im Ordner `shiny_simple`."
flowchart LR
    subgraph ide1 ["/home/myWork/shiny_simple"]
    direction LR
    B[(ui.R)]:::nodeB --> A{app.R}:::nodeA 
    C[(server.R)]:::nodeB --> A{app.R}:::nodeA
    end
    classDef nodeA fill:#E69F00,stroke:#333,stroke-width:0.75px
    classDef nodeB fill:#56B4E9,stroke:#333,stroke-width:0.75px
    
```

::: {.callout-caution icon="false" appearance="simple"}
## app.R

```{r}
#| eval: false
library(shiny)

# See above for the definitions of ui and server
ui <- ...

server <- ...

shinyApp(ui = ui, server = server)
```
:::

::: {.callout-note icon="false" appearance="simple"}
## ui.R

```{r}
#| eval: false
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)
```
:::

::: {.callout-note icon="false" appearance="simple"}
## server.R

```{r}
#| eval: false
# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#007bc2", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}
```
:::

In der @fig-quarto-shiny-01 ist dargestellt.

::: column-page
![foo](images/quarto_shiny_01.png){#fig-quarto-shiny-01 fig-align="center" width="100%"}
:::
