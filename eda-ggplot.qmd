# Visualisierung von Daten {#sec-eda-ggplot}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")


```

[Wir nennen eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche zu tun.]{.aside}

Ein wichtiger Teil in der Analyse von Daten ist die Visualisierung. Wir glauben keine Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbilungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen Y und X gibt. Wir haben ein $y$ vorliegen, was wir auf die y-Achse eines Graphen legen und daneben dann mehrere Variablen bzw. Spalten die wir $x$ nennen. Eine der Variablen legen wir auf die x-Achse des Graphen. Nach den anderen $x$ färben wir die Abbildung ein.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, 
               janitor, see, patchwork)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Grundlagen in ggplot()

[Im Gegensatz zu dem Pipe-Operator `%>%` nutzt ggplot den Operator `+` um die verschiedenen ggplot Funktionen (`geom_`) miteinander zu verbinden.]{.aside}

Wir nutzen in R das R Paket `ggplot2` um unsere Daten zu visualisieren. Die zentrale Idee von `ggplot2` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Das Konzept von `ggplot2`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `ggplot2` zu visualisieren...

::: callout-tip
## Grundlagen von ggplot() im Video

Du findest auf YouTube [Einführung in R - Teil 16.0 - Trockenübung ggplot2 simpel und einfach erklärt](https://youtu.be/SGwSVzJ9C-s) als Video.

Sowie auch auf YouTube [Einführung in R - Teil 16.1 - Abbildungen mit ggplot in R erstellen. Idee und Konzept von ggplot](https://youtu.be/SRRQQO3DXtc) als Video. Also alles nochmal als Video - vielleicht einfacher nachzuvollziehen als in einem Fließtext.
:::

Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot` für die Erstellung von Boxplots, das `geom_histogram` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an.

### Datenbeispiel

Wir importieren den Datensatz `flea_cat_dog.xlsx` und wollen einzelne Variablen visualisieren. Wir kennen den Datensatz schon aus dem @sec-example-2. Dennoch nochmal hier der Datensatz in @tbl-cat-dog-ggplot.

```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal))
```

[Spaltennamen sind in **Englisch** und haben **keine Leerzeichen**. Die Funktion `clean_names()` aus dem R Paket `janitor` ist hier eine Hilfe.]{.aside}

Im folgenden ist es wichtig, dass du dir die Spaltennamen merkst. Wir können nur die exakten, wortwörtlichen Spaltennamen verwenden. Sonst erhalten wir einen Fehler. Deshalb haben wir auch keine Leerzeichen in den Spaltennamen.

```{r}
#| echo: false
#| label: tbl-cat-dog-ggplot
#| tbl-cap: "Beispieldatensatz für Eigenschaften von Flöhen von zwei Tierarten."

flea_dog_cat_tbl %>% kable(align = "c", "pipe")
```

### Erste Abbildung in ggplot()

Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`).

```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` bennent den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die x-Achse soll, was auf die y-Achse soll sowie ob es noch andere Faktoren in den Daten gibt.
    -   `x` braucht den Spaltennamen für die Variable auf der x-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der y-Achse.

[**Faktoren** meint hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor`erschaffen haben.]{.aside}

```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir sehen, dass wir nichts sehen in @fig-ggplot-1. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen.

## Häufig verwendete Abbildungen

In diesem Kapitel wollen wir durch die häufigsten und wichtigsten Abbildungen in der explorativen Datenanalyse durchghen. Das wären im folgenden diese Abbildungen:

-   **Histogramm** in @sec-eda-histogramm für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   **Boxplot** in @sec-eda-boxplot für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable.
-   **Barplot** in @sec-eda-barplot für 5 und mehr Beobachtungen (pro Gruppe). Der Barplot oder das **Balkendiagramm** stellt den Mitelwert und die Standardabweichung da.
-   **Dotplot** in @sec-eda-dotplot für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   **Scatterplot** in @sec-eda-scatter für zwei kontinuierliche Variablen. Auch **xy-Plot** genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   **Mosaicplot** in @sec-eda-mosaic für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.

[Konkret ist eine **Variable** gleich einer **Spalte** in einem Datensatz.]{.aside}

::: callout-tip
## Histogramm, Boxplot, Scatterplot und Mosaicplot im Video

Du findest auf YouTube [Einführung in R - Teil 16.2 - Histogramm, Boxplot, Scatterplot und Mosaicplot mit ggplot in R](https://youtu.be/Zdw6NlLauNw) als Video. Weitere Videos werden dann noch folgen und ergänzt.
:::

### Histogramm {#sec-eda-histogramm}

{{< include eda-ggplot-histogram.qmd >}}

### Boxplot {#sec-eda-boxplot}

{{< include eda-ggplot-boxplot.qmd >}}

### Barplot oder Balkendiagramm {#sec-eda-barplot}

Der Barplot oder das Balkendiagramm ist eigentlich veraltet. Wir haben mit dem Boxplot eine viel bessere Methode um eine Verteilung und *gleichzeitig* auch die Gruppenunterschiede zu visualisieren. Warum nutzen wir jetzt so viel den Braplot? Das hat damit zu tun, dass früher - oder besser bis vor kurzem - in Excel kein Boxplot möglich war. Daher nutzte jeder der mit Excel seine Daten auswertet den Barplot. Und was der Bauer nicht kennt...

::: column-margin
1.  Alles was es schon gab, als Du geboren wurdest, ist normal und gewöhnlich. Diese Dinge werden als natürlich wahrgenommen und halten die Welt am Laufen.
2.  Alles was zwischen Deinem 16ten und 36ten Lebensjahr erfunden wird ist neu, aufregend und revoltionär. Und vermutlich kannst Du in dem Bereich sogar Karriere machen.
3.  Alles was nach dem 36ten Lebensjahr erfunden wird ist gegen die natürliche Ordnung der Dinge.

-- Douglas Adams aus *Per Anhalter durch die Galaxis*
:::

Deshalb ist hier auch der Barplot dargestellt. Ich persönlich mag den Barplot übrhaupt nicht. Der Barplot ist einfach schlechter als der Boxplot. Aber gut, häufog musst du den Barplot in deiner Abschlussarbeit machen. Also dann hier der Barplot.

Wie erstellen wir nun einen Barplot in R? Zuerst laden wir die Daten mit der Funktion `read_excel()` in R, wenn du die Daten als `.xlsx` Datei vorliegen hast. Im @sec-programming-import kannst du nochmal das Importieren von Daten wiederholen.

```{r}
#| message: false
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

Wir müssen jetzt für `ggplot()` noch den Mittelwert und die Streuung für die Gruppen berechnen. Ein komplexeres Beispiel für einen Barplot findets du in @sec-beispiel-auswertung. Du kanst als Streuung die Standardabweichung oder den Standardfehler nehmen. Ich würde die Standardabweichung bei kleinen Fallzahlen kleiner als 20 Beobachtungen nehmen.

```{r}
stat_tbl <- flea_dog_cat_tbl %>% 
  group_by(animal) %>% 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length),
            se = sd/sqrt(n()))
```

Wir nutzen nun das Objekt `stat_tbl` um den Barplot mit der Funktion `ggplot()` zu erstellen. Dabei müssen wir zum einen schauen, dass die Balken nicht übereinander angeordnet sind. Nebeneinander angeordnete Balken kriegen wir mit der Option `stat = "identity"` in dem `geom_bar()`. Dann müssen wir noch die Fehlerbalken ergänzen mit dem `geom_errorbar`. Hier kann nochmal mit der Option `width =` an der Länge der Fehlerenden gedreht werden.

```{r}
#| message: false

ggplot(stat_tbl, aes(x = animal, y = mean, fill = animal)) + 
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                  width = 0.2)
```

Im Zweifel muss du nochmal googlen und schauen welche Form dir am besten zusgat. Es gibt sehr viele Möglichkeiten einen Barplot zu erstellen. Daher komm im Zweifel einmal ins R Tutorium.

### Dotplot {#sec-eda-dotplot}

{{< include eda-ggplot-dotplot.qmd >}}

### Scatterplot {#sec-eda-scatter}

Der Scatterplot wird auch xy-Plot genannt. Wir stellen in einem Scatterplot zwei kontenuierliche Variablen dar. Dann wollen wir eine Linie durch die Punkte legen. Im Prinzip fragen wir uns, wie hänge die Werte auf der y-Achse von den Werten auf der x-Achse ab? Wenn sich also die Werte auf der x-Achse erhöhen, wie verhalten sich dann die Werte auf der y-Achse?

```{r }
#| echo: true
#| message: false
#| label: fig-scatter-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und der Anzahl an Flöhen auf den 39 Hunden. Jeder Punkt stellt einen Hund dar."

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_bw() +
  labs(x = "Anzahl der Flöhe", y = "Sprungweite in [cm]") 

```

@fig-scatter-flea-0 zeigt den Scatterplot für die Spalte `flea_count` auf der x-Achse und `jump_length` auf der y-Achse. Mit der Funktion `geom_point()` können wir die Punktepaare für jede Beobachtung zeichnen. In unserem Fall zeichnen wir mit der Funktion `stat_smooth()` noch die entsprechende Grade durch die Punkte. Es handelt sich hierbei um eine Regression. Du kannst im Kapitel XX mehr darüber erfahren.

### Mosaic Plot {#sec-eda-mosaic}

Wenn wir zwei Spalten visualisieren wollen, die aus zwei Faktoren bestehen mit jeweils zwei Leveln, dann nutzen wir den Mosaic Plot. Wir nutzen den Datensatz `flea_dog_cat.xlsx` mit vierzehn Beobachtungen. Schauen wir uns einmal die 2x2 Kreuztabelle der beiden Spalten `animal` and `infected` an.

```{r}
flea_dog_cat_tbl %>%
  mutate(animal = factor(animal, levels = c("dog", "cat"))) %>% 
  tabyl(animal, infected) 
```

Wir sehen in der Tabelle, dass wir mehr uninfizierte Tiere (n = 9) als infizierte Tiere haben (n = 5). Die Aufteilung zwischen den beiden Tierarten ist nahezu gleich. Im folgenden wollen wir diese Tabelle durch einen Mosaic Plot einmal visualisieren.

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-mosaic-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Visualisierung einer 2x2 Tabelle als Mosaic Plot. Die unterschiedlich großen Flächen geben die Verhältnisse wieder."

ggplot(data = flea_dog_cat_tbl) +
  geom_mosaic(aes(x = product(animal, infected), fill = animal)) 

```

@fig-mosaic-flea-0 zeigt den Mosaic Plot für die Variable `animal` and `infected`. Die untrschiedlich großen Flächen bilden die Verhältnisse der 2x2 Tabelle ab. So sehen wir, dass es mehr uninfizierte Tiere als infizierte Tiere gibt. Am meisten gibt es uninfizierte Katzen. Am wenigstens treten infizierte Katzen auf.

## Überschriften, Achsen und Legenden

Wenn du mehr machen willst, also die Überschriften anpassen oder aber die Achsenbeschriftung ändern, dann gibt es hier global Hilfe im [ggplot Manual](https://ggplot2.tidyverse.org/reference/index.html). Die Webseite [R Cookbook](https://ggplot2.tidyverse.org/reference/index.html) hat auch spezielle Hilfe für ggplot().

-   [Überschriften von Abbildungen](http://www.cookbook-r.com/Graphs/Titles_(ggplot2)/)
-   [Achsenbeschriftung](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/)
-   [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/)
-   [Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)

[Im @sec-r-tutorium findest du Informationen zum R Tutorium, wann und wo es stattfindet.]{.aside}

In @fig-labels-0 siehst du eine Abbildung mit Titel und veränderten Beschriftungen. Die Möglichkeiten sind nahezu unbegrenzt und sprengen auch hier den Rahmen. Im Zweifel im R Tutorium vorbeischauen oder aber in der Vorlesung fragen.

```{r }
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung mit Titel und geänderter Achsenbeschrittung"


ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha") +
  scale_x_discrete(labels = c("Katze", "Hund")) +
  scale_fill_discrete(name = "Behandlung", labels = c("Katze", "Hund")) +
  theme_bw() 

```

## Die Okabe-Ito Farbpalette

::: column-margin
Mehr zum R Paket `see` auf der [Hilfeseite des Paketes](https://easystats.github.io/see/index.html)
:::

Neben den klassischen Farben im R Paket `ggplot`gibt es noch weit, weit mehr Farbpaletten. Wir nutzen in der Folge immer wieder die Okabe-Ito Farbpalette aus dem R Paket `see`. Die Okabe-Ito Farbpalette ist speziell so gebaut, dass die Farben sich gut für farbenblinde Personen unterscheiden. Der Kontrast zwischen den Farben ist sehr gut. Wenn du eine andere Farbpalette nutzen willst, findest du hier noch andere [Color Scales](https://easystats.github.io/see/articles/seecolorscales.html).

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Boxplots."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           fill = animal)) +
  geom_boxplot() +
  scale_fill_okabeito() +
  theme_bw()
```

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Punkte."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```

## Abbildungen nebeneinander

Das [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) erlaubt es mehrere `ggplot` Abbildungen nebeneinander oder in einem beliebigen Layout miteinander zu verbinden. Das tolle ist, dass die Idee sehr intutiv ist. Wir nutzen wieder das `+` um verschiedene Plots miteinander zu verbinden.

Im Folgenden erschaffen wir uns zwei `ggplots` und speichern die Plots in den Objekten `p1` und `p2`. Das ist wie wir es bisher kennen, nur das jetzt keine Abbildung erscheint sondern beide Plots in zwei Objekten gespeichert sind.

```{r}
#| warning: false
#| echo: true
#| message: false

p1 <- ggplot(data = flea_dog_cat_tbl, 
             aes(x = flea_count, y = jump_length,
                 color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()

p2 <- ggplot(data = flea_dog_cat_tbl, 
                aes(x = animal, y = jump_length,
                    color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```

Wie können wir nun die beiden Abbildungen nebeneinander zeichnen? Wir nutzen einfach das `+` Symbol.

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-patchwork-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 9
#| fig-cap: "Beispielhafte Abbildung der zweier Plots nebeneinander."

p1 + p2
```

Auf der Seite des [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) findest du viel mehr Möglichkeiten das Layout anzupassen und auch die einzelnen [Subplots zu beschriften](https://patchwork.data-imaginist.com/articles/guides/annotation.html).
