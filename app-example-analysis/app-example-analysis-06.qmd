In diesem Beispiel haben vier Outcomes mit `shoot`, `flower`, `leaf` und `fruit` gemessen. Wir nehmen hier an, dass wir es bei dem Outcome `shoot` mit einer Pflanzenhöhe zu tun haben und bei den drei anderen Outcomes jeweils mit einer Anzahl. Wir haben jeweils drei Pflanzen in zwei Blöcken randomisiert. Darüber hinaus haben wir vier Behandlungen. Einmal schauen wir uns eine Kontrolle an sowie drei Arten von Rückschnitten. Die Fragestellung ist nun, wie sich die Behandlung durch die Rückschnitte auf die Outcomes auswirkt.

Wir lesen wieder als erstes die Daten ein. Bitte beachte, dass wir den Versuch an acht Terminen ausgewertet haben. Das heißt, wir haben an acht Terminen alle vier Outcomes gemessen. Dadurch ergeben sich immer vier Spalten mit dem Namen des Outcomes ergänzt um eine Zahl für den Messtermin. Wir nutzen noch die Funktion `clean_names()` um sicherzugehen, dass wir keine Leerzeichen mehr in den Spaltennamen haben.

```{r}
#| echo: true
#| message: false
#| warning: false

cutting_raw_tbl <- read_excel("data/cutting_data.xlsx") %>% 
  clean_names()
```

Nun müssen wir noch die Spalten `shoot_1` bis zur letzten Spalte `fruit_8` in drei Spalten verwandeln. In der einen Spalte `rsp` sollen nur die numerischen Messwerte stehen. In der Spalte `week` soll nur die Messwoche hinein und in die Spalte Outcome soll sich der Name der Spalte wiederfinden. Um diese Modifizierung der Daten zu erreichen, nutzen wir die Funktion `pivot_longer()`. Wir spalten die Namen der Spalten durch den Unterstrich `_` in zwei neue Spalten `outcome` und `week`. Dann müssen wir noch die Daten sortieren und die Behandlung sowie die Blöcke in einen Faktor umwandeln. Damit wir später eine bessere Abbildung haben, verwandeln wir noch die Wochen in eine numerische Spalte.

```{r}
#| echo: true
#| message: false
#| warning: false

cutting_tbl <- cutting_raw_tbl %>% 
  pivot_longer(cols = shoot_1:fruit_8, 
               names_to = c("outcome", "week"), 
               names_sep = "_",
               values_to = "rsp") %>% 
  arrange(outcome, week, trt, block, rsp) %>% 
  mutate(block = as_factor(block),
         trt = as_factor(trt),
         outcome = as_factor(outcome),
         week = as.numeric(week))
```

Jetzt wollen wir für die @fig-app-exp-cutting-01 etwas andere Namen für unsere Outcomes. Dafür nutzen wir dann die Funktion `recode()` in der wir die Level eines Faktors umbenennen können. Nachdem wir das gemacht haben, stellen wir einmal die Verläufe der Outcomes über die Wochen getrennt für die Behandlungen und die Blöcke dar. Die Funktion `stat_smooth()` erlaubt uns einmal eine Gerade durch die Punkte zu legen.

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-exp-cutting-01
#| fig-align: center
#| fig-height: 9
#| fig-width: 11
#| fig-cap: "Abbildung der vier Outcomes über die acht Messtermine mit den vier Behandlungen und den zwei Blöcken."

cutting_plot_tbl <- cutting_tbl %>% 
  mutate(outcome = recode(outcome, 
                          shoot = "Trieblänge", 
                          flower = "Blütenanzahl", 
                          leaf = "Blätteranzahl", 
                          fruit = "Fruchtanzahl"))

cutting_plot_tbl %>% 
  ggplot(aes(week, rsp, color = trt, linetype = block)) +
  theme_minimal() +
  facet_wrap(~ outcome, scales = "free_y") +
  geom_point() +
  stat_smooth(se = FALSE) +
  scale_color_okabeito()
```

```{r}
#| message: false
#| warning: false
stat_tbl <- cutting_plot_tbl %>% 
  group_by(trt, outcome, block, week) %>% 
  summarise(mean = mean(rsp),
            sd = sd(rsp)) 


```

In @fig-app-exp-cutting-03

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-exp-cutting-03
#| fig-align: center
#| fig-height: 9
#| fig-width: 11
#| fig-cap: "Abbildung der vier Outcomes über die acht Messtermine mit den vier Behandlungen und den zwei Blöcken."

ggplot(stat_tbl, aes(x = week, y = mean, group = trt, fill = trt)) + 
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                width = 0.2, position = position_dodge(0.9)) +
  theme_bw() +
  labs(fill = "Behandlung") +
  facet_wrap(~ outcome, scales = "free_y") +
  scale_fill_okabeito()
```

[Correlation plot in R](https://r-coder.com/correlation-plot-r/)

```{r}
#| message: false
#| warning: false

cutting_cor_tbl <- cutting_tbl %>% 
  filter(week %in% c(6, 7, 8)) %>% 
  pivot_wider(names_from = outcome, values_from = rsp) %>% 
  unnest(cols = c(flower, fruit, leaf, shoot))
```

In @fig-app-exp-cutting-02

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-app-exp-cutting-02
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Abbildung der Scatterplots, Histogramme und Korrelation zwischen den vier Outcomes."

cutting_cor_tbl %>% 
  select(flower:shoot) %>% 
  pairs.panels(smooth = TRUE, density = TRUE, method = "kendall", lm = FALSE, 
               cor = TRUE, ellipses = FALSE, stars = TRUE)    
```

### Trieblänge

```{r}
shoot_length_tbl <- cutting_tbl %>% 
  filter(outcome == "shoot" & week == 8)
```

```{r}
shoot_length_fit <- lm(rsp ~ trt + block, data = shoot_length_tbl)
```

```{r}
shoot_length_fit %>% 
  anova() %>% 
  model_parameters()
```

```{r}
shoot_emm_obj <- shoot_length_fit %>% 
  emmeans(specs = ~ trt) 
```

```{r}
shoot_emm_obj %>% 
  contrast(method = "pairwise", adjust = "bonferroni")
```

```{r}
shoot_emm_obj %>%
  cld(Letters = letters, adjust = "bonferroni") 
```

### Blütenanzahl

```{r}
flowers_tbl <- cutting_tbl %>% 
  filter(outcome == "flower" & week == 8)
```

```{r}
flowers_fit <- glm(rsp ~ trt + block, data = flowers_tbl, family = quasipoisson())

```

```{r}
flowers_fit %>% 
  car::Anova() %>% 
  model_parameters()
```

```{r}
flowers_emm_obj <- flowers_fit %>% 
  emmeans(specs = ~ trt) 
```

```{r}
flowers_emm_obj %>% 
  contrast(method = "pairwise", adjust = "bonferroni") 

```

```{r}
flowers_emm_obj %>%
  cld(Letters = letters, adjust = "bonferroni") 
```

### Blätteranzahl

```{r}
leaf_tbl <- cutting_tbl %>% 
  filter(outcome == "leaf" & week == 8)
```

```{r}
leaf_fit <- lm(rsp ~ trt + block, data = leaf_tbl)
```

```{r}
leaf_fit %>% anova()
```

```{r}
leaf_emm_obj <- leaf_fit %>% 
  emmeans(specs = ~ trt)
```

```{r}
leaf_emm_obj %>% 
  contrast(method = "pairwise", adjust = "bonferroni") 
```

```{r}
leaf_emm_obj %>%
  cld(Letters = letters, adjust = "bonferroni") 
```

### Fruchtanzahl

```{r}
fruit_tbl <- cutting_tbl %>% 
  filter(outcome == "fruit" & week == 8)
```

```{r}
fruit_fit <- glm(rsp ~ trt + block, data = fruit_tbl, family = quasipoisson())
```

```{r}
fruit_fit %>% 
  car::Anova() %>% 
  model_parameters()
```

```{r}
fruit_emm_obj <- fruit_fit %>% 
  emmeans(specs = ~ trt) 
```

```{r}
fruit_emm_obj %>%  
  contrast(method = "pairwise", adjust = "bonferroni") 
```

```{r}
fruit_emm_obj %>%  
  cld(Letters = letters, adjust = "bonferroni") 
```
