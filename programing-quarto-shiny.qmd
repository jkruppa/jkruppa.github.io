```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Quarto und Shiny App {#sec-quarto-shiny}

*Letzte Änderung am `r format(fs::file_info("programing-quarto-shiny.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"You have to be creative to do science. Otherwise you're just repeating tired old formulas. You arent't doing anything new." --- Steven Hawking*

![](images/caution.png){fig-align="center" width="50%"}

Ja und jetzt wird es wirklich wild. Wir schauen hinter den Vorhang der Bühne. Denn du liest ja hier, was ich in R Quarto geschrieben habe. Also ich nutze wirklich R Quarto um diese Webseite hier in R und Quarto zu erstellen. Gut ich lade dann noch alles bei [Github](https://github.com/) hoch, aber am Ende ist es wirklich nicht schwer. Denn wenn es wirklich schwer wäre, dann hätte ich es auch nicht hinbekommen. Was Webseiten programmieren und so ein Zeug angeht, habe ich nämlich Null Ahnung. Das was du hier alles siehst, macht R Quarto für mich. Und das ist ganz phantastisch.

Eine andere Sache, dir wir uns auch noch anschauen wollen, ist im Prinzip ein interaktive Visualisierung. Wir können nämlich R Shiny nutzen um reponsive (deu. *reagierend*) Abbildungen und Tabellen zu erstellen. Der vollständige Name lautet Shiny Web App, aber ich kürze gerne auf R Shiny ab. Wir können also eine Webseite mit Reglern bauen, die es uns dann ermöglichen die Abbildungen und Tabellen anhand der Einstellung am Regler sekündlich zu ändern. Das ermöglicht Dritten dann deine Auswertung auch mit einem anderen Subset deiner Daten durchzuführen oder aber sich etwas anderes in den Daten anzuschauen. Insbesondere für die Darstellung von großen Datenbanken mit Temperatur, Gewächshaustyp und Pflanzenarten ergibt sich hier ganz neue Möglichkeiten.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, readxl, 
               janitor, see, directlabels,
               conflicted)
conflicts_prefer(dplyr::filter)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## R Quarto

Was du hier siehst ist in R Quarto geschrieben. Damit ist es recht schwer für mich dir hier in diesem Text zu zeigen, wie der Text strukturell aufgebaut ist. Dafür gibt es die tolle Hilfsseite [Welcome to Quarto](https://quarto.org/), die dir da sehr viel weiter hilft. In der folgenden @fig-quarto-shiny-04 siehst du einmal, wie du ein neues Quarto Dokument erstellst. Wir gehen hier nicht den ganzen Prozess durch, dafür gibt es dann am Ende noch ein YouTube Video.

![Um eine neues R Quarto Dokument zu erstellen klicken wir einmal auf das '+' oben links und wählen dann `Quarto Document...` aus.](images/quarto_shiny_02.png){#fig-quarto-shiny-04 fig-align="center" width="30%"}

In der @fig-quarto-shiny-05 siehst du dann das nächste Fenster, indem du dann den Titel des Dokuments und dich als Autor eintragen kannst. Darüber hinaus auch noch das Ausgabeformat. Richtig, du kannst hier auch gleich MS Word wählen. Ich nehme dann meistens HTML aber auch PDF funktioniert für mich gut. Du kannst dann aber später jederzeit die Ausgabe ändern! Du bist hier nicht an einen Typ gebunden, das ist ja das Schöne. Ein Skript, viele Ausgabenmöglichkeiten.

![Um .](images/quarto_shiny_04.png){#fig-quarto-shiny-05 fig-align="center" width="70%"}

Im Folgenden einmal die Links zu den einzelnen Kapiteln der [Hilfeseite von Quarto](https://quarto.org/), die dich dann direkt zu den entsprechenden Seiten bringen.

-   [Creating a Document](https://quarto.org/docs/output-formats/html-basics.html) --- hier einmal als Einstieg das HTML Dokument, aber du kannst natürlich auch zu den anderen Dokumenttypen leicht wechseln. Ein Dokument kannst du dann als Word erstellen und mit diesem Dokument und den erstellten Tabellen weiterarbeiten. Eine gute Möglichkeit um mal einen Projektbericht zu schreiben.\
-   [Creating a Presentation](https://quarto.org/docs/presentations/) --- hier einmal die Möglichkeit um eine Präsentation zu erstellen. Und verrückterweise gehen sogar Power Point Präsentationen. Ich habe selber noch nicht PowerPoint mit R kombiniert. Daher weiß ich auch noch nicht wie sich das dann mit R verhält.\
-   [Creating a Website](https://quarto.org/docs/websites/) --- hier einmal die Erstellung einer Webseite. Muss nicht R zusammen sein. Aber ich finde es ist ein angenehmer Weg um seine Ergebnisse anderen öffentlich zu präsentieren. Es gibt hier sicherlich auch die Möglichkeit, den Zugriff auf die Webseite zu begrenzen, so dass Google und Co. die Webseite nicht finden.
-   [Creating a Book](https://quarto.org/docs/books/) -- hier einmal die Erstellung eines Buches. Das was du hier gerade liest, ist mit dem Template eines Buches in R Quarto erstellt. Ja, du besuchst die Seite über einen Brwoser, aber die grundlegende Struktur ist die eines Buches. Theoretisch könnte ich den Text hier auch als E-Book exportieren. Dafür ist dann aber leider hier alles zu groß geworden.

Die Stärke von R Quarto kommt natürlich zu tragen, wenn wir die Analysen oder die deskriptive Statistik in einem Dokument zusammen erstellen können. Die deskriptiven Tabellen können wir leicht mit dem R Paket `modelsummary` oder `gtsummary` erstellen. Ich zeige die Erstellung einmal exemplarisch in dem Kapitel zur deskriptiven Statistik in dem Abschnitt zur [Automatisierten Tabellenerstellung in R](#sec-automated-table). Neben den beiden vorgestellten gibt es natürlich auch [Alternativen zu `gtsummary` und `modelsummary`](https://modelsummary.com/index.html#alternative-packages). Da müsstest du dann aber mal selber schauen oder mich direkt Fragen. Wie immer gibt es in R nicht nur die eine Möglichkeit eine Tabelle zu erstellen.

::: callout-tip
## Hier kommt das Video

![](images/caution.png){fig-align="center" width="25%"}
:::

## R Shiny App

Vor gar nicht allzu langer Zeit sprach ich mit einer Freundin aus meiner eigenen Studentenzeit, die jetzt bei einer großen Pharmafirma arbeitet, über R und die Anwendung von R bei ihr in der Firma. Wie sich herausstellte ist dort R Shiny sehr beliebt. Die Statistiker oder jetzt Data Scientist und Data Analyst arbeiten dort die Datenmengen in R Shiny Apps auf, so dass dann die Anderen in der Firma dann leichter an den Daten rumschrauben können. Das erspart allen sehr viel Arbeit, den fixierte Berichte müssen bei jeder Änderung ja wieder neu gemacht werden.

Deshalb kann ich nur sagen: [Welcome to Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html). Wenn du wirklich jemanden mit deiner Analyse von Daten beeindrucken willst, dann nutze R Shiny. Auf der anderen Seite gibt es manchmal Datensätze mit so vielen Subgruppen oder aber anderen Messwerten, dass ich immer gar nicht weiß, was ich alles in einer statischen Abbildung reinpacken soll. Da ist mir dann eine dynamische Abbildung hundertmal lieber. Ich kann auch hier nur die groben Umrisse liefern. Mehr erfährst du dann in dem Video zur Erstellung einer Shiny App. Aber wie immer, einfach mal selber ausprobieren. Du kannst wirklich mit wenig Aufwand richtig gute interaktive Webtools erschaffen.

### Shiny App in RStudio

Das tolle an der R Shiny App ist, dass wir alles im RStudio bauen können. In der @fig-quarto-shiny-02 siehst du einmal, wie du eine Shiny Web App einfach erstellen kannst. Wir gehen hier nicht den ganzen Prozess durch, sondern ich gehe wie immer auf die häufigsten Probleme einmal ein. Hier gibt es aber nicht so viele davon, eher Geschmacksfragen.

![Um eine neue R Shiny Web App zu erstellen klicken wir einmal auf das '+' oben links und wählen dann `Shiny Web App...` aus.](images/quarto_shiny_02.png){#fig-quarto-shiny-02 fig-align="center" width="30%"}

Jetzt öffnet sich ein neues Fenster und du kannst den Namen deiner Shiny App eintragen. Hier ist es wichtig, sich schon für einen guten Namen zu entscheiden, später wird der Name auch Teil der Webadresse mit dem du dann die Shiny App aufrufst. Natürlich nur unter der Annahme, dass du deine Shiny App ins Internet stellst. Du kannst die Shiny App auch nur privat auf deinen Rechner laufen lassen.

Jetzt muasst du dich noch entscheiden, ob deine Shiny App eher klein wird, dann nutze die Option `Single File (app.R)`. Dann bauen wir eine einfache App, wie ich sie gleich mal in dem ersten Abschnitt vorstellen werde. Wenn deine Shiny App komplexer wird, dann solltest du `Multiple Files (ui.R/server.R)` wählen. Du kannst aber auch später leciht aus der einen Datei dann zwei Dateien bauen. Meist fange ich immer mit einer Datei `app.R` an und schaue wie komplex die Shiny App wird.

![Wir brauchen jetzte ien Namen für die Shiny Web App Application name und müssen uns entscheiden, ob wir mit einer Datei Single file (app.R) oder mehrere Dateien Multiple File (ui.R/server.R) arbeiten wollen. In beiden Fällen wird ein neuer Ordner mit dem Namem der Shiny Web App erstellt.](images/quarto_shiny_03.png){#fig-quarto-shiny-03 fig-align="center" width="70%"}

Im Folgenden schauen wir uns also die zwei Fälle einmal an. In dem ersten Fall willst du nur eine simple Shiny App mit wenigen Funktionen und einer simplen Oberfläche für die interaktive Anwendung bauen. Im zweiten Fall haben wir es dann schon mit einem komplexeren Fall zu tun und wir spalten dann die Oberfläche (`ui.R`) von den Berechnungen (`server.R`) ab.

::: callout-tip
## Hier kommt das Video

![](images/caution.png){fig-align="center" width="25%"}
:::

### Einfache Shiny App

```{mermaid}
%%| label: fig-mermaid-shiny-02
%%| fig-width: 6
%%| fig-cap: "Für eine simple Shiny App brauchen wir nur eine Datei. Hier sind die Funktionen für die `ui` und dem `server` in einer Datei `app.R` enthalten."
flowchart LR
subgraph ide1 ["/home/myWork/shiny_simple"]
    direction TB
    A{app.R}:::nodeA --- B("ui( )"):::nodeB 
    A{app.R}:::nodeA --- C("server( )"):::nodeB 
    end
    classDef nodeA fill:#E69F00,stroke:#333,stroke-width:0.75px
    classDef nodeB fill:#56B4E9,stroke:#333,stroke-width:0.75px
    
```

::: {.callout-caution icon="false" appearance="simple" collapse="true"}
## app.R

```{r}
#| eval: false
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
:::

### Komplexere Shiny App

```{mermaid}
%%| label: fig-mermaid-shiny-01
%%| fig-width: 6
%%| fig-cap: "Für eine komplexere Shiny App brauchen wir drei Dateien. Deshalb ist es immer gut eine Ordnerstruktur zu haben. Hier liegen unsere Dateien `ui.R`, `server.R` und `app.R` im Ordner `shiny_simple`."
flowchart LR
    subgraph ide1 ["/home/myWork/shiny_simple"]
    direction LR
    B[(ui.R)]:::nodeB --> A{app.R}:::nodeA 
    C[(server.R)]:::nodeB --> A{app.R}:::nodeA
    end
    classDef nodeA fill:#E69F00,stroke:#333,stroke-width:0.75px
    classDef nodeB fill:#56B4E9,stroke:#333,stroke-width:0.75px
    
```

::: {.callout-caution icon="false" appearance="simple" collapse="true"}
## app.R

```{r}
#| eval: false
library(shiny)

# See above for the definitions of ui and server
ui <- ...

server <- ...

shinyApp(ui = ui, server = server)
```
:::

::: {.callout-note icon="false" appearance="simple" collapse="true"}
## ui.R

```{r}
#| eval: false
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)
```
:::

::: {.callout-note icon="false" appearance="simple" collapse="true"}
## server.R

```{r}
#| eval: false
# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#007bc2", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}
```
:::

In der @fig-quarto-shiny-01 ist dargestellt.

![Zusammenhang zwischen der `ui.R` und der `server.R`. Die `ui.R` bildet die Oberfläche ab auf der sich die Regler befinden. Die geänderten Reglerinformationen werden über `input` dann in der `server.R` Datei verarbeitet und als `ouput` wieder an die `ui.R` wiedergeben. Dann ändert sich die Wiedergabe.](images/quarto_shiny_01.png){#fig-quarto-shiny-01 fig-align="center" width="100%"}

## Our World in Data

[Our World in Data](https://ourworldindata.org/)

[Global emissions have not yet peaked](https://ourworldindata.org/co2-and-greenhouse-gas-emissions#global-emissions-have-not-yet-peaked)

Oh, was für ein Segen hier dann `clean_names()` aus dem R Paket `janitor` ist.

```{r}
#| message: false
#| warning: false
co2_tbl <- read_csv("data/annual-co-emissions-by-region.csv") %>% 
  clean_names()
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-shiny-01
#| tbl-cap: "sdsd."

co2_tbl %>% 
  head(7) %>% 
  kable(align = "c", "pipe")
```

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-shiny-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "kkkn"

co2_tbl %>% 
  filter(entity %in% c("World", "Europe", "China", "Africa")) %>% 
  ggplot(aes(year, annual_co2_emissions, color = entity)) +
  theme_bw() +
  geom_line() +
  theme(legend.position = "none") +
  scale_x_continuous(expand = c(0, 30), breaks = c(seq(1750, 2021, by = 25), 2021)) +
  geom_dl(aes(label = entity), method = list(dl.trans(x = x + 0.2), "last.points", cex = 0.8))

```
