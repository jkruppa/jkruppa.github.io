# Visualisierung von Daten {#sec-eda-ggplot}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

> *"Numerical quantities focus on expected values, graphical summaries on unexpected values." --- John Tukey*

Ein wichtiger Teil in der Analyse von Daten ist die Visualisierung. Wir glauben keine Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbildungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen Y und X gibt. Wir haben ein $y$ vorliegen, was wir auf die y-Achse eines Graphen legen und daneben dann mehrere Variablen bzw. Spalten die wir $x$ nennen. Eine der Variablen legen wir auf die x-Achse des Graphen. Nach den anderen $x$ färben wir die Abbildung ein.

[Wir nennen eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche zu tun.]{.aside}

In diesem Kapitel wollen wir durch die häufigsten und wichtigsten Abbildungen in der explorativen Datenanalyse durchghen. Das wären im folgenden diese Abbildungen:

-   **Histogramm** in @sec-eda-histogramm für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   **Boxplot** in @sec-eda-boxplot für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable.
-   **Barplot** in @sec-eda-barplot für 5 und mehr Beobachtungen (pro Gruppe). Der Barplot oder das **Balkendiagramm** bzw. **Säulendiagramm** stellt den Mittelwert und die Standardabweichung da.
-   **Dotplot** in @sec-eda-dotplot für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   **Scatterplot** in @sec-eda-scatter für zwei kontinuierliche Variablen. Auch **xy-Plot** genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   **Mosaicplot** in @sec-eda-mosaic für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.

[Konkret ist eine **Variable** gleich einer **Spalte** in einem Datensatz.]{.aside}

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, 
               janitor, see, patchwork, latex2exp)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Grundlagen in ggplot()

[Im Gegensatz zu dem Pipe-Operator `%>%` nutzt ggplot den Operator `+` um die verschiedenen ggplot Funktionen (`geom_`) miteinander zu verbinden.]{.aside}

Wir nutzen in R das R Paket `ggplot2` um unsere Daten zu visualisieren. Die zentrale Idee von `ggplot2` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Das Konzept von `ggplot2`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `ggplot2` zu visualisieren...

::: callout-tip
## Grundlagen von ggplot() im Video

Du findest auf YouTube [Einführung in R - Teil 16.0 - Trockenübung ggplot2 simpel und einfach erklärt](https://youtu.be/SGwSVzJ9C-s) als Video.

Sowie auch auf YouTube [Einführung in R - Teil 16.1 - Abbildungen mit ggplot in R erstellen. Idee und Konzept von ggplot](https://youtu.be/SRRQQO3DXtc) als Video. Also alles nochmal als Video - vielleicht einfacher nachzuvollziehen als in einem Fließtext.
:::

Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot` für die Erstellung von Boxplots, das `geom_histogram` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an.

### Datenbeispiel

Wir importieren den Datensatz `flea_cat_dog.xlsx` und wollen einzelne Variablen visualisieren. Wir kennen den Datensatz schon aus den vorherigen Beispielen. Dennoch nochmal hier der Datensatz in @tbl-cat-dog-ggplot einmal dargestellt.

```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") %>% 
  mutate(animal = as_factor(animal))
```

[Spaltennamen sind in **Englisch** und haben **keine Leerzeichen**. Die Funktion `clean_names()` aus dem R Paket `janitor` ist hier eine Hilfe.]{.aside}

Im Folgenden ist es wichtig, dass du dir die Spaltennamen merkst. Wir können nur die exakten, wortwörtlichen Spaltennamen verwenden. Sonst erhalten wir einen Fehler. Deshalb haben wir auch keine Leerzeichen in den Spaltennamen.

```{r}
#| echo: false
#| label: tbl-cat-dog-ggplot
#| tbl-cap: "Beispieldatensatz für Eigenschaften von Flöhen von zwei Tierarten."

flea_dog_cat_tbl %>% kable(align = "c", "pipe")
```

### Erste Abbildung in ggplot()

Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`).

```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` bennent den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die x-Achse soll, was auf die y-Achse soll sowie ob es noch andere Faktoren in den Daten gibt.
    -   `x` braucht den Spaltennamen für die Variable auf der x-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der y-Achse.

[**Faktoren** meint hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor`erschaffen haben.]{.aside}

```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length))
```

Wir sehen, dass wir nichts sehen in @fig-ggplot-1. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen.

## Die häufigsten Abbildungen

Im Folgenden gehen wir dann einmal die wichtigsten Abbildungen einmal durch. Viele der Abbildungen kennst du vielleicht schon und dann musst du hier nur noch schauen, wie die Abbildungen in `ggplot` zu realisieren sind. Ansonsten gilt wie immer, es ist nur ein kleiner Ausschnitt, du findest auf der [Hilfeseite von `ggplot`](https://ggplot2.tidyverse.org/index.html) eine sehr viel größere Übersicht. Oder du baust dir gleich die Abbildungen so wie die BBC mit dem Tutorium [How to create BBC style graphics](https://bbc.github.io/rcookbook/).

::: callout-tip
## Histogramm, Boxplot, Scatterplot und Mosaicplot im Video

Du findest auf YouTube [Einführung in R - Teil 16.2 - Histogramm, Boxplot, Scatterplot und Mosaicplot mit ggplot in R](https://youtu.be/Zdw6NlLauNw) als Video. Weitere Videos werden dann noch folgen und ergänzt.
:::

### Histogramm {#sec-eda-histogramm}

{{< include eda-ggplot-histogram.qmd >}}

### Boxplot {#sec-eda-boxplot}

{{< include eda-ggplot-boxplot.qmd >}}

### Barplot oder Balkendiagramm {#sec-eda-barplot}

Der Barplot oder das Balkendiagramm auch Säulendiagramm ist eigentlich veraltet. Wir haben mit dem Boxplot eine viel bessere Methode um eine Verteilung und *gleichzeitig* auch die Gruppenunterschiede zu visualisieren. Warum nutzen wir jetzt so viel den Barplot? Das hat damit zu tun, dass früher - oder besser bis vor kurzem - in Excel kein Boxplot möglich war. Daher nutzte jeder der mit Excel seine Daten auswertet den Barplot. Und was der Bauer nicht kennt... deshalb ist hier auch der Barplot dargestellt. Ich persönlich mag den Barplot eher weniger. Der Barplot ist einfach schlechter als der Boxplot. Wir haben nur die Standardabweichung als Maßzahl für die Streuung. Beim Boxplot haben wir das IQR, was uns mehr über die Streuung aussagt. Aber gut, häufig musst du den Barplot in deiner Abschlussarbeit machen. Also dann hier der Barplot. Wie erstellen wir nun einen Barplot in R? Zuerst laden wir die Daten mit der Funktion `read_excel()` in R, wenn du die Daten als `.xlsx` Datei vorliegen hast.

```{r}
#| message: false
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

Wir müssen jetzt für `ggplot()` noch den Mittelwert und die Streuung für die Gruppen berechnen. Du kannst als Streuung die Standardabweichung oder den Standardfehler nehmen. Ich würde die Standardabweichung bei kleinen Fallzahlen kleiner als 20 Beobachtungen nehmen.

```{r}
stat_tbl <- flea_dog_cat_tbl %>% 
  group_by(animal) %>% 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length),
            se = sd/sqrt(n()))
```

Wir nutzen nun das Objekt `stat_tbl` um den Barplot mit der Funktion `ggplot()` zu erstellen. Dabei müssen wir zum einen schauen, dass die Balken nicht übereinander angeordnet sind. Nebeneinander angeordnete Balken kriegen wir mit der Option `stat = "identity"` in dem `geom_bar()`. Dann müssen wir noch die Fehlerbalken ergänzen mit dem `geom_errorbar`. Hier kann nochmal mit der Option `width =` an der Länge der Fehlerenden gedreht werden.

```{r}
#| message: false

ggplot(stat_tbl, aes(x = animal, y = mean, fill = animal)) + 
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd),
                  width = 0.2)
```

Im Zweifel muss du nochmal googlen und schauen welche Form dir am besten zusagt. Es gibt sehr viele Möglichkeiten einen Barplot zu erstellen.

### Dotplot {#sec-eda-dotplot}

{{< include eda-ggplot-dotplot.qmd >}}

### Scatterplot {#sec-eda-scatter}

Der Scatterplot wird auch xy-Plot genannt. Wir stellen in einem Scatterplot zwei kontenuierliche Variablen dar. Dann wollen wir eine Linie durch die Punkte legen. Im Prinzip fragen wir uns, wie hänge die Werte auf der y-Achse von den Werten auf der x-Achse ab? Wenn sich also die Werte auf der x-Achse erhöhen, wie verhalten sich dann die Werte auf der y-Achse?

```{r }
#| echo: true
#| message: false
#| label: fig-scatter-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und der Anzahl an Flöhen auf den 39 Hunden. Jeder Punkt stellt einen Hund dar."

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_bw() +
  labs(x = "Anzahl der Flöhe", y = "Sprungweite in [cm]") 

```

@fig-scatter-flea-0 zeigt den Scatterplot für die Spalte `flea_count` auf der x-Achse und `jump_length` auf der y-Achse. Mit der Funktion `geom_point()` können wir die Punktepaare für jede Beobachtung zeichnen. In unserem Fall zeichnen wir mit der Funktion `stat_smooth()` noch die entsprechende Grade durch die Punkte. Es handelt sich hierbei um eine Regression, da wir eine Gerade durch die Punktewolke zeichnen.

### Mosaic Plot {#sec-eda-mosaic}

Wenn wir zwei Spalten visualisieren wollen, die aus zwei Faktoren bestehen mit jeweils zwei Leveln, dann nutzen wir den Mosaic Plot. Wir nutzen den Datensatz `flea_dog_cat.xlsx` mit vierzehn Beobachtungen. Zuerst drehen wir nochmal die Ordnung der Level in dem Faktor `animal`.

```{r}
flea_dog_cat_mosaic_tbl <- flea_dog_cat_tbl %>%
  mutate(animal = factor(animal, levels = c("dog", "cat"))) 
```

Schauen wir uns jetzt einmal die 2x2 Kreuztabelle der beiden Spalten `animal` and `infected` an. Um die 2x2 Tabelle in R in der richtigen Orientierung vorliegen zu haben, müssen wir nochmal einen kleinen Klimmzug über `mutate()` nehmen. Wir wandeln die Variable `infected` in einen Faktor um und sortieren die Level entsprechend, so dass wir die richtige Ordnung wie später im Mosaic Plot haben. Dieser Umweg hat nur didaktische Gründe, später plotten wir den Mosaic Plot direkt und schauen uns vorher nicht die 2x2 Tabelle in R an. Hier also die 2x2 Kreuztablle aus R.

```{r}
flea_dog_cat_mosaic_tbl %>% 
  mutate(infected = factor(infected, levels = c(1, 0))) %>% 
  tabyl(infected, animal) 
```

Wir sehen in der Tabelle, dass wir mehr nicht infizierte Tiere (n = 9) als infizierte Tiere haben (n = 5). Die Aufteilung zwischen den beiden Tierarten ist nahezu gleich. Im folgenden wollen wir diese Tabelle durch einen Mosaic Plot einmal visualisieren.

Um jetzt einen Mosaic Plot zeichnen zu können müssen wir die relativen Anteile pro Spalte bzw. für jedes Level von $x$ berechnen. In unserem Fall ist $x$ die Variable `animal` und die Level sind `dog` und `cat`. In der folgenden 2x2 Kreuztablle werden die relativen Anteile für die Hunde- und Katzenflöhe für den Infektionsstatus berechnet.

|              |           |                       |                       |              |
|:------------:|:---------:|:---------------------:|:---------------------:|:------------:|
|              |           |      **Animal**       |                       |              |
|              |           |         *Dog*         |         *Cat*         |              |
| **Infected** | *Yes (1)* | $\cfrac{3}{7} = 0.43$ | $\cfrac{2}{7} = 0.29$ | $\mathbf{5}$ |
|              | *No (0)*  | $\cfrac{4}{7} = 0.57$ | $\cfrac{5}{7} = 0.71$ | $\mathbf{9}$ |
|              |           |     $\mathbf{7}$      |     $\mathbf{7}$      |   $n = 14$   |

Wir können jetzt die relativen Anteile in den Mosaic Plot übertragen und erhalten die @fig-mosaic-flea-0. Wir müssen also zuerst die absoluten Anteile bestimmen um dann die relativen Anteile für die Spalten berechnen zu können. Abschließend zeichnen wir dann den Mosaic Plot. Wir nutzen dafür das R Paket `ggmosaic` mit der Funktion `geom_mosaic()`.

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-mosaic-flea-0
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Visualisierung einer 2x2 Tabelle als Mosaic Plot. Die unterschiedlich großen Flächen geben die Verhältnisse per Spalte wieder."

ggplot(data = flea_dog_cat_mosaic_tbl) +
  geom_mosaic(aes(x = product(infected, animal), fill = animal)) +
  annotate("text", x = c(0.25, 0.25, 0.75, 0.75), 
                   y = c(0.25, 0.75, 0.25, 0.85), 
           label = c("0.57", "0.43", "0.71", "0.29"), size = 7) +
  theme(legend.position = "none")

```

@fig-mosaic-flea-0 zeigt den Mosaic Plot für die Variable `animal` and `infected`. Die untrschiedlich großen Flächen bilden die Verhältnisse der 2x2 Tabelle ab. So sehen wir, dass es mehr uninfizierte Tiere als infizierte Tiere gibt. Am meisten gibt es uninfizierte Katzen. Am wenigstens treten infizierte Katzen auf.

## Zusätzliche Möglichkeiten

Im Folgenden dann noch eine Sammlung an nützlichen Optionen und Möglichkeiten, die einem das Leben einfacher machen und die Abbildungen dann noch schöner. Nicht alles musst du in `ggplot` machen, manchmal geht es dann in PowerPoint dann doch schneller mal eben einen Text zu ergänzen. Sehe das hier deshalb als Ergänzung und meinen privaten Raum, den ich nutze um mir den Code zu merken.

### Überschriften, Achsen und Legenden

Wenn du mehr machen willst, also die Überschriften anpassen oder aber die Achsenbeschriftung ändern, dann gibt es hier global Hilfe im [ggplot Manual](https://ggplot2.tidyverse.org/reference/index.html). Die Webseite [R Cookbook](https://ggplot2.tidyverse.org/reference/index.html) hat auch spezielle Hilfe für ggplot().

-   [Überschriften von Abbildungen](http://www.cookbook-r.com/Graphs/Titles_(ggplot2)/)
-   [Achsenbeschriftung](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/)
-   [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/)
-   [Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)

In @fig-labels-0 siehst du eine Abbildung mit Titel und veränderten Beschriftungen. Die Möglichkeiten sind nahezu unbegrenzt und sprengen auch hier den Rahmen. Im Zweifel im R Tutorium vorbeischauen oder aber in der Vorlesung fragen.

```{r }
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung mit Titel und geänderter Achsenbeschrittung"


ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha") +
  scale_x_discrete(labels = c("Katze", "Hund")) +
  scale_fill_discrete(name = "Behandlung", labels = c("Katze", "Hund")) +
  theme_bw() 

```

### Abbildungen abspeichern

Wenn du eine Abbildung abspeichern willst, dann musst du nur nach dem `ggplot`-Code die Funktion `ggsave()` setzen. Wie du im hier im Folgenden siehst, speichere ich die Abbildung der Boxplots der Hunde- und Katzenflöhe einmal in der Datei `flea_dog_boxplot.png` ab. Dabei wähle ich eine Breite `width` und eine Höhe `height` von jeweils 5. Du musst dann immer etwas spielen, je größer die Zahlen, desto größer die Abbildung und die Auflösung.

```{r}
#| warning: false
#| echo: true
#| eval: false
#| message: false
#| label: fig-save
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abspeicherung einer Abbdilung mit `ggsave()`"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length)) +
  geom_boxplot() 

## Abspeichern des obigen ggplots  
ggsave("flea_dog_boxplot.png", width = 5, height = 5)
```

Wie immer hilft auch die [Hilfeseite von `ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) weiter, wenn es um mehr Optionen und Qualität der Abbildungen geht.

### Mathematische Ausdrücke in den Achsenbeschriftungen

Häufig wollen wir nicht nur einfache Achsenbeschriftungen haben, sondern auch irgendwie komplexere Einheiten wie Eisendüngergehalt im Boden in $[kg\, ha]^{-1}$ darstellen. Jetzt soll die Einheit auch in dieser Form mit in die Achsenbeschriftung. Wir können dafür zwei Wege wählen. Einmal über das R Paket `latex2exp` und die Funktion `TeX()` oder aber die Funktion `expression()`, wofür wir dann kein eigenes R Paket brauchen. Beide Wege haben Vor- und Nachteile. Wir gehen aber beide mal durch.

::: column-margin
Mehr Informationen durch das Tutorium [Using latex2exp](https://cran.r-project.org/web/packages/latex2exp/vignettes/using-latex2exp.html) oder aber eben der Klassiker mit [Plot math expression](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html).
:::

Wir können die Funktion `expression()` nutzen um uns mathematische Formeln zu bauen. Leider ist das Ganze etwas frickelig und auch ich brauche immer drei Anläufe, bis die Formel dann passt. Im Folgenden aber einmal zwei Beispiel für mathematische Formeln und Ausdrücke. Beachte, dass du jedes Leerzeichen durch eine Tilde `~` abbilden musst. Ich nutze die Funktion `expression()` sehr selten und nur wenn die Formel wirklich sehr einfach ist. Da wir aber schon mit eckigen Klammern Probleme kriegen und diese so nervig mit `"` einklammern müssen, nutze ich dann das Paket `latex2exp` was ich im Folgenden vorstellen werde.

Hier aber erstmal zwei Beispiele für eine Formel mit der Funktion `expression()`. Wenn du mehr über die Möglichkeiten wissen willst, dann schauen auch einmal auf die Hilfeseite von [Plot math](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html) oder du googelst dir die Lösung wie ich früher zusammen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 5

plot(expression(Eisendüngeform~und~-höhe~"[kg ha]"^-1), cex = 1.5, main = "")
plot(expression(Fe-Gehalt~"["~mg%.%(kg~TM)^-1~"]"), cex = 1.5, main = "")
```

Für mich ausdrücklich einfacher geht es mit dem R Paket `latex2exp` und der Funktion `TeX()` sowie die Helferfunktion `r"()"`. Ja, hier muss man dann noch eine andere Programmiersprache kennen, aber wie immer, du wirst nur schlauer. Die Informationen zur Matheumgebung in $\LaTeX$ kommen dann nochmal extra zwischen zwei Dollarzeichen `$`. Ja, das ist etwas wirr für einen Anfänger, aber wir nutzen hier auch zwei Programmiersprachen zusammen. Zum einen $\LaTeX$ um die Mathesymbole sauber darzustellen und dann R um die Abbildungen in `ggplot()` zu bauen. Mehr Informationen zu der Matheumgebung in $\LaTeX$ findest du einmal in der [LaTeX Mathehilfe I](https://de.wikipedia.org/wiki/Hilfe:TeX) sowie der [LaTeX Mathehilfe II](https://en.wikibooks.org/wiki/LaTeX/Mathematics).

Wie bauen wir uns also unseren mathematischen Ausdruck? Als erstes brauchen wir die Funktion `Tex()`, die sagt einfach nur aus, dass jetzt $\LaTeX$-Code kommt. Dann wollen wir noch einen String brauen in dem der $\LaTeX$-Code für unseren mathematischen Ausdruck drin steht. Diesen String bauen wir mit `r"()"`. Achtung, hier ist das Gänsefüßchen oben und unten vor und nach der runden Klammer sehr wichtig. In den Ausdruck können wir dann Text schreiben `Eisengehalt` oder aber einen mathematischen Ausdruck abgrenzt von zwei Dollarzeichen `$` wie `$[kg\, ha]^{-1}$`. $\LaTeX$ kann nämlich nicht nur mathematische Ausdrücke sondern ist eigentlich ein Textverarbeitungsprogramm. Deshalb musst du hier *nochmal* zwischen Text und mathematischen Ausdruck unterscheiden.

Hier nochmal aufgeschlüsselt wie der Code aussieht. Wir schreiben den Code nachher in einer Zeile, aber zum Verständnis ist es besser, wenn wir den Code einmal aufgeklappt sehen.

```{r}
#| eval: false
TeX(
    r"(
      Eisengehalt $[kg\, ha]^{-1}$
    )"
   )
```

Wir wollen uns das Ergebnis einmal in einem simplen `plot()` anschauen. Wir nutzen die Funktionalität natürlich später in `ggplot`, aber hier ist es so einmal einfacher zu sehen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         Eisengehalt $[kg\, ha]^{-1}$
      )")
    )
```

Auch können wir sehr viel komplexere Formeln erstellen. Beachte auch hier, dass wir zwei Matheumgebungen in $\LaTeX$ vorliegen haben.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         A $\LaTeX$ formula: $\frac{2hc^2}{\lambda^5}\frac{1}{e^{\frac{hc}{\lambda k_B T}} - 1}$
      )")
  )
```

In der @fig-scatter-flea-1 dann nochmal die Anwendung in einem `ggplot` in dem wir die Achsen entsprechend beschriften und dann auch noch eine ausgedachte Regressionsgeleichung zu der Abbildung ergänzen.

```{r}
#| echo: true
#| warning: false
#| message: false
#| label: fig-scatter-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen dem Eisengehalt und -höhe im Boden und dem Eisengehalt in Salat. Zusätzlich ergänzt eine Regressiongleichung und ein ausgedachtes Bestimmtheitsmaß."

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_bw() +
  labs(x = TeX(r"(Eisengehalt und -höhe $[kg\, ha]^{-1}$)"), 
       y = TeX(r"(Fe-Gehalt $[mg \cdot (kg TM)^{-1}]$)")) +
  annotate("text", x = 10, y = 10,
           label = TeX(r"($y = \beta_0 + \beta_1 \cdot x;\; R^2 = 0.24$)"))

```

::: {.callout-tip collapse="true"}
## Workaround für `Tex()` in `geom_text()`

Wenn du dann mal die Funktion `Tex()` in `geom_text()` verwenden willst, dann musst du einmal etwas anpassen. Dann klappt es aber auch hier. Das hat mich mal echt Nerven und Zeit gekostet, deshalb lagere ich die Information mal hier für mich.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 1
#| fig-width: 2

ggplot() +
  theme_void() +
  geom_text(aes(0, 0, 
                label = TeX(r'($\alpha  x^\alpha$, where $\alpha \in 1\ldots 5$)',
                                  output = "character",)), parse = TRUE) 
```
:::

### Die Okabe-Ito Farbpalette

::: column-margin
Mehr zum R Paket `see` auf der [Hilfeseite des Paketes](https://easystats.github.io/see/index.html)
:::

Neben den klassischen Farben im R Paket `ggplot`gibt es noch weit, weit mehr Farbpaletten. Wir nutzen in der Folge immer wieder die Okabe-Ito Farbpalette aus dem R Paket `see`. Die Okabe-Ito Farbpalette ist speziell so gebaut, dass die Farben sich gut für farbenblinde Personen unterscheiden. Der Kontrast zwischen den Farben ist sehr gut. Wenn du eine andere Farbpalette nutzen willst, findest du hier noch andere [Color Scales](https://easystats.github.io/see/articles/seecolorscales.html).

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Boxplots."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           fill = animal)) +
  geom_boxplot() +
  scale_fill_okabeito() +
  theme_bw()
```

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Punkte."

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```

Das Ganze geht dann auch händisch mit dem folgenden Code für die [jeweiligen Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette). Anbei einmal die Farbpalette dargestellt.

![](images/cbbPalette.png){fig-align="center" width="80%"}

Die Farben sind dann in der Reihenfolge wie folgt kodiert.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Wenn wir Boxplots einfärben wollen dann nehmen wir den folgenden Code.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_fill_manual(values = cbPalette)
```

Und das hier ist die Ergänzung für Punkte und Linien.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_colour_manual(values = cbPalette)
```

### Abbildungen nebeneinander

Das [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) erlaubt es mehrere `ggplot` Abbildungen nebeneinander oder in einem beliebigen Layout miteinander zu verbinden. Das tolle ist, dass die Idee sehr intutiv ist. Wir nutzen wieder das `+` um verschiedene Plots miteinander zu verbinden.

Im Folgenden erschaffen wir uns zwei `ggplots` und speichern die Plots in den Objekten `p1` und `p2`. Das ist wie wir es bisher kennen, nur das jetzt keine Abbildung erscheint sondern beide Plots in zwei Objekten gespeichert sind.

```{r}
#| warning: false
#| echo: true
#| message: false

p1 <- ggplot(data = flea_dog_cat_tbl, 
             aes(x = flea_count, y = jump_length,
                 color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()

p2 <- ggplot(data = flea_dog_cat_tbl, 
                aes(x = animal, y = jump_length,
                    color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_bw()
```

Wie können wir nun die beiden Abbildungen nebeneinander zeichnen? Wir nutzen einfach das `+` Symbol.

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-patchwork-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 9
#| fig-cap: "Beispielhafte Abbildung der zweier Plots nebeneinander."

p1 + p2
```

Auf der Seite des [R Paket patchwork](https://patchwork.data-imaginist.com/articles/patchwork.html) findest du viel mehr Möglichkeiten das Layout anzupassen und auch die einzelnen [Subplots zu beschriften](https://patchwork.data-imaginist.com/articles/guides/annotation.html).
