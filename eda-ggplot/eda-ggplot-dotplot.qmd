Wenn wir weniger als fünf Beobachtungen haben, dann ist meist ein Boxplot verzerrend. Wir sehen eine Box und glauben, dass wir viele Datenpunkte vorliegen haben. Bei 3 bis 7 Beobachtungen je Gruppe bietet sich der Dotplot als eine Lösung an. Wir stellen hier alle Beobachtungen als einzelne Punkte dar. Wie erstellen wir nun einen Dotplot in R? Wir nutzen dazu die Funktion `geom_dotplot()` wie folgt.

```{r }
#| echo: true
#| message: false
#| label: fig-dotplot-flea-eda-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Der Dotplot für die Anzahl der Flöhe für die beiden Tierarten Hund und Katze."

ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = grade,
                                    fill = animal)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  theme_bw() +
  labs(x = "Tierart", y = "Boniturnote [1-9]") 


```

In @fig-dotplot-flea-eda-0 sehen wir den Dotplot aus der Datei `flea_dog_cat.xlsx`. Auf der x-Achse sind die Level des Faktors `animal` dargestellt und auf der y-Achse die Notenbewertung `grade` der einzelnen Hunde und Katzen. Die Funktion `geom_dotplot()` erschafft das Layer für die Dots bzw. Punkte. Wir müssen in der Funktion noch zwei Dinge angeben, damit der Plot so aussieht, dass wir den Dotplot gut interpretieren können. Zum einen müssen wir die Option `binaxis = y` wählen, damit die Punkte horizontal geordnet werden. Zum anderen wollen wir auch, dass die Punkte zentriert sind und nutzen dafür die Option `stackdir = center`.

```{r }
#| echo: true
#| message: false
#| label: fig-dotplot-flea-eda-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Der Dotplot für die Anzahl der Flöhe für die beiden Tierarten Hund und Katze. Die schwarze Linie stelt den Median für die beiden Tierarten dar."

ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = grade,
                            fill = animal)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  stat_summary(fun = median, fun.min = median, fun.max = median,
               geom = "crossbar", width = 0.5) +
  theme_bw() +
  labs(x = "Tierart", y = "Boniturnote [1-9]") 


```

Nun macht es wenig Sinn bei sehr wenigen Beobachtungen noch statistische Maßzahlen mit in den Plot zu zeichnen. Sonst hätten wir auch gleich einen Boxplot als Visualisierung der Daten wählen können. In @fig-dotplot-flea-eda-1 sehen wir die Ergänzung des Medians. Hier müssen wir etwas mehr angeben, aber immerhin haben wir so eine Idee, wo die "meisten" Beobachtungen wären. Aber auch hier ist Vorsicht geboten. Wir haben sehr wenige Beobachtungen, so dass eine Beobachtung mehr oder weniger große Auswirkungen auf den Median und die Interpretation hat.

Dann möchte ich hier den Beeswarm als eine Alternative zu dem Dotplot vorstellen. Insbesondere wenn du sehr viele Beobachtungen hast, dann hat der Beeswarm bessere Eigenschaften als der Dotplot. Es gibt hier auch die tolle Hilfeseite zu [Beeswarm plot in ggplot2 with geom_beeswarm](https://r-charts.com/distribution/ggbeeswarm/) und natürlich noch die Möglichkeit ein Violin Plot zu ergänzen. Auch hier dann mal bei der Hilfeseite [Violin plot with data points in ggplot2](https://r-charts.com/distribution/violin-plot-points-ggplot2/) schauen. In @fig-beeswarm-flea-eda-0 siehst du dann einmal das Alter und die Körpergröße für die beiden Geschlechter in den Gummibärchendaten aufgeteilt.

```{r }
#| echo: true
#| message: false
#| label: fig-beeswarm-flea-eda-0
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Der Beeswarm ist ein Dotplot für eine große Anzahl an Beobachtungen. Hier schauen wir uns einmal das Alter und die Körpergröße aufgeteilt nach Geschlecht an."
#| fig-subcap: 
#|   - "Alter nach Geschlecht"
#|   - "Körpergröße nach Geschlecht"
#| layout-nrow: 1
#| column: page
ggplot(data = gummi_tbl, aes(x = gender, y = age,
                             color = gender)) +
  geom_beeswarm() +
  theme_bw() +
  labs(x = "Geschlecht", y = "Alter in Jahren") +
  theme(legend.position = "none")

ggplot(data = gummi_tbl, aes(x = gender, y = height,
                             color = gender)) +
  geom_beeswarm() +
  theme_bw() +
  labs(x = "Geschlecht", y = "Körpergröße in cm") +
  theme(legend.position = "none")

```
