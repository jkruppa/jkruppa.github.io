```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Fallzahlplanung

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

::: callout-important
## Disclaimer - Wichtig! Lesen!

Der folgende Text ist ein *Lehr*text für Studierende. Es handelt sich keinesfalls um eine textliche Beratung für Ethikanträge oder Tierversuchsanträge. Alle Beispiel sind im Zweifel an den Haaren herbeigezgen und dienen nur der Veranschaulichung *möglicher* Sachverhalte.

Antragsteller:innen ist die statistische Beratung von einer entsprechenden Institution dringlichst angeraten.
:::

In diesem Kapitel wollen wir uns mit der Fallzahlplanung beschäftigen. Eigentlich stimmt das Wort Planung überhaupt nicht. Wir machen hier eine Fallzahl*abschätzung*. Es geht hier darum, anhand von Werten aus der Literatur für dein eigenen Experiment die nötige Anzahl an Beobachtungen abzuschätzen. Nun ist es so, dass die Berechnung der benötigten Fallzahl in klinischen Studien oder aber Tierversuchsvorhaben *vor* dem Beginn des Versuchs durchgeführt werden muss. Es gibt in diesem Zusammenhang das Tierversuchsvorhaben im Falle von Tieren und den Ethikantrag im einer klinischen Studie. Beide Anträge werden faktisch bei einer Behörde gestellt und haben einen regulativen Charakter. Wir machen hier aber kein Jura. Deshalb hat dieses Kapitel auch keinen beratenden Charakter.

[Für die Plnung von klinischen Studien gibt extra Planungssoftware, die hohe jährliche Lizenzkosten haben.]{.aside}

Wenn du an einer Institution arbeitest oder forscht, die einen Ethikantrag stellen oder einen Tierversuchsantrag einreichen will, wende dich an deine Vertrauensperson. Es muss jemanden bei dir geben, der für solche Anträge zuständig ist. Dieses Kapitel und ich sind es ausdrücklich nicht.

## Theoretischer Hintergrund

Manchmal hat man das Gefühl, dass Fallzahlplanung nur ein wildes Gerate ist. Das ist aus der Perspektive eines biologischen Fachlaien auch der Fall. Ich kenne mich sehr wenig in der vielen biologischen Feldern aus. Daher weiß ich wenig darüber was ein großer Effekt ist oder welchen Effekt du überhaupt in deinem Kartoffelexperiment erwarten kannst. Auch ist mir unklr was typische Mittelwertsunterschiede bei Wasserlinsen sind. Du musst sowas aber wissen, es ist ja schließlich dein Experiment. Wenn du also eine Fallzahlplanung durchführen willst, dann heißt es zuerst einmal Litertaur wäzen oder mit den Fachkollegen sprechen.

::: column-margin
Es gibt *DIE* Übersicht für die Fallzahlberechnung in R von Dr. Mark Williamson in seinem Tutorial [Sample Size Calculation with R](https://med.und.edu/daccota/_files/pdfs/berdc_resource_pdfs/sample_size_r_module.pdf).
:::

Wir kennen ja schon die Formel für den t-Test. Der t-Test vergleicht die Mittelwerte von zwei normalverteilten Outcomes und gewichtet diesen Mittelwertsunterschied bei der Standardabweichung. Da wir in der Formel des t-Tests auch die Fallzahl inkludiert haben, können wir die Formel nach der Fallzahl umstellen.

$$
T = \cfrac{\Delta}{s_p \cdot \sqrt{\cfrac{2}{n_g}}}
$$

Dabei nutzen wir die Teststatistik etwas anders. Wir zerlegen die Teststatistik $T$ für in den Wert für den $\alpha$-Fehler und den $\beta$-Fehler. Damit können wir auch die Power $1-\beta$ mit in unserer Formel berücksichtigen.

$$
n_g = \cfrac{2\cdot(T_{\alpha = 5\%} + T_{\beta = 20\%})^2}{\left(\cfrac{\Delta}{s_p}\right)^2} 
$$

Dabei nutzen wir für $T_{\alpha = 5\%} = 1.96$ und $T_{\beta = 20\%} = 0.84$ und vereinfachen damit die Formel ziemlich. Eigentlich nutzen wir diese Formel dann in der der Klausur oder aber um wirklich mal eben schnell zu schauen, was wir für eine Fallzahl erwarten.

Jetzt könntest du meinen, dass wir jetzt mit verschiedenen Powerleveln spielen könnten. Aber das ist leider nicht der Fall. Wir sind eigentlich zimelich auf 80% festgelegt. Da gibt es im Rahmen eines Antrags keinen Spielraum. Wir nehmen immer eine Power von 80% an.

::: callout-note
## Einseitig oder zweiseitig im Spiegel der Regulierungsbehörden

In den [allgemeinen Methoden des IQWiG](https://www.iqwig.de/ueber-uns/methoden/methodenpapier/), einer Regulierungsbehörde für klinische Studien, wird grundsätzlich das zweiseitige Testen empfohlen. Wenn einseitig getestet werden sollte, so soll das $\alpha$-Niveau halbiert werden. Was wiederum das gleiche wäre wie zweiseitiges Testen - nur mit mehr Arbeit.

*Zur besseren Vergleichbarkeit mit 2-seitigen statistischen Verfahren wird in einigen Guidelines für klinische Studien eine Halbierung des üblichen Signifikanzniveaus von 5 % auf 2,5 % gefordert.* -- [Allgemeine Methoden Version 6.1 vom 24.01.2022, p. 180](https://www.iqwig.de/methoden/allgemeine-methoden-v6-1.pdf)
:::

## Tierversuchsantrag

[Tierversuchsvorhaben LaGeSo](https://www.berlin.de/lageso/gesundheit/veterinaerwesen/tierschutz/versuchsvorhaben/)

[Tierversuche Laves](https://www.laves.niedersachsen.de/startseite/tiere/tierschutz/tierversuche/tierversuche-73708.html)

## Ethikantrag

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, pwr, readxl, see,
               effectsize, conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Mittelwertsvergleich für zwei Gruppen in R

Da wir ja nur die Formel des t-Tests für die Fallzahlberechnung haben, können wir auch immer nur die Fallzahl für den Vergleich zwischen zwei Gruppen rechnen. Das ist immer erstmal wieder ungewohnt. Aber wir machen das jetzt erstmal nur für zwei Gruppen.

[Wenn du für einen Wilcoxon-Test oder einen anderen nicht-parametrischen Test die Fallzahlplanung machen willst, rechne bitte einen t-Test und addiere $+15%$ an Fallzahl drauf.]{.aside}

Für die Berechnung der Fallzahl wollen wir das R paket `pwr` nutzen. Wir brauchen in diesem Kapitel nur zwei Funktion aus dem Paket, aber es gibt auch weit aus mehr. Im Zweifel einfach einmal die Hilfeseite aufrufen.

Wir können mit der Funktion `pwr.t.test()` die Fallzahl für die Effektstärke nach Cohen's d berechnen. Mehr über Cohen's kannst du im @sec-effect erfahren. Wir nutzen hier eine relativ harte Abschätzung. Aber hier wird sowieso alles abgeschätzt, da kommt es jetzt auf künstliche Genauigkeit nicht mehr an.

$$
d = \cfrac{\Delta}{s_{\Delta}}
$$ mit

-   $\Delta$ als den zu erwartenden Mittelwertsunterschied zwischen den beiden Gruppen.
-   $s_{\Delta}$ als der Standardabweichung des Mittelwertsunterschieds. Wir können hier als Vereinfachung mit der Spannweite der Daten mit $\frac{range}{4}$ als Schätzer für die Standardabweichung rechnen.

```{r}
cohen.ES(test = "r", size="medium") %>% 
  pluck("effect.size")
```

small medium large

```{r}
res_ttest <- pwr.t.test(n = NULL,
                        sig.level = 0.05, 
                        type = "two.sample", 
                        alternative = "two.sided", 
                        power = 0.80, 
                        d = 0.8)
res_ttest
```

```{r}
plot(res_ttest) +
  theme_minimal(base_size = 14) +
  labs(title = 'Optimizing Sample Size for my 2-Sided t test',
       subtitle = "Always Round up for Whole Participants, N = 194")
```

## Anteilsvergleich für zwei Gruppen in R

```{r}
ES.h(p1 = 0.95, p2 = 0.80) %>% 
  round(2)
```

```{r}
res_prop <- pwr.p.test(h = 0.48,
                       n = NULL,
                       sig.level = 0.05,
                       power = 0.80,
                       alternative = "greater")
res_prop
```

```{r}
plot(res_prop) +
  theme_minimal(base_size = 14) +
  labs(title = 'Optimizing Sample Size for my 2-Sided t test',
       subtitle = "Always Round up for Whole Participants, N = 194")
```

## Mehr als zwei Gruppen

Was passiert, wenn wir *mehr* als zwei Gruppen vorliegen haben? Was eigentlich immer der Fall ist. Also wir haben nicht nur zwei Dünegstufen oder zwei Sorten Blumenkohl, die wir miteinander vergleichen wollen, sondern wir haben zehn oer mehr. Wir bauen jetzt nicht so ein großes Beispiel sondern nehmen einmal die Sprungweiten von den Hunde-, Katzen- und Fuchsflöhen.

```{r}
fleas_tbl <- read_excel("data/flea_dog_cat_fox.xlsx") %>% 
  mutate(animal = as_factor(animal))
```

In @fig-sample-fox sehen wir nochmal die Verteilung der Sprungweiten für die drei Tierarten als Boxplots dargestellt.

```{r}
#| echo: true
#| message: false
#| label: fig-sample-fox
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Boxplot der Sprungweiten für die Hunde-, Katzen- und Fuchsflöhe."

ggplot(fleas_tbl, aes(animal, jump_length, fill = animal)) + 
  theme_bw() +
  geom_boxplot() +
  theme(legend.position = "none") +
  scale_fill_okabeito()
```

Wenn wir jetzt für ein *neues* Experiment die Fallzahl planen wollen würden, dann brauchen wir die Mittelwerte und die Stanardabweichung der Sprungweiten. Wir haben ja hier unser Pilotexperiment vorliegen, also können wir auch hier die Mittelwerte und die Standardabweichung getrennt für die Tierarten berechnen.

```{r}
fleas_tbl %>% 
  group_by(animal) %>% 
  summarise(mean = mean(jump_length),
            sd = sd(jump_length)) %>% 
  mutate(across(where(is.numeric), round, 2))
```

Natürlich sind wir nicht an den Mittelwerten sondern an den Unterschieden interessiert. Daher rechnen wir nochmal in @tbl-sample-fox alle Mittelwertsdifferenzen aus.

|     |                      |                       |
|:---:|:--------------------:|:---------------------:|
|     |         cat          |          fox          |
| dog | $8.13 - 4.74 = 3.39$ | $8.13 - 9.16 = -1.03$ |
| cat |                      | $4.74 - 9.16 = -4.42$ |

: Mittelwertsdifferenzen für alle paarweisen Vergleiche. {#tbl-sample-fox}

Wenn wir die kleinste Differenz in den Mittelwerten mit einer Power von 80% nachweisen können, dann können wir auch alle anderen größeren Mittelwertsdifferenzen mit einer Power größer als 80% nachweisen. Daher brauchen wir die Fallzahlplanung nur für den kleinsten Mittelwertsunterschied durchführen. Wir berechnen noch Cohen's d mit $d = \tfrac{1.03}{(2.14 + 1.1)/2} \approx 0.16$. Ganz schön kleiner Wert, wie uns die Funktion `interpret_cohens_d()` aus dem R Paket `effectsize` mitteilt.

```{r}
interpret_cohens_d(0.15)
```

Weil wir es können berechnen wir auch die Fallzahl und kriegen einen kleinen Schreck. Denn mit einem so kleinen Effekt brauchen wir wirklich viele Flöhe.

```{r}
res_flea <- pwr.t.test(n = NULL,
                       sig.level = 0.05, 
                       type = "two.sample", 
                       alternative = "two.sided", 
                       power = 0.80, 
                       d = 0.16)
res_flea
```

Mit am Ende über $2 \cdot 615 = 1230$ Flöhen für den Vergleich von Hunde- und Fuchsflöhen sind wir wirklich weit, weit oben was die Fallzahl angeht. Da hilft es dann auch nicht viel, dass wir mit zusätzlich $615$ Katzenflöhen dann auch die anderen paaweisen Vergleichw als signifikant finden würden. Denn Cohen's d für den Vergleich von den Hunde- und Katrzenflöhen wäre $d = \tfrac{3.39}{(2.14 + 1.9)/2} \approx 0.42$. Damit würden wir dann eine Power von $0.99999997$ erhalten. Wir können die Power berechnen indem wir das Feld Power mit `NULL` belegen und die Fallzahl von $n = 615$ eintragen.

```{r}
res_flea <- pwr.t.test(n = 615,
                       sig.level = 0.05, 
                       type = "two.sample", 
                       alternative = "two.sided", 
                       power = NULL, 
                       d = 0.42)
res_flea
```

## G\*Power als Alternative

Als Alternative wollen wir uns noch das Standalone Programmm [G\*Power \| Statistical Power Analyses](https://www.psychologie.hhu.de/arbeitsgruppen/allgemeine-psychologie-und-arbeitspsychologie/gpower) von der Heinrich-Heine-Universität Düsseldorf anschauen. Die Software ist nicht mehr die neusts, wird aber immer noch gewartet und an die aktuellen Versionen von Mac und Windows angepasst.

Ich werde also im Folgenden ein paar Screenshots zeigen, wie du mi G\*Power dir auch die Fallzahl für Mittelwertsunterschiede und Anteilesunterschiede berechnen kannst. Allgemein ist es so das G\*Power *immer* einseitig (eng. *Tail(s) one*) und zu einer Power von 95% testet. Daher müssen wir immr schauen, dass diese Werte stimmen. Insbeosndere, wenn du viel rumprobierst können auch die Werte mal wieder *zurückspringen*. Also bitte darauf achten.

In @fig-gpower-ttest sehen wir die Berechnung der Fallzahl für den t-Test für einen Vergleich zweier Gruppen. Wir müssen darauf achten, dass wir die Testfamilie richtig wählen und dann den korrekten Test auswählen. Du siehst bei der eigenen Verwendung dann, dass es hier eine große Auswahl gibt. Wir nehmen aber den Standard von zwei unabhängigen Gruppen. Wir erhalten dann eine Fallzahl von $n = 54$ für unseren Versuch. Das schöne an G\*Power ist, dass du relativ einfach und schnell mit den Zahlen spielen kannst. Das Speichern ist schwerer, so dass ich immer einen Screenshot empfehle. Man vergisst schnell, was alles in en Feldern stand.

::: column-page
![Die Berechnung der Fallzahl für einen t-Test für zwei Gruppen mit einem Mittelwert +/- Standardabweichung von $14 \pm 2$ in der einen Gruppe und $16 \pm 3$ in der anderen Gruppe. Es ergibt sich ein Cohens' d von $0.78$. Wir müssen darauf achten zweiseitig und zu einer Power von 80% zu testen.](images/gpower-ttest.png){#fig-gpower-ttest fig-align="center" width="80%"}
:::

In @fig-gpower-prop sehen wir die Berechnung der Fallzahl für zwei Anteile. Wir haben zwei Gruppen vorliegen und in der ersten Gruppe haben wir 60% infizierte Ferkel, In der anderen Gruppe erwarten wir dann 90% infiztierte Ferkel. Um den Unterschied von 30% nachzuweisen, brauchen wir mindestens 180 Ferkel. Leider ist es so, dass wir den Test für Anteile unter dem Reiter `Exact` finden. Das muss man eben wisen. Achte wieder auf die Power und das zu zweiseitig testen willst.

::: column-page
![Die Berechung der Fallzahl für einen Anteil in zwei Gruppen von $0.6$ in der einen Gruppe und $0.8$ in der anderen Gruppe. Wir müssen darauf achten zweiseitig und zu eienr Power von 80% zu testen.](images/gpower-prop.png){#fig-gpower-prop fig-align="center" width="80%"}
:::
