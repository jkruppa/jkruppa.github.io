```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Zeitreihen (eng. *time series*) {#sec-time-series}

*Letzte Änderung am `r format(fs::file_info("time-space-time-series.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"Die Vergangenheit ist geschrieben, aber die Zukunft ist noch nicht in Stein gemeißelt" --- Jean-Luc Picard, Star Trek: The Next Generation*

![](images/caution.png){fig-align="center" width="50%"}

In diesem Kapitel wollen wir uns mit Zeitreihen (eng. *time series*) beschäftigen. Was ja auch irgendwie zu erwarten war, denn so heißt ja auch das Kapitel hier. Wir haben ganz einfach auf der $x$-Achse einer potenziellen Visualisierung die Zeit dargestellt. Wir wollen dann auswerten, ob es über den zeitlichen Verlauf einen Trend gibt oder wir ein gutes Modell für den Verlauf der Beobachtungen anpassen können. Es kann auch sein, dass wir zwei zeitliche Verläufe miteinander vergleichen wollen. Dabei haben wir dann aber meistens nicht einen super simplen Verlauf, sondern Spitzen oder Täler in den Daten, so dass wir hier die Daten entsprechend glätten (eng. *to smooth*) müssen.

Wenn du noch mehr lesen willst, dann kann ich dir folgende Literatur empfehlen. @robert2006time liefert eine gute Übersicht über die Anwendung in R, ist aber schon etwas älter. Das Gleiche gilt dann auch für das Buch von @chan2008time und @cowpertwait2009introductory. Dennoch bilden alle drei Bücher die Grundlagen der Analysen von zeitreihen super ab. Für eine Abschlussarbeit sollten die Quellen also allemal reichen.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, janitor, see,
               lubridate, conflicted)
conflicts_prefer(dplyr::filter)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

In diesem Kapitel nutzen wir CSH-Datei-Erweiterung ist ein Datenformat als Photoshop-Datei

```{r}
#| message: false
#| warning: false

csh_tbl <- read_excel("data/csh_data.xlsx") %>% 
  clean_names() %>% 
  mutate_if(is.numeric, round, 2)
```

`r nrow(csh_tbl)`

@tbl-time-csh

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-time-csh
#| tbl-cap: "Auszug"

rbind(head(csh_tbl, n = 4),
      rep("...", times = ncol(csh_tbl)),
      tail(csh_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

Nächster Datensatz

```{r}
#| message: false
#| warning: false

salad_tbl <- read_excel("data/temperatur_salad.xlsx") %>% 
  clean_names() %>% 
  mutate_if(is.numeric, round, 2)
```

`r nrow(salad_tbl)`

@tbl-time-temp

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-time-temp
#| tbl-cap: "Auszug"
#| column: page

raw_salad_tbl <- salad_tbl %>% 
  mutate_all(as.character)

rbind(head(raw_salad_tbl , n = 4),
      rep("...", times = ncol(raw_salad_tbl)),
      tail(raw_salad_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

Nächster Datensatz

```{r}
#| message: false
#| warning: false

station_tbl <- read_excel("data/Wetterstation_Hagebüchen.xlsx") %>% 
  clean_names() %>% 
  mutate_if(is.numeric, round, 2)
```

`r nrow(station_tbl)`

@tbl-time-station

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-time-station
#| tbl-cap: "Auszug"
#| column: page

raw_station_tbl <- station_tbl %>% 
  mutate_all(as.character)

rbind(head(raw_station_tbl , n = 4),
      rep("...", times = ncol(raw_station_tbl)),
      tail(raw_station_tbl, n = 4)) %>% 
  kable(align = "c", "pipe")
```

## Das Datumsformat

Wichtig ist, dass wir das richtige Datumsformat haben. Siehe dazu auch das Kapitel [Zeit und Datum](#sec-time-date)

[Date Formats in R](https://www.r-bloggers.com/2013/08/date-formats-in-r/)

### Die CSH-Daten

```{r}
csh_tbl <- csh_tbl %>% 
  mutate(day = as.Date(str_pad(day, 4, pad = "0", side = "left"), format = "%m%d"))
```

```{r}
csh_tbl %>% 
  head(4)
```

### Die Salatdaten

```{r}
salad_long_tbl <- salad_tbl %>% 
  mutate(uhrzeit = format(uhrzeit, format = "%H:%M:%S"),
         datum = format(datum, format = "%Y-%m-%d"),
         datum = ymd(datum) + hms(uhrzeit)) %>% 
  select(-uhrzeit) %>% 
  pivot_longer(nord_messw:last_col(),
               names_sep = "_",
               names_to = c("location", "type"),
               values_to = "temp") 
```

### Die Wetterstationsdaten

```{r}
station_tbl <- station_tbl %>% 
  mutate(datum_uhrzeit = as_datetime(datum_uhrzeit))
```

## Visualisierung

### Die CSH Daten

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-csh-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "Eigenwerte für die beiden Datensätze."

csh_tbl %>% 
  ggplot(aes(day, g_tm_plot, color = parzelle)) +
  theme_bw() +
  geom_point() +
  stat_smooth(se = FALSE) +
  scale_color_okabeito() 

```

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-csh-2
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "Eigenwerte für die beiden Datensätze."

p_csh <- csh_tbl %>% 
  ggplot() +
  theme_bw() +
  scale_color_okabeito() +
  stat_smooth(aes(day, g_tm_plot, color = parzelle), se = FALSE, n = 100) # <1>
```

1.  Setze `n = 1000` um wirklich eine gute Abdeckung später für die Berechung der Fläche zu haben.

```{r}
#| message: false
#| echo: true
#| warning: false
p_csh_str <- ggplot_build(p_csh)
```

```{r}
#| message: false
#| echo: true
#| warning: false
ribbon_tbl <- p_csh_str %>% 
  pluck("data", 1) %>% 
  as_tibble() %>% 
  select(x, y, group) %>% 
  mutate(group = factor(group, labels = c("Uelzen", "Wiese"))) %>% 
  split(.$group) %>% 
  bind_cols() %>% 
  clean_names() %>% 
  select(x = x_1, Uelzen = y_2, Wiese = y_5) %>%  # <1>
  mutate(x = as_date(x, origin = lubridate::origin)) # <2>
```

1.  Die `y_2` Werte sind die Werte aus Uelzen und die `y_5` Werte von der Wiese.
2.  Die `x`-Werte sind noch das Datum in numerischer Form aus `ggplot()`. Hier wieder zurück ins `yyyy-mm-dd` Format.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-csh-3
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Eigenwerte für die beiden Datensätze."
#| fig-subcap: 
#|   - "Tierdaten `animals_df`"
#|   - "Kreaturendaten `std_creature_df`"
#| layout-nrow: 1
#| column: page

p_csh + 
  geom_ribbon(data = ribbon_tbl, aes(x = x, ymin = Wiese, ymax = Uelzen),
                    fill = "grey", alpha = 0.4) +
  ylim(10, 120)

p_csh + 
  geom_ribbon(data = ribbon_tbl, aes(x = x, ymin = Wiese, ymax = Uelzen),
                    fill = "grey", alpha = 0.4) +
  geom_point(aes(day, g_tm_plot, color = parzelle)) +
  ylim(10, 120)

```

```{r}
ribbon_tbl %>% 
  mutate(diff = Uelzen - Wiese) %>% 
  pull(diff) %>% 
  sum()
```

Wenn wir oben `n = 1000` in der Funktion `stat_smooth()` gesetzt hätten, dann hätten wir hier fast eine Linie aus Punkten ohne Lücken.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-csh-4
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Eigenwerte für die beiden Datensätze."
ribbon_tbl %>% 
  pivot_longer(cols = Uelzen:Wiese,
               values_to = "g_tm",
               names_to = "parzelle") %>% 
  ggplot(aes(x, g_tm, color = parzelle)) +
  theme_bw() +
  scale_color_okabeito() +
  geom_point()
```

### Salat Daten

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-salad-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Eigenwerte für die beiden Datensätze."
#| fig-subcap: 
#|   - "Tierdaten `animals_df`"
#|   - "Kreaturendaten `std_creature_df`"
#| layout-nrow: 1
#| column: page
salad_long_tbl %>% 
  ggplot(aes(datum, temp, color = type)) +
  theme_bw() +
  scale_color_okabeito() +
  geom_line() +
  facet_wrap(~ location)

salad_long_tbl %>% 
  ggplot(aes(datum, temp, color = location)) +
  theme_bw() +
  scale_color_okabeito() +
  geom_line() +
  facet_wrap(~ type, ncol = 1) 
```

### Die Wetterstationsdaten

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-time-station-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Eigenwerte für die beiden Datensätze."
station_tbl %>% 
  ggplot(aes(datum_uhrzeit, temp_boden_durch)) +
  theme_bw() +
  scale_color_okabeito() +
  geom_line() 
```

## Modeltime tutorial

```{r}
pacman::p_load(xgboost, tidymodels, modeltime, timetk)

# This toggles plots from plotly (interactive) to ggplot (static)
interactive <- FALSE

# Data
m750 <- m4_monthly %>% filter(id == "M750")

m750 %>%
  plot_time_series(date, value, .interactive = interactive)

splits <- initial_time_split(m750, prop = 0.9)

model_fit_arima_no_boost <- arima_reg() %>%
    set_engine(engine = "auto_arima") %>%
    fit(value ~ date, data = training(splits))

# Model 3: ets ----
model_fit_ets <- exp_smoothing() %>%
    set_engine(engine = "ets") %>%
    fit(value ~ date, data = training(splits))

# Model 5: lm ----
model_fit_lm <- linear_reg() %>%
    set_engine("lm") %>%
    fit(value ~ as.numeric(date) + factor(month(date, label = TRUE), ordered = FALSE),
        data = training(splits))

models_tbl <- modeltime_table(
    model_fit_arima_no_boost,
    model_fit_ets,
    model_fit_lm
)

calibration_tbl <- models_tbl %>%
    modeltime_calibrate(new_data = testing(splits))


calibration_tbl %>%
    modeltime_forecast(
        new_data    = testing(splits),
        actual_data = m750
    ) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25, # For mobile screens
      .interactive      = interactive
    )
```

```{r}
calibration_tbl %>%
    modeltime_accuracy() %>%
    table_modeltime_accuracy(
        .interactive = interactive
    )

```

-   MAE - Mean absolute error, mae()
-   MAPE - Mean absolute percentage error, mape()
-   MASE - Mean absolute scaled error, mase()
-   SMAPE - Symmetric mean absolute percentage error, smape()
-   RMSE - Root mean squared error, rmse()
-   RSQ - R-squared, rsq()

```{r}
refit_tbl <- calibration_tbl %>%
    modeltime_refit(data = m750)

refit_tbl %>%
    modeltime_forecast(h = "3 years", actual_data = m750) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25, # For mobile screens
      .interactive      = interactive
    )
```

## Links

[Welcome to a Little Book of R for Time Series!](https://a-little-book-of-r-for-time-series.readthedocs.io/en/latest/)

[14 Time Series Analysis](https://rc2e.com/timeseriesanalysis)

[Timeseries analysis in R](https://www.r-bloggers.com/2021/04/timeseries-analysis-in-r/)

[timetk for R](https://business-science.github.io/timetk/)

[Analysing Time Series Data -- Modelling, Forecasting And Data Formatting In R](https://ourcodingclub.github.io/tutorials/time/)

## Referenzen {.unnumbered}
