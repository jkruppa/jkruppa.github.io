# Daten einlesen

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra)

```

Die Daten aus unserem Experiemnt müssen rein in R. Das heißt, wir haben meist unsere Daten in einer Exceldatei vorliegen und wollen diese Daten nun in R einlesen.

Gängige Fehler beim Einlesen von Dateien in R

-   der Pfad zur Datei ist falsch (@sec-pfad)
-   in der Datei sind komische Zeichen, wie Umlaute und Co. (@sec-umlaute)
-   in der Datei sind Leerzeichen in den Spaltennamen (@sec-spalten)

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, janitor)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Importieren mit RStudio

Wir können das RStudio nutzen um Daten mit Point-and-Klick rein zuladen und dann den Code wieder in den Editor kopieren. Im Prinzip ist dieser Weg der einfachste um einmal zu sehen, wie ein pfad funktioniert und der Code lautet. Später benötigt man diese 'Krücke' nicht mehr. Wir nutzen dann direkt den Pfad zu der Datei. @fig-imp-01 zeigt einen Ausschnitt, wo wir im RStudio die *Import Dataset* Funktionalität finden.

![Auf den Reiter *Einviroment* klicken und dann *Import Dataset*. In der deutschen version vom RStudio mögen die Begriffe leicht anders sein.](images/import_01.PNG){#fig-imp-01 fig-align="center" width="300"}

::: callout-tip
## Importieren mit RStudio als Video

Du findest auf YouTube [Einführung in R - Teil 21.0 - Daten importieren mit RStudio - Point and Klick](https://youtu.be/tdRWkBcGAzk) als Video. Point and Klick ist als Video einfacher nachzuvollziehen als Screenshots in einem Fließtext.
:::

## Importieren per Pfad {#sec-pfad}

In @fig-imp-02 können wir sehen wie wir den Pfad zu unserer Excel Datei `flea_dog_cat.xlsx` finden. Natürlich kannst du den Pfad auch anders herausfinden bzw. aus dem Explorer oder Finder kopieren.

![Durch den Rechts-Klick auf die Eigenschaften einer Datei kann man sich den Pfad zur Datei anzeigen lassen. **Achtung!** Unter Windows muss der Slash `\` noch in den Backslash `/` gedreht werden.](images/import_02.PNG){#fig-imp-02 fig-align="center" width="350"}

Nachdem wir den Pfad gefunden haben, können wir den Pfad in die Funktion `read_excel()` kopieren und die Datei in das Objekt `data_tbl` einlesen. Ja, es wird nichts in der R Console ausgegeben, da sich die Daten jetzt in dem Object `data_tbl` befinden.

```{r}
## Ganzer Pfad zur Datei flea_dog_cat.xlsx
data_tbl <- read_excel("data/flea_dog_cat.xlsx")
```

::: callout-important
## Unterschied zwischen `\` in Windows und `/` in R

Achte einmal auf den Slash im Pfad in R und einem im Pfsd in Windows. Einmal ist es der Slash `\` im Dateipfad und einmal der Backslash `/`. Das ist sehr ärgerlich, aber dieses Problem geht zurück in die 80'ziger. Bill hat entschieden für sein Windows `/` zu nutzen und Steve (und Unix) eben `/`. Und mit dieser Entscheidung müssen wir jetzt leben...
:::

## Auf ein englisches Wort in Dateien {#sec-umlaute}

Ein großes Problem in Datein sind Umlaute (ä,ö,ü) oder aber andere (Sonder)zeichen (ß, ?, oder #). Als dies sollte vermieden werden. Eine gute Datei für R beinhaltet nur *ganze* Wörter, Zahlen oder aber leere Felder. Ein leeres Feld ist ein fehlender Wert. @fig-imp-03 zeigt eine gute Exceldatentablle. Wir schreiben `jump_length` mit Unterstrich um den Namen besser zu lesen zu können. Sonst ist auch alles in Englisch geschrieben. Wir vermeiden durch die neglische Schreibweise *aus versehen* einen Umlaut oder anderweitig problematische Zeichen zu verwenden. Später können wir alles noch für Abbildungen anpassen.

![Beispiel für eine gute (Excel)Datentabelle. Keine Umlaute sind vorhanden und die Spaltennamen haben keine Leerzeichen oder Sonderzeichen.](images/import_03.PNG){#fig-imp-03 fig-align="center"}

## Spaltennamen in der (Excel)-Datei {#sec-spalten}

Die Funktion `clean_names()` aus dem R Paket `janitor` erlaubt es die Spaltennamen einer eingelesenen Datei in eine für R gute Form zu bringen.

-   Keine Leerzeichen in den Spaltennamen.
-   Alle Spaltennamen sind klein geschrieben.

```{r}
data_tbl %>% 
  clean_names()
```

### Datenbeispiel

## Wide format

| dog  | cat  |
|:----:|:----:|
| 5.2  | 10.1 |
| 4.9  | 9.4  |
| 12.1 | 11.8 |
| 8.2  | 6.7  |
| 5.6  | 8.2  |
| 9.1  | 9.1  |
| 7.4  | 7.1  |

```{r }
jump_wide_tbl <- tibble(dog = c(5.2, 4.9, 12.1, 8.2, 5.6, 9.1, 7.4),
                   cat = c(10.1, 9.4, 11.8, 6.7, 8.2, 9.1, 7.1))

jump_wide_tbl
```

## Long format

```{r }
jump_tbl <- tibble(dog = c(5.2, 4.9, 12.1, 8.2, 5.6, 9.1, 7.4),
                   cat = c(10.1, 9.4, 11.8, 6.7, 8.2, 9.1, 7.1)) %>%
  gather(key = "animal", value = "jump_length")
jump_tbl

```

```{r}
#| echo: false

data_tbl <- tibble(treatment = gl(4, 4, labels = c("A", "B", "C", "D")),
                   block = rep(1:4, 4),
                   rep_1 = round(rnorm(16, 15, 2), 2),
                   rep_2 = round(rnorm(16, 15, 2), 2),
                   rep_3 = round(rnorm(16, 17, 2), 2),
                   rep_4 = round(rnorm(16, 17, 2), 2),
                   rep_5 = round(rnorm(16, 18, 2), 2),
                   rep_6 = round(rnorm(16, 18, 2), 2))
data_tbl %>% 
  kable(align = "c", "pipe")

```

```{r}
data_tbl %>% 
  gather(rep, value, rep_1:rep_6) %>% 
  arrange(treatment, block)
```
