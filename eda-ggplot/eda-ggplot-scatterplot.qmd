Der Scatterplot wird auch $xy$-Plot genannt. Wir stellen in einem Scatterplot zwei kontinuierliche Variablen dar. Wir haben also auf der $x$-Achse Kommazahlen genauso wie auf der $y$-Achse. Aber dazu dann gleich mehr in den folgenden Tabs zur theoretischen Betrachtung, einem Beispiel und der Umsetzung in `{ggplot}`. Ein Scatterplot nutzen wir relativ häufig, wenn wir den Zusammenhang zwischen kontinuierlichen Zahlen zeigen wollen.

:::: panel-tabset
## Theoretisch

Das Ziel eines Scatterplots ist es eine Abhängigkeit zwischen den Werten auf der $y$-Achse und der $x$-Achse darzustellen. Wenn sich die Werte auf der $x$-Achse ändern, wie ändern sich dann die Werte auf der $y$-Achse? Im einfachsten Fall zeichnen wir für die Wertepaare von $x$ und $y$ jeweils ein Punkt in unserer Koordinatensystem.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-scatter-theo-01
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 6
#| fig-cap: "Typischer Scatterplot mit gängigen Bezeichnungen der $x$-Achse sowie der $y$-Achse. *[Zum Vergrößern anklicken]*"


simple_tbl <- tibble(jump_length = c(1.2, 1.8, 1.3, 1.7, 2.6, 1.8, 2.7),
                     weight = c(0.8, 1, 1.2, 1.9, 2, 2.7, 2.8))

simple_fit <- lm(jump_length ~ weight, data = simple_tbl) |> 
  augment()

ggplot(simple_tbl, aes(weight, jump_length)) +
  theme_minimal() +
  xlim(0, 3.5) + ylim(0, 3.5) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_point(size = 3) +
  labs(x = "Einflussgröße - Unabhängige Variable\nX", 
       y = "Y\nMesswerte - Zielgröße - Abhängige Variable")  +
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.title.x = element_text(size = 14, face = 2),
        axis.title.y = element_text(size = 14, face = 2))
```

Um den Zusammenhang zwischen $y$ und $x$ zu visualisieren legen wir eine Linie durch die Punkte. Diese Gerade folgt dann einer Geradengleichung der Form $y = \beta_0 + \beta_1 x$. Wobei der Wert für $\beta_0$ den y-Achsenabschnitt beschreibt und der Wert für $\beta_1$ die Steigung der Geraden. Wir wir methodisch zu den Zahlen einer Geradengleichung kommen und damit den Werten für $\beta_0$ und $\beta_1$, kannst du dann später in dem [Kapitel zur linearen Regression](#sec-modeling-simple-stat) nachlesen. Im Prinzip fragen wir uns also, wie hänge die Werte auf der $y$-Achse von den Werten auf der $x$-Achse ab? Wenn sich also die Werte auf der $x$-Achse erhöhen oder kleiner werden, wie verhalten sich dann die Werte auf der $y$-Achse?

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-scatter-theo-02
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 6
#| fig-cap: "Visualisierung eines Scatterplots mit einer Geraden durch die Punktewolke. Die lineare Regression wurde zur Bestimmung der Geradengleichung der Geraden durch die Punkte des Scatterplots genutzt. Die Linie oder Gerade wird durch die statistischen Maßzahlen oder Parameter $\\beta_0$ als y-Achsenabschnitt und $\\beta_1$ als Steigung der Gerade beschrieben. *[Zum Vergrößern anklicken]*"

ggplot(simple_tbl, aes(weight, jump_length)) +
  theme_minimal() +
  xlim(0, 3.5) + ylim(0, 3.5) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_segment(x = 1.035, y = 1.5, 
               xend = 2, yend = 1.5, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 2, y = 1.5, 
               xend = 2, yend = 2, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  annotate("text", x = 0.35, y = 0.5, label = expression(beta[0]), size = 7,
           color = "#E69F00") +
  geom_curve(x = 0.2, y = 0.5, xend = 0, yend = 0.95,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3,
           color = "#E69F00") +
  annotate("text", x = 2.35, y = 1.7, label = expression(beta[1]), size = 7,
           color = "#E69F00") +
  geom_curve(x = 2.2, y = 1.7, xend = 2.02, yend = 1.75,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3,
           color = "#E69F00") +
  annotate("label", x = 0.5, y = 3, hjust = "left", color = "#E69F00", size = 7,
           label = expression(y~'='~beta[0]~+~beta[1]~x)) +
  annotate("text", x = 1, y = 1.35, label = expression(x), size = 7, 
               color = "#D55E00") +
  annotate("text", x = 2, y = 1.35, label = expression(x+1), size = 7, 
               color = "#D55E00") +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, color = "#56B4E9") +
  geom_point(size = 3) +
  labs(x = "X", 
       y = "Y")  +
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.title.x = element_text(size = 14, face = 2),
        axis.title.y = element_text(size = 14, face = 2))

```

## Händisch

Wenn wir ein Scatterplot zeichnen wollen, dann brauchen wir erstmal paarweise Werte für $x$ und $y$. In der folgenden Tabelle findest du die Informationen von sieben HUndeflöhen zu der Sprungweite in \[cm\] und dem Gewicht der Flöhe in \[mg\]. Gibt es nun einen Zusammenhang zwischen der Sprungweite und dem Gewicht der Flöhe? Springen kräftigere Flöhe weiter? Oder eher nicht so weit, weil schwere Flöhe eben nicht so hoch springen können? Diesen Zusammenhang können wir dann mit einem Scatterplot visualisieren.

```{r}
#| echo: false
#| label: tbl-scatter-flea-weight
#| tbl-cap: "Die Sprungweite in [cm] und das Gewicht in [mg] von sieben Hundeflöhen."

simple_tbl |>
  mutate(Index = 1:7) |> 
  select(Index, everything()) |> 
  kable(align = "c", "pipe")
```

In der folgenden Abbildung siehst du einmal den Zusammenhang zwischen der Sprungweite und dem Gewicht von von unseren sieben Hundeflöhen. Für das dritte und fünfte Tier habe ich dir einmal das Wertepaar mit $(x_3, y_3)$ und $(x_5, y_5)$ beschriftet.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-scatter-02
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 6
#| fig-cap: "Visualisierung des Scatterplots für die Sprungweite in [cm] und das Gewicht in [mg] von sieben Hundeflöhen. Das dritte und fünfte Tier wurde mit dem Wertepaar $(x_3, y_3)$ und $(x_5, y_5)$ beschriftet. *[Zum Vergrößern anklicken]*"

ggplot(simple_tbl, aes(weight, jump_length)) +
  theme_minimal() +
  xlim(0, 3.5) + ylim(0, 3.5) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_segment(x = simple_fit$weight, y = 0, 
               xend = simple_fit$weight, yend = simple_fit$jump_length, 
               color = "#009E73",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 0, y = simple_fit$jump_length, 
               xend = simple_fit$weight, yend = simple_fit$jump_length, 
               color = "#CC79A7",
               linewidth = 0.5, linetype = 1) +
  annotate("text", x = 1.4, y = 1.25, label = expression('('*x[3]*','~y[3]*')'), size = 4, 
           color = "black") +
  annotate("text", x = 2.2, y = 2.55, label = expression('('*x[5]*','~y[5]*')'), size = 4, 
           color = "black") +
  labs(x = "Gewicht der Hundeflöhe in [mg]", y = "Sprungeweite der Hundeflöhe in [cm]") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 11),
        axis.text.y = element_text(size = 10),
        axis.title.x = element_text(size = 14, face = 2),
        axis.title.y = element_text(size = 14, face = 2),
        panel.grid.minor = element_blank()) +
  geom_point(size = 3) +
  scale_x_continuous(breaks = simple_fit$weight, labels = simple_fit$weight,
                     guide = guide_axis(n.dodge=2),
                     limits = c(0, 3.5)) +
  scale_y_continuous(breaks = simple_fit$jump_length, labels = simple_fit$jump_length,
                     limits = c(0, 3.5))
```

Nun können wir auch hier einmal die Geradengleichung ergänzen. Wenn wir das ganze händisch machen, dann würden wir die Werte für $\\beta_0$ als y-Achsenabschnitt und $\\beta_1$ als Steigung der Gerade visuell abschätzen. Das machen wir natürlich nicht in der Anwendung. Dafür habe ich dann das [Kapitel zur linearen Regression](#sec-modeling-simple-stat) geschrieben. Aus einer linearen Regression erhalten wir dann auch die Werte $\beta_0 = 0.99$ und $\beta_1 = 0.51$, die wir dann in die Regressiongleichung einsetzen. In der folgenden Abbildung siehst du den Zusammenhang nochmal dargestellt.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-scatter-04
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 6
#| fig-cap: "Visualisierung der Bestimmung der Geradengleichung anhand eines Scatterplots für die Sprungweite in [cm] und das Gewicht in [mg] von sieben Hundeflöhen. Wir legen eine Gerade durch eine Punktewolke. Die Gerade wird durch die statistischen Maßzahlen bzw. Parameter $\\beta_0$ und $\\beta_1$ beschrieben. *[Zum Vergrößern anklicken]*"

ggplot(simple_tbl, aes(weight, jump_length)) +
  theme_minimal() +
  xlim(0, 3.5) + ylim(0, 3.5) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_segment(x = 1.035, y = 1.5, 
               xend = 2, yend = 1.5, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 2, y = 1.5, 
               xend = 2, yend = 2, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 1) +
  geom_segment(x = 0, y = 1.5, 
               xend = 2, yend = 1.5, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 2) +
  geom_segment(x = 0, y = 2.01, 
               xend = 2, yend = 2.01, 
               color = "#D55E00",
               linewidth = 0.5, linetype = 2) +
  annotate("text", x = 0.25, y = 0.5, label = expression(beta[0]*'='*0.99), size = 6,
           color = "#E69F00", hjust = "left") +
  geom_curve(x = 0.2, y = 0.5, xend = 0, yend = 0.95,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = -0.3, alpha = 0.3,
           color = "#E69F00") +
  annotate("text", x = 2.25, y = 1.6, label = expression(beta[1]*'='*2.01-1.5*'='*0.51), 
           size = 6,
           color = "#E69F00", hjust = "left") +
  geom_curve(x = 2.3, y = 1.7, xend = 2.02, yend = 1.75,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3,
           color = "#E69F00") +
  annotate("label", x = 0.5, y = 3, hjust = "left", color = "#E69F00", size = 7,
           label = expression(y~'='~0.99~+~0.51~x)) +
  annotate("text", x = 1, y = 1.35, label = expression(x), size = 7, 
               color = "#D55E00") +
  annotate("text", x = 2, y = 1.35, label = expression(x+1), size = 7, 
               color = "#D55E00") +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, color = "#56B4E9") +
  geom_point(size = 3) +
  labs(x = "Gewicht der Hundeflöhe in [mg]", y = "Sprungeweite der Hundeflöhe in [cm]") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 11),
        axis.text.y = element_text(size = 11),
        axis.title.x = element_text(size = 14, face = 2),
        axis.title.y = element_text(size = 14, face = 2),
        panel.grid.minor = element_blank()) +
  scale_x_continuous(breaks = simple_fit$weight, labels = simple_fit$weight,
                     guide = guide_axis(n.dodge=2),
                     limits = c(0, 3.5)) +
  scale_y_continuous(breaks = c(simple_fit$jump_length, 1.5, 2.01), 
                     labels = c(simple_fit$jump_length, 1.5, 2.01),
                     limits = c(0, 3.5))

  
```

## `{ggplot}`

Als erstes brauchen wir wieder einen kleineren Datensatz und ich nehme hier mal die Sprungweiten und das Körpergewicht von sieben Katzenflöhen. Dafür nutze ich die Funktionen `filter()` und `select()` um mir einen kleineren Datensatz zu bauen.

```{r}
flea_cat_jump_weight_tbl <- fac1_tbl |> 
  filter(animal == "cat") |> 
  select(jump_length, weight)
```

Die @fig-scatter-flea-0 zeigt den Scatterplot für die Spalte `weight` auf der $x$-Achse und `jump_length` auf der $y$-Achse für unsere sieben Katzenflöhe. Mit der Funktion `geom_point()` können wir die Punktepaare für jede Beobachtung zeichnen. Wie du erkennen kannst, hat das Gewicht der Katzenflöhe einen Einfluss auf die Sprungweite.

```{r }
#| echo: true
#| message: false
#| label: fig-scatter-flea-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar."

ggplot(data = flea_cat_jump_weight_tbl, aes(x = weight, y = jump_length)) +
  theme_minimal() +
  geom_point() +
  labs(x = "Gewicht der Katzenflöhe [mg]", y = "Sprungweite in [cm]") +
  ylim(0, NA) + xlim(0, NA)
```

Jetzt wollen wir noch die Geradengleichung aus einer [simplen linearen Regression](#sec-modeling-simple-stat) zu der Abbildung ergänzen. Die Gleichung ist dabei wie folgt.

$$
jump\_length = 0.6377 + 1.8188 \cdot weight
$$

Wir bauen uns hier eine Funktion in R, die die Geradengleichung repräsentiert.

```{r}
jump_func <- \(x){0.6377 + 1.8188 * x}
```

Wir können jetzt die Geradengleichung einmal über die Funktion `geom_function()` zu der Abbildung ergänzen. Es gebe auch die Möglichkeit die Funktion `geom_smooth()` zu nutzen, aber dann haben wir nicht die Werte für die Gerade sondern nur die Gerade in der Abbildung. Das macht besonders bei mehreren Gruppen Sinn, wenn wir mal schauen wollen, ob es einen Zusammenhang gibt.

```{r }
#| echo: true
#| message: false
#| label: fig-scatter-flea-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar. Eine eigene Geradengleichung wurde durch `geom_function()` ergänzt."

ggplot(data = flea_cat_jump_weight_tbl, aes(x = weight, y = jump_length)) +
  theme_minimal() +
  geom_point() +
  geom_function(fun = jump_func, color = "blue") +
  labs(x = "Gewicht der Katzenflöhe [mg]", y = "Sprungweite in [cm]") +
  ylim(0, NA) + xlim(0, NA)
```

#### Einfaktorieller Scatterplot {.unnumbered .unlisted}

```{r}
#| echo: true
#| message: false
#| label: fig-scatter-flea-3
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar. Eine eigene Gerade wurde durch `stat_smooth()` für jede Gruppe ergänzt."

ggplot(data = fac1_tbl, 
       aes(x = weight, y = jump_length, color = animal,
           shape = animal)) +
  theme_minimal() +
  geom_point(size = 2, show.legend = TRUE) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  labs(x = "Gewicht der Flöhe [mg]", y = "Sprungweite in [cm]",
       color = "Flohart", shape = "Flohart") +
  scale_color_okabeito() +
  guides(shape = guide_legend(override.aes = list(size = 2.5)))
```

#### Zweifaktorieller Scatterplot {.unnumbered .unlisted}

Wenn wir uns einen zweifaktoriellen Scatterplot anschauen wollen, dann wird die Sachlage schon spannender. hier müssen wir dann mehr programmieren. Ich muss selbr gestehen, dass die gemeinsame Legende immer so eine Sache ist und ich danna und ich dann auch immer länger brauche, bis ich alles zusammen habe. Aber das ist bei komplexeren Abbdilungen eigentlich immer der Fall. Hier wollen wir dann ja auch vier Spalten mit den Sprungweiten, dem Gewicht sowie der Flohart und dem Geschlecht in einer Abbildung darstellen und das ist dann auch komplexer.

::: panel-tabset
## Getrennte Legende

```{r}
#| echo: true
#| message: false
#| label: fig-scatter-flea-4
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar. Eine eigene Gerade wurde durch `stat_smooth()` für jede Faktorkombination ergänzt. Hier wird die Legende getrennt für das Geschlecht und die Floharten dargestellt. Die einzelnen Beobachtungen wurden ausgegraut."

ggplot(data = fac2_tbl, 
       aes(x = weight, y = jump_length, color = animal,
           linetype = sex)) +
  theme_minimal() +
  geom_point2(show.legend = FALSE, alpha = 0.5) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_color_okabeito() +
  labs(x = "Gewicht der Flöhe [mg]", y = "Sprungweite in [cm]",
       linetype = "Geschlecht", color = "Flohart") +
  theme(legend.key.width = unit(1.2, "cm")) +
  guides(linetype = guide_legend(override.aes = list(color = "black", linewidth = 0.5)),
         color = guide_legend(override.aes = list(linewidth = 0.5)))
```

## Gemeinsame Legende

```{r}
#| echo: true
#| message: false
#| label: fig-scatter-flea-5
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar. Eine eigene Gerade wurde durch `stat_smooth()` für jede Faktorkombination ergänzt. Hier wird die Legende zusammen für das Geschlecht und die Floharten dargestellt. Die Legende wurde dann auch über die Abbildung gesetzt. Die einzelnen Beobachtungen wurden ausgegraut."

ggplot(data = fac2_tbl, 
       aes(x = weight, y = jump_length, color = interaction(sex, animal),
           linetype = interaction(sex, animal))) +
  theme_minimal() +
  geom_point2(show.legend = FALSE, alpha = 0.5) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_color_manual(name = "Geschlecht & Flohart", 
                     labels = c("Katze & männlich", "Hund & männlich", "Fuchs & männlich",
                                "Katze & weiblich", "Hund & weiblich", "Fuchs & weiblich"),
                     values = rep(c("#E69F00", "#56B4E9", "#009E73"), 2)) +
  scale_linetype_manual(name = "Geschlecht & Flohart", 
                        labels = c("Katze & männlich", "Hund & männlich", "Fuchs & männlich",
                                   "Katze & weiblich", "Hund & weiblich", "Fuchs & weiblich"),
                        values = rep(c(1, 2), each = 3)) +
  labs(x = "Gewicht der Flöhe [mg]", y = "Sprungweite in [cm]") +
  theme(legend.position = "top", 
        legend.key.width = unit(1.3,"cm"),
        legend.title = element_blank()) +
  guides(linetype = guide_legend(override.aes = list(linewidth = 0.5)))
```

## `{tidyplots}`

Der Scaterplot lässt sich nict so gut in `{tidyplots}` darstellen, wenn wir dann noch eine Gleichung oder ein Modell ergänzen wollen. Da ist dann `{ggplot}` einfach besser. Hier also dann einmal den simplen Plot für den Zusammenhang von der Sprungweite und den Floharten. Oder andersherum, für die Darstellung von Scatterplots mit Regressionen würde ich dann nicht `{tidyplots}` nutzen.

#### Einfaktorieller Scatterplot {.unnumbered .unlisted}

Wir brauchen für den Scatterplot nur die Funktion `add_data_points()` für die Darstellung der Punkte und dann noch die Funktion `add_curve_fit()` für die Geraden durch die Punkte. Der Rest dient dann dazu die Abbildung zu formatieren und hübscher zu machen.

```{r}
#| echo: true
#| message: false
#| label: fig-scatter-flea-6
#| fig-align: center
#| fig-height: 3.5
#| fig-width: 4
#| fig-cap: "Zusammenhang zwischen der Sprungweite in [cm] und Gewicht der Katzenflöhe. Jeder Punkt stellt eine Beobachtung dar. Eine eigene Gerade wurde durch `add_curve_fit()` für jede Gruppe ergänzt."

tidyplot(data = fac1_tbl, 
         x = weight, y = jump_length, color = animal) |> 
  add_data_points(show.legend = FALSE) |> 
  add_curve_fit(method = "lm", se = FALSE, fullrange = TRUE) |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Flohgewicht in [mg]") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  adjust_legend_title("Flohart") |> 
  adjust_legend_position("top") |> 
  rename_color_labels(new_names = c("dog" = "Hund", "cat" = "Katze", "fox" = "Fuchs")) |> 
  adjust_size(width = NA, height = NA) 
```

#### Zweifaktorieller Scatterplot {.unnumbered .unlisted}

Der zweifaktorielle Scatterplot ist hier in `{tidyplots}` noch nicht möglich. Ich schaue aber immer mal wieder in `{tidyplots}` rein udn vielleicht ist es dann doch noch möglich. Es ist ja aber auch etwas gegen die Philosophie so komplexe Abbildungen zu bauen und die dann auch noch generisch einfach zu halten. Dann machen wir das dann einfach in `{ggplot}`.
:::

## Excel

Dann habe ich mich doch noch hingesetzt und einmal für dich ein Video gemacht, wie du dann einen Scatterplot mit Trendlinie und Formel in Excel erstellst. Das ganze macht dann nur als Video Sinn, denn sonst kannst du ja nicht nachvollziehen, was ich geklickt habe.

{{< video https://youtu.be/pEmxZivq8l0 >}}
::::

Wenn du mehr über die Regression lernen willst schau dir auch hier mal in den Kästen zum Zerforschen rein, da findest du dann noch mehr Inspiration aus anderen Abbildungen, die ich nachgebaut habe. Ich bin einmal über den Campus gelaufen und habe geschaut, welche Abbildungen auf den Postern verwendet werden und habe diese nachgebaut.

::: {.callout-note collapse="true"}
## Zerforschen: Simple lineare Regression mit Bestimmtheitsmaß $R^2$

{{< include zerforschen/zerforschen-simple-regression-arrow.qmd >}}
:::

::: {.callout-note collapse="true"}
## Zerforschen: Zwei simple lineare Regression nebeneinander

{{< include zerforschen/zerforschen-simple-regression.qmd >}}
:::
