```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
            "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

## Bessere Schriftart? {.unnumbered}

[Adding Custom Fonts to ggplot in R](https://gradientdescending.com/adding-custom-fonts-to-ggplot-in-r/)

[Aesthetic specifications](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)

Die Sache mit der Schriftart in `{ggplot}`.

```{r}
library(ggrepel)
```

[Getting started with `{ggrepel}`](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html) [{`ggtext`}: Improved text rendering support for ggplot2](https://wilkelab.org/ggtext/)

```{r}
update_geom_defaults("label", 
                     list(family = "IBM Plex Sans Condensed"))
update_geom_defaults(ggtext::GeomRichText, 
                     list(family = "IBM Plex Sans Condensed"))
update_geom_defaults("label_repel", 
                     list(family = "IBM Plex Sans Condensed"))
```

```{r}
ggplot(tibble(x = 1:3, y = 1:3), aes(x,y)) +
  theme_minimal(base_family = "IBM Plex Sans Condensed") +
  geom_point() +
  labs(x = "Hallo", y = "Mehr zesz")
```

## `{gganimate}`

[Datanovia](https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/)

[Cheat sheet `{gganimate}`](https://rstudio.github.io/cheatsheets/gganimate.pdf)

## SQL als `{dbplyr}`?

[Das R Paket `{dbplyr}`](https://dbplyr.tidyverse.org/) [Database Queries With R](https://solutions.posit.co/connections/db/getting-started/database-queries/)

## S-values

$$
\mbox{S-value} = -\log_2(\mbox{p-value})
$$

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-theo-s-value
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"

s_tbl <- tibble(t = seq(0, 4, by = 0.1),
                p = pt(t, 20, lower.tail = FALSE),
                s = -log2(p),
                s_y = s/(max(s)/0.5)) |> 
  mutate_if(is.numeric, round, 4) |> 
  pivot_longer(cols = c("p", "s_y"),
               values_to = "values",
               names_to = "grp") |> 
  mutate(grp = factor(grp, labels = c("p-value", "S-value")))

ggplot(s_tbl, aes(t, values, color = grp)) +
  theme_minimal() +
  geom_point() +
  geom_line() +
  scale_y_continuous(sec.axis = sec_axis(name = "S-value", ~ . * 22.94,
                                         breaks = c(0.1, 0.2, 0.3, 0.4, 0.5) * 22.94,
                                         labels = round(c(0.1, 0.2, 0.3, 0.4, 0.5) * 22.94))) +
  scale_color_okabeito() +
  labs(x = expression(Teststatistik~T[D]),
       y = "p-value", color = "") +
  theme(legend.text = element_text(size = 14),
        legend.title = element_text(size = 14, face = 2),
        axis.text.y = element_text(size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.x = element_text(size = 14),        
        plot.title = element_text(size = 17),
        plot.subtitle = element_text(size = 12, face = "italic"),
        plot.caption = element_text(size = 12),
        legend.position = "top",
        panel.grid.minor.y = element_blank(),
        panel.grid.minor.x = element_blank()) 
```
