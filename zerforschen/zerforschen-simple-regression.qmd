In diesem Zerforschenbeispiel wollen wir uns eine simple lineare Regression in einem Scatterplot anschauen. Das stimmt nicht so ganz, den die Schwierigkeit liegt darin, dass es sich um zwei Scatterplots handelt. Klar, du kannst die beiden Abbildungen einfach getrennt erstellen und dann wäre gut. Ich zeige dir dann aber noch zwei weitere Möglichkeiten. Daher fangen wir mit der folgenden Abbildung einmal an. Wir haben hier zwei Scatterplots mit jeweils einer linearen Regression, dargestellt durch eine Gerade mit Regressionsgleichung, vorliegen. Hier brauchen wir dann mal ein paar mehr Zahlen, die ich mir dann aber so grob aus der Abbildung abgeleitet habe.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Zwei lineare Regressionen mit den jeweiligen Regressionsgleichungen.](images/eda/zerforschen_regression_linear.jpg){#fig-simple-regression fig-align="center" width="100%"}

Wir laden als erstes wieder den Datensatz, den ich mir aus der obigen Abbildung erstellt habe. Wie immer beim Zerforschen habe ich nicht so genau drauf geachtet nur das die Zahlen so grob stimmen. Die Erstellung der Daten kann hier recht langwierig sein, aber hier geht es ja mehr um die Nutzung von `ggplot`. Also mach dir keinen Gedanken, wenn die Punkte nicht so perfekt passen.

```{r}
regression_tbl <- read_excel("data/zerforschen_regression_linear.xlsx") |> 
  mutate(type = factor(type, labels = c("Basil", "Oregano")))
regression_tbl 
```

Den folgenden Teil kannst du überspringen, wenn es dir um die Abbildung geht. Ich möchte in den zwei folgenden Tabs einmal die simple lineare Regression für die Abbildung mit dem Basilikum und einmal für das Oregano rechnen.

::: panel-tabset
## Lineare Regression für Basilikum

Wir erstellen uns einmal eine simple lineare Regression mit der Funktion `lm()`. Mehr zu dem Thema und die Maßzahlen der Güte einer linearen Regression wie das Bestimmtheitsmaß $R^2$ findest du im Kapitel zur [simplen linearen Regression](#sec-modeling-simple-stat). Deshalb hier nur die Durchführung und nicht mehr.

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- lm(unwashed ~ washed, data = filter(regression_tbl, type == "Basil"))

fit |> 
  parameters::model_parameters() |> 
  select(Parameter, Coefficient)

performance::r2(fit)
```

Wir nutzen jetzt gleich die Koeffizienten aus der linearen Regression für die Erstellung der Geradengleichung.

## Lineare Regression für Oregano

Auch hier gilt wie im anderen Tab, dass wir uns einmal eine simple lineare Regression mit der Funktion `lm()` erstellen. Mehr zu dem Thema und die Maßzahlen der Güte einer linearen Regression wie das Bestimmtheitsmaß $R^2$ findest du im Kapitel zur [simplen linearen Regression](#sec-modeling-simple-stat). Deshalb hier nur die Durchführung und nicht mehr.

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- lm(unwashed ~ washed, data = filter(regression_tbl, type == "Oregano"))

fit |> 
  parameters::model_parameters() |> 
  select(Parameter, Coefficient)

performance::r2(fit)
```

Wir nutzen jetzt gleich die Koeffizienten aus der linearen Regression für die Erstellung der Geradengleichung.
:::

Soweit so gut. In den beiden obigen Tabs haben wir jetzt die Koeffizienten der Regressionsgleichung berechnet. Wir kriegen also aus der Funktion `lm()` die Steigung und den y-Achsenabschnitt (eng. *Intercept*). Damit können wir uns dann die beiden Funktionen für die Gerade der Basilikumdaten und der Oreganodaten bauen. Wir werden dann in `ggplot` mit der Funktion `geom_function()` die entsprechenden Gerade zeichnen.

```{r}
basil_func <- \(x){2.10 + 1.00 * x}
oregano_func <- \(x){8.17 + 0.99 * x}
```

Du hast jetzt im Folgenden die Wahl zwischen drei Lösungen des Problems. Jede dieser Lösungen ist vollkommen in Ordnung und ich zeige dir hier nur die Möglichkeiten. Nimm einfach die Lösung, die dir am besten gefällt und passt. Was machen wir nun? Wir stellen einmal die beiden Abbildungen getrennt voneinander dar. Im Weiteren nutzen wir einmal die Funktion `facet_wrap()` um nach einem Faktor die Abbildungen aufzutrennen. Am Ende nutzen wir noch das R Paket `patchwork` um aus zwei Abbildungen dann eine schön annotierte Abbildung zu machen.

::: panel-tabset
## Zwei Abbildungen

Der Kern der @fig-ggplot-zerforschen-regression-3a und @fig-ggplot-zerforschen-regression-3b ist die Funktion `filter()`. Wir bauen uns sozusagen zweimal einen Datensatz und leiten dann den Datensatz in die Funktion `ggplot()` weiter. Der Trick ist eigentlich, dass wir große Teile des Codes kopieren und dann für das Oregano wieder verwenden. Wenn du dir beide Chunks mal näher anschaust, wirst du große Änlichkeiten sehen. Im Prinzip musst du nur aufpassen, dass du jeweils die richtigen Geradenfunktionen einsetzt.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3a
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` für Basilikum nachgebaut. Beachte die Funktion `filter()`, die den jeweiligen Datensatz für die beiden Kräuter erzeugt."

filter(regression_tbl, type == "Basil") |> 
  ggplot(aes(x = washed, y = unwashed, color = type)) +
  theme_minimal() +
  geom_function(fun = basil_func, color = cbbPalette[2], linetype = 'dashed') + 
  geom_point(color = cbbPalette[2]) +
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), 
                     breaks = seq(0, 600, 150)) +
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), 
                     breaks = seq(0, 600, 150)) + 
  theme(legend.position = "none") +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[2],  
           label = TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)")) 
 
```

Und nochmal die simple Regression in dem Scatterplot für das Oregano. Bitte beachte einmal die Beschreibungen im Code und du wirst sehen, dass hier sehr viel gleich zum obigen Codeblock ist. In dem Tab zum R Paket `patchwork` zeige ich dir dann noch die Möglichkeit ein Template zu erstellen und dann einiges an Zeilen an Code zu sparen. Aber es geht auch so.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3b
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` für Oregano nachgebaut. Beachte die Funktion `filter()`, die den jeweiligen Datensatz für die beiden Kräuter erzeugt."

filter(regression_tbl, type == "Oregano") |> 
  ggplot(aes(x = washed, y = unwashed, color = type)) +
  theme_minimal() +
  geom_function(fun = oregano_func, color = cbbPalette[3], linetype = 'dashed') +
  geom_point(color = cbbPalette[3]) +
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150)) + 
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), 
                     breaks = seq(0, 900, 150)) +
  theme(legend.position = "none") +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[3],  
           label = TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)")) 
```

## Mit `facet_wrap()`

Hier brauchen wir jetzt das R Paket `grid` damit wir am Anschluss noch unsere Abbildungen mit den Gleichungen beschriften können. Die Idee ist eigentlich recht simple. Wir haben den Faktor `type` und nutzen die Funktion `facet_wrap()` um nach diesem Faktor zwei Abbildungen zu bauen. Unser Faktor hat zwei Level `Basilikum` und `Oregano` und deshalb erhalten wir auch zwei Subbplots. Wir können dann auch entscheiden, wie die Abbildungen angeordnet werden sollen, aber da bitte einmal bei [Hilfeseite von `facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html). Sonst sit alles gleich wie im ersten Tab. Also bitte nochmal da schauen.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3c
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` für Oregano nachgebaut. Beachte die Funktion `facet_wrap()`, die den jeweiligen Datensatz für die beiden Kräuter erzeugt."

ggplot(data = regression_tbl, aes(x = washed, y = unwashed,
                                  color = type)) +
  theme_minimal() +
  scale_color_okabeito() +
  geom_function(data = filter(regression_tbl, type == "Basil"),
                fun = basil_func, color = cbbPalette[2], linetype = 'dashed') + 
  geom_function(data = filter(regression_tbl, type == "Oregano"),
                fun = oregano_func, color = cbbPalette[3], linetype = 'dashed') + 
  geom_point() +
  facet_wrap(~ type) + 
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150)) +
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150)) +
  theme(legend.position = "none") 
 
grid::grid.text(TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)"),  
                x = 0.2, y = 0.2, just = "left", gp = grid::gpar(col = cbbPalette[2])) 
grid::grid.text(TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)"),  
                x = 0.65, y = 0.2, just = "left", gp = grid::gpar(col = cbbPalette[3]))
```

Und dann sind wir auch schon fertig. Gut, das ist jetzt mit der Regressionsgleichung etwas fricklig, aber das ist es meistens, wenn du viel auf einmal darstellen willst. Vielleicht ist dann noch die Idee mit dem R Paket `patchwork` im nächsten Tab hilfreich.

## Mit `patchwork`

Jetzt drehen wir nochmal frei und holen alles raus was geht. Wir nutzen zum einen das [R Paket `patchwork`](https://patchwork.data-imaginist.com/) um zwei Abbildungen miteinander zu verbinden. Prinzipiell geht das auch mit dem [R Paket `grid`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) und der Funktion `grid.arrange()`, aber dann wird das hier sehr voll. Wir nutzen am Ende nur eine Funktion aus dem Paket `grid` um wiederum die $x$-Achse schön hinzukriegen. Als erstes wollen wir uns aber ein Template in `ggplot` bauen, dass wir dann mit einem neuen Datensatz durch den Operator `%+%` mit einem neuen Datensatz versehen können.

Im Folgenden stecken wir den *ganzen* Datensatz in eine `ggplot()`-Funktion. Später wählen wir dann mit `filter()` die beiden Kräuterdatensätze aus. Wir definieren in dem Template alles, was wir auch für die beiden Abbildungen brauchen würden. Das spart dann etwas an Zeilen Code. Manchmal dann aber auch nicht ganz so viel, denn wir müssen für die einzelnen Datensätze dann doch noch einiges anpassen.

```{r}
p_template <- ggplot(regression_tbl, aes(x = washed, y = unwashed,
                                         color = type)) +
  theme_minimal() +
  geom_point() +
  scale_x_continuous(name = "",
                     breaks = seq(0, 900, 150), limits = c(0, 900)) +
  scale_y_continuous(name = TeX(r"(\textbf{Washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150), limits = c(0, 900)) +
  theme(legend.position = "none")
```

Wir nutzen jetzt das `p_template` und ergänzen den gefilterten Datensatz für das Basilikum mit dem Operator `%+%`. Dann wählen wir noch die passende Farbe über die Option `order = 1` aus und ergänzen die Geradengleichung sowie den Titel für die Abbildung.

```{r}
p_basil <- p_template %+%
  filter(regression_tbl, type == "Basil") +
  scale_color_okabeito(order = 1) +
  geom_function(fun = basil_func, color = cbbPalette[2], 
                linetype = 'dashed') +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[2], 
           label = TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)")) +
  ggtitle("Basil")
```

Das Ganze dann nochmal für das Oregano, aber hier entfernen wir die $y$-Achse. Wir brauchen nur eine auf der linken Seite. Das ist auch der Grund warum wir keine $x$-Achse benannte haben, dass machen wir dann über die beiden Plots zusammen ganz am Ende. Auch hier ergänzen wir dann die Gweradengleichung sowie den Titel der Abbildung.

```{r}
p_oregano <- p_template %+%
  filter(regression_tbl, type == "Oregano") +
  scale_color_okabeito(order = 2) +
  geom_function(fun = oregano_func, color = cbbPalette[3], 
                linetype = 'dashed') +
  theme(axis.title.y = element_blank()) +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[3], 
           label = TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)")) +
  ggtitle("Oregano")
```

Jetzt geht es los mit dem Zusammenbauen. Wir können dazu einfach das `+` nutzen. Wenn du mehr wissen willst, was du noch ändern kannst, dann schaue einmal das Tutorium [Adding Annotation and Style](https://patchwork.data-imaginist.com/articles/guides/annotation.html) für das R Paket `patchwork`an. Da kannst du dann auch die Schriftgröße und weiteres ändern. Wir müssen dann ganz am Ende nochmal mit der Funktion `grid.draw()` die gemeinsame $x$-Achse ergänzen. Am Ende habe ich noch die Achsenbeschriftungen gekürzt und die Informationen in den Titel mit der Funktion `plot_annotation` geschoben. Dann habe ich noch die Subplots mit einem Buchstaben versehen. Und dann sind wir auch schon fertig.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3d
#| fig-align: center
#| fig-height: 5
#| fig-width: 8
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` nachgebaut. Die Abbildung A zeigt die Punkte und die Geradengleichung für das Basilikum. Die Abbildung B die entsprechenden Informationen für das Oregano. Die beiden Achsenbeschriftungen wurden gekürzt und die Informationen in den Titel übernommen."
p_basil + p_oregano +
  plot_annotation(title = 'Iodine content in herbs',
                  subtitle = 'The iodine content is measured in washed and unwashed herbs',
                  caption = 'Disclaimer: The measurement has been done in freshmatter',
                  tag_levels = 'A')
grid::grid.draw(grid::textGrob(TeX(r"(\textbf{Unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), 
                               y = 0.07))
```
:::

Am Ende kannst du dann folgenden Code noch hinter deinen `ggplot` Code ausführen um dann deine Abbildung als `*.png`-Datei zu speichern. Dann hast du die Abbildung super nachgebaut und sie sieht auch wirklich besser aus.

```{r}
#| eval: false
ggsave("my_ggplot_simple_regression.png", width = 5, height = 3)
```
