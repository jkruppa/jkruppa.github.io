```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Imputation fehlender Werte {#sec-missing}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Was sind fehlende Werte?

Wir beschränken uns hier auf zwei Arten von fehlenden Daten. Es gibt noch mehr Abstufungen, aber für den Einstieg reicht es, wenn wir nach zwei Typen von fehlenden Daten unterscheiden:

-   **MCAR** (eng. missing completely at random): völlig zufällig fehlende Daten. Dies ist das wünschenswerte Szenario im Falle fehlender Daten.
-   **MNAR** (eng. missing not at random): nicht zufällig fehlende Daten. Fehlende, nicht zufällige Daten sind ein schwerwiegenderes Problem, und in diesem Fall kann es ratsam sein, den Datenerhebungsprozess weiter zu überprüfen und zu versuchen zu verstehen, warum die Informationen fehlen. Wenn zum Beispiel die meisten Teilnehmer einer Umfrage eine bestimmte Frage nicht beantwortet haben, warum haben sie das getan? War die Frage unklar?

Unter der Annahme, dass es sich bei den Daten um MCAR handelt, können auch zu viele fehlende Daten ein Problem darstellen. In der Regel liegt die sichere Obergrenze bei großen Datensätzen bei 5 % der Gesamtmenge. Wenn die fehlenden Daten für ein bestimmtes Merkmal oder eine Stichprobe mehr als 5 % betragen, sollten Sie dieses Merkmal oder diese Stichprobe wahrscheinlich weglassen. Wir prüfen daher mit einer einfachen Funktion, ob in den Merkmalen (Spalten) und Stichproben (Zeilen) mehr als 5 % der Daten fehlen

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, see, readxl,
               mice, naniar)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten für Verteilungen

Damit wir uns auch eine Verteilung anschauen können bruachen wir *viele* Beobachtungen. Wir haben das ja schon bei den Histogrammen gesehen, wenn wir ein aussagekräftiges Histogramm erstellen wollen, dann brauchen wir viele Beobachtungen. Daher nehmen wir für dieses Kapitel einmal den Gummibärchendatensatz und schauen uns dort die Variablen `gender`, `height`, `count_bears` und `count_color` einmal genauer an. Wie immer nutzen wir die Funktion `select()` um die Spalten zu selektieren. Abschließend verwandeln wir das Geschlecht `gender` und das `module` noch in einen Faktor.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  %>%
  select(gender, age, height, semester, count_bears, count_color,
         most_liked) %>% 
  mutate(gender = as_factor(gender),
         most_liked = as_factor(most_liked))
```

Wir erhalten das Objekt `gummi_tbl` mit dem Datensatz in @tbl-data-dist-gummi nochmal dargestellt.

```{r}
#| message: false
#| echo: false
#| tbl-cap: Auszug aus den selektierten Daten zu den Gummibärchendaten.
#| label: tbl-data-dist-gummi

gummi_print_tbl <- gummi_tbl %>% 
  mutate(gender = as.character(gender),
         module = as.character(module))
rbind(head(gummi_print_tbl),
      rep("...", times = ncol(gummi_print_tbl)),
      tail(gummi_print_tbl)) %>% 
  kable(align = "c", "pipe")
```

Wir nutzen jetzt die Daten einmal um uns die Normalverteilung und die Poissonverteilung am Beispiel näher anzuschauen.

## Imputation von fehlenden Werten

### Visualisierung von fehlenden Werten

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-imp-00
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Histogramm verschiedener Poissonverteilungen."

vis_miss(gummi_tbl)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-imp-01
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Histogramm verschiedener Poissonverteilungen."

gg_miss_upset(gummi_tbl)
```
