# Visualisierung von Daten {#sec-eda-ggplot}

*Letzte Änderung am `r format(fs::file_info("eda-ggplot.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra, quantreg,
               multcomp, emmeans, ggpubr, multcompView, nlme,
               ggdist, gghalves, performance, parameters, broom,
               effectsize, patchwork, conflicted)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
conflicts_prefer(dplyr::select)
```

> *"The greatest value of a picture is when it forces us to notice what we never expected to see." --- John Tukey*

Worum geht es in der explorativen Datenanalyse? Die explorative Datenanalyse wurde von [John Tukey (1915--2000)](https://de.wikipedia.org/wiki/John_W._Tukey) begründet. Er war ein Pionier im Bereich der frühen Informatik und Computerwissenschaften. Warum explorativ, was wollen wir den erforschen? Denn nichts anderes bedeutet ja explorativ (deu. *erforschend, erkundend, untersuchend*) -- wir wollen etwas entdecken. Die Idee war ziemlich innovativ und neu als @tukey1977exploratory in seinem Buch die explorative Datenanalyse erstmal als Begriff vorstellte. Schon vorher beschrieb @tukey1962future in seinem Artikel "The Future of Data Analysis" die zukünftige Datenanalyse, wie Tukey sie sich vorstellte, was auch sein folgendes Zitat belegt.

> *"I know of no person or group that is taking nearly adequate advantage of the graphical potentialities of the computer." --- John Tukey*

Nun musst du wissen, dass in den 60'ziger Jahren der Computer in den Kinderschuhen steckte. Mal eben eine Berechnung durchführen, dass war dann schon so eine Sache der damaligen Zeit. Vieles bis fast alles wurde als Tabellen veröffentlicht und selten wurde eine Abbildung *händisch* dazu erstellt. An dieser Stelle sei einmal auf die [Microsoft Excel Werbung aus dem Jahr 1990](https://youtu.be/kOO31qFmi9A?si=wHkm7frVVlH2e_SF) verwiesen. Daher war die Idee, sich Daten zu visualisieren entsprechend neu und wirklich ein wissenschaftlicher Fortschritt. Erstaunlicherweise glauben wir heute manchmal dann Zahlen in einer Tabelle mehr als einer Abbildung. Wir schreiben dann den Zahlen eine größere Genauigkeit und Aussagekraft zu, als einer explorativen Abbildung. Dabei können wir in einer Abbildung viel mehr sehen, als in einer Tabelle.

> *"There is no data that can be displayed in a pie chart, that cannot be displayed BETTER in some other type of chart." --- John Tukey*

!["The reason to avoid pie charts" Quelle: wumo.com](images/eda/cake_chart.jpg){#fig-wumo-pie fig-align="center" width="100%"}

Daher ist ein wichtiger Teil in der Analyse von Daten die Visualisierung und damit die Darstellung in einer Abbildung. Wir haben aber eine großem Auswahl an möglichen Abbildungen, deshalb auch das lange Kapitel hier. Siehe dazu auch die Arbeit von @riedel2022replacing mit dem Titel [Replacing bar graphs of continuous data with more informative graphics: are we making progress?](https://portlandpress.com/clinsci/article/136/15/1139/231562/Replacing-bar-graphs-of-continuous-data-with-more) um mehr über die Nutzung der Abbildungen im Laufe der Zeit zu erfahren. Nicht alles was schon immer genutzt wurde, macht auch Sinn weiter genutzt zu werden. Wir haben mit R und `{ggplot}` eine Möglichkeit Abbildungen von Daten sehr viel besser zu erstellen als noch vor ein paar Jahrzehnten möglich war.

Grundsätzlich glauben wir dabei keiner Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Wenn wir also einen signifikanten Unterschied aus einem Algorithmus wiedergegeben bekommen, dann müssen wir auch den Unterschied in einer Abbildung sehen können. Eine statistische Analyse und deren Visualisierung gehen Hand in Hand. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbildungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen $y$ und $x$ gibt. Wir haben ein $y$ vorliegen, was wir auf die y-Achse eines Graphen legen und daneben dann mehrere Variablen bzw. Spalten die wir $x$ nennen. Eine der Variablen legen wir auf die x-Achse des Graphen. Nach den anderen $x$ färben wir die Abbildung ein. Wir nennen dabei eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche oder einer Handlung in einem Film zu zu tun. Im den beiden folgenden Abbildungen siehst du einmal die beiden häufigsten wissenschaftlichen Fragestellungen in der explorativen Datenanalyse.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-eda-overview-01
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 12
#| fig-cap: "Visualisierung der beiden häufigsten wissenschaftlichen Fragestellungen in der explorativen Datenanalyse. **(A)** *Die Frage nach dem Unterschied.* Unterschieden sich die Gruppen auf der x-Achse gegeben den Werten auf der y-Achse? Um den Unterschied darzustellen können Barplots oder Boxplots verwendet werden. **(B)** *Die Frage nach dem Zusammenhang.* Wie verändern sich die Werte der y-Achse, wenn sich die Werte auf der x-Achse ändern? Um den Zusammenhang zu zeigen kann ein Scatterplot verwendet werden. Die Gerade durch die Punkte kann durch eine (nicht) lineare Regression bestimmt werden. *[Zum Vergrößern anklicken]*"

source("images/R/eda-ggplot-01.R")

p2 + p1 + 
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A')

```

In diesem Kapitel wollen wir durch die bedeutendsten Abbildungen in der explorativen Datenanalyse durchgehen. Ich habe die Abbildungen etwas nach Kontext sortiert und geschaut, dass die Abbildungen zum Gruppennterschied oder Zusammenhang zweier Variablen als erstes besprochen werden.

-   [Barplot](#sec-eda-barplot) für 5 und mehr Beobachtungen (pro Gruppe). Der Barplot oder das *Balkendiagramm* bzw. *Säulendiagramm* stellt den Mittelwert und die Standardabweichung da.
-   [Boxplot](#sec-eda-boxplot) für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable. Wir können in einem Boxplot auch erkennen, ob sogenannte auffällige Werte oder Ausreißer vorliegen.
-   [Scatterplot](#sec-eda-scatter) für zwei kontinuierliche Variablen. Auch *xy-Plot* genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   [Mosaicplot](#sec-eda-mosaic) für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.
-   [Histogramm](#sec-eda-histogramm) für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   [Dotplot](#sec-eda-dotplot) für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   [Violinplot](#sec-eda-violinplot) für die Kombination von einem Densityplot und einem Boxplot. Dann können wir hier noch den Dotplot ergänzen und haben eine sehr informative Übersichtsabbildung.

Beginnen wir also mit dem Teil, der in der Statistik der mir immer am meisten Spaß macht. Oder aber um es in den Worten von John Tukey, den Begründer der explorativen Datenanalyse zu sagen:

> *"This is my favorite part about analytics: Taking boring flat data and bringing it to life through visualization." --- John Tukey*

Wir immer geht natürlich hier auch noch viel mehr am Abbildungen. Du musst nicht alles in `ggplot` machen und darüber hinaus gibt es dann auch noch einiges an anderen R Paketen. In dem folgenden Kasten habe ich dir mal ein paar Quellen rausgesucht, wo du einmal gucken kannst, wenn du noch mehr Inspiration benötigst. Ich nutze die Seiten auch als Inspiration, den meisten weiß man gar nicht was alles geht, bis man die Visualisierung gesehen hat.

::: callout-tip
## Weitere Möglichkeiten der Visualisierung

Im Folgenden einmal eine Auswahl an weiteren Möglichkeiten sich Abbildungen in R zu visualisieren. Teilweise ist es dann auch eine Sammlung an Informationen für mich, damit ich eine Idee habe, was noch so alles geht. Manchmal braucht man ja auch noch eine zusätzlich Inspiration.

-   [Data visualization with ggplot2 :: Cheat Sheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html) -- als Überblick über alles was eigentlich in `ggplot` möglich ist. Du kriegst dann nochmal ein Überblick über die `geom`e, die es gibt und wie die einzelnen Funktionen und Möglichkeiten miteinander interagieren. Du kannst dir das Cheat Sheet auch auf Deutsch runterladen.\
-   [R Charts by R Coder](https://r-charts.com/) -- ein großer Überblick über alle möglichen Abbildungen sortiert nach verschiedenen Kategorien. Hier würde ich auf jeden Fall mal drüber schauen, dann kriegst du nochmal eine Idee was neben `ggplot` noch so alles geht. Ich finde die Seite immer sehr inspirierend.
-   [ALL YOUR FIGURE ARE BELONG TO US](https://yutannihilation.github.io/allYourFigureAreBelongToUs/) ist eine weitere tolle Übersicht an möglichen Abbildungen in `{ggplot}` Universum. Die Übersicht zeigt nochmal verschiedene R Pakte mit den entsprechenden möglichen Abbildungen.
-   [sjPlot - Data Visualization for Statistics in Social Science](https://strengejacke.github.io/sjPlot/) -- auch hier geitbes dann die Möglichkeit nochmal etwas anders auf die Visualisierung zu schauen. Denn hier haben wir dann die Möglichkeiten der Sozialwissenschaften mehr abgedeckt. Das mag insbesondere im Bereich von Fragebögen und Marketing von Interesse sein.
-   Als spannende zusätzlichen Ressourcen seinen das [R Paket `{cowplot}`](https://wilkelab.org/cowplot/index.html) sowie das [R Paket `{ggpubr}`](https://rpkgs.datanovia.com/ggpubr/index.html) genannt. Besonders das Paket `cowplot` liefert noch schöne Formatierungsmöglichkeiten wobei dann `ggpubr` statistische Test mit der Visualisierung verbindet.
-   [{plotly} R Open Source Graphing Library](https://plotly.com/r/) sowie im besonderen dann die Seite [Getting Started with {plotly} in {ggplot2}](https://plotly.com/ggplot2/getting-started/) liefert dann interaktive Abbildungen, wo du dann direkt hereinzoomen kannst. Das ist bei sehr großen Abbildungen immer sehr praktisch. Auch kannst du die Werte einer einzelnen Beobachtung gleich im Plot ablesen.
-   [How to create BBC style graphics](https://bbc.github.io/rcookbook/) -- einmal als ein Beispiel für die Anwendung von `ggplot` in der Wirtschaft und Data Science. Auch hier sieht man schön die Ideen die möglich sind.
-   [Visualizing Distributions with Raincloud Plots (and How to Create Them with ggplot2)](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) -- manchmal ist dann der Barplot oder Dynamiteplot dann doch irgendwie nicht das richtige Werkzeug um die Daten zu zeigen. Daher hier nochmal der Blogpost mit einer Diskussion was neben dem Säulendiagramm noch so alles gehen könnte.
-   [ggplot Wizardry Hands-On](https://z3tt.github.io/OutlierConf2021/) zeigt nochmal sher schön was alles in `{ggplot}` geht, wenn die entsprechenden zusätzlichen Pakete geladen werden. Ich schaue auch hier immer mal wieder rein, wenn ich eine Abbildung besonders schön machen möchte. Hier liegt dann der Fokus auf dem [R Paket`{gghalves}`](https://erocoar.github.io/gghalves/) sowie dem [R Paket `{ggdist}`](https://mjskay.github.io/ggdist/).
-   Die Publikation [Error bars in experimental biology](https://rupress.org/jcb/article/177/1/7/34602/Error-bars-in-experimental-biology) von @cumming2007error liefert nochmal einen Überblick über Fehlerbalken und welche Fehlerbalken man den nun nutzen sollte.
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| warning: false
#| message: false

pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, 
               janitor, see, patchwork, latex2exp, ggbeeswarm,
               ggdist, gghalves, ggbreak, duke, wesanderson, 
               conflicted)
conflicts_prefer(dplyr::summarise)
conflicts_prefer(dplyr::filter)
conflicts_prefer(latex2exp::TeX)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

Wir importieren also den Datensatz `flea_cat_dog.xlsx` und wollen einzelne Variablen visualisieren. Wir kennen den Datensatz schon aus den vorherigen Beispielen. Dennoch nochmal hier der Datensatz in @tbl-cat-dog-ggplot einmal dargestellt.

```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal))
```

Im Folgenden ist es wichtig, dass du dir die Spaltennamen merkst. Wir können nur die exakten, wortwörtlichen Spaltennamen verwenden. Sonst erhalten wir einen Fehler. Deshalb haben wir auch keine Leerzeichen in den Spaltennamen.

```{r}
#| echo: false
#| label: tbl-cat-dog-ggplot
#| tbl-cap: "Tabelle von sieben Hunde- und Katzenflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen."

flea_dog_cat_tbl |> kable(align = "c", "pipe")
```

Wir brauchen dann ab und an auch nochmal mehr Datenpunkte, daher nehmen wir auch einmal den Gummibärchendatensatz und schauen uns dort die Variablen `gender`, `height` und `age` einmal genauer an. Wie immer nutzen wir die Funktion `select()` um die Spalten zu selektieren. Abschließend verwandeln wir das Geschlecht `gender` noch in einen Faktor und entfernen alle fehlenden Werte mit `na.omit()`.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  |>
  select(gender, height, age) |> 
  mutate(gender = factor(gender, labels = c("männlich", "weiblich"))) |> 
  na.omit()

```

Und hier dann einmal der ausgewählte Datensatz der Gummibärchendaten. Ich zeige hier nur die ersten sieben Zeilen als Ausschnitt, die eigentlichen Daten sind mit $n = `r nrow(gummi_tbl)`$ Beobachtungen viel größer.

```{r}
#| echo: false
#| label: tbl-gummi-ggplot
#| tbl-cap: "Tabelle mit dem Auzug der Gummibärchendaten von den ersten sieben Beobachtungen für das Geschlecht, die Körpergröße und dem Alter."

gummi_tbl |>
  head(n = 7) |> 
  kable(align = "c", "pipe")
```

## Grundlagen in `{ggplot}`

{{< video https://youtu.be/SGwSVzJ9C-s >}}

Wir nutzen in R das R Paket `{ggplot2}` um unsere Daten zu visualisieren. Die zentrale Idee von `{ggplot2}` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Im Gegensatz zu dem Pipe-Operator `|>` nutzt `{ggplot2}` den Operator `+` um die verschiedenen Funktionen (`geom_`) miteinander zu verbinden. Das Konzept von `{ggplot2}`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `{ggplot2}` zu visualisieren - aber wie immer, nutze was du brauchst.

Erstellen wir also erstmal unseren erste Visualisierung in dem R Paket `{ggplot2}`. Im Folgenden spreche ich dann aber immer von `{ggplot}`. Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot()` für die Erstellung von Boxplots, das `geom_histogram()` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an. Dafür müssen wir dann erstmal einen Datensatz laden, damit wir auch etwas zum abbilden haben.

{{< video https://youtu.be/SRRQQO3DXtc >}}

Wie immer empfehle ich dir dann auch das entsprechende Video auf YouTube anzuschauen. In Textform ist eine echte Herausforderung zu erklären wie man Plots baut. Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`). Wir haben also immer erst eine leere Leinwand auf der wir dann zusätzlich `geom`e plotten. Wir bauen uns sozusagen ein Sandwich.

```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length)) +
  theme_minimal()
```

Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` benennt den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die $x$-Achse soll, was auf die $y$-Achse soll sowie ob es noch andere Faktoren in den Daten gibt. Wir können nämlich noch nach anderen Spalten die Abbildung einfärben oder anderweitig ändern.
    -   `x` braucht den Spaltennamen für die Variable auf der $x$-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der $y$-Achse.
-   `+ theme_minimal()` setzt das Canvas oder die Leinwand auf schwarz/weiß. Sonst wäre die Leinwand flächig grau.

Mit *Faktoren* meine ich hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor` erschaffen haben und die uns noch mehr über unsere Daten dann verraten können. Hier ist es dann etwas abstrakt, aber es wird dann später in der Anwendung klarer.

```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal , y = jump_length)) +
  theme_minimal()
```

Am Ende sehen wir, dass wir nichts sehen. In der @fig-ggplot-1 ist nichts dargestellt. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen. Wir habe eine sehr große Auswahl an `geom`en, deshalb gibt es gleich einmal eine Auswahl an Abbildungen.

::: {.callout-tip appearance="minimal"}
Auf der Seite [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) gibt es noch eine Vielzahl an weiteren tollen Möglichkeiten zu entdecken! Einfach durch die Galerie mit über 120 Erweiterungen streifen und sich inspirieren lassen!
:::

## Die häufigsten Abbildungen

Im Folgenden gehen wir dann einmal die wichtigsten Abbildungen einmal durch. Viele der Abbildungen kennst du vielleicht schon und dann musst du hier nur noch schauen, wie die Abbildungen in `ggplot` zu realisieren sind. Ansonsten gilt wie immer, es ist nur ein kleiner Ausschnitt, du findest auf der [Hilfeseite von `ggplot`](https://ggplot2.tidyverse.org/index.html) eine sehr viel größere Übersicht.

### Barplot {#sec-eda-barplot}

{{< include eda-ggplot/eda-ggplot-barplot.qmd >}}

### Boxplot {#sec-eda-boxplot}

{{< include eda-ggplot/eda-ggplot-boxplot.qmd >}}

### Scatterplot {#sec-eda-scatter}

{{< include eda-ggplot/eda-ggplot-scatterplot.qmd >}}

### Mosaicplot {#sec-eda-mosaic}

{{< include eda-ggplot/eda-ggplot-mosaic.qmd >}}

### Histogramm {#sec-eda-histogramm}

{{< include eda-ggplot/eda-ggplot-histogram.qmd >}}

### Dotplot, Beeswarm und Raincloud Plot {#sec-eda-dotplot}

{{< include eda-ggplot/eda-ggplot-dotplot.qmd >}}

### Violinplot {#sec-eda-violinplot}

{{< include eda-ggplot/eda-ggplot-violinplot.qmd >}}

## Optionen in `{ggplot}`

Im Folgenden dann noch eine Sammlung an nützlichen Optionen und Möglichkeiten, die einem das Leben einfacher machen und die Abbildungen dann noch schöner. Nicht alles musst du in `ggplot` machen, manchmal geht es dann in PowerPoint dann doch schneller mal eben einen Text zu ergänzen. Sehe das hier deshalb als Ergänzung und meinen privaten Raum, den ich nutze um mir den Code zu merken.

### Überschriften, Achsen und Legenden

Wenn du mehr machen willst, also die Überschriften anpassen oder aber die Achsenbeschriftung ändern, dann gibt es hier global Hilfe im [ggplot Manual](https://ggplot2.tidyverse.org/reference/index.html). Die Webseite [R Cookbook](https://ggplot2.tidyverse.org/reference/index.html) hat auch spezielle Hilfe für ggplot().

-   [Überschriften von Abbildungen](http://www.cookbook-r.com/Graphs/Titles_(ggplot2)/)
-   [Achsenbeschriftung](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/)
-   [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/)
-   [Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)

In @fig-labels-0 siehst du eine Abbildung mit Titel und veränderten Beschriftungen. Die Möglichkeiten sind nahezu unbegrenzt und sprengen auch hier den Rahmen. Im Zweifel im R Tutorium vorbeischauen oder aber in der Vorlesung fragen.

```{r }
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung mit Titel und geänderter Achsenbeschrittung. *[Zum Vergrößern anklicken]*"


ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha") +
  scale_x_discrete(labels = c("Katze", "Hund")) +
  scale_fill_discrete(name = "Behandlung", labels = c("Katze", "Hund")) +
  theme_minimal() 

```

### Abbildungen abspeichern

Wenn du eine Abbildung abspeichern willst, dann musst du nur nach dem `ggplot`-Code die Funktion `ggsave()` setzen. Wie du im hier im Folgenden siehst, speichere ich die Abbildung der Boxplots der Hunde- und Katzenflöhe einmal in der Datei `flea_dog_boxplot.png` ab. Dabei wähle ich eine Breite `width` und eine Höhe `height` von jeweils 5. Du musst dann immer etwas spielen, je größer die Zahlen, desto größer die Abbildung und die Auflösung.

```{r}
#| warning: false
#| echo: true
#| eval: false
#| message: false
#| label: fig-save
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abspeicherung einer Abbdilung mit `ggsave()`. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length)) +
  geom_boxplot() 

## Abspeichern des obigen ggplots  
ggsave("flea_dog_boxplot.png", width = 5, height = 5)
```

Wie immer hilft auch die [Hilfeseite von `ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) weiter, wenn es um mehr Optionen und Qualität der Abbildungen geht.

### Mathematische Ausdrücke in den Achsenbeschriftungen {#sec-eda-tex}

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Häufig wollen wir nicht nur einfache Achsenbeschriftungen haben, sondern auch irgendwie komplexere Einheiten wie Eisendüngergehalt im Boden in $[kg\, ha]^{-1}$ darstellen. Jetzt soll die Einheit auch in dieser Form mit in die Achsenbeschriftung. Wir können dafür zwei Wege wählen. Einmal über das R Paket `{latex2exp}` und die Funktion `TeX()` oder aber die Funktion `expression()`, wofür wir dann kein eigenes R Paket brauchen. Beide Wege haben Vor- und Nachteile. Wir gehen aber beide mal durch. Mehr Informationen durch das Tutorium [Using latex2exp](https://cran.r-project.org/web/packages/latex2exp/vignettes/using-latex2exp.html) oder aber eben der Klassiker mit [Plot math expression](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html).

Wir können die Funktion `expression()` nutzen um uns mathematische Formeln zu bauen. Leider ist das Ganze etwas frickelig und auch ich brauche immer drei Anläufe, bis die Formel dann passt. Im Folgenden aber einmal zwei Beispiel für mathematische Formeln und Ausdrücke. Beachte, dass du jedes Leerzeichen durch eine Tilde `~` abbilden musst. Ich nutze die Funktion `expression()` sehr selten und nur wenn die Formel wirklich sehr einfach ist. Da wir aber schon mit eckigen Klammern Probleme kriegen und diese so nervig mit `"` einklammern müssen, nutze ich dann das Paket `{latex2exp}` was ich im Folgenden vorstellen werde.

Hier aber erstmal zwei Beispiele für eine Formel mit der Funktion `expression()`. Wenn du mehr über die Möglichkeiten wissen willst, dann schauen auch einmal auf die Hilfeseite von [Plot math](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html) oder du googelst dir die Lösung wie ich früher zusammen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 5

plot(expression(Eisendüngeform~und~-höhe~"[kg ha]"^-1), cex = 1.5, main = "")
plot(expression(Fe-Gehalt~"["~mg%.%(kg~TM)^-1~"]"), cex = 1.5, main = "")
```

Für mich ausdrücklich einfacher geht es mit dem R Paket `{latex2exp}` und der Funktion `TeX()` sowie die Helferfunktion `r"()"`. Ja, hier muss man dann noch eine andere Programmiersprache kennen, aber wie immer, du wirst nur schlauer. Die Informationen zur Matheumgebung in $\LaTeX$ kommen dann nochmal extra zwischen zwei Dollarzeichen `$`. Ja, das ist etwas wirr für einen Anfänger, aber wir nutzen hier auch zwei Programmiersprachen zusammen. Zum einen $\LaTeX$ um die Mathesymbole sauber darzustellen und dann R um die Abbildungen in `ggplot()` zu bauen. Mehr Informationen zu der Matheumgebung in $\LaTeX$ findest du einmal in der [LaTeX Mathehilfe I](https://de.wikipedia.org/wiki/Hilfe:TeX) sowie der [LaTeX Mathehilfe II](https://en.wikibooks.org/wiki/LaTeX/Mathematics).

Wie bauen wir uns also unseren mathematischen Ausdruck? Als erstes brauchen wir die Funktion `Tex()`, die sagt einfach nur aus, dass jetzt $\LaTeX$-Code kommt. Dann wollen wir noch einen String brauen in dem der $\LaTeX$-Code für unseren mathematischen Ausdruck drin steht. Diesen String bauen wir mit `r"()"`. Achtung, hier ist das Gänsefüßchen oben und unten vor und nach der runden Klammer sehr wichtig. In den Ausdruck können wir dann Text schreiben `Eisengehalt` oder aber einen mathematischen Ausdruck abgrenzt von zwei Dollarzeichen `$` wie `$[kg\, ha]^{-1}$`. $\LaTeX$ kann nämlich nicht nur mathematische Ausdrücke sondern ist eigentlich ein Textverarbeitungsprogramm. Deshalb musst du hier *nochmal* zwischen Text und mathematischen Ausdruck unterscheiden.

Hier nochmal aufgeschlüsselt wie der Code aussieht. Wir schreiben den Code nachher in einer Zeile, aber zum Verständnis ist es besser, wenn wir den Code einmal aufgeklappt sehen.

```{r}
#| eval: false
TeX(
    r"(
      Eisengehalt $[kg\, ha]^{-1}$
    )"
   )
```

Wir wollen uns das Ergebnis einmal in einem simplen `plot()` anschauen. Wir nutzen die Funktionalität natürlich später in `ggplot`, aber hier ist es so einmal einfacher zu sehen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         Eisengehalt $[kg\, ha]^{-1}$
      )")
    )
```

Auch können wir sehr viel komplexere Formeln erstellen. Beachte auch hier, dass wir zwei Matheumgebungen in $\LaTeX$ vorliegen haben.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         A $\LaTeX$ formula: $\frac{2hc^2}{\lambda^5}\frac{1}{e^{\frac{hc}{\lambda k_B T}} - 1}$
      )")
  )
```

In der @fig-scatter-flea-1 dann nochmal die Anwendung in einem `ggplot` in dem wir die Achsen entsprechend beschriften und dann auch noch eine ausgedachte Regressionsgeleichung zu der Abbildung ergänzen.

```{r}
#| echo: true
#| warning: false
#| message: false
#| label: fig-scatter-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen dem Eisengehalt und -höhe im Boden und dem Eisengehalt in Salat. Zusätzlich ergänzt eine Regressiongleichung und ein ausgedachtes Bestimmtheitsmaß. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  labs(x = TeX(r"(Eisengehalt und -höhe $[kg\, ha]^{-1}$)"), 
       y = TeX(r"(Fe-Gehalt $[mg \cdot (kg TM)^{-1}]$)")) +
  annotate("text", x = 10, y = 10,
           label = TeX(r"($y = \beta_0 + \beta_1 \cdot x;\; R^2 = 0.24$)"))

```

Wenn du dann mal die Funktion `Tex()` in `geom_text()` verwenden willst, dann musst du einmal etwas anpassen. Dann klappt es aber auch hier. Das hat mich mal echt Nerven und Zeit gekostet, deshalb lagere ich die Information mal hier für mich.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
#| fig-align: center
#| fig-height: 1
#| fig-width: 2

ggplot() +
  theme_void() +
  geom_text(aes(0, 0, 
                label = TeX(r'($\alpha  x^\alpha$, where $\alpha \in 1\ldots 5$)',
                                  output = "character")), parse = TRUE) 
```

### Farbpaletten

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Neben den klassischen Farben im R Paket `{ggplot2}` gibt es noch weit, weit mehr Farbpaletten. Wir nutzen in der Folge immer wieder die Okabe-Ito Farbpalette aus dem R Paket `{see}`. Die Okabe-Ito Farbpalette ist speziell so gebaut, dass die Farben sich gut für farbenblinde Personen unterscheiden. Mehr zum R Paket `{see}` auf der [Hilfeseite des Paketes](https://easystats.github.io/see/index.html). Der Kontrast zwischen den Farben ist sehr gut. Wenn du eine andere Farbpalette nutzen willst, findest du hier noch andere [Color Scales](https://easystats.github.io/see/articles/seecolorscales.html).

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Boxplots. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           fill = animal)) +
  geom_boxplot() +
  scale_fill_okabeito() +
  theme_minimal()
```

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Punkte. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()
```

Das Ganze geht dann auch händisch mit dem folgenden Code für die [jeweiligen Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette). Anbei einmal die Farbpalette dargestellt.

```{r}
#| warning: false
#| echo: false
#| message: false
#| label: fig-ggplot-okabeito
#| fig-align: center
#| fig-height: 0.75
#| fig-width: 6
#| fig-cap: "Farbpalette nach dem Okabe-Ito-Schema ebenfalls für farbblinde Personen erstellt. *[Zum Vergrößern anklicken]*"

df <- data.frame(
  x = 1:9,
  y = 0.5,
  z = factor(1:9)
)

ggplot(df, aes(x, y)) +
  geom_tile(aes(fill = z), colour = "grey50") +
  scale_fill_okabeito() +
  theme_void() +
  theme(legend.position = "none") 

```

Die Farben sind dann in der Reihenfolge wie folgt kodiert.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", 
                "#CC79A7", "#999999", "#000000")
```

Wenn wir Boxplots einfärben wollen dann nehmen wir den folgenden Code.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_fill_manual(values = cbPalette)
```

Und das hier ist die Ergänzung für Punkte und Linien.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_colour_manual(values = cbPalette)
```

Neben der Okabe-Ito Farbpalette liefert das [R Paket `{duke}`](https://cran.r-project.org/web/packages/duke/vignettes/duke.html) noch eine andere Möglichkeit eine Farbpalette für Farbblinde zu generieren.

```{r}
#| warning: false
#| echo: false
#| message: false
#| label: fig-ggplot-duke
#| fig-align: center
#| fig-height: 0.75
#| fig-width: 6
#| fig-cap: "Farbpalette nach dem Duke-Schema ebenfalls für farbblinde Personen erstellt. *[Zum Vergrößern anklicken]*"

df <- data.frame(
  x = 1:9,
  y = 0.5,
  z = factor(1:9)
)
ggplot(df, aes(x, y)) +
  geom_tile(aes(fill = z), colour = "grey50") +
  scale_duke_fill_discrete() +
  theme_void() +
  theme(legend.position = "none") 

```

Die Farben sind dann in der Reihenfolge wie folgt kodiert.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
dukePalette <- c("#012169", "#C84E00", "#00539B", "#339898", 
                 "#A1B70D", "#E89923", "#FFD960", "#262626")
```

Die Funktionen hier sind `scale_duke_color_discrete()` sowie `scale_duke_continuous()` und `scale_duke_fill_discrete()`.

Manchmal benötigen wir auch Farbverläufe. In R heißen diese Farbverläufe dann Farbpaletten. Eine Einführung liefert das Tutorium [Using RColorBrewer palettes](http://www.sthda.com/english/wiki/colors-in-r#using-rcolorbrewer-palettes). Ich selber nutze gerne das R Paket `{wesanderson}` welches sehr schöne Farbverläufe hat. Mehr kannst du auf der GitHub Seite [Wes Anderson Palettes](https://github.com/karthik/wesanderson) erfahren. Wir können die Paletten ganz einfach mit der Funktion `wes_palette()` laden.

```{r}
#| fig-height: 0.75
#| fig-width: 6
wes_palette("Zissou1")
```

Das schöne ist hier, dass wir einfach wie folgt Farbverläufe erstellen können. Wir wollen hier 21 Farbwerte haben und das Ganze dann als kontinuierlichen Verlauf.

```{r}
#| fig-height: 0.75
#| fig-width: 6
wes_palette("Zissou1", 21, type = "continuous")
```

### Abbildungen nebeneinander

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Das [R Paket `{patchwork}`](https://patchwork.data-imaginist.com/articles/patchwork.html) erlaubt es mehrere `ggplot` Abbildungen nebeneinander oder in einem beliebigen Layout miteinander zu verbinden. Das tolle ist, dass die Idee sehr intuitiv ist. Wir nutzen wieder das `+` um verschiedene Plots miteinander zu verbinden. Im Folgenden erschaffen wir uns zwei `ggplots` und speichern die Plots in den Objekten `p1` und `p2`. Das ist wie wir es bisher kennen, nur das jetzt keine Abbildung erscheint sondern beide Plots in zwei Objekten gespeichert sind.

```{r}
#| warning: false
#| echo: true
#| message: false

p1 <- ggplot(data = flea_dog_cat_tbl, 
             aes(x = flea_count, y = jump_length,
                 color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()

p2 <- ggplot(data = flea_dog_cat_tbl, 
                aes(x = animal, y = jump_length,
                    color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()
```

Wie können wir nun die beiden Abbildungen nebeneinander zeichnen? Wir nutzen einfach das `+` Symbol.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: true
#| label: fig-labels-patchwork-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 9
#| fig-cap: "Beispielhafte Abbildung der zweier Plots nebeneinander. *[Zum Vergrößern anklicken]*"

p1 + p2
```

Auf der Seite des [R Paket `{patchwork}`](https://patchwork.data-imaginist.com/articles/patchwork.html) findest du viel mehr Möglichkeiten das Layout anzupassen und auch die einzelnen [Subplots zu beschriften](https://patchwork.data-imaginist.com/articles/guides/annotation.html).

### Gebrochene $y$-Achse

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Das [R Paket `{ggbreak}`](https://cran.r-project.org/web/packages/ggbreak/vignettes/ggbreak.html) erlaubt es dir in die $x$-Achse oder aber $y$-Achse Lücken einzusetzen oder aber die Achsen eben gebrochen darzustellen. Zur Demonstration bauen wir uns nochmal den `stat_tbl` für die Hunde- und Katzenflöhe. Wir berechnen hier dann die Mittelwerte und nicht mehr die Standardabweichung, da es sonst nicht so gut mit der Darstellung mit der gebrochenen $y$-Achse für dieses Beispiel klappt.

```{r}
stat_tbl <- flea_dog_cat_tbl |> 
  group_by(animal) |> 
  summarise(mean = mean(jump_length))
```

In der @fig-labels-ggbreak-1 siehst du einmal die Abbildung der Mittelwerte der Sprungweiten der Hunde- und Katzenflöhe als Barplots dargestellt. Ich habe hier einen Bruch auf der $y$-Achse mit der Funktion `scale_y_break()` bei 1 bis 4 eingefügt und den Abstand über die Option `space` etwas visuell vergrößert. Mit der Option `scales` könntest du dann noch die Skalierung der gebrochenen $y$-Achse anpassen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: true
#| label: fig-labels-ggbreak-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Beispielhafte Abbildung der Barplots mit gebrochener $y$-Achse. Die Fehlerbalken wurden aus Gründen der besseren Darstellung der zerbrochenen $y$-Achse entfernt. *[Zum Vergrößern anklicken]*"

ggplot(stat_tbl, aes(x = animal, y = mean, fill = animal)) + 
  theme_minimal() +
  geom_bar(stat = "identity") +
  scale_y_break(c(1, 4), space = 0.5)
```

## Referenzen {.unnumbered}
