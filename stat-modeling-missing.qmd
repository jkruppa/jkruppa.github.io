```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Imputation fehlender Werte {#sec-missing}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Was sind fehlende Werte?

Wir beschränken uns hier auf zwei Arten von fehlenden Daten. Es gibt noch mehr Abstufungen, aber für den Einstieg reicht es, wenn wir nach zwei Typen von fehlenden Daten unterscheiden:

-   **MCAR** (eng. *missing completely at random*): völlig zufällig fehlende Daten. Dies ist das wünschenswerte Szenario im Falle fehlender Daten. Fehlende Werte werden als *missing completely at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes weder von erfassten noch unerfassten Merkmalen abhängt. Daher kann man sagen, dass MCAR-Werte die Fallzahl reduzieren, aber das Studienergebnis nicht verzerren.
-   **MAR** (eng. *missing at random*): Fehlende Werte werden als *missing at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von einem anderen Merkmal abhängt aber nicht von der Ausprägung des fehlenden Merkmals selbst. MAR-Werte reduzieren die Fallzahl und verzerren möglicherweise das Studienergebnis.
-   **MNAR** (eng. *missing not at random*): nicht zufällig fehlende Daten. Fehlende, nicht zufällige Daten sind ein schwerwiegenderes Problem, und in diesem Fall kann es ratsam sein, den Datenerhebungsprozess weiter zu überprüfen und zu versuchen zu verstehen, warum die Informationen fehlen. Wenn zum Beispiel die meisten Teilnehmer einer Umfrage eine bestimmte Frage nicht beantwortet haben, warum haben sie das getan? War die Frage unklar? Daher werden fehlende Werte als *missing not at random* bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von der Ausprägung des fehlenden Merkmals selbst abhängt. MNAR-Werte reduzieren die Fallzahl und verzerren das Studienergebnis. MNAR sind *Non-ignorable missings* und müssen auch berichtet werden.

Die Struktur der fehlenden Werte lässt sich meist schwer vorhersagen. Es gibt häufig Mischformen: MCAR, MAR, MNAR sind ineinander verwoben.

Unter der Annahme, dass es sich bei den Daten um MCAR handelt, können auch zu viele fehlende Daten ein Problem darstellen. In der Regel liegt die sichere Obergrenze bei großen Datensätzen bei 5 % der Gesamtmenge. Wenn die fehlenden Daten für ein bestimmtes Merkmal oder eine Stichprobe mehr als 5 % betragen, sollten Sie dieses Merkmal oder diese Stichprobe wahrscheinlich weglassen. Wir prüfen daher mit einer einfachen Funktion, ob in den Merkmalen (Spalten) und Stichproben (Zeilen) mehr als 5 % der Daten fehlen

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, see, readxl,
               mice, naniar, missForest, missRanger,
               dlookr)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten für Verteilungen

Damit wir uns auch eine Verteilung anschauen können bruachen wir *viele* Beobachtungen. Wir haben das ja schon bei den Histogrammen gesehen, wenn wir ein aussagekräftiges Histogramm erstellen wollen, dann brauchen wir viele Beobachtungen. Daher nehmen wir für dieses Kapitel einmal den Gummibärchendatensatz und schauen uns dort die Variablen `gender`, `height`, `count_bears` und `count_color` einmal genauer an. Wie immer nutzen wir die Funktion `select()` um die Spalten zu selektieren. Abschließend verwandeln wir das Geschlecht `gender` und das `module` noch in einen Faktor.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  %>%
  select(gender, age, height, semester, count_bears, count_color,
         most_liked) %>% 
  mutate(gender = as_factor(gender),
         most_liked = as_factor(most_liked),
         count_color = as_factor(count_color))
```

Wir nutzen jetzt die Daten einmal um uns die Normalverteilung und die Poissonverteilung am Beispiel näher anzuschauen.

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") 
```

```{r}
pig_miss_tbl <- pig_tbl %>% 
  generateNA(c(0.1, 0.15, 0.05, 0.3, 0.1, 0.05, 0.15, 0.01, 0.05, 0))
```

## Imputation von fehlenden Werten

https://yuzar-blog.netlify.app/posts/2021-03-04-how-to-impute-missing-values-in-r/

https://www.analyticsvidhya.com/blog/2016/03/tutorial-powerful-packages-imputing-missing-values/

http://juliejosse.com/wp-content/uploads/2018/06/DataAnalysisMissingR.html#1)*regression_with_na*(quantitative)\_for_ozone

### Visualisierung von fehlenden Werten

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-gummi-miss
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "Histogramme der Anzahl an Gummibärchen und die Anzahl an Farben in einer Tüte. Es gibt nicht mehr als sechs Farben."
#| fig-subcap: 
#|   - "Anzahl an Bärchen"
#|   - "Anzahl an Farben"
#|   - "Anzahl an Bärchen"
#| layout-nrow: 2
#| column: page

vis_miss(gummi_tbl)

gg_miss_upset(gummi_tbl)

plot_na_pareto(gummi_tbl)

```

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-pig-miss
#| fig-align: center
#| fig-height: 6
#| fig-width: 7
#| fig-cap: "Histogramme der Anzahl an Gummibärchen und die Anzahl an Farben in einer Tüte. Es gibt nicht mehr als sechs Farben."
#| fig-subcap: 
#|   - "Anzahl an Bärchen"
#|   - "Anzahl an Farben"
#|   - "Anzahl an Bärchen"
#| layout-nrow: 2
#| column: page

vis_miss(pig_miss_tbl)

gg_miss_upset(pig_miss_tbl)

plot_na_pareto(pig_miss_tbl)

```

## Mean oder Median Imputation

::: column-margin
Das [R Paket `dlookr`](https://yuzar-blog.netlify.app/posts/2021-01-30-r-package-reviews-dlookr-diagnose-explore-and-transform-your-data/) hat eine große Auswahl an simplen Imputationsalgorithmen.
:::

## Most frequent Imputation

## Imputation mit `mice`

```{r}
imp_method <- c(gender = "logreg", age = "pmm", height = "pmm", semester = "pmm", 
                count_bears = "", count_color = "polyreg", most_liked = "polyreg")

imp_gummi_tbl <- mice(data = gummi_tbl, m = 5, maxit = 5, 
                      method = imp_method)
```

```{r}
complete(imp_gummi_tbl) %>% vis_miss()
```

```{r}
imp_all_gummi_tbl <- imp_gummi_tbl %>% 
  complete("long", include = TRUE) %>% 
  select(-.id, imp_run = .imp) 
```

```{r}
densityplot(imp_gummi_tbl)
```

```{r}
pooled_res <- imp_gummi_tbl %>%
  mice::complete("all") %>%
  map(lm, formula = height ~ age + semester + gender) %>%
  pool()
```

## Was macht `pool`?

## missForest

## Sensitivitätsanalysen

Vergleich verschiedener Imputationsmethoden Vergleich mit complete-case Analyse
