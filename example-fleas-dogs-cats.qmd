```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx, see)
```

# Von Flöhen auf Tieren

*Letzte Änderung am `r format(fs::file_info("example-fleas-dogs-cats.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"I am fond of pigs. Dogs look up to us. Cats look down on us. Pigs treat us as equals." --- Winston S. Churchill*

Die ursprüngliche Idee zu den Sprungweiten der Hunde- und Katzenflöhe stammt von @cadiergues2000comparison aus der entsprechenden Veröffentlichung [A comparison of jump performances of the dog flea, Ctenocephalides canis (Curtis, 1826) and the cat flea, Ctenocephalides felis felis (Bouché, 1835)](https://www.sciencedirect.com/science/article/pii/S0304401700002740). Wir bauen uns hier kleinere Datensätze mit einer ähnlichen Fragestellung nach, die wir dann in den folgenden Kapiteln immer wieder nutzen. Dabei begleiten uns die Hunde- und Katzenflöhe eher in den Einführungskapiteln. Später schauen wir uns dann noch komplexere Datensätze mit einem klaren Anwendungsbezug an.

## Von Flöhen auf Hunden {#sec-example-1}

{{< video https://youtu.be/XTRUg0iBodo >}}

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_weight_dog <- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
```

In unserem ersten Beispiel wollen wir uns verschiedene Daten von Hundeflöhen (eng. *dog flea*) anschauen. Unter anderem sind dies die Sprungweite eines Hundeflohs, die Anzahl an Haaren am rechten Bein eines Hundeflohs, die Boniturnoten auf einer Flohmesse sowie der Infektionsstatus mit Flohschnupfen. Hier nochmal detailliert dargestellt, was wir uns im Folgenden immer wieder anschauen wollen.

Erst einmal die Zahlen, so wie du die Messwerte dann auf einen karierten Zettel aus deinem Collegeblock schreiben würdest. Ich empfehle immer Papier auf dem Feld, Gewächshaus oder Stall. Ein Pad geht da mal schnell kaputt. Dann habe ich zu deinen Notizen noch die mathematischen Schreibweise sowie die Schreibweise in R ergänzt. In R nutze ich auch schon gleich [ein Objekt](#sec-basics) um die Zahlen zu speichern.

**Sprungweite** in \[cm\] von verschiedenen Flöhen:

::: panel-tabset
## Handschriftlich

![](images/data_example/data_example_5.png){fig-align="center" width="100%"}

## Mathematik

$$
Y_{jump} = \{`r str_c(y_jump_dog, collapse = ", ")`\}.
$$

## R (built-in)

```{r}
y_jump_dog <- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)
y_jump_dog
```
:::

**Anzahl an Haaren am rechten Bein** von verschiedenen Flöhen:

::: panel-tabset
## Handschriftlich

![](images/data_example/data_example_4.png){fig-align="center" width="100%"}

## Mathematik

$$
Y_{count} = \{`r str_c(y_count_dog, collapse = ", ")`\}.
$$

## R (built-in)

```{r}
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_count_dog
```
:::

**Gewicht des gesprungenen Flohes** in \[mg\] von verschiedenen Flöhen:

::: panel-tabset
## Handschriftlich

![](images/data_example/data_example_3.png){fig-align="center" width="100%"}

## Mathematik

$$
Y_{weight} = \{`r str_c(y_weight_dog, collapse = ", ")`\}.
$$

## R (built-in)

```{r}
y_weight_dog <- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)
y_weight_dog
```
:::

**Boniturnoten** \[1 = schwächste bis 9 = stärkste Ausprägung\] von verschiedenen Flöhen:

::: panel-tabset
## Handschriftlich

![](images/data_example/data_example_2.png){fig-align="center" width="100%"}

## Mathematik

$$
Y_{grade} = \{`r str_c(y_grade_dog, collapse = ", ")`\}.
$$

## R (built-in)

```{r}
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_grade_dog
```
:::

**Infektionstatus** \[0 = gesund, 1 = infiziert\] mit Flohschnupfen von verschiedenen Flöhen:

::: panel-tabset
## Handschriftlich

![](images/data_example/data_example_1.png){fig-align="center" width="100%"}

## Mathematik

$$
Y_{infected} = \{`r str_c(y_infected_dog, collapse = ", ")`\}.
$$

## R (built-in)

```{r}
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
y_infected_dog
```
:::

Je nachdem was wir messen, nimmt $Y$ andere Zahlenräume an. Wir bezeichnen unser gemessenes $Y$ auch gerne als Messwert, Outcome oder Endpunkt. Wir können die Sprungweite eben sehr einfach mit einer Kommazahl messen. Dafür benötigen wir nur ein Lineal. Das geht schlecht, wenn wir messen, ob einer unserer Hundeflöhe nieste und somit Flohschnupfen hat. Ein Lineal hilft uns hier nicht weiter. Was ähnliches haben wir auch bei der Anzahl der Flohhaare auf dem rechten Flohbein vorliegen. Hier zählen wir und können somit keine halben Flohhaare messen.

Wir sagen, $Y$ folgt einer Verteilung. Die Sprungweite eines Hundeflohs ist normalverteilt, die Anzahl an Flöhen folgt einer Poisson Verteilung, die Boniturnoten sind multinominal/ordinal bzw. kategoriell verteilt. Der Infektionsstatus ist binomial verteilt. Wir werden uns später die Verteilungen anschauen und visualisieren. Das können wir hier aber noch nicht. Wichtig ist, dass du schon mal gehört hast, dass $Y$ unterschiedlich *verteilt* ist, je nachdem welche Dinge wir messen. Die @tbl-dog-long zeigt dir die Darstellung der Daten von oben in einer einzigen Tabelle. Bitte beachte, dass genau eine Zeile für eine Beobachtung, in diesem Fall einem Floh, vorgesehen ist.

```{r echo = FALSE}
#| label: tbl-dog-long
#| tbl-cap: "Tabelle von sieben Hundeflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte `animal` gibt an, dass wir es hier mit Hundeflöhe zu tun haben. Die Tabelle ist im Long-Format dargestellt."

data_tbl <- tibble(dog = y_jump_dog) |>
  gather(animal, jump_length) |>
  mutate(flea_count = c(y_count_dog),
         weight = c(y_weight_dog),
         grade = c(y_grade_dog),
         infected = c(y_infected_dog))

write.csv2(data_tbl, "data/flea_dog.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog.xlsx", rowNames = FALSE)

data_tbl |>
  kable(align = "c", "pipe")
```

::: callout-tip
## Datei für von Flöhen und Hunden

Du findest die Datei `flea_dog.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen auf Hunden und Katzen {#sec-example-2}

{{< video https://youtu.be/4X9lHO_hRCU >}}

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_weight_dog <- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
y_jump_cat <- c(3.2, 2.2, 5.4, 4.1, 4.3, 7.9, 6.1)
y_count_cat <- c(12, 13, 11, 12, 16, 9, 7)
y_weight_cat <- c(1.1, 2.1, 2.4, 2.1, 1.5, 3.7, 2.9)
y_grade_cat <- c(7, 5, 7, 6, 6, 6, 5)
y_infected_cat <- c(1, 0, 0, 0, 1, 0, 0)
```

Wir wollen jetzt das Beispiel von den Hundeflöhen um eine weitere Spezies erweitern. Wir nehmen noch die Katzen mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit von Katzenflöhen aus? Konzentrieren wir uns hier einmal auf die Sprungweite. Wir können wie in dem vorherigen Beispiel mit den Hundeflöhen die Sprungweiten \[cm\] der Katzenflöhe wieder in der gleichen Weise aufschreiben:

$$
Y_{jump} = \{`r str_c(y_jump_cat, collapse = ", ")`\}.
$$

Wenn wir jetzt die Sprungweiten der Hundeflöhe mit den Katzenflöhen vergleichen wollen haben wir ein Problem. Beide Zahlenvektoren heißen gleich, nämlich $Y_{jump}$. Wir könnten jeweils in die Indizes noch $dog$ und $cat$ schreiben als $Y_{jump,\, dog}$ und $Y_{jump,\, cat}$ und erhalten folgende Vektoren. In der Mathematik würden wir jetzt Indizes vergeben, aber das macht die Sachlage nur begrenzt übersichtlicher.

$$
\begin{align}
Y_{jump,\, dog} &= \{`r str_c(y_jump_dog, collapse = ", ")`\}\\
Y_{jump,\, cat} &= \{`r str_c(y_jump_cat, collapse = ", ")`\}
\end{align}
$$

Durch mehr Spezies werden die Indizes immer länger und unübersichtlicher. Auch das $Y$ einfach $Y_{dog}$ oder $Y_{cat}$ zu nennen ist keine Lösung - wir wollen uns vielleicht später nicht nur die Sprungweite zwischen den Hunde- und Katzenflöhen vergleichen, sondern vielleicht auch die Anzahl an Flohhaaren oder den Infektionsstatus. Dann stünden wir wieder vor dem Problem die $Y$ für die verschiedenen Outcomes zu unterscheiden. Daher erstellen wir uns die @tbl-dog-cat-wide. Wir haben jetzt eine *Daten*tabelle vorliegen in der die Sprungweiten von sieben Hunden und sieben Katzen dargestellt sind.

```{r echo = FALSE}
#| label: tbl-dog-cat-wide
#| tbl-cap: "Sprunglängen [cm] für Hunde- und Katzenflöhe. Die Tabelle ist im Wide-Format dargestellt."

tibble(dog = y_jump_dog,
       cat = y_jump_cat) |>
  kable(align = "c", "pipe")

```

Intuitiv ist die obige @tbl-dog-cat-wide übersichtlich und beinhaltet die Informationen die wir wollten. Wir würden sowas auch schnell in Excel bauen. Für sehr kleine Tabellen ist das auch okay, aber wir werden uns später sehr schnell mit komplexeren Fragestellungen beschäftigen und dann funktioniert das alles nicht mehr. Wir haben nämlich das Problem, das wir in dieser @tbl-dog-cat-wide nicht noch weitere Outcomes angeben können. Wir könnten die *Anzahl an Flohhaaren* auf den Hunde- und Katzenflöhen nicht einfach so in dieser Form darstellen. Als Lösung ändern wir die @tbl-dog-cat-wide in das Long-Format und erhalten die folgende @tbl-dog-cat-long. Jede Beobachtung belegt nun eine Zeile. Dies ist sehr wichtig im Kopf zu behalten, wenn du eigene Daten in z.B. Excel erstellst.

```{r }
#| echo: false
#| label: tbl-dog-cat-long
#| tbl-cap: "Tabelle von sieben Hunde- und Katzenflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte `animal` gibt an, dass wir es hier mit Hunde- und Katzenflöhe zu tun haben. Die Tabelle ist im Long-Format dargestellt."


data_tbl <- tibble(dog = y_jump_dog,
       cat = y_jump_cat) |>
  gather(animal, jump_length) |>
  mutate(flea_count = c(y_count_dog, y_count_cat),
         weight = c(y_weight_dog, y_weight_cat),
         grade = c(y_grade_dog, y_grade_cat),
         infected = c(y_infected_dog, y_infected_cat))

write.csv2(data_tbl, "data/flea_dog_cat.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat.xlsx", rowNames = FALSE)


data_tbl |>
  kable(align = "c", "pipe")

```

Das Datenformat in der obigen Tabelle nennen wir auch *tidy* (deu. *sauber*) nach dem [R Paket `tidyr`](https://tidyr.tidyverse.org/) was dann auch später mit die Basis für unsere Analysen in R sein wird. Wenn ein Datensatz *tidy* ist, dann erfüllt er folgende Bedingungen.

1.  Jede Variable ist eine Spalte; jede Spalte ist eine Variable.
2.  Jede Beobachtung ist eine Zeile; jede Zeile ist eine Beobachtung.
3.  Jeder Wert ist eine Zelle; jede Zelle ist ein einziger Wert.

Nach diesen Regeln bauen wir dann jeden Datensatz auf, den wir in einem Experiment gemessen haben.

::: callout-tip
## Datei für von Flöhen, Hunden und Katzen

Du findest die Datei `flea_dog_cat.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen auf Hunden, Katzen und Füchsen {#sec-example-3}

```{r }
#| echo: false
#| message: false

data_tbl <- read_csv2("data/flea_dog_cat.csv")
```

Wir wollen jetzt das Beispiel von den Hunde- und Katzenflöhen um eine *weitere* Spezies erweitern. Warum machen wir das? Später wollen wir uns anschauen, wie sich verschiedene Gruppen oder Behandlungen voneinander unterscheiden. Wir brauchen also mehr Spezies. Wir nehmen noch die Füchse mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit und den anderen Messwerten von Hunde-, Katzen- und Fuchsflöhen aus?

```{r echo = FALSE}
#| label: tbl-dog-cat-fox
#| tbl-cap: "Tabelle von sieben Hunde-, Katzen und Fuchsflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte `animal` gibt an, welche Flohspezies gemessen wurde. Die Tabelle ist im Long-Format dargestellt."

y_jump_fox <- c(7.7, 8.1, 9.1, 9.7, 10.6, 8.6, 10.3)
y_grade_fox <- c(5, 4, 4, 5, 4, 4, 3)
y_count_fox <- c(21, 25, 31, 12, 28, 18, 19)
y_weight_fox <- c(3.1, 4.2, 5.1, 3.5, 3.2, 4.6, 3.7)
y_infected_fox <- c(1, 1, 1, 1, 0, 1, 0)

data_tbl <- rbind(data_tbl,  
                  tibble(fox = y_jump_fox) |>
                    gather(animal, jump_length) |>
                    mutate(flea_count = c(y_count_fox),
                           weight = c(y_weight_fox),
                           grade = c(y_grade_fox),
                           infected = c(y_infected_fox)))

write.csv2(data_tbl, "data/flea_dog_cat_fox.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_fox.xlsx", rowNames = FALSE)


data_tbl |>
  kable(align = "c", "pipe")

```

Der Datensatz in @tbl-dog-cat-fox beginnt schon recht groß zu werden. Deshalb brauchen wir auch die Statistiksoftware R als Werkzeug um große Datensätze auswerten zu können.

::: callout-tip
## Datei für von Flöhen auf Tieren

Du findest die Datei `flea_dog_cat_fox.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen auf Tieren in Habitaten {#sec-example-4}

Wir schauen uns in diesem Beispiel wiederum drei Tierarten an: Hunde, Katzen und Füchse. Auf diesen Tierarten messen wir die Sprunglänge von jeweils zehn Tieren, lassen aber den Rest einmal weg. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte `site` in der wir vier verschiedene Messorte protokollieren. Es ergibt sich folgende @tbl-example-4 und die dazugehörige @fig-example-4.

```{r }
#| message: false
#| echo: false

set.seed(20220812)
data_tbl <- expand_grid(animal = 1:3, site = 1:4, rep = 1:10) |> 
  mutate(jump_length = round(8 + 5 * animal + 2.5 * site - 1.5 * animal * site + rnorm(n(), 0, 2), 2),
         animal = factor(animal, labels = c("cat", "dog", "fox")),
         site = factor(site, labels = c("city", "smalltown", "village", "field")))

write.csv2(data_tbl, "data/flea_dog_cat_fox_site.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_fox_site.xlsx", rowNames = FALSE)
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Sprunglängen [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten."
#| label: tbl-example-4

data_raw_tbl <- data_tbl |> 
  mutate(animal = as.character(animal),
         site = as.character(site))

rbind(head(data_raw_tbl),
      rep("...", times = ncol(data_raw_tbl)),
      tail(data_raw_tbl)) |> 
  kable(align = "c", "pipe")
```

Die Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Boxplot in @fig-example-4 an. Wir sehen hier, dass wir drei Tierarten an vier Orten die Sprungweite in \[cm\] gemessen haben.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: Boxplot der Sprungweiten [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten.
#| label: fig-example-4

ggplot(data_tbl, aes(animal, jump_length, fill = site)) + 
  geom_boxplot() +
  labs(x = "Tierart", y = "Sprungweite [cm]", fill = "Messort") +
  theme_minimal() +
  scale_fill_okabeito()
```

::: callout-tip
## Datei für von Flöhen auf Tieren in Habitaten

Du findest die Datei `flea_dog_cat_fox_site.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von vielen Flöhen auf Hunden und Katzen {#sec-example-5}

Wir schauen uns in diesem Beispiel wiederum nur zwei Tierarten an: Hunde und Katzen. Auf diesen Tierarten messen wir wieder die Sprunglänge in \[cm\] von jeweils 400 Tieren. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte `jump_weight` in \[mg\] sowie `sex` \[male, female\]. Bei Versuch wurde noch in der Variable `hatch_time` gemessen, wie lange die Flöhe in Stunden zum Schlüpfen brauchen. Es ergibt sich folgende @tbl-example-5 mit den ersten zehn Beobachtungen und die dazugehörige @fig-example-5.

```{r }
#| message: false
#| echo: false

set.seed(20220812)
data_tbl <- expand_grid(animal = 1:3, sex = 1:2, rep = 1:100) |> 
  mutate(weight = round(5 + 2 * sex + rnorm(n(), 0, 1), 2),
         jump_length = round(8 + 2.5 * animal + 5 * sex + rnorm(n(), 0, 2), 2),
         animal = factor(animal, labels = c("cat", "dog", "fox")),
         sex = factor(sex, labels = c("male", "female")),
         flea_count = rpois(n(), 2),
         hatch_time = round(rlnorm(n(), 5, 1), 2)) |> 
  select(-rep)

write.csv2(data_tbl, "data/flea_dog_cat_length_weight.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_length_weight.xlsx", rowNames = FALSE)
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Sprunglängen [cm], Gewichte [mg], Geschecht [sex] und Schlüpfzeit [h] für Hunde- und Katzenflöhe."
#| label: tbl-example-5

data_tbl |>
  head(10) |> 
  kable(align = "c", "pipe")
```

Die Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Scatterplot in @fig-example-5 an. Wir sehen hier, dass wir das mit dem Gewicht \[mg\] der Flöhe auch die Sprungweite in \[cm\] steigt.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Scatterplot der Sprunglängen [cm] und Gewichte [mg] für Hunde- und Katzenflöhe."
#| label: fig-example-5

ggplot(data_tbl, aes(weight, jump_length)) + 
  geom_point() +
  labs(x = "Gewicht [mg]", y = "Sprungweite [cm]") +
  theme_minimal() 
```

::: callout-tip
## Datei für von vielen Flöhen auf Hunden und Katzen

Du findest die Datei `flea_dog_cat_length_weight.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Aktualisierung (seit 02.2025)

Dieses Abschnitt wird in den nächsten Wochen aktualisiert. Ich plane zum Ende des SoSe 2025 eine neue Version des Abschnitts erstellt zu haben. Deshalb kann hier das ein oder andere kurzfristig nicht mehr funktionieren.
:::

## Daten für die Modellierung

```{r}
#| message: false
#| warning: false

foo <- read_excel("data/fleas_model_data_backup.xlsx")

bar <- foo %>% 
  mutate(norm_bonitur = (bonitur - min(bonitur))/(max(bonitur) - min(bonitur)) + 0.001) %>% 
  #select(norm_bonitur) %>% 
  mutate(bin_bonitur = cut(norm_bonitur, breaks = seq(0, 1.005, length.out = 10)),
         bonitur = factor(bin_bonitur, labels = 1:9))

bar$norm_bonitur

table(bar$bonitur)

ggplot(bar, aes(x = feeding, y = bonitur, fill = stage)) +
  geom_dotplot(binaxis = "y", stackdir = "center") +
  facet_wrap(~stage)

```

## Referenzen {.unnumbered}
