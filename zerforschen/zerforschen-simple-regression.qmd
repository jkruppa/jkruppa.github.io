In diesem Zerforschenbeispiel wollen wir uns eine simple lineare Regression in einem Scatterplot anschauen. Das stimmt nicht so ganz, den die Schwierigkeit liegt darin, dass es sich um zwei Scatterplots handelt. Klar, du kannst die beiden Abbildungen einfach getrennt erstellen und dann wäre gut. Ich zeige dir dann aber noch zwei weitere Möglichkeiten. Daher fangen wir mit der @fig-simple-regression einmal an. Wir haben hier zwei Scatterplots mit jeweils einer linearen Regression, dargestellt durch eine Gerade mit Regressionsgleichung, vorliegen. Hier brauchen wir dann mal ein paar mehr Zahlen, die ich mir dann aber so grob aus der Abbilung abgeleitet habe.

![Ursprüngliche Abbildung, die nachgebaut werden soll. Zwei lineare Regressionen mit den jeweiligen Regressionsgleichungen.](images/eda/zerforschen_regression_linear.jpg){#fig-simple-regression fig-align="center" width="100%"}

Wir laden als erstes wieder den Datensatz, den ich mir aus der @fig-simple-regression erstellt habe. Wie immer beim Zerforschen habe ich nicht so genau drauf geachtet nur das die Zahlen so grob stimmen. Die Erstellung der Daten kann hier recht langwierig sein, aber hier geht es ja mehr um die Nutzung von `ggplot`. Also mach dir keien Gedanken, wen die Punkte nicht so perfekt passen.

```{r}
regression_tbl <- read_excel("data/zerforschen_regression_linear.xlsx") %>% 
  mutate(type = factor(type, labels = c("Basil", "Oregano")))
regression_tbl 
```

Den folgenden Teil kannst du überspringen, wenn es dir um die Abbildung geht. Ich möchte in den zwei folgenden Tabs einmal die simple lineare Regression für die Abbildung mit dem Basilikum und einmal für das Oregano rechnen.

::: panel-tabset
## Lineare Regression für Basilikum

Wir erstellen uns einmal eine simple lineare Regression mit der Funktion `lm()`. Mehr zu dem Thema und die Maßzahlen der Güte einer linearen Regression wie das Bestimmtheitsmaß $R^2$ findest du im Kapitel zur [simplen linearen Regression](#sec-modeling-simple-stat). Deshalb hier nur die Durchführung und nicht mehr.

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- lm(unwashed ~ washed, data = filter(regression_tbl, type == "Basil"))

fit %>% 
  parameters::model_parameters() %>% 
  select(Parameter, Coefficient)

performance::r2(fit)
```

Wir nutzen jetzt gleich die Koeffizienten aus der linearen Regression für die Erstellung der Geradengleichung.

## Lineare Regression für Oregano

Auch hier gilt wie im anderen Tab, dass wir uns einmal eine simple lineare Regression mit der Funktion `lm()` erstellen. Mehr zu dem Thema und die Maßzahlen der Güte einer linearen Regression wie das Bestimmtheitsmaß $R^2$ findest du im Kapitel zur [simplen linearen Regression](#sec-modeling-simple-stat). Deshalb hier nur die Durchführung und nicht mehr.

```{r}
#| message: false
#| echo: true
#| warning: false

fit <- lm(unwashed ~ washed, data = filter(regression_tbl, type == "Oregano"))

fit %>% 
  parameters::model_parameters() %>% 
  select(Parameter, Coefficient)

performance::r2(fit)
```

Wir nutzen jetzt gleich die Koeffizienten aus der linearen Regression für die Erstellung der Geradengleichung.
:::

Soweit so gut. In den beiden obigen Tabs haben wir jetzt die Koeffizienten der Regressionsgleichung berechnet. Wir kriegen also aus der Funktion `lm()` die Steigung und den y-Achsenabschnitt (eng. *Intercept*). Damit können wir uns dann die beiden Funktionen für die Gerade der Basilikumdaten und der Oreganodaten bauen. Wir werden dann in `ggplot` mit der Funktion `geom_function()` die entsprechenden Gerade zeichnen.

```{r}
basil_func <- \(x){2.10 + 1.00 * x}
oregano_func <- \(x){8.17 + 0.99 * x}
```

Du hast jetzt im Folgenden die Wahl zwischen drei Lösungen des Problems. Jede dieser Lösungen ist vollkommen in Ordnung und ich zeige dir hier nur die Möglichkeiten. Nimm einfach die Lösung, die dir am besten gefällt und passt. Was machen wir nun? Wir stellen einmal die beiden Abbildungen getrennt voneinander dar. Im Weiteren nutzen wir einmal die Funktion `facet_wrap()` um nach einem Faktor die Abbildungen aufzutrennen. Am Ende nutzen wir noch das R Paket `patchwork` um aus zwei Abbildungen dann eine schön annotierte Abbildung zu machen.

::: panel-tabset
## Zwei Abbildungen

Der Kern der @fig-ggplot-zerforschen-regression-3a und @fig-ggplot-zerforschen-regression-3b ist die Funktion `filter()`. Wir bauen uns sozusagen zweimal einen Datensatz und leiten dann den Datensatz in die Funktion `ggplot()` weiter. Der Trick ist eigentlich, dass wir große Teile des Codes kopieren und dann für das Oregano wieder verwenden. Wenn du dir beide Chunks mal näher anschaust, wirst du große Änlichkeiten sehen. Im Prinzip musst du nur aufpassen, dass du jeweils die richtigen Geradenfunktionen einsetzt.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3a
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` für Basilikum nachgebaut. Beachte die Funktion `filter()`, die den jeweiligen Datensatz für die beiden Kräuter erzeugt."

filter(regression_tbl, type == "Basil") %>% # <1>
  ggplot(aes(x = washed, y = unwashed, color = type)) +
  theme_bw() +
  geom_function(fun = basil_func, color = cbbPalette[2], linetype = 'dashed') + # <2>
  geom_point(color = cbbPalette[2]) +
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), # <3>
                     breaks = seq(0, 600, 150)) + # <3>
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), # <3>
                     breaks = seq(0, 600, 150)) + # <3>
  theme(legend.position = "none") +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[2],  # <4>
           label = TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)")) # <4>
 
```

1.  Hier wird einmal für das Basilikum gefiltert.
2.  Hier wird die Regressionsgerade ersetellt.
3.  Die Achsenbeschriftung ist hier etwas aufwendiger mit dem R Paket `latex2exp`.
4.  Hier wird dann noch die Geradengleichung ergänzt sowie das Bestimmtheitsmaß $R^2$.

Und nochmal die simple Regression in dem Scatterplot für das Oregano. Bitte beachte einmal die Beschreibungen im Code und du wirst sehen, dass hier sehr viel gleich zum obigen Codeblock ist. In dem Tab zum R Paket `patchwork` zeige ich dir dann noch die Möglichkeit ein Template zu erstellen und dann einiges an Zeilen an Code zu sparen. Aber es geht auch so.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3b
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Einmal die einfache Abbildung der linearen Regression in `ggplot` für Oregano nachgebaut. Beachte die Funktion `filter()`, die den jeweiligen Datensatz für die beiden Kräuter erzeugt."

filter(regression_tbl, type == "Oregano") %>% # <1>
  ggplot(aes(x = washed, y = unwashed, color = type)) +
  theme_bw() +
  geom_function(fun = oregano_func, color = cbbPalette[3], linetype = 'dashed') + # <2>
  geom_point(color = cbbPalette[3]) +
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), # <3>
                     breaks = seq(0, 900, 150)) + # <3>
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), # <3>
                     breaks = seq(0, 900, 150)) + # <3>
  theme(legend.position = "none") +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[3],  # <4>
           label = TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)")) # <4>
```

1.  Hier wird einmal für das Oregano gefiltert.
2.  Hier wird die Regressionsgerade ersetellt.
3.  Die Achsenbeschriftung ist hier etwas aufwendiger mit dem R Paket `latex2exp`.
4.  Hier wird dann noch die Geradengleichung ergänzt sowie das Bestimmtheitsmaß $R^2$.

## Mit `facet_wrap()`

Wir brauchen hier das R Paket `grid`

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3c
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Einmal die komplexe Abbildung der nicht-linearen Regression in `ggplot` nachgebaut. Am Ende wurde es dann doch noch eine Legende und keine Beschriftung."

ggplot(data = regression_tbl, aes(x = washed, y = unwashed,
                                  color = type)) +
  theme_bw() +
  scale_color_okabeito() +
  geom_function(data = filter(regression_tbl, type == "Basil"),
                fun = basil_func, color = cbbPalette[2], linetype = 'dashed') + 
  geom_function(data = filter(regression_tbl, type == "Oregano"),
                fun = oregano_func, color = cbbPalette[3], linetype = 'dashed') + 
  geom_point() +
  facet_wrap(~ type) +
  scale_x_continuous(name = TeX(r"(Iodine content in \textbf{unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150)) +
  scale_y_continuous(name = TeX(r"(Iodine content in \textbf{washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150)) +
  theme(legend.position = "none") 
 
grid::grid.text(TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)"), 
                x = 0.2, y = 0.2, just = "left", gp = grid::gpar(col = cbbPalette[2]))
grid::grid.text(TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)"), 
                x = 0.65, y = 0.2, just = "left", gp = grid::gpar(col = cbbPalette[3]))
```

## Mit `patchwork`

```{r}
p_template <- ggplot(regression_tbl, aes(x = washed, y = unwashed,
                                         color = type)) +
  theme_bw() +
  geom_point() +
  scale_x_continuous(name = "",
                     breaks = seq(0, 900, 150), limits = c(0, 900)) +
  scale_y_continuous(name = TeX(r"(\textbf{Washed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"),
                     breaks = seq(0, 900, 150), limits = c(0, 900)) +
  theme(legend.position = "none")
```

```{r}
p_basil <- p_template %+%
  filter(regression_tbl, type == "Basil") +
  scale_color_okabeito(order = 1) +
  geom_function(fun = basil_func, color = cbbPalette[2], 
                linetype = 'dashed') +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[2], 
           label = TeX(r"($y = 2.10 + 1.00 \cdot x;\; R^2 = 0.99$)")) +
  ggtitle("Basil")
```

```{r}
p_oregano <- p_template %+%
  filter(regression_tbl, type == "Oregano") +
  scale_color_okabeito(order = 2) +
  geom_function(fun = oregano_func, color = cbbPalette[3], 
                linetype = 'dashed') +
  theme(axis.title.y = element_blank()) +
  annotate("text", x = 150, y = 100, hjust = "left", color = cbbPalette[3], 
           label = TeX(r"($y = 8.17 + 0.99 \cdot x;\; R^2 = 0.99$)")) +
  ggtitle("Oregano")
```

[Adding Annotation and Style](https://patchwork.data-imaginist.com/articles/guides/annotation.html)

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-regression-3d
#| fig-align: center
#| fig-height: 5
#| fig-width: 8
#| fig-cap: "Einmal die komplexe Abbildung der nicht-linearen Regression in `ggplot` nachgebaut. Am Ende wurde es dann doch noch eine Legende und keine Beschriftung."
p_basil + p_oregano +
  plot_annotation(title = 'Iodine content in herbs',
                  subtitle = 'The iodine content is measured in washed and unwashed herbs',
                  caption = 'Disclaimer: The measurement has been done in freshmatter',
                  tag_levels = 'A')
grid::grid.draw(grid::textGrob(TeX(r"(\textbf{Unwashed} herbs $[\mu g\, l \, (100 g\, FM)^{-1}]$)"), 
                               y = 0.07))
```
:::
