# Visualisierung von Daten {#sec-eda-ggplot}

*Letzte Änderung am `r format(fs::file_info("eda-ggplot.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false

pacman::p_load(tidyverse, readxl, knitr, kableExtra, quantreg,
               multcomp, emmeans, ggpubr, multcompView, nlme,
               ggdist, gghalves, performance, parameters, broom,
               effectsize, patchwork, conflicted)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
conflicts_prefer(dplyr::select)
```

> *"The greatest value of a picture is when it forces us to notice what we never expected to see." --- John Tukey*

{{< video https://youtu.be/00OAyTOK_Mw >}}

Worum geht es in der explorativen Datenanalyse? Die explorative Datenanalyse wurde von [John Tukey (1915--2000)](https://de.wikipedia.org/wiki/John_W._Tukey) begründet. Er war ein Pionier im Bereich der frühen Informatik und Computerwissenschaften. Warum explorativ, was wollen wir den erforschen? Denn nichts anderes bedeutet ja explorativ (deu. *erforschend, erkundend, untersuchend*) -- wir wollen etwas entdecken. Die Idee war ziemlich innovativ und neu als @tukey1977exploratory in seinem Buch die explorative Datenanalyse erstmal als Begriff vorstellte. Schon vorher beschrieb @tukey1962future in seinem Artikel "The Future of Data Analysis" die zukünftige Datenanalyse, wie Tukey sie sich vorstellte, was auch sein folgendes Zitat belegt.

> *"I know of no person or group that is taking nearly adequate advantage of the graphical potentialities of the computer." --- John Tukey*

Nun musst du wissen, dass in den 60'ziger Jahren der Computer in den Kinderschuhen steckte. Mal eben eine Berechnung durchführen, dass war dann schon so eine Sache der damaligen Zeit. Vieles bis fast alles wurde als Tabellen veröffentlicht und selten wurde eine Abbildung *händisch* dazu erstellt. An dieser Stelle sei einmal auf die [Microsoft Excel Werbung aus dem Jahr 1990](https://youtu.be/kOO31qFmi9A?si=wHkm7frVVlH2e_SF) verwiesen. Daher war die Idee, sich Daten zu visualisieren entsprechend neu und wirklich ein wissenschaftlicher Fortschritt. Erstaunlicherweise glauben wir heute manchmal dann Zahlen in einer Tabelle mehr als einer Abbildung. Wir schreiben dann den Zahlen eine größere Genauigkeit und Aussagekraft zu, als einer explorativen Abbildung. Dabei können wir in einer Abbildung viel mehr sehen, als in einer Tabelle.

> *"There is no data that can be displayed in a pie chart, that cannot be displayed BETTER in some other type of chart." --- John Tukey*

!["The reason to avoid pie charts" Quelle: wumo.com](images/eda/cake_chart.jpg){#fig-wumo-pie fig-align="center" width="100%"}

Daher ist ein wichtiger Teil in der Analyse von Daten die Visualisierung und damit die Darstellung in einer Abbildung. Wir haben aber eine großem Auswahl an möglichen Abbildungen, deshalb auch das lange Kapitel hier. Siehe dazu auch die Arbeit von @riedel2022replacing mit dem Titel [Replacing bar graphs of continuous data with more informative graphics: are we making progress?](https://portlandpress.com/clinsci/article/136/15/1139/231562/Replacing-bar-graphs-of-continuous-data-with-more) um mehr über die Nutzung der Abbildungen im Laufe der Zeit zu erfahren. Nicht alles was schon immer genutzt wurde, macht auch Sinn weiter genutzt zu werden. Wir haben mit R und `{ggplot}` eine Möglichkeit Abbildungen von Daten sehr viel besser zu erstellen als noch vor ein paar Jahrzehnten möglich war.

Grundsätzlich glauben wir dabei keiner Auswertung eines mathematischen Algorithmus, wenn wir nicht die Bestätigung in einer Abbildung sehen. Wenn wir also einen signifikanten Unterschied aus einem Algorithmus wiedergegeben bekommen, dann müssen wir auch den Unterschied in einer Abbildung sehen können. Eine statistische Analyse und deren Visualisierung gehen Hand in Hand. Daher ist die Visualisierung die Grundlage für ein fundiertes, wissenschaftliches Arbeiten. In diesem Kapitel stelle ich dir verschiedene Abbildungen vor, die uns helfen werden zu Verstehen ob es einen Zusammenhang zwischen $y$ und $x$ gibt. Wir haben ein $y$ vorliegen, was wir auf die y-Achse eines Graphen legen und daneben dann mehrere Variablen bzw. Spalten die wir $x$ nennen. Eine der Variablen legen wir auf die x-Achse des Graphen. Nach den anderen $x$ färben wir die Abbildung ein. Wir nennen dabei eine Abbildung auch häufig Plot. Das ist der englische Begriff und hat nichts in unserem Kontext mit einer Fläche oder einer Handlung in einem Film zu zu tun. Im den beiden folgenden Abbildungen siehst du einmal die beiden häufigsten wissenschaftlichen Fragestellungen in der explorativen Datenanalyse.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-eda-overview-01
#| fig-align: center
#| fig-height: 5.5
#| fig-width: 12
#| fig-cap: "Visualisierung der beiden häufigsten wissenschaftlichen Fragestellungen in der explorativen Datenanalyse. **(A)** *Die Frage nach dem Unterschied.* Unterschieden sich die Gruppen auf der x-Achse gegeben den Werten auf der y-Achse? Um den Unterschied darzustellen können Barplots oder Boxplots verwendet werden. **(B)** *Die Frage nach dem Zusammenhang.* Wie verändern sich die Werte der y-Achse, wenn sich die Werte auf der x-Achse ändern? Um den Zusammenhang zu zeigen kann ein Scatterplot verwendet werden. Die Gerade durch die Punkte kann durch eine (nicht) lineare Regression bestimmt werden. *[Zum Vergrößern anklicken]*"

source("images/R/eda-ggplot-01.R")

p2 + p1 + 
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))

```

In diesem Kapitel wollen wir durch die bedeutendsten Abbildungen in der explorativen Datenanalyse durchgehen. Ich habe die Abbildungen etwas nach Kontext sortiert und geschaut, dass die Abbildungen zum Gruppennterschied oder Zusammenhang zweier Variablen als erstes besprochen werden.

-   [Barplot](#sec-eda-barplot) für 5 und mehr Beobachtungen (pro Gruppe). Der Barplot oder das *Balkendiagramm* bzw. *Säulendiagramm* stellt den Mittelwert und die Standardabweichung da.
-   [Boxplot](#sec-eda-boxplot) für 5 bis 20 Beobachtungen (pro Gruppe). Ebenso wie bei einem Histogramm, geht es bei einem Boxplot auch um die Verteilung der einer Variable. Wir können in einem Boxplot auch erkennen, ob sogenannte auffällige Werte oder Ausreißer vorliegen.
-   [Scatterplot](#sec-eda-scatter) für zwei kontinuierliche Variablen. Auch *xy-Plot* genannt. Die Abbildung, die dir bekannt sein müsste. Wir zeichnen hier eine Grade durch eine Punktewolke.
-   [Mosaicplot](#sec-eda-mosaic) für zwei diskrete Variablen. Eine etwas seltene Abbildung, wenn wir Variablen abbilden wollen, die diskret sind bzw. aus Kategorien bestehen.
-   [Histogramm](#sec-eda-histogramm) für mehr als 20 Beobachtungen (pro Gruppe). Wir nutzen ein Histogramm um die Verteilung einer Variable zu visualisieren.
-   [Dotplot](#sec-eda-dotplot) für 3 bis 5 Beobachtungen (pro Gruppe). Hier geht es weniger um die Verteilung der Variable, sondern darum die wenigen Beobachtungen zu visualisieren.
-   [Violinplot](#sec-eda-violinplot) für die Kombination von einem Densityplot und einem Boxplot. Dann können wir hier noch den Dotplot ergänzen und haben eine sehr informative Übersichtsabbildung.

Beginnen wir also mit dem Teil, der in der Statistik der mir immer am meisten Spaß macht. Oder aber um es in den Worten von John Tukey, den Begründer der explorativen Datenanalyse zu sagen:

> *"This is my favorite part about analytics: Taking boring flat data and bringing it to life through visualization." --- John Tukey*

Wir immer geht natürlich hier auch noch viel mehr am Abbildungen. Du musst nicht alles in `ggplot` machen und darüber hinaus gibt es dann auch noch einiges an anderen R Paketen. In dem folgenden Kasten habe ich dir mal ein paar Quellen rausgesucht, wo du einmal gucken kannst, wenn du noch mehr Inspiration benötigst. Ich nutze die Seiten auch als Inspiration, den meisten weiß man gar nicht was alles geht, bis man die Visualisierung gesehen hat.

::: callout-tip
## Weitere Möglichkeiten der Visualisierung

Im Folgenden einmal eine Auswahl an weiteren Möglichkeiten sich Abbildungen in R zu visualisieren. Teilweise ist es dann auch eine Sammlung an Informationen für mich, damit ich eine Idee habe, was noch so alles geht. Manchmal braucht man ja auch noch eine zusätzlich Inspiration.

-   [Data visualization with ggplot2 :: Cheat Sheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html) -- als Überblick über alles was eigentlich in `ggplot` möglich ist. Du kriegst dann nochmal ein Überblick über die `geom`e, die es gibt und wie die einzelnen Funktionen und Möglichkeiten miteinander interagieren. Du kannst dir das Cheat Sheet auch auf Deutsch runterladen.\
-   [R Charts by R Coder](https://r-charts.com/) -- ein großer Überblick über alle möglichen Abbildungen sortiert nach verschiedenen Kategorien. Hier würde ich auf jeden Fall mal drüber schauen, dann kriegst du nochmal eine Idee was neben `ggplot` noch so alles geht. Ich finde die Seite immer sehr inspirierend.
-   [ALL YOUR FIGURE ARE BELONG TO US](https://yutannihilation.github.io/allYourFigureAreBelongToUs/) ist eine weitere tolle Übersicht an möglichen Abbildungen in `{ggplot}` Universum. Die Übersicht zeigt nochmal verschiedene R Pakte mit den entsprechenden möglichen Abbildungen.
-   [sjPlot - Data Visualization for Statistics in Social Science](https://strengejacke.github.io/sjPlot/) -- auch hier geitbes dann die Möglichkeit nochmal etwas anders auf die Visualisierung zu schauen. Denn hier haben wir dann die Möglichkeiten der Sozialwissenschaften mehr abgedeckt. Das mag insbesondere im Bereich von Fragebögen und Marketing von Interesse sein.
-   Als spannende zusätzlichen Ressourcen seinen das [R Paket `{cowplot}`](https://wilkelab.org/cowplot/index.html) sowie das [R Paket `{ggpubr}`](https://rpkgs.datanovia.com/ggpubr/index.html) genannt. Besonders das Paket `cowplot` liefert noch schöne Formatierungsmöglichkeiten wobei dann `ggpubr` statistische Test mit der Visualisierung verbindet.
-   [{plotly} R Open Source Graphing Library](https://plotly.com/r/) sowie im besonderen dann die Seite [Getting Started with {plotly} in {ggplot2}](https://plotly.com/ggplot2/getting-started/) liefert dann interaktive Abbildungen, wo du dann direkt hereinzoomen kannst. Das ist bei sehr großen Abbildungen immer sehr praktisch. Auch kannst du die Werte einer einzelnen Beobachtung gleich im Plot ablesen.
-   [How to create BBC style graphics](https://bbc.github.io/rcookbook/) -- einmal als ein Beispiel für die Anwendung von `ggplot` in der Wirtschaft und Data Science. Auch hier sieht man schön die Ideen die möglich sind.
-   [Visualizing Distributions with Raincloud Plots (and How to Create Them with ggplot2)](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) -- manchmal ist dann der Barplot oder Dynamiteplot dann doch irgendwie nicht das richtige Werkzeug um die Daten zu zeigen. Daher hier nochmal der Blogpost mit einer Diskussion was neben dem Säulendiagramm noch so alles gehen könnte.
-   [ggplot Wizardry Hands-On](https://z3tt.github.io/OutlierConf2021/) zeigt nochmal sher schön was alles in `{ggplot}` geht, wenn die entsprechenden zusätzlichen Pakete geladen werden. Ich schaue auch hier immer mal wieder rein, wenn ich eine Abbildung besonders schön machen möchte. Hier liegt dann der Fokus auf dem [R Paket`{gghalves}`](https://erocoar.github.io/gghalves/) sowie dem [R Paket `{ggdist}`](https://mjskay.github.io/ggdist/).
-   Die Publikation [Error bars in experimental biology](https://rupress.org/jcb/article/177/1/7/34602/Error-bars-in-experimental-biology) von @cumming2007error liefert nochmal einen Überblick über Fehlerbalken und welche Fehlerbalken man den nun nutzen sollte.
:::

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| warning: false
#| message: false

pacman::p_load(tidyverse, magrittr, readxl, ggmosaic, 
               janitor, see, patchwork, latex2exp, ggbeeswarm,
               ggdist, gghalves, ggbreak, duke, wesanderson, 
               conflicted)
conflicts_prefer(dplyr::summarise)
conflicts_prefer(dplyr::filter)
conflicts_prefer(latex2exp::TeX)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

Wir immer bringe ich hier ein paar Datensätze mit damit wir dann verstehen, was eigentlich in den folgenden Visualisierungen in `{ggplot}` und den entsprechenden zusätzlichen R Paketen passiert. Ich zeige hier an den Daten nur die Anwendung in R. Deshalb fehlen dann hier auch die Mittelwerte und andere deskriptive Maßzahlen. Schauen wir jetzt also mal in unsere Beispieldaten für die einfaktorielle und zweifaktorielle Datenanalyse rein. Was heißt das nochmal? Wenn wir einen einfaktoriellen Datensatz vorliegen haben, dann haben wir nur einen Behandlunsgfaktor. Bei einem zweifaktorielle Datenanalyse betrachten wir eben dann zwei Behandlungen. Es wird dann aber gleich in den Beispielen klarer.

#### Einfaktorieller Datensatz {.unnumbered .unlisted}

Beginnen wir mit einem einfaktoriellen Datensatz. Wir haben hier als Messwert die Sprungweite von Flöhen in \[cm\] vorliegen. Wissen wollen wir, ob sich die Sprungweite für drei verschiedene Floharten unterscheidet. Damit ist dann in unserem Modell der Faktor `animal` und die Sprungweite `jump_length` als Messwert. Ich lade einmal die Daten in das Objekt `fac1_tbl`.

```{r}
#| message: false

fac1_tbl <- read_xlsx("data/flea_dog_cat_fox.xlsx") |>
  mutate(animal = as_factor(animal))
```

Dann schauen wir uns die Daten einmal in der folgenden Tabelle als Auszug einmal an. Wichtig ist hier nochmal, dass du eben einen Faktor `animal` mit drei Leveln also Gruppen vorliegen hast. Wir wollen jetzt die drei Tierarten hinsichtlich ihrer Sprungweite in \[cm\] miteinander vergleichen.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-1fac-table
#| tbl-cap: "Tabelle der Sprungweiten in [cm] als Messwert $y$ von Hunde-, Katzen- und Fuchsflöhen. Der Datensatz ist einfaktoriell, da wir nur einen Faktor vorliegen haben."

fac1_raw_tbl <- read_xlsx("data/flea_dog_cat_fox.xlsx") |>
  select(animal, jump_length) 

rbind(head(fac1_raw_tbl, n = 3),
      rep("...", times = ncol(fac1_raw_tbl)),
      tail(fac1_raw_tbl, n = 3)) |> 
  kable(align = "c", "pipe")
```

#### Zweifaktorieller Datensatz {.unnumbered .unlisted}

Neben dem einfaktoriellen Datensatz wollen wir uns noch den häufigeren Fall mit zwei Faktoren anschauen. Wir haben also nicht nur die drei Floharten vorliegen und wollen wissen ob diese unterschiedlich weit springen. Darüber hinaus haben wir noch einen zweiten Faktor gewählt. Wir haben die Sprungweiten der Hunde-, Katzen- und Fuchsflöhe nämlich an zwei Messorten, der Stadt und dem Dorf, gemessen. Dadurch haben wir jetzt den Faktor `animal` und den Faktor `site` vorliegen. Wiederum fragen wir uns, ob sich die Sprungweite in \[cm\] der drei Floharten in den beiden Messorten unterscheidet. Im Folgenden lade ich einmal den Datensatz in das Objekt `fac2_tbl`.

```{r}
#| message: false

fac2_tbl <- read_xlsx("data/flea_dog_cat_length_weight.xlsx") |> 
  select(animal, sex, weight, jump_length) |> 
  mutate(animal = as_factor(animal),
         sex = as_factor(sex))
```

Betrachten wir als erstes einen Auszug aus der Datentabelle. Wir haben hier als Messwert oder Outcome $y$ die Sprungweite `jump_length` vorliegen. Als ersten Faktor die Variable `animal` und als zweiten Faktor die Variable `sex` festgelegt.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-2fac-table
#| tbl-cap: "Tabelle der Sprungweiten in [cm] als Messwert $y$ von Hunde-, Katzen- und Fuchsflöhen an zwei verschiedenen Messorten Stadt und Dorf. Der Datensatz ist zweifaktoriell, da wir einen Behandlungsfaktor mit `animal` und einen zweiten Faktor mit `site` vorliegen haben."

fac2_raw_tbl <- read_xlsx("data/flea_dog_cat_length_weight.xlsx") |> 
  select(animal, sex, weight, jump_length)

rbind(head(fac2_raw_tbl, n = 3),
      rep("...", times = ncol(fac2_raw_tbl)),
      tail(fac2_raw_tbl, n = 3)) |> 
  kable(align = "c", "pipe")
```

#### Der Gummibärchendatensatz {.unnumbered .unlisted}

Wir brauchen dann ab und an auch nochmal mehr Datenpunkte, daher nehmen wir auch einmal den Gummibärchendatensatz und schauen uns dort die Variablen `gender`, `height` und `age` einmal genauer an. Wie immer nutzen wir die Funktion `select()` um die Spalten zu selektieren. Abschließend verwandeln wir das Geschlecht `gender` noch in einen Faktor und entfernen alle fehlenden Werte mit `na.omit()`.

```{r}
#| message: false

gummi_tbl <- read_excel("data/gummibears.xlsx")  |>
  select(gender, height, age) |> 
  mutate(gender = factor(gender, labels = c("männlich", "weiblich"))) |> 
  na.omit()

```

Und hier dann einmal der ausgewählte Datensatz der Gummibärchendaten. Ich zeige hier nur die ersten sieben Zeilen als Ausschnitt, die eigentlichen Daten sind mit $n = `r nrow(gummi_tbl)`$ Beobachtungen viel größer.

```{r}
#| echo: false
#| label: tbl-gummi-ggplot
#| tbl-cap: "Tabelle mit dem Auzug der Gummibärchendaten von den ersten sieben Beobachtungen für das Geschlecht, die Körpergröße und dem Alter."

gummi_raw_tbl <- read_excel("data/gummibears.xlsx")  |>
  select(gender, height, age)

rbind(head(gummi_raw_tbl, n = 3),
      rep("...", times = ncol(gummi_raw_tbl)),
      tail(gummi_raw_tbl, n = 3)) |> 
  kable(align = "c", "pipe")
```

## Grundlagen in `{ggplot}`

{{< video https://youtu.be/SGwSVzJ9C-s >}}

Wir nutzen in R das R Paket `{ggplot2}` um unsere Daten zu visualisieren. Die zentrale Idee von `{ggplot2}` ist, dass wir uns eine Abbildung wie ein Sandwich bauen. Zuerst legen wir eine Scheibe Brot hin und legen uns dann Scheibe für Scheibe weitere Schichten übereinander. Oder die Idee eines Bildes, wo wir erst die Leinwand definieren und dann Farbschicht über Farbschicht auftragen. Im Gegensatz zu dem Pipe-Operator `|>` nutzt `{ggplot2}` den Operator `+` um die verschiedenen Funktionen (`geom_`) miteinander zu verbinden. Das Konzept von `{ggplot2}`ist schlecht zu be*schreiben* deshalb habe ich auch noch zwei Videos hierfür gemacht. Um den Prozess von `{ggplot2}` zu visualisieren - aber wie immer, nutze was du brauchst.

Erstellen wir also erstmal unseren erste Visualisierung in dem R Paket `{ggplot2}`. Im Folgenden spreche ich dann aber immer von `{ggplot}`. Die Funktion `ggplot()` ist die zentrale Funktion, die die Leinwand erschafft auf der wir dann verschiedene Schichten aufbringen werden. Diese Schichten heißen `geom`. Es gibt nicht nur ein `geom` sondern mehrere. Zum Beispiel das `geom_boxplot()` für die Erstellung von Boxplots, das `geom_histogram()` für die Erstellung von Histogrammen. [Die Auswahl ist riesig](https://ggplot2.tidyverse.org/reference/index.html). Die einzelnen Schichten werden dann über den Operator `+` miteinander verbunden. Soviel erstmal zur Trockenübung. Schauen wir uns das ganze einmal an einem Beispiel an. Dafür müssen wir dann erstmal einen Datensatz laden, damit wir auch etwas zum abbilden haben.

{{< video https://youtu.be/SRRQQO3DXtc >}}

Wie immer empfehle ich dir dann auch das entsprechende Video auf YouTube anzuschauen. In Textform ist eine echte Herausforderung zu erklären wie man Plots baut. Der folgende R Code erstellt die Leinwand in der @fig-ggplot-1 für die folgende, zusätzliches Schichten (`geom`). Wir haben also immer erst eine leere Leinwand auf der wir dann zusätzlich `geom`e plotten. Wir bauen uns sozusagen ein Sandwich.

```{r}
#| echo: true
#| eval: false
#| message: false

ggplot(data = fac1_tbl, 
       aes(x = animal , y = jump_length)) +
  theme_minimal()
```

Wir schauen uns einmal den Code im Detail an.

-   `ggplot` ruft die Funktion auf. Die Funktion ist dafür da den Plot zu zeichnen.
-   `data = flea_dog_cat_tbl` benennt den Datensatz aus dem der Plot gebaut werden soll.
-   `aes()`ist die Abkürzung für *aesthetics* und beschreibt, was auf die $x$-Achse soll, was auf die $y$-Achse soll sowie ob es noch andere Faktoren in den Daten gibt. Wir können nämlich noch nach anderen Spalten die Abbildung einfärben oder anderweitig ändern.
    -   `x` braucht den Spaltennamen für die Variable auf der $x$-Achse.
    -   `y` braucht den Spaltennamen für die Variable auf der $y$-Achse.
-   `+ theme_minimal()` setzt das Canvas oder die Leinwand auf schwarz/weiß. Sonst wäre die Leinwand flächig grau.

Mit *Faktoren* meine ich hier andere Gruppenvariablen. Variablen sind ein anderes Wort für Spalten. Also Variablen die wir mit `as_factor` erschaffen haben und die uns noch mehr über unsere Daten dann verraten können. Hier ist es dann etwas abstrakt, aber es wird dann später in der Anwendung klarer.

```{r}
#| echo: false
#| message: false
#| label: fig-ggplot-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Leere ggplot() Leinwand mit den Spalten `animal` und `jump_length` aus dem Datensatz `flea_dog_cat_tbl`. *[Zum Vergrößern anklicken]*"

ggplot(data = fac1_tbl, 
       aes(x = animal , y = jump_length)) +
  theme_minimal()
```

Am Ende sehen wir, dass wir nichts sehen. In der @fig-ggplot-1 ist nichts dargestellt. Der Grund ist, dass wir noch kein `geom` hinzugefügt haben. Das `geom` beschreibt nun wie die Zahlen in der Datentabelle `flea_dog_cat_tbl` visualisiert werden sollen. Wir habe eine sehr große Auswahl an `geom`en, deshalb gibt es gleich einmal eine Auswahl an Abbildungen.

::: {.callout-tip appearance="minimal"}
Auf der Seite [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) gibt es noch eine Vielzahl an weiteren tollen Möglichkeiten zu entdecken! Einfach durch die Galerie mit über 120 Erweiterungen streifen und sich inspirieren lassen!
:::

## Die häufigsten Abbildungen

Im Folgenden gehen wir dann einmal die wichtigsten Abbildungen einmal durch. Viele der Abbildungen kennst du vielleicht schon und dann musst du hier nur noch schauen, wie die Abbildungen in `ggplot` zu realisieren sind. Ansonsten gilt wie immer, es ist nur ein kleiner Ausschnitt, du findest auf der [Hilfeseite von `ggplot`](https://ggplot2.tidyverse.org/index.html) eine sehr viel größere Übersicht.

### Barplot {#sec-eda-barplot}

{{< video https://youtu.be/2ivNhsPJKY8 >}}

{{< include eda-ggplot/eda-ggplot-barplot.qmd >}}

### Boxplot {#sec-eda-boxplot}

{{< video https://youtu.be/qgKBaBuM1n0 >}}

{{< include eda-ggplot/eda-ggplot-boxplot.qmd >}}

### Scatterplot {#sec-eda-scatter}

{{< video https://youtu.be/eGtLyR2vxAM >}}

{{< include eda-ggplot/eda-ggplot-scatterplot.qmd >}}

### Histogramm {#sec-eda-histogramm}

{{< video https://youtu.be/lENH6vv6ir8 >}}

{{< include eda-ggplot/eda-ggplot-histogram.qmd >}}

### Mosaicplot {#sec-eda-mosaic}

{{< include eda-ggplot/eda-ggplot-mosaic.qmd >}}

### Dotplot, Beeswarm und Raincloud Plot {#sec-eda-dotplot}

{{< include eda-ggplot/eda-ggplot-dotplot.qmd >}}

### Violinplot {#sec-eda-violinplot}

{{< include eda-ggplot/eda-ggplot-violinplot.qmd >}}

## Weitere Optionen in `{ggplot}`

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten! Dort gibt es eine große Auswahl an Erweiterungen, die dich inspierieren mögen.
:::

Du findest dann auch weitere Optionen in `{ggplot}` im [Kapitel zum `{ggplot}` Cookbook](#sec-ggplot-cookbook). Ich habe einen Teil der Optionen dann in das Programmieren ausgelagert, da wir dann dort mehr machen können und dieses Kapitel nicht zu voll wird. Es ist auch so, dass du in allen anderen Kapiteln zur Anwendung und statistischen Analyse dann entsprechende Visualisierungen in `{ggplot}` findest. Du musst dann immer schauen, was zu deiner wissenschaftlichen Fragestellung passt.

## Referenzen {.unnumbered}
