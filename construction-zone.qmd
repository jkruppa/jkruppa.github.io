```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, glue, ggtext,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
theme_marginal <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (seit 07.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zum Beginn des WiSe 2025/26 eine neue Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll.
:::

::: {layout="[15,85]" layout-valign="top"}
![](images/personal_opinion.png){fig-align="center" width="100%"}

> *"Aktuell wird gerade an den Marginal effects models gebaut... das wird jedenfalls so seine Zeit noch brauchen, bis ich hier einen Strang und Grund drin habe." --- Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.*
:::

## Marginal effects models

!["Should I cut the red wire or the blue one!?" "WAIT! We're going to watch ALL the action movies from the '80s and '90s and then calculate the average!" Quelle: wumo.com](images/average.jpg){#fig-pretest-barplot-02 fig-align="center" width="100%"}

> *"Statistics is all about lines, and lines have slopes, or derivatives. These slopes represent the marginal changes in an outcome. As you move an independent/explanatory variable, what happens to the dependent/outcome variable?" --- @heiss2022*

## Allgemeiner Hintergrund

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-intro-01

a_line <- function(x) (2 * x) - 1

slope_annotations <- tibble(x = c(-0.25, 1.2, 2.4)) |> 
  mutate(y = a_line(x)) |> 
  mutate(nice_y = y + 1) |> 
  mutate(nice_label = glue("x: {x}; y: {y}<br>",
                           "Steigung (dy/dx): **{2}**"))

p1 <- ggplot() +
  theme_marginal() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_line, linewidth = 1, color = cb_pal[2]) +
  geom_richtext(aes(x = 1, y = 4.25, label = "f(x) = 2x - 1<br>f'(x) = 2")) +
  scale_x_continuous(breaks = -2:5, limits = c(-1, 3)) +
  scale_y_continuous(breaks = -3:9) +
  labs(x = "x", y = "y") 

p2 <- ggplot() +
  theme_marginal() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_line, linewidth = 1, color = cb_pal[2]) +
  geom_point(data = slope_annotations, aes(x = x, y = y)) +
  geom_richtext(data = slope_annotations, 
                aes(x = x, y = y, label = nice_label),
                nudge_y = 0.55) +
  scale_x_continuous(breaks = -2:5, limits = c(-1, 3)) +
  scale_y_continuous(breaks = -3:9) +
  labs(x = "x", y = "y") 

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-intro-04

u_cookies <- function(x) (-0.5 * x^2) + (5 * x)
u_slope <- function(x) -x + 5

find_intercept <- function(x1, y1, slope) {
  intercept <- slope * (-x1) + y1
  return(intercept)
}

slope_annotations <- tibble(x = c(1, 4, 10)) |> 
  mutate(y = u_cookies(x),
         slope = u_slope(x),
         intercept = find_intercept(x, y, slope),
         nice_label = glue("x: {x}; y: {y}<br>",
                           "Steigung (dy/dx): **{slope}**"))


p1 <- ggplot() +
  theme_marginal() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = u_cookies, linewidth = 1, color = cb_pal[3],
                xlim = c(0, 12)) +
  geom_richtext(aes(x = 10, y = 12, label = "f(x) = -0.5x² + 5x<br>f'(x) = -x + 5")) +
  scale_x_continuous(breaks = seq(0, 12, 2), limits = c(-1.5, 12.5)) +
  coord_cartesian(ylim = c(-10, 15))

p2 <- ggplot() +
  theme_marginal() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = u_cookies, linewidth = 1, color = cb_pal[3],
                xlim = c(0, 12)) +
  scale_x_continuous(breaks = seq(0, 12, 2), limits = c(-1.5, 12.5)) +
  geom_abline(data = slope_annotations,
              aes(slope = slope, intercept = intercept),
              linewidth = 0.5, linetype = "21", color = cb_pal[4]) +
  geom_point(data = slope_annotations, aes(x = x, y = y),
             size = 3) +
  geom_richtext(data = slope_annotations, aes(x = x, y = y, label = nice_label),
                nudge_y = 2) +
  coord_cartesian(ylim = c(-10, 15))

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

Text

![foo. Übersetzt nach @heiss2022](images/marginal/slider-switch-annotated-trans.png){#fig-utest-intro-01 fig-align="center" width="100%"}

Text

![foo. Übersetzt nach @heiss2022](images/marginal/mixer-board-annotated-trans.png){#fig-utest-intro-02 fig-align="center" width="100%"}

Marginal effect

:   der statistische Effekt für kontinuierliche erklärende Variablen; die partielle Ableitung einer Variablen in einem Regressionsmodell; der Effekt eines einzelnen Schiebereglers.

Conditional effect oder group contrast

:   der statistische Effekt für kategoriale erklärende Variablen; der Unterschied in den Mittelwerten, wenn eine Bedingung eingeschaltet ist und wenn sie ausgeschaltet ist; der Effekt eines einzelnen Schalters.

#### Unterschied zwischen `{marginaleffects}` und `{emmeans}`

Das [R Paket `{marginaleffects}`](https://marginaleffects.com/) und das R Paket [R Paket `{emmeans}`](https://cran.r-project.org/web/packages/emmeans/vignettes/basics.html#contents)

emmeans erstellt Durchschnittswerte und fügt sie dann ein; marginaleffects fügt alle Werte ein und erstellt dann Durchschnittswerte:

[Is least squares means (lsmeans) statistical nonsense?](https://cran.r-project.org/web/packages/emmeans/vignettes/basics.html#contents:~:text=found%20here%20and-,here,-.)

> *"To start off with, we should emphasize that the underpinnings of estimated marginal means – and much of what the emmeans package offers – relate more to experimental data than to observational data. In observational data, we sample from some population, and the goal of statistical analysis is to characterize that population in some way. In contrast, with experimental data, the experimenter controls the environment under which test runs are conducted, and in which responses are observed and recorded. Thus with experimentation, the population is an abstract entity consisting of potential outcomes of test runs made under conditions we enforce, rather than a physical entity that we observe without changing it." --- [R Paket `{emmeans}`](https://cran.r-project.org/web/packages/emmeans/vignettes/basics.html#contents)*

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,
               conflicted)
conflicts_prefer(dplyr::mutate)
conflicts_prefer(dplyr::summarize)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
## 
nice_number <- label_number(style_negative = "minus", accuracy = 0.01)
nice_p <- label_pvalue(prefix = c("p < ", "p = ", "p > "))
find_intercept <- function(x1, y1, slope) {
  intercept <- slope * (-x1) + y1
  return(intercept)
}
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

```{r}
flea_model_tbl <- read_excel("data/fleas_model_data.xlsx") |> 
  mutate(feeding = as_factor(feeding),
         stage = as_factor(stage),
         bonitur = as.numeric(bonitur),
         infected = factor(infected, labels = c("healthy", "infected"))) |> 
  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)
```

## Marginal effects models

::: callout-note
## Wie zeichne ich Modelle ein?

`geom_function()`

`geom_line(aes(y = predict(model_fit)))`

`geom_smooth()`

[Add regression line equation and R\^2 on graph](https://stackoverflow.com/questions/7549694/add-regression-line-equation-and-r2-on-graph)

[Fitted-Model-Based Annotations](https://cran.r-project.org/web/packages/ggpmisc/vignettes/model-based-annotations.html)
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-2

p1 <- ggplot(flea_model_tbl, aes(x = hatched, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x, linewidth = 1, 
              color = cb_pal[2], se = FALSE) +
  geom_richtext(aes(x = 625, y = 113, 
                    label = "f(x) = 52.07 + 1.61x<br>f'(x) = 1.61")) +
  labs(x = "Schlupfzeit in [h]", y = "Sprungweite in [cm]",
       title = "Linearer Zusammenhang") 

p2 <- ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1, 
              color = cb_pal[3], se = FALSE) +
  geom_richtext(aes(x = 15, y = 112, 
                    label = "f(x) = 47.10 + 2.62x - 0.04x²<br>f'(x) = 2.62 - 0.08x")) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") 

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

::: panel-tabset
## Linearer Zusammenhang ($y \sim x$)

```{r}
model_ln <- lm(jump_length ~ weight,
               data = flea_model_tbl)
tidy(model_ln)
```

$$
\begin{aligned}
\operatorname{E}[y \mid x] &= \beta_0 + \beta_1 x \\[4pt]
\frac{\partial \operatorname{E}[y \mid x]}{\partial x} &= \beta_1
\end{aligned}
$$

$$
\begin{aligned}
\operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}] &= 52.10 + 1.61 \times \text{Gewicht} \\[6pt]
\frac{\partial \operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}]}{\partial\ \text{Gewicht}} &= 1.61
\end{aligned}
$$

## Quadratischer Zusammenhang ($y \sim x + x^2$)

[R Paket `{polypoly}`](https://cran.r-project.org/web/packages/polypoly/vignettes/overview.html)

[Polynomial Regression - An example](https://www.geo.fu-berlin.de/en/v/soga-r/Basics-of-statistics/Linear-Regression/Polynomial-Regression/Polynomial-Regression---An-example/index.html)

[Fitting Polynomial Regression in R](https://datascienceplus.com/fitting-polynomial-regression-r/)

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

$$
\begin{aligned}
\operatorname{E}[y \mid x] &= \beta_0 + \beta_1 x + \beta_2 x^2 \\[4pt]
\frac{\partial \operatorname{E}[y \mid x]}{\partial x} &= \beta_1 + 2 \beta_2 x
\end{aligned}
$$

$$
\begin{aligned}
\operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}] &= 47.10 + (2.62 \times \text{Gewicht}) + (−0.04 \times \text{Gewicht}^2) \\[6pt]
\frac{\partial \operatorname{E}[\text{Sprungweite} \mid \text{Gewicht}]}{\partial\ \text{Gewicht}} &= 2.62 + (2\times −0.04 \times \text{Gewicht})
\end{aligned}
$$
:::

```{r}
jump_weight_slope <- function(x) 2.62 + (2 *-0.04 * x)
jump_weight_slope(c(5, 10, 15))
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. . *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-3

tangents <- model_sq |> 
  augment(newdata = tibble(weight = c(5, 15, 25))) |> 
  mutate(slope = jump_weight_slope(weight),
         intercept = find_intercept(weight, .fitted, slope)) |> 
  mutate(nice_label = glue("Gewicht: {weight}<br>",
                           "Fitted Gewicht: {nice_number(.fitted)}<br>",
                           "Steigung: **{nice_number(slope)}**"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_abline(data = tangents, aes(slope = slope, intercept = intercept), 
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  geom_point(data = tangents, aes(x = weight, y = .fitted), 
             size = 4, shape = 18, color = cb_pal[9]) +
  geom_richtext(data = tangents,
                aes(x = weight, y = .fitted, label = nice_label), nudge_y = -7) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]") 

```

::: panel-tabset
## `{marginaleffects}`

```{r}
#| message: false
#| warning: false
model_sq |> 
  slopes(newdata = datagrid(weight = c(5, 15, 25)))
```

## `{emmeans}`

```{r}
#| message: false
#| warning: false
model_sq |> 
  emtrends(~ weight, var = "weight",
           at = list(weight = c(5, 15, 25))) |> 
  test()
```
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. . *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-4

plot_slopes(model_sq, 
            variables = "weight", 
            condition = "weight") +
  labs(x = "Civil liberties", y = "Marginal effect of civil liberties on public sector corruption",
       subtitle = "Created automatically with marginaleffects::plot_slopes()") +
  theme_marginal()
```

## Philosophien zur Mittelwertbildung

### Average marginal effects (AME)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-ame-trans.png){#fig-utest-intro-03 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-5

tangents <- model_sq |> 
  augment(newdata = tibble(weight = c(1:27))) |> 
  mutate(slope = jump_weight_slope(weight),
         intercept = find_intercept(weight, .fitted, slope)) |> 
  mutate(nice_label = glue("Gewicht: {weight}<br>",
                           "Fitted Gewicht: {nice_number(.fitted)}<br>",
                           "Steigung: **{nice_number(slope)}**"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  geom_abline(data = tangents, aes(slope = slope, intercept = intercept), 
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_point(data = tangents, aes(x = weight, y = .fitted), 
             size = 4, shape = 18, color = cb_pal[9]) +
  geom_richtext(aes(x = 15, y = 88, label = "Gemittelte Steigung: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Average marginal effects (AME)") 
```

```{r}
mfx_sq <- slopes(model_sq)
head(mfx_sq)
```

```{r}
mfx_sq |> 
  group_by(term) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
avg_slopes(model_sq)
```

### Marginal effects at the mean (MEM)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mem-trans.png){#fig-utest-intro-06 fig-align="center" width="100%"}

```{r}
model_sq <- lm(jump_length ~ weight + I(weight^2),
               data = flea_model_tbl)
tidy(model_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-6

ggplot(flea_model_tbl, aes(x = weight, y = jump_length)) +
  theme_marginal() +
  geom_point() +
  stat_smooth(method = "lm", formula = y ~ x + I(x^2), linewidth = 1.25, 
              se = FALSE, color = cb_pal[3], fullrange = TRUE) +
  geom_abline(intercept = find_intercept(9.95375, 69.24257, 1.83), slope = 1.83,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  annotate("point", x = 9.95375, y = 69.24, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 10, y = 75, label = "Steigung am Mittelwert: 1.83"),
                site = 20) +
  scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Marginal effects at the mean (MEM)") 
```

```{r}
avg_jump_weight <- mean(flea_model_tbl$weight)
avg_jump_weight
```

```{r}
jump_weight_fitted <- model_sq |> 
  augment(newdata = tibble(weight = c(avg_jump_weight, avg_jump_weight + 0.001)))
jump_weight_fitted
```

```{r}
model_sq |> 
  emtrends(~ weight, var = "weight")
```

```{r}
model_sq |> 
  avg_slopes(newdata = "mean")
```

### Gruppierte marginale Effekte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-game-trans.png){#fig-utest-intro-05 fig-align="center" width="100%"}

Hier ist die Anordugn wichtig. Erst kommt die gruppierende Variable, dann der Rest.

```{r}
model_grp_sq <- lm(jump_length ~ stage * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-7

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

::: panel-tabset
## Schritt-für-Schritt

```{r}
mfx_grp_sq <- model_grp_sq |> 
  slopes(variables = "weight")
head(mfx_grp_sq)
```

```{r}
mfx_grp_sq |> 
  group_by(stage) |> 
  summarize(stage_ame = mean(estimate))
```

## `slopes()`

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         by = "stage")
```
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-8

weight_sum <- flea_model_tbl |> 
  group_by(stage) |> 
  summarise(mean(weight))

pred <- predict(model_grp_sq, newdata = tibble(weight = 14.05, stage = "adult"))

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = stage)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_abline(intercept = find_intercept(14.05, 75.6691, 0.438), slope = 0.438,
              linewidth = 0.5, color = cb_pal[8], linetype = "21") +
  geom_abline(intercept = find_intercept(5.85, 58.59134, 0.807), slope = 0.807,
              linewidth = 0.5, color = cb_pal[7], linetype = "21") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25,
            fullrange = TRUE) +
  annotate("point", x = 14.05, y = 75.6691, size = 4, shape = 18, 
           color = cb_pal[9]) +
  annotate("point", x = 5.85, y = 58.59134, size = 4, shape = 18, 
           color = cb_pal[9]) +
  geom_richtext(aes(x = 14.05, y = 81, label = "Steigung adult: 0.44"),
                site = 20, color = "black") +
  geom_richtext(aes(x = 5.85, y = 64.5, label = "Steigung juvenile: 0.81"),
                site = 20, color = "black") +
  scale_color_okabeito()
```

### Repräsentative Werte

![foo. Modifiziert nach @heiss2022](images/marginal/flow-mer-trans.png){#fig-utest-intro-07 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ feeding * weight + I(weight^2),
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 9.5
#| fig-cap: "foo. **(A)** Kombinierte Darstellung in einem Scatterplot **(B)** Aufgeteilte Darstellung für beide Entwicklungsstadien. *[Zum Vergrößern anklicken]*"
#| label: fig-marginal-data-9

ggplot(flea_model_tbl, aes(x = weight, y = jump_length,
                           color = feeding)) +
  theme_marginal() +
  geom_point() +
  labs(x = "Gewicht in [mg]", y = "Sprungweite in [cm]",
       title = "Quadratischer Zusammenhang") +
  geom_line(aes(y = predict(model_grp_sq)), linewidth = 1.25) +
  scale_color_okabeito()
```

```{r}
datagrid(model = model_grp_sq,
         weight = c(5, 10, 15),
         feeding = unique)
```

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5, 10, 15),
                            feeding = unique))
```

```{r}
model_grp_sq |> 
  slopes(variables = "weight",
         newdata = datagrid(weight = c(5, 10, 15),
                            feeding = unique),
         hypothesis = "pairwise")
```

### Kontrafaktische Vergleiche

Kontrafaktische Vergleiche (eng. *counterfactual*)

![foo. Modifiziert nach @heiss2022](images/marginal/flow-counterfactual-trans.png){#fig-utest-intro-04 fig-align="center" width="100%"}

```{r}
model_grp_sq <- lm(jump_length ~ weight*I(weight^2)*feeding + count_leg,
                   data = flea_model_tbl)
tidy(model_grp_sq)
```

```{r}
cfct_data <- datagrid(model = model_grp_sq,
                      weight = c(5, 15),
                      grid_type = "counterfactual")
```

```{r}
nrow(flea_model_tbl)
nrow(cfct_data)
```

```{r}
mfx_cfct <- model_grp_sq |> 
  slopes(datagrid(weight = c(5, 15),
                  grid_type = "counterfactual"),
         variables = "weight")

rbind(head(mfx_cfct), tail(mfx_cfct))
```

```{r}
mfx_cfct |> 
  group_by(weight) |> 
  summarize(avg_slope = mean(estimate))
```

```{r}
model_grp_sq |> 
  avg_slopes(newdata = datagrid(weight = c(5, 20),
                                grid_type = "counterfactual"),
             variables = "weight",
             by = c("weight", "feeding"))
```

## Links

-   [Mixed](https://stats.stackexchange.com/questions/95054/how-to-get-an-overall-p-value-and-effect-size-for-a-categorical-factor-in-a-mi)
-   [Mixed II](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html)
-   [Marginal and conditional effects for GLMMs with {marginaleffects} \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2022/11/29/conditional-marginal-marginaleffects/)
-   [R Paket `{gapminder}`](https://github.com/jennybc/gapminder)
-   [Gapminder](https://www.gapminder.org/data/)
-   [Lists are my secret weapon for reporting stats with knitr - Higher Order Functions](https://tjmahr.github.io/lists-knitr-secret-weapon/)
-   [Visualizing {dplyr}’s mutate(), summarize(), group_by(), and ungroup() with animations \| Andrew Heiss – Andrew Heiss](https://www.andrewheiss.com/blog/2024/04/04/group_by-summarize-ungroup-animations/)

## Referenzen {.unnumbered}
