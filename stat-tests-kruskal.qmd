```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, tidyplots,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
```

# Der Kruskal-Wallis-Test {#sec-kruskal}

*Letzte Änderung am `r format(fs::file_info("stat-tests-kruskal.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"If your experiment needs a statistician, you need a better experiment." --- Ernest Rutherford*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Baustelle (seit 06.2025)

Dieses Kapitel wird überarbeitet. Ziel ist es die Nichtparametrik zum Start des Wintersemesters 2025/26 überarbeitet zu haben. Da ich hier direkt im Kapitel arbeite, kann es sein, dass mal die ein oder andere Funktion nicht funktioniert oder aber Teile im Nichts enden. Wird dann repariert.
:::

## Allgemeiner Hintergrund

[Der U-Test](#sec-utest) für Hintergründe und weitere Informationen zu dem nichtparametrischen Testen bachten.

![*The results of a Kruskal Wallis test comparing restriction levels, during increasing and decreasing periods, by pandemic phase are shown as the title of each graph in (a) and (b): the H and p values are provided along with degrees of freedom for each H value in brackets as is the common practice. The p values for the subsequent post hoc Dunn’s test are shown in (a) and (b) as horizontal lines connecting the phases for which there is a significant difference in restriction level with the corresponding p value threshold shown. Similarly, the results of the one-way ANOVA and Tukey HSD tests are shown in (c) and (d) for mobility drops with the F and p values for the one-way ANOVA indicated in the titles of (c) and (d) and the subsequent Tukey HSD results for significant pairs shown in the corresponding bar graph.* Quelle: @smyth2022fading](images/preface_kruskal.png){#fig-utest-intro fig-align="center" width="100%"}

@smyth2022fading

Wann nutzen wir den Kruskal-Wallis-Test? Wir nutzen den Kruskal-Wallis-Test wenn wir mehrere Verteilungen miteinander vergleichen wollen. Das ist jetzt sehr abstrakt. Konkret, wenn wir mehrere Gruppen haben und ein nicht normalverteiltes $y$. Haben wir ein normalverteiltes $y$ rechnen wir meist eine einfaktorielle ANOVA. Das heißt, der Kruskal-Wallis-Test ist im Prinzip die einfaktorielle ANOVA für nicht-normalverteilte Daten. Die Entscheidung, ob ein $y$ normal verteilt ist oder nicht kann an dem Boxplot der Daten abgeschätzt werden.

Was ist jetzt der Unterschied zwischen einem Kruskal-Wallis-Test und einer einfaktoriellen ANOVA? Die ANOVA vergleicht die Mittelwerte mehrerer Normalverteilungen, also zum Beispiel die Verteilung der Sprungweiten der Hundeflöhe gegen die Verteilung der Sprungweiten der Katzenflöhe sowie gegen die Verteilung der Sprungweiten von Fuchsflöhen. Dazu nutzt die ANOVA die Abweichungsquadrate von den Mittelwerten. Damit nutze die ANOVAB Parameter einer Verteilung und somit ist der ANOVA ein parametrischer Test.

Der Kruskal-Wallis-Test ist die *nicht-parametrische* Variante in dem wir die Zahlen in Ränge umwandeln, also sortieren, und *mit den Rängen* der Zahlen rechnen. Die deskriptiven Maßzahlen wären dann Median, Quantile und Quartile. Das heißt wir vergleichen mit dem Kruskal-Wallis-Test die Mediane mehrer Gruppen miteinander. Wir wollen also wissen, ob sich die Mediane zwischen den Sprungweiten von Hunde-, Katzen- und Fuchsflöhen unterscheiden.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, magrittr, broom, 
               readxl, rstatix, conover.test,
               conflicted)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

In den folgenden Abschnitten brauchen wir dann einen Datensatz. Der Datensatz beschreibt Hunde-, Katzen- und Fuchsflöhe, die springen und deren Sprungweite dann gemessen wurde. Wir haben hier verschiedene Flöhe vorliegen, die nur einmal springen. Wir haben hier die Sprungweite in \[cm\] von Hunde-, Katzen- und Fuchsflöhe für jeweils sieben Flöhe gemessen. Unser Faktor ist hierbei also die Flohart. Entweder ein Hundefloh oder eben ein Katzenfloh oder ein Fuchsfloh. Wir wollen jetzt wissen, ob sich die Floharten hinsichtlich ihrer Sprungweite unterscheiden.

```{r}
#| message: false

fac1_tbl <- read_xlsx("data/flea_dog_cat_fox.xlsx") |>
  select(animal, jump_length) |> 
  mutate(animal = as_factor(animal))

```

In der folgenden Tabelle siehst du dann einmal einen Auszug aus den Daten der Sprungweiten für die drei Floharten. Dabei ist dann die Spalte `animal` unser Faktor über den wir den Gruppenvergleich für die Sprungweiten als Messwert rechnen wollen.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-1fac-table-kruskal
#| tbl-cap: "Tabelle der Sprungweiten in [cm] als Messwert $y$ von Hunde-, Katzen- und Fuchsflöhen. Der Datensatz ist einfaktoriell, da wir nur einen Faktor vorliegen haben."

fac1_raw_tbl <- read_xlsx("data/flea_dog_cat_fox.xlsx") |>
  select(animal, jump_length) 

rbind(head(fac1_raw_tbl, n = 3),
      rep("...", times = ncol(fac1_raw_tbl)),
      tail(fac1_raw_tbl, n = 3)) |> 
  tt(width = 2/3, align = "c", theme = "striped")
```

Dann wollen wir uns auch einmal die Daten visualisieren. Ich nutze dazu dann einmal den Boxplot sowie den Violinplot. Die Daten sehen einigermaßen normalverteilt aus, so dass wir hier auch einen t-Test rechnen könnten. Wie immer geht es hier auch um die Demonstration der Algorithmen, also nutzen wir hier auch diese Daten für den U-Test. Der U-Test funktioniert auch super auf normalverteilten Daten.

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-ggplot-kruskal-jump
#| fig-align: center
#| fig-height: 4
#| fig-width: 8
#| fig-cap: "Darstellung der Sprungweiten in [cm] gruppiert nach Hunde-, Katzen- und Fuchsflöhen. Die graue Raute stellt den entsprechnenden Mittelwert der Sprungweiten dar. **(A)** Einfaktorieller Boxplot. **(B)** Violinplot mit Dotplot. *[Zum Vergrößern anklicken]*"

p1 <- ggplot(data = fac1_tbl, 
       aes(x = animal, y = jump_length, fill = animal)) +
  theme_minimal() +
  geom_boxplot() +
  stat_summary(fun.y = mean, geom = "point", 
               shape=23, size = 3, fill = "gray50") +
  labs(x = "Flohart", y = "Sprungweite in [cm]") +
  theme(legend.position = "none") + 
  scale_fill_okabeito() 


p2 <- ggplot(data = fac1_tbl, 
       aes(x = animal, y = jump_length, fill = animal)) +
  theme_minimal() +
  geom_violindot(dots_size = 7, trim = FALSE) +
  stat_summary(fun.y = mean, geom = "point", 
               shape=23, size = 3, fill = "gray50") +
  labs(x = "Flohart", y = "Sprungweite in [cm]") +
  theme(legend.position = "none") + 
  scale_fill_okabeito() 

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

## Hypothesen

Der Kruskal-Wallis-Test betrachtet die Gruppen und Ränge um einen Unterschied nachzuweisen. Daher haben wir in der Nullhypothese als Gleichheitshypothese.

$H_0:$ *Die Gruppen werden aus Populationen mit identischen Verteilungen entnommen. Typisch ist, dass die Stichprobenpopulationen stochastische Gleichheit aufweisen.*

Die Alternative lautet, dass sich mindestens ein paarweiser Vergleich unterschiedet. Hierbei ist das *mindestens ein Vergleich* wichtig. Es können sich alle Gruppen unterschieden oder eben nur ein Paar. Wenn ein Kruskal-Wallis-Test die $H_0$ ablehnt, also ein signifikantes Ergebnis liefert, dann wissen wir nicht, welche Gruppen sich unterscheiden.

$H_A:$ *Die Gruppen werden aus Populationen mit unterschiedlichen Verteilungen entnommen. Typischerweise weist eine der untersuchten Populationen eine stochastische Dominanz auf.*

Wir schauen uns jetzt einmal den Kruskal-Wallis-Test theoretisch an bevor wir uns mit der Anwendung des Kruskal-Wallis-Test in R beschäftigen.

## Der Kruskal-Wallis-Test

::: panel-tabset
## Theoretisch

Der Kruskal-Wallis-Test berechnet die H Teststatistik auf den Rängend der Daten. Es gibt genau soviele Ränge wie es Beobachtungen im Datensatz gibt. Wir haben $n = 21$ Beobachtungen in unseren Daten zu der Sprungweite in \[cm\] von den Hunde-, Katzen- und Fuchsflöhen. Somit müssen wir auch einundzwanzig Ränge vergeben.

Die @tbl-kruskal-rank zeigt das Vorgehen der Rangvergabe. Wir sortieren als erstes das $y$ aufsteigend. In unserem Fall ist das $y$ die Sprunglänge. Dann vergeben wir die Ränge jweiles zugehörig zu der Position der Sprunglänge und der Tierart. Abschließend addieren wir die Rangsummmen für `cat`, `dog` und `fox` zu den Rangsummen $R_{cat}$, $R_{dog}$ und $R_{fox}$.

| Rank | animal | jump_length  |  Ränge `cat`   |  Ränge `dog`   |   Ränge `fox`   |
|:----:|:------:|:------------:|:--------------:|:--------------:|:---------------:|
|  1   |  cat   |     2.2      |       1        |                |                 |
|  2   |  cat   |     3.2      |       2        |                |                 |
|  3   |  cat   |     4.1      |       3        |                |                 |
|  4   |  cat   |     4.3      |       4        |                |                 |
|  5   |  cat   |     5.4      |       5        |                |                 |
|  6   |  dog   |     5.6      |                |       6        |                 |
|  7   |  dog   |     5.7      |                |       7        |                 |
|  8   |  cat   |     6.1      |       8        |                |                 |
|  9   |  dog   |     7.6      |                |       9        |                 |
|  10  |  fox   |     7.7      |                |                |       10        |
|  11  |  cat   |     7.9      |       11       |                |                 |
|  12  |  fox   |     8.1      |                |                |       12        |
|  13  |  dog   |     8.2      |                |       13       |                 |
|  14  |  fox   |     8.6      |                |                |       14        |
|  15  |  dog   |     8.9      |                |       15       |                 |
|  16  |  dog   |     9.1      |                |       16       |                 |
|  17  |  fox   |     9.1      |                |                |       17        |
|  18  |  fox   |     9.7      |                |                |       18        |
|  19  |  fox   |     10.3     |                |                |       19        |
|  20  |  fox   |     10.6     |                |                |       20        |
|  21  |  dog   |     11.8     |                |       21       |                 |
|      |        |  Rangsummen  | $R_{cat} = 34$ | $R_{dog} = 87$ | $R_{fox} = 110$ |
|      |        | Gruppengröße |       7        |       7        |        7        |

: Datentablle absteigend sortiert nach der Sprunglänge in \[cm\]. Die Level `cat`, `dog` und `fox` haben jeweils die entsprechenden Ränge zugeordnet bekommen und die Rangsummen wurden berechnet {#tbl-kruskal-rank}

Die Summe aller Ränge ist $1+2+3+...+21 = 231$. Wir überprüfen nochmal die Summe der Rangsummen als Gegenprobe $R_{cat} + R_{dog} + R_{fox} = 231$. Das ist identisch, wir haben keinen Fehler bei der Rangaufteilung und der Summierung gemacht.

Die Formel für die H Statistik sieht wie die U Statistik ein wenig wild aus, aber wir können eigentlich relativ einfach alle Zahlen einsetzen. Dann musst du dich etwas konzentrieren bei der Rechnung.

$$
H = \cfrac{12}{N(N+1)}\sum_{i=1}^k\cfrac{R_i^2}{n_i}-3(N+1)
$$

mit

-   $R_i$ der Rangsummen für jede Gruppe mit insgesamt $k$ Gruppen
-   $n_i$ der Fallzahl in jeder Gruppe
-   $N$ der Gesamtzahl an Beobachtungen also die gesamte Fallzahl

Wir setzen nun die Zahlen ein. Da wir ein balanciertes Design vorliegen haben sind die Fallzahlen $n_1 = n_2 = n_3 = 7$ gleich.

$$
H_{D} = \cfrac{12}{21(21+1)}\left(\cfrac{34^2}{7}+\cfrac{87^2}{7}+\cfrac{110^2}{7}\right)-3(21+1) = 11.27
$$

Der kritische Wert für die H Statistik ist $H_{\alpha = 5\%} = 5.99$. Bei der Entscheidung mit der berechneten Teststatistik $H_{D}$ gilt, wenn $H_{D} \geq U_{\alpha = 5\%}$ wird die Nullhypothese (H$_0$) abgelehnt. Da in unserem Fall das $H_{D}$ mit $11.27$ größer ist als das $H_{\alpha = 5\%} = 5.99$ können wir die Nullhypothese ablehnen. Wir haben ein signifkianten Unterschied in den Medianen zwischen den beiden Tierarten im Bezug auf die Sprungweite in \[cm\] von Flöhen.

## `{stats}`

Die Nutzung des Kruskal-Wallis-Test in R ist relativ einfach mit der Funktion `kruskal.test()`. Wir nutzen die `formual` Syntax um das Modell zu definieren und können dann schon die Funktion nutzen.

```{r}
kruskal.test(jump_length ~ animal, data = fac1_tbl) 
```

Mit einem p-Wert von $0.0037$ können wir die Nullhypothese ablehnen, da der p-Wert kleiner ist als das Signifikanzniveau $\alpha$ von 5%. Wir haben mindestens einen medianen Unterschied zwischen den Sprungweiten der Hunde-, Katzen- und Fuchsflöhen.

## `{coin}`

`kruskal_test()`

```{r}
coin::kruskal_test(jump_length ~ animal, data = fac1_tbl)
```

## `{rstatix}`

`kruskal_test()`

```{r}
rstatix::kruskal_test(jump_length ~ animal, data = fac1_tbl)
```
:::

#### Effektschätzer {.unnumbered .unlisted}

Für die Betrachtung der Effektgröße in einem Kruskal-Wallis-Test nutzen wir das R Paket `{rstatix}` und die darin enthaltende Funktion `kruskal_effsize()`. Wir berechnen hierbei analog zu einfaktoriellen ANOVA den $\eta^2$ Wert.

```{r}
fac1_tbl |> kruskal_effsize(jump_length ~ animal)
```

Das $\eta^2$ nimmt Werte von 0 bis 1 an und gibt, multipliziert mit 100, den Prozentsatz der Varianz der durch die $x$ Variable erklärt wird. In unserem Beispiel wird 51.1% der Varianz in de Daten durch den Faktor `animal` erklärt.

#### Parametrische Lösung: Die ANOVA {.unnumbered .unlisted}

```{r}
signed_rank <- function(x) sign(x) * rank(abs(x))
```

```{r}
fac1_tbl |> 
  mutate(ranked_jump_length = signed_rank(jump_length)) |> 
  anova_test(ranked_jump_length ~ animal) 
```

## Post-hoc Test

### Conover–Iman Test

[Conover-Iman test](https://rpubs.com/DragonflyStats/Conover-Iman-Test)

```{r}
conover.test(fac1_tbl$jump_length, fac1_tbl$animal)
```

### Dunn's Test

```{r}
fac1_tbl |> dunn_test(jump_length ~ animal)
```

## Referenzen {.unnumbered}
