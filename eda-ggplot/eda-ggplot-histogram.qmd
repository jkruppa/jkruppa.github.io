Wozu nutzen wir das Histogramm? Wir brauchen das Histogramm um die Verteilung der Messwerte $y$ abzuschätzen. Daher wie sind unsere Sprungweiten, Anzahlen oder Gewichte unserer Hunde- und Katzenflöhe verteilt. Zuerst brauchen wir aber viele Beobachtungen. Wir brauchen für ein anständiges Histogramm, wo du auch was erkennen kannst, mindestens 20 Beobachtung *pro Gruppe*. Hier ist das *pro Gruppe* sehr wichtig. Zwar haben wir auch in unseren Hunde- und Katzenflohdaten vierzehn Beobachtungen, aber nur sieben pro Gruppe! Da können wir dann mit einem Histogramm nicht viel erkennen und dann nutzen wir den Boxplot für die Abschätzung der Verteilung. Häufig irritiert bei einem Histogramm auch, dass wir auf der x-Achse die Werte der y-Achse darstellen und dann auf der y-Achse des Histogramms die Anzahlen zählen. Aber dazu dann gleich mehr in den folgenden Tabs zur theoretischen Betrachtung, einem Beispiel und der Umsetzung in `{ggplot}`. Ein Histogramm nutzen wir eigentlich in einer laufenden Analyse als ein statistisches Tool und berichten es eher selten.

::: panel-tabset
## Theoretisch

Für die Erstellung eines Histogramm müssen wir unterscheiden, ob wir als Outcome etwas zählbares vorliegen haben. Also ob unser Outcome Kategorien hat. Wir zählen die Anzahl an Haaren eines Flohbeins oder aber die Noten von Schülern. Wir können aber auch andere Kategorien vorliegen haben, aber es müssen schon ein paar sein. Mit ein paar meine ich dann mehr als fünf Kategorien. Ein Notenspiegel macht ja auch nur Sinn, da wir da gut zehn Notenschritte drin haben. Im Folgenden siehst du einmal eine Abbildung mit den Kategorien A bis I. Jetzt zählen wir wie oft kommt A vor, wie oft kommt B vor und so weiter. Die Anzahlen tragen wir dann als Balken ein. Dann haben wir die *absoluten* Anzahlen gezählt. Wenn wir aber Histogramme mit unterschiedlichen Beobachtungen vergleichen wollen, dann macht es mehr Sinn sich die *relativen* Häufigkeiten anzuschauen. In unserem Fall haben wir achtzehn Beobachtungen vorliegen, also bedeutet eine Beobachtung $1/18 = 0.055$ relativen Anteil.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-hist-drawn-01
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Histogramm von achtzehn Flöhen für einen kategorialen Endpunkt der Kategorien A bis I. Auf der linken Seite sind die absoluten Anzahlen dargestellt und auf der rechten Seite die entsprechenden relativen Häufigkeiten. *[Zum Vergrößern anklicken]*"


tibble(x = 0:10, y = c(0, 1, 3, 5, 4, 2, 2, 1, 0.5, 0, 0)) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  ylim(0, NA) +
  xlim(0, NA) +
  geom_rect(aes(xmin = 0.55, xmax = 1.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 1.55, xmax = 2.45, ymin = 0, ymax = 3), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 2.55, xmax = 3.45, ymin = 0, ymax = 5), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 3.55, xmax = 4.45, ymin = 0, ymax = 4), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 4.55, xmax = 5.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 5.55, xmax = 6.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 6.55, xmax = 7.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  #geom_vline(xintercept = c(0, 10)) +
  geom_hline(yintercept = c(0, 1, 2, 3, 4, 5), color = "gray50") +
  scale_y_continuous(name = "Absolute Anzahl",
                     sec.axis = sec_axis(~ ., name = "Relative Häufigkeit",
                                         breaks = c(0, 1, 2, 3, 4, 5), 
                                         labels = c("0%", "5.5%", "11.1%", "16.6%", "22%.2", "27.7%")),
                     limits = c(0, NA)) +
  scale_x_continuous(name = "", breaks = 1:9, limits = c(0, NA),
                     labels = LETTERS[1:9]) +
  ggtitle("Kategorial")  +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  annotate("label", x = 6.2, y = 2.5, label = "2 Beobachtungen\nder Kategorie E",
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 6.1, y = 2.5, xend = 5, yend = 2.1, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") 

```

Wenn wir keine Kategorien vorliegen haben, dann müssen wir uns für unser Outcome welche Überlegen. Das heißt wir nutzen das so genannte *bining* (deu. *eindosen*, ungebräuchlich). Wenn du das Gewicht von Flöhen misst, dann hast du Kommazahlen und damit kontinuierliche Daten vorliegen. Damit unterscheiden sich alle deine Messwerte vermutlich. Deshalb fasst du "gleiche" Werte zusammen. Meistens machen wir das, indem wir Beobachtungen in zwischen zwei Zahlen als eine Kategorie zählen. Wie da die Grenzen liegen, ist immer unterschiedlich und hängt von der Fragestellung ab.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-hist-drawn-02
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Histogramm von achtzehn Flöhen für einen kontinuierlichen Endpunkt. Ein Balken entspricht immer einem Zahlenraum entsprechend der x-Achse. Auf der linken Seite sind die absoluten Anzahlen dargestellt und auf der rechten Seite die entsprechenden relativen Häufigkeiten. *[Zum Vergrößern anklicken]*"


tibble(x = 0:10, y = c(0, 1, 3, 5, 4, 2, 2, 1, 0.5, 0, 0)) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  ylim(0, NA) +
  xlim(0, NA) +
  geom_rect(aes(xmin = 0.55, xmax = 1.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 1.55, xmax = 2.45, ymin = 0, ymax = 3), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 2.55, xmax = 3.45, ymin = 0, ymax = 5), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 3.55, xmax = 4.45, ymin = 0, ymax = 4), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 4.55, xmax = 5.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 5.55, xmax = 6.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 6.55, xmax = 7.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_hline(yintercept = c(0, 1, 2, 3, 4, 5), color = "gray50") +
  scale_y_continuous(name = "Absolute Anzahl",
                     sec.axis = sec_axis(~ ., name = "Relative Häufigkeit",
                                         breaks = c(0, 1, 2, 3, 4, 5), 
                                         labels = c("0%", "5.5%", "11.1%", "16.6%", "22%.2", "27.7%")),
                     limits = c(0, NA)) +
  scale_x_continuous(name = "", breaks = 1:9, 
                     limits = c(0, NA), 
                     labels = c("(1,2]", "(2,3]", "(3,4]", "(4,5]", "(5,6]",
                                "(6,7]", "(7,8]", "(8,9]", "(9,10]")) +
  ggtitle("Kontinuierlich") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  annotate("label", x = 6.2, y = 2.5, label = "2 Beobachtungen\nzwischen >5 und \u22646",
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 6.1, y = 2.5, xend = 5, yend = 2.1, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") 

```

## Händisch

Betrachten wir einmal die Erstellung eine Histogramms für einen Endpunkt mit Kategorien. Dafür habe ich mir einmal die Boniturnoten für achtzehn Hundeflöhe in der folgenden Tabelle ausgedacht. Wir brauchen eben mehr Daten als wir in den ursprünglichen Hunde- und Katzenflohdaten vorliegen haben. Jetzt wollen wir uns einmal die Verteilung der Boniturnoten anschauen.

```{r}
#| echo: false
#| label: tbl-hist-cat-flea-grade
#| tbl-cap: "Die Boniturnote von achtzehn Hundeflöhen."

c(1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7) |> sample() |>  
  matrix(nrow = 1) |> 
  kable()
```

In der folgenden Abbildung siehst du einmal die Verteilung der achtzehn Boniturnoten der Hundeflöhe dargestellt. Wir sehen sofort, dass wir am meisten die Note 3 vergeben haben. Wir haben nämlich fünfmal die Note 3 an unseren Flöhen festgestellt. Die Boniturnote 5 haben wir dann an zwei Flöhen erhoben. Da wir achtzehn Flöhe haben, entspricht jede Anzahl dann $5.5%$ auf der relativen Skala.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-hist-drawn-04
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Histogramm von achtzehn Flöhen für die Boniturnoten als kategorialen Endpunkt. *[Zum Vergrößern anklicken]*"


tibble(x = 0:10, y = c(0, 1, 3, 5, 4, 2, 2, 1, 0.5, 0, 0)) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  ylim(0, NA) +
  xlim(0, NA) +
  geom_rect(aes(xmin = 0.55, xmax = 1.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 1.55, xmax = 2.45, ymin = 0, ymax = 3), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 2.55, xmax = 3.45, ymin = 0, ymax = 5), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 3.55, xmax = 4.45, ymin = 0, ymax = 4), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 4.55, xmax = 5.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 5.55, xmax = 6.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 6.55, xmax = 7.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  #geom_vline(xintercept = c(0, 10)) +
  geom_hline(yintercept = c(0, 1, 2, 3, 4, 5), color = "gray50") +
  scale_y_continuous(name = "Absolute Anzahl",
                     sec.axis = sec_axis(~ ., name = "Relative Häufigkeit",
                                         breaks = c(0, 1, 2, 3, 4, 5), 
                                         labels = c("0%", "5.5%", "11.1%", "16.6%", "22%.2", "27.7%")),
                     limits = c(0, NA)) +
  scale_x_continuous(name = "Boniturnote", breaks = 1:9, limits = c(0, NA),
                     labels = 1:9) +
  ggtitle("Kategorial")  +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  annotate("label", x = 6.2, y = 2.5, label = "2 Beobachtungen\nder Boniturnote 5",
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 6.1, y = 2.5, xend = 5, yend = 2.1, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") 

```

Schauen wir uns im zweiten Beispiel einmal das Gewicht von achtzehn Hundeflöhen an. Hier siehst du, dass wir Kommazahlen also kontinuierliche Daten vorliegen haben. Keine der Zahlen ist doppelt, so dass wir hier dann keine Balken hochzählen können. Damit wir das aber können, bilden wir Zahlenräume in denen wir die Gewichte zusammenfassen.

```{r}
#| echo: false
#| label: tbl-hist-cont-flea-weight
#| tbl-cap: "Das Gewicht in [mg] von achtzehn Hundeflöhen."

c(0.7, 1.7, 2.0, 2.1, 2.7, 2.8, 3.0, 3.1, 3.3,
  3.8, 4.0, 4.1, 4.3, 4.9, 5.2, 5.9, 6.1, 7.4) |> 
  sample() |> 
  matrix(nrow = 1) |> 
  kable()
```

In der folgenden Abbildung siehst du einmal die Zusammenfassung unserer Flohgewichte in die Zahlenräume der Größe $1mg$. Gewichte, die in den Bereich $x \pm 0.5$ fallen, werden dann in einem Balken zusammengefasst. Wir haben zum Beispiel in dem Bereich mit $x = 2$ und somit $2 \pm 0.5$ dann die drei Werte 1.7, 2.0 und 2.1 vorliegen. Wir zeichnen einen Balken der Höhe drei. Ebenso haben wir in dem Bereich $5.5 < x \leq 6.5$ zwei Beobachtungen vorliegen. Wir zeichnen hier einen Balken der Höhe zwei. Die Entscheidung wie weit der Zahlenraum zum zusammenfassen reichen soll, ist meist ein Ausprobieren. Das ist natürlich bei der händischen Erstellung problematisch.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-hist-drawn-03
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Histogramm von achtzehn Flöhen für das Gewicht als kontinuierlichen Endpunkt. *[Zum Vergrößern anklicken]*"


tibble(x = 0:10, y = c(0, 1, 3, 5, 4, 2, 2, 1, 0.5, 0, 0)) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  ylim(0, NA) +
  xlim(0, NA) +
  geom_rect(aes(xmin = 0.55, xmax = 1.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 1.55, xmax = 2.45, ymin = 0, ymax = 3), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 2.55, xmax = 3.45, ymin = 0, ymax = 5), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 3.55, xmax = 4.45, ymin = 0, ymax = 4), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 4.55, xmax = 5.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 5.55, xmax = 6.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 6.55, xmax = 7.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_vline(xintercept = c(0.7, 1.7, 2.0, 2.1, 2.7, 2.8, 3.0, 3.1, 3.3,
                            3.8, 4.0, 4.1, 4.3, 4.9, 5.2, 5.9, 6.1, 7.4),
             color = "#D55E00") +
  geom_hline(yintercept = c(0, 1, 2, 3, 4, 5), color = "gray50") +
  scale_y_continuous(name = "Absolute Anzahl",
                     sec.axis = sec_axis(~ ., name = "Relative Häufigkeit",
                                         breaks = c(0, 1, 2, 3, 4, 5), 
                                         labels = c("0%", "5.5%", "11.1%", "16.6%", "22%.2", "27.7%")),
                     limits = c(0, NA)) +
  scale_x_continuous(name = "Gewicht [mg]", breaks = c(0.7, 1.7, 2.0, 2.1, 2.7, 2.8, 3.0, 3.1, 3.3,
                            3.8, 4.0, 4.1, 4.3, 4.9, 5.2, 5.9, 6.1, 7.4), 
                     limits = c(0, NA),
                     guide = guide_axis(n.dodge=3)) +
  ggtitle("Kontinuierlich") +
  theme(legend.position = "none",
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  annotate("label", x = 6.2, y = 2.5, label = "2 Flöhe zwischen\n>5.5mg und \u22646.5mg",
           size = 5, color = "#009E73", hjust = "left") +
  geom_curve(x = 6.1, y = 2.5, xend = 5, yend = 2.1, linewidth = 0.5,
             arrow = arrow(length = unit(0.03, "npc"), type = "closed"),
             curvature = 0.3, alpha = 0.3, color = "#009E73") 

```

## `{ggplot}`

Für die Erstellung eines Histogramms mit `{ggplot}` nutzen wir unsere Spieldaten aus dem Tab zur händischen Erstellung eines Histogramms. Nun schauen wir uns jetzt einmal achtzehn Hundflöhe an und bestimmen die Boniturnote, dargestellt in der Spalte `grade`. Darüber hinaus bestimmen wir auch noch das mittlere Gewicht der Flöhe auf dem jeweiligen Hund, dargestellt in der Spalte `weight`.

```{r}
#| echo: true
#| message: false
flea_hist_tbl <- tibble(grade = c(1, 2, 2, 2, 3, 3, 3, 3, 3, 
                                  4, 4, 4, 4, 5, 5, 6, 6, 7),
                        weight = c(0.7, 1.7, 2.0, 2.1, 2.7, 
                                   2.8, 3.0, 3.1, 3.3, 3.8, 
                                   4.0, 4.1, 4.3, 4.9, 5.2, 
                                   5.9, 6.1, 7.4))
```

In `{ggplot}` können wir ein Histogramm mit der Funktion `geom_histogram()` erstellen. Dabei ist es dann immer etwas verwirrend, dass wir unser Outcome als $y$ dann auf der x-Achse darstellen. Wir können die Option `binwidth` nutzen, um zu entscheiden, wie viele Noten in einem Balken zusammengefasst werden sollen. Sinnvoll ist natürlich hier eine `binwidth` von 1, da wir pro Balken eine Boniturnote zählen wollen.

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-count
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Histogramm der Boniturnoten von achtzehn Hundeflöhen. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_hist_tbl, aes(x = grade)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_minimal() +
  labs(x = "Boniturnote", y = "Anzahl") 
```

Anders sieht es für kontinuierliche Variablen mit Kommazahlen aus. Schauen wir uns das Gewicht der Flöhe an, so sehen wir, dass es sehr viele Zahlen gibt, die nur einmal vorkommen. Hier können wir dann mit `binwidth` den Bereich einstellen, in denen die Zahlen fallen sollen. Auch hier ist es immer ein Gefummel, wenn wir zu wenige Beobachtungen vorliegen haben. Die beste Bandbreite für die Balken zu finden, ist immer ein Ausprobieren.

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Histogramm des Gewichts von achtzehn Hundeflöhen. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_hist_tbl, aes(x = weight)) +
  geom_histogram(binwidth = 1, fill = "gray", color = "black") +
  theme_minimal() +
  labs(x = "Gewicht [mg]", y = "Anzahl") 
```

## `{tidyplots}`

Wir können auch auf den folgenden Daten ein Histogramm in `{tidyplots}` erstellen. Dafür nutzen wir wieder folgenden kleinen Datensatz. Hier haben wir dann wieder einmal die Boniturdaten, die wir dann einfach in einem Histogramm darestellen können.

```{r}
#| echo: true
#| message: false
flea_hist_tbl <- tibble(grade = c(1, 2, 2, 2, 3, 3, 3, 3, 3, 
                                  4, 4, 4, 4, 5, 5, 6, 6, 7))
```

Dann erhalten wir auch schon ein schnelles Histogramm. Eigentlich brauchen wir hier nur zwei Zeilen Code. Der Rest dient nur der Anpassung hier in dem Skript. Wenn du mehr willst, dann musst du nochmal bei `{ggplot}` schauen. MIr persönlich ist das zu wenig, aber für den alltäglichen schnellen Gebrauch reicht es.

```{r}
#| echo: true
#| message: false
#| label: fig-hist-flea-count-tidy
#| fig-align: center
#| fig-height: 3
#| fig-width: 4
#| fig-cap: "Histogramm der Boniturnoten von achtzehn Hundeflöhen. *[Zum Vergrößern anklicken]*"

tidyplot(data = flea_hist_tbl, x = grade) |> 
  add_histogram() |> 
  adjust_font(fontsize = 9) |>
  adjust_size(width = NA, height = NA) 
```
:::

### Density Plot

Eine weitere Möglichkeit sich eine Verteilung anzuschauen, ist die Daten nicht als Balkendiagramm sondern als Densityplot - also Dichteverteilung - anzusehen. Im Prinzip verwandeln wir die Balken in eine Kurve. Damit würden wir im Prinzip unterschiedliche Balkenhöhen ausgleichen und eine "glattere" Darstellung erreichen. Wir wir aber gleich sehen werden, benötigen wir dazu eine Menge an Beobachtungen und auch dann ist das Ergebnis eventuell nicht gut zu interpretieren. Eine händische Darstellung ist nicht möglich, wir machen Dichteverteilungen nur in R aber nicht selber auf einem Blattpapier.

::: panel-tabset
## Theoretisch

Anbei einmal die Darstellung des Densityplots mit einem Histogramm im Hintergrund. Auf der $y$-Achse ist die Dichte als schwer zu interpretieren angeben. Im Prinzip interpretieren wir die Dichte nicht direkt sondern schätzen an der Kurve die Verteilung der Daten ab. Wie die Dichtekurve entsteht, ist hier nicht von Belang. Wir nutzen die Dichtekurve auch häufig zusammen mit anderen Abbildungen.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-density-drawn-01
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 7
#| fig-cap: "Beispielhafte Dichtekurve für die Abschätzung der Verteilung der Daten. *[Zum Vergrößern anklicken]*"

tibble(x = 0:10, y = c(0.1, 1, 3, 5, 4, 2, 2, 1, 0.5, 0.1, 0.1)) |> 
  ggplot(aes(x, y)) +
  theme_minimal() +
  ylim(0, NA) +
  xlim(0, NA) +
  geom_rect(aes(xmin = 0.55, xmax = 1.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 1.55, xmax = 2.45, ymin = 0, ymax = 3), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 2.55, xmax = 3.45, ymin = 0, ymax = 5), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 3.55, xmax = 4.45, ymin = 0, ymax = 4), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 4.55, xmax = 5.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 5.55, xmax = 6.45, ymin = 0, ymax = 2), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_rect(aes(xmin = 6.55, xmax = 7.45, ymin = 0, ymax = 1), fill = "gray80",
            color = "black", linewidth = 0.5) +
  geom_vline(xintercept = c(0)) +
  geom_hline(yintercept = 0) +
  scale_y_continuous(name = "Dichte",
                     limits = c(0, NA)) +
  scale_x_continuous(name = "", breaks = 0:9, limits = c(0, NA)) +
  stat_smooth(aes(x, y), method = "lm",
              formula = y ~ poly(x, 5), se = FALSE, geom = "area", alpha = 0.3,
              fill = "#CC79A7", color = "#CC79A7") +
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) 
```

## `{ggplot}`

Schauen wir uns einmal die Densityplots in `{ggplot}` an. Wir nutzen dazu die Funktion `geom_density()`. Die Werte der Dichte interpretieren wir nicht direkt sondern betrachten nur die Form der Dichtekurve. In unserem Fall sieht die Kurve sehr nach einer Normalverteilung aus. Um die ganze Kurve zu sehen muss ich nochmal an `xlim()` drehen und den x-Achsenbereich erhöhen.

```{r }
#| echo: true
#| message: false
#| label: fig-dens-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Densityplot der Boniturnote achtzehn Hundeflöhen. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_hist_tbl, aes(x = grade)) +
  geom_density(fill = "#CC79A7", color = "#CC79A7", alpha = 0.3) +
  theme_minimal() +
  xlim(-1, 10) +
  labs(x = "Boniturnote", y = "Dichte")
```
:::
