```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Variablenselektion {#sec-variable-selection}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Theoretischer Hintergrund

::: column-margin
![](images/angel_01.png){fig-align="center" width="50%"}

In diesem Kapitel prügeln wir aber einen statistischen Engel. Wir werden hier mal schauen müssen, was alles geht und was nicht. Variablen Selektion ist faktisch nicht *ein* Kapitel sondern ein Regal(kilo)meter voll mit Büchern.
:::

@sec-class-rf

::: column-margin
Das [R Paket `olsrr`](https://olsrr.rsquaredacademy.com/articles/variable_selection.html) erlaubt eine weitreichende Variablen Selektion, wenn ein normalverteiltes Outcome $y$ vorliegt.
:::

@heinze2018variable

@heinze2017five

@talbot2019descriptive

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, 
               MASS, ranger, Boruta)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-log-pigs
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page

pig_tbl <- read_excel("data/infected_pigs.xlsx") 

rbind(head(pig_tbl),
      rep("...", times = ncol(pig_tbl)),
      tail(pig_tbl)) %>% 
  kable(align = "c", "pipe")
```

```{r}
#| echo: true
#| message: false
#| eval: true
#| warning: false

fit <- glm(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, 
           data = pig_tbl, family = binomial)

fit_step <- stepAIC(fit, direction = "both")
```

Test

```{r}
fit_step 
```

Test

```{r}
#| echo: true
#| message: false
#| warning: false

fit <- ranger(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, 
              data = pig_tbl, importance = "permutation")

pluck(fit, "variable.importance") %>% sort(decreasing = TRUE)
```

```{r}
boruta_output <- Boruta(infected ~ ., data = pig_tbl)  

boruta_output

tent_boruta <- TentativeRoughFix(boruta_output)

plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  

plot(tent_boruta, cex.axis=.7, las=2, xlab="", main="Variable Importance")  


```

## Referenzen {.unnumbered}
