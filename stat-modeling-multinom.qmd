```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Multinomiale / Ordinale logistische Regression {#sec-multinom-ordinal}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Annahmen an die Daten

[Unser gemessenes Outcome $y$ folgt einer Binomialverteilung. Damit finden wir im Outcome nur $0$ oder $1$ Werte.]{.aside}

Im folgenden Kapitel zu der multinomialen / ordinalen logistischen linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form *ideal* sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.

-   Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das @sec-missing zu Imputation von fehlenden Werten.
-   Wenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das @sec-outlier zu Ausreißer in den Daten.
-   Wenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das @sec-variable-selection bei der Variablenselektion.

Daher sieht unser Modell wie folgt aus. Wir haben ein $y$ und $p$-mal $x$. Wobei $p$ für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser $y$ einer Multinomialenverteilung. Damit finden wir im Outcome im Falle der multinomialen logistischen linearen Regression *ungeordnete* Kategorien und im Falle der ordinalen logistischen linearen Regression *geordnete* Kategorien.

$$
y \sim x_1 + x_2 + ... + x_p 
$$

Wir können in dem Modell auch Faktoren $f$ haben, aber es geht hier nicht um einen Gruppenvergleich. Das ist ganz wichtig. Wenn du einen Gruppenvergleich rechnen willst, dann musst du in @sec-posthoc nochmal nachlesen.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               parameters, performance, gtsummary,
               ordinal, janitor, MASS, nnet)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") %>%
  mutate(frailty_ord = ordered(frailty, levels = c("robust", "pre-frail", "frail")),
         frailty_fac = as_factor(frailty))

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-log-pigs
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.
#| column: page


rbind(head(pig_tbl),
      rep("...", times = ncol(pig_tbl)),
      tail(pig_tbl)) %>% 
  kable(align = "c", "pipe")
```

## Ordinale logistische Regression {#sec-ordinal}

::: column-margin
[Ordinal Logistic Regression \| R Data Analysis Examples](https://stats.oarc.ucla.edu/r/dae/ordinal-logistic-regression/)
:::

```{r}
#| message: false
#| warning: false
ologit_fit <- polr(frailty_ord ~ age + sex + location + activity + crp + bloodpressure + weight + creatinin, 
                   data = pig_tbl)
```

```{r}
#| message: false
#| warning: false
ologit_fit %>% summary
```

```{r}
#| message: false
#| warning: false
ologit_fit %>% confint %>% exp
```

```{r}
#| message: false
#| warning: false
coef_df <- summary(ologit_fit) %>% coef
p_n <- pnorm(abs(coef_df[, "t value"]), lower.tail = FALSE) * 2
p_t <- pt(abs(coef_df[, "t value"]), df = 3, lower.tail = FALSE) * 2
```

```{r}
#| message: false
#| warning: false
cbind(coef_df,
      p_n = round(p_n, 3),
      p_t = round(p_t, 3))
```

```{r}
#| message: false
#| warning: false
ologit_fit %>% tidy(conf.int = TRUE, exponentiate = TRUE)
```

```{r}
#| message: false
#| warning: false
ologit_fit %>% model_parameters()
```

## Multinomiale logistische Regression {#sec-multinom}

::: column-margin
[Multinomial Logistic Regression \| R Data Analysis Examples](https://stats.oarc.ucla.edu/r/dae/multinomial-logistic-regression/)
:::

```{r}
#| message: false
#| warning: false
pig_tbl <- pig_tbl %>% 
  mutate(frailty_fac = relevel(frailty_fac, ref = "robust"))
```

```{r}
#| message: false
#| warning: false
multinom_fit <- multinom(frailty_fac ~ age + sex + location + activity + crp + bloodpressure + weight + creatinin, 
                         data = pig_tbl)
```

```{r}
#| message: false
#| warning: false
multinom_fit %>% summary
```

```{r}
#| message: false
#| warning: false
multinom_fit %>% confint %>%  exp
```

```{r}
#| message: false
#| warning: false
z_mat <- summary(multinom_fit)$coefficients/summary(multinom_fit)$standard.errors
p_n <- (1 - pnorm(abs(z_mat), 0, 1)) * 2
p_n
```

```{r}
#| message: false
#| warning: false
multinom_fit %>% tidy(conf.int = TRUE, exponentiate = TRUE)
```

```{r}
#| message: false
#| warning: false
multinom_fit %>% model_parameters()
```

## Logistische Regression

```{r}
#| message: false
#| warning: false
pig_tbl$frailty %>% tabyl
```

```{r}
#| message: false
#| warning: false
pig_lst <- list(logreg_robust_frail = filter(pig_tbl, frailty %in% c("robust", "frail")),
                logreg_robust_pre = filter(pig_tbl, frailty %in% c("robust", "pre-frail")),
                logreg_pre_frail = filter(pig_tbl, frailty %in% c("pre-frail", "frail")))
```

```{r}
#| message: false
#| warning: false
pig_lst %>% 
  map(~glm(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, 
             data = .x, family = binomial)) %>% 
  map(model_parameters, exponentiate = TRUE) 
```
