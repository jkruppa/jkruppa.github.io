```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra)
```

# Ausreißer

![](images/caution.png){fig-align="center" width="50%"}

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, conflicted, broom,
               see, performance)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Nachdem wir uns im vorherigen Kapitel mit einem sehr kleinen Satensatz beschäftigt haben, nehmen wir einen großen Datensatz. Bleiben aber bei einem simplen Modell. Wir brauchen dafür den Datensatz `flea_dog_cat_length_weight.xlsx`. In einer simplen linearen Regression schauen wir uns den Zusammenhang zwischen einem $y$ und einem $x_1$ an. Daher wählen wir aus dem Datensatz die beiden Spalten `jump_length` und `weight`. Wir wollen nun feststellen, ob es einen Zusammenhang zwischen der Sprungweite in \[cm\] und dem Flohgewicht in \[mg\] gibt. In dem Datensatz finden wir 400 Flöhe von Hunden und Katzen.

```{r}
#| message: false

model_tbl <- read_csv2("data/flea_dog_cat_length_weight.csv") %>%
  select(animal, jump_length, weight)
```

In der @tbl-model-1 ist der Datensatz `model_tbl` nochmal dargestellt.

```{r}
#| message: false
#| echo: false
#| tbl-cap: Selektierter Datensatz mit einer normalverteilten Variable `jump_length` und der normalverteilten Variable `weight`. Wir betrachten die ersten sieben Zeilen des Datensatzes.
#| label: tbl-model-1

model_tbl %>% head(7) %>% kable(align = "c", "pipe")
```

Im Folgenden *ignorieren* wir, dass die Sprungweiten und die Gewichte der Flöhe auch noch von den Hunden oder Katzen sowie dem unterschiedlichen Geschlecht der Flöhe abhängen könnten. Wir schmeißen alles in einen Pott und schauen nur auf den Zusammenhang von Sprungweite und Gewicht.

## Das simple lineare Modell

Wir fitten ein simples lineares Modell mit nur einem Einflussfaktor `weight` auf die Sprunglänge `jump_length`. Wir erhalten dann das Objekt `fit_1` was wir dann im Weiteren nutzen werden.

```{r}
fit_1 <- lm(jump_length ~ weight, data = model_tbl)
```

Wir nutzen jetzt dieses simple lineare Modell für die weiteren Gütekritierien.

## Cook\`s Abstand

Die Cook'sche Distanz hat im Wesentlichen eine Aufgabe. Die Cook'sche Distanz misst, wie stark sich alle angepassten Werte im Modell ändern, wenn der i-te Datenpunkt gelöscht wird.

```{r}
#| message: false
#| echo: false
#| label: tbl-tables
#| tbl-cap: "Tables"
#| tbl-subcap:
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

no_out_tbl <- tibble(weight = c(1, 2, 2, 3, 4, 5, 7, 3, 4, 5),
                     jump_length = c(22, 23, 24, 23, 19, 34, 35, 36, 23, 22))

out_tbl <- tibble(weight = c(1, 2, 2, 3, 4, 5, 7, 4, 5, 8),
                  jump_length = c(190, 23, 24, 23, 19, 24, 25, 26, 28, 180))

no_out_tbl %>% kable(align = "c", "pipe")
out_tbl %>% kable(align = "c", "pipe")
```

```{r}
#| message: false
#| echo: false
#| label: fig-cooks-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Histogramm der nicht transfomierten und transformierten Daten."
#| fig-subcap: 
#|   - "Nicht transformierte, rohe Daten"
#|   - "$log$-transformierte Daten."
#| layout-nrow: 1
#| column: page

#create scatterplot for data frame with no outliers
ggplot(data = no_out_tbl, aes(x = weight, y = jump_length)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  ylim(0, 200) +
  theme_bw()

#create scatterplot for data frame with outliers
ggplot(data = out_tbl, aes(x = weight, y = jump_length)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  ylim(0, 200) +
  theme_bw()

```

```{r}
fit_2 <- lm(jump_length ~ weight, data = out_tbl)
```

```{r}
plot_tbl <- fit_2 %>% 
  augment %>% 
  select(weight, .cooksd)
```

```{r}
cooks_border <- 4/nrow(plot_tbl)
cooks_border
```

```{r}
#| echo: true
#| message: false
#| label: fig-cook-2
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "."

ggplot(plot_tbl, aes(weight, .cooksd)) +
  geom_point() +
  geom_hline(yintercept = cooks_border, color = "red") +
  theme_bw()
```

```{r}
#| message: false
remove_weight_id <- which(plot_tbl$.cooksd > cooks_border)
out_tbl <- out_tbl[-remove_weight_id,]

out_tbl
```

Das [R Paket performance](https://easystats.github.io/performance/)

```{r}
check_normality(fit_1)
```
