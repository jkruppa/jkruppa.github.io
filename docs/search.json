[
  {
    "objectID": "stat-modeling-variable-selection.html",
    "href": "stat-modeling-variable-selection.html",
    "title": "49  Variablenselektion",
    "section": "",
    "text": "49.1 Genutzte R Pakete\nLetzte Änderung am 02. August 2025 um 13:42:10\nDie Selektion von Variablen in einem Modell. Ein schwieriges Thema. Entweder kenne ich mein Experiment und habe das Experiment so geplant, dass nur die bedeutenden Variablen mit in dem Experiment sind oder ich habe keine Ahnung. Gut, dass ist überspitzt und gemein formuliert. Wir wollen uns in diesem Kapitel den Fall anschauen, dass du sehr viele Variablen \\(x\\) erhoben hast und nun statistisch bestimmen willst, welche Variablen nun mit in das finale Modell sollen. Achtung, ich spreche hier nicht von einem Blockdesign oder aber einem Feldexperiment. Da hat die Variablenselektion nichts zu suchen. Daher tritt der Fall der Variablenselektion eher in dem Feld Verhaltensbiologie oder aber auch Ökologie auf. Ebenfalls kann die Anwendung in automatisch erfassten Daten einen Sinn machen. Wir nutzen dann die Variablenselektion (eng. feature selection) zu Dimensionsreduktion des Datensatzes. Der Datensatz soll damit einfacher sein… ob der Datensatz das damit auch wird, ist wieder eine andere Frage.\nZu der Frage welches Verfahren denn nun das richtige Verfahren zur Selektion von Variablen ist, gibt es die Standardantwort in der Statistik: Es kommt auf die Fragestellung an…. Oder aber was ist wie gut implementiert, dass wir das Verfahren einigermaßen gut nutzen können. Wir gehen daher von einfach zu kompliziert und du musst dann schauen, was du nutzen willst und kannst. Wir müssen zum Beispiel unterscheiden, welcher Verteilung das Outcome \\(y\\) folgt. Wenn wir ein normalverteiltes \\(y\\) haben, dann haben wir andere Möglichkeiten, als wenn wir uns ein poissonverteiltes oder binominalverteiltes \\(y\\) anschauen.\nIm Folgenden will ich kurz die fünf Mythen der Variablenselektion von Heinze & Dunkler (2017) zusammenfassen. Wie immer ersetzt meine deutsche Zusammenfassung und Auswahl nicht das eigenständige Lesen der englischen Orgnialquelle, wenn du die Informationen in deiner Abschlussarbeit zitieren willst.\nIm Weiteren sei auch noch auf Heinze et al. (2018) und Talbot & Massamba (2019) verwiesen. Beide Veröffentlichungen liefern nochmal einen fundierten Block auf die Variablenselektion. Wiederum ist das natürlich nur ein winziger Ausschnitt aus der Literatur zur Variablenselektion. Im Zweifel einfach einmal bei Google Scholar nach Variablenselektion suchen und schauen was so in dem Feld der eigenen Forschung alles gemacht wird.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, dlookr, \n               MASS, ranger, Boruta, broom, \n               scales, olsrr, gtsummary, parameters,\n               conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Variablenselektion</span>"
    ]
  },
  {
    "objectID": "stat-modeling-variable-selection.html#daten",
    "href": "stat-modeling-variable-selection.html#daten",
    "title": "49  Variablenselektion",
    "section": "49.2 Daten",
    "text": "49.2 Daten\nUm die Variablenselektion einmal durchzuführen nurtzen wir zwei Datensätze. Zum einen den Datensatz zu den Kichererbsen in Brandenburg mit einem normalverteilten Outcome \\(y\\) mit dryweight. Wir laden wieder den Datensatz in R und schauen uns einmal die Daten in Tabelle 49.1 als Auszug aus dem Tabellenblatt an.\nWir du schon siehst, wir brauchen Fallzahl um hier überhaupt was zu machen. Bitte keine Variablenselektion im niedrigen zweistelligen Bereich an Beobachtungen.\n\n\nR Code [zeigen / verbergen]\nchickpea_tbl &lt;- read_excel(\"data/chickpeas.xlsx\") \n\n\nWir sehen, dass wir sehr viele Variablen vorleigen haben. Sind denn jetzt alle Variablen notwendig? Oder können auch ein paar Variablen raus aus dem Modell. So viele Beobachtungen haben wir mit \\(n = 95\\) ja nicht vorliegen. Daher wollen wir an diesem Datensatz die Variablenselektion unter der Annahme eines normalverteilten \\(y\\) durchgehen.\n\n\n\n\nTabelle 49.1— Auszug aus dem Daten zu den Kichererbsen in Brandenburg.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemp\nrained\nlocation\nno3\nfe\nsand\nforest\ndryweight\n\n\n\n\n25.26\nhigh\nnorth\n5.56\n4.43\n63\n&gt;1000m\n253.42\n\n\n21.4\nhigh\nnortheast\n9.15\n2.58\n51.17\n&lt;1000m\n213.88\n\n\n27.84\nhigh\nnortheast\n5.57\n2.19\n55.57\n&gt;1000m\n230.71\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n29.04\nlow\nnorth\n5.64\n2.87\n53.27\n&gt;1000m\n236.07\n\n\n24.11\nhigh\nnortheast\n4.31\n3.66\n63\n&lt;1000m\n259.82\n\n\n28.88\nlow\nnortheast\n7.92\n2\n65.75\n&gt;1000m\n274.75\n\n\n\n\n\n\n\n\nWas wir auch noch wissen, ist wie die Effekte in den Daten wirklich sind. Die Daten wurden ja künstlich erstellt, deshalb hier die Ordnung der Effektstärke für jede Variable. Im Prinzip müsste diese Reihenfolge auch bei der Variablenselektion rauskommen. Schauen wir mal, was wir erhalten.\n\\[\ny \\sim \\beta_0 + 3 * sand + 2 * temp + 1.5 * rained - 1.2 * forest + 1.1 * no3  \n\\]\nViele Beispiele laufen immer unter der Annahme der Normalverteilung. Deshalb als zweites Beispiel nochmal die Daten von den infizierten Ferkeln mit einem binomialverteilten Outcome \\(y\\) mit infected. Auch hier können wir uns den Auszug der Daten in Tabelle 49.2 anschauen.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") \n\n\nDas schöne an diesem Datensatz ist jetzt, dass wir mit \\(n = 412\\) Beobachtungen sehr viele Daten vorliegen haben. Daher können wir auch alle Methoden gut verwenden und haben nicht das Problem einer zu geringen Fallzahl.\n\n\n\n\nTabelle 49.2— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nlocation\nactivity\ncrp\nfrailty\nbloodpressure\nweight\ncreatinin\ninfected\n\n\n\n\n61\nmale\nnortheast\n15.31\n22.38\nrobust\n62.24\n19.05\n4.44\n1\n\n\n53\nmale\nnorthwest\n13.01\n18.64\nrobust\n54.21\n17.68\n3.87\n1\n\n\n66\nfemale\nnortheast\n11.31\n18.76\nrobust\n57.94\n16.76\n3.01\n0\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n61\nmale\nnorthwest\n15.26\n23.1\nrobust\n57.18\n15.55\n3.08\n1\n\n\n59\nfemale\nnorth\n13.13\n20.23\nrobust\n56.64\n18.6\n3.41\n0\n\n\n63\nfemale\nnorth\n10.01\n19.89\nrobust\n57.46\n18.6\n4.2\n1\n\n\n\n\n\n\n\n\nAuch in diesem Beispiel wurden die Daten von mir mit folgenden Effekten generiert. Schauen wir mal, was die Variablenselektion bei der hohen Fallzahl mit den Variablen macht bzw. welche Sortierung am Ende rauskommt.\n\\[\ny \\sim \\beta_0 + 2 * crp + 0.5 * sex + 0.5 * frailty + 0.2 * bloodpressure + 0.05 * creatinin +  0.01 * weight\n\\]\nDamit haben wir unsere beiden Beispiel und jetzt gehen wir mal eine Auswahl an Methoden zur Variablenselektion durch. Besonders hier, haltet den statistsichen Engel nah bei euch. Es wird leider etwas ruppig für den statistischen Engel.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Variablenselektion</span>"
    ]
  },
  {
    "objectID": "stat-modeling-variable-selection.html#methoden-der-variablenselektion",
    "href": "stat-modeling-variable-selection.html#methoden-der-variablenselektion",
    "title": "49  Variablenselektion",
    "section": "49.3 Methoden der Variablenselektion",
    "text": "49.3 Methoden der Variablenselektion\nIn den folgenden Abschnitten wollen wir uns eine Reihe an Methoden anschauen um eine Variablenselektion durchzuführen. Dabei gehen wir von einfach nach komplex. Wobei das komplex eher die Methode und nicht die Anwendung meint. Wir nutzen R Pakete und gehen nicht sehr ins Detail wie der Algorithmus jetzt die Auswahl trifft. Für den Hintergrund sind dann die Verweise auf die anderen Kapitel.\n\n49.3.1 Per Hand\nManchmal ist der Anfang auch das Ende. Wir müssen ja gar keinen Algorithmus auf unsere Daten loslassen um eine Variablenselektion durchzuführen. Deshalb möchte ich gleich den ersten Abschnitt mit einem Zitat von Heinze & Dunkler (2017) beginnen.\n“Oft gibt es keinen wissenschaftlichen Grund, eine (algorithmische) Variablenauswahl durchzuführen. Insbesondere erfordern Methoden der (algorithmische) Variablenselektion einen viel größeren Stichprobenumfang als die Schätzung eines multiplen Modells mit einem festen Satz von Prädiktoren auf der Grundlage (klinischer) Erfahrung.” (Übersetzt und ergänzt nach Heinze & Dunkler, 2017, p. 9)\nFazit dieses kurzen Abschnitts. Wir können auf alles Folgende einfach verzichten und uns überlegen welche Variablen sinnvollerweise mit ins Modell sollen und das mit unserem Expertenwissen begründen. Gut, und was ist, wenn ich kein Experte bin? Oder wir aber wirklich Neuland betreten? Dann können wir eine Reihe anderer Verfahren nutzen um uns algortimisch einer Wahrheit anzunähern.\n\n\n49.3.2 Univariate Vorselektion\nUnd weiter geht es mit Zitaten aus Heinze & Dunkler (2017) zu der Variablenselektion. Dazu musst du wissen, dass die univariate Vorselektion sehr beliebt war und auch noch ist. Denn die univariate Vorselektion ist einfach durchzuführen und eben auch gut darzustellen.\n“Obwohl die univariable Vorfilterung nachvollziehbar und mit Standardsoftware leicht durchführbar ist, sollte man sie besser ganz vergessen, da sie für die Erstellung multivariabler Modelle weder Voraussetzung noch von Nutzen ist.” (Übersetzt nach Heinze & Dunkler, 2017, p. 8)\nIch sage immer, auch mit einem Hammer kann man Scheiben putzen. Halt nur einmal… Deshalb auch hier die univariate Variante der Vorselektion.\nWir sehen also, eigentlich ist die univariate Variablensleketion nicht so das gelbe vom Ei, aber vielleicht musst die Variablenselektion durchführen, so dass her die Lösung in R einmal dargestellt ist. Wir nutzen einmal die gaussian lineare Regression für den Kichererbsendatensatz. Es ist eine ganze Reihe an Code, das hat aber eher damit zu tun, dass wir die Modellausgabe noch filtern und anpassen wollen. Die eigentliche Idee ist simple. Wir nehmen unseren Datensatz und pipen den Datensatz in select und entfernen unser Outcome drymatter. Nun iterieren wir für jede Variable .x im Datensatz mit der Funktion map() und rechnen in jeder Iteration eine gaussian lineare Regression. Dann entferne wir noch den Intercept und sortieren nach den \\(p\\)-Werten.\n\n\nR Code [zeigen / verbergen]\nchickpea_tbl |&gt;\n  select(-dryweight) |&gt;                   \n  map(~glm(dryweight ~ .x, data = chickpea_tbl, family = gaussian)) |&gt;    \n  map(tidy) |&gt;                          \n  map(filter, term != \"(Intercept)\") |&gt;       \n  map(select, -term, -std.error, -statistic) |&gt;                        \n  bind_rows(.id=\"term\") |&gt; \n  arrange(p.value) |&gt; \n  mutate(p.value = pvalue(p.value),\n         estimate = round(estimate, 2))\n\n\n# A tibble: 8 × 3\n  term     estimate p.value\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  \n1 sand         2.9  &lt;0.001 \n2 temp         1.65 0.011  \n3 no3          2.51 0.037  \n4 fe           2.61 0.091  \n5 location    -7.27 0.130  \n6 rained       4.95 0.165  \n7 forest      -4.39 0.197  \n8 location    -2.87 0.434  \n\n\nWürden wir nur nach dem Signifikanzniveau von 5% gehen, dann hätten wir die Variablen sand und location selektiert. Bei der selektion mit dem \\(p\\)-Wert wird aber eher eine Schwelle von 15.7% vorgeschlagen (Heinze & Dunkler, 2017, p. 9). Daher würden wir auch noch no3 und temp mit Selektieren und in unser Modell nehmen.\nEs gibt ja immer zwei Wege nach Rom. Deshalb hier auch nochmal die Funktion tbl_uvregression() aus dem R Paket {gtsummary}, die es erlaubt die univariaten Regressionen über alle Variablen laufen zu lassen. Wir kriegen dann auch eine schöne Tabelle 49.3 wieder.\n\n\nDas R Paket {gtsummary} erlaubt es Ergebnisse der Regression in dem Tutorial: tbl_regression gut darzustellen.\n\n\nR Code [zeigen / verbergen]\nchickpea_tbl |&gt;\n  tbl_uvregression(\n    method = glm,\n    y = dryweight,\n    method.args = list(family = gaussian),\n    pvalue_fun = ~style_pvalue(.x, digits = 2)\n  ) |&gt;\n  add_global_p() |&gt;  # add global p-value \n  add_q() |&gt;         # adjusts global p-values for multiple testing\n  bold_p() |&gt;        # bold p-values under a given threshold (default 0.05)\n  bold_p(t = 0.10, q = TRUE) |&gt; # now bold q-values under the threshold of 0.10\n  bold_labels()\n\n\n\n\nTabelle 49.3— Univariate Regression mit der Funktion tbl_uvregression().\n\n\n\n\n\n\n  \n    \n      Characteristic\n      N\n      Beta\n      95% CI\n      p-value\n      q-value1\n    \n  \n  \n    temp\n95\n1.6\n0.41, 2.9\n0.009\n0.032\n    rained\n95\n\n\n0.16\n0.23\n        high\n\n—\n—\n\n\n        low\n\n4.9\n-2.0, 12\n\n\n    location\n95\n\n\n0.31\n0.31\n        north\n\n—\n—\n\n\n        northeast\n\n-2.9\n-10, 4.3\n\n\n        west\n\n-7.3\n-17, 2.1\n\n\n    no3\n95\n2.5\n0.18, 4.8\n0.035\n0.081\n    fe\n95\n2.6\n-0.38, 5.6\n0.087\n0.15\n    sand\n95\n2.9\n2.5, 3.3\n&lt;0.001\n&lt;0.001\n    forest\n95\n\n\n0.19\n0.23\n        &lt;1000m\n\n—\n—\n\n\n        &gt;1000m\n\n-4.4\n-11, 2.2\n\n\n  \n  \n    \n      Abbreviation: CI = Confidence Interval\n    \n  \n  \n    \n      1 False discovery rate correction for multiple testing\n    \n  \n\n\n\n\n\n\n\nNun führen wir die univariate Regression erneut auf den Ferkeldaten aus. Hier ändern wir nur die family = binomial, da wir hier jetzt eine logistische lineare Regression rechnen müssen. Unser Outcome infected ist ja \\(0/1\\) codiert. Sonst ändert sich der Code nicht.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt;\n  select(-infected) |&gt;                   \n  map(~glm(infected ~ .x, data = pig_tbl, family = binomial)) |&gt;    \n  map(tidy) |&gt;                          \n  map(filter, term != \"(Intercept)\") |&gt;       \n  map(select, -term, -std.error, -statistic) |&gt;                        \n  bind_rows(.id=\"term\") |&gt; \n  arrange(p.value) |&gt; \n  mutate(p.value = pvalue(p.value),\n         estimate = round(estimate, 2))\n\n\n# A tibble: 12 × 3\n   term          estimate p.value\n   &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 crp               0.96 &lt;0.001 \n 2 bloodpressure     0.08 0.013  \n 3 creatinin         0.11 0.133  \n 4 location         -0.4  0.141  \n 5 sex              -0.29 0.188  \n 6 location         -0.24 0.435  \n 7 frailty           0.16 0.645  \n 8 activity          0.02 0.698  \n 9 frailty          -0.12 0.699  \n10 location          0.12 0.712  \n11 weight           -0.02 0.765  \n12 age               0    0.877  \n\n\nIn diesem Fall reicht die Schwelle von 15.7% nur für zwei Variablen (Heinze & Dunkler, 2017, p. 9). Wir erhalten die Variablen crp und bloodpressure für das Modell selektiert.\nIn der Tabelle 49.4 sehen wir dann nochmal die Anwendung der Funktion tbl_uvregression() auf den Ferkeldatensatz. Ich musste hier die Option pvalue_fun = ~style_pvalue(.x, digits = 2) entfernen, da sonst die Variable crp keinen \\(p\\)-Wert erhält. Leider sehe ich den \\(p\\)-Wert mit \\(&lt;0.001\\) in meiner Ausgabe in R aber wie du siehst, wird die Tabelle auf der Webseite nicht korrekt angezeigt. Das Problem von automatischen Tabellen. Ein Fluch und Segen zugleich. Du musst immer wieder überprüfen, ob die Optionen dann auch für sich und deine Analyse passen.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt;\n  tbl_uvregression(\n    method = glm,\n    y = infected,\n    method.args = list(family = binomial),\n    exponentiate = TRUE\n  ) |&gt;\n  add_global_p() |&gt;  # add global p-value \n  add_nevent() |&gt;    # add number of events of the outcome\n  add_q() |&gt;         # adjusts global p-values for multiple testing\n  bold_p() |&gt;        # bold p-values under a given threshold (default 0.05)\n  bold_p(t = 0.10, q = TRUE) |&gt; # now bold q-values under the threshold of 0.10\n  bold_labels()\n\n\n\n\nTabelle 49.4— Univariate Regression mit der Funktion tbl_uvregression().\n\n\n\n\n\n\n  \n    \n      Characteristic\n      N\n      Event N\n      OR\n      95% CI\n      p-value\n      q-value1\n    \n  \n  \n    age\n412\n276\n1.00\n0.95, 1.04\n0.9\n0.9\n    sex\n412\n276\n\n\n0.2\n0.4\n        female\n\n\n—\n—\n\n\n        male\n\n\n0.75\n0.49, 1.15\n\n\n    location\n412\n276\n\n\n0.3\n0.5\n        north\n\n\n—\n—\n\n\n        northeast\n\n\n1.12\n0.61, 2.10\n\n\n        northwest\n\n\n0.67\n0.39, 1.14\n\n\n        west\n\n\n0.79\n0.43, 1.44\n\n\n    activity\n412\n276\n1.02\n0.90, 1.16\n0.7\n0.9\n    crp\n412\n276\n2.62\n2.14, 3.27\n&lt;0.001\n&lt;0.001\n    frailty\n412\n276\n\n\n0.5\n0.7\n        frail\n\n\n—\n—\n\n\n        pre-frail\n\n\n1.17\n0.59, 2.27\n\n\n        robust\n\n\n0.88\n0.46, 1.64\n\n\n    bloodpressure\n412\n276\n1.08\n1.02, 1.15\n0.012\n0.053\n    weight\n412\n276\n0.98\n0.86, 1.12\n0.8\n0.9\n    creatinin\n412\n276\n1.12\n0.97, 1.30\n0.13\n0.4\n  \n  \n    \n      Abbreviations: CI = Confidence Interval, OR = Odds Ratio\n    \n  \n  \n    \n      1 False discovery rate correction for multiple testing\n    \n  \n\n\n\n\n\n\n\nNeben der Berechnung von univariaten logistischen Regressionen ist auch die Darstellung der Daten in einer Tabelle 49.5 bei Medizinern sehr beliebt. Deshalb an dieser Stelle auch die Tabelle 1 (eng. table 1) für die Zusammenfasung der Daten getrennt nach dem Infektionsstatus zusammen mit dem \\(p\\)-Wert. Ich nutze hier die Funktion tbl_summary() aus dem R Paket {gtsummary}.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt; tbl_summary(by = infected) |&gt; add_p()\n\n\n\n\nTabelle 49.5— Zusammenfasung der Daten getrennt nach dem Infektionsstatus zusammen mit dem \\(p\\)-Wert.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\n0\nN = 1361\n1\nN = 2761\np-value2\n\n\n\n\nage\n59.5 (57.0, 63.0)\n60.0 (57.0, 63.0)\n0.9\n\n\nsex\n\n\n\n\n0.2\n\n\n    female\n47 (35%)\n114 (41%)\n\n\n\n\n    male\n89 (65%)\n162 (59%)\n\n\n\n\nlocation\n\n\n\n\n0.3\n\n\n    north\n36 (26%)\n85 (31%)\n\n\n\n\n    northeast\n23 (17%)\n61 (22%)\n\n\n\n\n    northwest\n48 (35%)\n76 (28%)\n\n\n\n\n    west\n29 (21%)\n54 (20%)\n\n\n\n\nactivity\n13.40 (12.25, 14.36)\n13.24 (12.28, 14.54)\n0.8\n\n\ncrp\n19.12 (18.12, 19.84)\n20.57 (19.77, 21.47)\n&lt;0.001\n\n\nfrailty\n\n\n\n\n0.5\n\n\n    frail\n18 (13%)\n37 (13%)\n\n\n\n\n    pre-frail\n42 (31%)\n101 (37%)\n\n\n\n\n    robust\n76 (56%)\n138 (50%)\n\n\n\n\nbloodpressure\n56.2 (54.3, 58.5)\n57.2 (55.1, 59.6)\n0.021\n\n\nweight\n18.61 (17.33, 19.42)\n18.32 (17.19, 19.61)\n0.8\n\n\ncreatinin\n4.85 (3.67, 5.95)\n4.86 (4.06, 5.85)\n0.3\n\n\n\n1 Median (Q1, Q3); n (%)\n\n\n2 Wilcoxon rank sum test; Pearson’s Chi-squared test\n\n\n\n\n\n\n\n\n\n\n\nTja, auch hier ist dann die Frage, wie sortiere ich Variablen. Da es sich bei dem table 1-Stil um eine Übersichtstabelle handelt, ist die Tabelle nach den Variablen sortiert. Auch hier finden wir dann die Variablen crp und bloodpressure wieder. Das Problem hierbei ist natürlich, dass sich die \\(p\\)-Werte unterscheiden. Das muss ja auch so sein, denn eine logitische Regression ist nun mal kein Wilcoxon rank sum test oder ein Pearson’s Chi-squared test.\nFassen wir als Fazit dieses Abschnitts zusammen wie unsere Modelle nach der Variablenslektion aussehen würde. In unserem Beispiel für die Kichererbsen im sandigen Brandenburg würden wir dann folgendes Modell nehmen.\n\\[\ny \\sim \\beta_0 + sand + location + no3 + temp\n\\]\nUnsere infizierten Ferkel würden dann folgendes selektiertes Modell erhalten.\n\\[\ny \\sim \\beta_0 + crp + bloodpressure\n\\]\nSchauen wir mal, was die anderen Algorithmen noch so finden.\n\n\n49.3.3 Sonderfall Gaussian linear Regression\nFür die gaussian lineare Regression gibt es mit dem R Paket {oslrr} eine große Auswahl an Variable Selection Methods. Einfach mal die Möglichkeiten anschauen, die dort angeboten werden. Wir nutzen jetzt nicht alles was din oslrr möglich ist, sondern nur eien Auswahl. Zuerst müssen wir wieder unser Modell fitten. Wir nehmen alle Variablen mit rein und nutzen die Funktion lm() für ein lineares Modell mit einem normalverteilten Outcome \\(y\\) mit dryweight.\n\n\nR Code [zeigen / verbergen]\nchickenpea_fit &lt;- lm(dryweight ~ temp + rained + location + no3 + fe + sand + forest, \n                     data = chickpea_tbl)\n\n\nNun gibt es wirklich viele Lösungen in dem R Paket {oslrr}. Ich möchte einmal die Variante mit ols_step_all_possible präsentieren. In dem Fall rechnen wir alle Modelle die gehen. Und damit meine ich wirklich alle Modelle. Deshalb filtern wir noch nach dem \\(R^2_{adj}\\) um nicht von dem Angebot erschlagen zu werden. Darüber hinaus möchte ich nur Modelle sehen, die maximal vier Variablen mit in dem Modell haben. Das ist zufällig von mir gewählt… ich will ja ein kleineres Modell haben.\n\n\nR Code [zeigen / verbergen]\nols_step_all_possible(chickenpea_fit)$result |&gt;\n  as_tibble() |&gt;\n  arrange(desc(adjr)) |&gt;\n  filter(n &lt;= 4) |&gt; \n  select(predictors, adjr, aic) \n\n\n# A tibble: 98 × 3\n   predictors                 adjr   aic\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;\n 1 temp no3 sand forest      0.893  587.\n 2 temp rained no3 sand      0.886  592.\n 3 temp no3 fe sand          0.886  593.\n 4 temp no3 sand             0.884  593.\n 5 temp location no3 sand    0.882  596.\n 6 temp rained sand forest   0.881  597.\n 7 temp sand forest          0.877  599.\n 8 temp fe sand forest       0.876  600.\n 9 temp location sand forest 0.875  602.\n10 temp rained fe sand       0.872  603.\n# ℹ 88 more rows\n\n\nEine Alternative ist die Funktion ols_step_backward_aic(), die es erlaubt die Selektion anhand dem \\(AIC\\)-Wert zu machen. Der \\(AIC\\)-Wert beschreibt die Güte eines Modells und je kleiner der \\(AIC\\)-Wert ist, desto besser ist das Modell im Vergleich zu anderen Modellen gleicher Art. Da der \\(AIC\\)-Wert von den Daten abhängt in denen der \\(AIC\\)-Wert geschätzt wurde, können verschiedene \\(AIC\\)-Werte nicht übergreifend vergleichen werden.\n\n\nR Code [zeigen / verbergen]\nchick_step_aic &lt;- ols_step_backward_aic(chickenpea_fit)\n\n\nIn Abbildung 49.1 sehen wir einmal den Verlauf der \\(AIC\\)-Wert durch die Entfernung der jeweiligen Variable. Wenn du auf die y-Achse schaust, ist der Effekt numerisch nicht sehr groß. Davon darf man sich aber nicht beeindrucken lassen., Wir erhalten ein besseres Modell, wenn wir Variablen entfernen. Darüber hinaus sehen wir auch eine Sättigung.\n\n\nR Code [zeigen / verbergen]\nplot(chick_step_aic) \n\n\n\n\n\n\n\n\nAbbildung 49.1— Visualisierung der ols_step_backward_aic mit der Reduktion des AIC-Wertes.\n\n\n\n\n\nGut, und wie sieht nun unser finales Modell aus? Dafür müssen wir usn aus dem Objekt chick_step_aic das model raus ziehen. Dafür nutzen wir die Funktion pluck(). Dann noch die Ausgabe in die Funktion model_parameters() gepipt und schon haben wir das finale Modell nach \\(AIC\\)-Werten in einer gaussian linearen Regression.\n\n\nR Code [zeigen / verbergen]\npluck(chick_step_aic, \"model\") |&gt; \n  model_parameters()\n\n\nParameter       | Coefficient |   SE |          95% CI | t(89) |      p\n-----------------------------------------------------------------------\n(Intercept)     |       -2.09 | 9.44 | [-20.85, 16.67] | -0.22 | 0.825 \ntemp            |        2.37 | 0.22 | [  1.94,  2.81] | 10.88 | &lt; .001\nrained [low]    |        1.79 | 1.18 | [ -0.56,  4.15] |  1.51 | 0.133 \nno3             |        1.42 | 0.40 | [  0.62,  2.22] |  3.53 | &lt; .001\nsand            |        3.03 | 0.12 | [  2.80,  3.26] | 26.12 | &lt; .001\nforest [&gt;1000m] |       -3.17 | 1.11 | [ -5.38, -0.95] | -2.84 | 0.006 \n\n\nSpannenderweise ist location nicht mehr im finalen Modell plus die Variable location flog auch sehr früh raus. Das passt auch besser zu den Daten. Ich hatte die Daten so gebaut, dass der Ort eigentlich keinen Effekt haben sollte. Wir sehen, dass je nach Verfahren was anderes herauskommt. Aber Achtung, das schrittweise Verfahren ist der Auswahl nach \\(p\\)-Werten auf jeden Fall vorzuziehen!\n\n\n49.3.4 Schrittweise mit stepAIC\nWas das R Paket {oslrr} für die gaussian linear Regression kann, kann das R Paket {MASS} mit der Funktion stepAIC für den Rest der möglichen Verteilungen. Da wir mit dem Fekerldatensatz ein binominales Outcome \\(y\\) mit infected vorliegen haben nutzen wir un die Funktion stepAIC(). Wir hätten auch den Kichererbsendatensatz mit der Funktion bearbeiten können, aber im Falle der Normalverteilung stehen uns dann eben noch andere Algorithmen zu Verfügung. Wie immer müssen wir zuerst das volle Modell mit der Funktion glm() fitten. Wir geben noch die Verteilungsfamilie mit family = binomial noch mit an und definieren so eine logistische lineare Regression.\n\n\nR Code [zeigen / verbergen]\nfit &lt;- glm(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, \n           data = pig_tbl, family = binomial)\n\n\nNachdem wir das Modell gefittet haben, können wir das Modell direkt in die Funktion stepAIC stecken. Wir nutzen noch die Option direction = \"backward\" um eine Rückwärtsselektion durchzuführen.\n\n\nR Code [zeigen / verbergen]\nfit_step &lt;- stepAIC(fit, direction = \"backward\")\n\n\nStart:  AIC=421.22\ninfected ~ age + sex + location + activity + crp + frailty + \n    bloodpressure + weight + creatinin\n\n                Df Deviance    AIC\n- location       3   398.49 418.49\n- frailty        2   396.61 418.61\n- weight         1   395.22 419.22\n- age            1   395.24 419.24\n- activity       1   395.47 419.47\n- sex            1   395.93 419.93\n- creatinin      1   396.74 420.74\n&lt;none&gt;               395.22 421.22\n- bloodpressure  1   399.67 423.67\n- crp            1   504.90 528.90\n\nStep:  AIC=418.49\ninfected ~ age + sex + activity + crp + frailty + bloodpressure + \n    weight + creatinin\n\n                Df Deviance    AIC\n- frailty        2   399.68 415.68\n- weight         1   398.50 416.50\n- age            1   398.50 416.50\n- activity       1   398.83 416.83\n- sex            1   399.01 417.01\n- creatinin      1   400.10 418.10\n&lt;none&gt;               398.49 418.49\n- bloodpressure  1   403.24 421.24\n- crp            1   509.50 527.50\n\nStep:  AIC=415.68\ninfected ~ age + sex + activity + crp + bloodpressure + weight + \n    creatinin\n\n                Df Deviance    AIC\n- weight         1   399.69 413.69\n- age            1   399.73 413.73\n- activity       1   400.06 414.06\n- sex            1   400.30 414.30\n- creatinin      1   401.21 415.21\n&lt;none&gt;               399.68 415.68\n- bloodpressure  1   404.17 418.17\n- crp            1   511.29 525.29\n\nStep:  AIC=413.69\ninfected ~ age + sex + activity + crp + bloodpressure + creatinin\n\n                Df Deviance    AIC\n- age            1   399.74 411.74\n- activity       1   400.09 412.09\n- sex            1   400.40 412.40\n- creatinin      1   401.22 413.22\n&lt;none&gt;               399.69 413.69\n- bloodpressure  1   404.18 416.18\n- crp            1   512.26 524.26\n\nStep:  AIC=411.74\ninfected ~ sex + activity + crp + bloodpressure + creatinin\n\n                Df Deviance    AIC\n- activity       1   400.11 410.11\n- sex            1   400.45 410.45\n- creatinin      1   401.40 411.40\n&lt;none&gt;               399.74 411.74\n- bloodpressure  1   404.20 414.20\n- crp            1   512.28 522.28\n\nStep:  AIC=410.11\ninfected ~ sex + crp + bloodpressure + creatinin\n\n                Df Deviance    AIC\n- sex            1   400.47 408.47\n- creatinin      1   401.86 409.86\n&lt;none&gt;               400.11 410.11\n- bloodpressure  1   404.72 412.72\n- crp            1   513.77 521.77\n\nStep:  AIC=408.47\ninfected ~ crp + bloodpressure + creatinin\n\n                Df Deviance    AIC\n- creatinin      1   402.21 408.21\n&lt;none&gt;               400.47 408.47\n- bloodpressure  1   406.37 412.37\n- crp            1   514.11 520.11\n\nStep:  AIC=408.21\ninfected ~ crp + bloodpressure\n\n                Df Deviance    AIC\n&lt;none&gt;               402.21 408.21\n- bloodpressure  1   408.12 412.12\n- crp            1   516.27 520.27\n\n\nJetzt ist die Selektion durchgelaufen und wir sehen in jeden Schritt welche Variable jeweils entfernt wurde und wie sich dann der \\(AIC\\)-Wert ändert. Wir starten mit einem \\(AIC = 425.65\\) und enden bei einem \\(AIC=415.01\\). Schauen wir uns nochmal das finale Modell an.\n\n\nR Code [zeigen / verbergen]\nfit_step |&gt; \n  model_parameters()\n\n\nParameter     | Log-Odds |   SE |           95% CI |     z |      p\n-------------------------------------------------------------------\n(Intercept)   |   -23.54 | 3.14 | [-29.96, -17.61] | -7.49 | &lt; .001\ncrp           |     0.97 | 0.11 | [  0.76,   1.20] |  8.83 | &lt; .001\nbloodpressure |     0.09 | 0.04 | [  0.02,   0.16] |  2.39 | 0.017 \n\n\nHier erscheint jetzt noch die Variable sex mit in der Auswahl. Das hat natürlich auch weitreichende Auswirkungen! Es macht schon einen gewaltigen Unterschied, ob wir annehmen das, dass Geschelcht der Ferkel keinen Einfluss auf die Infektion hat oder eben doch. Wir sehen auch hier, dass wir Aufpassen müssen wenn wir eine Variablenselektion durchführen. Aber Achtung, das schrittweise Verfahren ist der Auswahl nach \\(p\\)-Werten auf jeden Fall vorzuziehen!\n\n\n49.3.5 Feature Selektion mit ranger\nIn diesem Abschnitt wollen wir die Variablenselektion mit einem maschinellen Lernverfahren durchführen. Im Bereich des maschinellen Lernens heist die Variablenselektion dann aber Feature Selektion. Wir versuchen jetzt die Selektion auf den Orginaldaten durchzuführen. Eigentlich wird empfohlen die Daten vorher zu normalisieren und dann mit den maschinellen Lernverfahren zu nutzen.\n\n\n\n\n\n\nStandardisieren oder Normalisieren von Daten\n\n\n\nEine Herausforderung für maschinelle Lernverfahren sind nicht normalisierte Daten. Das heist, dass wir Variablen haben, die kategorial oder kontinuierlich sein können oder aber sehr unterschiedlich von den Einheiten sind. Deshalb wird empfohlen die Daten vorher zu Standardisieren oder zu Normalisieren. In dem Kapitel 20 kannst du mehr über das Transformieren von Daten nachlesen.\n\n\nWir nutzen als erstes einen Random Forest Algorithmus wie er in Kapitel 78 beschrieben ist. Es bietet sich hier die Implementation im R Paket {ranger} an. Bevor wir aber einen Random Forest auf unsere Daten laufen lassen, Standardisieren wir unsere Daten nochmal. Überall wo wir einen numerischen Wert als Variableneintrag haben rechnen wir eine \\(z\\)-Transformation. Wir erhalten dann die standardisierten Daten zurück.\n\n\nR Code [zeigen / verbergen]\npig_norm_tbl &lt;- pig_tbl |&gt; \n  mutate(across(where(is.character), as_factor),\n         across(where(is.numeric), dlookr::transform, \"zscore\"))\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(where(is.numeric), dlookr::transform, \"zscore\")`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\nR Code [zeigen / verbergen]\npig_norm_tbl\n\n\n# A tibble: 412 × 10\n   age        sex    location  activity    crp        frailty   bloodpressure\n   &lt;transfrm&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;transfrm&gt;  &lt;transfrm&gt; &lt;fct&gt;     &lt;transfrm&gt;   \n 1  0.2156014 male   northeast  1.23906607  1.6154076 robust     1.6152124   \n 2 -1.5521155 male   northwest -0.15495130 -0.9942285 robust    -0.7895759   \n 3  1.3204244 female northeast -1.18531196 -0.9104969 robust     0.3274677   \n 4 -0.2263278 female north      0.03899895 -0.4848611 robust    -0.2085934   \n 5  0.6575306 male   northwest  0.87540937  1.0502190 robust    -0.4391895   \n 6 -1.1101862 male   northwest  1.54211333  0.9664873 robust     1.0312351   \n 7 -2.4359739 male   west       0.32386336 -0.7569889 pre-frail -0.6488224   \n 8 -1.5521155 male   northwest  0.13597407 -0.7569889 robust    -0.4122367   \n 9 -0.4472924 female west      -0.87014282  1.2735034 robust     0.6838436   \n10 -0.6682570 male   northwest  0.46326510  0.6245832 robust    -0.3343731   \n# ℹ 402 more rows\n# ℹ 3 more variables: weight &lt;transfrm&gt;, creatinin &lt;transfrm&gt;,\n#   infected &lt;transfrm&gt;\n\n\nDen Random Forest rechnen wir mit der Funktion ranger(). Dafür müssen wir wieder unser vollständiges Modell definieren und können dann die Funktion starten. Damit wir eine Variablenwichtigkeit (eng. variable importance) wiederbekommen, müssen wir noch die Option importance = \"permutation\" verwenden.\n\n\nR Code [zeigen / verbergen]\nfit_raw &lt;- ranger(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, \n                  data = pig_tbl, ntree = 1000, importance = \"permutation\")\n\npluck(fit_raw, \"variable.importance\") |&gt; \n  sort(decreasing = TRUE) |&gt; \n  round(3)\n\n\n          crp bloodpressure     creatinin      location       frailty \n        0.093         0.006         0.004         0.002         0.000 \n          sex        weight      activity           age \n       -0.001        -0.002        -0.002        -0.003 \n\n\nWir sehen, dass wir als wichtigste Variable wiederum crp zurückbekommen. Danach wird es schon etwas schwieriger, da die Werte sehr schnell kleiner werden und auch ein Art Plateau bilden. Daher würde man hier nur annehmen, dass crp bedeutend für das Modell ist. Es kann aber auch sein, dass hier eine kontinuierliche Variable sehr vom Algorithmus bevorzugt wurde. Daher schauen wir uns die Sachlage einmal mit den standardisierten Daten an.\n\n\nR Code [zeigen / verbergen]\nfit_norm &lt;- ranger(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin, \n                  data = pig_norm_tbl, ntree = 1000, importance = \"permutation\")\n\npluck(fit_norm , \"variable.importance\") |&gt; \n  sort(decreasing = TRUE) |&gt; \n  round(3)\n\n\n          crp     creatinin bloodpressure      location       frailty \n        0.425         0.028         0.016         0.003         0.001 \n     activity           sex           age        weight \n       -0.004        -0.005        -0.005        -0.005 \n\n\nAuch hier erhalten wir ein ähnliches Bild. Audf jeden Fall ist crp bedeutend für den Infektionsstatus. Danach werden die Werte etwas zufällig. Wir können Werte für die variable importance nicht unter Datensätzen vergleichen. Jeder Datensatz hat seine eigene variable importance, die von den Werten in dem Datensatz abhängt.\nWir ziehen als Fazit, dass wir nur crp als bedeutenden Wert für die Klassifikation des Infektionsstatus ansehen würden. Hier stehen wir wirklich etwas wie das Schwein vor dem Uhrwerk, denn was nun richtiger ist, stepAIC oder ranger lässt sich so einfach nicht bewerten. Zum einen wollen wir ja eigentlich mit Random Forest eine Klassifikation durchführen und mit linearen Regressionsmodellen eher kausale Modelle schätzen. Am Ende musst du selber abschätzen, was in das finale Modell soll. Ich kann ja auch den Threshold für den Variablenausschluss selber wählen. Wähle ich einen Threshold von \\(0.008\\), dann hätte ich crp, weight, bloodpressure und sex mit in dem finalen Modell.\n\n\n49.3.6 Feature Selektion mit boruta\nMit dem Boruta Algorithmus steht uns noch eine andere Implemnetierung des Random Forest Algorithmus zu verfügung um Feature Selektion zu betreiben. Wir nutzen wieder den Boruta Algorithmus in seine einfachen Form und gehen nicht tiefer auf alle Optionen ein. Wir nehmen wieder als Beispiel den Datensatz zu den infizierten Ferkeln und nutzen in diesem Fall auch nur die rohen Daten. Über eine Standardisierung könnte man wiederum nachdenken.\n\n\nIch empfehle noch das Tutorium Feature Selection in R with the Boruta R Package. Wir gehen hier nicht tiefer auf die Funktionalität von Boruta ein.\n\n\n\n\n\n\nStandardisieren oder Normalisieren von Daten\n\n\n\nEine Herausforderung für maschinelle Lernverfahren sind nicht normalisierte Daten. Das heist, dass wir Variablen haben, die kategorial oder kontinuierlich sein können oder aber sehr unterschiedlich von den Einheiten sind. Deshalb wird empfohlen die Daten vorher zu Standardisieren oder zu Normalisieren. In dem Kapitel 20 kannst du mehr über das Transformieren von Daten nachlesen.\n\n\nUm die Funktion Boruta() zu nutzen brauchen wir wieder das Modell und den Datensatz. Sonst ist erstmal nichts weiter anzugeben. Die Funktion läuft dann durch und gibt auch gleich den gewollten Informationshappen. Wichtig ist hierbei, dass wir natürlich noch andere Optionen mit angeben können. Wir können die Anzahl an Iterationen erhöhen und andere Tuning Parameter eingeben. Hier muss man immer schauen was am besten passt. Da würde ich auch immer rumprobieren und auf der Hilfeseite der Funktion ?Boruta einmal nachlesen.\n\n\nR Code [zeigen / verbergen]\nset.seed(20221031)\nboruta_output &lt;- Boruta(infected ~ age + sex + location + activity + crp + frailty + bloodpressure + weight + creatinin,  \n                        data = pig_tbl)  \n\nboruta_output\n\n\nBoruta performed 99 iterations in 6.820581 secs.\n 1 attributes confirmed important: crp;\n 6 attributes confirmed unimportant: activity, age, frailty, location,\nsex and 1 more;\n 2 tentative attributes left: bloodpressure, creatinin;\n\n\nManchmal ist es super praktisch, wenn eine Funktion einem die Antwort auf die Frage welche Variable bedeutend ist, gleich liefert. Wir erhalten die Information, dass die Variable crp als bedeutsam angesehen wird. Wir können uns den Zusammenhang auch in der Abbildung 49.2 auch einmal anschauen. Die grünen Variablen sind die bedeutenden Variablen.\n\n\nR Code [zeigen / verbergen]\nplot(boruta_output, cex.axis=.7, las=2, xlab=\"\", main=\"Variable Importance\")  \n\n\n\n\n\n\n\n\nAbbildung 49.2— Visualisierung der Boruta Ausgabe.\n\n\n\n\n\nAm Ende finden wir auch hier die Variable crp als einziges als bedeutend wieder. Wenn wir noch Variablen haben die verdächtig oder vorläufig bedeutend sind, angezeigt durch 2 tentative attributes left: bloodpressure, sex, dann können wir noch die Funktion TentativeRoughFix() nutzen. Die Funktion TentativeRoughFix() rechnet die Variablen nochmal nach und versucht alle Variablen in bedeutend oder nicht bedeutend zu klassifizieren. Wir haben ja zwei tentative Variablen in unseren Fall vorliegen, also nutzen wir noch kurz die Funktion um uns auch hier Klarheit zu schaffen.\n\n\nR Code [zeigen / verbergen]\nTentativeRoughFix(boruta_output)\n\n\nBoruta performed 99 iterations in 6.820581 secs.\nTentatives roughfixed over the last 99 iterations.\n 2 attributes confirmed important: creatinin, crp;\n 7 attributes confirmed unimportant: activity, age, bloodpressure,\nfrailty, location and 2 more;\n\n\nAm Ende ist die klare Aussage einer Funktion auch immer ein zweischneidiges Schwert. Wir verlieren jetzt noch die beiden tentative Variablen. Wo wir bei ranger die Qual der Wahl haben, werden wir bei Boruta eher vor vollendete Tatsachen gestellt. Meistens neigt man nach einer Boruta-Analyse nicht dazu noch eine zusätzliche Variable mit ins Modell zu nehmen. Dafür ist dann die Ausgabe zu bestimmt, obwohl die Entscheidung am Ende auch genau so unsicher ist wie von ranger und den anderen Modellen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Variablenselektion</span>"
    ]
  },
  {
    "objectID": "stat-modeling-variable-selection.html#referenzen",
    "href": "stat-modeling-variable-selection.html#referenzen",
    "title": "49  Variablenselektion",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nHeinze, G., & Dunkler, D. (2017). Five myths about variable selection. Transplant International, 30(1), 6–10.\n\n\nHeinze, G., Wallisch, C., & Dunkler, D. (2018). Variable selection–a review and recommendations for the practicing statistician. Biometrical journal, 60(3), 431–449.\n\n\nTalbot, D., & Massamba, V. K. (2019). A descriptive review of variable selection methods in four epidemiologic journals: there is still room for improvement. European journal of epidemiology, 34(8), 725–730.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Variablenselektion</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html",
    "href": "stat-modeling-missing.html",
    "title": "50  Fehlende Werte",
    "section": "",
    "text": "50.1 Was sind fehlende Werte?\nLetzte Änderung am 09. April 2024 um 19:32:08\nWie gehen wir mit fehlenden Werten um? Wir können fehlende Werte imputieren. Wann brauchen wir eigentlich die Imputation (deu. Ersetzung) von fehlenden Werten in unseren Daten? Zum einen brauchen wir die Imputation von fehlenden Werten, wenn wir eine multiple lineare Regression rechnen wollen. Wenn wir einen fehlenden Wert in einer Spalte haben, so fällt diese Beobachtung aus dem gesamten Modell heraus. Das heist, dass wir Fallzahl verlieren sobald wir fehlende Werte in den Daten haben. Tritt dies in einem geplanten Experiment auf? Das kommt darauf an. Wenn du selber die Daten erhebst, dann ist es eher unwahrscheinlich, du wirst vermutlich darauf achten möglichst alle Daten zu erheben. Meistens treten fehlende Werte bei sehr großen Datensätzen auf, die aus externen Quellen kommen. Werden diese Daten dann kombiniert, sieht die Fallzahl beeindruckend aus, aber wenn die Beobachtungen mit mindestens einem fehlenden Wert gelöscht werden, sind die Fallzahlen wieder ganz klein. Wir imputieren nur \\(x\\) Werte und niemals das Outcome \\(y\\). Im Zweifel musst du schauen, dass du dir über select() die einzelnen Datensätze zusammenbaust, die du imputieren willst. Ein fehlender Wert wird in R als NA (eng. not availabe) bezeichnet.\nZum anderen imputieren wir auch Datensätze, die wir später im Rahmen des maschinellen Lernen im Kapitel 73 benutzen wollen. Auch hier dürfen keine fehlenden Werte in den Daten auftreten. Da dies aber bei sehr großen Datensätzen, die zum Beispiel automatisch erstellt wurden, schnell passieren kann, brauchen wir eine Möglichkeit die fehlenden Werte zu ersetzen. Da wir eigentlich gar nicht an dem Modell an sich interessiert sind, sondern nur an der guten Vorhersage durch das Modell können wir hier auch Daten imputieren. Auch hier haben wir natürlich wieder eine große Anzahl an möglichen Verfahren. Ich werde hier die häufigsten Vorstellen und darüber diskutieren welche am besten passen würden. Wir immer kommt es auf den Kontext der Fragestellung an. Willst du eher ein exploratives Modell rechnen, dann kommt die Imputation von fehlenden Werten eher nicht für dich in Frage. Wenn du maschinelle Lernverfahren nutzt um Modelle zur Vorhersage zu bauen, dann ist die Imputation von fehlenden Werten eher nützlich für dich.\nWir beschränken uns hier auf drei Arten von fehlenden Daten. Es gibt noch mehr Abstufungen, aber für den Einstieg reicht es, wenn wir nach drei Typen von fehlenden Daten unterscheiden. Die anderen Typen sind Mischtypen bzw. nicht so von Belang für die Anwendung.\nWie schon angemerkt. Die Struktur der fehlenden Werte lässt sich meist schwer vorhersagen bzw. bestimmen. Wir müssen eine Annahme treffen und diese dann auch in unseren statistischen Berichte oder Abschlussarbeit niederschreiben. Es gibt dann häufig auch Mischformen: MCAR, MAR, MNAR können ineinander verwoben sein. Häufig glauben wir daran, dass unsere Daten der MCAR genügen. Unter der Annahme, dass es sich bei den Daten um MCAR handelt, können auch zu viele fehlende Daten ein Problem darstellen. In der Regel liegt die sichere Obergrenze bei großen Datensätzen bei 5% der Gesamtmenge. Wenn die fehlenden Daten für ein bestimmtes Merkmal oder eine Stichprobe mehr als 5% betragen, sollten Sie dieses Merkmal oder diese Stichprobe wahrscheinlich weglassen. Wir prüfen daher im folgenden Abschnitten, ob in den Merkmalen (Spalten) und Stichproben (Zeilen) mehr als 5% der Daten fehlen. Auch hier gibt es dann Möglichkeiten erstmal die Daten zu visualiseren und dann zu schauen, welches Verfahren zur Imputation geeignet ist.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#was-sind-fehlende-werte",
    "href": "stat-modeling-missing.html#was-sind-fehlende-werte",
    "title": "50  Fehlende Werte",
    "section": "",
    "text": "MCAR (eng. missing completely at random): völlig zufällig fehlende Daten. Dies ist das wünschenswerte Szenario im Falle fehlender Daten. Fehlende Werte werden als missing completely at random bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes weder von erfassten noch unerfassten Merkmalen abhängt. Daher kann man sagen, dass MCAR-Werte die Fallzahl reduzieren, aber das Studienergebnis nicht verzerren.\nMAR (eng. missing at random): Fehlende Werte werden als missing at random bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von einem anderen Merkmal abhängt aber nicht von der Ausprägung des fehlenden Merkmals selbst. MAR-Werte reduzieren die Fallzahl und verzerren möglicherweise das Studienergebnis.\nMNAR (eng. missing not at random): nicht zufällig fehlende Daten. Fehlende, nicht zufällige Daten sind ein schwerwiegenderes Problem, und in diesem Fall kann es ratsam sein, den Datenerhebungsprozess weiter zu überprüfen und zu versuchen zu verstehen, warum die Informationen fehlen. Wenn zum Beispiel die meisten Teilnehmer einer Umfrage eine bestimmte Frage nicht beantwortet haben, warum haben sie das getan? War die Frage unklar? Daher werden fehlende Werte als missing not at random bezeichnet, wenn die Wahrscheinlichkeit für das Fehlen eines Wertes von der Ausprägung des fehlenden Merkmals selbst abhängt. MNAR-Werte reduzieren die Fallzahl und verzerren das Studienergebnis. MNAR sind Non-ignorable missings und müssen auch berichtet werden.\n\n\n\n\n\n\n\n\nSensitivitätsanalysen nach der Imputation von fehlenden Werten\n\n\n\nNachdem wir neue Daten bzw. Beobachtungen in unseren Daten erschaffen haben, ist es üblich noch eine Sensitivitätsanalysen durchzuführen. Wir Vergleich dann die Imputation mit der complete-case Analyse. Oder wir wollen die Frage beantworten, was hat eigentlich meine Imputation am Ergebnis geändert? Das machen wir dann gesammelt in dem Kapitel 51 zu den Sensitivitätsanalysen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#univariat-vs.-multivariate-imputation",
    "href": "stat-modeling-missing.html#univariat-vs.-multivariate-imputation",
    "title": "50  Fehlende Werte",
    "section": "50.2 Univariat vs. multivariate Imputation",
    "text": "50.2 Univariat vs. multivariate Imputation\nWas soll jetzt an dieser Stelle univariat und multivariat bedeuten? Wir haben uns die beiden Begriffe aufgehoben und nutzen diese Begriffe hier in dem Kontext der Imputation. Wir sprechen von einer univariaten Imputation, wenn wir nur eine Variable \\(x\\) imputieren. Das heißt, wir ignorieren die Zusammenhänge der Variable \\(x\\) zu irgendwelchen anderen Variablen in dem Datensatz. Das macht zum Beispiel für die Körpergröße in unserem Gummibärchendatensatz nicht so viel Sinn, denn wir haben ja Frauen und Männer befragt. Wir müssen die Körpergröße getrennt für die Variable Geschlecht imputieren. Wenn wir also Variablen mit Bezug zu anderen Variablen imputieren, dann nennen wir diese Verfahren multivariate Imputationsverfahren. In den folgenden Abschnitten werde ich einmal die gängisten univariaten Verfahren vorstellen und zwei sehr gut funktionierende multivariate Verfahren.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#genutzte-r-pakete",
    "href": "stat-modeling-missing.html#genutzte-r-pakete",
    "title": "50  Fehlende Werte",
    "section": "50.3 Genutzte R Pakete",
    "text": "50.3 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, see, readxl, \n               mice, naniar, missForest, missRanger,\n               dlookr, parameters, recipes)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#daten",
    "href": "stat-modeling-missing.html#daten",
    "title": "50  Fehlende Werte",
    "section": "50.4 Daten",
    "text": "50.4 Daten\nIn diesem Kapitel nutzen wir zwei Datensätze. Zum einen den echten Datensatz mit den Gummibärchen aus dem Kapitel 6 und dem Datensatz zu dem Infketionsstatus von Ferkeln aus dem Kapitel 7.2. Der Ferkeldatzensatz hat keine fehlenden Werte und deshalb müssen wir da noch einmal nachhelfen und künstlich fehlende Werte erschaffen. Schauen wir uns nochmal den Gummibärchendatensatz an und wählen nur die Spalten gender, age, height, semester, count_bears, count_color und most_liked. Die anderen Spalten haben keine fehlenden Werte bzw. wenn eine Farbe der Bärchen nicht in der Tüte vorgekommen ist, dann war keine drin. Das sind dann keine fehlenden Werte.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\")  |&gt;\n  select(gender, age, height, semester, count_bears, count_color,\n         most_liked) |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked),\n         count_color = as_factor(count_color)) \n\n\nZum anderen laden wir nochmal den Ferkeldatensatz mit unseren \\(n = 412\\) Ferkeln.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") \n\n\nWir haben haben aber in dem Ferkeldatensatz keine fehlenden Werte vorliegen. Deshalb nutzen wir die Funktion generateNA() aus dem R Paket {missRanger}. Wir können in der Funktion missRanger() angeben wieviel fehlende Werte global in dem Datensatz erschaffen werden sollen oder aber per Spalte. Wir erschaffen die fehlenden Werte bei der Spalte, denn die zehnte Spalte ist unser Outcome infected und da wollen wir ja keine fehlenden Werte imputieren. Fehlende Werte in der Outcomespalte bedeutet dann ja, dass die Beobachtung aus den Daten entfernt wird. Das brauchen wir aber hier nicht. Wie du sehen kannst erschaffen wir in jeder Spalte ein unterschiedliches Verhältnis von fehlenden Daten.\n\n\nR Code [zeigen / verbergen]\npig_miss_tbl &lt;- pig_tbl |&gt; \n  generateNA(c(0.1, 0.15, 0.05, 0.3, 0.1, 0.05, 0.15, 0.01, 0.05, 0))\n\n\nNun haben wir zwei Datensätze vorliegen an denen wir einmal schauen können, wie wir fehlende Daten imputieren können. Ein fehlender Wert wird in R als NA (eng. not availabe) bezeichnet.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#numerischer-überblick",
    "href": "stat-modeling-missing.html#numerischer-überblick",
    "title": "50  Fehlende Werte",
    "section": "50.5 Numerischer Überblick",
    "text": "50.5 Numerischer Überblick\nManchmal soll es nur ein schneller numerischer Überblick über die fehlenden Werte sein. Dafür hilft dann auch das R Paket {naniar}. Wir erhalten relativ schnell die Anzahl und die prozentuale Häufigkeit der fehlenden Werte mit den Funktionen n_miss() und n_complete(). In den Schweinedaten haben wir dann eine Quote von 10.6% fehlenden Werten.\n\n\nR Code [zeigen / verbergen]\nn_miss(pig_miss_tbl)/n_complete(pig_miss_tbl)\n\n\n[1] 0.1066344\n\n\nÜber die Funktion miss_case_summary() kannst du dir dann noch mehr Informationen zu den einzelnen Beobachtungen wiedergeben lassen. Über die Funktion print() kannst du dir dann noch mehr Zeilen als die normalen zehn Zeilen ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\npig_miss_tbl |&gt; \n  miss_case_summary() |&gt; \n  print(n = 12)\n\n\n# A tibble: 412 × 3\n    case n_miss pct_miss\n   &lt;int&gt;  &lt;int&gt;    &lt;dbl&gt;\n 1     6      4       40\n 2    18      4       40\n 3    28      4       40\n 4   209      4       40\n 5   380      4       40\n 6    32      3       30\n 7    41      3       30\n 8    51      3       30\n 9    82      3       30\n10    89      3       30\n11   135      3       30\n12   262      3       30\n# ℹ 400 more rows\n\n\nSchauen wir uns mal die Schweine vier fehlenden Werten einmal an. Wir nutzen dazu die Funktion slice(), die es uns erlaubt die Zeilen zu extrahieren, welche für die Beobachtungen stehen.\n\n\nR Code [zeigen / verbergen]\npig_miss_tbl |&gt; \n  slice(c(1, 84, 227, 397))\n\n\n# A tibble: 4 × 10\n    age sex    location  activity   crp frailty   bloodpressure weight creatinin\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1    61 male   northeast     15.3  22.4 robust             62.2   19.0      4.44\n2    64 male   northwest     15.5  20.0 frail              52.3   20.9      3.58\n3    66 female west          11.0  20.0 robust             58.6   18.8      6.21\n4    62 &lt;NA&gt;   northwest     10.2  NA   pre-frail          58.0   21.5      4.73\n# ℹ 1 more variable: infected &lt;dbl&gt;\n\n\nDamit haben wir eigentlich die wichtigsten Funktionen zusammen. Es gibt noch einige mehr, die du nutzen kannst um zu erfahren wie viele fehlende Werte du eigentlich in den Daten hast. Meistens willst du aber die Häufigkeit wissen und welche Beobachtungen besonders viele fehlende Werte haben. Dann kannst du zum Beispiel dann wieder in deine Exceldatei zurückgehen und schauen, ob da ein Fehler vorliegt oder aber ob du noch die Daten irgendwo hast. Je nach Aufwand kannst du dann die Beobachtung in Excel entfernen. Sonst eben mit ! in der Form slice(!c(1, 84, 227, 397)) in der Funktion slice(). Damit schmeißt du dann die Beobachtungen aus dem Datensatz raus.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#visualisierung",
    "href": "stat-modeling-missing.html#visualisierung",
    "title": "50  Fehlende Werte",
    "section": "50.6 Visualisierung",
    "text": "50.6 Visualisierung\nWie immer ist es sehr wichtig, sich die Struktur der fehlenden Daten einmal zu veranschaulichen. Wir nutzen dazu zwei drei Funktion aus zwei R Paketen. Zum einen die Funktion vis_miss() und gg_miss_upset() aus dem R Paket {naniar} sowie die Funktion plot_na_pareto() aus dem R Paket {dlookr}. Wir schauen uns mit den Funktionen einmal die Daten an und entscheiden, ob wir wirklich MCAR als Struktur der fehlenden Daten vorliegen haben. Wie immer haben beide R Pakete noch eine Reihe von weiteren Funktionen zu bieten. Bei {naniar} sind es weitreichende Visualisierungen zu fehlenden Werten. Bei dlookr sind es eine ergiebige Auswahl an Funktionen zur Diagnose, Report und Explorative Datenanalyse.\nBetrachten wir zunächst die Gummibärchendaten in der Abbildung 50.1. Zuerst sehen wir in Abbildung 50.1 (a), dass sich einige Blöcke in der Variable Semester gebildet haben. Das kann auf einen nicht zufälliges fehlenden der Daten deuten. Auch scheint die Angabe von dem Lieblingsgeschmack in den älteren Beobachtungen besser eingetragen worden zu sein. Trotzdem können wir hier auf ein relativ zufälliges Fehlen der Daten tippen. Wir nehmen mit etwas Bauchschmerzen hier MCAR an und machen dann mit der Imputation weiter. Du könntest auch überlegen, alle fehlenden Wert zu entfernen. Es scheint, dass Beobachtungen häufig über Geschlecht, Alter, Körpergröße und Semester fehlen. Dieser Zusammenhang wird dann in Abbildung 50.1 (b) nochmal deutlich. Wir haben viele NA’s im Semester. Häufig sind dann diese fehlenden Werte aber auch gleichseitig mit fehlenden Werten in der Variable Körpergröße, Alter und Geschlecht verknüpft. In Abbildung 50.1 (c) sehen wir nochmal die Anteile an den fehlenden Werten pro Spalte.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Anzahl der fehlenden Werte zu den vorhandenen Werten mit der Funktion vismiss()\n\n\n\n\n\n\n\n\n\n\n\n(b) Anzahl der fehlenden Werte zu den vorhandenen Werten und deren Überlappung mit anderen Variablen mit der Funktion gg_miss_upset()\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Anzahl der fehlenden Wert in absoluter und relativer Angabe und deren kumulativer Verlauf. Die Funktion plot_na_pareto() gibt auch eine Wertung wieder.\n\n\n\n\n\n\n\nAbbildung 50.1— Visualisierung der fehlenden Werte im Gummibärchendatensatz. Alle drei Abbildungen sind etwas wiederholend, liefern aber ein gutes Gesamtbild.\n\n\n\n\nNachdem wir uns nun echte fehlende Werte in den Gummibärchendaten angesehen haben, wollen wir uns die zufällig erstellten fehlenden Daten in der Abbildung 50.2 einmal anschauen. In Abbildung 50.2 (a) sehen wir jetzt die zufällige Verteilung der fehlenden Werte nach der vorgegebenen Häufigkeit. Das passt dann auch gut zu der Abbildung 50.2 (c) in der wir die Anteile jeweils in absoluten und relativen Häufigkeiten sehen. Auch sind in Abbildung 50.2 (b) die Verbindungen der fehlenden Werte über die verschiedenen Variablen sehr zufällig. Wir haben kaum Blöcke von mehr als zwei Variablen, die gleichzeitig fehlen.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Anzahl der fehlenden Werte zu den vorhandenen Werten mit der Funktion vismiss()\n\n\n\n\n\n\n\n\n\n\n\n(b) Anzahl der fehlenden Werte zu den vorhandenen Werten und deren Überlappung mit anderen Variablen mit der Funktion gg_miss_upset()\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Anzahl der fehlenden Wert in absoluter und relativer Angabe und deren kumulativer Verlauf. Die Funktion plot_na_pareto() gibt auch eine Wertung wieder.\n\n\n\n\n\n\n\nAbbildung 50.2— Visualisierung der fehlenden Werte im Ferkeldatensatz. Alle drei Abbildungen sind etwas wiederholend, liefern aber ein gutes Gesamtbild.\n\n\n\n\nNachdem wir uns beide Datensätze nochmal in der Visualisierung der fehlenden Werte angeschaut haben, stellen wir natürlich fest, dass der Gummibärchendatensatz weniger zufällig fehlende Werte hat als der künstlich erschaffene Datensatz zu den Ferkeln. Dennoch wollen wir mit beiden Datensätzen einmal weitermachen und schauen, wie wir jetzt die fehlenden Werte oder auch NA’s in R imputieren können.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#univariate-imputation",
    "href": "stat-modeling-missing.html#univariate-imputation",
    "title": "50  Fehlende Werte",
    "section": "50.7 Univariate Imputation",
    "text": "50.7 Univariate Imputation\nFür die univariate Imputation von fehlenden Werten nutzen wir die Funktion impute_na() aus dem R Paket {dlookr}. Das R Paket {dlookr} hat eine große Auswahl an simplen Imputationsalgorithmen. Die univariate Variante der Imputation von fehlenden Werten ist eigentlich nur anzuraten, wenn wir eine Spalte vorliegen haben, wo fehlende Daten drin sind. Darüber hinaus haben die anderen Spalten keine Verbindung zu dieser Spalte. Dann mag es sinnvoll sein eine univariate Imputation zu nutzen. Ich selber nutze die univariate Imputation nur, wenn es schnell gehen soll und die Daten wenig Spalten haben. Passiert sehr selten.\nBei der univariaten Imputation müssen wir unterscheiden, welche Art die Spalte bzw. Variable ist, die wir imputieren wollen. Wenn die Spalte numerisch ist, daher ein double &lt;dbl&gt; oder integer &lt;int&gt; können wir folgende Optionen der Funktion impute_na() wählen. Wie immer hilft hier auch die Hilfeseite der Funkion ?impute_na() weiter.\n\nmean: Die Variable wird mit dem Mittelwert in der Variablenspalte imputiert. Daher werden alle fehlenden Werte mit dem Mittlwert der Variable ersetzt. Ja, das heist jetzt steht sehr häufig der Mittelwert in der Spalte.\nmedian: Die Variable wird mit dem Median in der Variablenspalte imputiert. Daher werden alle fehlenden Werte mit dem Median der Variable ersetzt. Ja, das heist jetzt auch hier, da steht sehr häufig der Median in der Spalte.\nmode: Dem Modus beziehungsweise den häufigsten Wert in der Variablenspalte können wir auch wählen um die fehlenden Werte zu ersetzen. Mit kontinuierlichen Werten ist diese Methoe nach dem Modus aber nicht anzuraten. Mit Kommastellen in der Variable gibt es schnell keinen oder nur einen Wert mit der absoluten Häufigkeit von zwei oder mehr.\n\nAnders sieht es aus, wenn die Spalte kategorisch ist, daher ein factor &lt;fct&gt; oder character &lt;chr&gt; können wir folgende Optionen der Funktion impute_na() wählen.\n\nmode: Wir imputieren mit dem Modus beziehungsweise den häufigsten Wert in der Variablenspalte und erstetzen damit jeden Wert mit dem häufigsten Wert in der Spalte.\nrpart: Wir können auch Recursive Partitioning and Regression Trees nutzen um eine kategorielle Variable zu imputieren, aber das geht hier dann zu weit. Siehe dazu dann auch das Kapitel 78.\n\nDamit haben wir alle Optionen einmal zur Hand. Damit sich das Kapitel nicht in die Unendlichkeit ausdehnt, wollen wir einmal die Funktion impute_na() an der Spalte age in dem Gummibärchendatensatz ausprobieren. Auch hier nutzen wir nur die mean- und median-Imputation. Du kannst dann gerne noch die anderen Optionen ausprobieren. Im Folgenden also der Code zusammen mit der Funktion mutate().\n\n\nR Code [zeigen / verbergen]\nimp_age_tbl &lt;- gummi_tbl |&gt; \n  mutate(mean_age_imp = imputate_na(gummi_tbl, semester, method = \"mean\"),\n         median_age_imp = imputate_na(gummi_tbl, semester, method = \"median\"),\n         mode_age_imp = imputate_na(gummi_tbl, semester, method = \"mode\"))\n\n\nWir haben uns also das neue Objekt imp_age_tbl erschaffen in dem die beiden neuen imputierten Spalten drin sind. Wenn du dir die Spalten einmal in R anschaust, wirst du sehen, dass viele Zahlen gleich sind. Die Zahlen sind gleich, weil sie eben den Mittelwert oder den Median entsprechen. In Abbildung 50.3 siehst du nochmal den Vergleich von den Werten vor der Imputation (orginal) und nach der Imputation (imputation). Wenn du die Spalte in die Funktion plot() steckst erkennt die Funktion, dass es sich um importierte Werte handelt und plotted daher die Werte getrennt. Das funktioniert natürlich nur nach der Nutzung der Funktion impute_na().\n\n\nR Code [zeigen / verbergen]\nplot(imp_age_tbl$mean_age_imp)\nplot(imp_age_tbl$median_age_imp)\nplot(imp_age_tbl$mode_age_imp)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Imputation mit dem Mittelwert.\n\n\n\n\n\n\n\n\n\n\n\n(b) Imputation mit dem Median.\n\n\n\n\n\n\n\n\n\n\n\n(c) Imputation mit dem Modus.\n\n\n\n\n\n\n\nAbbildung 50.3— Densityplot der Verteilungen vor und nach der Imputation.\n\n\n\n\nWir wir in der Abbildung erkennen können, funktioniert die Methode ganz gut. Wir erhalten aber sehr viel mehr Werte auf die Schwerpunkte der Verteilung. Daher kriegen wir eine sehr viel stärkere bimodale Verteilung heraus als wir vorher hatten. Insbesondere der Modus zeigt hier eine sehr verzerrte Imputation. Ob eine bimodale Verteilung so beim Alter passt ist schwer zu sagen. Bei der Körpergröße wäre es richtiger. Daher ist eine univariate Imputation immer mit Vorsicht zu genießen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-missing.html#multivariate-imputation",
    "href": "stat-modeling-missing.html#multivariate-imputation",
    "title": "50  Fehlende Werte",
    "section": "50.8 Multivariate Imputation",
    "text": "50.8 Multivariate Imputation\nIm Folgenden schauen wir uns zwei multivariate Verfahren an um fehlende Werte zu imputieren. In beiden Fällen entbindet uns, dass multivariat nicht davon nochmal zu schauen, ob unsere Daten einigermaßen konsistent imputiert wurden. Beide Verfahren haben ihre Vor und Nachteile.\n\nZum einen nutzen wir das R Paket {mice} in Kapitel 50.8.1. Wir müssen in mice für jede Spalte angeben, welcher Verteilung die Spalte folgt bzw. mit welche fortgeschrittenen Methode die Spalte imputiert werden soll. Die Imputation findet dann \\(m\\)-Mal über alle Variablen statt. Danach können wir dann die \\(m\\)-mal imputierten Datensätze weiter benutzen.\nWir nutzen als Alternative noch das R Paket {missRanger} in Kapitel 50.8.2. Wir müssen in dem R Paket {missRanger} nicht angeben welcher Verteilung die Spalten folgen. Daher ist missRanger etwas einfacher zu bedienen, aber auf der anderen Seite auch mehr eine Blackbox. Wir stecken Daten rein und erhalten einen imputierte Daten wieder. Das mag vielleicht auch ein Vorteil sein.\n\nBeide Verfahren liefern uns dann die imputierten Datensätze wieder und wir müssen dann in den entsprechenden Visualisierungen schauen, ob wir so mit der Imputation zufrieden sind.\n\n50.8.1 Imputation mit mice\nBeginnen wir also mit der Imputation unter der Verwendung von dem R Paket {mice}. Die Funktion, die die Imputation durchführt heist ebenfalls mice() was für Multivariate Imputation by Chained Equations steht. Wir nutzen aber nur die Abkürzung mice(). Bei der Nutzung von mice durchlaufen wir mehrere Schritte. Zuerst müssen wir der Funktion mitteilen, welche Eigenschaften die zu imputierenden Spalten haben. Auch hier gilt, die Hilfeseite von ?mice() hilft bei der Entscheidung welche Variante für die jeweilige Spalte in den Daten passt. Wenn wir eine Spalte gar nicht imputieren wollen, dann lassen wir den Eintrag in dem benamten Vektor einfach leer. Im Folgenden der benamte Vektor mit den Variablennamen und wie die einzelnen Variablen dann imputiert werden sollen.\n\n\nR Code [zeigen / verbergen]\nimp_method &lt;- c(gender = \"logreg\", \n                age = \"pmm\", \n                height = \"pmm\", \n                semester = \"pmm\", \n                count_bears = \"\", \n                count_color = \"polyreg\", \n                most_liked = \"polyreg\")\n\n\nDen Vektor imp_method nutzen wir jetzt in der Funktion mice() für die Option method = imp_method. Nun weis mice() wie die Daten für jede Spalte über alle anderen Spalten imputiert werden soll. Wichtig ist noch anzugeben, wie viele \\(m\\) imputierte Datensätze erschaffen werden sollen. Wir nehmen hier mal \\(m = 5\\) und wiederholen den Prozess nur \\(maxit = 3\\) Mal. Je höher maxit ist, desto genauer wird mice() aber desto mehr Iterationen müssen gerechnet werden. Jede Iteration dauert auch so seine Zeit.\n\n\nR Code [zeigen / verbergen]\nimp_gummi_tbl &lt;- mice(data = gummi_tbl, m = 5, maxit = 3, \n                      method = imp_method)\n\n\n\n iter imp variable\n  1   1  gender  age  height  semester  count_color  most_liked\n  1   2  gender  age  height  semester  count_color  most_liked\n  1   3  gender  age  height  semester  count_color  most_liked\n  1   4  gender  age  height  semester  count_color  most_liked\n  1   5  gender  age  height  semester  count_color  most_liked\n  2   1  gender  age  height  semester  count_color  most_liked\n  2   2  gender  age  height  semester  count_color  most_liked\n  2   3  gender  age  height  semester  count_color  most_liked\n  2   4  gender  age  height  semester  count_color  most_liked\n  2   5  gender  age  height  semester  count_color  most_liked\n  3   1  gender  age  height  semester  count_color  most_liked\n  3   2  gender  age  height  semester  count_color  most_liked\n  3   3  gender  age  height  semester  count_color  most_liked\n  3   4  gender  age  height  semester  count_color  most_liked\n  3   5  gender  age  height  semester  count_color  most_liked\n\n\nSchauen wir jetzt einmal nach, ob auch die Imputation geklappt hat. In Abbildung 50.4 sehen wir nochmal die Daten visualisiert und sehen, dass es keinen fehlenden Werte mehr gibt. Die Überprüfung ist sinnvoll, da wir manchmal Spalten nicht imputieren wollen und dann müssen wir schauen, ob auch das so geklappt hat.\n\n\nR Code [zeigen / verbergen]\ncomplete(imp_gummi_tbl) |&gt; vis_miss()\n\n\n\n\n\n\n\n\nAbbildung 50.4— Überprüfung der Imputation mit mice(). Wie erhofft gibt es keine fehlenden Werte mehr in den Daten.\n\n\n\n\n\nNachdem wir mit der Imputation durch sind können wir uns für die kontinuierlichen Variablen einmal die ursprüngliche Verteilung der Daten mit den fehlenden Weren im vergleich zu den \\(m=5\\) imputierten Verteilungen anschauen. Die Funktion densityplot() erlaubt hier eine einfache und schnelle Darstellung in Abbildung 50.5. Wir sehen, dass die Imputation nicht immer sehr gut geklappt hat, aber dadurch das wir die Imputation fünfmal gemacht haben, mittelt sich der Effekt einer einzelen Imputation wieder raus.\n\n\nR Code [zeigen / verbergen]\ndensityplot(imp_gummi_tbl)\n\n\n\n\n\n\n\n\nAbbildung 50.5— Densityplot der Verteilungen der ursprünglichen kontinuierlichen Daten im Vergleich zu den \\(m=5\\) imputierten Datensätzen.\n\n\n\n\n\nLeider wird es jetzt etwas schwerer mit den imputierten Daten zu arbeiten. Wir müssen ja jetzt die fünf imputierten Datensätze irgendwie analysieren. Die Analyse der fünf Datensätze wird getrennt gemacht und dann mit der Funktion pool() die Effektschätzer und \\(p\\)-Werte aller fünf Datensätze kombiniert. Ein weiteres leider ist, dass wir nicht für jedes Modell in R eine pool Funktion haben. Somit haben wir im Zweifel hier ein Problem, wenn es darum geht die Datensätze weiter zuverwenden. Die meisten glm()-Regressionen können aber so genutzt werden.\n\n\nR Code [zeigen / verbergen]\npooled_res &lt;- imp_gummi_tbl |&gt;\n  mice::complete(\"all\") |&gt;\n  map(lm, formula = height ~ age + semester + gender) |&gt;\n  pool()\n\n\nWir nutzen dann die Funktion model_parameters() um uns die Ausgabe des Poolings besser anzeigen zu lassen. Wir sehen, dass sich das Ergebnis nicht sonderlich von den Ergbenissen einer normalen linearen Regression unterscheidet. Wir könnten dann mit dem gepoolten Modell auch weiter in einen Gruppenvergleich oder eine ANOVA gehen. Sobald wir durch ein Modell und der pool() Funktion ein Objekt haben, können wir mit dem Objekt weiterarbeiten.\n\n\nR Code [zeigen / verbergen]\npooled_res |&gt; model_parameters()\n\n\n# Fixed Effects\n\nParameter   | Coefficient |   SE |           95% CI | Statistic |     df |      p\n---------------------------------------------------------------------------------\n(Intercept) |      185.42 | 1.22 | [183.03, 187.82] |    152.03 | 472.18 | &lt; .001\nage         |       -0.04 | 0.05 | [ -0.14,   0.06] |     -0.70 | 494.56 | 0.486 \nsemester    |       -0.29 | 0.12 | [ -0.53,  -0.05] |     -2.37 |  92.56 | 0.020 \ngenderw     |      -14.75 | 0.55 | [-15.86, -13.65] |    -26.65 |  81.00 | &lt; .001\n\n\nLeider ist es so, dass wir nicht immer mit pool() arbeiten können, da wir für unsere Funktion, die wir nutzen wollen keine Anwendung in pool() finden. Salopp gesagt, wir erhalten einen Fehler, wenn wir das Modell oder die Funktion poolen wollen. In diesem Fall hilft die Funktion complete() mit der Option action = \"long\" und include = TRUE etwas weiter. Wir erhlaten damit die fünf imputierten Datensätze und den ursprünglichen Datensatz als Long-Format wiedergegeben. Damit können wir dann weiterarbeiten. Das ist aber dann das Thema für ein anderes Kapitel.\n\n\nR Code [zeigen / verbergen]\nimp_all_gummi_tbl &lt;- imp_gummi_tbl |&gt; \n  complete(action = \"long\", include = TRUE) |&gt; \n  select(-.id, imp_run = .imp) |&gt; \n  mutate(imp_run = as_factor(imp_run)) |&gt; \n  as_tibble()\n\nimp_all_gummi_tbl\n\n\n# A tibble: 5,646 × 8\n   imp_run gender   age height semester count_bears count_color most_liked\n   &lt;fct&gt;   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;     \n 1 0       m         35    193       10           9 3           lightred  \n 2 0       w         21    159        6          10 5           yellow    \n 3 0       w         21    159        6           9 6           white     \n 4 0       w         36    180       10          10 5           white     \n 5 0       m         22    180        3          10 6           white     \n 6 0       &lt;NA&gt;      NA     NA       NA          10 5           white     \n 7 0       m         22    180        3          10 5           green     \n 8 0       w         21    163        3          13 5           green     \n 9 0       m         22    170        3           9 5           green     \n10 0       m         23    176        3           9 5           white     \n# ℹ 5,636 more rows\n\n\nDie Spalte imp_run gibt uns dann die Imputation \\(m\\) wieder. Die \\(0\\)-te Imputation sind dabei die Orginaldaten. Wie du schon sehen kannst, wird das alles sehr schnell sehr groß und wir müssen hier mit fortgeschrittner Programmierung ran, wenn die Funktion pool() nicht will. In Abbildung 50.6 sehen wir die Anwendung des Objektes imp_all_gummi_tbl für die Visualisierung der beiden kategorialen Variablen gender und most_liked.\n\n\nR Code [zeigen / verbergen]\nggplot(imp_all_gummi_tbl, aes(gender, fill = imp_run)) +\n  theme_minimal() +\n  geom_bar(position = position_dodge(preserve = \"single\")) +\n  scale_fill_okabeito()\n\nggplot(imp_all_gummi_tbl, aes(most_liked, fill = imp_run)) +\n  theme_minimal() +\n  geom_bar(position = position_dodge(preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Imputation von gender.\n\n\n\n\n\n\n\n\n\n\n\n(b) Imputation von most_liked.\n\n\n\n\n\n\n\nAbbildung 50.6— Barplots der kategorialen Variablen getrennt nach den nicht-imputierten und fünf imputierten Datensätzen.\n\n\n\n\n\n\n50.8.2 Imputation mit missRanger\nIn diesem letzten Abschnitt wollen wir die Funktion missRanger() aus dem gleichnamigen R Paket {missRanger} nutzen um die fehlenden Werte in unseren Gummibärchendaten zu imputieren. Das Paket basiert auf sogenannten Decision tree, die wir im Kapitel 78 näher betrachten. Das tiefere Verständnis ist aber für die Anwendung nicht notwendig. Wir können die Funktionalität des R Pakets recht einfach nutzen.\nAls erstes brauchen wir den Datensatz und danach die Formel mit der Imputiert werden soll. Die Fomel ist ganz einfach aufgebaut. Links stehen die Variablen, die imputiert werden sollen und rechts stehen die Variablen, die zur Imputation verwendet werden sollen. Wenn wir einfach alles imputieren wollen und dafür alle Variablen nutzen wollen, dann schreiben wir einfach . ~ . auf. Also wir schreiben einen Punkt . links und rechts von der ~. Dann weis die Funktion, dass alles unter der zu Hilfenahme von allen Variablen imputiert werden soll. Wir müssen noch angeben, wie oft die Imputation laufen soll. Wir haben wir per default \\(500\\) Bäume oder Widerholungen angegeben. Wir wollen keine Ausgabe während der Funktion läuft und setzen deshalb verbose = 0.\n\n\nR Code [zeigen / verbergen]\ngummi_imputet_tbl &lt;- missRanger(\n  gummi_tbl, \n  formula = . ~ . ,\n  num.trees = 500, \n  verbose = 0)\n\n\nWie wir sehen, ist die Funktion sehr viel einfacher zu handhaben. Am Ende erhalten wir per default nur einen Datensatz von der Funktion zurück. Die Funktion missRanger() poolt für uns die Daten, so dass wir dann mit dem einen Datensatz weitermachen können. Das ist natürlich besonders sinnvoll, wenn wir im Anschluss an die Imputation eben keine Regression sondern etwa maschinelle Lernverfahren nutzen wollen.\nIn Abbildung 50.7 sehen wir nochmal die Überprüfung der nicht-imputierten und imputierten Daten. Anscheinend hat die Impiutation gut geklappt. Für den kontinuierlichen Fall liegen die imputierten Beobachtungen gut gestreut in den nicht-imputierten Daten. Auch für die kategoriale Variable gender passen die Verhältnisse. Wir können die Überprüfung jetzt für alle kontinuierlichen und alle kategorialen Variablen fortsetzen. Das müssen wir auch tun! Nur hier ist dann auch bald mal der Platz zu Ende, so dass wir es bei den beiden Abbildungen belassen.\n\n\nR Code [zeigen / verbergen]\nggplot()+\n  geom_point(data = gummi_imputet_tbl, aes(age, height), \n             color = \"red\")+\n  geom_point(data = gummi_tbl, aes(age, height))+\n  theme_minimal() +\n  scale_color_okabeito()\n\nggplot()+\n  geom_bar(data = gummi_tbl, aes(gender), width = 0.3) +\n  geom_bar(data = gummi_imputet_tbl, aes(gender), fill = \"red\",\n           position = position_nudge(x = 0.25), width = 0.3) +\n  theme_minimal() + \n  scale_color_okabeito()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Überprüfung zweier kontinuierliche Variablen age und height.\n\n\n\n\n\n\n\n\n\n\n\n(b) Überprüfung einer kategorialen Variable gender.\n\n\n\n\n\n\n\nAbbildung 50.7— Scatterplot und Barplot der imputierten Variablen getrennt nach nicht-imputierten und imputierten. Die roten Punkte stellen die imputierten Beobachtungen da.\n\n\n\n\nAbschlißend können wir auch nur Teile der Daten imputieren. Wenn wir nur die Spalten age und semester imputieren wollen, dann würden wir age + semester ~ . schreiben. Damit würden wir die beiden Spalten Alter und Semester dann durch die Informationen in all den anderen Spalten imputieren. Wir können die beiden Spalten auch nur durch spezifische andere Spalten imputieren lassen. Im folgenden Beispiel imputieren wir die Spalten age und semester durch die Informationen in den Spalten height und gender. Es dürfen natürlich auch gleiche Spalten auf beiden Seiten der Formel stehen.\n\n\nR Code [zeigen / verbergen]\ngummi_imputet_tbl &lt;- missRanger(\n  gummi_tbl, \n  formula = age + semester ~ height + gender ,\n  num.trees = 500,\n  verbose = 0)\n\n\nWas war jetzt besser? Das ist eine gute Frage. In einer parametrischen Regressionsanalyse bietet sich der Ablauf mit dem R Paket {mice} an. Wir haben in dem Fall der Regression Zugriff auf die Funktion pool() und können damit die Ergebnisse der \\(m\\) Imputationen zusammenfassen. Wenn wir das nicht können, also es keine Möglichkeit gibt unsere Methode der Wahl mit pool() zu nutzen, dann empfiehlt es sich das R Paket {missRanger} zu nutzen.\n\n\n50.8.3 Imputation mit recipes\nWenn wir später in dem Kapitel 73 zu maschinellen Lernverfahren etwas lernen, dann nutzen wir dafür {tidymodels}. Das R Paket {tidymodels} ist eine Zusammenfassung von mehreren wichtigen und sinnvollen R Paketen zur Klassifikation. Wir nutzen darüber hinaus das R Paket {recipes} um uns ein Rezept zu bauen, was wir dann nutzen. Du kannst mehr über den Aufbau von Rezepten in R dann im Kapitel 73 erfahren. Hier nur eine kurze Abhandlung dazu. Um die Rezepte in R nutzen zu können laden wir das Paket {tidymodels}. In dem Paket ist das R Paket {recipes} schon mit enthalten.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidymodels)\n\n\nWir definieren nun unser Rezept nachdem wir imputieren wollen. Im Gegensatz zu missRanger müssen wir hier ein Outcome \\(y\\) angeben und auf der rechten Seite die Variablen, die mit in das Modell sollen. Das ist meistens auch kein Problem in der Klassifikation, da ja sehr häufig das Outcome \\(y\\) binär und bekannt ist. Wir nutzen also einfach unseren Datensatz zu den infizierten Ferkeln und bauen uns unser Rezept. Wir wollen alle anderen Variablen außer die Variable infected mit ins Modell nehmen. Deshalb schreiben wir rechts von der Tilde einfach nur einen . hin.\n\n\nR Code [zeigen / verbergen]\nrec &lt;- recipe(infected ~ ., data = pig_miss_tbl)\n\n\nNachdem wir unser Rezept haben, also wissen was das Outcome ist und was die Prädiktoren, können wir wir die Funktion step_impute_bag() nutzen um den Algorithmus für die Imputation zu spezifizieren. Es gibt noch zahlreiche andere Möglichkeiten die Variablen zu imputieren, aber wir haben ja wieder eine Mischung aus kontinuierlichen und kategoriellen Variablen, so dass sich hier wieder ein Decision tree Algorithmus anbietet. Das R Paket {recipes} hat folgende Rezepte für die Imputation implementiert.\n\n\nR Code [zeigen / verbergen]\nimpute_rec &lt;- rec |&gt; step_impute_bag(all_predictors())\n\n\nWir haben jetzt unseren Imputationsalgorithmus mit dem Rezept verbunden und können nun über die Funktionenprep() und bake() die Imputation durchführen. Im ersten Schritt prep() bereiten wir die Imputation vor. Im nächsten Schritt bake() führen wir dann die Imputation auf den Daten von pig_miss_tbl aus. Das mag jetzt etwas von hinten durch die Brust sein, aber da wir durch recipes in dem Kapitel 73 zu maschinellen Lernverfahren besser verschiedene Verfahren aneinander kleben können, sein es hier nochmal so gezeigt.\n\n\nR Code [zeigen / verbergen]\nimputed_tbl &lt;- prep(impute_rec, training = pig_miss_tbl) |&gt; \n  bake(new_data = pig_miss_tbl)\n\n\nWir finden dann in dem Objekt imputed_tbl einen imputierten Datensatz ohne fehlende Werte wieder. Mit diesem Datensatz können wir dann weiterarbeiten. Die Vingette zu {recipes} zeigt die Imputation mit k-NN an einem etwas komplexeren Beispiel.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Fehlende Werte</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html",
    "href": "stat-modeling-sensitivity.html",
    "title": "51  Sensitivitätsanalyse",
    "section": "",
    "text": "51.1 Genutzte R Pakete\nLetzte Änderung am 10. January 2025 um 09:56:31\nWir brauchen die Sensitivitätsanalyse wenn wir Beobachtungen aus unseren Daten entfernt oder aber hinzugefügt haben. Sensitivitätsanalysen finden eigentlich in dem Kontext von klinischen Studien statt. Der Trend geht aber natürlich auch nicht an den Agrarwissenschaften vorbei und solltest du den Begriff mal hören, weist du wo Sensitivitätsanalyse hingehören. Machen wir also eine Sensitivitätsanalyse. Was haben wir aber davor gemacht? Das heißt du hast entweder eine Variablenselektion wie im Kapitel 49 beschrieben durchgeführt. Oder aber du hast fehlende Werte wie in Kapitel 50 beschrieben imputiert. Es kann auch sein, dass du Ausreißer aus den Daten entfernt oder aber imputiert hast, wie es in Kapitel 48 beschrieben ist. Im Prinzip kannst du auch alles drei gemacht haben, aber meistens beschränkt sich die Veränderung der Daten nur auf eins der drei Möglichkeiten.\nWie immer brauchen wir natürlich auch Fallzahl. Eine Sensitivitätsanalyse kannst du nicht auf zwanzig bis fünfzig Beobachtungen machen. Du brauchst schon eine gute dreistellige Anzahl, damit du hier sauber Modellieren und Darstellen kannst. Wenn du weniger Beobachtungen hast, dann ist ganz natürlich das einzelne Werte einen riesigen Einfluss haben müssen. Im Zweifel frag einfach einmal bei mir nach, dann können wir die Sachlage diskutieren.\nDieses Kapitel ist relativ übersichtlich. Wir werden die Modelle nach der jeweiligen algorithmischen Veränderung uns nochmal anschauen und dann deskriptive entscheiden, ob wir eine große Veränderung in den Daten sehen. Es gibt zwar auch die Möglichkeit die Modelle untereinander zu vergleichen, aber ist hier die Aussagekraft nicht so stark. Die Idee hinter dem Modellvergleich ist eher die Anzahl an Spalten zu verändern und nicht die Werte in der Datenmatrix. Deshalb machen wir es zwar, genießen die Sache aber mit Vorsicht.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, dlookr, broom, modelsummary,\n               see, performance, ggpubr, factoextra, FactoMineR,\n               conflicted)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#daten",
    "href": "stat-modeling-sensitivity.html#daten",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.2 Daten",
    "text": "51.2 Daten\nIn diesem Beispiel betrachten wir wieder die Gummibärchendaten. Auch hier haben wir echte Daten vorliegen, so dass wir Ausreißer entdecken könnten. Da wir hier auch fehlende Werte in den Daten haben, können wir diese fehlenden Werte auch einfach imputieren und uns dann die Effekte anschauen. Das heißt wir haben also einen idealen Datensatz für unsere Sensitivitätsanalysen.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\")  |&gt;\n  select(gender, age, height, semester) |&gt; \n  mutate(gender = as_factor(gender)) \n\n\nIn der Tabelle 48.2 ist der Datensatz gummi_tbl nochmal für die ersten sieben Zeilen dargestellt. Wir werden später sehen, wie sich die Fallzahl von \\(n = 941\\) immer wieder ändert, je nachdem wie wir mit den fehlenden Daten und den Variablen umgehen.\n\n\n\n\nTabelle 51.1— Auszug aus dem Datensatz gummi_tbl. Wir betrachten die ersten sieben Zeilen des Datensatzes.\n\n\n\n\n\n\ngender\nage\nheight\nsemester\n\n\n\n\nm\n35\n193\n10\n\n\nw\n21\n159\n6\n\n\nw\n21\n159\n6\n\n\nw\n36\n180\n10\n\n\nm\n22\n180\n3\n\n\nNA\nNA\nNA\nNA\n\n\nm\n22\n180\n3",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#das-modell",
    "href": "stat-modeling-sensitivity.html#das-modell",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.3 Das Modell",
    "text": "51.3 Das Modell\nWir wollen jetzt als erstes das volle Modell schätzen. Das heißt wir packen alle Variablen in das Modell und rechnen dann die lineare Regression. Wir wollen herausfinden in wie weit das Alter, das Geschlecht und das Semester einen Einfluss auf die Körpergröße von Studierenden hat.\n\\[\nheight \\sim gender + age + semester\n\\]\nWir haben nichts an den Daten geändert und somit dient unser volles Modell als Benchmark für die anderen. Wenn sich einige Werte der Modellgüten im Vergleich zum vollen Modell ändern, dann wissen wir, dass etwas nicht stimmt.\n\n\nR Code [zeigen / verbergen]\nfit_full &lt;- lm(height ~ gender + age + semester, data = gummi_tbl)\n\n\nNeben dem vollen Modell rechnen wir auch noch das Nullmodel. Das Nullmodell beinhaltet nur den Intercept und sonst keine Einflussvariable. Wir wollen schauen, ob es überhaupt was bringt eine unserer Variablen in das Modell zu nehmen oder ob wir es auch gleich lassen können. Im Prinzip unsere Kontrolle für das Modellieren.\n\\[\nheight \\sim 1\n\\]\nIn R fitten wir das Nullmodell in dem wir keine Variablen mit in das Modell nehmen sondern nur eine 1 schreiben. Wir haben dann nur den Intercept mit in dem Modell und sonst nichts. Was wir schon aus den anderen Kapiteln wissen ist, dass das Nullmodell ein schlechtes Modell sein wird.\n\n\nR Code [zeigen / verbergen]\nfit_null &lt;- lm(height ~ 1, data = gummi_tbl)\n\n\nWir schauen uns die Modelle hier nicht weiter an, da es uns nur im Vergleich zu den anderen Modellen interessiert.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#nach-der-detektion-von-ausreißer",
    "href": "stat-modeling-sensitivity.html#nach-der-detektion-von-ausreißer",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.4 … nach der Detektion von Ausreißer",
    "text": "51.4 … nach der Detektion von Ausreißer\nTeilweise können wir eine Überprüfung auf Ausreißer nur auf einen Datensatz ohne fehlende Werte durchführen. Hier beißt sich dann die Katze in den Schwanz. Deshalb nutzen wir die Funktion diagnose_outlier(), die intern die fehlenden Werte entfernt. Das ist natürlich kein richtiges Vorgehen! Aber wir nutzen ja diesen Abschnitt nur als Beispiel. Du findest die Detektion von Ausreißern im Kapitel 48 beschrieben.\n\n\nR Code [zeigen / verbergen]\ndiagnose_outlier(gummi_tbl) \n\n\n# A tibble: 3 × 6\n  variables outliers_cnt outliers_ratio outliers_mean with_mean without_mean\n  &lt;chr&gt;            &lt;int&gt;          &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 age                 62           6.59         34        23.2         22.4 \n2 height               0           0           NaN       177.         177.  \n3 semester            69           7.33          8.75      2.35         1.78\n\n\nWir sehen, dass wir in der Variable age und semester nach der Funktion zu urteilen Ausreißer gefunden haben. Deshalb werden wir jetzt diese Ausreißer durch die Funktion imputate_outlier() entsprechend ersetzen. Mal schauen, ob wir damit eine substanzielle Änderung in der Modellierung erhalten.\n\n\nR Code [zeigen / verbergen]\ngummi_out_imp_tbl &lt;- gummi_tbl |&gt; \n  mutate(age = imputate_outlier(gummi_tbl, age, method = \"capping\"),\n         semester = imputate_outlier(gummi_tbl, semester, method = \"capping\"))\n\n\nNun modellieren wir noch mit unseren ersetzten und angepassten Daten die Körpergröße und erhalten den Modellfit zurück. Am Ende des Kapitels werden wir dann alle Modelle gegenüberstellen und miteinander vergleichen.\n\n\nR Code [zeigen / verbergen]\nfit_outlier &lt;- lm(height ~ gender + age + semester, data = gummi_out_imp_tbl)\n\n\nWir schauen uns das Modell hier nicht weiter an, da es uns nur im Vergleich zu den anderen Modellen interessiert.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#nach-der-imputation-von-fehlenden-werten",
    "href": "stat-modeling-sensitivity.html#nach-der-imputation-von-fehlenden-werten",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.5 … nach der Imputation von fehlenden Werten",
    "text": "51.5 … nach der Imputation von fehlenden Werten\nNehmen wir wieder den Gummibärechendatensatz von neuen und imputieren diesmal die fehlenden Werte mit einer univariaten Imputation. Wir machen uns hier nicht die Mühe ein multivariates Verfahren zu nutzen. Das könnte man tun, aber wir wollen hier ja nur den Weg aufzeigen, wie wir den Vergleich der Modelle zur Sensitivitätsanalyse durchführen. Du findest die Imputation von fehlenden Werten im Kapitel 50 beschrieben.\nIn unserem Fall imputieren wir alle numerischen Variablen mit dem Mittelwert und die kategoriale Variable mit der Methode rpart. Damit haben wir dann keine fehlenden Werte mehr in den Daten und somit sollte das jetzt auch unserer größter Datensatz für die lineare Regression sein. Nicht vergessen, sobald wir einen fehlenden Wert bei einer Variable in einem Modell haben, fällt die ganze Beobachtung aus dem Modell heraus.\n\n\nR Code [zeigen / verbergen]\ngummi_imp_tbl &lt;- gummi_tbl |&gt; \n  mutate(age = imputate_na(gummi_tbl, age, method = \"mean\"),\n         gender = imputate_na(gummi_tbl, gender, method = \"rpart\"),\n         height = imputate_na(gummi_tbl, height, method = \"median\"),\n         semester = imputate_na(gummi_tbl, semester, method = \"mode\"))\n\n\nDann rechnen wir noch schnell das Modell für die imputierten Daten. Am Ende des Kapitels werden wir dann alle Modelle gegenüberstellen und miteinander vergleichen.\n\n\nR Code [zeigen / verbergen]\nfit_imp &lt;- lm(height ~ gender + age + semester, data = gummi_imp_tbl)\n\n\nWir schauen uns das Modell hier nicht weiter an, da es uns nur im Vergleich zu den anderen Modellen interessiert.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#nach-der-variablen-selektion",
    "href": "stat-modeling-sensitivity.html#nach-der-variablen-selektion",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.6 … nach der Variablen Selektion",
    "text": "51.6 … nach der Variablen Selektion\nFür die Variablenselektion machen wir es uns sehr einfach. Wir müssen ja nur eine Spalte aus den Daten werfen, mehr ist ja Variablenselektion auch nicht. Wir machen dort nur eine algorithmengetriebene Auswahl. In diesem Fall entscheide ich einfach zufällig welche Variable aus dem Modell muss. Du findest die Variablen Selektion im Kapitel 49 beschrieben. Somit nehmen wir an, wir hätten eine Variablenselektion durchgeführt und die Variable semester aus dem Modell entfernt.\n\n\nR Code [zeigen / verbergen]\nfit_var_select &lt;- lm(height ~ gender + age, data = gummi_tbl)\n\n\nAuch dieses Modell schauen wir nicht weiter an, da es uns nur im Vergleich zu den anderen Modellen interessiert.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-sensitivity.html#modellvergleich",
    "href": "stat-modeling-sensitivity.html#modellvergleich",
    "title": "51  Sensitivitätsanalyse",
    "section": "51.7 Modellvergleich",
    "text": "51.7 Modellvergleich\nKommen wir zu dem eigentlichen Modellvergleich. In Tabelle 51.2 sehen wir den Modellvergleich aller fünf Modelle aus diesem Kapitel. Dazu nutzen wir die Funktion modelsummary() aus dem R Paket {modelsummary}. Wir vergleichen die Modelle untereinander aber vor allem mit dem vollen Modell. Das volle Modell basiert ja auf den ursprünglichen nicht veränderten Daten. Den Intercept können wir erstmal ignorieren. Spannend ist, dass sich der Effekt von gender auf die Körpergröße durch die Imputation um eine Einheit ändert. Der Effekt des Alters verfünffacht sich durch die Outlieranpassung und verdoppelt sich durch die Imputation. Durch die Imputation wird der Effekt des Semesters abgeschwächt.\nWenn wir auf das \\(R^2_{adj}\\) schauen, dann haben wir eine Verschlechterung durch die Imputation. Sonst bleibt der Wert mehr oder minder konstant. Das ist ein gutes Zeichen, dass wir unser Modell nicht vollkommen an die Wand gefahren haben durch unsere Änderung der Daten. Das \\(AIC\\) wird folglich für die Imputationsdaten sehr viel schlechter und nähert sich dem Nullmodell an. Das ist wirklcih kein gutes Zeichen für die Imputation. Da haben wir mehr kaputt als heile gemacht. Wir sehen keinen Efdekt bei dem Fehler \\(RMSE\\), der noch nach dem Fit des Modell übrig bleibt. Aber das kann passieren. Nicht jede Maßzahl muss sich auch ändern. Deshalb haben wir ja mehrere Maßzahlen vorliegen.\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"Null Modell\" = fit_null,\n                 \"Volles Modell\" = fit_full,\n                 \"Outlier\" = fit_outlier,\n                 \"Imputation\" = fit_imp,\n                 \"Variablen Selektion\" = fit_var_select),\n             estimate  = \"{estimate}\",\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\", \n                           \"t = {statistic}\",\n                           \"p = {p.value}\"))\n\n\n\n\nTabelle 51.2— Modellvergleich mit den fünf Modellen. Wir schauen in wie weit sich die Koeffizienten und Modelgüten für die einzelnen Modelle im direkten Vergleich zum vollen Modell verändert haben.\n\n\n\n \n\n  \n    \n    \n    tinytable_ht7whvk62i4a91pwbrl7\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                Null Modell\n                Volles Modell\n                Outlier\n                Imputation\n                Variablen Selektion\n              \n        \n        \n        \n                \n                  (Intercept)\n                  176.688           \n                  185.506           \n                  188.220           \n                  184.129           \n                  185.292           \n                \n                \n                             \n                  [175.977, 177.400]\n                  [183.095, 187.916]\n                  [184.741, 191.698]\n                  [181.750, 186.507]\n                  [182.892, 187.693]\n                \n                \n                             \n                  s.e. = 0.363      \n                  s.e. = 1.228      \n                  s.e. = 1.772      \n                  s.e. = 1.212      \n                  s.e. = 1.223      \n                \n                \n                             \n                  t = 487.315       \n                  t = 151.037       \n                  t = 106.220       \n                  t = 151.922       \n                  t = 151.487       \n                \n                \n                             \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                \n                \n                  genderw    \n                                    \n                  -14.753           \n                  -14.750           \n                  -13.353           \n                  -14.768           \n                \n                \n                             \n                                    \n                  [-15.777, -13.730]\n                  [-15.771, -13.729]\n                  [-14.322, -12.383]\n                  [-15.788, -13.749]\n                \n                \n                             \n                                    \n                  s.e. = 0.521      \n                  s.e. = 0.520      \n                  s.e. = 0.494      \n                  s.e. = 0.519      \n                \n                \n                             \n                                    \n                  t = -28.297       \n                  t = -28.367       \n                  t = -27.034       \n                  t = -28.434       \n                \n                \n                             \n                                    \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                  p = &lt;0.001        \n                \n                \n                  age        \n                                    \n                  -0.039            \n                  -0.160            \n                  -0.055            \n                  -0.058            \n                \n                \n                             \n                                    \n                  [-0.139, 0.061]   \n                  [-0.313, -0.007]  \n                  [-0.155, 0.044]   \n                  [-0.157, 0.041]   \n                \n                \n                             \n                                    \n                  s.e. = 0.051      \n                  s.e. = 0.078      \n                  s.e. = 0.051      \n                  s.e. = 0.051      \n                \n                \n                             \n                                    \n                  t = -0.763        \n                  t = -2.052        \n                  t = -1.092        \n                  t = -1.144        \n                \n                \n                             \n                                    \n                  p = 0.446         \n                  p = 0.040         \n                  p = 0.275         \n                  p = 0.253         \n                \n                \n                  semester   \n                                    \n                  -0.287            \n                  -0.277            \n                  -0.111            \n                                    \n                \n                \n                             \n                                    \n                  [-0.510, -0.064]  \n                  [-0.528, -0.025]  \n                  [-0.329, 0.108]   \n                                    \n                \n                \n                             \n                                    \n                  s.e. = 0.114      \n                  s.e. = 0.128      \n                  s.e. = 0.111      \n                                    \n                \n                \n                             \n                                    \n                  t = -2.528        \n                  t = -2.159        \n                  t = -0.993        \n                                    \n                \n                \n                             \n                                    \n                  p = 0.012         \n                  p = 0.031         \n                  p = 0.321         \n                                    \n                \n                \n                  Num.Obs.   \n                  850               \n                  841               \n                  841               \n                  941               \n                  849               \n                \n                \n                  R2         \n                  0.000             \n                  0.491             \n                  0.494             \n                  0.441             \n                  0.490             \n                \n                \n                  R2 Adj.    \n                  0.000             \n                  0.490             \n                  0.492             \n                  0.439             \n                  0.489             \n                \n                \n                  AIC        \n                  6424.0            \n                  5793.7            \n                  5789.7            \n                  6475.3            \n                  5849.8            \n                \n                \n                  BIC        \n                  6433.4            \n                  5817.3            \n                  5813.3            \n                  6499.6            \n                  5868.7            \n                \n                \n                  Log.Lik.   \n                  -3209.977         \n                  -2891.829         \n                  -2889.833         \n                  -3232.660         \n                  -2920.877         \n                \n                \n                  F          \n                                    \n                                    \n                                    \n                  246.008           \n                  406.197           \n                \n                \n                  RMSE       \n                  10.56             \n                  7.54              \n                  7.52              \n                  7.51              \n                  7.55              \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\n\n\n\nDas vergleichen von Modellen, die auf unterschiedlichen Daten basieren ist nicht anzuraten. Wir erhalten auch die passende Warnung von der Funktion compare_performance() aus dem R Paket {performance}. Dennoch hier einmal der Vergleich. Wir sehen, dass die Modelle mit der Ersetzung der Ausreißer und das volle Modell sich stark ähneln. Das selektierte Modell und das imputierte Modell fallen dagegen ab. Da wir ja hier nicht zeigen wollen, dass sich die Modelle unterscheiden, ist das Ergebnis ähnlich zu der Übersicht. Die Imputation hat so nicht funktioniert.\n\n\n# Comparison of Model Performance Indices\n\nName           | Model |    R2 | R2 (adj.) |   RMSE |  Sigma | AIC weights | AICc weights | BIC weights | Performance-Score\n---------------------------------------------------------------------------------------------------------------------------\nfit_outlier    |    lm | 0.494 |     0.492 |  7.518 |  7.536 |       0.880 |        0.880 |       0.880 |            99.93%\nfit_full       |    lm | 0.491 |     0.490 |  7.535 |  7.553 |       0.120 |        0.120 |       0.120 |            62.60%\nfit_var_select |    lm | 0.490 |     0.489 |  7.549 |  7.563 |    7.89e-14 |     7.99e-14 |    8.26e-13 |            56.59%\nfit_imp        |    lm | 0.441 |     0.439 |  7.511 |  7.527 |   1.14e-149 |    1.14e-149 |   8.61e-150 |            54.06%\nfit_null       |    lm | 0.000 |     0.000 | 10.565 | 10.571 |   1.63e-138 |    1.67e-138 |   1.95e-135 |        3.18e-134%\n\n\nWas ist das Fazit aus der Sensitivitätsanalyse für Arme? Nun wir konnten einmal sehen, dass wir auch mit einfachen Werkzeugen Modelle deskriptiv miteinander vergleichen können und dann einen Schluss über die Güte der Detektion von Ausreißern, der Imputation von fehlenden Werten oder aber der Variablenselektion treffen können. Denk immer dran, die Sensitivitätsanalyse findet nach einer sauberen Detektion, Imputation oder Selektion statt und soll nochmal sicherstellen, dass wir nicht künstliche Effekte der Algorithmen modellieren sondern die Effekte in den Daten sehen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Sensitivitätsanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-preface.html",
    "href": "stat-modeling-preface.html",
    "title": "Statistisches Modellieren",
    "section": "",
    "text": "Verteilungsfamilien\nLetzte Änderung am 14. July 2025 um 08:49:21\nZum Einstieg in diesen großen Abschnitt zum statistischen Modellieren betrachten wir nochmal die abstrakte Schreibweise eines Modells mit einem Outcome \\(y\\) und Einflussvariablen \\(x\\). Du kennst das simple Modell schon aus dem Kapitel zur simplen linearen Regression. In den folgenden Kapiteln haben wir eine Vielzahl an möglichen Einflussvariablen \\(x\\) vorliegen, aber immer nur ein Messwert \\(y\\) im Modell. Wir rechnen in der Praxis meisten dann eine multiple lineare Regression.\nDie Einflussvariablen \\(x\\) auf der rechten Seite sind so eine Sache. Wenn du ein klassisches Feldexperiment hast, dann ist \\(x\\) meistens ein oder mehr Faktoren \\(f\\) mit unterschiedlichen vielen Leveln als Gruppen. Selten hast du dann noch ein kontinuierliches \\(x\\) mit in deinen Daten, welches du mit in dein Modell nehmen willst. Was dafür dann meistens noch mehr in deinen Daten vorkommt sind einiges an Spalten mit Messwerten \\(y\\) oder auch Outcome genannt. Das ist immer etwas schwerer zu realisieren, dass du für jedes Outcome \\(y\\) ein eigenes Modell und damit auch eigene statistische Tests rechnen musst. Deshalb kann es bei vielen Messwerten \\(y\\) zu einer ganzen Reihe von statistischen Analysen kommen. Wenn jetzt nicht alle Outcomes der gleichen Veteilungsfamilie angehören, dann musst du auch verschiedene Regressionen als statistische Analysen rechnen. In der folgenden Abbildung siehst du dann nochmal den Zusammenhang zwischen den verschiedenen Verteilungsfamilien von \\(y\\) und möglichen Ausprägungen von den Einflussvariablen \\(x\\) dargestellt.\nJetzt können wir also verschiedene Messwerte \\(y\\) in einem Experiment vorliegen haben. Den jeder Messwert \\(y\\) repräsentiert ja auch eine Spalte mit Zahlen. Und je nachdem was wir gemessen haben, haben wir andere Werte in den Spalten stehen. Im Folgenden also einmal eine Auflistung an Verteilung und welchen Messwerte diese Verteilungen repräsentieren. Nach der Verteilung müssen wir uns dann einmal die Regression mit der passenden Verteilungsfamilie in den folgenden Kapiteln raussuchen. In der folgenden Tabelle habe ich einmal die gängigen Verteilungen hier aufgelistet und dann einmal noch ein paar Beispiele dazu gegeben.\nDas heißt, je nachdem welchen Messwert du in deinem Experiment erhoben hast, musst du dich für eine andere Regression mit einer entsprechenden Verteilungsfamilie entscheiden.\nWenn wir gleich in den folgenden Kapiteln dieses großen Abschnitts in R unsere Regressionsmodelle rechnen, dann müssen wir uns für die Funktion lm() oder glm() oder eine noch spezialisiertere Funktion entscheiden. Mehr dazu dann aber mehr in den einzelnen separaten Kapiteln zu den Regressionsanalysen oder aber in dem etwas umfangreicheren Kapitel zum Modellieren in R. Wir nutzen die Funktion lm(), wenn unser Outcome \\(y\\) einer Normalverteilung genügt und die Funktion glm() mit der Option family, wenn wir eine andere Verteilungsfamilie für unser Outcome benötigen. So werden zum Beispiel Zähldaten mit der Funktion glm() und der Option family = poisson für die Poissonverteilung ausgewertet. Aber wie schon gesagt, mehr erfährst du dann in den folgenden Kapiteln zu den einzelnen Regressionen. Dort stelle ich dann auch die Funktionen und die entsprechenden R Pakete vor, die du für die Analyse deiner Daten brauchst.",
    "crumbs": [
      "Statistisches Modellieren"
    ]
  },
  {
    "objectID": "stat-modeling-preface.html#verteilungsfamilien",
    "href": "stat-modeling-preface.html#verteilungsfamilien",
    "title": "Statistisches Modellieren",
    "section": "",
    "text": "Gaussian / Normal\nDie Gaussianverteilung ist die Normalverteilung. Da wir meistens von einer Normalverteilung sprechen, müssen wir hier auch wissen, dass wir in Statistik und R die Verteilung Gaussian benennen. Häufige Messwerte oder Outcomes, die einer Normalverteilung folgen, sind das Gewicht, die Größe, die Höhe oder der Umfang einer Beobachtung. Dementsprechend geht es dann in dem Kapitel zu der Gaussian Regression weiter. In der folgenden Abbildung 52.1 siehst du einmal den visuellen Zusammenhang zwischen den kontinuierlichen Outcome \\(y\\), welches einer Normalverteilung folgt und den möglichen Darstellungsformen je nachdem welches \\(x\\) du in deinen Daten vorliegen hast. Dazu habe ich dann noch die jeweiligen möglichen statistischen Analysen ergänzt.\n\n\n\n\n\n\n\n\nAbbildung 3— Visueller Zusammenhang eines kontinuierlichen Outcomes (\\(y\\)) aus einer Normalverteilung (Gaussian) im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)). Ein Punkt stellt eine Beobachtung dar. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\nWir mitteln uns die Welt, wie sie uns gefällt…\n\n\n\n\n“2 x 3 macht 4; Widdewiddewitt; und Drei macht Neune!; Wir machen uns die Welt; Widdewidde wie sie uns gefällt…” — Hey Pippi Langstrumpf\n\nWenn wir über die Normalverteilung sprechen, dann berechnen wir ja immer der Mittelwert und die Standardabweichung aus den Daten. Diese beiden statistischen Maßzahlen stellen wir dann in einem Barplot oder Säulendiagramm dar. Das können wir dann natürlich auch für alle anderen möglichen Messwerte machen. Denn einen Mittelwert kannst du natürlich über alles rechnen. Also, wo sind die Barplots hin? Ich habe dir mal die Barplots für alle Verteilungen in der Abbildung 4 dargestellt. Ja, die sehen alle sehr ähnlich aus, deshalb achte einmal auf die Skalierung der \\(y\\)-Achse. Hier unterscheiden sich die Barplots. Ich habe dir mal für alle folgenden Verteilungsfamilien die Barplots erstellt. Am Ende ist eben dann doch so, dass du jede andere Verteilung durch die Berechnung der Mittelwerte und der Standardabweichung in eine Normalverteilung zwingst. Du siehst eben nicht mehr wie die Daten ursprünglich mal verteilt sind. Ausreißer oder andere Strukturen in den Daten sind dann kaum zu erkennen.\n\n\n\n\n\n\n\n\nAbbildung 4— Visueller Zusammenhang eines gemittelten Outcomes (\\(y\\)) aus verschiedenen Verteilung im Verhältnis zu der Einflussvariable (\\(x\\)) mit zwei oder mehr Kategorien anhand von Barplots. Hauptsächlich unterscheiden sich die Barplots durch die unterschiedlichen Einheiten auf der \\(y\\)-Achse. Die Fehlerbalken stellen den Standardfehler (SE) dar. (A) Mittler Ertrag [t/ha]. (B) Mittlerer Befahll [Anzahl/Parzelle]. (C) Mittlere Note [Likert-Skala] (D) Mittlerer Anteil [%] (E) Mittlerer Anteil infiziert (%). [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\nPoisson\nWenn wir Zähldaten gemessen haben und diese Zähldaten dann als ein Outcome \\(y\\) auswerten wollen, dann nutzen wir eine Poissonverteilung. Was machen Zähldaten aus? Zum einen haben wir eine Grenze von Null. Wir können nicht weniger als Null zählen. Daher sollten wir also nur positive, ganzzahlige Messwerte vorliegen haben. Teilweise können wir ein Problem kriegen, wenn wir zu viele Nullen vorliegen haben, aber dazu dann mehr in dem Kapitel zur Poisson Regression. Wir haben also auf der \\(y\\)-Achse kontinuierliche Zähldaten ohne Kommawerte vorliegen. Wenn du deine Zähldaten eventuell gemittelt hast, dann musst du die Messwerte dann wieder auf ganzzahlige Zähldaten runden, wenn du eine Poisson Regression rechnen willst. In der folgenden Abbildung 5 siehst du einmal den visuellen Zusammenhang zwischen den kontinuierlichen Outcome \\(y\\), welches einer Poissonverteilung folgt und den möglichen Darstellungsformen je nachdem welches \\(x\\) du in deinen Daten vorliegen hast. Du siehst hier sehr deutlich die Ebenen, die sich durch die ganzzahligen Zähldaten ergeben. Dazu habe ich dann noch die jeweiligen möglichen statistischen Analysen ergänzt.\n\n\n\n\n\n\n\n\nAbbildung 5— Visueller Zusammenhang eines kontinuierlichen Outcomes (\\(y\\)) aus einer Poissonverteilung zu Zähldaten im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)). Ein Punkt stellt eine Beobachtung dar. Deutlich sind die Ebenen durch die absoluten Zählwerte zu erkennen. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nBeta\nWo wir bei der Possionverteilung mit Zähldaten keine Werte unter Null zählen können, so haben wir es bei einer Betaverteilung mit Prozenten zwischen Null und Eins zu tun. Wir können also hier keine Messwerte unter Null oder über Eins erhalten. Meistens handelt es sich bei einer Betaverteilung auch um Zähldaten, die skaliert wurden. So wurden die gekeimten Samen von einer Aussaat gezählt und wir erhalten dann einen Wert für die Keimfähigkeit in Prozent. Oder aber wir wollen den Jagderfolg ermitteln in dem wir den Anteil an erfolgreichen Versuchen durch die Gesamtzahl an Versuchen teilen. In der folgenden Abbildung 6 siehst du einmal den visuellen Zusammenhang zwischen den kontinuierlichen Outcome \\(y\\), welches einer Betaverteilung folgt und den möglichen Darstellungsformen je nachdem welches \\(x\\) du in deinen Daten vorliegen hast. Dazu habe ich dann noch die jeweiligen möglichen statistischen Analysen ergänzt.\n\n\n\n\n\n\n\n\nAbbildung 6— Visueller Zusammenhang eines kontinuierlichen Outcomes (\\(y\\)) aus einer Betaverteilung zu Häufigkeiten im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)). Ein Punkt stellt eine Beobachtung dar. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nOrdinal\nMit der Ordinalverteilung begeben wir uns jetzt in die kategoriellen Verteilungen. Wir haben als unser Outcome \\(y\\) jetzt nichts mehr Kontinuierliches vorliegen sondern eben Kategorien auf der \\(y\\)-Achse. Was sind so typische Kategorien, die wir messen können? Eine der häufigsten, geordneten Kategorie sind die Noten auf einer Likert-Skala. Allgemein gesprochen sind alle Noten als Kategorien ordnialverteilt, aber häufig nehmen wir eben dann keine Schulnoten in der wissenschaftlichen Forschung sondern eben Noten nach der Likert-Skala. Die Besonderheiten fallen in der Abbildung 7 mit dem visuellen Zusammenhang sofort auf. Das kategoriellen Outcome \\(y\\), welches einer Ordinalverteilung folgt, bildet klare Ebenen. Das hat dann direkte Folgen für die möglichen Darstellungsformen je nachdem welches \\(x\\) du in deinen Daten vorliegen hast. Dazu habe ich dann noch die jeweiligen möglichen statistischen Analysen ergänzt. Wir haben dann eben nicht mehr die Möglichkeit Punkte darzustellen, wenn die \\(x\\)-Achse ebenfalls Kategorien als Faktor aufweist. Wir nehmen dann den Mosaicplot zur Hilfe. Du könntest zwar auch die mittleren Noten als Barplot wie in der Abbildung 4(C) darstellen. Hier musst du schauen, was du zeigen willst. Hast du viele Notenschritte, dann mag es sinnvoll sein eine mittlere Note zu bilden. Wenn du nur wenige Noten hast, dann macht der Mosaicplot mehr Sinn.\n\n\n\n\n\n\n\n\nAbbildung 7— Visueller Zusammenhang eines geordneten, kategoriellen Outcomes (\\(y\\)) aus einer Ordinalverteilung wie Noten auf der Likert-Skala im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)). Ein Punkt stellt eine Beobachtung dar. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nBinomial\nAbschließend wollen wir uns noch den extremsten Fall für ein Outcome \\(y\\) anschauen. Wir haben jetzt nämlich nur noch zwei Kategorien übrig. Also entweder hat eine Beobachtung ein Merkmal, dann erhält die Beobachtung eine Eins oder die Beobachtung hat das Merkmal nicht, dann erhält die Beobachtung eine Null. Wir sprechen dann von einer Binomialverteilung. Die Binomialverteilung tritt sehr häufig in den Humanwissenschaften auf, wenn es darum geht, ob ein Patient krank \\((1)\\) oder gesund \\((0)\\) ist. Auch nutzen wir die Binomialverteilung sehr häufig, wenn wir eine Vorhersage treffen wollen, denn auch hier wollen wir meist nur zwei Klassen \\((0/1)\\) vorhersagen. In der Abbildung 8 siehst du dann nochmal den visuellen Zusammenhang. Wie auch schon bei der Ordinalverteilung haben wir jetzt zwei Ebenen. Einmal die Beobachtungen mit einer Eins und einmal die Beobachtungen mit einer Null. Auch hier könnten wir dann bei eine kategoriellen \\(x\\) die mittlere Rate der Einsen berechnen, aber normalerweise nutzen wir hier dann auch Mosaicplots, da wir an den jeweiligen Raten für die Einsen und Nullen interessiert sind.\n\n\n\n\n\n\n\n\nAbbildung 8— Visueller Zusammenhang eines kategoriellen, binären Outcomes (\\(y\\)) aus einer Binomialverteilung im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)). Ein Punkt stellt eine Beobachtung dar. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]\n\n\n\n\n\nIn der Abbildung 9 möchte ich dir nochmal die Möglichkeit des Probability models vorstellen, welches die kategoriellen Daten der Binomialverteilung wie eine Gaussianverteilung modelliert. Dadurch können an den Extremen von \\(x\\) dann auch Werte für \\(y\\) größer Eins und kleiner Null herauskommen. Schlussendlich ist es natürlich eine Verletzung der Modellannahmen. Den binomiale Daten folgen eben keiner Normalverteilung und sollten daher auch nicht mit einer Gaussian Regression ausgewertet werden. Dennoch sieht man das Probability model immer wieder in der Anwendung der Wirtschaftswissenschaften, so dass ich das Modell hier auch einmal präsentieren will. Wenn du das Modell für Gruppenvergleiche mit einem kategoriellen \\(x\\) verwendest, dann nutze bitte den Standardfehler \\(SE\\) und nicht die Standardabweichung \\(SD\\) sonst erhälst du Werte außerhalb des sinnvollen Rahmens. Allgemein wird von dem Student t-Test abgeraten, da Probability model zu heterogenen Varianzen neigen.\n\n\n\n\n\n\n\n\nAbbildung 9— Visueller Zusammenhang eines kategoriellen, binären Outcomes (\\(y\\)) aus einer Binomialverteilung im Verhätnis zu verschiedenen Skalen der Einflussvariable (\\(x\\)) modelliert mit einem Probability model wie eine normalverteiltes Outcome. Ein Punkt stellt eine Beobachtung dar. (A) \\(x\\) ist kontinuierlich. (B) \\(x\\) ist kategoriell mit zwei oder mehr Gruppen. (C) \\(x\\) ist kategoriell mit zwei Gruppen. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren"
    ]
  },
  {
    "objectID": "stat-modeling-R.html",
    "href": "stat-modeling-R.html",
    "title": "52  Modellieren in R",
    "section": "",
    "text": "52.1 Sprachlicher Hintergrund\nLetzte Änderung am 29. July 2025 um 10:15:53\nDieses Startkapitel gibt dir nochmal eine Übersicht über das statistische Modellieren in R. Hier liegt vor allem der Fokus auf R. Es gibt eben eine Reihe von zusätzlichen Pakten, die es dir erlauben noch mehr aus einem statistischen Modell rauszuholen. Am Ende wurde es mir dann aber zu detailliert alle Pakete in jedem Kapitel vorzustellen und anzuwenden. Das ist auch nicht immer sinnig. Häufig willst du erstmal nur das Modell rechnen. Später kannst du dann noch tiefer ins Detail gehen oder aber komplexere Verfahren nutzen. Ich tue mich also etwas schwer dieses Kapitel einzuordnen. Entweder packen wir es ans Ende vom statistischen Modellieren und schauen, dann wie wir alles in R machen. Das steht aber etwas der Intuition entgegen, dass wir in jedem Kapitel zum statistischen Modellieren ja schon was selber machen wollen. In R gibt es dazu dann noch sehr gute Pakete, die das Modellieren sehr viel einfacher machen, dabei dann aber auch für den Anfänger etwas komplexer sind. Ich habe mich daher entschieden, diese aktuelle und komplexere Modellierung einmal hier am Anfang vorzustellen und in den folgenden Kapiteln teilweise darauf zu verweisen, wenn ich es sinnig fand. Du kannst alle Modelle auf althergebrachte Art und Weise rechnen ohne was zu verpassen. Aber manchmal möchte man dann auch effizienter Modellieren. Dafür ist dann dieses Kapitel da: Eine erweiterte Idee von der statistischen Modellierung zu erlangen. Fangen wir also erstmal mit der naheliegenden Frage an.\nWas ist ein Modell\nStatistical Thinking for the 21st Century — What is a model?\nModels are about what changes, and what doesn’t\nStatistical Thinking for the 21st Century — Practical statistical modeling?\nAls nächstes wollen wir uns die Frage stellen, was ist eigentlich das ziel des Modellierens? Wir wollen ja mit der Modellierung der Varianz irgendwas erreichen. In der Abbildung 52.1 siehst du einmal die drei großen Fragefelder, die wir mit einer Modellierung bearbeiten können.\nIn diesem Kapitel wollen wir uns auch mit dem Thema marginale Effektmodelle (eng. marginal effect models) beschäftigen. Auch hier ist der deutsche Begriff nicht gebräuchlich, so dass ich mich hier dann immer auf die marginal effect models beziehen werde. Ein zweideutiger Aspekt der marginal effect models besteht darin, dass das Wort “marginal” auf zwei verschiedene und etwas entgegengesetzte Arten verwendet wird:\nMehr dazu dann in dem Abschnitt zu den marginal effect models und dem R Paket {marginaleffects}.\nDafür verweise ich auf Heiss (2022) und das Onlinetutorium Marginalia: A guide to figuring out what the heck marginal effects, marginal slopes, average marginal effects, marginal effects at the mean, and all these other marginal things are. Heiss erklärt dort sehr schön die Zusammenhänge. Dazu dann noch der Verweis auf die Webseite Model to Meaning von Arel-Bundock et al. (2024) um nochmal tiefer in das Modellieren von Daten einzusteigen.\nWenn wir uns mit dem statistischen Modellieren beschäftigen wollen, dann brauchen wir auch Worte um über das Thema reden zu können. Statistik wird in vielen Bereichen der Wissenschaft verwendet und in jedem Bereich nennen wir dann auch Dinge anders, die eigentlich gleich sind. Daher werde ich mir es hier herausnehmen und auch die Dinge so benennen, wie ich sie für didaktisch sinnvoll finde. Wir wollen hier was verstehen und lernen, somit brauchen wir auch eine klare Sprache.\nFangen wir also erstmal allgemeiner an ein Modell und deren schreibweise zu verstehen. Da wir uns natürlich in R bewegen für die parktische Anwendung, nutzen wir auch die Modellschreibweise, die in R üblich ist. In R wird diese Schreibweise auch formula() genannt. Im Folgenden siehst du einmal ein Modell in einer abstrakten Form. Wir haben den Messwert \\(Y\\) auf der linken Seite (eng. left hand side, abk. LHS) der Tilde und die Einflussvariablen \\(X\\) auf der rechten Seite (eng. right hand side, abk. RHS). Dabei steht dann das \\(X\\) hier einmal als Platzhalter und Sammelbegriff für verschiedene Arten von möglichen Variablen.\nAbbildung 52.2— Statistische Modellschreibweise mit dem Messwert auf der linken Seite und den Einflussvariablen auf der rechten Seite der Tilde. [Zum Vergrößern anklicken]\nIn R sieht es dann etwas anders aus, da wir die Platzhalter \\(Y\\) für den Messwert und \\(X\\) für die Einflussvariable durch die Namen der Spalten in unserem Datensatz ersetzen. Der Satendatz liegt dann als tibble() in R vor. Mehr dann dazu in den folgenden Beispielen in den jeweiligen Kapiteln zum Modellieren. Dann sieht das Modell wie in der folgenden Abbildung aus.\nAbbildung 52.3— Statistische Modellschreibweise in R mit dem Messwert auf der linken Seite und den Einflussvariablen auf der rechten Seite der Tilde. Die Platzhalter \\(Y\\) und \\(X\\) werden durch die Spaltennamen im Datensatz ersetzt. [Zum Vergrößern anklicken]\nIn dem folgenden Kasten erkläre ich nochmal den Gebrauch meiner Begriffe im statistischen Testen. Es ist wichtig, dass wir hier uns klar verstehen. Zum einen ist es angenehmer auch mal ein Wort für ein Symbol zu schreiben. Auf der anderen Seite möchte ich aber auch, dass du dann das Wort richtig einem Konzept im statistischen Modellieren zuordnen kannst. Deshalb einmal hier meine persönliche und didaktische Zusammenstellung meiner Wort im statistischen Modellieren.\nDann wäre es ja schön, wenn wir nur die linke und rechte Seite neben einer Tilde hätten. Das ist aber nur eine sehr abstrakte Darstellung. Es ha ja auch seinen Grund, warum wir sehr viele Kapitel in diesem Openbook dem Thema des statistischen Modellieren widmen. Wir haben nämlich eine eichtig schrecklich nette Familie an Möglichkeiten zusammen.\nIn der folgenden Abbildung siehst du einmal wie alles mit allem zusammenhängt. Auf der linken Seite siehst du den Messwert \\(Y\\) der einer Verteilunsgfamilie entstammt. Je nachdem was du wie gemessen hast, folgt dein Messwert \\(Y\\) einer anderen Verteilung. Konkreter noch, welche Zahlen du für deinen Messwert \\(Y\\) bestimmt hast. Auf der rechten Seite findest du die Einflussvariable \\(X\\), die aus mehren Variablen bestehen kann aber nicht muss. Wenn du eine kontinuierliche Einflussvariable vorliegen hast, dann sprechen wir von Kovariaten. Hast du dagegen kategoriale Einflussvariablen, dann sprechen wir von Faktoren mit Leveln als die Gruppen. Je nach Kombination aus Verteilungsfamilie und Einflussvariable hast du dann eine andere Interpretation der Modellierung vorliegen.\nAbbildung 52.4— Erweiterte Darstellung der statistischen Modellierung. Die Messwerte \\(Y\\) folgen einer Verteilung. Die Einflussvariablen liegen kontinuierlich als Kovariaten oder aber kategorial als Faktoren vor. [Zum Vergrößern anklicken]\nDa wir die schrecklich nette Familie ja auch irgendiwe bezeichnen müssen, hat sich folgende Semantik mehr oder minder durchgesetzt. Ich nutze jedenfalls den folgenden Aufbau um zu benennen was ich eigentlich analysieren und modellieren will. Zuerst kommt, ob wir eine Einflussvariable oder mehrere Einflussvariablen betrachten. Wir nennen dann eben die Modellierung eine simple oder multiple Modellierung. Dann kommt die Verteilunsgfamilie des Messwerts als Wort um dann noch zu sagen, ob wir es mit einem gemischten Modell zu tun haben. Haben wir kein gemischtes Modell, dann lassen ignorieren wir den Teil. Häufig sprechen wir auch von einer linearen Regression, wenn wir eine Gaussian linear Regression meinen. Das finde ich aber sehr verwirrend und nicht klar. Deshalb vermeide ich diesen Sprachgebrauch, wenn wir es mit komplexeren Modellen zu tun haben.\nAbbildung 52.5— Semantische Zusammensetzung der Beschreibung einer linearen Regression als statistische Modellierung. Zu erst wird definert wie viele Einflussvariablen betrachtet werden. Dann kommt die Verteilungsfamilie des Messwertes. Optional kann noch festgelegt werden, ob ein gemischtes Modell gerechnet wird. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#sprachlicher-hintergrund",
    "href": "stat-modeling-R.html#sprachlicher-hintergrund",
    "title": "52  Modellieren in R",
    "section": "",
    "text": "“In statistics courses taught by statisticians we don’t use”independent variable” because we use independent on to mean stochastic independence. Instead we say predictor or covariate (either). And, similarly, we don’t say “dependent variable” either. We say response.” — User berf auf r/AskStatistics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Jeder nennt in der Statistik sein Y und X wie er möchte. Da ich hier nicht nur von Y und X schreiben möchte, führe ich eben die Worte ein, die ich nutzen möchte. Damit sind die Worte dann auch richtig, da der Kontext definiert ist. Danke.” — Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorte und Bedeutungen im statistischen Modellieren\n\n\n\n\n“Die Grenzen meiner Sprache bedeuten die Grenzen meiner Welt.” — Ludwig Wittgenstein\n\nHier kommt einmal die Tabelle mit den wichtigsten Begriffen im statistischen Modellieren und wie ich die Worte benutzen werde. Damit wir uns verstehen und du was lernen kannst. In anderen Büchern und Quellen findest du teilweise die Worte in einem anderen Sinnzusammenhang. Das ist gut so dort. Bei mir ist es anders.\n\n\n\nTabelle 52.1— Zusammenfassende Tabelle des Sprachgebrauchs in meinem statistischen Modellieren. Die fett hervorgehobenen Bezeichnungen werden hier genutzt. (LHS = left hand side, RHS = right hand side)\n\n\n\n\n\n\n\n\n\n\n\n\nSymbol\nDeutsch\nEnglisch\n\n\n\n\nLHS\n\\(Y\\) / \\(y\\)\nMesswert / Endpunkt / Outcome\nresponse / outcome / endpoint\n\n\nRHS\n\\(X\\) / \\(x\\)\nEinflussvariable / Erklärende Variable / Fester Effekt\nrisk factor / explanatory / fixed effect\n\n\nRHS\n\\(Z\\) / \\(z\\)\nZufälliger Effekt\nrandom effect\n\n\n\\(X\\) ist kontinuierlich\n\\(c_1\\)\nKovariate 1\ncovariate 1\n\n\n\\(X\\) ist kategorial\n\\(f_A\\)\nFaktor \\(A\\) mit Level \\(A.1\\) bis \\(A.j\\)\nfactor \\(A\\) with levels \\(A.1\\) to \\(A.j\\)",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#genutzte-r-pakete",
    "href": "stat-modeling-R.html#genutzte-r-pakete",
    "title": "52  Modellieren in R",
    "section": "52.2 Genutzte R Pakete",
    "text": "52.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, emmeans, multcomp, ggpmisc, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(ggplot2::annotate)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#theoretisches-modellieren-in-r",
    "href": "stat-modeling-R.html#theoretisches-modellieren-in-r",
    "title": "52  Modellieren in R",
    "section": "52.3 Theoretisches Modellieren in R",
    "text": "52.3 Theoretisches Modellieren in R\n\n\nR Code [zeigen / verbergen]\nreformulate(termlabels = \"hase\",\n            response = \"igel\")\n\n\nigel ~ hase\n\n\nModel Formulae in R\n\n52.3.1 R Pakete\nNeben den R Paketen, die wir in den jeweiligen Kapiteln brauchen, kommen noch folgende R Pakete immer wieder dran. Deshalb sind die R Pakete hier schon mal mit den jeweiligen Internetseiten aufgeführt.\n\nDas Buch Tidy Modeling with R gibt nochmal einen tieferen Einblick in das Modellieren in R. Wir immer, es ist ein Vorschlag aber kein Muss.\nDas R Paket {parameters} nutzen wir um die Parameter eines Modells aus den Fits der Modelle zu extrahieren. Teilweise sind die Standardausgaben der Funktionen sehr unübersichtich. Hier hilft das R Paket.\nDas R Paket {performance} hilft uns zu verstehen, ob die Modelle, die wir gefittet haben, auch funktioniert haben. In einen mathematischen Algorithmus können wir alles reinstecken, fast immer kommt eine Zahl wieder raus.\nDas R Paket {tidymodels} nutzen wir als das R Paket um mit Modellen umgehen zu können und eine Vorhersage neuer Daten zu berechnen. Das Paket {tidymodels} ist wie das Paket {tidyverse} eine Sammlung an anderen R Paketen, die wir brauchen werden.\n\n\n\n52.3.2 Quantity and tests\nKontrafaktisches Konditional\n\n“Wenn … der Fall wäre, dann wäre …”\n\nCounterfactual comparisons\n\n\n52.3.3 Generalisierung von lm() zu glm() und [g]lmer()\n\nDie Funktion lm() nutzen wir, wenn das Outcome \\(y\\) einer Normalverteilung folgt.\nDie Funktion glm() nutzen wir, wenn das Outcome \\(y\\) einer andere Verteilung folgt.\nDie Funktion lmer() nutzen wir, wenn das Outcome \\(y\\) einer Normalverteilung folgt und wir noch einen Block- oder Clusterfaktor vorliegen haben.\nDie Funktion glmer() nutzen wir, wenn das Outcome \\(y\\) einer andere Verteilung folgt und wir noch einen Block- oder Clusterfaktor vorliegen haben.\n\n\n\n\n\n\n\n\n\nAbbildung 52.6— Übersicht über die semantische Erweiterung der Standardfunktion lm() für eine lineare Regression zur generalisierten Variante glm() und der beiden Varianten für die gemischten linearen Modellen lmer() und glmer(). [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.7— Formelschreibweise der simplen linearen Regression beinhaltend die Koeffizienten \\(\\beta_0\\) für den y-Achsenabschnitt sowie \\(\\beta_1\\) für die Steigung der Graden für eine Einflussvariable \\(x_1\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.8— Formelschreibweise der multiplen linearen Regression beinhaltend die Koeffizienten \\(\\beta_0\\) für den y-Achsenabschnitt sowie \\(\\beta_1\\) bis \\(\\beta_p\\) für die partielle Steigung der Graden für jede Einflussvariable \\(x_1\\) bis \\(x_p\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.9— Abstrakte Formelschreibweise eines linearen, gemischten Regression beinhaltend die festen Effekt \\(X_1\\) bis \\(X_p\\) sowie einen zufälligen Effekt \\(Z\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#kovariate-modelle-x-ist-kontinuierlich",
    "href": "stat-modeling-R.html#kovariate-modelle-x-ist-kontinuierlich",
    "title": "52  Modellieren in R",
    "section": "52.4 Kovariate Modelle (\\(x\\) ist kontinuierlich)",
    "text": "52.4 Kovariate Modelle (\\(x\\) ist kontinuierlich)\n\n\n\n\n\n\n\n\nAbbildung 52.10— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.11— Schemantisches multiples Modell mit einem Messwert \\(Y\\) und zwei kontinuierlichen Einflussvariablen als Kovariate \\(c_1\\) und Kovariate \\(c_2\\) dargestellt. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#faktorielle-modelle-x-ist-kategorial",
    "href": "stat-modeling-R.html#faktorielle-modelle-x-ist-kategorial",
    "title": "52  Modellieren in R",
    "section": "52.5 Faktorielle Modelle (\\(x\\) ist kategorial)",
    "text": "52.5 Faktorielle Modelle (\\(x\\) ist kategorial)\n\n\n\n\n\n\n\n\nAbbildung 52.12— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.13— Schemantisches multiples Modell mit einem Messwert \\(Y\\) und zwei kategoriale Einflussvariablen als Faktor \\(f_A\\) und Faktor \\(f_B\\) dargestellt. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#interpretation",
    "href": "stat-modeling-R.html#interpretation",
    "title": "52  Modellieren in R",
    "section": "52.6 Interpretation",
    "text": "52.6 Interpretation\n\n52.6.1 Simple Modelle\n\n\\(c_1\\)\\(f_A\\) mit 2 Leveln\\(f_A\\) mit &gt;2 Leveln\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.14— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_tbl &lt;- tibble(c_1 = rnorm(10, 0, 1),\n                   y = 2 + \n                       2 * c_1 + \n                           rnorm(10, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1, cov1_tbl) |&gt; coef() |&gt; round(2)\n\n\n(Intercept)         c_1 \n          2           2 \n\n\n\n\n\n\n\n\n\n\nAbbildung 52.15— foo [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.16— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfac1_tbl &lt;- tibble(\"1\" = rnorm(5, 3, 0.001),\n                   \"2\" = rnorm(5, 6, 0.001)) |&gt; \n  gather(key = \"f_a\", value = \"y\")\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a, fac1_tbl) |&gt; coef() |&gt; round(2)\n\n\n(Intercept)        f_a2 \n          3           3 \n\n\n\n\n\n\n\n\n\n\nAbbildung 52.17— foo [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nHier dann mal mit drei Leveln oder Gruppen\n\n\n\n\n\n\n\n\nAbbildung 52.18— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfac1_tbl &lt;- tibble(\"1\" = rnorm(5, 2, 0.001),\n                   \"2\" = rnorm(5, 6, 0.001),\n                   \"3\" = rnorm(5, 4, 0.001)) |&gt; \n  gather(key = \"f_a\", value = \"y\")\n\n\n\nTreatment coding mit contr.treatment (default)\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a, fac1_tbl, contrasts = list(f_a = \"contr.treatment\")) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a2        f_a3 \n          2           4           2 \n\n\n\n\n\n\n\n\n\n\nAbbildung 52.19— foo [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nEffect coding mit contr.sum\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a, fac1_tbl, contrasts = list(f_a = \"contr.sum\")) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a1        f_a2 \n          4          -2           2 \n\n\n\n\n\n\n\n\n\n\nAbbildung 52.20— foo [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n52.6.2 Multiple Modelle\n\n\\(c_1 + c_2\\)\\(f_A + c_1\\)\\(c_1 + f_A + f_B\\)\\(c_1 + c_2 + f_A + f_B\\)\\(f_A + f_B + f_A \\times f_B\\)\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.21— Schemantisches multiples Modell mit einem Messwert \\(Y\\) und zwei kontinuierlichen Einflussvariablen als Kovariate \\(c_1\\) und Kovariate \\(c_2\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_tbl &lt;- tibble(c_1 = rnorm(10, 0, 1),\n                   c_2 = rnorm(10, 0, 1),\n                   y = 2 + \n                       1 * c_1 + \n                       2 * c_2 + \n                           rnorm(10, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + c_2, cov2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1         c_2 \n          2           1           2 \n\n\n\n\nEinfaktorielle ANCOVA\n\n\n\n\n\n\n\n\nAbbildung 52.22— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln sowie einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_tbl &lt;- tibble(c_1 = rnorm(15, 0, 1),\n                        f_a = gl(3, 5),\n                        y = 2 + \n                            1 * c_1 + \n                            2 * as.numeric(f_a) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a + c_1, cov1_fac1_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a2        f_a3         c_1 \n          4           2           4           1 \n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.23— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) sowie einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln und einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac2_tbl &lt;- tibble(c_1 = rnorm(30, 0, 1),\n                        f_a = rep(gl(3, 5), 2),\n                        f_b = gl(2, 15),\n                        y = 2 + \n                            1 * c_1 + \n                            2 * as.numeric(f_a) + \n                            3 * as.numeric(f_b) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + f_a + f_b, cov1_fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1        f_a2        f_a3        f_b2 \n          7           1           2           4           3 \n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.24— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) sowie einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln und einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_tbl &lt;- tibble(c_1 = rnorm(30, 0, 1),\n                        c_2 = rnorm(30, 0, 1),\n                        f_a = rep(gl(3, 5), 2),\n                        f_b = gl(2, 15),\n                        y = 2 + \n                            1 * c_1 + \n                            -1 * c_2 + \n                            2 * as.numeric(f_a) + \n                            3 * as.numeric(f_b) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + c_2 + f_a + f_b, cov2_fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1         c_2        f_a2        f_a3        f_b2 \n          7           1          -1           2           4           3 \n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 52.25— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln sowie einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln und deren Interaktion \\(f_A \\times f_B\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfac2_tbl &lt;- tibble(f_a = rep(gl(3, 5), 2),\n                   f_b = gl(2, 15),\n                   y = 2 + \n                       2 * as.numeric(f_a) + \n                       3 * as.numeric(f_b) + \n                           rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a + f_b + f_a:f_b, fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a2        f_a3        f_b2   f_a2:f_b2   f_a3:f_b2 \n          7           2           4           3           0           0 \n\n\n\n\n\nIn sehen wir wie wir den Namen einer Regression bilden. Zuerst entscheiden wir, ob wir nur ein \\(x\\) haben oder mehrere. Mit einem \\(x\\) sprechen wir von einem simplen Modell, wenn wir mehrere \\(x\\) haben wir ein multiples Modell. Im nächsten Schritt benennen wir die Verteilung für das Outcome \\(y\\). Dann müssen wir noch entscheiden, ob wir ein gemischtes Modell vorliegen haben, dann schreiben wir das hin. Sonst lassen wir den Punkt leer. Anschließend kommt noch lineares Modell hinten ran.\nDas R Paket {tidymodels}\nTidy Modeling with R\nVeraltet aber manchmal ganz nützlich das R Paket {modelr}",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#konfidenzintervall-vs.-prädiktionsintervall",
    "href": "stat-modeling-R.html#konfidenzintervall-vs.-prädiktionsintervall",
    "title": "52  Modellieren in R",
    "section": "52.7 Konfidenzintervall vs. Prädiktionsintervall",
    "text": "52.7 Konfidenzintervall vs. Prädiktionsintervall\nEin Konfidenzintervall gibt den Wertebereich für einen gesuchten Parameter der Grundgesamtheit mit einer bestimmten Wahrscheinlichkeit an. Ein Prognoseintervall gibt den Wertebereich für einen individuellen, zukünftig zu beobachtenden Wert mit einer bestimmten Wahrscheinlichkeit an.\n\nKonfidenzintervall\nText\n\nKonfidenzintervall\n\nEin Konfidenzintervall gibt den Wertebereich für einen gesuchten Parameter der Grundgesamtheit mit einer bestimmten Wahrscheinlichkeit an.\n\n\n\n\nPrädiktionsintervall\nText\n\nPrädiktionsintervall\n\nEin Prädiktionsintervall (auch Vorhersageintervall oder Prognoseintervall) gibt den Wertebereich für einen individuellen, zukünftig zu beobachtenden Wert mit einer bestimmten Wahrscheinlichkeit an.\n\n\nQuantile Regression Forests for Prediction Intervals\nThe difference between prediction intervals and confidence intervals\nP-values for prediction intervals machen keinen Sinn\nHow NASA didn’t discover the hole in the ozone layer",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#praktisches-modellieren-in-r",
    "href": "stat-modeling-R.html#praktisches-modellieren-in-r",
    "title": "52  Modellieren in R",
    "section": "52.8 Praktisches Modellieren in R",
    "text": "52.8 Praktisches Modellieren in R\n\n52.8.1 Marginal Effect Models\nR Paket {ggeffects}\nR Paket {modelbased}\nR Paket {marginaleffects}\n\n\n52.8.2 Visualisierung\nR Paket {ggeffects}\nR Paket {gtsummary}\nDisplay univariate regression model results in table\n\n\n52.8.3 …mit {purrr}\nmap() für mehrere Endpunkte wie bei den Spinatdaten in Application gezeigt.\nmap2() mit Familie für glm zeigen, wenn wir unterschiedliche Outcomes haben.\n\n\nR Code [zeigen / verbergen]\ncutting_tbl &lt;- read_excel(\"data/multiple_outcomes.xlsx\") |&gt; \n  mutate(trt = as_factor(trt),\n         block = as_factor(block)) |&gt; \n  mutate_if(is.numeric, round, 2)\n\n\n\n\n\n\nTabelle 52.2— Auszug aus den Daten .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrt\nblock\nshoot\nleaf\nflower\nfruit\nca\ndrymatter\nfreshweight\nheight\n\n\n\n\ncontrol\n1\n0\n136\n33\n10\n0.41\n11.59\n85.37\n25\n\n\ncontrol\n2\n0\n157\n33\n9\n0.41\n10.43\n79.78\n22\n\n\ncontrol\n1\n1\n65\n10\n3\n0.4\n11.97\n78.35\n22\n\n\ncontrol\n2\n0\n88\n16\n4\n0.39\n11.24\n85.55\n27\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\nnodium_5th\n2\n0\n137\n20\n3\n0.47\n11.11\n86.93\n28\n\n\nnodium_5th\n1\n0\n137\n23\n3\n0.43\n11.95\n89.68\n27\n\n\nnodium_5th\n2\n1\n114\n17\n9\n0.39\n11.21\n70.82\n24\n\n\nnodium_5th\n2\n0\n192\n42\n11\n0.42\n11.29\n66.23\n22\n\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfamily_lst &lt;- lst(shoot = binomial(),\n                  leaf = quasipoisson(),\n                  flower = quasipoisson(),\n                  fruit = quasipoisson(),\n                  ca = gaussian(), \n                  drymatter = gaussian(), \n                  freshweight = gaussian(), \n                  height = gaussian())\n\n\n\n\nR Code [zeigen / verbergen]\ncutting_long_tbl &lt;- cutting_tbl |&gt;\n  pivot_longer(cols = shoot:last_col(),\n               names_to = \"outcome\",\n               values_to = \"rsp\") |&gt;\n  arrange(outcome, trt, block)\n\n\n\n\nR Code [zeigen / verbergen]\ncutting_lst &lt;- cutting_long_tbl |&gt;\n  split(~outcome)\n\n\n\n\nR Code [zeigen / verbergen]\nglm_lst &lt;- cutting_lst %&gt;% \n  map2(family_lst, \n       ~glm(rsp ~ trt + block + trt:block, \n            data = .x, family = .y))  \n  \nglm_lst %&gt;% \n  map(pluck, \"family\")\n\n\n$ca\n\nFamily: binomial \nLink function: logit \n\n\n$drymatter\n\nFamily: quasipoisson \nLink function: log \n\n\n$flower\n\nFamily: quasipoisson \nLink function: log \n\n\n$freshweight\n\nFamily: quasipoisson \nLink function: log \n\n\n$fruit\n\nFamily: gaussian \nLink function: identity \n\n\n$height\n\nFamily: gaussian \nLink function: identity \n\n\n$leaf\n\nFamily: gaussian \nLink function: identity \n\n\n$shoot\n\nFamily: gaussian \nLink function: identity \n\n\nR Code [zeigen / verbergen]\nglm_lst %&gt;% \n  map(car::Anova)\n\n\n$ca\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)\ntrt       0.222384  3     0.9739\nblock     0.003979  1     0.9497\ntrt:block 0.005906  3     0.9999\n\n$drymatter\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)\ntrt         5.1410  3     0.1618\nblock       0.2084  1     0.6480\ntrt:block   2.0862  3     0.5547\n\n$flower\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)    \ntrt        19.3416  3  0.0002323 ***\nblock       0.5678  1  0.4511477    \ntrt:block   1.7967  3  0.6156522    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$freshweight\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)  \ntrt         3.6454  3     0.3024  \nblock       4.0375  1     0.0445 *\ntrt:block   4.9674  3     0.1742  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$fruit\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)  \ntrt         9.9860  3    0.01869 *\nblock       0.8118  1    0.36759  \ntrt:block   1.7163  3    0.63332  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$height\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)\ntrt        2.83465  3     0.4178\nblock      0.12598  1     0.7226\ntrt:block  0.94488  3     0.8146\n\n$leaf\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)   \ntrt        15.5183  3   0.001423 **\nblock       1.2623  1   0.261207   \ntrt:block   1.6400  3   0.650353   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$shoot\nAnalysis of Deviance Table (Type II tests)\n\nResponse: rsp\n          LR Chisq Df Pr(&gt;Chisq)    \ntrt             17  3  0.0007067 ***\nblock            0  1  1.0000000    \ntrt:block        2  3  0.5724067    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nR Code [zeigen / verbergen]\nemm_lst &lt;- glm_lst %&gt;% \n  map(~emmeans(.x, specs = ~ trt, type = \"response\")) \n\nemm_lst %&gt;% \n  map(~contrast(.x, method = \"pairwise\", adjust = \"bonferroni\")) %&gt;% \n  map(as_tibble) %&gt;% \n  bind_rows(.id = \"outcome\")\n\n\n# A tibble: 48 × 11\n   outcome   contrast       odds.ratio     SE    df  null z.ratio p.value  ratio\n   &lt;chr&gt;     &lt;chr&gt;               &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1 ca        control / str…      0.829 0.978    Inf     1 -0.159    1     NA    \n 2 ca        control / nod…      1.30  1.59     Inf     1  0.219    1     NA    \n 3 ca        control / nod…      0.780 0.918    Inf     1 -0.211    1     NA    \n 4 ca        strong / nodi…      1.57  1.90     Inf     1  0.376    1     NA    \n 5 ca        strong / nodi…      0.941 1.10     Inf     1 -0.0523   1     NA    \n 6 ca        nodium_3rd / …      0.598 0.719    Inf     1 -0.428    1     NA    \n 7 drymatter control / str…     NA     0.0436   Inf     1 -0.425    1      0.981\n 8 drymatter control / nod…     NA     0.0479   Inf     1  1.24     1      1.06 \n 9 drymatter control / nod…     NA     0.0424   Inf     1 -0.930    1      0.960\n10 drymatter strong / nodi…     NA     0.0486   Inf     1  1.67     0.571  1.08 \n# ℹ 38 more rows\n# ℹ 2 more variables: estimate &lt;dbl&gt;, t.ratio &lt;dbl&gt;\n\n\nR Code [zeigen / verbergen]\nemm_lst %&gt;% \n  map(~cld(.x, Letters = letters, adjust = \"bonferroni\")) %&gt;% \n  map(as_tibble) %&gt;% \n  bind_rows(.id = \"outcome\") %&gt;% \n  select(outcome, trt, .group)  %&gt;% \n  print(n = 28)\n\n\n# A tibble: 32 × 3\n   outcome     trt        .group\n   &lt;chr&gt;       &lt;fct&gt;      &lt;chr&gt; \n 1 ca          nodium_3rd \" a\"  \n 2 ca          control    \" a\"  \n 3 ca          strong     \" a\"  \n 4 ca          nodium_5th \" a\"  \n 5 drymatter   nodium_3rd \" a\"  \n 6 drymatter   control    \" a\"  \n 7 drymatter   strong     \" a\"  \n 8 drymatter   nodium_5th \" a\"  \n 9 flower      strong     \" a \" \n10 flower      nodium_3rd \" ab\" \n11 flower      nodium_5th \"  b\" \n12 flower      control    \"  b\" \n13 freshweight strong     \" a\"  \n14 freshweight control    \" a\"  \n15 freshweight nodium_3rd \" a\"  \n16 freshweight nodium_5th \" a\"  \n17 fruit       strong     \" a\"  \n18 fruit       control    \" a\"  \n19 fruit       nodium_3rd \" a\"  \n20 fruit       nodium_5th \" a\"  \n21 height      strong     \" a\"  \n22 height      control    \" a\"  \n23 height      nodium_3rd \" a\"  \n24 height      nodium_5th \" a\"  \n25 leaf        strong     \" a \" \n26 leaf        nodium_3rd \" ab\" \n27 leaf        nodium_5th \" ab\" \n28 leaf        control    \"  b\" \n# ℹ 4 more rows",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#verschiebebahnhof",
    "href": "stat-modeling-R.html#verschiebebahnhof",
    "title": "52  Modellieren in R",
    "section": "52.9 Verschiebebahnhof",
    "text": "52.9 Verschiebebahnhof\nR Paket {parsnip}\nin diesem Kapitel wollen Fokus auf {parsnip} und dann als Kasten in allen anderen möglichen Modellierungen ergänzen?\nTidymodels, interactions and anova - a short tutorial\n\n\n\n\n\n\nXX Regression in {parsnip}\n\n\n\nAuch hier können wir die XX Regression in dem R Paket {parsnip} realisieren. Ein Vorteil von {parsnip} ist, dass wir die Funktionen sehr gut mit dem |&gt;-Operator nutzen können. Das ist bei den Funktionen glm() und lm() in der ursprünglichen Implementierung ja leider nur etwas umständlicher möglich. Deshalb hier einmal die bessere Implementierung.\n\n{parsnip}{base}\n\n\n\n\nR Code [zeigen / verbergen]\nlinreg_reg_fit &lt;- linear_reg() |&gt; \n  set_engine(\"lm\") |&gt; \n  fit(jump_length ~ grp, data = simple_tbl) \n\n\nDann die ANOVA\n\n\nR Code [zeigen / verbergen]\nlinreg_reg_fit|&gt;  \n  extract_fit_engine() |&gt; \n  anova()\n\n\nAnalysis of Variance Table\n\nResponse: jump_length\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)  \ngrp        1 1.5309 1.53089  9.2541 0.01879 *\nResiduals  7 1.1580 0.16543                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nlinreg_reg_fit &lt;- lm(jump_length ~ grp, data = simple_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\nlinreg_reg_fit|&gt;  \n  anova()\n\n\nAnalysis of Variance Table\n\nResponse: jump_length\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)  \ngrp        1 1.5309 1.53089  9.2541 0.01879 *\nResiduals  7 1.1580 0.16543                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nEine detailliertere Einführung mit mehr Beispielen für die Nutzung vom R Paket {parsnip} findest du im Kapitel Modellieren in R. Hier soll es dann bei der kurzen Gegenüberstellung bleiben.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-R.html#referenzen",
    "href": "stat-modeling-R.html#referenzen",
    "title": "52  Modellieren in R",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nArel-Bundock, V., Greifer, N., & Heiss, A. (2024). How to Interpret Statistical Models Using marginaleffects for R and Python. Journal of Statistical Software, 111(9), 1–32. https://doi.org/10.18637/jss.v111.i09\n\n\nHeiss, A. (2022, Mai 20). Marginalia: A Guide to Figuring Out What the Heck Marginal Effects, Marginal Slopes, Average Marginal Effects, Marginal Effects at the Mean, and All These Other Marginal Things Are. https://doi.org/10.59350/40xaj-4e562",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Modellieren in R</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html",
    "href": "stat-modeling-marginal.html",
    "title": "53  Marginal effect models",
    "section": "",
    "text": "53.1 Allgemeiner Hintergrund\nLetzte Änderung am 10. July 2025 um 13:07:11\nLange habe ich gebraucht um mich dazu durchzuringen das Kapitel zu den Marginal effect models (deu. marginale Effektmodelle, ungebräuchlich) zu schreiben. Ich werde hier bei dem englischen Begriff bleiben, den deutschen Begriff habe ich eher selten gehört und daher sind es für mich Marginal effect models. Insbesondere da der Begriff “marginal” auch sehr an gering oder minderwertig erinnert. Damit haben aber die Marginal effect models nicht im geringsten zu tun. Die Modelle sind sehr mächtig und können uns helfen wichtige Fragen an unsere Daten zu beantworten. Insbesondere die Dualität der beiden Pakete {emmeans} für experimentelle Daten und {marginaleffects} für beobachtete Daten ist spannend und möchte ich hier nochmal genauer betrachten. Neben diesen beiden Ecksteinen gibt es noch andere Pakete und ich werde auch hier einmal in die Pakete reinschauen.\nAnfangen kann ich aber nicht ohne Heiss (2022) mit seinem Blogpost Marginalia: A guide to figuring out what the heck marginal effects, marginal slopes, average marginal effects, marginal effects at the mean, and all these other marginal things are zu erwähnen. Vieles entlehnt sich direkt oder indirekt an seine Ausführungen. Wie immer habe ich etwas angepasst, wenn ich der Meinung war, dass es noch besser zu verstehen ist. Teilweise entfallten die Marginal effect models ihre wahre Kraft erst bei den nicht linearen Zusammenhängen und der Interpretation von Generalized Additive Models udn somit der nicht linearen Regression. Fangen wir also an Marginal effect models zu zerforschen und arbeiten uns dann voran.. Beginnen wollen wir aber mit einem allgemeinen Hintergrund bevor wir uns dann nochmal tiefer mit den Marginal effect models beschäftigen.\nWenn wir von Marginal effect models sprechen, dann können wir uns im Prinzip zwei Aspekte anschauen. Wir können über die Steigung einer Funktion einer Geraden sprechen oder aber über die vorhergesagten \\(y\\)-Werte auf der Geraden für beliebige \\(x\\)-Werte. Damit sind wir dann bei den beiden Aspekten Steigung und Vorhersage. Wenn wir uns in der Welt der linearen Modelle bewegen, dann ist die Steigung eigentlich kein Problem und die Vorhersage auch nicht so komplex. Spannender wird das Zusammenspiel eines nichtlinearen Modells und eben den Marginal effect models. Hier kommt dann die eigentliche Kraft der Marginal effect models zu trage. In den folgenden beiden Abbildungen habe ich dir einmal eine nichtlinere Funktion dargestellt. Wir schauen uns hier den Zusammenhang zwischen der standardisierten Enzymeaktivität und dem standardisierten pH-Wert an. Wir haben die Enzymeaktivität zu festen pH-Werten wiederholt gemessen. Auf der linken Seite betrachten wir die Steigung der Geraden an drei Punkten und auf der rechten Seite sehen wir einmal die Vorhersage für drei pH-Werte auf der Geraden. Die Gerade folgt der Funktion \\(y = x^3 - 8x^2 + 10x + 10\\) und ist mir somit für die Bestimmung der Steigung und der Vorhersage bekannt. Daher habe ich also die Möglichkeit die exakten Werte der Steigung und der Vorhersage zu bestimmen. Einen Luxus den wir selten mit echten Daten haben.\nAbbildung 53.1— Modellierung des nichtlinearen Zusammenhangs zwischen der standardisierten Enzymeaktivität und dem standardisierten pH-Wert. Der pH-Wert ist kontinuierlich. Die Funktionsgleichung ist bekannt. (A) Berechnung der Steigung (eng. slope) für ausgewählte pH Werte anhand der Modellierung. (B) Berechnete Vorhersagewerte (eng. prediction) der standardisierten Enzymeaktivität für ausgewählte pH-Werte anhand der Modellierung. [Zum Vergrößern anklicken]\nBetrachten wir also einmal die Antworten, die die Steigung und die Vorhersage liefert. Dabei haben wir hier in diesem Fall ein kontinuierliches \\(X\\) vorliegen und machen uns die Sachlage auch einfacher indem wir ein kontinuierliches \\(Y\\) mit der standardisierten Enzymeaktivität vorliegen haben.\nDann können wir auch schon die Steigung und die Vorhersage einmal interpretieren. In dem linken Tab findest du einmal die Interpretation der Steigung sowie die Ausgabe der Funktion slopes() aus dem R Paket {marginaleffects}. In dem rechten Tab dann die Ergebnisse der Vorhersage und die Ausgabe der Funktion predictions(). Mehr zu den beiden Funktionen dann weiter unten in der Anwendung. Ich berechne hier die Steigung und bestimme die vorhergesagten Werte für drei ausgewählte pH-Werte.\nWenn wir die Vorhersage betrachten dann können wir auch den Fall vorliegen haben, dass wir ein kategoriales \\(X\\) als Gruppen gemessen haben. In R wäre es dann ein Faktor und daher dann auch der Begriff des faktoriellen Designs, wenn es um das experimentelle Design geht. Wir hatten bis jetzt ein kontinuierlichen pH-Wert vorliegen. Zwar hatten wir auch Messgruppen, aber wir konnten von einem konitnuierlichen pH-Wert im Sinne der Modellierung ausgehen. Jetzt wollen wir uns einmal den Fall anschauen, dass wir auf eben wirkliche pH-Wertgruppen mit niedrigen, mittleren und hohen pH-Wertgruppen für die Enzymeaktivität vergleichen wollen. Ich schreibe hier schon gleiche von einem Vergleich, als erstes wollen wir aber die Mittelwerte pro Gruppe vorhersagen.\nIn der folgenden Abbildung siehst du auf der linken Seite einmal den einfaktoriellen Fall mit dem gruppierten pH-Wert als Gruppe. Auf der rechten Seite dann noch zusätzlich die beiden Gruppen der Prokaryoten sowie Eukaryoten. Wir sind jetzt an den Mittelwerten pro Gruppe interessiert und wir könnten diese Mittelwerte dann auch einfach berechnen. Dafür bräuchten wir dann erstmal kein Modell, wenn wir nur so ein simples Experiment vorliegen haben. Konkret bestimmen wir hier die marginal means aus einem Modell heraus.\nAbbildung 53.2— Modellierung des Zusammenhangs zwischen der standardisierten Enzymeaktivität und den gruppierten pH-Werten nach niedrigen, mittleren und hohen pH-Werten. Der pH-Wert ist kategorial. (A) Einfaktorielle Vorhersage der Gruppenmittelwerte der Enzymeaktivität. (B) Zweifaktorielle Vorhersage der Gruppenmittelwerte der Enzymeaktivität aufgetrennt nach der Gruppe der Eukaryoten und Prokaryoten. [Zum Vergrößern anklicken]\nWir wollen jetzt für alle Gruppen die Mittelwerte vorhersagen. Nichts anderes macht dann auch die Funktion predictions(). Hier muss ich auch schon gleich einmal eine leichte Warnung aussprechen. So gut {marginaleffects} in der Bestimmung der Steigung und der Vorhersagen ist, um so viel besser ist das R Paket {emmeans} wenn es um die Auswertung von einem faktoriellen Design geht. Hier ist dann einfach {emmeans} besser in der Anwendung. Das hat auch Gründe im Algorithmus der beiden Pakete, dazu dann aber später mehr. Hier erstmal die Interpretation der beiden Vorhersagen für kategoriale \\(x\\)-Werte oder eben auch Faktoren in R genannt.\nSoviel dann einmal zu dem allgemeinen Hintergrund. Die Idee der Marginal effect models ist es also dir die Steigung einer Funktion oder die vorhergesagten Werte einer Funktion wiederzugeben. Hier kannst du dann Funktion auch mit Modell erstetzen. Für den linearen Fall auf einem normalverteilten Messwert ist die Anwendung und der Erkenntnisgewinn der Marginal effect models begrenzt. Da reichen dann auch die Ausgaben der Standardfunktionen. Aber auch dort werden wir dann noch in den entsprechenden Kapiteln sehen, dass wir hier noch was rausholen können. Die Marginal effect models entwicklen dann ihre Stärke für nicht normalverteilte Messwerte sowie eben nicht lineare Zusammenhänge.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#allgemeiner-hintergrund",
    "href": "stat-modeling-marginal.html#allgemeiner-hintergrund",
    "title": "53  Marginal effect models",
    "section": "",
    "text": "“Statistics is all about lines, and lines have slopes, or derivatives. These slopes represent the marginal changes in an outcome. As you move an independent/explanatory variable, what happens to the dependent/outcome variable?” — Heiss (2022)\n\n\n\n\n\nWelche Antwort liefert die Steigung?\n\nWenn sich \\(X\\) ändert, wie ändert sich dann \\(Y\\) an dem Wert von \\(X\\)? Hierbei muss sich \\(X\\) nicht um eine Einheit verändern, wie wir es gerne im linearen Zusammenhang sagen, sondern wir wollen die Steigung direkt im Punkt von \\((X|Y)\\) haben.\n\nWelche Antowort liefert die Vorhersage?\n\nWelche Werte für \\(Y\\) sagt das Modell für \\(X\\) vorraus? Wir müssen hier die beobachteten Werte von \\(Y\\), die in unserem Beispiel für einen pH-Wert wiederholt vorkommen, von dem einen vorhergesagten \\(Y\\) Wert aus dem Modell für ein gegebenes \\(X\\) unterscheiden.\n\n\n\n\nInterpretation SteigungInterpretation Vorhersage\n\n\nWir können einmal die Steigung (dx/dy) aus der ersten Ableitung der quadratischen Geradenfunktion für unsere ausgewählten pH-Werte bestimmen und dann entsprechend interpretieren.\n\n\n\nTabelle 53.1— Interpretation der Steigung der Enzymeaktivität an drei ausgewählten pH-Werten.\n\n\n\n\n\n\n\n\n\n\npH\nSteigung\nInterpretation\n\n\n\n\n-1\n29\nBei einem standardisierten pH-Wert von -1 steigt die Enzymeaktivität um 29U an.\n\n\n2\n-10\nBei einem standardisierten pH-Wert von 2 sinkt die Enzymeaktivität um 10U.\n\n\n6\n22\nBei einem standardisierten pH-Wert von 6 steigt die Enzymeaktivität um 22U an.\n\n\n\n\n\n\nWir können uns dann die Steigung auch direkt mit der Funktion slopes() bestimmen lassen und erhalten dann die folgenden Informationen. Häufig haben wir ja nicht die Geradengleichung vorliegen. Hier haben wir dann auch die p-Werte sowie einen entsprechenden Fehler. Wir haben hier eine leichte Abweichung, da ich die obige Steigung durch die Ableitung der quadratischen Funktion erstellt habe und nicht aus einem Polynomialmodell entnommen habe.\n\n\n\n ph Estimate Std. Error     z Pr(&gt;|z|)     S 2.5 % 97.5 %\n -1     28.3       2.44 11.57   &lt;0.001 100.5  23.5  33.04\n  2    -10.3       1.14 -9.08   &lt;0.001  63.0 -12.6  -8.11\n  6     21.4       1.63 13.16   &lt;0.001 129.0  18.3  24.64\n\nTerm: ph\nType: response\nComparison: dY/dX\n\n\n\n\nAuch hier können wir direkt durch das Einsetzen der pH-Werte in unsere quadratische Geradenfunktion die vorgesagten Enzymeaktivitäten für die ausgewählten pH-Werte bestimmen.\n\n\n\nTabelle 53.2— Interpretation der Vorhersage der Enzymeaktivität an drei ausgewählten pH-Werten.\n\n\n\n\n\n\n\n\n\n\npH\nVorhersage (y)\nInterpretation\n\n\n\n\n-1\n-9\nFür einen standardisierten pH-Wert von -1 sagt die Funktion eine Enzymeaktivität von -9U vorher.\n\n\n2\n6\nFür einen standardisierten pH-Wert von 2 sagt die Funktion eine Enzymeaktivität von 6U vorher.\n\n\n6\n-2\nFür einen standardisierten pH-Wert von 6 sagt die Funktion eine Enzymeaktivität von -2U vorher.\n\n\n\n\n\n\nAuch können wir die Steigung aus den Daten direkt mit der Funktion predictions() bestimmen. Häufig haben wir ja nicht die Geradengleichung vorliegen. Hier haben wir theoretisch noch eine riesige Auswahl an Funktionen in R, wir konzentrieren uns hier aber auf das R Paket {marginaleffects}. Wir haben auch hier eine leichte Abweichung, da ich die obigen Vorhersagen durch die quadratische Funktion bestimmt habe und nicht aus einem Polynomialmodell entnommen habe.\n\n\n\n ph Estimate Std. Error      z Pr(&gt;|z|)    S 2.5 % 97.5 %\n -1   -4.545       2.48 -1.830   0.0673  3.9 -9.41  0.324\n  2    8.951       2.23  4.013   &lt;0.001 14.0  4.58 13.323\n  6   -0.545       2.36 -0.231   0.8176  0.3 -5.18  4.089\n\nType: response\n\n\n\n\n\n\n\n\n\n\nVorhersage 1-faktoriellVorhersage 2-faktoriell\n\n\nWir haben hier also in unserem einfaktoriellen Modell einmal die gruppierten pH-Werte in den Gruppen niedrig, mittel und hoch vorliegen. Wir wollen dann den Mittelwert für jede der Gruppen bestimmen.\n\n\n\nTabelle 53.3— Interpretation der Vorhersage der Enzymeaktivität an drei ausgewählten pH-Werten.\n\n\n\n\n\n\n\n\n\n\npH\nMittelwert\nInterpretation\n\n\n\n\nniedrig\n3.2\nFür die Gruppe der niedrigen pH-Werte haben wir im Mittel eine Enzymeaktivität von 3.2U vorliegen.\n\n\nmittel\n2.59\nFür die Gruppe der mittleren pH-Werte haben wir im Durchschnitt eine Enzymeaktivität von 2.59U vorliegen.\n\n\nhoch\n-5.6\nFür die Gruppe der hohen pH-Werte haben wir im Mittel eine Enzymeaktivität von -5.9U vorliegen.\n\n\n\n\n\n\nJetzt können wir uns auch mit der Funktion predictions() aus dem R Paket {marginaleffects} die Mittelwerte für die Gruppen vorhersagen lassen. Wir erhalten dann auch die entsprechenden Standardfehler und andere statistische Maßzahlen. Hier kriegen wir noch keinen Vergleich, hier wird nur getestet, ob der Mittelwert sich von der Null unterscheidet.\n\n\n\n     grp Estimate Std. Error      z Pr(&gt;|z|)    S  2.5 % 97.5 %\n niedrig    -2.50       3.99 -0.626    0.531  0.9 -10.32  5.327\n mittel     -1.35       1.06 -1.276    0.202  2.3  -3.42  0.722\n hoch       17.11       4.91  3.483   &lt;0.001 11.0   7.48 26.745\n\nType: response\n\n\n\n\nKommen wir nun zu der Vorhersage der Mittelwerte oder Marginal means in den gruppierten pH-Werten aufgeteilt nach den beiden Gruppen der Prokaryoten sowie Eukaryonten. Daher haben wir hier ein zweifaktorielles Design vorliegen. Wir wollen eben die Mittelwerte für alle Faktorkombinationen wissen.\n\n\n\nTabelle 53.4— Interpretation der Vorhersage der Enzymeaktivität an drei ausgewählten pH-Werten in den Prokaryoten und Eukaryonten\n\n\n\n\n\n\n\n\n\n\n\npH\nGruppe\nMittelwert\nInterpretation\n\n\n\n\nniedrig\nEukaryot\n14.21\nFür die Gruppe der niedrigen pH-Werte der Eukaryoten haben wir im Mittel eine Enzymeaktivität von 14.21U vorliegen.\n\n\nniedrig\nProkaryot\n-19.2\nFür die Gruppe der niedrigen pH-Werte der Prokaryoten haben wir im Mittel eine Enzymeaktivität von -19.2U vorliegen.\n\n\nmittel\nEukaryot\n-9.22\nFür die Gruppe der mittleren pH-Werte der Eukaryoten haben wir im Mittel eine Enzymeaktivität von -9.22U vorliegen.\n\n\nmittel\nProkaryot\n2.59\nFür die Gruppe der mittleren pH-Werte der Prokaryoten haben wir im Mittel eine Enzymeaktivität von 2.59U vorliegen.\n\n\nhoch\nEukaryot\n26.24\nFür die Gruppe der hohen pH-Werte der Eukaryoten haben wir im Mittel eine Enzymeaktivität von 26.24U vorliegen.\n\n\nhoch\nProkaryot\n-5.14\nFür die Gruppe der hohen pH-Werte der Prokaryoten haben wir im Mittel eine Enzymeaktivität von -5.14U vorliegen.\n\n\n\n\n\n\nWenn wir dann die Funktion predictions() aus dem R Paket {marginaleffects} benutzen erhalten wir dann auch die Marginal means für alle Faktorkombinationen zurück. Hier sind die Werte die gleichen wir auch in der simplen Berechnung oben in der Abbildung, da unser Modell eben dann doch nur die beiden Faktoren enthält. Wir erhalten dann auch die Standardfehler und den p-Wert für den Test gegen einen Mittelwert von Null.\n\n\n\n     grp      type Estimate Std. Error       z Pr(&gt;|z|)     S   2.5 % 97.5 %\n niedrig Eukaryot     14.21     0.5498   25.84   &lt;0.001 486.6  13.129  15.28\n niedrig Prokaryot   -19.20     4.1190   -4.66   &lt;0.001  18.3 -27.277 -11.13\n mittel  Eukaryot     -9.22     0.0325 -283.79   &lt;0.001   Inf  -9.286  -9.16\n mittel  Prokaryot     2.59     1.2580    2.06   0.0396   4.7   0.123   5.05\n hoch    Eukaryot     28.24    13.4263    2.10   0.0354   4.8   1.924  54.55\n hoch    Prokaryot    -5.14     0.5571   -9.22   &lt;0.001  64.9  -6.228  -4.04\n\nType: response\n\n\n\n\n\n\n\n\n\n\n\n\nWeitere Tutorien für die Marginal effects models\n\n\n\nWir oben schon erwähnt, kann dieses Kapitel nicht alle Themen der Marginal effects models abarbeiten. Daher präsentiere ich hier eine Liste von Literatur und Links, die mich für dieses Kapitel hier inspiriert haben. Nicht alles habe ich genutzt, aber vielleicht ist für dich was dabei.\n\nOhne den Blogpost Marginalia: A guide to figuring out what the heck marginal effects, marginal slopes, average marginal effects, marginal effects at the mean, and all these other marginal things are von Heiss (2022) wäre dieses Kapitel nicht möglich gewesen.\nWie alles im Leben ist nichts ohne Kritik. Is least squares means (lsmeans) statistical nonsense? ist dann auch eine gute Frage. Ich bin der Meinung nein und auch andere sind es, aber hier kannst du dann nochmal eine andere Meinung lesen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#auf-ein-wort",
    "href": "stat-modeling-marginal.html#auf-ein-wort",
    "title": "53  Marginal effect models",
    "section": "53.2 Auf ein Wort…",
    "text": "53.2 Auf ein Wort…\n\n“What he says?” — Asterix, Sieg über Caesar\n\nSoweit so gut. Wenn du verstanden hast, was die Marginal effect models können, dann kannst du auch bei den Daten und deren Auswertung weitermachen. Hier geht es dann etwas tiefer und ich gehe nochmal auf einzelen Aspekte etwas ausführtlicher ein. So wollen wir nochmal verstehen, was eigentlich die Steigung nochmal war und wie wir die Steigung berechnen. Dann müssen wir nochmal über simple und multiple Modelle sprechen. Dann gehen wir nochmal auf die Vorhersage ein und ich gebe nochmal einen kurzen Überblick, was wir da eigentlich alles vorhersagen oder genauer was wie heißt. Dann besprechen wir nochmal die Unterschiede zwischen den Paketen {marginaleffects} und {emmeans}. Wie immer kann man den Teil hier auch überspringen, wenn es nur um die Anwendung geht.\n\n53.2.1 …zur Steigung\nWenn wir mit dem Verstehen und Zerforschen der Steigung vorankommen wollen, dann können wir Heiss (2022) und Arel-Bundock et al. (2024) mit der Veröffentlichung Model to meaning — How to Interpret Statistical Models With marginaleffects for R and Python nicht ignorieren. Ich nutze jetzt eine etwas allgemeinere Erklärung der Marginal effect models und konzentriere mich erstmal auf ein normalverteiltes \\(x\\) sowie ein normalverteiltes \\(y\\) in einem simplen Modell mit einem \\(x\\) und einem \\(y\\) in der folgenden Form.\n\\[\ny \\sim \\beta_0 + \\beta_1 x_1\n\\] mit\n\n\\(\\beta_0\\), dem Koeffizienten des y-Achsenabschnitt oder Intercept der Geraden.\n\\(\\beta_1\\), dem Koeffizienten der Steigung der Geraden\n\nDaher haben wir hier in unserem \\(x\\) keine Gruppen vorliegen sondern einen klassischen Scatterplot mit Punkten als Beobachtungen. Wir können die Marginal effect models auch auf beliebige kategorielle \\(x\\) wie eben Behandlungsgruppen sowie jedes beliebige \\(y\\) anwenden, aber hier fangen wir einmal einfach an.\n\nWelche Frage wollen wir mit Marginal effect models beantworten?\n\nWenn sich das \\(x\\) um einen Wert oder eine Einheit erhöht, um wieviele Einheiten verändert sich dann der Wert von \\(y\\)?\n\n\nIn der folgenden Abbildung siehst du einmal zwei Scatterplots. In dem linken Scatterplot haben wir einen linearen Zusammenhang zwischen unseren \\(x\\)-Werten und den \\(y\\)-Werten. Wir können sagen, dass wenn sich \\(x\\) um einen Wert erhöht, dann erhöht sich auch \\(y\\) um einen konstanten Wert. Dieser konstante Wert um den sich die \\(y\\)-Werte mit ansteigenden \\(x\\) erhöhen, nennen wir auch die Steigung \\(\\beta_1\\). In einem linearen Zusammenhang ist die Frage damit mit der Steigung der Geraden eigentlich beantwortet. Steigt \\(x\\) um einen Wert, dann steigt \\(y\\) um den Wert der Steigung \\(\\beta_1\\) der Geraden. Diesen konstanten Zusammenhang haben wir aber nicht bei einem quadratischen Zusammenhang wie in der rechten Abbildung. Wir können hier nicht sagen, dass wenn sich \\(x\\) um einen Wert erhöht, sich auch \\(y\\) um einen konstanten Wert ändert. Hier hängt es von dem betrachteten \\(x\\)-Wert ab.\n\n\n\n\n\n\n\n\nAbbildung 53.3— Scatterplot der kontinuierlichen x-Werte und kontinuierlichen y-Werte. In einem Modell wird die Abhängigkeit von y und x modellieren. (A) Linearer Zusammenhang. (B) Quadratischer Zusammenhang. [Zum Vergrößern anklicken]\n\n\n\n\n\nSchauen wir mal in ein Zahlenbeispiel und lassen die Beobachtungen weg. Beginnen wir einmal mit dem linearen Zusammenhang der Funktion \\(f(x) = 2x-1\\). Ich habe die Gerade einmal in der folgenden Abbildung eingezeichnet. Wenn usn jetzt die Steigung an jedem beliebigen Punkt von \\(x\\) interessiert, dann bilden wir die erste Abbleitung \\(f'(x) = 2\\). Erhöht sich also der Wert von \\(x\\) um 1 dann steigt der Wert von \\(y\\) um 2 an. Wir sehen aber auch, dass für jedes beliebige Punktepaar wir eine Steigung von 2 vorliegen haben.\n\n\n\n\n\n\n\n\nAbbildung 53.4— Gerade des Modells für einen linearen Zusammenhang. In einem Modell wird die Abhängigkeit von y und x modellieren. (A) Lineares Modell mit Gleichung. (B) Steigung an der Geraden für ausgewählte Punktepaare. [Zum Vergrößern anklicken]\n\n\n\n\n\nSpanndender wird die Sachlage in einem quadratischen Zusammenhang in der folgenden Abbildung. Oder allgemeiner gesprochen, wenn wir keinen linearen Zusammenhang vorliegen haben. Wir haben hier den Zusammenhgang \\(f(x) = -0.5x^2+5x\\) vorliegen. Damit haben wir dann eine erste Ableitung von \\(f'(x) = x+5\\). Wie du siehst, ändert sich auch die Steigung in Abhänigkeit von \\(x\\). Wenn wir \\(x\\)-Werte links betrachten, dann liegt hier eher eine positive Steigung vor. Wenn wir nach rechts laufen, dann sehen wir immer stärkere negative Steigungen. Und hier kommen dann die Marginal effect models ins Spiel. Wir können allgemein gesprochen uns mit den Marginal effect models für jedes \\(x\\) die Steigung wiedergeben lassen.\n\n\n\n\n\n\n\n\nAbbildung 53.5— Gerade des Modells für einen quadratischen Zusammenhang. In einem Modell wird die Abhängigkeit von y und x modellieren. (A) Quadratisches Modell mit Gleichung. (B) Steigung an der Geraden für ausgewählte Punktepaare. [Zum Vergrößern anklicken]\n\n\n\n\n\nAber moment, denkst du jetzt, in dem linearen Zusammenhang ist es ja einfach mit der Steigung für jeden beliebigen \\(x\\)-Wert. Wir erhalten für jeden \\(x\\)-Wert genau die gleiche Steigung. Aber bei den nicht-linearen Zusammenhängen hat ja jeder \\(x\\)-Wert seine eigene Steigung. Wenn wir viele \\(x\\)-Werte gemessen haben, dann haben wir ja dutzende bis hunderte Steigungen durch ein Marginal effect model ermittelt. Das stimmt und damit kommen wir auch gleich zu dem nächsten Punkt, dem Aggregieren der Daten. Oder wie im folgenden Cartoon richtig dargestellt, müssen wir uns überlegen wie wir den den Durchschnitt der Steigungen berechnen.\n\n\n\n\n\n\nAbbildung 53.6— “Should I cut the red wire or the blue one!?” “WAIT! We’re going to watch ALL the action movies from the ’80s and ’90s and then calculate the average!” Quelle: wumo.com\n\n\n\nWir haben uns in dem obigen Beispiel nur ein koninuierliches \\(x\\) angeschaut. Jetzt kann es aber auch sein, dass deine \\(x\\)-Werte keine kontinuierlichen Messwerte wie das Gewicht oder die Zeit sind, sondern eben Gruppen. Also du hast verschiedene Düngestufen oder Behandlungsgruppen auf der \\(x\\)-Achse als Faktoren aufgetragen. Auch dann können wir eine lineare Regression rechnen, eine Linie durch die Punkte legen und anschließend ein Marginal effect model rechnen. Was ist also der Unterschied zwischen einem kontinuierlichen und einem kategoriellen \\(x\\)-Wert?\n\n\n53.2.2 …zu simplen und multiplen Modelle\n\nUnterschied zwischen kontinuierlichen und kategoriale \\(x\\)-Werte\nWir kennen verschiedene Namen für das Gleiche. So nennen wir dann ein kontinuierliches \\(x\\) dann auch gerne eine stetige Variable oder intervalskaliert. Nichts destotrotz, wir haben ein \\(x\\) was in kleinen, marignalen Schritten anwachsen kann. Hier kannst du eben an das Gewicht der Flöhe oder aber Zeiteinheiten sowie das Einkommen denken. Wir verändert sich das \\(y\\), wenn wir die \\(x\\)-Werte erhöhen?\nAuf der anderen Seite haben wir dann kategoriale oder kategorielle \\(x\\)-Werte. Diese bezeichnen wir dann auch gerne diskret oder aber als Faktoren in R. Wenn wir die Werte von \\(x\\) ändern, dann springen wir in eine neue Gruppe und es liegt hier eigentlich kein kleiner Schritt vor. Hier haben wir dann eben Düngestufen oder aber Behandlungsgruppen vorliegen. Hier fragen wir uns, wie ändert sich der Wert von \\(y\\), wenn wir eine Gruppe in \\(x\\) weiterspringen?\nIn der folgenden Abbildung von Heiss (2022) siehst du nochmal schön den Unterschied dargestellt. Wir haben beider einer kategorialen Variable einen Schalter. Entweder ist der Schalter an oder eben aus. Im simpelsten Fall haben wir männliche oder eben weibliche Flöhe vorliegen. Das Geschlecht ist somit kategorial. Die Sprungweite oder das Gewicht von Flöhen ist eine kontinuierliche Variable. Wir haben einen Schieberegeler den wir ziemlich fein einstellen können.\n\n\n\n\n\n\nAbbildung 53.7— Unterschied zwischen einer kategorialen Variable und einer kontinuierlichen Variable in einem statistischen Modell visualisiert als Schalter und Schieberegler. Übersetzt nach Heiss (2022)\n\n\n\nAls wäre das nicht kompliziert genug, schauen wir uns meistens dann nicht nur eine \\(x\\) Variable in einem Modell an, die wir dann ändern, sondern eben mehrere. Dann kombinieren wir noch gerne kontinuierliche und kategoriale \\(x\\)-Werte in einem Modell miteinander und erhalten ein Mischboard. Wir können einiges an Schiebereglern und Schaltern in einem Modell betätigen und erhalten entsprechende andere \\(y\\)-Werte. Hier helfen dann auch Marginal effect models um mehr Erkenntnisse aus einem Modell zu erhalten.\n\n\n\n\n\n\nAbbildung 53.8— Kombination verschiedener kategorialer Variablen und kontinuierlichen Variablen in einem statistischen Modell visualisiert als Mischboard. Übersetzt nach Heiss (2022)\n\n\n\nSomit kommen wir dann hier mal zu einer Definition, wie wir dann die beiden Arten der möglichen \\(x\\)-Werte als kontinuierliche und kategoriale Werte sprachlich unterscheiden. Wir immer, je nach wissenschaftlichen Hintergrund können sich dann die Namen ändern und anders sein. Das ist dann eben so in der Statistik.\n\nMarginal effect (deu. marginaler Effekt)\n\nEin marginaler Effekt beschreibt den statistischen Effekt für kontinuierliche erklärende Variablen; die partielle Ableitung einer Variablen in einem Regressionsmodell; der Effekt eines einzelnen Schiebereglers.\n\nConditional effect (deu. bedingter Effekt) oder Gruppenkontrast (eng. group contrast)\n\nEin bedingter Effekt beschreibt den statistischen Effekt für kategoriale erklärende Variablen; der Unterschied in den Mittelwerten, wenn eine Bedingung eingeschaltet ist und wenn sie ausgeschaltet ist; der Effekt eines einzelnen Schalters.\n\n\n\n\n\n53.2.3 …zur Vorhersage\n\n\n53.2.4 …zu {marginaleffects} und {emmeans}\nWenn wir Marginal effect models rechnen wollen, dann können wir im Prinzip auf zwei große Pakete zurückgreifen. Einmal das R Paket {marginaleffects} sowie das R Paket {emmeans}. Das R Paket {modelbased} setzt sich im Prinzip auf die beiden Pakete drauf und ist mehr oder minder ein Wrapper mit anderen Funktionsnamen. Das ist eigentlich eine gute Idee und ich zeige dann auch nochmal, wie sich das R Paket {modelbased} verhält. Kommen wir erstmal zu dem hauptsächlichen Unterschied zwischen unseren beiden Elefanten.\n\nWie unterscheiden sich {emmeans} und {marginaleffects}?\n\nDas R Paket {emmeans} erstellt Durchschnittswerte der Daten und fügt diese Durchschnittswerte dann in Modelle ein. Das R Paket {marginaleffects} fügt alle Werte der Daten in ein Modell ein und erstellt dann Durchschnittswerte aus der Ausgabe des Modells. Am Ende ist es vermutlich dann auch wieder ein nur kleiner Unterschied, der was ausmachen kann. Aber da kommt es dann auf die wissenschaftliche Fragestellung an.\n\n\nDabei gibt es noch einen weiteren bedeutenden Unterschied zwischen den beiden Paketen, die sich dann direkt aus der Aggregierung der Daten ableitet. Die Frage ist ja, erst den Mittelwert bilden und dann Modellieren oder umgekehrt. Das R Paket {emmeans} hat als philosophischen Hintergrund experimentelle Daten als Basis. Das R Paket {marginaleffects} hingegen nimmt beobachtete Daten an. Hier möchte ich dann einmal die Vingette des R Pakets {emmeans} zitieren.\n\n“To start off with, we should emphasize that the underpinnings of estimated marginal means – and much of what the {emmeans} package offers – relate more to experimental data than to observational data. In observational data, we sample from some population, and the goal of statistical analysis is to characterize that population in some way. In contrast, with experimental data, the experimenter controls the environment under which test runs are conducted, and in which responses are observed and recorded. Thus with experimentation, the population is an abstract entity consisting of potential outcomes of test runs made under conditions we enforce, rather than a physical entity that we observe without changing it.” — R Paket {emmeans}\n\nWas will uns nun dieser Text sagen und was bedeutet der Unterschied zwischen experimentellen und beobachteten Daten?\n\nWir nutzen {emmeans}, wenn wir Gruppenvergleiche aus einem experimentellen, faktoriellen Design rechnen wollen. Solche faktorielle Designs sind in den Agrarwissenschaften sehr häufig.\nWir nutzen {marginaleffects}, wenn wir beobachtete Daten vorliegen haben. Dies ist sehr häufig bei zeitlichen Verläufen der Fall. Wenn wir also wissen wollen, wie ändert sich den Messwert über die Zeit?",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#genutzte-r-pakete",
    "href": "stat-modeling-marginal.html#genutzte-r-pakete",
    "title": "53  Marginal effect models",
    "section": "53.3 Genutzte R Pakete",
    "text": "53.3 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,\n               janitor, ggpmisc, conflicted)\nconflicts_prefer(dplyr::mutate)\nconflicts_prefer(dplyr::summarize)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(ggplot2::annotate)\ncb_pal &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \n            \"#009E73\", \"#F0E442\", \"#F5C710\", \n            \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n## \nnice_number &lt;- label_number(style_negative = \"minus\", accuracy = 0.01)\nnice_p &lt;- label_pvalue(prefix = c(\"p &lt; \", \"p = \", \"p &gt; \"))\nfind_intercept &lt;- function(x1, y1, slope) {\n  intercept &lt;- slope * (-x1) + y1\n  return(intercept)\n}\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#daten",
    "href": "stat-modeling-marginal.html#daten",
    "title": "53  Marginal effect models",
    "section": "53.4 Daten",
    "text": "53.4 Daten\n\nModellierung von Enzymen\n\n\nR Code [zeigen / verbergen]\nenzyme_tbl &lt;- read_excel(\"data/enzyme_kinetic.xlsx\") |&gt; \n  mutate(grp = factor(grp, levels = c(\"niedrig\", \"mittel\", \"hoch\")))  \n\n\n\n\n\n\nTabelle 53.5— Daten für die einfaktorielle MANOVA mit der Sprungweite in [cm] und dem Gewicht der Flöhe in [mg] für drei Floharten.\n\n\n\n\n\n\nph\nactivity\ngrp\ntype\n\n\n\n\n-2\n-38.05\nniedrig\nProkaryot\n\n\n-2\n-43.07\nniedrig\nProkaryot\n\n\n-2\n-51.55\nniedrig\nProkaryot\n\n\n…\n…\n…\n…\n\n\n7.5\n57.68\nhoch\nEukaryot\n\n\n7.5\n60.68\nhoch\nEukaryot\n\n\n7.5\n69.32\nhoch\nEukaryot\n\n\n\n\n\n\n\n\n\n\n\n\nTabelle 53.6— Daten für die einfaktorielle MANOVA mit der Sprungweite in [cm] und dem Gewicht der Flöhe in [mg] für drei Floharten.\n\n\n\n\n\n\nph\nn\npercent\n\n\n\n\n-2.0\n3\n7.0%\n\n\n-1.0\n5\n11.6%\n\n\n0.0\n4\n9.3%\n\n\n1.0\n4\n9.3%\n\n\n2.0\n4\n9.3%\n\n\n3.0\n4\n9.3%\n\n\n4.0\n4\n9.3%\n\n\n5.0\n3\n7.0%\n\n\n6.0\n5\n11.6%\n\n\n7.0\n4\n9.3%\n\n\n7.5\n3\n7.0%\n\n\n\n\n\n\n\n\n\\[\ny = x^3 - 8x^2 + 10x + 10\n\\]\nFunktion der Steigung als erste Ableitung nach\n\\[\ny' = 3x^2 - 16x + 10\n\\]\n\n\n\n\n\n\n\n\nAbbildung 53.9— Scatterplot der [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.10— (A) Linearer Zusammenhang. (B) gg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nModellierung von Flöhen\n\n\nR Code [zeigen / verbergen]\nflea_model_tbl &lt;- read_excel(\"data/fleas_model_data.xlsx\") |&gt; \n  mutate(feeding = as_factor(feeding),\n         stage = as_factor(stage),\n         bonitur = as.numeric(bonitur),\n         infected = factor(infected, labels = c(\"healthy\", \"infected\"))) |&gt; \n  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)\n\n\n\n\n\n\nTabelle 53.7— Daten für die einfaktorielle MANOVA mit der Sprungweite in [cm] und dem Gewicht der Flöhe in [mg] für drei Floharten.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfeeding\nstage\njump_length\nweight\ncount_leg\nhatched\nbonitur\ninfected\n\n\n\n\nsugar_water\nadult\n70.9\n16.42\n63.4\n516.41\n4\ninfected\n\n\nsugar_water\nadult\n50.75\n12.62\n53.96\n363.5\n1\nhealthy\n\n\nsugar_water\nadult\n62.22\n15.57\n120.44\n303.01\n2\nhealthy\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n\n\nketchup\njuvenile\n41.08\n7.18\n423.07\n429.18\n4\ninfected\n\n\nketchup\njuvenile\n49.68\n6.6\n550.97\n629.58\n5\ninfected\n\n\nketchup\njuvenile\n43.28\n4.19\n873.28\n192.66\n5\nhealthy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.11— foo. (A) Kombinierte Darstellung in einem Scatterplot (B) Aufgeteilte Darstellung für beide Entwicklungsstadien. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\nTabelle 53.8— Deskriptive Statistik des Infektionsstatus (0 = nein / 1 = ja) mit Flohschnupfen aufgeteilt nach den Faktoren und anderen Variablen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nhealthy\nN = 211\ninfected\nN = 271\n\n\n\n\nfeeding\n\n\n\n\n\n\n    sugar_water\n9 / 21 (43%)\n7 / 27 (26%)\n\n\n    blood\n3 / 21 (14%)\n13 / 27 (48%)\n\n\n    ketchup\n9 / 21 (43%)\n7 / 27 (26%)\n\n\nstage\n\n\n\n\n\n\n    adult\n14 / 21 (67%)\n10 / 27 (37%)\n\n\n    juvenile\n7 / 21 (33%)\n17 / 27 (63%)\n\n\n\n1 n / N (%)",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#visualisierung-von-modellen",
    "href": "stat-modeling-marginal.html#visualisierung-von-modellen",
    "title": "53  Marginal effect models",
    "section": "53.5 Visualisierung von Modellen",
    "text": "53.5 Visualisierung von Modellen\nIn dem folgenden Abschnitten wollen wir immer Modell in unsere Visualisierungen einzeichen. Nehmen wir einmal einen simplen Datensatz,d en wir uns einfach selber bauen und dann wollen wir dort eine Linie durchzeichnen. Dafür nehmen wri einmal zwanzig x-Werte und bauen uns dann die y-Werte nach \\(y = 1.5 + 0.75 \\cdot x\\) zusammen. Dann addieren wir noch einen Fehler aus einer Standardnormalverteilung hinzu. Wenn wir keinen Fehler hinzuaddieren würden, dann lägen die Punkte wie auf einer Perlenschnur aneinandergereit.\n\n\nR Code [zeigen / verbergen]\nset.seed(20250703)\nmodell_line_tbl &lt;- tibble(x = rnorm(20, 2, 1),\n                          y = 1.5 + 0.75 * x + rnorm(length(x), 0, 1))\n\n\nJetzt können wir einmal das Modell anpassen und schauen, ob wir die Koeffizienten des Modells wiederfinden. Dann wollen wir natürlich auch sehen, ob unser Modell durch die Punkte läuft. Also erstmal das Modell mit lm() gebaut. Dann schauen wir uns noch die Koeffizienten einmal mit an. Bei nur so wenigen Beobachtungen werden die Koeffizienten aus dem Modell nicht mit den voreingestellten übereinstimmen.\n\n\nR Code [zeigen / verbergen]\nmodel_fit &lt;- lm(y ~ x, modell_line_tbl)\nmodel_fit\n\n\n\nCall:\nlm(formula = y ~ x, data = modell_line_tbl)\n\nCoefficients:\n(Intercept)            x  \n     1.9574       0.5534  \n\n\nIn der folgenden Abbildung siehst du dann einmal den Scatterplot von unseren x-Werten und y-Werten. Wir wollen jetzt die Gerade, die wir im Modell geschätzt haben einmal durch die Punkte legen um zu schauen, ob das Modell auch die Punkte beschreibt. Dabei soll die Gerade durch die Mitte der Punkte laufen und die Punkte sollten auf beiden Seiten der Geraden gleichmäßig verteilt sein.\n\n\n\n\n\n\n\n\nAbbildung 53.12— Scatterplot der x-Werte und y-Werte. Durch die Punkte soll die Gerade aus dem Modell gelegt werden. [Zum Vergrößern anklicken]\n\n\n\n\n\nWir haben jetzt verschiedene Möglichkeiten die Koeffizienten und damit das Modell in den obigen Plot einzuzeichnen. Ich zeige dir hier einmal die häufigsten, die ich dann auch nutze. Erstmal die Anwendung direkt in {ggplot} und dann einmal noch in dem R Paket {ggpmisc}.\n\n…mit {ggplot}\n\ngeom_function()geom_line(aes(y = predict(model_fit)))geom_smooth()\n\n\nIn der Funktion geom_function() müssen wir die Funktion angeben, die wir dann abbilden wollen. Wenn du verstehst, was die Koeffizienten in dem Modell bedeuten, dann kannst du natürlich die mathematische Funktion wie hier entsprechend ergänzen.\n\n\nR Code [zeigen / verbergen]\nggplot(modell_line_tbl, aes(x, y)) +\n  theme_minimal() +\n  geom_point() +\n  geom_function(fun = \\(x) 1.9574 + 0.5534 * x, \n                color = \"#CC79A7\")\n\n\n\n\n\n\n\n\nAbbildung 53.13— Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade mit den Koeffizienten aus dem Modell. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nManchmal ist das Modell zu komplex, dass wir die mathematische Funktion einfach aufschreiben könnten. In dem Fall hilft die Funktion geom_line() die wir dann die vorhergesagten y-Werte mit der Funktion predict() aus dem Modell übergeben. Das funktioniert auch sehr gut.\n\n\nR Code [zeigen / verbergen]\nggplot(modell_line_tbl, aes(x, y)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(model_fit)), \n                color = \"#CC79A7\")\n\n\n\n\n\n\n\n\nAbbildung 53.14— Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade mit den vorhergesagten Werten aus dem Modell. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nAbschließend können wir auch einfach so eine Gerade durch die Punkte legen indem wir die Funktion geom_smooth() als eine Art der Glättung nutzen. Aber hier muss ich sagen, dass uns dann die Geradengleichung fehlt. So mal zum gucken ist das wunderbar. Du kannst über die Option formula auch eine Funktion übergeben. Darüber hinaus erhalten wir dann noch einen Fehlerbalken des Standardfehlers, was in manchen Fällen nützlich ist. Wenn du die Geradengleichung brauchst, dann schaue einmal in dem Paket {ggpmisc} rein.\n\n\nR Code [zeigen / verbergen]\nggplot(modell_line_tbl, aes(x, y)) +\n  theme_minimal() +\n  geom_point() +\n  geom_smooth(method = \"lm\", color = \"#CC79A7\") +\n  geom_smooth(method = \"lm\", formula = y ~ I(x^4), \n              color = \"#0072B2\")\n\n\n\n\n\n\n\n\nAbbildung 53.15— Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade aus einer Glättung. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n…mit {ggpmisc}\nIch möchte hier nich zu sehr in die Tiefe von {ggpmisc} gehen, aber das Paket verbindet im Prinzip die Funktion geom_smooth() mit der Wiedergabe der Informationen zu den Regressionsgleichungen. Du findest bei StackOverflow einmal eine schöne Übersicht in Add regression line equation and R^2 on graph. Wenn du mehr willst, dann schaue dir einmal die Hilfeseite von {ggpmisc} mit Fitted-Model-Based Annotations näher an. Es geht echt eine Menge, von dem ich hier nur einmal den Klassiker zeige. Wir wollen einmal die Regressionsgleichung plus das Bestimmtheitsmaß einzeichnen. Das geht über drei Funktionen zusammen mit der Regressionsgeraden.\n\n\nR Code [zeigen / verbergen]\nggplot(modell_line_tbl, aes(x, y)) +\n  theme_minimal() +\n  geom_point() +\n  stat_poly_line(color = \"#CC79A7\") +\n  stat_poly_eq(use_label(\"eq\")) +\n  stat_poly_eq(label.y = 0.9) \n\n\n\n\n\n\n\n\nAbbildung 53.16— Scatterplot der x-Werte und y-Werte. Durch die Punkte läuft die Gerade aus einer Glättung plus die Geradengleichung und das Bestimmtheitsmaß. [Zum Vergrößern anklicken]",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#datenraster",
    "href": "stat-modeling-marginal.html#datenraster",
    "title": "53  Marginal effect models",
    "section": "53.6 Datenraster",
    "text": "53.6 Datenraster\nWas ist ein Datenraster (eng. data grid) eigentlich? Wir brauchen die Idee des Datenrasters um überhaupt die Vorhersagen und die Steigungen zu verstehen. Im Prinzip beinhaltet das Datenraster die Information zu welchen Beobachtungen wir eine Vorhersage machen wollen. Wenn wir nochmal kutz zu dem Enyzmebeispiel kommen, zu welchen pH-Werten möchtest du dann eine Steigung oder aber eine Vorhersage der Enzymetätigkeit haben? Beginnen wir mit einem einfachen Beispiel um zu verstehen was die einzelnen Datenraster aussagen wollen.\nIn Folgenden siehst du einmal einen kleinen Datensatz mit einer numerischen Variable, einer dichotomen Variable sowie einer Variable mit drei Kategorien. So ähnlich haben wir ja auch Datensätze in echt vorliegen.\n\n\nR Code [zeigen / verbergen]\nset.seed(20250709)\ngrid_tbl &lt;-  tibble(numerisch = rnorm(n = 8),\n                    dichotom = rbinom(n = 8, size = 1, prob = 0.5),\n                    kategorial = sample(c(\"niedrig\", \"mittel\", \"hoch\"), \n                                        size = 8, replace = TRUE))\n\n\n\nBeobachtetes Raster (eng. empirical grid)\n\n\nR Code [zeigen / verbergen]\ngrid_tbl |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                dichotom\n                kategorial\n              \n        \n        \n        \n                \n                  0.32260788\n                  1\n                  niedrig\n                \n                \n                  0.64136316\n                  1\n                  hoch\n                \n                \n                  -0.81802243\n                  1\n                  mittel\n                \n                \n                  -1.46551819\n                  0\n                  mittel\n                \n                \n                  -0.01230531\n                  1\n                  mittel\n                \n                \n                  -1.61493276\n                  0\n                  mittel\n                \n                \n                  -0.82683177\n                  0\n                  mittel\n                \n                \n                  0.76328096\n                  1\n                  hoch\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.17— foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nInteressantes Raster (eng. interesting grid)\n\n\nR Code [zeigen / verbergen]\ndatagrid(dichotom = c(0, 1), newdata = grid_tbl) |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                kategorial\n                dichotom\n                rowid\n              \n        \n        \n        \n                \n                  -0.3762948\n                  mittel\n                  0\n                  1\n                \n                \n                  -0.3762948\n                  mittel\n                  1\n                  2\n                \n        \n      \n    \n\n\n\n\n\nR Code [zeigen / verbergen]\ndatagrid(numerisch = range, dichotom = mean, kategorial = unique, \n         newdata = grid_tbl) |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                dichotom\n                kategorial\n                rowid\n              \n        \n        \n        \n                \n                  -1.614933\n                  0.625\n                  niedrig\n                  1\n                \n                \n                  -1.614933\n                  0.625\n                  hoch\n                  2\n                \n                \n                  -1.614933\n                  0.625\n                  mittel\n                  3\n                \n                \n                  0.763281\n                  0.625\n                  niedrig\n                  4\n                \n                \n                  0.763281\n                  0.625\n                  hoch\n                  5\n                \n                \n                  0.763281\n                  0.625\n                  mittel\n                  6\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.18— foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nRepräsentatives Raster (eng. representative grid)\n\n\nR Code [zeigen / verbergen]\ndatagrid(grid_type = \"mean_or_mode\", newdata = grid_tbl) |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                dichotom\n                kategorial\n                rowid\n              \n        \n        \n        \n                \n                  -0.3762948\n                  1\n                  mittel\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.19— foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nBalanciertes Raster (eng. balanced grid)\n\n\nR Code [zeigen / verbergen]\ndatagrid(grid_type = \"balanced\", newdata = grid_tbl) |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                dichotom\n                kategorial\n                rowid\n              \n        \n        \n        \n                \n                  -0.3762948\n                  0\n                  hoch\n                  1\n                \n                \n                  -0.3762948\n                  0\n                  mittel\n                  2\n                \n                \n                  -0.3762948\n                  0\n                  niedrig\n                  3\n                \n                \n                  -0.3762948\n                  1\n                  hoch\n                  4\n                \n                \n                  -0.3762948\n                  1\n                  mittel\n                  5\n                \n                \n                  -0.3762948\n                  1\n                  niedrig\n                  6\n                \n        \n      \n    \n\n\n\n\n\nKontrafaktisches Raster (eng. counterfactual grid)\n\n\nR Code [zeigen / verbergen]\ncf_grid &lt;- datagrid(\n  dichotom = c(0, 1),\n  grid_type = \"counterfactual\",\n  newdata = grid_tbl[1:5,]\n)\nnrow(cf_grid )\n\n\n[1] 10\n\n\n\nBeobachtete DatenKontrafaktisches Raster\n\n\n\n\nR Code [zeigen / verbergen]\ngrid_tbl[1:5,] |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                numerisch\n                dichotom\n                kategorial\n              \n        \n        \n        \n                \n                  0.32260788\n                  1\n                  niedrig\n                \n                \n                  0.64136316\n                  1\n                  hoch\n                \n                \n                  -0.81802243\n                  1\n                  mittel\n                \n                \n                  -1.46551819\n                  0\n                  mittel\n                \n                \n                  -0.01230531\n                  1\n                  mittel\n                \n        \n      \n    \n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncf_grid |&gt; tt()\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                rowidcf\n                numerisch\n                kategorial\n                dichotom\n              \n        \n        \n        \n                \n                  1\n                  0.32260788\n                  niedrig\n                  0\n                \n                \n                  2\n                  0.64136316\n                  hoch\n                  0\n                \n                \n                  3\n                  -0.81802243\n                  mittel\n                  0\n                \n                \n                  4\n                  -1.46551819\n                  mittel\n                  0\n                \n                \n                  5\n                  -0.01230531\n                  mittel\n                  0\n                \n                \n                  1\n                  0.32260788\n                  niedrig\n                  1\n                \n                \n                  2\n                  0.64136316\n                  hoch\n                  1\n                \n                \n                  3\n                  -0.81802243\n                  mittel\n                  1\n                \n                \n                  4\n                  -1.46551819\n                  mittel\n                  1\n                \n                \n                  5\n                  -0.01230531\n                  mittel\n                  1",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#steigung-eng.-slopes",
    "href": "stat-modeling-marginal.html#steigung-eng.-slopes",
    "title": "53  Marginal effect models",
    "section": "53.7 Steigung (eng. slopes)",
    "text": "53.7 Steigung (eng. slopes)\n\n“Let us introduce another concept that is likely to get very popular in the near future within the world of regressions. Derivatives.” — {modelbased}\n\n\n53.7.1 Marginale Effekte\nHier sprechen wir von der Ableitung (eng. derivative)\n\nModellierung von Flöhen\n\n\n\n\n\n\n\n\nAbbildung 53.20— foo. (A) Kombinierte Darstellung in einem Scatterplot (B) Aufgeteilte Darstellung für beide Entwicklungsstadien. [Zum Vergrößern anklicken]\n\n\n\n\n\n\nLinearer Zusammenhang (\\(y \\sim x\\))Quadratischer Zusammenhang (\\(y \\sim x + x^2\\))\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_ln &lt;- lm(jump_length ~ weight,\n               data = flea_model_tbl)\ntidy(model_ln)\n\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    52.1      5.31       9.81 7.58e-13\n2 weight          1.61     0.469      3.43 1.28e- 3\n\n\n\\[\n\\begin{aligned}\n\\operatorname{E}[y \\mid x] &= \\beta_0 + \\beta_1 x \\\\[4pt]\n\\frac{\\partial \\operatorname{E}[y \\mid x]}{\\partial x} &= \\beta_1\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\operatorname{E}[\\text{Sprungweite} \\mid \\text{Gewicht}] &= 52.10 + 1.61 \\times \\text{Gewicht} \\\\[6pt]\n\\frac{\\partial \\operatorname{E}[\\text{Sprungweite} \\mid \\text{Gewicht}]}{\\partial\\ \\text{Gewicht}} &= 1.61\n\\end{aligned}\n\\]\n\n\nR Paket {polypoly}\nPolynomial Regression - An example\nFitting Polynomial Regression in R\n\n\nR Code [zeigen / verbergen]\nmodel_sq &lt;- lm(jump_length ~ weight + I(weight^2),\n               data = flea_model_tbl)\ntidy(model_sq)\n\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  47.1      10.4        4.53  0.0000437\n2 weight        2.62      1.87       1.40  0.169    \n3 I(weight^2)  -0.0397    0.0710    -0.559 0.579    \n\n\n\\[\n\\begin{aligned}\n\\operatorname{E}[y \\mid x] &= \\beta_0 + \\beta_1 x + \\beta_2 x^2 \\\\[4pt]\n\\frac{\\partial \\operatorname{E}[y \\mid x]}{\\partial x} &= \\beta_1 + 2 \\beta_2 x\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\operatorname{E}[\\text{Sprungweite} \\mid \\text{Gewicht}] &= 47.10 + (2.62 \\times \\text{Gewicht}) + (−0.04 \\times \\text{Gewicht}^2) \\\\[6pt]\n\\frac{\\partial \\operatorname{E}[\\text{Sprungweite} \\mid \\text{Gewicht}]}{\\partial\\ \\text{Gewicht}} &= 2.62 + (2\\times −0.04 \\times \\text{Gewicht})\n\\end{aligned}\n\\]\n\n\n\n\n\nR Code [zeigen / verbergen]\njump_weight_slope &lt;- function(x) 2.62 + (2 *-0.04 * x)\njump_weight_slope(c(5, 10, 15))\n\n\n[1] 2.22 1.82 1.42\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.21— foo. . [Zum Vergrößern anklicken]\n\n\n\n\n\n\n{marginaleffects}{emmeans}\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq |&gt; \n  slopes(newdata = datagrid(weight = c(5, 15, 25)))\n\n\n\n weight Estimate Std. Error     z Pr(&gt;|z|)   S  2.5 % 97.5 %\n      5    2.224      1.200 1.854   0.0637 4.0 -0.127   4.57\n     15    1.431      0.569 2.514   0.0119 6.4  0.315   2.55\n     25    0.638      1.800 0.354   0.7230 0.5 -2.890   4.17\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq |&gt; \n  emtrends(~ weight, var = \"weight\",\n           at = list(weight = c(5, 15, 25))) |&gt; \n  test()\n\n\n weight weight.trend   SE df t.ratio p.value\n      5        2.223 1.20 45   1.856  0.0700\n     15        1.430 0.57 45   2.510  0.0158\n     25        0.637 1.80 45   0.353  0.7254\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.22— foo. . [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nModellierung von Enzymen\nNachdem wir das einmal konzeptionellm haben einmal komplexer.\n\ngam()poly()loess()\n\n\n\n\n\n ph Estimate Std. Error     z Pr(&gt;|z|)    S  2.5 % 97.5 %\n -1     28.7       3.95  7.27  &lt; 0.001 41.4  20.99  36.47\n  2    -11.4       4.12 -2.77  0.00552  7.5 -19.49  -3.35\n  6     18.1       4.50  4.02  &lt; 0.001 14.1   9.28  26.92\n\nTerm: ph\nType: response\nComparison: dY/dX\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.23— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n ph Estimate Std. Error     z Pr(&gt;|z|)     S 2.5 % 97.5 %\n -1     28.3       2.44 11.57   &lt;0.001 100.5  23.5  33.04\n  2    -10.3       1.14 -9.08   &lt;0.001  63.0 -12.6  -8.11\n  6     21.4       1.63 13.16   &lt;0.001 129.0  18.3  24.64\n\nTerm: ph\nType: response\nComparison: dY/dX\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.24— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n ph Estimate\n -1    22.37\n  2    -4.74\n  6    21.85\n\nTerm: ph\nType: response\nComparison: dY/dX\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.25— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhilosophien zur Mittelwertbildung\n\n\n\n\nAverage marginal effects (AME)\n\n\nR Code [zeigen / verbergen]\njump_weight_slope &lt;- function(x) 2.62 + (2 *-0.04 * x)\njump_weight_slope(c(5, 10, 15))\n\n\n[1] 2.22 1.82 1.42\n\n\n\n\n\n\n\n\nAbbildung 53.26— foo. Modifiziert nach Heiss (2022)\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq &lt;- lm(jump_length ~ weight + I(weight^2),\n               data = flea_model_tbl)\ntidy(model_sq)\n\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  47.1      10.4        4.53  0.0000437\n2 weight        2.62      1.87       1.40  0.169    \n3 I(weight^2)  -0.0397    0.0710    -0.559 0.579    \n\n\n\n\n\n\n\n\n\n\nAbbildung 53.27— foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_sq &lt;- slopes(model_sq)\nhead(mfx_sq)\n\n\n\n Estimate Std. Error    z Pr(&gt;|z|)    S   2.5 % 97.5 %\n    1.318      0.702 1.88  0.06037  4.0 -0.0575   2.69\n    1.620      0.473 3.43  &lt; 0.001 10.7  0.6935   2.55\n    1.386      0.617 2.24  0.02482  5.3  0.1755   2.60\n    0.686      1.717 0.40  0.68938  0.5 -2.6786   4.05\n    1.316      0.705 1.87  0.06189  4.0 -0.0654   2.70\n    1.447      0.554 2.61  0.00899  6.8  0.3614   2.53\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_sq |&gt; \n  group_by(term) |&gt; \n  summarize(avg_slope = mean(estimate))\n\n\n# A tibble: 1 × 2\n  term   avg_slope\n  &lt;chr&gt;      &lt;dbl&gt;\n1 weight      1.83\n\n\n\n\nR Code [zeigen / verbergen]\navg_slopes(model_sq)\n\n\n\n Estimate Std. Error    z Pr(&gt;|z|)   S 2.5 % 97.5 %\n     1.83      0.618 2.96  0.00305 8.4  0.62   3.04\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\nMarginal effects at the mean (MEM)\n\n\n\n\n\n\nAbbildung 53.28— foo. Modifiziert nach Heiss (2022)\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq &lt;- lm(jump_length ~ weight + I(weight^2),\n               data = flea_model_tbl)\ntidy(model_sq)\n\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  47.1      10.4        4.53  0.0000437\n2 weight        2.62      1.87       1.40  0.169    \n3 I(weight^2)  -0.0397    0.0710    -0.559 0.579    \n\n\n\n\n\n\n\n\n\n\nAbbildung 53.29— foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\navg_jump_weight &lt;- mean(flea_model_tbl$weight)\navg_jump_weight\n\n\n[1] 9.95375\n\n\n\n\nR Code [zeigen / verbergen]\njump_weight_fitted &lt;- model_sq |&gt; \n  augment(newdata = tibble(weight = c(avg_jump_weight, avg_jump_weight + 0.001)))\njump_weight_fitted\n\n\n# A tibble: 2 × 2\n  weight .fitted\n   &lt;dbl&gt;   &lt;dbl&gt;\n1   9.95    69.2\n2   9.95    69.2\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq |&gt; \n  emtrends(~ weight, var = \"weight\")\n\n\n weight weight.trend    SE df lower.CL upper.CL\n   9.95         1.83 0.617 45    0.587     3.07\n\nConfidence level used: 0.95 \n\n\n\n\nR Code [zeigen / verbergen]\nmodel_sq |&gt; \n  avg_slopes(newdata = \"mean\")\n\n\n\n Estimate Std. Error    z Pr(&gt;|z|)   S 2.5 % 97.5 %\n     1.83      0.618 2.96  0.00305 8.4  0.62   3.04\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\n\n\n\n\n53.7.2 Gruppierte marginale Effekte\n\n\n\n\n\n\nAbbildung 53.30— foo. Modifiziert nach Heiss (2022)\n\n\n\nHier ist die Anordugn wichtig. Erst kommt die gruppierende Variable, dann der Rest.\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq &lt;- lm(jump_length ~ stage * weight + I(weight^2),\n                   data = flea_model_tbl)\ntidy(model_grp_sq)\n\n\n# A tibble: 5 × 5\n  term                 estimate std.error statistic p.value\n  &lt;chr&gt;                   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)           84.4       29.7       2.84  0.00687\n2 stagejuvenile        -27.9       29.4      -0.949 0.348  \n3 weight                -1.68       3.93     -0.427 0.672  \n4 I(weight^2)            0.0752     0.121     0.621 0.538  \n5 stagejuvenile:weight   1.60       3.38      0.474 0.638  \n\n\n\n\n\n\n\n\n\n\nAbbildung 53.31— foo. (A) Kombinierte Darstellung in einem Scatterplot (B) Aufgeteilte Darstellung für beide Entwicklungsstadien. [Zum Vergrößern anklicken]\n\n\n\n\n\n\nSchritt-für-Schrittslopes()\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_grp_sq &lt;- model_grp_sq |&gt; \n  slopes(variables = \"weight\")\nhead(mfx_grp_sq)\n\n\n\n Estimate Std. Error     z Pr(&gt;|z|)   S  2.5 % 97.5 %\n    0.794      0.766 1.037    0.300 1.7 -0.707   2.29\n    0.223      1.099 0.203    0.839 0.3 -1.931   2.38\n    0.666      0.760 0.876    0.381 1.4 -0.824   2.16\n    1.993      2.186 0.912    0.362 1.5 -2.292   6.28\n    0.799      0.767 1.041    0.298 1.7 -0.704   2.30\n    0.551      0.803 0.685    0.493 1.0 -1.024   2.13\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_grp_sq |&gt; \n  group_by(stage) |&gt; \n  summarize(stage_ame = mean(estimate))\n\n\n# A tibble: 2 × 2\n  stage    stage_ame\n  &lt;fct&gt;        &lt;dbl&gt;\n1 adult        0.438\n2 juvenile     0.807\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  slopes(variables = \"weight\",\n         by = \"stage\")\n\n\n\n    stage Estimate Std. Error     z Pr(&gt;|z|)   S 2.5 % 97.5 %\n adult       0.438       0.88 0.498    0.618 0.7 -1.29   2.16\n juvenile    0.807       2.24 0.361    0.718 0.5 -3.58   5.19\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.32— foo. (A) Kombinierte Darstellung in einem Scatterplot (B) Aufgeteilte Darstellung für beide Entwicklungsstadien. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n53.7.3 Repräsentative Werte\n\n\n\n\n\n\nAbbildung 53.33— foo. Modifiziert nach Heiss (2022)\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq &lt;- lm(jump_length ~ feeding * weight + I(weight^2),\n                   data = flea_model_tbl)\ntidy(model_grp_sq)\n\n\n# A tibble: 7 × 5\n  term                  estimate std.error statistic   p.value\n  &lt;chr&gt;                    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)            48.2      10.8        4.44  0.0000655\n2 feedingblood            3.44     12.6        0.273 0.786    \n3 feedingketchup        -16.9      13.2       -1.28  0.208    \n4 weight                  1.93      1.84       1.05  0.301    \n5 I(weight^2)            -0.0382    0.0720    -0.530 0.599    \n6 feedingblood:weight     1.05      1.09       0.963 0.341    \n7 feedingketchup:weight   2.11      1.18       1.79  0.0804   \n\n\n\n\n\n\n\n\n\n\nAbbildung 53.34— foo. (A) Kombinierte Darstellung in einem Scatterplot (B) Aufgeteilte Darstellung für beide Entwicklungsstadien. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ndatagrid(model = model_grp_sq,\n         weight = c(5, 10, 15),\n         feeding = unique)\n\n\n  weight     feeding rowid\n1      5 sugar_water     1\n2      5       blood     2\n3      5     ketchup     3\n4     10 sugar_water     4\n5     10       blood     5\n6     10     ketchup     6\n7     15 sugar_water     7\n8     15       blood     8\n9     15     ketchup     9\n\n\n\nOhne GruppenvergleichMit Gruppenvergleich\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  slopes(variables = \"weight\",\n         newdata = datagrid(weight = c(5, 10, 15),\n                            feeding = unique))\n\n\n\n weight     feeding Estimate Std. Error    z Pr(&gt;|z|)   S  2.5 % 97.5 %\n      5 sugar_water    1.552      1.195 1.30  0.19423 2.4 -0.791   3.89\n      5 blood          2.597      1.563 1.66  0.09658 3.4 -0.466   5.66\n      5 ketchup        3.660      1.416 2.59  0.00973 6.7  0.885   6.44\n     10 sugar_water    1.170      0.701 1.67  0.09522 3.4 -0.204   2.54\n     10 blood          2.215      1.021 2.17  0.02999 5.1  0.215   4.22\n     10 ketchup        3.279      1.031 3.18  0.00147 9.4  1.259   5.30\n     15 sugar_water    0.788      0.770 1.02  0.30582 1.7 -0.720   2.30\n     15 blood          1.834      0.824 2.22  0.02613 5.3  0.218   3.45\n     15 ketchup        2.897      1.076 2.69  0.00708 7.1  0.789   5.01\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncomp_tbl &lt;- as.data.frame(t(combn(levels(flea_model_tbl$feeding), 2))) |&gt; \n    unite(\"z\", sep = \" - \")\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  slopes(variables = \"weight\",\n         newdata = datagrid(weight = c(5),\n                            feeding = unique))\n\n\n\n weight     feeding Estimate Std. Error    z Pr(&gt;|z|)   S  2.5 % 97.5 %\n      5 sugar_water     1.55       1.20 1.30  0.19423 2.4 -0.791   3.89\n      5 blood           2.60       1.56 1.66  0.09658 3.4 -0.466   5.66\n      5 ketchup         3.66       1.42 2.59  0.00973 6.7  0.885   6.44\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  slopes(variables = \"weight\",\n         newdata = datagrid(weight = c(5),\n                            feeding = unique),\n         hypothesis = \"pairwise\")  |&gt; \n  mutate(term = pluck(comp_tbl, \"z\"))\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  emtrends(~ weight + feeding, \n           var = \"weight\",\n           at = list(weight = c(5, 10, 15),\n                     feeding = c(\"sugar_water\", \"ketchup\", \"blood\")),\n           regrid = \"response\") \n\n\n weight feeding     weight.trend    SE df lower.CL upper.CL\n      5 sugar_water        1.551 1.190 41   -0.860     3.96\n     10 sugar_water        1.169 0.701 41   -0.246     2.58\n     15 sugar_water        0.787 0.771 41   -0.769     2.34\n      5 ketchup            3.659 1.410 41    0.803     6.52\n     10 ketchup            3.278 1.030 41    1.197     5.36\n     15 ketchup            2.896 1.080 41    0.722     5.07\n      5 blood              2.596 1.560 41   -0.557     5.75\n     10 blood              2.215 1.020 41    0.154     4.27\n     15 blood              1.833 0.825 41    0.167     3.50\n\nConfidence level used: 0.95",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#vorhersagen-eng.-predictions",
    "href": "stat-modeling-marginal.html#vorhersagen-eng.-predictions",
    "title": "53  Marginal effect models",
    "section": "53.8 Vorhersagen (eng. predictions)",
    "text": "53.8 Vorhersagen (eng. predictions)\n\n\nR Code [zeigen / verbergen]\nloess_fit &lt;- loess(activity ~ ph, data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(loess_fit)\n\n\nWarning: Unable to extract a variance-covariance matrix from this model.\n\n\n\n Estimate\n   -37.22\n   -37.22\n   -37.22\n    -9.33\n    -9.33\n--- 33 rows omitted. See ?print.marginaleffects ---\n    32.90\n    32.90\n    52.13\n    52.13\n    52.13\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(loess_fit, by = \"ph\")\n\n\nWarning: Unable to extract a variance-covariance matrix from this model.\n\n\n\n   ph Estimate\n -2.0   -37.22\n -1.0    -9.33\n  0.0     7.60\n  1.0    13.93\n  2.0     8.54\n  3.0    -1.63\n  4.0   -10.10\n  5.0    -9.90\n  6.0     4.93\n  7.0    32.90\n  7.5    52.13\n\nType: response\n\n\n\nKontinuierliche \\(x\\)-Werte\n\ngam()poly()loess()\n\n\n\n\nR Code [zeigen / verbergen]\ngam_fit &lt;- gam(activity ~ s(ph), data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\ngam_pred &lt;- predictions(gam_fit, newdata = datagrid(ph = c(-1, 2, 6)))\ngam_pred\n\n\n\n ph Estimate Std. Error      z Pr(&gt;|z|)   S  2.5 % 97.5 %\n -1    -5.73       3.57 -1.605   0.1085 3.2 -12.73   1.27\n  2     8.94       3.73  2.398   0.0165 5.9   1.63  16.24\n  6    -3.21       3.44 -0.935   0.3500 1.5  -9.95   3.53\n\nType: response\n\n\n\n\n\n\nR Code [zeigen / verbergen]\npoly_fit &lt;- lm(activity ~ poly(ph, 3), data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\npoly_pred &lt;- predictions(poly_fit, newdata = datagrid(ph = c(-1, 2, 6)))\npoly_pred\n\n\n\n ph Estimate Std. Error      z Pr(&gt;|z|)    S 2.5 % 97.5 %\n -1   -4.545       2.48 -1.830   0.0673  3.9 -9.41  0.324\n  2    8.951       2.23  4.013   &lt;0.001 14.0  4.58 13.323\n  6   -0.545       2.36 -0.231   0.8176  0.3 -5.18  4.089\n\nType: response\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nloess_fit &lt;- loess(activity ~ ph, data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\nloess_pred &lt;- predictions(loess_fit, newdata = datagrid(ph = c(-1, 2, 6)))\n\n\nWarning: Unable to extract a variance-covariance matrix from this model.\n\n\nR Code [zeigen / verbergen]\nloess_pred\n\n\n\n ph Estimate\n -1    -9.33\n  2     8.54\n  6     4.93\n\nType: response\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.35— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nKategoriale \\(x\\)-Werte\n\n\n\n\n\n\nAchtung, bitte beachten!\n\n\n\nIch persönlich finde die Implementierung des multiplen Testens in {emmeans} um Längen besser gelöst. Den Rest von {marginaleffects} dann eher nicht so. Daher würde ich dir hier davon abraten, deine Gruppenvergleiche mit predictions() zu rechnen. Es ist gut zu verstehen was die Funktion macht, aber {emmeans} hat den klaren Vorteil, dass wir das Compact letter disply berechnen können. Darüber hinaus finde ich die zweifaktorielle Analyse besser gelöst durch die beiden Zeichen Stern * und Strich | besser gelöst. In {marginaleffects} haben wir dann die Problematik mit den Hypothesen und Gruppennamen innerhalb der Ausgabe der Funktion hypotheses(). Hier nochmal die Alternativen in {emmeans}, die ich hier aber dann nicht ausführen lasse. Bitte schaue dann nochmal in das Kapitel zu den Post-hoc Tests vorbei.\n\n\nR Code [zeigen / verbergen]\nenzyme_1fac_fit |&gt; \n  emmeans(~ grp, vcov = sandwich::vcovHAC) |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\")\n\n\n\n\nR Code [zeigen / verbergen]\nenzyme_2fac_fit |&gt; \n  emmeans(~ grp | type, vcov = sandwich::vcovHAC) |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Manchmal schaue ich mir sehr lange Funktionen oder Pakete wie hier {marginaleffects} an und muss dann feststellen, dass für eien spezielle Orichideenanwendung dann doch ein anderes Paket besser ist. Ist nicht schlimm, dann musst du dir nicht die Arbeit machen. Für das faktorielle Experiment würde ich dann immer {emmeans} nehmen.” — Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.\n\n\n\n\nDie Funktion hypotheses() ist mächtig.\nMarginal mean nochmal erklären\n\nVorhersage 1-faktoriellVorhersage 2-faktoriell\n\n\n\n\nR Code [zeigen / verbergen]\nenzyme_1fac_fit &lt;-  lm(activity ~ grp, data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(enzyme_1fac_fit, by = c(\"grp\"), vcov = \"HAC\")\n\n\n\n     grp Estimate Std. Error      z Pr(&gt;|z|)    S  2.5 % 97.5 %\n niedrig    -2.50       3.99 -0.626    0.531  0.9 -10.32  5.327\n mittel     -1.35       1.06 -1.276    0.202  2.3  -3.42  0.722\n hoch       17.11       4.91  3.483   &lt;0.001 11.0   7.48 26.745\n\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(enzyme_1fac_fit, by = c(\"grp\"), vcov = \"HAC\",\n            hypothesis = ~pairwise)  |&gt; \n  hypotheses(multcomp = \"bonferroni\")\n\n\n\n Term           Hypothesis Estimate Std. Error     z Pr(&gt;|z|)    S 2.5 % 97.5 %\n   b1 (mittel) - (niedrig)     1.15       4.67 0.246  1.00000 -0.0 -9.68   12.0\n   b2 (hoch) - (niedrig)      19.61       7.07 2.774  0.01659  5.9  3.21   36.0\n   b3 (hoch) - (mittel)       18.46       5.59 3.304  0.00286  8.4  5.50   31.4\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(enzyme_1fac_fit, by = c(\"grp\"), vcov = \"HAC\",\n            hypothesis = ~pairwise) \n\n\n\n           Hypothesis Estimate Std. Error     z Pr(&gt;|z|)    S 2.5 % 97.5 %\n (mittel) - (niedrig)     1.15       4.67 0.246  0.80542  0.3 -8.00   10.3\n (hoch) - (niedrig)      19.61       7.07 2.774  0.00553  7.5  5.76   33.5\n (hoch) - (mittel)       18.46       5.59 3.304  &lt; 0.001 10.0  7.51   29.4\n\nType: response\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.36— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nenzyme_2fac_fit &lt;- lm(activity ~ grp * type, data = enzyme_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(enzyme_2fac_fit, by = c(\"grp\", \"type\"), vcov = \"HAC\",\n            hypothesis = ~pairwise | type, \n            newdata = \"balanced\") \n\n\n\n      type           Hypothesis Estimate Std. Error      z Pr(&gt;|z|)    S  2.5 %\n Eukaryot  (mittel) - (niedrig)   -23.43      0.571 -41.00  &lt; 0.001  Inf -24.55\n Eukaryot  (hoch) - (niedrig)      14.03     13.570   1.03  0.30109  1.7 -12.56\n Eukaryot  (hoch) - (mittel)       37.46     13.408   2.79  0.00521  7.6  11.18\n Prokaryot (mittel) - (niedrig)    21.79      3.460   6.30  &lt; 0.001 31.6  15.01\n Prokaryot (hoch) - (niedrig)      14.07      4.257   3.30  &lt; 0.001 10.0   5.72\n Prokaryot (hoch) - (mittel)       -7.72      1.647  -4.69  &lt; 0.001 18.5 -10.95\n 97.5 %\n  -22.3\n   40.6\n   63.7\n   28.6\n   22.4\n   -4.5\n\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(enzyme_2fac_fit, by = c(\"grp\", \"type\"), vcov = \"HAC\",\n            newdata = \"balanced\") |&gt; \n  hypotheses(~pairwise | type, multcomp = \"bonferroni\")\n\n\n\n      type  Hypothesis Estimate Std. Error      z Pr(&gt;|z|)    S  2.5 % 97.5 %\n Eukaryot  (b3) - (b1)   -23.43      0.571 -41.00  &lt; 0.001  Inf -24.84 -22.01\n Eukaryot  (b5) - (b1)    14.03     13.570   1.03  1.00000 -0.0 -19.59  47.66\n Eukaryot  (b5) - (b3)    37.46     13.408   2.79  0.03124  5.0   4.24  70.69\n Prokaryot (b4) - (b2)    21.79      3.460   6.30  &lt; 0.001 29.0  13.22  30.37\n Prokaryot (b6) - (b2)    14.07      4.257   3.30  0.00571  7.5   3.52  24.62\n Prokaryot (b6) - (b4)    -7.72      1.647  -4.69  &lt; 0.001 15.9 -11.81  -3.64\n\n\n\n\nR Code [zeigen / verbergen]\nplot_predictions(enzyme_2fac_fit, by = c(\"grp\", \"type\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 53.37— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVergleich {marginaleffects} und {emmeans}\n\n\n\n\n\nR Code [zeigen / verbergen]\nfeeding_fit &lt;-  lm(jump_length ~ feeding * stage, data = flea_model_tbl)\n\n\n\n{marginaleffects}{emmeans}\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(feeding_fit, by = c(\"stage\", \"feeding\"), vcov = \"HAC\")\n\n\n\n    stage     feeding Estimate Std. Error    z Pr(&gt;|z|)     S 2.5 % 97.5 %\n adult    sugar_water     68.9       4.62 14.9   &lt;0.001 164.7  59.8   77.9\n adult    blood           82.1       5.73 14.3   &lt;0.001 152.1  70.8   93.3\n adult    ketchup         81.1       4.77 17.0   &lt;0.001 212.8  71.8   90.5\n juvenile sugar_water     57.3       3.20 17.9   &lt;0.001 235.2  51.0   63.5\n juvenile blood           68.8       6.25 11.0   &lt;0.001  91.3  56.6   81.0\n juvenile ketchup         50.3       2.37 21.2   &lt;0.001 328.6  45.6   54.9\n\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(feeding_fit, by = c(\"stage\", \"feeding\"), vcov = \"HAC\",\n            hypothesis = ~pairwise | stage)\n\n\n\n    stage                Hypothesis Estimate Std. Error      z Pr(&gt;|z|)   S\n adult    (blood) - (sugar_water)     13.185       7.36  1.791   0.0733 3.8\n adult    (ketchup) - (sugar_water)   12.246       6.64  1.843   0.0653 3.9\n adult    (ketchup) - (blood)         -0.939       7.47 -0.126   0.9001 0.2\n juvenile (blood) - (sugar_water)     11.532       7.02  1.644   0.1002 3.3\n juvenile (ketchup) - (sugar_water)   -6.981       3.99 -1.752   0.0798 3.6\n juvenile (ketchup) - (blood)        -18.514       6.68 -2.770   0.0056 7.5\n   2.5 % 97.5 %\n  -1.245  27.61\n  -0.776  25.27\n -15.589  13.71\n  -2.217  25.28\n -14.793   0.83\n -31.613  -5.41\n\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\npredictions(feeding_fit, by = c(\"stage\", \"feeding\"), vcov = \"HAC\") |&gt; \n  hypotheses(multcomp = \"bonferroni\")\n\n\n\n Term Estimate Std. Error    z Pr(&gt;|z|)   S 2.5 % 97.5 %\n   b1     68.9       4.62 14.9   &lt;0.001 Inf  56.7   81.0\n   b2     82.1       5.73 14.3   &lt;0.001 Inf  67.0   97.2\n   b3     81.1       4.77 17.0   &lt;0.001 Inf  68.6   93.7\n   b4     57.3       3.20 17.9   &lt;0.001 Inf  48.8   65.7\n   b5     68.8       6.25 11.0   &lt;0.001 Inf  52.4   85.2\n   b6     50.3       2.37 21.2   &lt;0.001 Inf  44.0   56.5\n\n\n\n\n\n\n\n\n\n\nAbbildung 53.38— (A) Linearer Zusammenhang. (B) ggg [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfeeding_fit |&gt; \n  emmeans(~ feeding | stage, vcov = sandwich::vcovHAC)\n\n\nstage = adult:\n feeding     emmean   SE df lower.CL upper.CL\n sugar_water   68.9 4.62 42     59.6     78.2\n blood         82.1 5.73 42     70.5     93.6\n ketchup       81.1 4.77 42     71.5     90.8\n\nstage = juvenile:\n feeding     emmean   SE df lower.CL upper.CL\n sugar_water   57.3 3.20 42     50.8     63.7\n blood         68.8 6.25 42     56.2     81.4\n ketchup       50.3 2.37 42     45.5     55.1\n\nConfidence level used: 0.95 \n\n\n\n\nR Code [zeigen / verbergen]\nfeeding_fit |&gt; \n  emmeans(~ feeding | stage, vcov = sandwich::vcovHAC) |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\")\n\n\nstage = adult:\n contrast              estimate   SE df t.ratio p.value\n sugar_water - blood    -13.185 7.36 42  -1.791  0.2416\n sugar_water - ketchup  -12.246 6.64 42  -1.843  0.2171\n blood - ketchup          0.939 7.47 42   0.126  1.0000\n\nstage = juvenile:\n contrast              estimate   SE df t.ratio p.value\n sugar_water - blood    -11.533 7.02 42  -1.644  0.3230\n sugar_water - ketchup    6.981 3.99 42   1.752  0.2614\n blood - ketchup         18.514 6.68 42   2.770  0.0249\n\nP value adjustment: bonferroni method for 3 tests",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#kontrafaktische-vergleiche-eng.-counterfactual",
    "href": "stat-modeling-marginal.html#kontrafaktische-vergleiche-eng.-counterfactual",
    "title": "53  Marginal effect models",
    "section": "53.9 Kontrafaktische Vergleiche (eng. counterfactual)",
    "text": "53.9 Kontrafaktische Vergleiche (eng. counterfactual)",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#hypothesen--und-äquivalenztests",
    "href": "stat-modeling-marginal.html#hypothesen--und-äquivalenztests",
    "title": "53  Marginal effect models",
    "section": "53.10 Hypothesen- und Äquivalenztests",
    "text": "53.10 Hypothesen- und Äquivalenztests",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-marginal.html#referenzen",
    "href": "stat-modeling-marginal.html#referenzen",
    "title": "53  Marginal effect models",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nArel-Bundock, V., Greifer, N., & Heiss, A. (2024). How to Interpret Statistical Models Using marginaleffects for R and Python. Journal of Statistical Software, 111(9), 1–32. https://doi.org/10.18637/jss.v111.i09\n\n\nHeiss, A. (2022, Mai 20). Marginalia: A Guide to Figuring Out What the Heck Marginal Effects, Marginal Slopes, Average Marginal Effects, Marginal Effects at the Mean, and All These Other Marginal Things Are. https://doi.org/10.59350/40xaj-4e562",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Marginal effect models</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html",
    "href": "stat-modeling-gaussian.html",
    "title": "54  Gaussian Regression",
    "section": "",
    "text": "54.1 Genutzte R Pakete\nLetzte Änderung am 08. June 2025 um 12:26:14\nSelten nutzen wir eine multiple gaussian lineare Regression alleine. Häufig haben wir dann ein normalverteiltes Outcome, weshalb wir die Gaussian Regression überhaupt rechnen, und dann noch mehrere Faktoren über die wir eine Aussagen treffen wollen. In der folgenden Abbildung 54.1 siehst du nochmal den Zusammenhang zwischen einem normalverteilten Outcome, wie Gewicht oder Größe, im Bezug zu einem kontinuierlichen oder kategoriellen \\(x\\) als Einflussgröße. Wir sind dann eher im Bereich der Posthoc-Tests mit kategoriellen \\(x\\) als in wirklich einer Interpretation einer Gaussian Regression mit einem kontinuierlichen \\(x\\). Dennoch müssen wir wissen, ob die Gaussian Regression gut funktioniert hat. Die Überprüfung der Modellierung können wir dann in diesem Kapitel einmal durchgehen.\nHäufig wollen wir dann die Ergebnisse aus einer Gaussian Regression dann im Falle eines kategoriellen \\(x\\) dann als Barplots wie in der Abbildung 54.2 darstellen. Hier musst du dann einmal weiter unten in den Abschnitt zu den Gruppenvergleichen springen.\nIm diesem Kapitel zu der multiplen Gaussian linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form ideal sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.\nWir gehen jetzt einmal die lineare Regression mit einem normalverteilten Outcome \\(y\\) einmal durch. Wie schon oben erwähnt, meistens nutzten wir die Gaussian Regression als vorangestelltes Modell für eine ANOVA oder dann eben einen Posthoc-Test in {emmeans}.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom,\n               see, performance, scales, parameters,\n               olsrr, readxl, car, gtsummary, emmeans,\n               multcomp, conflicted)\nconflicts_prefer(dplyr::select)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html#daten",
    "href": "stat-modeling-gaussian.html#daten",
    "title": "54  Gaussian Regression",
    "section": "54.2 Daten",
    "text": "54.2 Daten\nIm Folgenden schauen wir uns die Daten eines Pilotprojektes zum Anbau von Kichererbsen in Brandenburg an. Wir haben an verschiedenen anonymisierten Bauernhöfen Kichererbsen angebaut und das Trockengewicht als Endpunkt bestimmt. Darüber hinaus haben wir noch andere Umweltparameter erhoben und wollen schauen, welche dieser Parameter einen Einfluss auf das Trockengewicht hat. In Kapitel 7.4 findest du nochmal mehr Informationen zu den Daten.\n\n\nR Code [zeigen / verbergen]\nchickpea_tbl &lt;- read_excel(\"data/chickpeas.xlsx\") \n\n\nIn der Tabelle 54.1 ist der Datensatz chickenpea_tbl nochmal als Ausschnitt dargestellt. Insgesamt haben wir \\(n = 95\\) Messungen durchgeführt. Wir sehen, dass wir verschiedene Variablen gemessen haben. Unter anderem, ob es geregent hat oder an welcher Stelle in Brandenburg die Messungen stattgefunden haben. Ebenso haben wir geschaut, ob ein Wald in der Nähe der Messung war oder nicht. Wir nehmen als Outcome \\(y\\) das normalverteilte Trockengewicht dryweight.\n\n\n\n\nTabelle 54.1— Auszug aus dem Daten zu den Kichererbsen in Brandenburg.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemp\nrained\nlocation\nno3\nfe\nsand\nforest\ndryweight\n\n\n\n\n25.26\nhigh\nnorth\n5.56\n4.43\n63\n&gt;1000m\n253.42\n\n\n21.4\nhigh\nnortheast\n9.15\n2.58\n51.17\n&lt;1000m\n213.88\n\n\n27.84\nhigh\nnortheast\n5.57\n2.19\n55.57\n&gt;1000m\n230.71\n\n\n24.59\nlow\nnorth\n7.97\n1.47\n62.49\n&gt;1000m\n257.74\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n25.47\nlow\nnorth\n6.92\n3.18\n64.55\n&lt;1000m\n268.58\n\n\n29.04\nlow\nnorth\n5.64\n2.87\n53.27\n&gt;1000m\n236.07\n\n\n24.11\nhigh\nnortheast\n4.31\n3.66\n63\n&lt;1000m\n259.82\n\n\n28.88\nlow\nnortheast\n7.92\n2\n65.75\n&gt;1000m\n274.75\n\n\n\n\n\n\n\n\nIm Folgenden werden wir die Daten nur für das Fitten eines Modells verwenden. In den anderen oben genannten Kapiteln nutzen wir die Daten dann anders.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html#fit-des-modells",
    "href": "stat-modeling-gaussian.html#fit-des-modells",
    "title": "54  Gaussian Regression",
    "section": "54.3 Fit des Modells",
    "text": "54.3 Fit des Modells\nWir rechnen jetzt den Fit für das vollständige Modell mit allen Variablen in dem Datensatz. Wir sortieren dafür einmal das \\(y\\) mit dryweight auf die linke Seite und dann die anderen Variablen auf die rechte Seite des ~. Wir haben damit unser Modell chickenpea_fit wie folgt vorliegen.\n\n\nR Code [zeigen / verbergen]\nchickenpea_fit &lt;- lm(dryweight ~ temp + rained + location + no3 + fe + sand + forest, \n                   data = chickpea_tbl)\n\n\nSoweit so gut. Wir können uns zwar das Modell mit der Funktion summary() anschauen, aber es gibt schönere Funktionen, die uns erlauben einmal die Performance des Modells abzuschätzen. Also zu klären, ob soweit alles geklappt hat und wir mit dem Modell weitermachen können.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html#performance-des-modells",
    "href": "stat-modeling-gaussian.html#performance-des-modells",
    "title": "54  Gaussian Regression",
    "section": "54.4 Performance des Modells",
    "text": "54.4 Performance des Modells\nDa ich die Daten selber gebaut habe, ist mir bekannt, dass das Outcome dryweight normalverteilt ist. Immerhin habe ich die Daten aus einer Normalverteilung gezogen. Manchmal will man dann doch Testen, ob das Outcome \\(y\\) einer Normalverteilung folgt. Das R Paket {oslrr} bietet hier eine Funktion ols_test_normality(), die es erlaubt mit allen bekannten statistischen Tests auf Normalverteilung zu testen. Wenn der \\(p\\)-Wert kleiner ist als das Signifikanzniveau \\(\\alpha\\), dann können wir die Nullhypothese, dass unsere Daten gleich einer Normalverteilung wären, ablehnen. Darüber hinaus bietet das R Paket {olsrr} eine weitreichende Diagnostik auf einem normalverteilten Outcome \\(y\\).\n\n\nR Code [zeigen / verbergen]\nols_test_normality(chickenpea_fit) \n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.9809         0.1806 \nKolmogorov-Smirnov        0.088          0.4287 \nCramer-von Mises          8.2878         0.0000 \nAnderson-Darling          0.5182         0.1837 \n-----------------------------------------------\n\n\nWir sehen, testen wir viel, dann kommt immer was signifikantes raus. Um jetzt kurz einen statistischen Engel anzufahren, wir nutzen wenn überhaupt den Shapiro-Wilk-Test oder den Kolmogorov-Smirnov-Test. Für die anderen beiden steigen wir jetzt hier nicht in die Theorie ab.\nNachdem wir die Normalverteilung nochmal überprüft haben wenden wir uns nun dem Wichtigen zu. Wir schauen jetzt auf die Varianz des Modells. Um zu überprüfen, ob das Modell funktioniert können wir uns den Anteil der erklärten Varianz anschauen. Wie viel erklären unsere \\(x\\) von der Varianz des Outcomes \\(y\\)? Wir betrachten dafür das Bestimmtheitsmaß \\(R^2\\). Da wir mehr als ein \\(x\\) vorliegen haben, nutzen wir das adjustierte \\(R^2\\). Das \\(R^2\\) hat die Eigenschaft immer größer und damit besser zu werden je mehr Variablen in das Modell genommen werden. Wir können dagegen Adjustieren und daher das \\(R^2_{adj}\\) nehmen.\n\n\nR Code [zeigen / verbergen]\nr2(chickenpea_fit)\n\n\n# R2 for Linear Regression\n       R2: 0.903\n  adj. R2: 0.894\n\n\nWir erhalten ein \\(R^2_{adj}\\) von \\(0.87\\) und damit erklärt unser Modell ca 87% der Varianz von \\(y\\) also unserem Trockengewicht. Das ist ein sehr gutes Modell. Je nach Anwendung sind 60% bis 70% erklärte Varianz schon sehr viel.\nIm nächsten Schritt wollen wir nochmal überprüfen, ob die Varianzen der Residuen auch homogen sind. Das ist eine weitere Annahme an ein gutes Modell. Im Prinzip überprüfen wir hier, ob unser Ourtcome auch wirklcih normalveteilt ist bzw. der Annahme der Normalverteilung genügt. Wir nutzen dafür die Funktion check_heteroscedasticity() aus dem R Paket {performance}.\n\n\nR Code [zeigen / verbergen]\ncheck_heteroscedasticity(chickenpea_fit)\n\n\nOK: Error variance appears to be homoscedastic (p = 0.512).\n\n\nAuch können wir uns einmal numerisch die VIF-Werte anschauen um zu sehen, ob Variablen mit anderen Variablen ungünstig stark korrelieren. Wir wollen ja nur die Korrelation des Modells, also die \\(x\\), mit dem Outcome \\(y\\) modellieren. Untereinander sollen die Variablen \\(x\\) alle unabhängig sein. Für können uns die VIF-Werte für alle kontinuierlichen Variablen berechnen lassen.\n\n\nR Code [zeigen / verbergen]\nvif(chickenpea_fit)\n\n\n             GVIF Df GVIF^(1/(2*Df))\ntemp     1.067042  1        1.032977\nrained   1.067845  1        1.033366\nlocation 1.119450  2        1.028611\nno3      1.062076  1        1.030571\nfe       1.135119  1        1.065420\nsand     1.072182  1        1.035462\nforest   1.070645  1        1.034720\n\n\nAlle VIF-Werte sind unter dem Threshold von 5 und damit haben wir hier keine Auffälligkeiten vorliegen.\nDamit haben wir auch überprüft, ob unsere Varianzen homogen sind. Also unsere Residuen annähend normalverteilt sind. Da unsere Daten groß genug sind, können wir das auch ohne weiteres Anwenden. Wenn wir einen kleineren Datensatz hätten, dann wäre die Überprüfung schon fraglicher. bei kleinen Fallzahlen funktioniert der Test auf Varianzheterogenität nicht mehr so zuverlässig.\nIn Abbildung 54.10 sehen wir nochmal die Visualisierung verschiedener Modellgütekriterien. Wir sehen, dass unsere beobachte Verteilung des Trockengewichts mit der vorhergesagten übereinstimmt. Ebenso ist der Residualplot gleichmäßig und ohne Struktur. Wir haben auch keine Ausreißer, da alle unsere Beobachtungen in dem gestrichelten, blauen Trichter bleiben. Ebenso zeigt der QQ-Plot auch eine approximative Normalverteilung der Residuen. Wir haben zwar leichte Abweichungen, aber die sind nicht so schlimm. Der Großteil der Punkte liegt auf der Diagonalen. Ebenso gibt es auch keine Variable, die einen hohen VIF-Wert hat und somit ungünstig mit anderen Variablen korreliert.\n\n\nR Code [zeigen / verbergen]\ncheck_model(chickenpea_fit, colors = cbbPalette[6:8], \n            check = c(\"qq\", \"outliers\", \"pp_check\", \"homogeneity\", \"vif\")) \n\n\n\n\n\n\n\n\nAbbildung 54.10— Ausgabe ausgewählter Modelgüteplots der Funktion check_model().",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html#interpretation-des-modells",
    "href": "stat-modeling-gaussian.html#interpretation-des-modells",
    "title": "54  Gaussian Regression",
    "section": "54.5 Interpretation des Modells",
    "text": "54.5 Interpretation des Modells\nNachdem wir nun sicher sind, dass das Modell unseren statistischen Ansprüchen genügt, können wir jetzt die Ergebnisse des Fits des Modells einmal interpretieren. Wir erhalten die Modellparameter über die Funktion model_parameters() aus dem R Paket {parameters}.\n\n\nR Code [zeigen / verbergen]\nchickenpea_fit |&gt; \n  model_parameters()\n\n\nParameter            | Coefficient |   SE |          95% CI | t(86) |      p\n----------------------------------------------------------------------------\n(Intercept)          |       -5.11 | 9.74 | [-24.48, 14.26] | -0.52 | 0.601 \ntemp                 |        2.37 | 0.22 | [  1.93,  2.80] | 10.80 | &lt; .001\nrained [low]         |        1.78 | 1.19 | [ -0.60,  4.15] |  1.49 | 0.140 \nlocation [northeast] |       -0.10 | 1.20 | [ -2.50,  2.29] | -0.09 | 0.931 \nlocation [west]      |        1.96 | 1.63 | [ -1.29,  5.20] |  1.20 | 0.234 \nno3                  |        1.49 | 0.41 | [  0.68,  2.29] |  3.67 | &lt; .001\nfe                   |        0.66 | 0.53 | [ -0.40,  1.72] |  1.24 | 0.220 \nsand                 |        3.04 | 0.12 | [  2.80,  3.27] | 25.63 | &lt; .001\nforest [&gt;1000m]      |       -3.02 | 1.14 | [ -5.29, -0.75] | -2.64 | 0.010 \n\n\nSchauen wir uns die einzelnen Zeilen aus der Ausgabe einmal in Ruhe an. Wir sind eigentlich nur an den Spalten Coefficient für das \\(\\beta\\) als Effekt der Variablen sowie der Spalte p als \\(p\\)-Wert für die Variablen interessiert. Wir testen immer als Nullhypothese, ob sich der Parameter von 0 unterscheidet.\n\n(Intercept) beschreibt den den \\(y\\)-Achsenabschnitt. Wir brauen den Intercept selten in der Interpretation. Wir nehmen hier erstmal hin, dass wir einen von 0 signifikant unterschiedlichen Intercept haben. Meist löschen wir den Intrcept auch aus der finalen Tabelle raus.\ntemp beschreibt den Effekt der Temperatur. Wenn die Temperatur um ein Grad ansteigt, dann erhalten wir \\(1.75\\) mehr Trockengewicht als Ertrag. Darüber hinaus ist der Effekt der Temperatur signifikant.\nrained [low] beschreibt den Effekt des Levels low des Faktors rained im Vergleich zum Level high. Daher haben wir bei wenig Regen einen um \\(1.33\\) höheren Ertrag als bei viel Regen.\nlocation [northeast] beschreibt den Effekt des Levels northeast zu dem Level north des Faktors location. Wir haben also einen \\(-1.38\\) kleineren Ertrag an Kichererbsen als im Norden von Brandenburg. Wenn du hier eine andere Sortierung willst, dann musst du mit der Funktion factor() die Level anders sortieren.\nlocation [west] beschreibt den Effekt des Levels west zu dem Level north des Faktors location. Wir haben also einen \\(-2.40\\) kleineren Ertrag an Kichererbsen als im Norden von Brandenburg. Wenn du hier eine andere Sortierung willst, dann musst du mit der Funktion factor() die Level anders sortieren.\nno3 beschreibt den Effekt von Nitrat im Boden. Wenn wir die Nitratkonzentration um eine Einheit erhöhen dann steigt der Ertrag um \\(1.11\\) an. Wir haben hier einen \\(p\\)-Wert von \\(0.012\\) vorliegen und können hier von einem signifkianten Effekt sprechen.\nfe beschreibt den Effekt des Eisens im Boden auf den Ertrag an Kichererbsen. Wenn die Konzentration von Eisen um eine Einheit ansteigt, so sinkt der Ertrag von Kichererbsen um \\(-0.72\\) ab.\nsand beschreibt den Anteil an Sand in der Bodenprobe. Wenn der Anteil an Sand um eine Einheit ansteigt, so steigt der Ertrag an Kichererbsen um \\(3.03\\) an. Dieser Effekt ist auch hoch signifikant. Kichererbsen scheinen sandigen Boden zu bevorzugen.\nforest [&gt;1000m] beschreibt die Nähe des nächsten Waldstückes als Faktor mit zwei Leveln. Daher haben wir hier einen höheren Ertrag von \\(0.67\\) an Kichererbsen, wenn wir weiter weg vom Wald messen &gt;1000 als Nahe an dem Wald &lt;1000.\n\nDas war eine Wand an Text für die Interpretation des Modells. Was können wir zusammenfassend mitnehmen? Wir haben drei signifikante Einflussfaktoren auf den Ertrag an Kichererbsen gefunden. Zum einen ist weniger Regen signifikant besser als viel Regen. Wir brauchen mehr Nitrat im Boden. Im Weiteren ist ein sandiger Boden besser als ein fetter Boden. Am Ende müssen wir noch schauen, was die nicht signifikanten Ergebnisse uns für Hinweise geben. Der Ort der Messung ist relativ unbedeutend. Es scheint aber so zu sein, dass im Norden mehr Ertrag zu erhalten ist. Hier müsste man einmal schauen, welche Betriebe hier vorliegen und wie die Bodenbeschaffenheit dort war. Im Weiteren sehen wir, dass anscheinend ein Abstand zum Wald vorteilhaft für den Ertrag ist. Hier könnte Wildfraß ein Problem gewesen sein oder aber zu viel Schatten. Auch hier muss man nochmal auf das Feld und schauen, was das konkrete Problem sein könnte. Hier endet die Statistik dann.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gaussian.html#sec-mult-comp-gaussian-reg",
    "href": "stat-modeling-gaussian.html#sec-mult-comp-gaussian-reg",
    "title": "54  Gaussian Regression",
    "section": "54.6 Gruppenvergleich",
    "text": "54.6 Gruppenvergleich\nHäufig ist es ja so, dass wir das Modell für die Gaussian Regression nur schätzen um dann einen Gruppenvergleich zu rechnen. Das heißt, dass es uns interessiert, ob es einen Unterschied zwischen den Leveln eines Faktors gegeben dem Outcome \\(y\\) gibt. Wir nehmen hier einen ausgedachten Datensatz zu Katzen-, Hunde- und Fuchsflöhen. Dabei erstellen wir uns einen Datensatz mit mittleren Gewicht an Flöhen pro Tierart. Ich habe jetzt ein mittleres Gewicht von \\(20mg\\) bei den Katzenflöhen, eine mittleres Gewicht von \\(30mg\\) bei den Hundeflöhen und ein mittleres Gewicht von \\(10mg\\) bei den Fuchsflöhen gewählt. Wir generieren uns jeweils \\(20\\) Beobachtungen je Tierart. Damit haben wir dann einen Datensatz zusammen, den wir nutzen können um einmal die Ergebnisse eines Gruppenvergleiches zu verstehen zu können.\n\n\nR Code [zeigen / verbergen]\nset.seed(20231202)\nn_rep &lt;- 20\nflea_weight_tbl &lt;- tibble(animal = gl(3, n_rep, labels = c(\"cat\", \"dog\", \"fox\")),\n                         weight = c(rnorm(n_rep, 20, 1), \n                                         rnorm(n_rep, 30, 1), \n                                         rnorm(n_rep, 10, 1)))\n\n\nWenn du gerade hierher gesprungen bist, nochmal das simple Modell für unseren Gruppenvergleich unter einer Gaussian Regression. Wir haben hier nur einen Faktor animal mit in dem Modell. Am Ende des Abschnitts findest du dann noch ein Beispiel mit drei Faktoren zu Gewicht von Brokkoli.\n\n\nR Code [zeigen / verbergen]\nlm_fit &lt;- lm(weight ~ animal, data = flea_weight_tbl) \n\n\nEigentlich ist es recht einfach, wie wir anfangen. Wir rechnen jetzt als erstes die ANOVA. Hier müssen wir dann einmal den Test angeben, der gerechnet werden soll um die p-Werte zu erhalten. Dann nutze ich noch die Funktion model_parameters() um eine schönere Ausgabe zu erhalten.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter | Sum_Squares | df | Mean_Square |       F |      p\n-------------------------------------------------------------\nanimal    |     3960.78 |  2 |     1980.39 | 2525.37 | &lt; .001\nResiduals |       44.70 | 57 |        0.78 |         |       \n\nAnova Table (Type 1 tests)\n\n\nIm Folgenden nutzen wir das R Paket {emmeans} um die mittleren Gewichte der Flöhe zu berechnen.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- lm_fit |&gt; \n  emmeans(~ animal)\nemm_obj\n\n\n animal emmean    SE df lower.CL upper.CL\n cat      20.2 0.198 57    19.77     20.6\n dog      30.1 0.198 57    29.66     30.5\n fox      10.2 0.198 57     9.76     10.6\n\nConfidence level used: 0.95 \n\n\nWir rechnen jetzt den paarweisen Vergleich für alle Tierarten und schauen uns dann an, was wir erhalten haben. Wie du gleich siehst, erhalten wir die Differenzen der Mittelwerte der Flohgewichte für die verschiedenen Tierarten. Hier also einmal die paarweisen Vergleiche, darunter dann gleich das compact letter display.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  pairs(adjust = \"bonferroni\")\n\n\n contrast  estimate   SE df t.ratio p.value\n cat - dog     -9.9 0.28 57 -35.336  &lt;.0001\n cat - fox     10.0 0.28 57  35.732  &lt;.0001\n dog - fox     19.9 0.28 57  71.068  &lt;.0001\n\nP value adjustment: bonferroni method for 3 tests \n\n\nUnd fast am Ende können wir uns auch das compact letter display erstellen. Auch hier nutzen wir wieder die Funktion cld() aus dem R Paket {multcomp}. Hier erhälst du dann die Information über die mittleren Flohgewichte der jeweiligen Tierarten und ob sich die mittleren Flohgewichte unterscheidet. Ich nutze dann die Ausgabe von emmeans() um mir dann direkt das Säulendiagramm mit den Fehlerbalken und dem compact letter display zu erstellen. Mehr dazu dann im Kasten weiter unten zu dem Beispiel zu den Gewichten des Brokkoli.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt;\n  cld(Letters = letters, adjust = \"none\")\n\n\n animal emmean    SE df lower.CL upper.CL .group\n fox      10.2 0.198 57     9.76     10.6  a    \n cat      20.2 0.198 57    19.77     20.6   b   \n dog      30.1 0.198 57    29.66     30.5    c  \n\nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nAuch hier sehen wir, dass sich alle drei Gruppen signifikant unterschieden, keine der Tierarten teilt sich einen Buchstaben, so dass wir hier von einem Unterschied zwischen den mittleren Flohgewichten der drei Tierarten ausgehen können.\nDamit sind wir einmal mit unserem Gruppenvergleich für die Gaussian Regression auf normalverteilte Daten durch. In dem Kapitel zu den Multiple Vergleichen oder Post-hoc Tests findest du dann noch mehr Inspirationen für die Nutzung von {emmeans}. Hier war es dann die Anwendung auf normalverteilte Dateb zusammen mit einem Faktor. Wenn du dir das Ganze nochmal an einem Beispiel für zwei Faktoren anschauen möchtest, dann findest du im folgenden Kasten ein Beispiel für die Auswertung von Brokkoli nach Gabe verschiedener Dosen eines Düngers und Zeitpunkten.\n\n\n\n\n\n\nAnwendungsbeispiel: Dreifaktorieller Vergleich für das Erntegewicht\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit Brokkoli an. Wir haben uns in diesem Experiment verschiedene Dosen fert_amount von einem Dünger aufgebracht sowie verschiedene Zeitpunkte der Düngung fert_time berücksichtigt. Auch hier haben wir einige Besonderheiten in den Daten, da nicht jede Faktorkombination vorliegt. Wir ignorieren aber diese Probleme und rechnen einfach stumpf unseren Gruppenvergleich.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl &lt;- read_excel(\"data/broccoli_weight.xlsx\") |&gt; \n  mutate(fert_time = factor(fert_time, levels = c(\"none\", \"early\", \"late\")),\n         fert_amount = as_factor(fert_amount),\n         block = as_factor(block)) |&gt;\n  select(-stem_hollowness) \n\n\nDann können wir auch schon die Gaussian Regression mit lm() rechnen.\n\n\nR Code [zeigen / verbergen]\nlm_fit &lt;- lm(weight ~ fert_time + fert_amount + fert_time:fert_amount + block, \n             data = broc_tbl) \n\n\nJetzt rechnen wir in den beiden folgenden Tabs einmal die ANOVA und dann auch den multiplen Gruppenvergleich mit {emmeans}. Da wir hier normalveteilte Daten haben, können wir dann einfach die Standardverfahren nehmen. Eventuell müssten wir bei dem Gruppenvergleich mit emmeans() nochmal für Varianzheterogenität adjustieren, aber da erfährst du dann mehr in dem Kapitel zu den Multiple Vergleichen oder Post-hoc Tests.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA und nutzen den \\(\\mathcal{X}^2\\)-Test für die Ermittelung der p-Werte. Wir müssen hier einen Test auswählen, da per Standardeinstellung kein Test gerechnet wird. Wir machen dann die Ausgabe nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter             | Sum_Squares |   df | Mean_Square |     F |      p\n-------------------------------------------------------------------------\nfert_time             |    2.44e+06 |    2 |    1.22e+06 | 44.12 | &lt; .001\nfert_amount           |    2.11e+06 |    2 |    1.05e+06 | 38.06 | &lt; .001\nblock                 |    7.21e+06 |    3 |    2.40e+06 | 86.73 | &lt; .001\nfert_time:fert_amount |    26973.84 |    2 |    13486.92 |  0.49 | 0.615 \nResiduals             |    4.28e+07 | 1544 |    27692.44 |       |       \n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass der Effekt der Düngerzeit und die Menge des Düngers signifikant ist, jedoch wir keinen signifikanten Einfluss durch die Interaktion haben. Wir haben aber also keine Interaktion vorliegen. Leider ist auch der Block signifikant, so dass wir eigentlich nicht über den Block mitteln sollten. Wir rechnen trotzdem die Analyse gemittelt über die Blöcke. Wenn du hier mehr erfahren möchtest, dann schaue dir das Beispiel hier nochmal im Kapitel zu dem linearen gemischten Modellen an.\n\n\nIm Folgenden rechnen wir einmal über alle Faktorkombinationen von fert_time und fert_amount einen Gruppenvergleich. Dafür nutzen wir die Option fert_time * fert_amount. Wenn du die Analyse getrennt für die Menge und den Zeitpunkt durchführen willst, dann nutze die Option fert_time | fert_amount. Dann adjustieren wir noch nach Bonferroni und sind fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- lm_fit |&gt; \n  emmeans(~ fert_time * fert_amount) |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n fert_time fert_amount emmean    SE   df lower.CL upper.CL .group\n none      0              169 33.97 1544     77.1      260  a    \n late      150            400 11.25 1544    369.8      430   b   \n early     150            432 11.05 1544    401.8      461   bc  \n late      225            467 11.20 1544    436.9      497    cd \n early     225            497  7.97 1544    475.2      518     de\n late      300            506 11.40 1544    475.1      537     de\n early     300            517 11.38 1544    486.8      548      e\n early     0           nonEst    NA   NA       NA       NA       \n late      0           nonEst    NA   NA       NA       NA       \n none      150         nonEst    NA   NA       NA       NA       \n none      225         nonEst    NA   NA       NA       NA       \n none      300         nonEst    NA   NA       NA       NA       \n\nResults are averaged over the levels of: block \nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 7 estimates \nP value adjustment: bonferroni method for 21 tests \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die emmean stellt den mittleren Gewicht des Brokkoli je Faktorkombination dar gemittelt über alle Blöcke. Das Mitteln über die Blöcke ist eher fragwürdig, da wir ja einen Effekt der Blöcke in der ANOVA gefunden hatten. Hier schauen wir dann nochmal auf das Beispiel im Kapitel zu den linearen gemischten Modellen. Dann können wir zum Abschluss auch das compact letter display anhand der Abbildung interpretieren.\n\n\n\nIn der Abbildung 60.18 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Wir sehen einen klaren Effekt der Düngezeitpunkte sowie der Düngermenge auf das Gewicht von Brokkoli. Wenn wir ein mittleres Gewicht von \\(500g\\) für den Handel erreichen wollen, dann erhalten wir das Zielgewicht nur bei einer Düngemenge von \\(300mg/l\\). Hier stellt sich dann die Frage, ob wir bei \\(225mg/l\\) und einem frühen Zeitpunkt der Düngung nicht auch genug Brokkoli erhalten. Das Ziel ist es ja eigentlich in einen Zielbereich zu kommen. Die Köpfe sollen ja nicht zu schwer und auch nicht zu leicht sein. Aber diese Frage und andere Fragen der biologischen Anwendung lassen wir dann hier einmal offen, denn das Beispiel soll ja nur ein Beispiel sein.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = fert_time, y = emmean, fill = fert_amount)) +\n  theme_minimal() + \n  labs(y = \"Mittleres Gewicht [g] des Brokkoli\", x = \"Düngezeitpunkt\",\n       fill = \"Düngemenge [mg/l]\") +\n  scale_y_continuous(breaks = seq(0, 500, by = 100)) +\n  geom_hline(yintercept = 500, size = 0.75, linetype = 2) +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = .group, y = emmean + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = emmean-SE, ymax = emmean+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 54.11— Säulendigramm der mittleren Brokkoligewichte aus einer Gaussian Regression. Das lm()-Modell berechnet das mittler Gewicht des Brokkoli in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert. Wir nutzen hier den Standardfehler, da die Standardabweichung mit der großen Fallzahl rießig wäre. Wir haben noch ein Mindestgewicht von 500g ergänzt.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Gaussian Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html",
    "href": "stat-modeling-poisson.html",
    "title": "55  Poisson Regression",
    "section": "",
    "text": "55.1 Genutzte R Pakete\nLetzte Änderung am 09. April 2024 um 19:24:00\nIn diesem Kapitel wollen wir eine Poisson Regression rechnen. Wir müssen uns hier wieder überlegen, was ist eigentlich unser Outcome \\(y\\) und was sind unsere Einflussvariablen \\(x\\). Die Poisson Regression ist je nach Hintergrund des Anwenders eher selten. In der Ökologie, wo gerne mal gezaählt wird, wie oft etwas vorkommt, ist die Poisson Regression häufig vertreten. Sonst fristet die Poisson Regresson eher ein unbekanntes Dasein.\nEin häufig unterschätzter Vorteil der Poisson Regression ist, dass wir auch auch \\(0/1\\) Daten eine Poisson Regression rechnen können. Moment, wirst du jetzt vielleicht denken, das machen wir doch mit der logistischen Regression. Ja, das stimmt, aber wir können auf Zahlen viel rechnen. Wenn wir auf ein \\(0/1\\) Outcome eine Poisson Regression rechnen, dann kriegen wir nicht Odds Ratios \\(OR\\) als Effektschätzer sondern Risk Ratios \\(RR\\). Wir erhalten also keine Chancen sondern Wahrscheinlichkeiten. Unter der Annahme, dass das Modell auch konvergiert und wir sinnvolle Zahlen erhalten.\nEin weiteres Problem sind die zu vielen Nullen in dem Outcome \\(y\\). Daher wir zählen über die Maßen viel Nichts. Wir nennen diesen Fall zero inflation und beschreiben damit die zu vielen Nullen in den Daten. Hier muss dann noch speziell modelliert werden. Eine Poisson Regression hat schon so seine speziellen Tücken.\nIn der folgenden Abbildung 55.1 siehst du nochmal den Zusammenhang zwischen einem poissonverteilten Outcome, wie Anzahl oder Auftreten, im Bezug zu einem kontinuierlichen oder kategoriellen \\(x\\) als Einflussgröße. Wir sind dann eher im Bereich der Posthoc-Tests mit kategoriellen \\(x\\) als in wirklich einer Interpretation einer Poisson Regression mit einem kontinuierlichen \\(x\\). Dennoch müssen wir wissen, ob die Poisson Regression gut funktioniert hat. Die Überprüfung der Modellierung können wir dann in diesem Kapitel einmal durchgehen.\nHäufig wollen wir dann die Ergebnisse aus einer Poisson Regression dann im Falle eines kategoriellen \\(x\\) dann als Barplots wie in der Abbildung 55.2 darstellen. Hier musst du dann einmal weiter unten in den Abschnitt zu den Gruppenvergleichen springen.\nIm folgenden Kapitel zu der multiplen Poisson linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form ideal sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.\nDaher sieht unser Modell wie folgt aus. Wir haben ein \\(y\\) und \\(p\\)-mal \\(x\\). Wobei \\(p\\) für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser \\(y\\) einer Poissonverteilung. Das ist hier sehr wichtig, denn wir wollen ja eine multiple Poisson lineare Regression rechnen.\n\\[\ny \\sim x_1 + x_2 + ... + x_p\n\\]\nWir gehen jetzt einmal die lineare Regression mit einem normalverteilten Outcome \\(y\\) einmal durch. Wie schon oben erwähnt, können wir die Poisson Regression als vorangestelltes Modell für eine ANOVA oder dann eben einen Posthoc-Test in {emmeans} nutzen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom,\n               parameters, performance, MASS, pscl, see,\n               modelsummary, scales, emmeans, multcomp,\n               conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#daten",
    "href": "stat-modeling-poisson.html#daten",
    "title": "55  Poisson Regression",
    "section": "55.2 Daten",
    "text": "55.2 Daten\nIm folgenden schauen wir uns ein Datenbeispiel mit Hechten an. Es handelt sich um langnasige Hechte in nordamerikanischen Flüssen. Wir haben uns insgesamt \\(n = 68\\) Flüsse einmal angesehen und dort die Anzahl an Hechten gezählt. Im Weiteren haben wir dann noch andere Flussparameter erhoben und fragen uns nun, welche dieser Parameter einen Einfluss auf die Anzahl an Hechten in den Flussarmen haben. In Kapitel 7.3 findest du nochmal mehr Informationen zu den Daten. Wir entfernen hier die Informationen zu den Flüssen, die brauchen wir in dieser Analyse nicht. Die Daten zu den langnasigen Hechten stammt von Salvatore S. Mangiafico - An R Companion for the Handbook of Biological Statistics. Besuche gerne mal seine Webseite, dort findest du auch andere tolle Beispiele zu statistischen Analysen.\n\n\nR Code [zeigen / verbergen]\nlongnose_tbl &lt;- read_csv2(\"data/longnose.csv\") |&gt; \n  select(-stream)\n\n\n\n\n\n\nTabelle 55.1— Auszug aus dem Daten zu den langnasigen Hechten.\n\n\n\n\n\n\nlongnose\narea\ndo2\nmaxdepth\nno3\nso4\ntemp\n\n\n\n\n13\n2528\n9.6\n80\n2.28\n16.75\n15.3\n\n\n12\n3333\n8.5\n83\n5.34\n7.74\n19.4\n\n\n54\n19611\n8.3\n96\n0.99\n10.92\n19.5\n\n\n19\n3570\n9.2\n56\n5.44\n16.53\n17\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n26\n1450\n7.9\n60\n2.96\n8.84\n18.6\n\n\n20\n4106\n10\n96\n2.62\n5.45\n15.4\n\n\n38\n10274\n9.3\n90\n5.45\n24.76\n15\n\n\n19\n510\n6.7\n82\n5.25\n14.19\n26.5\n\n\n\n\n\n\n\n\nIm Folgenden werden wir die Daten nur für das Fitten eines Modells verwenden. In den anderen oben genannten Kapiteln nutzen wir die Daten dann anders. In Abbildung 55.3 sehen wir nochmal die Verteilung der Anzahl der Hechte in den Flüssen.\n\n\nR Code [zeigen / verbergen]\nggplot(longnose_tbl, aes(longnose)) +\n  theme_minimal() +\n  geom_histogram()\n\n\n\n\n\n\n\n\nAbbildung 55.3— Histogramm der Verteilung der Hechte in den beobachteten Flüssen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#fit-des-modells",
    "href": "stat-modeling-poisson.html#fit-des-modells",
    "title": "55  Poisson Regression",
    "section": "55.3 Fit des Modells",
    "text": "55.3 Fit des Modells\nIn diesem Abschnitt wollen wir verschiedene Modelle für Zähldaten schätzen. Die Poissonverteilung hat keinen eignen Parameter für die Streung wie die Normalverteilung. Die Poissonverteilung ist mit \\(\\mathcal{Pois}(\\lambda)\\) definiert und hat somit die Eigenschaft das die Varianz eins zu eins mit dem Mittelwert \\(\\lambda\\) der Poissonverteilung ansteigt. Es kann aber sein, dass wir in den Daten nicht diesen ein zu eins Zusammenhang von Mittelwert und Varianz vrliegen haben. Häufig ist die Varianz viel größer und steigt schneller an. Wenn die Varianz in Wirklichkeit sehr viel größer ist, dann würden wir die Varianz in unseren Modell unterschätzen.\n\nEin klassisches Poissonmodell glm(..., familiy = poisson) mit der Annahme keiner Overdisperison.\nEin Quasi-Poissonmodell glm(..., family = quasipoisson) mit der Möglichkeit der Berücksichtigung einer Overdispersion.\nEin negative Binomialmodell glm.nb(...) ebenfalls mit der Berücksichtigung einer Overdispersion.\n\nBeginnen wollen wir aber mit einer klassischen Poissonregression ohne die Annahme von einer Overdispersion in den Daten. Wir nutzen dafür die Funktion glm() und spezifizieren die Verteilungsfamilie als poisson. Wir nehmen wieder alle Variablen in das Modell auf der rechten Seite des ~. Auf der linken Seite des ~ kommt dann unser Outcome longnose was die Anzahl an Hechten erhält.\nHier gibt es nur die Kurzfassung der link-Funktion. Dormann (2013) liefert hierzu in Kapitel 7.1.3 nochmal ein Einführung in das Thema.\nWir müssen für die Possionregression noch beachten, dass die Zähldaten von \\(0\\) bis \\(+\\infty\\) laufen. Damit wir normalverteilte Residuen erhalten und einen lineren Zusammenhang, werden wir das Modell auf dem \\(\\log\\)-scale fitten. Das heißt, wir werden den Zusammenhang von \\(y\\) und \\(x\\) logarithmieren. Wichtig ist hierbei der Zusammenhang. Wir transformieren nicht einfach \\(y\\) und lassen den Rest unberührt. Das führt dazu, dass wir am Ende die Koeffizienten der Poissonregression exponieren müssen. Das können die gängigen Funktionen, wir müssen das Exponieren aber aktiv durchführen. Deshalb hier schon mal erwähnt.\n\n\nR Code [zeigen / verbergen]\npoisson_fit &lt;- glm(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,\n                    longnose_tbl, family = poisson)\n\n\nWir schauen uns die Ausgabe des Modells einmal mit der summary() Funktion an, da wir hier einmal händisch schauen wollen, ob eine Overdispersion vorliegt. Sonst könnten wir auch die Funktion model_parameters() nehmen. Die nutzen wir später für die Interpretation des Modells, hier wollen wir erstmal sehen, ob alles geklappt hat.\n\n\nR Code [zeigen / verbergen]\npoisson_fit |&gt; summary()\n\n\n\nCall:\nglm(formula = longnose ~ area + do2 + maxdepth + no3 + so4 + \n    temp, family = poisson, data = longnose_tbl)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -1.564e+00  2.818e-01  -5.551 2.83e-08 ***\narea         3.843e-05  2.079e-06  18.480  &lt; 2e-16 ***\ndo2          2.259e-01  2.126e-02  10.626  &lt; 2e-16 ***\nmaxdepth     1.155e-02  6.688e-04  17.270  &lt; 2e-16 ***\nno3          1.813e-01  1.068e-02  16.974  &lt; 2e-16 ***\nso4         -6.810e-03  3.622e-03  -1.880   0.0601 .  \ntemp         7.854e-02  6.530e-03  12.028  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 2766.9  on 67  degrees of freedom\nResidual deviance: 1590.0  on 61  degrees of freedom\nAIC: 1936.9\n\nNumber of Fisher Scoring iterations: 5\n\n\nWir schauen in die Summary-Ausgabe des Poissonmodells und sehen, dass dort steht, dass Dispersion parameter for poisson family taken to be 1. Wir modellieren also einen eins zu eins Zusammenhang von Mittelwert und Varianz. Wenn dieser Zusammenhang nicht in unseren Daten existiert, dann haben wir eine Overdispersion vorliegen.\nWir können die Overdispersion mit abschätzen indem wir die Residual deviance durch die Freiheitsgrade der Residual deviance teilen. Daher erhalten wir eine Overdispersion von \\(\\cfrac{1590.04}{61} \\approx 26.1\\). Damit haben wir eine eindeutige Overdispersion vorliegen. Damit steigt die Varianz in einem Verhältnis von ca. 1 zu 26. Wir können auch die Funktion check_overdispersion() aus dem R Paket {performance} nutzen um die Overdispersion zu berechnen. Die Funktion kann das schneller und ist auch in der Abfolge einer Analyse besser geeignet.\n\n\nR Code [zeigen / verbergen]\npoisson_fit |&gt; check_overdispersion()\n\n\n# Overdispersion test\n\n       dispersion ratio =   29.403\n  Pearson's Chi-Squared = 1793.599\n                p-value =  &lt; 0.001\n\n\nOverdispersion detected.\n\n\nWenn wir Overdispersion vorliegen haben und damit die Varianz zu niedrig schätzen, dann erhalten wir viel mehr signifikante Ergebnisse als es in den Daten zu erwarten wäre. Schauen wir uns nochmal die Parameter der Poissonverteilung und die \\(p\\)-Werte einmal an.\n\n\nR Code [zeigen / verbergen]\npoisson_fit |&gt; model_parameters()\n\n\nParameter   |  Log-Mean |       SE |         95% CI |     z |      p\n--------------------------------------------------------------------\n(Intercept) |     -1.56 |     0.28 | [-2.12, -1.01] | -5.55 | &lt; .001\narea        |  3.84e-05 | 2.08e-06 | [ 0.00,  0.00] | 18.48 | &lt; .001\ndo2         |      0.23 |     0.02 | [ 0.18,  0.27] | 10.63 | &lt; .001\nmaxdepth    |      0.01 | 6.69e-04 | [ 0.01,  0.01] | 17.27 | &lt; .001\nno3         |      0.18 |     0.01 | [ 0.16,  0.20] | 16.97 | &lt; .001\nso4         | -6.81e-03 | 3.62e-03 | [-0.01,  0.00] | -1.88 | 0.060 \ntemp        |      0.08 | 6.53e-03 | [ 0.07,  0.09] | 12.03 | &lt; .001\n\n\nIn der Spalte p finden wir die \\(p\\)-Werte für alle Variablen. Wir sehen, dass fast alle Variablen signifikant sind und das wir eine sehr niedrige Varianz in der Spalte SE sehen. Das heißt unser geschätzer Fehler ist sehr gering. Das ahnten wir ja schon, immerhin haben wir eine Overdisperson vorliegen. Das Modell ist somit falsch. Wir müssen uns ein neues Modell suchen, was Overdispersion berückscihtigen und modellieren kann.\nDie Quasi-Poisson Verteilung hat einen zusätzlichen, unabhänigen Parameter um die Varianz der Verteilung zu schätzen. Daher können wir die Overdispersion mit einer Quasi-Poisson Verteilung berückscihtigen. Wir können eine Quasi-Poisson Verteilung auch mit der Funktion glm() schätzen nur müssen wir als Verteilungsfamilie quasipoisson angeben.\n\n\nR Code [zeigen / verbergen]\nquasipoisson_fit &lt;- glm(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,\n                        data = longnose_tbl, family = quasipoisson)\n\n\nNach dem Modellti können wir nochmal in der summary() Funktion schauen, ob wir die Overdispersion richtig berücksichtigt haben.\n\n\nR Code [zeigen / verbergen]\nquasipoisson_fit |&gt; summary()\n\n\n\nCall:\nglm(formula = longnose ~ area + do2 + maxdepth + no3 + so4 + \n    temp, family = quasipoisson, data = longnose_tbl)\n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept) -1.564e+00  1.528e+00  -1.024  0.30999   \narea         3.843e-05  1.128e-05   3.408  0.00116 **\ndo2          2.259e-01  1.153e-01   1.960  0.05460 . \nmaxdepth     1.155e-02  3.626e-03   3.185  0.00228 **\nno3          1.813e-01  5.792e-02   3.130  0.00268 **\nso4         -6.810e-03  1.964e-02  -0.347  0.73001   \ntemp         7.854e-02  3.541e-02   2.218  0.03027 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 29.40332)\n\n    Null deviance: 2766.9  on 67  degrees of freedom\nResidual deviance: 1590.0  on 61  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 5\n\n\nAn der Zeile Dispersion parameter for quasipoisson family taken to be 29.403319 in der Summary-Ausgabe sehen wir, dass das Modell der Quasi-Possion Verteilung die Overdispersion korrekt berücksichtigt hat. Wir können uns nun einmal die Modellparameter anschauen. Die Interpretation machen wir am Ende des Kapitels.\n\n\nR Code [zeigen / verbergen]\nquasipoisson_fit |&gt; model_parameters()\n\n\nParameter   |  Log-Mean |       SE |        95% CI | t(61) |      p\n-------------------------------------------------------------------\n(Intercept) |     -1.56 |     1.53 | [-4.57, 1.41] | -1.02 | 0.306 \narea        |  3.84e-05 | 1.13e-05 | [ 0.00, 0.00] |  3.41 | &lt; .001\ndo2         |      0.23 |     0.12 | [ 0.00, 0.45] |  1.96 | 0.050 \nmaxdepth    |      0.01 | 3.63e-03 | [ 0.00, 0.02] |  3.18 | 0.001 \nno3         |      0.18 |     0.06 | [ 0.07, 0.29] |  3.13 | 0.002 \nso4         | -6.81e-03 |     0.02 | [-0.05, 0.03] | -0.35 | 0.729 \ntemp        |      0.08 |     0.04 | [ 0.01, 0.15] |  2.22 | 0.027 \n\n\nJetzt sieht unser Modell und die \\(p\\)-Werte zusammen mit dem Standardfehler SE schon sehr viel besser aus. Wir können also diesem Modell erstmal von der Seite der Overdispersion vertrauen.\nAm Ende wollen wir nochmal das Modell mit der negativen Binomialverteilung rechnen. Die negativen Binomialverteilung erlaubt auch eine Unabhängigkeit von dem Mittelwert zu der Varianz. Wir können hier auch für die Overdispersion adjustieren. Wir rechnen die negativen Binomialregression mit der Funktion glm.nb() aus dem R Paket {MASS}. Wir müssen keine Verteilungsfamilie angeben, die Funktion glm.nb() kann nur die negative Binomialverteilung modellieren.\n\n\nR Code [zeigen / verbergen]\nnegativebinomial_fit &lt;- glm.nb(longnose ~ area + do2 + maxdepth + no3 + so4 + temp,\n                               data = longnose_tbl)\n\n\nAuch hier schauen wir mit der Funktion summary() einmal, ob die Overdisprsion richtig geschätzt wurde oder ob hier auch eine Unterschätzung des Zusammenhangs des Mittelwerts und der Varianz vorliegt.\n\n\nR Code [zeigen / verbergen]\nnegativebinomial_fit |&gt; summary()\n\n\n\nCall:\nglm.nb(formula = longnose ~ area + do2 + maxdepth + no3 + so4 + \n    temp, data = longnose_tbl, init.theta = 1.666933879, link = log)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -2.946e+00  1.305e+00  -2.256 0.024041 *  \narea         4.651e-05  1.300e-05   3.577 0.000347 ***\ndo2          3.419e-01  1.050e-01   3.256 0.001130 ** \nmaxdepth     9.538e-03  3.465e-03   2.752 0.005919 ** \nno3          2.072e-01  5.627e-02   3.683 0.000230 ***\nso4         -2.157e-03  1.517e-02  -0.142 0.886875    \ntemp         9.460e-02  3.315e-02   2.854 0.004323 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(1.6669) family taken to be 1)\n\n    Null deviance: 127.670  on 67  degrees of freedom\nResidual deviance:  73.648  on 61  degrees of freedom\nAIC: 610.18\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  1.667 \n          Std. Err.:  0.289 \n\n 2 x log-likelihood:  -594.175 \n\n\nAuch hier sehen wir, dass die Overdispersion mit dem Parameter \\(\\theta\\) berücksichtigt wird. Wir können die Zahl \\(1.67\\) nicht direkt mit der Overdispersion aus einer Poissonregression verglechen, aber wir sehen dass das Verhältnis von Residual deviance zu den Freiheitsgraden mit \\(\\cfrac{73.65}{61} \\approx 1.20\\) fast bei 1:1 liegt. Wir könnten also auch eine negative Binomialverteilung für das Modellieren nutzen.\n\n\nR Code [zeigen / verbergen]\nnegativebinomial_fit |&gt; model_parameters()\n\n\nParameter   |  Log-Mean |       SE |         95% CI |     z |      p\n--------------------------------------------------------------------\n(Intercept) |     -2.95 |     1.31 | [-5.85, -0.10] | -2.26 | 0.024 \narea        |  4.65e-05 | 1.30e-05 | [ 0.00,  0.00] |  3.58 | &lt; .001\ndo2         |      0.34 |     0.11 | [ 0.11,  0.58] |  3.26 | 0.001 \nmaxdepth    |  9.54e-03 | 3.47e-03 | [ 0.00,  0.02] |  2.75 | 0.006 \nno3         |      0.21 |     0.06 | [ 0.10,  0.32] |  3.68 | &lt; .001\nso4         | -2.16e-03 |     0.02 | [-0.03,  0.03] | -0.14 | 0.887 \ntemp        |      0.09 |     0.03 | [ 0.03,  0.16] |  2.85 | 0.004 \n\n\n\n\nWie immer gibt es reichlich Tipps & Tricks welches Modell du nun nehmen solltest. How to deal with overdispersion in Poisson regression: quasi-likelihood, negative binomial GLM, or subject-level random effect? und das Tutorial Modeling Count Data. Auch ich mus immer wieder schauen, was am besten konkret in der Anwendung passen könnte und würde.\nWelches Modell nun das beste Modell ist, ist schwer zu sagen. Wenn du Overdisperion vorliegen hast, dann ist natürlich nur das Quasi-Poissonmodell oder das negative Binomialmodell möglich. Welche der beiden dann das bessere ist, hängt wieder von der Fragestellung ab. Allgemein gesprochen ist das Quasi-Poissonmodell besser wenn dich die Zusammenhänge von \\(y\\) zu \\(x\\) am meisten interessieren. Und das ist in unserem Fall hier die Sachlage. Daher gehen wir mit den Quasi-Poissonmdell dann weiter.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#performance-des-modells",
    "href": "stat-modeling-poisson.html#performance-des-modells",
    "title": "55  Poisson Regression",
    "section": "55.4 Performance des Modells",
    "text": "55.4 Performance des Modells\nIn diesem kurzen Abschnitt wollen wir uns einmal anschauen, ob das Modell neben der Overdispersion auch sonst aus statistischer Sicht in Ordnung ist. Wir wollen ja mit dem Modell aus dem Fit quasipoisson_fit weitermachen. Also schauen wir uns einmal das pseudo-\\(R^2\\) für die Poissonregression an. Da wir es mit einem GLM zu tun haben, ist das \\(R^2\\) mit Vorsicht zu genießen. In einer Gaussianregression können wir das \\(R^2\\) als Anteil der erklärten Varianz durch das Modell interpretieren. Im Falle von GLM’s müssen wir hier vorsichtiger sein. In GLM’s gibt es ja keine Varianz sondern eine Deviance.\n\n\nR Code [zeigen / verbergen]\nr2_efron(quasipoisson_fit)\n\n\n[1] 0.3257711\n\n\nMit einem pseudo-\\(R^2\\) von \\(0.33\\) erklären wir ca. 33% der Varianz in der Anzahl der Hechte. Das ist zwar keine super gute Zahl, aber dafür, dass wir nur eine handvoll von Parametern erfasst haben, ist es dann auch wieder nicht so schlecht. Die Anzahl an Hechten wird sicherlich an ganz vielen Parametern hängen, wir konnten immerhin einige wichtige Stellschrauben vermutlich finden.\nIn Abbildung 55.4 schauen wir uns nochmal die Daten in den Modelgüteplots an. Wir sehen vorallem, dass wir vielelicht doch einen Ausreißer mit der Beobachtung 17 vorliegen haben. Auch ist der Fit nicht so super, wie wir an dem QQ-Plot sehen. Die Beobachtungen fallen in dem QQ-Plot nicht alle auf eine Linie. Auch sehen wir dieses Muster in dem Residualplot. Hiererwarten wir eine gerade blaue Linie und auch hier haben wir eventuell Ausreißer mit in den Daten.\n\n\nR Code [zeigen / verbergen]\ncheck_model(quasipoisson_fit, colors = cbbPalette[6:8], \n            check = c(\"qq\", \"outliers\", \"pp_check\", \"homogeneity\")) \n\n\n\n\n\n\n\n\nAbbildung 55.4— Ausgabe ausgewählter Modelgüteplots der Funktion check_model().",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#interpretation-des-modells",
    "href": "stat-modeling-poisson.html#interpretation-des-modells",
    "title": "55  Poisson Regression",
    "section": "55.5 Interpretation des Modells",
    "text": "55.5 Interpretation des Modells\nUm die Effektschätzer einer Poissonregression oder aber einer Quasipoisson-Regression interpretieren zu können müssen wir uns einmal einen Beispieldatensatz mit bekannten Effekten zwischen den Gruppen bauen. Im Folgenden bauen wir uns einen Datensatz mit zwei Gruppen. Einmal einer Kontrollgruppe mit einer mittleren Anzahl an \\(15\\) und einer Behandlungsgruppe mit einer um \\(\\beta_1 = 10\\) höheren Anzahl. Wir haben also in der Kontrolle im Mittel eine Anzahl von \\(15\\) und in der Behandlungsgruppe eine mittlere Anzahl von \\(25\\).\n\n\nR Code [zeigen / verbergen]\nsample_size &lt;- 100\nlongnose_small_tbl &lt;- tibble(grp = rep(c(0, 1), each = sample_size),\n                             count = 15 + 10 * grp + rnorm(2 * sample_size, 0, 1)) |&gt;\n  mutate(count = round(count),\n         grp = factor(grp, labels = c(\"ctrl\", \"trt\")))\n\n\nIn Tabelle 55.2 sehen wir nochmal die Daten als Ausschnitt dargestellt.\n\n\n\n\nTabelle 55.2— How much is the fish? Der Datensatz über \\(n = 1000\\) Beobachtungen an dem wir überlegen wollen wie wir die Effektschätzer einer Poissonregression zu interpretieren haben.\n\n\n\n\n\n\ngrp\ncount\n\n\n\n\nctrl\n16\n\n\nctrl\n16\n\n\nctrl\n15\n\n\nctrl\n14\n\n\n…\n…\n\n\ntrt\n24\n\n\ntrt\n25\n\n\ntrt\n26\n\n\ntrt\n26\n\n\n\n\n\n\n\n\nDa sich die Tabelle schlecht liest hier nochmal der Boxplot in Abbildung 55.5. Wir sehen den Grupenunterschied von \\(10\\) sowie die unterschiedlichen mittleren Anzahlen für die Kontrolle und die Behandlung.\n\n\nR Code [zeigen / verbergen]\nggplot(longnose_small_tbl, aes(x = grp, y = count, fill = grp)) +\n  theme_minimal() +\n  geom_boxplot() +\n  theme(legend.position = \"none\") +\n  scale_fill_okabeito() \n\nggplot(data = longnose_small_tbl, aes(x = count, fill = grp)) +\n  theme_minimal() +\n  geom_density(alpha = 0.75) +\n  labs(x = \"\", y = \"\", fill = \"Gruppe\") +\n  scale_fill_okabeito() +\n  scale_x_continuous(breaks = seq(10, 30, by = 5), limits = c(10, 30)) \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Verteilung der Werte als Boxplot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Verteilung der Werte als Densityplot.\n\n\n\n\n\n\n\nAbbildung 55.5— How much is the fish? Der Boxplot über \\(n = 1000\\) Beobachtungen an dem wir überlegen wollen wie wir die Effektschätzer einer Poissonregression zu interpretieren haben.\n\n\n\n\nJetzt fitten wir einmal das simple Poissonmodell mit der Anzahl als Outcome und der Gruppe mit den zwei Leveln als \\(x\\). Wir pipen dann das Ergebnis des Fittes gleich in die Funktion model_parameters() weiter um die Ergebnisse des Modellierens zu erhalten.\n\n\nR Code [zeigen / verbergen]\nglm(count ~ grp, data = longnose_small_tbl, family = poisson) |&gt;\n  model_parameters(exponentiate = TRUE)\n\n\nParameter   |   IRR |   SE |         95% CI |      z |      p\n-------------------------------------------------------------\n(Intercept) | 14.98 | 0.39 | [14.23, 15.75] | 104.76 | &lt; .001\ngrp [trt]   |  1.67 | 0.05 | [ 1.57,  1.78] |  15.69 | &lt; .001\n\n\nAls erstes fällt auf, dass wir die Ausgabe des Modells exponieren müssen. Um einen linearen Zusamenhang hinzukriegen bedient sich die Poissonregression den Trick, das der Zusammenhang zwischen dem \\(y\\) und dem \\(x\\) transformiert wird. Wir rechnen unsere Regression nicht auf den echten Daten sondern auf dem \\(\\log\\)-scale. Daher müssen wir die Koeffizienten der Poissonregression wieder zurücktransfomieren, wenn wir die Koeffizienten interpretieren wollen. Das können wir mit der Option exponentiate = TRUE durchführen.\nGut soweit, aber was heißen den jetzt die Zahlen? Wir haben einen Intercept von \\(14.99\\) das entspricht der mittleren Anzahl in der Kontrollgruppe. Und was sagt jetzt die \\(1.67\\) vom Level trt des Faktors grp? Wenn wir \\(14.99 \\cdot 1.67\\) rechnen, dann erhalten wir als Ergebnis \\(25.03\\), also die mittlere Anzahl in der Behandlungsgruppe. Was sagt uns das jetzt aus? Wir erhalten aus der Poissonregression eine Wahrscheinlichkeit oder aber ein Risk Ratio. Wir können sagen, dass die Anzahl in der Behandlungsgruppe \\(1.67\\)-mal so groß ist wie in der Kontrollgruppe.\nSchauen wir uns nochmal das volle Modell an und interpretieren die Effekte der einzelnen Variablen.\n\n\nR Code [zeigen / verbergen]\nquasipoisson_fit |&gt; \n  model_parameters(exponentiate = TRUE) \n\n\nParameter   |  IRR |       SE |       95% CI | t(61) |      p\n-------------------------------------------------------------\n(Intercept) | 0.21 |     0.32 | [0.01, 4.11] | -1.02 | 0.306 \narea        | 1.00 | 1.13e-05 | [1.00, 1.00] |  3.41 | &lt; .001\ndo2         | 1.25 |     0.14 | [1.00, 1.57] |  1.96 | 0.050 \nmaxdepth    | 1.01 | 3.67e-03 | [1.00, 1.02] |  3.18 | 0.001 \nno3         | 1.20 |     0.07 | [1.07, 1.34] |  3.13 | 0.002 \nso4         | 0.99 |     0.02 | [0.95, 1.03] | -0.35 | 0.729 \ntemp        | 1.08 |     0.04 | [1.01, 1.16] |  2.22 | 0.027 \n\n\nSo schön auch die Funktion model_parameters() ist, so haben wir aber hier das Problem, dass wir den Effekt von area nicht mehr richtig sehen. Wir kriegen hier eine zu starke Rundung auf zwei Nachkommastellen. Wir nutzen jetzt mal die Funktion tidy() um hier Abhilfe zu leisten. Ich muss hier noch die Spalte estimate mit num(..., digits = 5) anpassen, damit du in der Ausgabe auf der Webseite auch die Nachkommastellen siehst.\n\n\nR Code [zeigen / verbergen]\nquasipoisson_fit |&gt; \n  tidy(exponentiate = TRUE, digits = 5) |&gt; \n  select(term, estimate, p.value) |&gt; \n  mutate(p.value = pvalue(p.value),\n         estimate = num(estimate, digits = 5))\n\n\n# A tibble: 7 × 3\n  term         estimate p.value\n  &lt;chr&gt;       &lt;num:.5!&gt; &lt;chr&gt;  \n1 (Intercept)   0.20922 0.310  \n2 area          1.00004 0.001  \n3 do2           1.25342 0.055  \n4 maxdepth      1.01162 0.002  \n5 no3           1.19879 0.003  \n6 so4           0.99321 0.730  \n7 temp          1.08171 0.030  \n\n\nSchauen wir uns die Effekte der Poissonregression einmal an und versuchen die Ergebnisse zu interpretieren. Dabei ist wichtig sich zu erinnern, dass kein Effekt eine 1 bedeutet. Wir schauen hier auf einen Faktor. Wenn wir eine Anzahl mal Faktor 1 nehmen, dann ändert sich nichts an der Anzahl.\n\n(Intercept) beschreibt den Intercept der Poissonregression. Wenn wir mehr als eine simple Regression vorliegen haben, wie in diesem Fall, dann ist der Intercept schwer zu interpretieren. Wir konzentrieren uns auf die Effekte der anderen Variablen.\narea, beschreibt den Effekt der Fläche. Steigt die Fläche um ein Quadratmeter an, so erhöht sich die Anzahl an Fischen um den \\(1.00001\\). Daher würde man hier eher sagen, erhöht sich die Fläche um jeweils 1000qm so erhöht sich die Anzahl an Fischen um den Faktor \\(1.1\\). Dann haben wir auch einen besser zu interpretierenden Effektschätzer. Die Signifikanz bleibt hier davon unbetroffen.\ndo2, beschreibt den Partzialdruck des Sauerstoffs. Steigt dieser um eine Einheit an, so sehen wie eine Erhöhung der Anzahl an Fischen um den Faktor \\(1.25\\). Der Effekt ist gerade nicht signifikant.\nmaxdepth, beschreibt die maximale Tiefe. Je tiefer ein Fluss, desto mehr Hechte werden wir beobachten. Der Effekt von \\(1.01\\) pro Meter Tiefe ist signifikant.\nno3, beschreibt den Anteil an Nitrat in den Flüssen. Je mehr Nitrat desto signifiant mehr Hechte werden wir beobachten. Hier steigt der Faktor auch um \\(1.20\\).\nso4, beschreibt den Schwefelgehalt und mit steigenden Schwefelgehalt nimmt die Anzahl an Fischen leicht ab. Der Effekt ist aber überhaupt nicht signifikant.\ntemp, beschreibt die Temperatur der Flüsse. Mit steigender Temperatur erwarten wir mehr Hechte zu beobachten. Der Effekt von \\(1.08\\) Fischen pro Grad Erhöhung ist signifikant.\n\nWas nehmen wir aus der Poissonregression zu den langnasigen Hechten mit? Zum einen haben die Fläche, die Tiefe und der Nitratgehalt einen signifikanten Einfluss auf die Anzahl an Hechten. Auch führt eine höhere Temperatur zu mehr gefundenen Hechten. Die erhöhte Temperatur steht etwas im Widerspuch zu dem Sauerstoffpartizaldruck. Denn je höher die Temperatur desto weniger Sauerstoff wird in dem Wasser gelöst sein. Auch scheint die Oberfläche mit der Tiefe korreliert. Allgemein scheinen Hechte große Flüsse zu mögen. Hier bietet sich also noch eine Variablenselektion oder eine Untersuchung auf Ausreißer an um solche Effekte nochmal gesondert zu betrachten.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#zeroinflation",
    "href": "stat-modeling-poisson.html#zeroinflation",
    "title": "55  Poisson Regression",
    "section": "55.6 Zeroinflation",
    "text": "55.6 Zeroinflation\nSo eine Poissonregression hat schon einiges an Eigenheiten. Neben dem Problem der Overdispersion gibt es aber noch eine weitere Sache, die wir beachten müssen. Wir können bei einer Poissonregression auch eine Zeroinflation vorliegen haben. Das heißt, wir beobachten viel mehr Nullen in den Daen, als wir aus der Poissonverteilung erwarten würden. Es gibt also einen biologischen oder künstlichn Prozess, der uns Nullen produziert. Häufig wissen wir nicht, ob wir den Prozess, der uns die Nullen in den Daten produziert, auch abbilden. Das heißt, es kann sein, dass wir einfach nichts Zählen, weil dort nichts ist oder aber es gibt dafür einen Grund. Diesen Grund müssten wir dann irgendwie in unseren Daten erfasst haben, aber meistens haben wir das nicht.\nSchauen wir usn dafür einmal ein Datenbeispiel von Eidechsen in der Lüneburgerheide an. Wir haben Eidechsen lizard in zwei verschiedenen Habitaten grp gezählt. Einmal, ob die Eidechsen eher im offenen Gelände oder eher im bedeckten Gelände zu finden waren. Im Weiteren haben wir geschaut, ob der Boden keinen Regen erhalten hatte, trocken war oder gar feucht. Mit trocken ist hier eine gewisse Restfeuchte gemeint. Am Ende haben wir noch bestimmt, ob wir eher nah an einer Siedlung waren oder eher weiter entfernt. Du kannst dir den Daten satz in der Datei lizards.csv nochmal anschauen. In Tabelle 55.3 sind die Daten nochmal dargestellt.\n\n\n\n\nTabelle 55.3— Ausschnitt aus den Eidechsendaten für die zwei Habitate unter verschiedenen Feuchtigkeitsbedingungen und Nähe zur nächsten Siedlung.\n\n\n\n\n\n\ngrp\nrain\npop\nlizard\n\n\n\n\nopen\nno\nnear\n0\n\n\nopen\nno\nnear\n1\n\n\nopen\nno\nnear\n1\n\n\nopen\nno\nnear\n1\n\n\nopen\nno\nnear\n0\n\n\nopen\nno\nfar\n2\n\n\nopen\nno\nfar\n4\n\n\n\n\n\n\n\n\nIn Abbildung 55.6 sehen wir die Zähldaten der Eidechsen nochmal als Histogramm dargestellt. Wenn wir an einem Punkt keine Eidechsen gefunden haben, dann haben wir keine fehlenden Werte eingetragen, sondern eben, dass wir keine Eidechsen gezählt haben. Wir sehen das wir sehr viele Nullen in unseren Daten haben. Ein Indiz für eine Inflation an Nullen oder eben einer Zeroinflation.\n\n\nR Code [zeigen / verbergen]\nggplot(lizard_zero_tbl, aes(lizard)) +\n  theme_minimal() +\n  geom_histogram() +\n  labs(x = \"Anzahl der gefundenen Eidechsen\", y = \"Anzahl\") +\n  scale_x_continuous(breaks = 0:7)\n\n\n\n\n\n\n\n\nAbbildung 55.6— Histogramm der Verteilung der Hechte in den beobachteten Flüssen.\n\n\n\n\n\nUm zu überprüfen, ob wir eine Zeroinflation in den Daten vorliegen haben, werden wir erstmal eine ganz normale Poissonregression auf den Daten rechnen. Wir ignorieren auch eine potenzielle Overdispersion. Das schauen wir uns dann in den Daten später nochmal an.\n\n\nR Code [zeigen / verbergen]\nlizard_fit &lt;- glm(lizard ~ grp + rain + pop, data = lizard_zero_tbl,\n                  family = poisson)\n\n\nWie immer nutzen wir die Funktion model_parameters() um uns die exponierten Koeffizienten aus dem Modell wiedergeben zu lassen. Das Modell dient uns jetzt nur als Ausgangsmodell und wir werden das Poissonmodell jetzt nicht weiter tiefer verwenden.\n\n\nR Code [zeigen / verbergen]\nlizard_fit |&gt; model_parameters(exponentiate = TRUE)\n\n\nParameter   |  IRR |   SE |       95% CI |     z |      p\n---------------------------------------------------------\n(Intercept) | 1.06 | 0.29 | [0.60, 1.77] |  0.20 | 0.840 \ngrp [cover] | 1.88 | 0.46 | [1.18, 3.07] |  2.61 | 0.009 \nrain [dry]  | 0.31 | 0.09 | [0.17, 0.53] | -4.12 | &lt; .001\nrain [wet]  | 0.13 | 0.05 | [0.06, 0.28] | -4.98 | &lt; .001\npop [far]   | 2.41 | 0.61 | [1.49, 4.04] |  3.47 | &lt; .001\n\n\nWir sehen, dass wir in der Variable rain eine starke Reduzierung der Anzahl an Eidechsen sehen. Vielleicht ist dies eine Variable, die zu viele Nullen produziert. Auch hat die Variable pop, die für die Nähe an einer Siedlung kodiert, einen starken positiven Effekt auf unsere Anzahl an Eidechsen. Hier wollen wir also einmal auf eine Zeroinflation überprüfen. Wir nutzen dazu die Funktion check_zeroinflation() aus dem R Paket {performance}. Die Funktion läuft nur auf einem Modellfit.\n\n\nR Code [zeigen / verbergen]\ncheck_zeroinflation(lizard_fit)\n\n\n# Check for zero-inflation\n\n   Observed zeros: 31\n  Predicted zeros: 27\n            Ratio: 0.87\n\n\nDie Funktion gibt uns wieder, dass wir vermutlich eine Zeroinflation vorliegen haben. Das können wir aber Modellieren. Um eine Zeroinflation ohne Overdispersion zu modellieren nutzen wir die Funktion zeroinfl() aus dem R Paket {pscl}. Der erste Teil der Funktion ist leicht erkläret. Wir bauen uns wieder unswer Model zusammen, was wir fitten wollen. Dann kommt aber ein | und mit diesem Symbol | definieren wir, ob wir wissen, woher die Nullen kommen oder aber ob wir die Nullen mit einem zufälligen Prozess modellieren wollen.\nWenn wir das Modell in der Form y ~ f1 + f2 | 1 schreiben, dann nehmen wir an, dass das Übermaß an Nullen in unseren Daten rein zufällig entstanden sind. Wir haben keine Spalte in de Daten, die uns eine Erklärung für die zusätzlichen Nullen liefern würde.\nWir können auch y ~ f1 + f2 | x3 schreiben. Dann haben wir eine Variable x3 in den Daten von der wir glauben ein Großteil der Nullen herrührt. Wir könnten also in unseren Daten annehmen, dass wir den Überschuss an Nullen durch den Regen erhalten haben und damit über die Spalte rain den Exzess an Nullen modellieren.\nMan sollte immer mit dem einfachsten Modell anfangen, deshalb werden wir jetzt einmal ein Modell fitten, dass annimmt, dass die Nullen durch einen uns unbekannten Zufallsprozess entstanden sind.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_infl_intercept_fit &lt;- zeroinfl(lizard ~ grp + pop + rain | 1, \n                                           data = lizard_zero_tbl) \n\n\nWir schauen uns das Modell dann wieder einmal an und sehen eine Zweiteilung der Ausgabe. In dem oberen Teil der Ausgabe wird unsere Anzahl an Eidechsen modelliert. In dem unteren Teil wird der Anteil der Nullen in den Daten modelliert. Daher können wir über Variablen in dem Zero-Inflation Block keine Aussagen über die Anzahl an Eidechsen treffen. Variablen tauchen nämlich nur in einem der beiden Blöcke auf.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_infl_intercept_fit |&gt; \n  model_parameters(exponentiate = TRUE)\n\n\n# Fixed Effects\n\nParameter   |  IRR |   SE |       95% CI |     z |      p\n---------------------------------------------------------\n(Intercept) | 1.06 | 0.31 | [0.60, 1.87] |  0.22 | 0.830 \ngrp [cover] | 2.03 | 0.51 | [1.25, 3.31] |  2.84 | 0.005 \npop [far]   | 2.59 | 0.67 | [1.56, 4.31] |  3.67 | &lt; .001\nrain [dry]  | 0.31 | 0.10 | [0.17, 0.56] | -3.82 | &lt; .001\nrain [wet]  | 0.14 | 0.06 | [0.06, 0.31] | -4.73 | &lt; .001\n\n# Zero-Inflation\n\nParameter   | Odds Ratio |   SE |       95% CI |     z |     p\n--------------------------------------------------------------\n(Intercept) |       0.11 | 0.11 | [0.02, 0.74] | -2.26 | 0.024\n\n\nAls erstes beobachten wir einen größeren Effekt der Variable grp. Das ist schon mal ein spannender Effekt. An der Signifikanz hat scih nicht viel geändert. Wir werden am Ende des Kapitels einmal alle Modell für die Modellierung der Zeroinflation vergleichen.\nNun könnte es auch sein, dass der Effekt der vielen Nullen in unserer Variable rain verborgen liegt. Wenn es also regnet, dann werden wir viel weniger Eidechsen beoabchten. Nehmen wir also rain als ursächliche Variable mit in das Modell für die Zeroinflation.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_infl_rain_fit &lt;- zeroinfl(lizard ~ grp + pop | rain, \n                                      data = lizard_zero_tbl)\n\n\nWieder schauen wir uns einmal die Ausgabe des Modells einmal genauer an.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_infl_rain_fit |&gt; model_parameters(exponentiate = TRUE)\n\n\n# Fixed Effects\n\nParameter   |  IRR |   SE |       95% CI |    z |     p\n-------------------------------------------------------\n(Intercept) | 1.13 | 0.34 | [0.63, 2.03] | 0.42 | 0.677\ngrp [cover] | 1.60 | 0.42 | [0.95, 2.67] | 1.77 | 0.077\npop [far]   | 1.84 | 0.51 | [1.07, 3.18] | 2.20 | 0.028\n\n# Zero-Inflation\n\nParameter   | Odds Ratio |     SE |          95% CI |     z |     p\n-------------------------------------------------------------------\n(Intercept) |       0.04 |   0.08 | [0.00,    2.09] | -1.60 | 0.109\nrain [dry]  |      27.93 |  59.03 | [0.44, 1758.19] |  1.58 | 0.115\nrain [wet]  |      83.69 | 178.35 | [1.28, 5452.98] |  2.08 | 0.038\n\n\nEs ändert sich einiges. Zum einen erfahren wir, dass der Regen anscheined doch viele Nullen in den Daten produziert. Wir haben ein extrem hohes \\(OR\\) für die Variable rain. Die Signifikanz ist jedoch eher gering. Wir haben nämlich auch eine sehr hohe Streuung mit den großen \\(OR\\) vorliegen. Au der anderen Seite verlieren wir jetzt auch die Signifikanz von unseren Habitaten und dem Standort der Population. Nur so mäßig super dieses Modell.\nWir können jetzt natürlich auch noch den Standort der Population mit in den Prozess für die Entstehung der Nullen hineinnehmen. Wir schauen uns dieses Modell aber nicht mehr im Detail an, sondern dann nur im Vergleich zu den anderen Modellen.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_infl_rain_pop_fit &lt;- zeroinfl(lizard ~ grp | rain + pop, \n                                          data = lizard_zero_tbl)\n\n\nDie Gefahr besteht immer, das man sich an die Wand modelliert und vor lauter Modellen die Übersicht verliert. Neben der Zeroinflation müssen wir ja auch schauen, ob wir eventuell eine Overdispersion in den Daten vorliegen haben. Wenn das der Fall ist, dann müsen wir nochmal überlegen, was wir dann machen. Wir testen nun auf Ovrdisprsion in unserem ursprünglichen Poissonmodell mit der Funktion check_overdispersion().\n\n\nR Code [zeigen / verbergen]\ncheck_overdispersion(lizard_fit)\n\n\n# Overdispersion test\n\n       dispersion ratio =  1.359\n  Pearson's Chi-Squared = 74.743\n                p-value =  0.039\n\n\nTja, und so erfahren wir, dass wir auch noch Overdispersion in unseren Daten vorliegen haben. Wir müsen also beides Modellieren. Einmal modellieren wir die Zeroinflation und einmal die Overdispersion. Wir können beides in einem negativen binominalen Modell fitten. Auch hier hilft die Funktion zeroinfl() mit der Option dist = negbin. Mit der Option geben wir an, dass wir eine negative binominal Verteilungsfamilie wählen. Damit können wir dann auch die Ovrdispersion in unseren Daten modellieren.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_nb_intercept_fit &lt;- zeroinfl(lizard ~ grp + rain + pop | 1, \n                                         dist = \"negbin\", data = lizard_zero_tbl)\n\n\nDann schauen wir usn einmal das Modell an. Zum einen sehen wir, dass der Effekt ähnlich groß ist, wie bei dem Intercept Modell der Funktion zeroinfl. Auch bleiben die Signifikanzen ähnlich.\n\n\nR Code [zeigen / verbergen]\nlizard_zero_nb_intercept_fit |&gt; model_parameters(exponentiate = TRUE)\n\n\n# Fixed Effects\n\nParameter   |  IRR |   SE |       95% CI |     z |      p\n---------------------------------------------------------\n(Intercept) | 1.06 | 0.31 | [0.60, 1.87] |  0.22 | 0.830 \ngrp [cover] | 2.03 | 0.51 | [1.25, 3.31] |  2.84 | 0.005 \nrain [dry]  | 0.31 | 0.10 | [0.17, 0.56] | -3.82 | &lt; .001\nrain [wet]  | 0.14 | 0.06 | [0.06, 0.31] | -4.73 | &lt; .001\npop [far]   | 2.59 | 0.67 | [1.56, 4.31] |  3.67 | &lt; .001\n\n# Zero-Inflation\n\nParameter   | Odds Ratio |   SE |       95% CI |     z |     p\n--------------------------------------------------------------\n(Intercept) |       0.11 | 0.11 | [0.02, 0.74] | -2.26 | 0.024\n\n\nNun haben wir vier Modelle geschätzt und wolen jetzt wissen, was ist das beste Modell. Dafür hilft usn dann eine Gegenüberstellung der Modelle mit der Funktion modelsummary(). Wir könnten die Modelle auch gegeneinander statistsich Testen, aber hier behalten wir uns einmal den beschreibenden Vergleich vor. In Tabelle 55.4 sehen wir einmal die vier Modelle nebeneinander gestellt. Für eine bessere Übrsicht, habe ich aus allen Modellen den Intercept entfernt.\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"ZeroInfl Intercept\" = lizard_zero_infl_intercept_fit,\n                 \"ZeroInfl rain\" = lizard_zero_infl_rain_fit,\n                 \"ZeroInfl rain+pop\" = lizard_zero_infl_rain_pop_fit,\n                 \"NegBinom intercept\" = lizard_zero_nb_intercept_fit),\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\", \n                           \"t = {statistic}\",\n                           \"p = {p.value}\"),\n             coef_omit = \"Intercept\", \n             exponentiate = TRUE)\n\n\n\n\nTabelle 55.4— Modellvergleich mit den vier Modellen. Wir schauen in wie weit sich die Koeffizienten und Modelgüten für die einzelnen Modelle im direkten Vergleich zum vollen Modell verändert haben.\n\n\n\n \n\n  \n    \n    \n    tinytable_1fl3y40azkyndl7o2h42\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                ZeroInfl Intercept\n                ZeroInfl rain\n                ZeroInfl rain+pop\n                NegBinom intercept\n              \n        \n        \n        \n                \n                  count_grpcover\n                  2.031         \n                  1.595            \n                  1.611                \n                  2.031         \n                \n                \n                                \n                  [1.245, 3.313]\n                  [0.951, 2.675]   \n                  [0.912, 2.845000e+00]\n                  [1.245, 3.313]\n                \n                \n                                \n                  s.e. = 0.507  \n                  s.e. = 0.421     \n                  s.e. = 0.468         \n                  s.e. = 0.507  \n                \n                \n                                \n                  t = 2.839     \n                  t = 1.771        \n                  t = 1.642            \n                  t = 2.839     \n                \n                \n                                \n                  p = 0.005     \n                  p = 0.077        \n                  p = 0.101            \n                  p = 0.005     \n                \n                \n                  count_popfar  \n                  2.591         \n                  1.844            \n                                       \n                  2.591         \n                \n                \n                                \n                  [1.558, 4.310]\n                  [1.069, 3.183]   \n                                       \n                  [1.558, 4.311]\n                \n                \n                                \n                  s.e. = 0.673  \n                  s.e. = 0.513     \n                                       \n                  s.e. = 0.673  \n                \n                \n                                \n                  t = 3.667     \n                  t = 2.199        \n                                       \n                  t = 3.667     \n                \n                \n                                \n                  p = &lt;0.001    \n                  p = 0.028        \n                                       \n                  p = &lt;0.001    \n                \n                \n                  count_raindry \n                  0.308         \n                                   \n                                       \n                  0.308         \n                \n                \n                                \n                  [0.168, 0.564]\n                                   \n                                       \n                  [0.168, 0.564]\n                \n                \n                                \n                  s.e. = 0.095  \n                                   \n                                       \n                  s.e. = 0.095  \n                \n                \n                                \n                  t = -3.816    \n                                   \n                                       \n                  t = -3.816    \n                \n                \n                                \n                  p = &lt;0.001    \n                                   \n                                       \n                  p = &lt;0.001    \n                \n                \n                  count_rainwet \n                  0.135         \n                                   \n                                       \n                  0.135         \n                \n                \n                                \n                  [0.059, 0.310]\n                                   \n                                       \n                  [0.059, 0.310]\n                \n                \n                                \n                  s.e. = 0.057  \n                                   \n                                       \n                  s.e. = 0.057  \n                \n                \n                                \n                  t = -4.726    \n                                   \n                                       \n                  t = -4.726    \n                \n                \n                                \n                  p = &lt;0.001    \n                                   \n                                       \n                  p = &lt;0.001    \n                \n                \n                  zero_raindry  \n                                \n                  27.933           \n                  98.197               \n                                \n                \n                \n                                \n                                \n                  [0.444, 1758.190]\n                  [0.000, 7.612076e+07]\n                                \n                \n                \n                                \n                                \n                  s.e. = 59.034    \n                  s.e. = 679.419       \n                                \n                \n                \n                                \n                                \n                  t = 1.576        \n                  t = 0.663            \n                                \n                \n                \n                                \n                                \n                  p = 0.115        \n                  p = 0.507            \n                                \n                \n                \n                  zero_rainwet  \n                                \n                  83.692           \n                  402.413              \n                                \n                \n                \n                                \n                                \n                  [1.285, 5452.976]\n                  [0.000, 4.188183e+08]\n                                \n                \n                \n                                \n                                \n                  s.e. = 178.352   \n                  s.e. = 2844.758      \n                                \n                \n                \n                                \n                                \n                  t = 2.077        \n                  t = 0.848            \n                                \n                \n                \n                                \n                                \n                  p = 0.038        \n                  p = 0.396            \n                                \n                \n                \n                  zero_popfar   \n                                \n                                   \n                  0.148                \n                                \n                \n                \n                                \n                                \n                                   \n                  [0.022, 1.000000e+00]\n                                \n                \n                \n                                \n                                \n                                   \n                  s.e. = 0.144         \n                                \n                \n                \n                                \n                                \n                                   \n                  t = -1.960           \n                                \n                \n                \n                                \n                                \n                                   \n                  p = 0.050            \n                                \n                \n                \n                  Num.Obs.      \n                  60            \n                  60               \n                  60                   \n                  60            \n                \n                \n                  R2            \n                  0.620         \n                  0.477            \n                  0.454                \n                  0.620         \n                \n                \n                  R2 Adj.       \n                  0.585         \n                  0.449            \n                  0.435                \n                  0.585         \n                \n                \n                  AIC           \n                  157.3         \n                  167.2            \n                  167.4                \n                  159.3         \n                \n                \n                  BIC           \n                  169.8         \n                  179.8            \n                  180.0                \n                  173.9         \n                \n                \n                  RMSE          \n                  1.27          \n                  1.27             \n                  1.32                 \n                  1.27          \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\n\n\n\nDie beiden Intercept Modelle haben die kleinsten \\(AIC\\)-Werte der vier Modelle. Darüber hinaus haben dann beide Modelle auch die höchsten \\(R^2_{adj}\\) Werte. Beide Modelle erklären also im Verhältnis viel Varianz mit 58.5%. Auch ist der \\(RMSE\\) Wert als Fehler bei beiden Modellen am kleinsten. Damit haben wir die Qual der Wahl, welches Modell wir nehmen. Ich würde das negative binominal Modell nehmen. Wir haben ins unseren Daten vermutlich eine Zeroinflation sowie eine Overdispersion vorliegen. Daher bietest es sich an, beides in einer negativen binominalen Regression zu berücksichtigen. Zwar sind die beiden Intercept Modelle in diesem Beispielfall von den Koeffizienten fast numerisch gleich, aber das hat eher mit dem reduzierten Beispiel zu tun, als mit dem eigentlichen Modell. In unserem Fall ist die Overdispersion nicht so extrem.\nWie sehe den unser negative binominal Modell aus, wenn wir mit dem Modell einmal die zu erwartenden Eidechsen vorhersagen würden? Auch das kann helfen um abzuschätzen, ob das Modelle einigermaßen funktioniert hat. Wir haben ja hier den Vorteil, dass wir nur mit kategorialen Daten arbeiten. Wir haben keine kontiniuerlichen Variablen vorliegen und darüber hinaus auch nicht so viele Variablen insgesamt.\nDaher bauen wir uns mit expand_grid() erstmal einen Datensatz, der nur aus den Faktorkombinationen besteht. Wir haben also nur eine Beobachtung je Faktorkombination. Danach nutzen wir die Daten einmal in der Funktion predict() um uns die vorhergesagten Eidechsen nach dem gefitten Modell wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nnewdata_tbl &lt;- expand_grid(grp = factor(1:2, labels = c(\"open\", \"cover\")),\n                           rain = factor(1:3, labels = c(\"no\", \"dry\", \"wet\")),\n                           pop = factor(1:2, labels = c(\"near\", \"far\")))\n\npred_lizards &lt;- predict(lizard_zero_nb_intercept_fit, newdata = newdata_tbl) \n  \nnewdata_tbl &lt;- newdata_tbl |&gt; \n  mutate(lizard = pred_lizards)\n\n\nNachdem wir in dem Datensatz newdata_tbl nun die vorhergesagten Eidechsen haben, können wir uns jetzt in der Abbildung 55.7 die Zusammenhänge nochmal anschauen.\n\n\nR Code [zeigen / verbergen]\nggplot(newdata_tbl, aes(x = rain, y = lizard, colour = grp, group = grp)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~ pop) +\n  labs(x = \"Feuchtigkeit nach Regen\", y = \"Anzahl der gezählten Eidechsen\",\n       color = \"Gruppe\") +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 55.7— Scatterplot der vorhergesagten Eidechsen in den Habitaten (grp), der Feuchtigkeit des Bodens nach Regen und dem Abstand zur nächsten Ortschaft.\n\n\n\n\n\nWir erkennen, dass mit der Erhöhung der Feuchtigkeit die Anzahl an aufgefundenen Eidechsen sinkt. Der Effekt ist nicht mehr so stark, wenn es schon einmal geregnet hat. Ebenso macht es einen Unterschied, ob wir nahe einer Siedlung sind oder nicht. Grundsätzlich finden wir immer mehr Eidechsen in geschützten Habitaten als in offenen Habitaten.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#sec-mult-comp-pois-reg",
    "href": "stat-modeling-poisson.html#sec-mult-comp-pois-reg",
    "title": "55  Poisson Regression",
    "section": "55.7 Gruppenvergleich",
    "text": "55.7 Gruppenvergleich\nHäufig ist es ja so, dass wir das Modell für die Poisson Regression nur schätzen um dann einen Gruppenvergleich zu rechnen. Das heißt, dass es uns interessiert, ob es einen Unterschied zwischen den Leveln eines Faktors gegeben dem Outcome \\(y\\) gibt. Da wir hier in unserem Beispiel zu den Flusshechten keine Gruppe drin haben, zeige ich dir das Prinzip einmal an einem ausgedachten Datensatz. Wir nehmen hier einen Datensatz zu Katzen-, Hunde- und Fuchsflöhen. Dabei erstellen wir uns einen Datensatz mit mittleren Anzahlen an Flöhen pro Tierart. Ich habe jetzt eine mittlere Flohanzahl von \\(10\\) Flöhen bei den Katzen, eine mittlere Anzahl von \\(30\\) Flöhen bei den Hunden und eine mittlere Anzahl von \\(10\\) Flöhen bei den Füchsen gewählt. Wir generieren uns jeweils \\(20\\) Beobachtungen je Tierart. Damit haben wir dann einen Datensatz zusammen, den wir nutzen können um einmal die Ergebnisse eines Gruppenvergleiches mit Zähldaten zu verstehen.\n\n\nR Code [zeigen / verbergen]\nset.seed(20231202)\nn_rep &lt;- 20\nflea_count_tbl &lt;- tibble(animal = gl(3, n_rep, labels = c(\"cat\", \"dog\", \"fox\")),\n                         count = round(c(rnorm(n_rep, 20, 1), \n                                         rnorm(n_rep, 30, 1), \n                                         rnorm(n_rep, 10, 1))))\n\n\nWenn du gerade hierher gesprungen bist, nochmal das simple Modell für unseren Gruppenvergleich unter einer Poisson Regression. Wir haben hier nur einen Faktor animal mit in dem Modell. Am Ende des Abschnitts findest du dann noch ein Beispiel mit zwei Faktoren zu Thripsen auf Apfelbäumen. Wir modellieren hier eigentlich nicht die Zähldaten an sich, sondern die Raten. Du wirst das aber gleich bei der Ausgabe von emmeans() sehen.\n\n\nR Code [zeigen / verbergen]\npois_fit &lt;- glm(count ~ animal, data = flea_count_tbl, family = \"poisson\") \n\n\nEigentlich ist es recht einfach, wie wir anfangen. Wir rechnen jetzt als erstes die ANOVA. Hier müssen wir dann einmal den Test angeben, der gerechnet werden soll um die p-Werte zu erhalten. Dann nutze ich noch die Funktion model_parameters() um eine schönere Ausgabe zu erhalten.\n\n\nR Code [zeigen / verbergen]\npois_fit |&gt; \n  anova(test = \"Chisq\") |&gt; \n  model_parameters(drop = \"NULL\")\n\n\nParameter | df | Deviance | df (error) | Deviance (error) |      p\n------------------------------------------------------------------\nanimal    |  2 |   205.42 |         57 |             3.20 | &lt; .001\n\nAnova Table (Type 1 tests)\n\n\nIm Folgenden nutzen wir das R Paket {emmeans} wie folgt. Wenn wir die mittleren Anzahlen benötigen, dann müssen wir die Option type = \"response\" verwenden. Sonst würdest du Werte auf der Link-Skala wiederbekommen, die dir hier nicht helfen. Ich nutze später die emmeans Ausgabe um ein Säulendiagramm mit den mittleren Anzahlen zu erstellen. Wir du gleich sehen wirst, werden wir aber nicht die Anzahlen vergleichen sondern die Raten in den jeweiligen Gruppen.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- pois_fit |&gt; \n  emmeans(~ animal, type = \"response\")\nemm_obj\n\n\n animal rate    SE  df asymp.LCL asymp.UCL\n cat    20.1 1.002 Inf     18.23      22.2\n dog    30.1 1.227 Inf     27.79      32.6\n fox    10.2 0.714 Inf      8.89      11.7\n\nConfidence level used: 0.95 \nIntervals are back-transformed from the log scale \n\n\nJetzt steht hier zwar rate aber was ist das denn nun? Dafür berechnen wir mal die Mittelwerte der Anzahlen für die drei Tierarten über die Funktion summarise(). Dann vergleichen wir einmal die Ausgaben und schauen, was wir in emmeans() berechnet haben.\n\n\nR Code [zeigen / verbergen]\nflea_count_tbl |&gt; \n  group_by(animal) |&gt; \n  summarise(mean_count = mean(count))\n\n\n# A tibble: 3 × 2\n  animal mean_count\n  &lt;fct&gt;       &lt;dbl&gt;\n1 cat          20.1\n2 dog          30.1\n3 fox          10.2\n\n\nWunderbar, es sind die Mittelwerte der Anzahlen, die in der Spalte rate in der Ausgabe von emmeans() stehen. Damit können wir dann arbeiten und die Ausgabe nutzen um ein Säulendigramm zu erstellen. Bitte schaue für die Umsetzung in das Beispiel am Ende des Abschnitts. Da zeige ich dir dann wie du ein Säulendigramm zu den Anzahlen von Thripsen auf Apfelbäumen erstellst.\nWenn du die mittleren Anzahlen pro Tierart jetzt für jede Tierart testen willst, dann erhälst du aber keinen Mittelwertsunterschied der Anzahlen, sondern eine Rate. Rechnen wir aber erstmal den paarweisen Vergleich und schauen uns dann an, was wir erhalten haben. Wir kriegen am Ende wiederum einen Vergleich von Wahrscheinlichkeiten, aber eben hier von Raten. Wie immer, es kommt darauf an, was du willst. Hier einmal die paarweisen Vergleiche, darunter dann gleich das compact letter display.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  pairs(adjust = \"bonferroni\")\n\n\n contrast  ratio    SE  df null z.ratio p.value\n cat / dog 0.668 0.043 Inf    1  -6.269  &lt;.0001\n cat / fox 1.971 0.169 Inf    1   7.891  &lt;.0001\n dog / fox 2.951 0.239 Inf    1  13.358  &lt;.0001\n\nP value adjustment: bonferroni method for 3 tests \nTests are performed on the log scale \n\n\nOkay, jetzt haben wir statt Raten also eine Ratio, also ein Verhältnis von Raten. Das schauen wir uns doch gleich mal in dem Beispiel an. Wir rechnen also einmal die mittlere Anzahl für jede Tierart durch die entsprechende andere mittlere Anzahl der anderen Tierart. Wir erhalten also folgende Ratios der mittleren Anzahlen.\n\\[\n\\cfrac{cat}{dog} = \\cfrac{20.1}{30.1} = 0.67\n\\]\n\\[\n\\cfrac{cat}{fox} = \\cfrac{20.1}{10.2} = 1.97\n\\]\n\\[\n\\cfrac{dog}{fox} = \\cfrac{30.1}{10.2} = 2.95\n\\]\nWie interpretieren wir jetzt die Ratios? Eigentlich ist das intuitiver als man auf den ersten Blick denkt. Wir haben zum Beispiel fast doppelt so viele Flöhe bei Katzen wie bei Füchsen. Die Anzahl von Hundeflöhen ist fast dreimal so hoch wie die Anzahl an Fuchsflöhen. Wir haben fast nur halb so viele Flöhe auf Katzen gefunden als bei den Hunden. Damit können wir dann schon arbeiten und eine Aussage treffen.\nUnd fast am Ende können wir uns auch das compact letter display erstellen. Auch hier nutzen wir wieder die Funktion cld() aus dem R Paket {multcomp}. Hier erhälst du dann die Information über die mittlere Anzahl der jeweiligen Tierarten und ob sich die mittlere Anzahl unterscheidet. Ich nutze dann die Ausgabe von emmeans() um mir dann direkt das Säulendiagramm mit den Fehlerbalken und dem compact letter display zu erstellen. Mehr dazu dann im Kasten weiter unten zu dem Beispiel zu Thripsenanzahl auf Apfelbäumen.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt;\n  cld(Letters = letters, adjust = \"none\")\n\n\n animal rate    SE  df asymp.LCL asymp.UCL .group\n fox    10.2 0.714 Inf      8.89      11.7  a    \n cat    20.1 1.002 Inf     18.23      22.2   b   \n dog    30.1 1.227 Inf     27.79      32.6    c  \n\nConfidence level used: 0.95 \nIntervals are back-transformed from the log scale \nTests are performed on the log scale \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nAuch hier sehen wir, dass sich alle drei Gruppen signifikant unterschieden, keine der Tierarten teilt sich einen Buchstaben, so dass wir hier von einem Unterschied zwischen den mittleren Anzahlen an Flöhen auf den drei Tierarten ausgehen können.\n\n\n\n\n\n\nOffset in einer Poisson Regression\n\n\n\nBei einem geplanten Experiment zählen wir meist in festgelegten Zeiteinheiten oder aber unser \\(n\\) ist vorgeben. Jetzt kann es aber sein, dass wir nicht mit festen Zeitintervallen oder aber einer Fallzahl zählen. Beispielsweise können wir die Anzahl der Baumarten in einem Wald zählen: Ereignisse (eng. event) wären Baumbeobachtungen, die Exposition (eng. exposure) wäre eine Flächeneinheit und die Rate wäre die Anzahl der Arten pro Flächeneinheit. Wir können die Sterberaten in geografischen Gebieten als die Anzahl der Todesfälle geteilt durch die Personenjahre modellieren. Allgemeiner ausgedrückt können Ereignisraten als Ereignisse pro Zeiteinheit berechnet werden, wobei das Beobachtungsfenster für jede Einheit variieren kann. In diesen Beispielen ist die Exposition jeweils eine Einheit Fläche, Personenjahre und Zeiteinheit. So sollten beispielsweise sechs Fälle innerhalb eines Jahres nicht den gleichen Wert haben wie sechs Fälle innerhalb von 10 Jahren. In der Poisson-Regression wird dies als Offset behandelt. Mehr dazu dann gerne im Wikipediartikel zu “Exposure” and offset oder aber die Antwort When to use an offset in a Poisson regression?.\nIn {emmeans} können wir Modelle mit Offset relativ einfach modellieren. Dazu nutzen wir die Funktion offset() in unserem glm() Modell. Aber zuerst einmal ein Spieldatensatz. Wir haben wir unseren Faktor Tierart und dann aber noch das Alter als Faktor mit zwei Stufen. Wir haben jetzt aber nicht immer die gleiche Anzahl an Hunden und Katzen sowie Füchsen ausgezählt. Unsere Anzahl an Flöhen basiert also auf einer anderen \\(n\\) Anzahl. Die Anzahl \\(n\\) modellieren wir dann als offset().\n\n\nR Code [zeigen / verbergen]\ntoy_count_tbl &lt;- tibble(n = c(500, 1200, 100, 400, 500, 300),\n                        animal = factor(rep(1:3,2), labels = c(\"cat\",\"dog\",\"fox\")),\n                        age = gl(2, 3),\n                        count = c(42, 37, 1, 101, 73, 14))\n\n\nWir nehmen die Anzahl an ausgezählten Tieren dann als Offset mit Logarithmus in das Modell. Deshalb steht dann da auch log(n) im Offset.\n\n\nR Code [zeigen / verbergen]\ntoy_count_fit &lt;- glm(count ~ animal + age + offset(log(n)), \n                     data = toy_count_tbl, family = \"poisson\")\n\n\nDann können wir uns einmal das Modell anschauen, wie {emmeans} den Vergleich rechnen würde.\n\n\nR Code [zeigen / verbergen]\nref_grid(toy_count_fit)\n\n\n'emmGrid' object with variables:\n    animal = cat, dog, fox\n    age = 1, 2\n    n = 500\nTransformation: \"log\" \n\n\nDer Offset ist also grob \\(log(500) \\approx 5.97\\). Das stimmt numerisch nicht hundertprozentig, hat aber noch mit einer internen Korrektur zu tun, die uns hier aber nicht weiter interessiert. Das Modell können wir dann wie gewohnt in emmeans() stecken und dann weiter rechnen. In dem Modell wird dann berücksichtigt, dass sich die Anzahlen für das Exposure, also dem Nenner der Raten, unterscheiden.\n\n\nDamit sind wir einmal mit unserem Gruppenvergleich für die Poisson Regression auf Zähldaten durch. In dem Kapitel zu den Multiple Vergleichen oder Post-hoc Tests findest du dann noch mehr Inspirationen für die Nutzung von {emmeans}. Hier war es dann die Anwendung auf Zähldaten zusammen mit einem Faktor. Wenn du dir das Ganze nochmal an einem Beispiel für zwei Faktoren anschauen möchtest, dann findest du im folgenden Kasten ein Beispiel für die Auswertung von Thripsen auf Apfelbäumen nach Gabe verschiedener Dosen eines Insektizids und Zeitpunkten.\n\n\n\n\n\n\nAnwendungsbeispiel: Zweifaktorieller Gruppenvergleich für Thripsenbefall\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit jungen Apfelbäumen an. Wir haben uns in diesem Experiment verschiedene Dosen trt von einem Insektizid aufgebracht sowie verschiedene Startanzahlen von Raubmilben als biologische Alternative untersucht. Dann haben wir noch fünf Zeitpunkte bestimmt, an denen wir die Anzahl an Thripsen auf den Blättern gezählt haben. Wir haben nicht die Blätter per se gezählt sondern Fallen waagerecht aufgestellt. Dann haben wir geschaut, wie viele Thripsen wir über above und unter below von den Fallen gefunden haben. In unserem Fall beschränken wir uns auf die obere Anzahl an Thripsen und schauen uns auch nur die Behandlung mit dem Insektizid an.\n\n\nR Code [zeigen / verbergen]\ninsects_tbl &lt;- read_excel(\"data/insects_count.xlsx\") |&gt; \n  mutate(timepoint = factor(timepoint, labels = c(\"1 Tag\", \"4 Tag\", \"7 Tag\", \"11 Tag\", \"14 Tag\")),\n         rep = as_factor(rep),\n         trt = as_factor(trt)) |&gt;\n  select(timepoint, trt, thripse = thripse_above) |&gt; \n  filter(trt %in% c(\"10ml\", \"30ml\", \"60ml\"))\n\n\nDann können wir auch schon die Poisson Regression mit glm() rechnen. Auch hier wieder darauf achten, dass wir dann als Option family = poisson oder family = quasipoisson wählen. Es hängt jetzt davon ab, ob du in deinen Daten Overdispersion vorliegen hast oder nicht. In den beiden folgenden Tabs, rechne ich dann mal beide Modelle.\n\nfamily = poissonfamily = quasipoisson\n\n\nAls Erstes rechnen wir eine normale Poisson Regression und schauen einmal, ob wir Overdispersion vorliegen haben. Wenn wir Overdispersion vorliegen haben, dann können wir keine Poisson Regression rechnen, sondern müssen auf eine Quasipoisson Regression ausweichen. Das ist aber sehr einfach, wie du im anderen Tab sehen wirst.\n\n\nR Code [zeigen / verbergen]\ninsects_poisson_fit &lt;- glm(thripse ~ trt + timepoint + trt:timepoint, \n                           data = insects_tbl, \n                           family = poisson) \n\n\nBevor wir uns das Modell mit summary() überhaupt anschauen, wollen wir erstmal überprüfen, ob wir überhaupt Overdispersion vorliegen haben. Wenn ja, dann können wir uns die summary() hier gleich sparen. Also einmal geguckt, was die Overdispersion macht.\n\n\nR Code [zeigen / verbergen]\ninsects_poisson_fit |&gt; check_overdispersion()\n\n\n# Overdispersion test\n\n       dispersion ratio =   23.498\n  Pearson's Chi-Squared = 3172.179\n                p-value =  &lt; 0.001\n\n\nOverdispersion detected.\n\n\nWir haben sehr starke Overdispersion vorliegen und gehen daher rüber in den anderen Tab und rechnen eine Quasipoisson Regression. Nur wenn du keine Overdispersion vorliegen hast, dann kannst du eine eine Poisson Regression rechnen.\n\n\nEntweder hast du in deinen Daten eine Overdispersion gefunden oder aber du meinst, es wäre besser gleich eine Quasipoisson zu rechnen. Beides ist vollkommen in Ordnung. Ich rechne meistens immer eine Quasipoisson und schaue dann nur, ob die Overdispersion sehr groß war. In den seltensten Fällen hast du eine Overdispersion vorliegen, die eher klein ist. Daher mache ich erst die Lösung und schaue, ob das Problem dann da war.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit &lt;- glm(thripse ~ trt + timepoint + trt:timepoint, \n                                data = insects_tbl, \n                                family = quasipoisson) \n\n\nDu kannst in der summary() Ausgabe direkt sehen, ob du Overdispersion vorliegen hast. Du musst nur relativ weit unten schauen, was zu dem Dispersion parameter in den Klammern geschrieben ist. Wenn da eine Zahl größer als 1 drin steht, dann hast du Overdispersion.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; \n  summary()\n\n\n\nCall:\nglm(formula = thripse ~ trt + timepoint + trt:timepoint, family = quasipoisson, \n    data = insects_tbl)\n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              3.861686   0.211964  18.219   &lt;2e-16 ***\ntrt30ml                 -0.565849   0.376336  -1.504   0.1350    \ntrt60ml                 -1.058326   0.432830  -2.445   0.0158 *  \ntimepoint4 Tag          -0.448440   0.339528  -1.321   0.1888    \ntimepoint7 Tag          -0.001914   0.299907  -0.006   0.9949    \ntimepoint11 Tag         -0.121854   0.309323  -0.394   0.6942    \ntimepoint14 Tag         -0.177363   0.313970  -0.565   0.5731    \ntrt30ml:timepoint4 Tag   0.476840   0.553141   0.862   0.3902    \ntrt60ml:timepoint4 Tag  -0.579968   0.809916  -0.716   0.4752    \ntrt30ml:timepoint7 Tag   0.154299   0.519303   0.297   0.7668    \ntrt60ml:timepoint7 Tag   0.252555   0.585830   0.431   0.6671    \ntrt30ml:timepoint11 Tag  0.121854   0.537661   0.227   0.8210    \ntrt60ml:timepoint11 Tag  0.091083   0.620448   0.147   0.8835    \ntrt30ml:timepoint14 Tag -0.162407   0.575416  -0.282   0.7782    \ntrt60ml:timepoint14 Tag -0.201195   0.670025  -0.300   0.7644    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 23.49807)\n\n    Null deviance: 4263.4  on 149  degrees of freedom\nResidual deviance: 3345.0  on 135  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 5\n\n\nWir haben hier auf jeden Fall Overdispersion vorliegen. Daher nutze ich dann auch das Modell hier mit der Annahme an eine Quasipoissonverteilung. Dann stimmt es auch mit unseren Varianzen und wir produzieren nicht zufällig zu viele signifikante Ergebnisse, die es dann gar nicht gibt.\n\n\n\nIch habe mich gerade in den obigen Tabs für eine Quasipoisson Regression entschieden, da wir Overdispersion vorliegen haben. Damit mache ich dann mit dem insects_quasipoisson_fit Modell weiter. In den beiden folgenden Tabs findest du dann einmal das Ergebnis für die ANOVA und einmal für den Gruppenvergleich mit dem R Paket {emmeans}. Bitte beachte, dass die ANOVA für ein glm()-Objekt nicht ganz gleich wie für ein lm()-Objekt ist. Du kannst aber die ANOVA erstmal ganz normal interpretieren, nur haben wir hier nicht die Möglichkeit ein \\(\\eta^2\\) zu bestimmen. Dann nutzen wir {emmeans} für den Gruppenvergleich. Nochmal, weil wir Overdispersion festgestellt haben, nutzen wir das Objekt insects_quasipoisson_fit mit der Berücksichtigung der Overdispersion.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA und nutzen den \\(\\mathcal{X}^2\\)-Test für die Ermittelung der p-Werte. Wir müssen hier einen Test auswählen, da per Standardeinstellung kein Test gerechnet wird. Wir machen dann die Ausageb nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; \n  anova(test = \"Chisq\") |&gt; \n  model_parameters(drop = \"NULL\")\n\n\nParameter     | df | Deviance | df (error) | Deviance (error) |      p\n----------------------------------------------------------------------\ntrt           |  2 |   730.20 |        147 |          3533.22 | &lt; .001\ntimepoint     |  4 |   112.27 |        143 |          3420.95 | 0.311 \ntrt:timepoint |  8 |    75.93 |        135 |          3345.03 | 0.919 \n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass der Effekt für die Behandlung signifikant ist, jedoch die Zeit und die Interaktion keinen signifikanten Einfluss haben. Wir haben aber also keine Interaktion vorliegen. Daher können wir dann die Analyse gemeinsam über alle Zeitpunkte rechnen.\n\n\nIm Folgenden rechnen wir einmal über alle Faktorkombinationen von trt und timepoint einen Gruppenvergleich. Dafür nutzen wir die Opition trt * timepoint. Wenn du die Analyse getrennt für die Zeitpunkte durchführen willst, dann nutze die Option trt | timepoint. Wir wollen die Wahrscheinlichkeiten für das Auftreten einer Beschädigung von wiedergegeben bekommen, deshalb die Option regrid = \"response. Dann adjustieren wir noch nach Bonferroni und sind fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- insects_quasipoisson_fit |&gt; \n  emmeans(~ trt * timepoint, regrid = \"response\") |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n trt  timepoint rate    SE  df asymp.LCL asymp.UCL .group\n 60ml 4 Tag      5.9  3.72 Inf    -5.029      16.8  a    \n 60ml 14 Tag    11.3  5.15 Inf    -3.825      26.4  ab   \n 60ml 11 Tag    16.0  6.13 Inf    -1.998      34.0  ab   \n 60ml 1 Tag     16.5  6.23 Inf    -1.777      34.8  ab   \n 30ml 14 Tag    19.2  7.08 Inf    -1.572      40.0  ab   \n 60ml 7 Tag     21.2  7.06 Inf     0.483      41.9  ab   \n 30ml 1 Tag     27.0  8.40 Inf     2.356      51.6  ab   \n 30ml 11 Tag    27.0  8.40 Inf     2.356      51.6  ab   \n 30ml 4 Tag     27.8  8.52 Inf     2.782      52.8  ab   \n 10ml 4 Tag     30.4  8.05 Inf     6.725      54.0  ab   \n 30ml 7 Tag     31.4  9.06 Inf     4.849      58.0  ab   \n 10ml 14 Tag    39.8  9.22 Inf    12.748      66.9  ab   \n 10ml 11 Tag    42.1  9.48 Inf    14.258      69.9   b   \n 10ml 7 Tag     47.5 10.07 Inf    17.902      77.0   b   \n 10ml 1 Tag     47.5 10.08 Inf    17.965      77.1   b   \n\nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 15 estimates \nP value adjustment: bonferroni method for 105 tests \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die rate stellt die mittlere Anzahl an Thripsen je Faktorkombination dar. Dann können wir auch das compact letter display anhand der Abbildung interpretieren.\n\n\n\nIn der Abbildung 60.20 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Hier unbedingt SE als den Standardfehler für die Fehlerbalken nutzen, da wir sonst Fehlerbalken größer und kleiner als \\(0\\) erhalten, wenn wir die Standardabweichung nutzen würden. Das ist in unserem Fall nicht so das Problem, aber wenn du eher kleine Anzahlen zählst, kann das schnell zu Werten kleiner Null führen. Wir sehen einen klaren Effekt der Behandlung 60ml. Die Zeit hat keinen Effekt, was ja schon aus der ANOVA klar war, die Säulen sehen für jeden Zeitpunkt vollkommen gleich aus. Gut etwas Unterschied ist ja immer.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = timepoint, y = rate, fill = trt)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Anzahl an Thripsen\", x = \"Messzeitpunkte der Zählungen\",\n       fill = \"Dosis\") +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = .group, y = rate + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = rate-SE, ymax = rate+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 55.8— Säulendigramm der mitleren Zahl der Thripsen aus einer Poisson Regression. Das glm()-Modell berechnet die mittlere Anzahl in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-poisson.html#referenzen",
    "href": "stat-modeling-poisson.html#referenzen",
    "title": "55  Poisson Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nDormann, C. F. (2013). Parametrische Statistik. Springer.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Poisson Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html",
    "href": "stat-modeling-beta.html",
    "title": "56  Beta Regression",
    "section": "",
    "text": "56.1 Genutzte R Pakete\nLetzte Änderung am 25. March 2024 um 08:35:21\nDie Beta Regression. Zuerst ein seltsamer Name, was heißt denn jetzt hier Beta? Und was macht die beta Regression eigentlich? Die Beta Regression beschäftigt sich mit einem prozentualen Outcome und damit mit einem Outcome \\(y\\) welches zwischen 0 und 1 liegt. Dabei ist das Zwischen sehr wichtig. Weder dürfen einzelne Beobachtungen einen Wert von 1 haben noch einen Wert von 0. Dabei ist die Null weit schlimmer, so dass wir hier gerne einen kleinen Betrag auf alle 0 addieren um dann aus dem Schneider zu sein. Sonst ist unser Outcome dadurch gekennzeichnet, dass wir meistens die Wahrscheinlichkeit oder Anteil für ein Ereignis abgebildet haben. Wie oft tritt eine Klauensuche in einem Stall auf? Welchen Anteil machen faulige Erdbeeren aus? Und um auf die Frage vom Anfang zurückzukommen, ein prozentuales Outcome folgt einer Betaverteilung. Deshalb nutzen wir eine Beta Regression um prozentuale Outcomes auszuwerten.\nTeilweise sind diese Arten von Daten, die einer Betaverteilung folgen, eher selten in den Agrawissenschaften. Wir müssen nämlich sehr viele Daten generieren um Prozente zu berechnen. Prozente sind ja immer Anteile an irgendwas. Und so müssen wir dann eine Menge Tiere oder Pflanzen zählen, damit wir auch wirklich eine gute Auflösung kriegen. Wenn du zum Beispiel eine Auflösung von 1% erhalten willst, dann musst du auch einhundert Tiere untersuchen und dann bestimmen wie groß der Anteil an deinem untersuchten Outcome ist. So kann es dann passieren, dass sehr viele Untersuchungen in einer einzigen Zahl förmlich verschwinden. Deshalb werden dann häufig die Anzahlen direkt als Poisson Regression ausgewertet. Aber wie immer gilt, selten ist nicht nie. Deshalb einmal hier die Beta Regression für ein prozentuales Outcome.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom, betareg, car,\n               see, performance, parameters, agridat, mfp,\n               emmeans, multcomp, rcompanion, ggbeeswarm,\n               marginaleffects, nls.multstart, conflicted)\nconflicts_prefer(dplyr::summarise)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\ncb_pal &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n            \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html#daten",
    "href": "stat-modeling-beta.html#daten",
    "title": "56  Beta Regression",
    "section": "56.2 Daten",
    "text": "56.2 Daten\nWie immer schauen wir uns verschiedene Datensätze an, Visualisieren die Zusammenhänge und rechnen dann verschiedene Modelle, die passen könnten. Beginnen möchte ich mit einem Datensatz zu dem Jagederfolg in [%] von Schneefüchsen in verschiedenen Habitaten. Die Daten sind etwas gekürzt, wir haben nur den Jagederfolg und keine Informationen zu den Habitaten. Des Weiteren wollen wir schauen, ob der Jagderfolg der Eisfüche von der standardisierten Schneehöhe in [cm] abhängt. Wir haben hier mehr oder minder die Schneehöhe in dem Habit gemittelt. Der Eisfuchs jagt ja nicht immer an der perfekt gleichen Stelle, wo wir die Schneehöhe kennen.\n\n\nR Code [zeigen / verbergen]\nhunting_tbl &lt;- read_excel(\"data/hunting_fox.xlsx\") |&gt; \n  mutate(proportion = round(success/attempts, 2))\n\n\nIn der Tabelle 56.1 siehst du einen Auszug aus den Daten. Wir haben die Schneehöhe gemessen und geschaut von wie vielen Anläufen attempts eine Maus unter dem Schnee zu fangen erfolgreich war success oder eben ein Fehlschlag fail. Daraud haben wir dann die Erfolgsrate proportion berechnet. Wir haben einfach den Anteil der Erfolge eine Maus zu fangen an den gesamten Versuchen berechnet.\n\n\n\n\nTabelle 56.1— Auszug aus den Daten zu dem Jagderfolg in [%] von Eisfüchsen in abhängigkeit von der Schneehöhe in [cm].\n\n\n\n\n\n\nsnow_height\nattempts\nsuccess\nfail\nproportion\n\n\n\n\n30\n18\n16\n2\n0.89\n\n\n33\n20\n15\n5\n0.75\n\n\n39\n20\n18\n2\n0.9\n\n\n55\n24\n18\n6\n0.75\n\n\n…\n…\n…\n…\n…\n\n\n65\n22\n10\n12\n0.45\n\n\n63\n16\n2\n14\n0.12\n\n\n70\n15\n1\n14\n0.07\n\n\n18\n21\n20\n1\n0.95\n\n\n\n\n\n\n\n\nIm Weiteren schauen wir uns einen Datensatz zu Brokkoli an. Wir wollen hier einmal schauen, ob wir das Zielgewicht von \\(500g\\) erreichen. Wir sind aber daran interessiert die Rate von untergewichtigen Brokkoli möglichst klein zu halten. Deshalb schauen wir uns in dieser Auswertung den Anteil von Brokkoli unter der Zielmarke von \\(500g\\) für zwei Düngezeitpunkte sowie drei Düngestufen an. Wir müssen hier jetzt die Daten etwas mehr aufbereiten, da wir mehr Informationen in den Daten haben als wir wirklich brauchen.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl &lt;- read_excel(\"data/broccoli_weight.xlsx\") |&gt; \n  filter(fert_time %in% c(\"early\", \"late\")) |&gt; \n  mutate(fert_time = factor(fert_time, levels = c(\"early\", \"late\")),\n         fert_amount = as_factor(fert_amount),\n         block = as_factor(block)) |&gt;\n  select(fert_time, fert_amount, block, weight) |&gt; \n  filter(weight &lt; 500) |&gt; \n  mutate(proportion = weight/500) |&gt; \n  select(-weight)\n\n\nIn der Tabelle 56.2 siehst du einmal den Auszug aus den Brokkolidaten. Wir wollen jetzt sehen, ob wir in den Behandlungsfaktoren einen Unterschied bezüglich der Anteile der untergewichtigen Brokkoliköpfe finden. Tendenziell wollen wir eine Kombination finden, die uns natürlich möglichst schwere Köpfe beschert.\n\n\n\n\nTabelle 56.2— Auszug aus dem Daten zu den Zielgewichten von Brokkoli zu zwei Düngezeitpunkten und drei Düngestufen.\n\n\n\n\n\n\nfert_time\nfert_amount\nblock\nproportion\n\n\n\n\nearly\n150\n1\n0.82586\n\n\nearly\n150\n1\n0.55294\n\n\nearly\n150\n1\n0.98314\n\n\nearly\n150\n1\n0.68964\n\n\n…\n…\n…\n…\n\n\nearly\n225\n4\n0.43816\n\n\nearly\n225\n4\n0.86136\n\n\nearly\n225\n4\n0.547\n\n\nearly\n225\n4\n0.80844\n\n\n\n\n\n\n\n\nAbschließend schauen wir nochmal in das R Paket {agridat} und nehmen von dort den Datensatz salmon.bunt welcher eine Pilzinfektion von Weizenlinien beschreibt. Mehr dazu dann auf der Hilfeseite Fungus infection in varieties of wheat in der Vignette zum R Paket. Ich möchte später die Faktoren gen für die genetischen Linien und die Pilzarten bunt für die Anteile der Pilzinfektionen sortiert haben. Das mache ich dann einmal mit der Funktion fct_reorder() welche mir erlaubt einen Faktor nach einer anderen Variable zu sortieren. Wir haben zwei Wiederholungen rep, die auch so nicht helfen. Deshalb mittlere ich mit summarise() über die beiden Wiederholungen die Prozente der Pilzinfektionen des Weizen.\n\n\nR Code [zeigen / verbergen]\ndata(salmon.bunt)\nfungi_tbl &lt;- salmon.bunt |&gt; \n  as_tibble() |&gt; \n  select(gen, bunt, rep, percent = pct) |&gt; \n  mutate(gen = fct_reorder(gen, percent),\n         bunt = fct_reorder(bunt, percent),\n         percent = percent/100 + 0.001) \n\n\nIn der Tabelle 56.3 siehst du dann einmal den Auszug aus unseren Weizendaten mit einer Pilzinfektion. Wir haben 10 genetische Linien sowie 20 Pilzarten vorliegen. Daher ist der Datensatz ziemlich groß, was die Möglichkeiten der Faktorkombinationen angeht.\n\n\n\n\nTabelle 56.3— Auszug aus dem Daten zu den zehn Weizenlinien und den zwanzig Pilzarten. Es wurde der Anteil an infizierten Weizen [%] gemessen.\n\n\n\n\n\n\ngen\nbunt\nrep\npercent\n\n\n\n\nHybrid128\nB1\nR1\n0.867\n\n\nHybrid128\nB2\nR1\n0.765\n\n\nHybrid128\nB3\nR1\n0.95\n\n\nHybrid128\nB4\nR1\n0.911\n\n\n…\n…\n…\n…\n\n\nHussar\nB32\nR2\n0.034\n\n\nHussar\nB51\nR2\n0.001\n\n\nHussar\nB157\nR2\n0.377\n\n\nHussar\nB189\nR2\n0.703\n\n\n\n\n\n\n\n\nDamit habe wir dann einige spannende Datensätze vorliegen, die wir nutzen können um die verschiedenen Aspekte der Beta Regression anzuschauen. Nicht immer muss es ja eine Beta Regression sein, wir haben auch die Möglichkeit unsere Fragestellung mit anderen Modellen eventuell anders oder gar besser zu beantworten.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html#visualisierung",
    "href": "stat-modeling-beta.html#visualisierung",
    "title": "56  Beta Regression",
    "section": "56.3 Visualisierung",
    "text": "56.3 Visualisierung\nAuch hier beginnen wir einmal mit der Visualisierung der Daten. Zuerst schauen wir uns einmal die Daten zu dem Jagderfolg der Eisfüchse in verschiedenen Habitaten in Abhängigkeit zu der Schneehöhe an. Wenn der Schnee zu hoch liegt, werden die Füchse weniger Jagderfolg haben. In der Abbildung 56.1 sehen wir einmal den Jagerfolg von der Schneehöhe aufgetragen. Wir erkennen, dass wir zwar anfänglich eher einen linearen Zusammenhang haben könnten, aber bei höheren Schneedichten dann sehr schnell einen Abfall des Jagderfolges beobachten. Wir schauen uns dann gleich mal verschiedene Modelle an um eine Kurve durch die Punkte zu legen.\n\n\nR Code [zeigen / verbergen]\nhunting_tbl |&gt; \n  ggplot(aes(snow_height, proportion)) +\n  theme_minimal() +\n  geom_point() +\n  labs(y = \"Jagderfolg [%]\", x = \"Standardisierte Schneehöhe [cm]\") +\n  ylim(0, 1)\n\n\n\n\n\n\n\n\nAbbildung 56.1— Zusammenhang zwischen dem Jagederfolg von Eisfüchsen und der Schneehöhe in den jeweiligen beobachteten Habitaten.\n\n\n\n\n\nIn der Abbildung 56.2 sehen wir einmal die Verteilung unser untergewichtigen Brokkoli für die beiden Düngezeitpunkte und Düngemengen. Wir könnten annehmen, dass wir tendenziell bei einer höheren Düngemenge einen größeren Anteil an erreichtem Zielgewicht erhalten. Global betrachtet scheint es aber nicht so große Effekte zu geben. Wir schauen uns diese Beispiel dann einmal für den Gruppenvergleich an.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl |&gt; \n  ggplot(aes(x = fert_amount, y = proportion, color = fert_time)) +\n  theme_minimal() + \n  labs(y = \"[%] erreichtes Zielgewicht\", x = \"Düngemenge [mg/l]\",\n       color = \"Düngezeitpunkt\") +\n  scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +\n  geom_beeswarm(dodge.width = 0.8) +\n  theme(legend.position = \"top\") +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 56.2— Zusammenhang zwischen erreichten Zielgewicht von \\(500g\\) bei Brokkoli [%] und der Düngermenge sowiw dem Düngezeitpunkt.\n\n\n\n\n\nAbschließend schauen wir uns in der Abbildung 56.3 die Heatmap der genetischen Linien und der Art des Pilzes an. Ich habe die Heatmap so erstellt, dass eine viel Infektion rot dargestellt wird und wenig Infektion blau. Durch die Sortierung der Faktoren nach dem Infektionsgrad können wir sehr schön die Linien voneinander unterscheiden. Teilweise werden einige Linien von dem Pilz förmlich aufgefressen während andere Weizenlinien kaum befallen werden. Auch scheinen einige Arten des Pilzen mehr Weizenlinien befallen zu können als andere Pilzarten. So ist die Pilzart B189 extrem erfolgreich bei einer großen Anzahl an Linien. Die Art B1 hingegen kann mehr oder minder nur zwei Weizensorten befallen.\n\n\nR Code [zeigen / verbergen]\nfungi_tbl |&gt; \n  group_by(bunt, gen) |&gt; \n  summarise(percent = mean(percent)) |&gt; \n  ggplot(aes(x = gen, y = bunt, fill = percent)) +\n  theme_minimal() +\n  geom_tile() +\n  scale_fill_gradientn(colors = c(\"#375997\", \"gray\", \"firebrick\"),\n                       breaks = seq(0, 1, 0.1), \n                       limits = c(0, 1)) + \n  labs(y = \"Art des Pilzes\", x = \"Genetische Linie des Weizens\",\n       fill = \"[%] infiziert\")\n\n\n\n\n\n\n\n\nAbbildung 56.3— Sortierte Heatmap der genetischen Linien und der Art des Pilzes. Farbig dargestellt sind die Anteile an infizierten Weizen in [%]. Nach dem Grad der Infektion wurden die Faktoren sortiert um eine bessere Übersicht zu erhalten.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html#fit-des-modells",
    "href": "stat-modeling-beta.html#fit-des-modells",
    "title": "56  Beta Regression",
    "section": "56.4 Fit des Modells",
    "text": "56.4 Fit des Modells\nDann haben wir jetzt unsere Daten und wissen auch grob was in den Daten stecken könnte. Jetzt wollen wir einmal die verschieden Datensätze auswerten. Je nach Fragestellung können wir da verschiedene Modelle nutzen. Wie immer stelle ich auch Alternativen zu der Beta Regression vor. Wir schauen uns zum einen eine einfache Gaussian Regression an, die passt zwar nicht so richtig zu dem Outcome, aber unter bestimmten Voraussetzungen kann die Gaussian Regression Sinn machen. Wenn wir Erfolg/Misserfolg in unseren Daten als Outcome haben, dann können wir auch eine logistische Regression rechnen. Dementsprechend zeige ich die Anwendung auch einmal auf den Eisfuchsdaten, wo wir ja wissen wie oft ein Erfolg und ein Fehlschlag vorgekommen ist.\n\n56.4.1 … mit der Gaussian Regression\nFangen wir also einmal mit der etwas groben Variante an. Wir rechnen einfach eine lineare Regression unter der Annahme das unser Outcome normalverteilt ist. Das stimmt zwar nur begrenzt für eine Wahrscheinlichkeit, die zwischen 0 und 1 liegt, aber rechnen können wir ja erstmal viel. Besonders wenn du Wahrscheinlichkeiten berechnet hast, die nicht sehr viele Nullen und Einsen beinhalten sondern mehr um die 0.5 streuen, dann kann deine Auswertung auch mit einer Gaussian Regression funktionieren. Wie immer kommt es dann auf den Einzelfall an, aber die Gaussian Regression liefert dann eben auch einen sehr gut zu verstehenden und interpretierenden Effektschätzer.\nWir wenden jetzt also einfach mal die Gaussian Regression mit der Funktion lm() auf unsere Daten zu dem Jagderfolg der Eisfüchse an. Wenn du dir nochmal die Abbildung 56.1 anschaust, dann siehst du, dass wir nicht so viele Beobachtungen nah der Eins und der Null haben. Darüber hinaus ist eine wage Linearität zu erkennen. Oder anderherum, die Daten sehen jetzt nicht so schlimm aus, dass wir nicht eine Gerade durch die Punkte legen könnten.\n\n\nR Code [zeigen / verbergen]\nhunting_lm_fit &lt;- lm(proportion ~ snow_height, data = hunting_tbl)\n\n\nDann schauen wir uns einmal die Koeffizienten des Modells einmal an. Wir haben einen Intercept von über Eins, was natürlich keinen Sinn ergibt. Wir können keinen Jagederfolg von über Eins bei einer Schneehöhe von Null haben. Hier sieht man schon, dass das Modell nicht so gut für die Randbereiche funktioniert. Dennoch haben wir einen Abfall durch die Steigung der Schneehöhe vorliegen. Wir erkennen, dass pro Zentimeter mehr Schnee der Jagderfolg um \\(0.0156\\) oder eben \\(1.56\\%\\) signifikant zurückgeht. Das ist ein Ergebnis mit dem wir leben könnten.\n\n\nR Code [zeigen / verbergen]\nhunting_lm_fit \n\n\n\nCall:\nlm(formula = proportion ~ snow_height, data = hunting_tbl)\n\nCoefficients:\n(Intercept)  snow_height  \n    1.36883     -0.01564  \n\n\nWir können uns auch den Effekt der Schneehöhe auf den Jagderfolg einmal mit der Funktion avg_slopes() aus dem R Paket {marginaleffects} wiedergeben lassen. Für eine so simple Gaussion Regression ist der marginale Effekt gleich der Steigung, aber wenn wir gleich ein anderes Modell nehmen, dann wird es schon komplizierter. Mehr dazu dann auf der Hilfeseite zu Marginal Effects Zoo - Slopes wo du dann auch mehr über marginal effects lernen kannst. Wie du dann siehst, erhalten wir hier den gleichen Wert für die Steigung.\n\n\nR Code [zeigen / verbergen]\navg_slopes(hunting_lm_fit)\n\n\n\n        Term    Contrast Estimate Std. Error     z Pr(&gt;|z|)    S   2.5 %\n snow_height mean(dY/dX)  -0.0156    0.00203 -7.72   &lt;0.001 46.3 -0.0196\n  97.5 %\n -0.0117\n\nColumns: term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted \nType:  response \n\n\nSchauen wir einmal wie das Bestimmtheitsmaß \\(R^2\\) aussieht. Hier haben wir einen Wert von \\(0.758\\) und damit können wir durch die Gerade gut \\(75\\%\\) der Varianz erklären. Das ist jetzt nicht der beste Werte und wir schauen uns am Ende nochmal in der Abbildung 56.5 wie die Gerade durch die Punkte läuft.\n\n\nR Code [zeigen / verbergen]\nhunting_lm_fit |&gt; r2()\n\n\n# R2 for Linear Regression\n       R2: 0.758\n  adj. R2: 0.746\n\n\nDas einmal als sehr schneller und kurzer Einwurf der Gaussian Regression auf einem Outcome mit Prozenten. Es ist nicht ideal und weit weg von der Empfehlung. Aber wenn du einen statistischen Engel anfahren willst und mit der Interpretation ganz gut leben kannst, dann ist eine lineare Modellierung nicht so dramatisch. Achtung eben an den Rändern. Du erhälst eben auch schnell mal vorhergesagte Werte außerhalb von den Grenzen einer Wahrscheinlichkeit.\n\n\n56.4.2 … mit einer logistischen Regression\nJa, auch dieses Problem können wir mit einer logistischen Regression angehen. Wenn du auch mal in den anderen Kapiteln geschaut hast, dann wundert es dich vermutlich nicht mehr, dass die logistische Regression außerhalb der Agarwissenschaften zu einer der beliebtesten Analysewerkzeugen gehört. Hier müssen wir aber unser Outcome etwas anders der Funktion glm() für die logistische Regression übergeben. Wir nutzen nämlich dafür das Wilkinson-Rogers Format welches dann den Anteil an Erfolgen an Fehlschlägen beschreibt. Wir schreiben aber in das Modell die konkrete Anzahl an Erfolgen und Fehlschlägen.\n\\[\n(Success|Failure) \\sim x_1 + x_2 + ... + x_p\n\\]\nIn R würden wir dann die zwei Spalten mit der Anzahl an Erfolgen und Fehlschlägen mit cbind() zusammenfassen und in glm() ergänzen. Dieses Format haben wir dann auch bei unseren Eisfüchsen vorliegen. In unseren Daten haben wir ja die Spalte success, welche die Anzahl Jagderfolge beschreibt sowie die Anzahl der Fehlschläge in der Spalte fail. Wichtig ist hier, dass wir wirklich die beiden Spalten mit den jeweiligen Anzahlen haben. Daher würden wir dann in R wie folgt schreiben.\n\n\nR Code [zeigen / verbergen]\nhunting_log_fit &lt;- glm(cbind(success, fail) ~ snow_height, \n                       data = hunting_tbl, family = binomial)\nhunting_log_fit\n\n\n\nCall:  glm(formula = cbind(success, fail) ~ snow_height, family = binomial, \n    data = hunting_tbl)\n\nCoefficients:\n(Intercept)  snow_height  \n    4.80027     -0.08326  \n\nDegrees of Freedom: 20 Total (i.e. Null);  19 Residual\nNull Deviance:      146.7 \nResidual Deviance: 31.9     AIC: 99.35\n\n\nDamit haben wir dann auch unseren Koeffizienten des Intercept und der Steigung. Da die logistische Regression auf dem Logit-Link rechnet, können wir die Steigung von \\(-0.08326\\) nicht direkt interpretieren. Daher müssen wir die Steigung wieder von dem Logit-Link auf unsere ursprüngliche Skala (eng. response) zurückrechnen. Dafür gibt es einen einfachen Trick mit der “Teile durch Vier” Regel oder aber eine entsprechende Funktion im R Paket {marginaleffects}. Wichtig ist auch hier, uns interessieren nicht die Odds Ratios aus einer logistischen Regression, da wir an dem Effekt der Steigung interessiert sind. Wir wollen ja wissen, wie sich der Jagderfolg in [%] durch die steigende Schneeschöhe verändert.\n\n\n\n\n\n\n“Teile durch Vier” Regel\n\n\n\nDie “Teile durch Vier” Regel (eng. Divide by 4 Rule) erlaubt uns von dem Koeffizienten aus der logistischen Regression auf die wahre Steigung der Geraden zu schließen. Da die logistische Regression auf dem Logit-Link rechnet, ist unsere \\(-0.08\\) nicht die Steigung der Geraden. Es gibt hier die Daumenregel, den Koeffizienten durch Vier zu teilen und so einen annähernd korrekten Wert zu erhalten. In unserem Fall also \\(-0.08326/4 = -0.021\\). Damit haben wir nicht den exakten Wert der Steigung, aber eine recht guten Wert.\n\n\nMit der Funktion avg_slopes() können wir uns aus dem Modell die Steigung der Gerade berechnen lassen. Wir haben dann nicht mehr die Logit-Skala vorliegen sondern sind wieder auf unserer ursprünglichen Skala der Prozente. Im Gegensatz zur “Teile durch Vier” Regel ist der Wert von \\(-0.15\\) natürlich genauer. Wir sehen, dass wir fast einen ähnlichen Wert für die Reduzierung des Jagderfolges der Eisfüchse wie bei der Gaussian Regression erhalten.\n\n\nR Code [zeigen / verbergen]\navg_slopes(hunting_log_fit)\n\n\n\n        Term    Contrast Estimate Std. Error     z Pr(&gt;|z|)     S  2.5 % 97.5 %\n snow_height mean(dY/dX)   -0.015    0.00101 -14.9   &lt;0.001 163.8 -0.017 -0.013\n\nColumns: term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted \nType:  response \n\n\nLeider gibt es für eine logistische Regression mit einem \\((Success/Failure)\\)-Outcome kein kein echtes Bestimmtheitsmaß \\(R^2\\). Hier greifen wir auf das R Paket {rcompanion} zurück. Wir rechnen auch dabei auch hier kein echtes Bestimmtheitsmaß \\(R^2\\) aus, sondern den Vergleich zu einem Null-Modell in dem wir gar keine Variable als Einfluss mit ins Modell nehmen. Das folgende Bestimmtheitsmaß \\(R^2\\) beantwortet also eher die Frage, ob wir besser mit unserem Modell mit der Schneehöhe sind, also mit einem Modell ohne die Schneehöhe.\n\n\nR Code [zeigen / verbergen]\nhunting_log_fit |&gt; \n  nagelkerke() |&gt; \n  pluck(\"Pseudo.R.squared.for.model.vs.null\")\n\n\n                             Pseudo.R.squared\nMcFadden                             0.546227\nCox and Snell (ML)                   0.995769\nNagelkerke (Cragg and Uhler)         0.995814\n\n\nHm, am Ende würde ich es lassen. Keine der Bestimmtheitsmaße \\(R^2\\) ist wirklich sinnig. Das erste Bestimmtheitsmaß ist viel zu niedrig, dafür das wir so nahe an den Koeffizienten der Gaussian Regression sind. Dafür sind die anderen beiden Bestimmtheitsmaße viel zu optimistisch, wie wir gleich in der Abbildung 56.5 sehen werden. Aber damit haben wir auch gesehen, dass wir die Analyse auch mit einer logistischen Regression rechnen können.\n\n\n56.4.3 … mit dem R Paket {betareg}\nJetzt haben wir uns durch andere Modellierungen durchgearbeitet und wollen uns jetzt einmal die Beta Regression anschauen. Die Beta Regression ist in dem R Paket {betareg} implementiert und kann über die Funktion betareg() angewendet werden. Wir haben hier noch den Sonderfall, dass wir das Modell mit einem | schreiben können. Wir können nämlich bei der Beta Regression auch die Varianz global schätzen oder aber für eine Variable adjustieren. Wir wählen hier einmal beide Schreibweisen in den folgenden Tabs und schauen was dann herauskommt. Sonst müssen wir bei der Beta Regression erstmal nichts beachten - wie immer schauen wir dann nochmal, ob unser Modell auch gut funktioniert hat.\n\nMit ~ snow_heightMit ~ snow_height | snow_height\n\n\nDas simpleste Modell wäre hier, dass wir einfach den Jagderfolg in [%] durch die Schneehöhe modellieren. Wir nehmen dann mehr oder minder Varianzhomogenität an und erlauben keinen gesonderten Varianzterm. Das kann gut funktionieren, aber meistens variiert die Varianz der \\(y\\)-Werte über die \\(x\\)-Werte. Wir haben meist eine größere Varianz bei größeren \\(x\\)-Werten.\n\n\nR Code [zeigen / verbergen]\nhunting_beta_fit &lt;- betareg(proportion ~ snow_height, data = hunting_tbl)\nhunting_beta_fit\n\n\n\nCall:\nbetareg(formula = proportion ~ snow_height, data = hunting_tbl)\n\nCoefficients (mean model with logit link):\n(Intercept)  snow_height  \n    4.51312     -0.08082  \n\nPhi coefficients (precision model with identity link):\n(phi)  \n12.53  \n\n\nWir sehen, dass wir unseren Koeffizienten erhalten, der fast unserer logistischen Regression entspricht. Jedenfalls numerisch. Aber auch hier dürfen wir uns nicht blenden lassen, wir rechnen auch in einer Beta Regression auf dem Logit-Link. Deshalb müssen wir die Steigung der Schneehöhe dann erst wieder zurückrechnen. Auch hier hilft die Funktion avg_slopes() aus dem R Paket {marginaleffects}.\n\n\nR Code [zeigen / verbergen]\navg_slopes(hunting_beta_fit)\n\n\n\n        Term    Contrast Estimate Std. Error     z Pr(&gt;|z|)     S  2.5 %\n snow_height mean(dY/dX)  -0.0149    0.00109 -13.6   &lt;0.001 137.4 -0.017\n  97.5 %\n -0.0127\n\nColumns: term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted \nType:  response \n\n\nWir sehen, dass mit jedem Zentimeter mehr Schnee der Jagderfolg um \\(-0.0149\\) oder \\(-1.49\\%\\) zurückgeht. Das sind ähnliche Zahlen wie auch schon bei der logistischen Regression sowie der Gaussian Regression.\n\n\nWenn wir erlauben, dass sich die Varianz der \\(y\\)-Werte über den Verlauf der \\(x\\)-Werte ändern darf, dann schreiben wir nochmal die Variable, die die Varianz verursacht hinter das Symbol |. Wir haben hier nur die Schneehöhe vorliegen, so dass unser Modell sich dann von alleine ergibt. Meistens macht es mehr Sinn die Varianz auch über eine Variable mit zu modellieren. Schauen wir mal, ob wir mit der separaten Modellierung der Varianz der Schneehöhe mehr erreichen.\n\n\nR Code [zeigen / verbergen]\nhunting_beta_phi_fit &lt;- betareg(proportion ~ snow_height | snow_height, data = hunting_tbl)\nhunting_beta_phi_fit\n\n\n\nCall:\nbetareg(formula = proportion ~ snow_height | snow_height, data = hunting_tbl)\n\nCoefficients (mean model with logit link):\n(Intercept)  snow_height  \n    3.99212     -0.06798  \n\nPhi coefficients (precision model with log link):\n(Intercept)  snow_height  \n    6.42223     -0.07271  \n\n\nAber auch hier dürfen wir uns nicht blenden lassen, wir rechnen auch in einer Beta Regression auf dem Logit-Link. Deshalb müssen wir die Steigung der Schneehöhe dann erst wieder zurückrechnen. Auch hier hilft die Funktion avg_slopes() aus dem R Paket {marginaleffects}.\n\n\nR Code [zeigen / verbergen]\navg_slopes(hunting_beta_phi_fit)\n\n\n\n        Term    Contrast Estimate Std. Error     z Pr(&gt;|z|)     S   2.5 %\n snow_height mean(dY/dX)  -0.0132    0.00108 -12.2   &lt;0.001 110.7 -0.0153\n 97.5 %\n -0.011\n\nColumns: term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted_lo, predicted_hi, predicted \nType:  response \n\n\nSpannenderweise ist hier der Effekt der Schneehöhe noch einen Tick geringer mit \\(-0.0132\\) pro Zentimeter mehr Schnee. Dann müssen wir uns gleich einmal anschauen welches Modell den niedrigeren AIC-Wert hat.\n\n\n\nDann berechnen wir einmal die AIC-Werte für die beiden Modelle. Ein niedriger AIC-Wert ist besser. Je kleiner oder negativer ein AIC-Wert eines Modells ist, desto besser ist das Modell im Vergleich zu einem anderen Modell. Das AIC ist ein Maß dafür, wie gut die Daten durch das Modell erklärt werden, korrigiert um die Komplexität des Modells. Wir berechnen mit der Funktion AIC() einmal die AIC-Werte der beiden Beta Regressionsmodellen.\n\n\nR Code [zeigen / verbergen]\nAIC(hunting_beta_fit)\n\n\n[1] -27.58488\n\n\nR Code [zeigen / verbergen]\nAIC(hunting_beta_phi_fit)\n\n\n[1] -33.9114\n\n\nDie absoluten Zahlen vom AIC sind nicht von Bedeutung. Erstmal sehen wir, dass unser Modell mit der Berücksichtigung der Varianz durch die Schneehöhe hunting_beta_phi_fit besser ist als das reine Modell ohne Berücksichtigung. Wir wollen aber immer die Differenzen von AIC betrachten. Du findest in der wissenschaftlichen Veröffentlichung Multimodel Inference: Understanding AIC and BIC in Model Selection mehr Informationen zu den Entscheidungen (Burnham & Anderson, 2004, pp. 270-271). Wichtig ist hier, wenn die Differenz größer ist als 2, dann haben wir einen signifikanten Unterschied zwischen den Modellen und wir sollten das Modell mit dem niedrigeren AIC nehmen.\n\n\nR Code [zeigen / verbergen]\nAIC(hunting_beta_fit) - AIC(hunting_beta_phi_fit)\n\n\n[1] 6.326516\n\n\nWir nehmen dann mal auf jeden Fall das Modell mit der Berücksichtigung der Varianz durch die Schneehöhe hunting_beta_phi_fit. Damit würden wir einen Effekt der Schneehöhe von \\(-0.0132\\) berichten. Berechnen wir jetzt nochmal als Vergleich das Bestimmtheitsmaß \\(R^2\\) und sehen, dass der Wert schon besser ist. Damit können wir dann auf jeden Fall leben.\n\n\nR Code [zeigen / verbergen]\nhunting_beta_phi_fit |&gt; r2()\n\n\n# R2 for Beta Regression\n  Pseudo R2: 0.796\n\n\nIn der Abbildung 56.4 sehen wir nochmal die Abbildungen der Modelldiagnostik. Wie du sehen kannst, sind die Ergebnisse zufriedenstellend. Der Residualplot sieht aus, wie wir ihn erwarten würden. Unsere Beobachtungen streuen um die Gerade. Auch haben wir keine Ausreißer vorliegen. Unsere Werte der Cook’s distance sind okay. Der Grenzwert wäre hier \\(4/n = 4/21 = 0.19\\). Unsere erste Beobachtung würde den Grenzwert reißen, aber das ist noch okay so. Das passt auch zu der Abbildung der Residuen. Auch die Generalized leverage deutet auf einen Ausreißer hin. Wir haben hier den Grenzwert von \\(3(k+1)/n\\) mit \\(k\\) gleich der Anzahl an Variablen im Modell. Somit liegt unser Grenzwert bei \\(3(1+1)/21 = 0.29\\). Auch der abschließende Residualplot sieht so aus, wie wir ihn erwarten würden. Als Fazit lässt sich ziehen, das wir zwar eine Beobachtung drin haben, die etwas am Rand liegt, was hier aber für mich noch nicht fürs Entfernen spricht.\n\n\nR Code [zeigen / verbergen]\nplot(hunting_beta_phi_fit)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Residualplot I\n\n\n\n\n\n\n\n\n\n\n\n(b) Cooks distance\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Generalized leverage\n\n\n\n\n\n\n\n\n\n\n\n(d) Residualplot II\n\n\n\n\n\n\n\nAbbildung 56.4— Ausgabe ausgewählter Modelgüteplots der Funktion plot(). Im Gegensatz zu der Funktion check_model() musst du wissen, was du erwarten würdest.\n\n\n\n\nDamit hätten wir höchstens einen Ausreißer, aber das kann bei echten Daten schon mal vorkommen, dass nicht alle Datenpunkte perfekt zu einem Modell passen. In der Abbildung 56.5 siehst du nochmal die Daten der Jagderfolge der Eisfüche im Zusammenhang mit der Schneehöhe dargestellt. Ich sehe da keinen eindeutigen Ausreißer und deshalb lasse ich alle Beobachtungen im Modell. Im Weiteren siehst du einmal die Modelle, die ich gerechnet habe, jeweils als Kurve dargestellt. Das beste Modell ist das betareg_phi Modell, was auch ziemlich gut durch die Punkte läuft. Du siehst besonders gut, wie das lineare Modell lm leider die Punkte nur sehr unzureichend an den Rändern trifft. Kann ja das Modell auch nicht anders, es muss ja eine Linie sein. Beachte aber vor allem die Unterschiede in den Effekten. Das lineare Modell mit der Gaussian Regression hat einen viel größeren Effekt berechnet als das beste Modell mit der Beta Regression.\n\n\nR Code [zeigen / verbergen]\nhunting_tbl |&gt; \n  ggplot(aes(snow_height, proportion)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(hunting_log_fit, type = \"response\"), color = \"log\")) +\n  geom_line(aes(y = predict(hunting_lm_fit, type = \"response\"), color = \"lm\")) +\n  geom_line(aes(y = predict(hunting_beta_fit, type = \"response\"), color = \"betareg\")) +\n  geom_line(aes(y = predict(hunting_beta_phi_fit, type = \"response\"), color = \"betareg_phi\")) +\n  scale_color_manual(name = \"Modell\", values = cb_pal[2:5])\n\n\n\n\n\n\n\n\nAbbildung 56.5— Zusammenhang zwischen dem Jagederfolg von Eisfüchsen und der Schneehöhe in den jeweiligen beobachteten Habitaten zusammen mit den vier vorgestellten Modellen. Das Modell betareg_phi ist dabei das Modell, was die Daten am besten beschreibt.\n\n\n\n\n\n\n\n\n\n\n\nWo ist die mathematische Formel?\n\n\n\nJetzt haben wir zwar schön das Modell mit der Beta Regression geschätzt aber leider keine mathematische Formel erhalten. Das ist jetzt ja eigentlich auch eine andere Fragestellung. Daher nutzen wir für die Erstellung der mathematischen Formel auch nicht die Beta Regression sondern die nicht linear Regression. Prinzipiell ginge natürlich auch die lineare Regression, aber da wissen wir ja schon, dass die nicht so super funktioniert. Hier jetzt also der Weg um die Koeffizienten einer nicht lineare Regression zu bestimmen, die durch die Punkte eine Kurve legt.\nAuch hier haben wir die Wahl zwischen der Funktion nls() aus dem Standardpaket in R oder aber der Funktion mfp() aus dem gleichnamigen R Paket {mfp}. In den beiden Tabs zeige ich dir einmal die schnelle Anwendung. Wenn du mehr lesen willst dann kannst du nochmal in dem Kapitel zur nicht linearen Regression reinschauen. Wie immer führe ich hier den Code mehr aus als ihn dann zu erklären.\n\nMit nls()Mit mfp()\n\n\nDie Funktion nls() hat die Herausforderung, dass wir Startwerte für die Koeffizienten unserer mathematischen Formel übergeben müssen. Darüber hinaus müssen wir auch in der Funktion nls() eine Formel vordefinieren, die dann eben mit den Werten der Koeffizienten gefüllt wird. Wenn es dir auch eher schwer fällt in einer Punktewolke eine mathematische Funktion zu sehen, dann ist die Funktion nls() eine Herausforderung. Es gibt zwar den einen oder anderen Trick, aber am Ende müssen wir schauen, ob es dann passt mit dem Ergebnis.\nWir brauchen erstmal Startwerte für unsere mathematische Formel \\(y = a - x^b\\). Ein Trick ist, erstmal eine lineare Regression mit lm() zu rechnen und die Koeffizienten dann als Startwerte in nls() zu nutzen.\n\n\nR Code [zeigen / verbergen]\nlm(log(proportion) ~ snow_height, hunting_tbl)\n\n\n\nCall:\nlm(formula = log(proportion) ~ snow_height, data = hunting_tbl)\n\nCoefficients:\n(Intercept)  snow_height  \n     1.0324      -0.0354  \n\n\nMit unseren Startwerten können wir dann einmal schauen, ob unser Modell konvergiert. Dann haben wir auch die Werte für die Koeffizienten \\(a\\) und \\(b\\) und können das Modell als mathematische Formel aufschreiben.\n\n\nR Code [zeigen / verbergen]\nnls(proportion ~ a - I(snow_height^b), data = hunting_tbl, \n    start = c(a = exp(1.0324), b = -0.0354),\n    control = nls.control(maxiter = 1000))\n\n\nNonlinear regression model\n  model: proportion ~ a - I(snow_height^b)\n   data: hunting_tbl\n    a     b \n3.196 0.248 \n residual sum-of-squares: 0.5484\n\nNumber of iterations to convergence: 6 \nAchieved convergence tolerance: 1.807e-07\n\n\nWir können auch nochmal eine \\(e\\)-Funktion mit \\(y = a - e^{b \\cdot x}\\) nutzen und schauen, ob wir damit etwas besser an die Daten näherkommen. Hier müssen wir dann wirklich ausprobieren, was teilweise echt nervig ist. Dafür schauen wir uns gleich nochmal die Funktion mfp() an.\n\n\nR Code [zeigen / verbergen]\nnls(proportion ~ a - exp(b * snow_height), data = hunting_tbl, \n    start = c(a = 1, b = 0),\n    control = nls.control(maxiter = 1000))\n\n\nNonlinear regression model\n  model: proportion ~ a - exp(b * snow_height)\n   data: hunting_tbl\n      a       b \n2.26755 0.01014 \n residual sum-of-squares: 0.3478\n\nNumber of iterations to convergence: 6 \nAchieved convergence tolerance: 2.307e-07\n\n\nHat jeweils geklappt und dann können wir uns auch schon die Gleichung zusammenbauen. Die Frage ist natürlich, ob die Werte gut zu unseren Daten passen. Das werden wir dann gleich nochmal in der Abbildung 56.6 überprüfen. Hier dann einmal die erste Gleichung für das Polynom und dann die zweite Gleichung mit der \\(e\\)-Funktion.\n\\[\nproportion = 3.196 - snow\\_height^{0.248}\n\\]\n\\[\nproportion = 2.268 - e^{0.0101 \\cdot snow\\_height}\n\\]\nWelche dann die beste mathematische Formel ist sehen wir dann gleich. Bitte schaue dir aber noch den anderen Tab mit der Funktion mfp() an, denn mit der Funktion nls() ist es dann doch manchmal etwas Glücksspiel, ob man die richtige mathematische Formel mit den richtigen Startwerten trifft. Auch hier hilft vielleicht das R Paket {nls.multstart} welches versucht das Problem der Startwerte nochmal algorithmisch zu lösen. Sieht jetzt wilder aus als es ist, aber hier kriege ich dann noch ein \\(c\\) mit in der Formel unter.\n\n\nR Code [zeigen / verbergen]\nnls_multstart(proportion ~ a - c * I(snow_height^b), data = hunting_tbl, \n              lower = c(a = 0, b = 0, c = 0),\n              upper = c(a = Inf, b = Inf, c = Inf),\n              start_lower = c(a = 0, b = 0, c = 0),\n              start_upper = c(a = 500, b = 5, c = 10),\n              iter = 500, supp_errors = \"Y\")\n\n\nNonlinear regression model\n  model: proportion ~ a - c * I(snow_height^b)\n   data: data\n        a         c         b \n8.888e-01 7.189e-10 4.914e+00 \n residual sum-of-squares: 0.1778\n\nNumber of iterations to convergence: 16 \nAchieved convergence tolerance: 1.49e-08\n\n\nDann erhalten wir als Abschluss die folgende Formel. Du kannst hier wirklich sehr viel rumspielen und schauen, welche der expoentziellen Gleichungen am besten passt. Das ist dann wirklich immer ein rumprobieren.\n\\[\nproportion = 4.914 - 7.189\\cdot10^{-10} \\cdot snow\\_height^{0.888}\n\\]\n\n\nNachdem wir den langen Weg mit der Funktion nls() gegeangen sind, machen wir es jetzt etwas kürzer mit der Funktion mfp(). Wir müssen nur angeben welche Variable als Polynom modelliert werden soll. Den Rest macht dann die Funktion mfp() für uns. Wir erhalten dann auch die Formel für den Zusammenhang der folgenden Form. Wir erhalten dann die Werte für \\(\\beta_0\\), \\(\\beta_1\\) sowie dem Polynom \\(p\\) und der möglichen Transformation von \\(x\\).\n\\[\nproportion = \\beta_0 - \\beta_1 \\cdot \\left(snow\\_height\\right)^p\n\\]\nDann rechnen wir mal die Funktion und schauen welche Werte wir erhalten. Die Kunst ist hier die Werte für die Koeffizienten aus der Ausgabe abzulesen. Aber das mache ich dir hier ja einmal vor.\n\n\nR Code [zeigen / verbergen]\nmfp(proportion ~ fp(snow_height), data = hunting_tbl)\n\n\nCall:\nmfp(formula = proportion ~ fp(snow_height), data = hunting_tbl)\n\n\nDeviance table:\n         Resid. Dev\nNull model   1.705267\nLinear model     0.412282\nFinal model  0.2184446\n\nFractional polynomials:\n            df.initial select alpha df.final power1 power2\nsnow_height          4      1  0.05        2      3      .\n\n\nTransformations of covariates:\n                           formula\nsnow_height I((snow_height/100)^3)\n\nCoefficients:\n    Intercept  snow_height.1  \n       0.9741        -2.4216  \n\nDegrees of Freedom: 20 Total (i.e. Null);  19 Residual\nNull Deviance:      1.705 \nResidual Deviance: 0.2184   AIC: -30.29 \n\n\nDann können wir die Werte aus der Ausgabe auch schon in unsere Gleichung einsetzen. Der Vorteil ist wirklich, dass ich mir nicht überlegen muss, welche mathematische Formel ich nutzen will. Das schränkt mich zwar ein, macht mir das Leben aber auch einfacher. Wir erhalten dann eben eine Polynom, was auch einfach einzusetzen ist.\n\\[\nproportion = 0.9741 -2.4216 \\cdot \\left(\\cfrac{snow\\_height}{100}\\right)^3\n\\]\nDann schauen wir mal gleich, welche der drei mathematischen Formeln am besten zu unseren Daten in der Abbildung 56.6 passen.\n\n\n\nIm ersten Schritt bauen wir uns einmal in R die drei mathematischen Formeln einmal nach. Wir nutzen dafür die Funktion \\(x){...} und setzen die Zahlen der Koeffizienten ein. Hier musst du nur mit den Klammern aufpassen, sonst bauen sich die Formeln einfach.\n\n\nR Code [zeigen / verbergen]\nnls_poly_func &lt;- \\(x){3.196 - x^(0.248)}\nnls_exp_func &lt;- \\(x){2.268 - exp(0.0101 * x)}\nnls_multstart &lt;- \\(x){4.914 - 7.189e-10 * x^(0.888)}\nmfp_func &lt;- \\(x){0.9741 - 2.4216 * (x/100)^3}\n\n\nIn der Abbildung 56.6 siehst du einmal den Vergleich der drei nicht linearen Regressionen zu den Datenpunkten. Was will man sagen, dass Modell aus der Funktion mfp() bei weitem das beste Modell liefert um den Verlauf der Punkte durch eine Kurve zu beschreiben. Wenn es dir also nur darum ginge die Werte für die Jagderfolge nach der Schneehöhe vorherzusagen, dann sieht das mfp()-Modell sehr gut aus.\n\n\nR Code [zeigen / verbergen]\nhunting_tbl |&gt; \n  ggplot(aes(snow_height, proportion)) +\n  theme_minimal() +\n  geom_point() +\n  geom_function(fun = nls_poly_func, aes(color = \"nls_poly\")) +\n  geom_function(fun = nls_exp_func, aes(color = \"nls_exp\")) +\n  geom_function(fun = nls_exp_func, aes(color = \"nls_multstart\")) +\n  geom_function(fun = mfp_func, aes(color = \"mfp\")) +\n  scale_color_manual(name = \"Modell\", values = cb_pal[2:5])\n\n\n\n\n\n\n\n\nAbbildung 56.6— Zusammenhang zwischen dem Jagederfolg von Eisfüchsen und der Schneehöhe in den jeweiligen beobachteten Habitaten zusammen mit den drei nicht linearen Regressionen aus der Funktion nls() und mfp().",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html#sec-mult-comp-beta-reg",
    "href": "stat-modeling-beta.html#sec-mult-comp-beta-reg",
    "title": "56  Beta Regression",
    "section": "56.5 Gruppenvergleich",
    "text": "56.5 Gruppenvergleich\nNeben der klassischen Regression in der wir dann eine Kurve durch die Punkte legen können wir die Beta Regression auch verwenden um einen Gruppenvergleich zu rechnen. Häufig sind wir in den Agrawissenschaften eher an dieser Frage interessiert. Wir machen das jetzt eigentlich wie immer mit dem R Paket {emmeans} und der Funktion Anova() aus dem R Paket {car}. Wenn du noch mehr zu den multiplen Vergleichen lesen willst, dann kannst du nochmal in das Kapitel zu den multiplen Vergleichen und dem Posthoc Test reinschauen. Wir konzentrieren uns hier auf die wichtigsten Aspekte und gehen einmal die Sachlage für die Daten zu den untergewichtigen Brokkoli sowie unsren Pilzen auf dem Weizen durch. Dabei habe ich dann die Daten für die Pilze etwas reduziert, weil es einfach zu viele Faktoren sind.\n\n56.5.1 Untergewichtige Brokkoli\nBeginnen wir also mit den Daten unseres untergewichtigen Brokkoli. Wir haben als Outcome proprotion den Anteil an 500g, also die prozentuale Untergewichtigkeit eines jedes Brokkolikopfes. Dabei habe ich dann alle Brokkoli mit einem Anteil von Eins oder größer entfernt. Wir wollen hier explizit auf die Köpfe schauen, die das Zielgewicht nicht erreicht haben. Damit steht das Modell aus schon fast. Wir haben drei Faktoren, einmal die Zeit der Düngung fert_time sowie dann die Menge der Düngung fert_amount. Dann nehme ich den Block noch mit rein, denn ich will einmal sehen wie stark der Blockeffekt in der ANOVA ist. Damit ich das so auch kann, muss einmal der Block mit ins Modell. Dann haben wir natürlich bei der beta Regression die Frage, ob wir dann die Varianz nochmal direkt mit modellieren sollen. Das würden wir ja mit einem | durchführen. Ich rechne hier jetzt mal drei Modelle, einmal ein Modell ohne explizite Varianz, dann einmal mit der Berücksichtigung der Varianz der Blöcke und zum Schluss nochmal ein Modell mit der Berücksichtigung aller drei Faktoren als Varianzquelle.\n\n\nR Code [zeigen / verbergen]\nbroc_1_fit &lt;- betareg(proportion ~ fert_time + fert_amount + fert_time:fert_amount + block, \n                    data = broc_tbl)\n\nbroc_2_fit &lt;- betareg(proportion ~ fert_time + fert_amount + fert_time:fert_amount + block | block, \n                    data = broc_tbl)\n\nbroc_3_fit &lt;- betareg(proportion ~ fert_time + fert_amount + fert_time:fert_amount + block | \n                      fert_time + fert_amount + block, \n                    data = broc_tbl)\n\n\nIch nutze jetzt wieder das AIC um zu entscheiden welches Modell das beste Modell ist. Dabei gilt, dass ein niedrigeres AIC immer besser ist. Im zweiten Schritt sind die absoluten Zahlen irrelevant, mich interessiert nur die Differenz der AIC-Werte. Dabei ist ein Modell mit einem Unterschied von \\(2\\) oder größer vorzuziehen.\n\n\nR Code [zeigen / verbergen]\nAIC_vec &lt;- c(\"Modell 1\"= AIC(broc_1_fit), \n             \"Modell 2\" = AIC(broc_2_fit), \n             \"Modell 3\" = AIC(broc_3_fit))\nouter(AIC_vec, AIC_vec, \"-\") |&gt; round(2)\n\n\n         Modell 1 Modell 2 Modell 3\nModell 1     0.00     3.22    -0.17\nModell 2    -3.22     0.00    -3.40\nModell 3     0.17     3.40     0.00\n\n\nWir sehen, dass das Modell 2 broc_2_fit besser ist als das Modell 1. Daher bevorzugen wir das Modell 2. Dann kriegen wir aber keine Verbesserung mehr hin und deshalb bleiben wir bei dem zweiten Modell. Jetzt können wir dann einmal die ANOVA rechnen und schauen, welche signifikante Effekte wir in den Daten haben.\n\n\nR Code [zeigen / verbergen]\nbroc_2_fit |&gt; \n  Anova() |&gt; \n  model_parameters()\n\n\nParameter             |  Chi2 | df |      p\n-------------------------------------------\nfert_time             |  0.31 |  1 | 0.576 \nfert_amount           |  5.23 |  2 | 0.073 \nblock                 | 35.81 |  3 | &lt; .001\nfert_time:fert_amount |  3.86 |  2 | 0.145 \n\nAnova Table (Type 2 tests)\n\n\nÄrgerlicherweise sind unsere beiden Behandlungsfaktoren gar nicht signifikant sondern unsere Blöcke. Dann werden wir uns wohl die Blöcke einmal anschauen müssen. Ich entscheide mich mal über den Zeitpunkt der Düngegabe zu mitteln, den der Effekt des Zeitpunktes ist wirklich nicht signifikant.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- broc_2_fit |&gt; \n  emmeans(~ fert_amount * block) \n\n\nMit dem emm_obj können wir dann uns das compact letter display berechnen lassen. Wir haben hier als Effekt die mittleren Prozente in der Spalte emmean. Also wie viel Prozent der Brokkoliköpfe untergewichtig sind. Ich adjustiere hier dann noch die \\(p\\)-Werte nach Bonferroni.\n\n\nR Code [zeigen / verbergen]\nemm_cld &lt;- emm_obj |&gt; \n  cld(Letters = letters, adjust = \"bonferroni\")\n\n\nIn der Abbildung 56.7 siehst du die Barplots der mittleren Prozente des errichten Zielgewichtes der Brokkoliköpfe für die Düngemenge und die vier Blöcke. Wie du sehen kannst unterscheiden sich die Blöcke stärker untereinander als die Level der Düngemenge. Wie viel Prozent an untergewichtigen Brokkoli du also anteilig erhälst liegt mehr an dem Standort des Blocks als an der Behandlung mit Dünger. Irgendwie dann auch ein spannendes Ergebnis. Ich nutze hier den Standardfehler als Fehlerbalken, da die Standardabweichung eventuell über die Grenze von Eins steigen würde, was bei Prozenten und Anteilen wenig Sinn ergibt.\n\n\nR Code [zeigen / verbergen]\nemm_cld |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = fert_amount, y = emmean, fill = block)) +\n  theme_minimal() + \n  labs(y = \"[%] erreichtes Zielgewicht\", x = \"Düngemenge [mg/l]\",\n       fill = \"Block\") +\n  scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +\n  geom_bar(stat = \"identity\", width = 0.7,\n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = str_trim(.group), y = emmean + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = emmean-SE, ymax = emmean+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  theme(legend.position = \"top\") +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 56.7— Säulendigramm der mittleren Prozente der untergewichtigen Brokkoli aus einer Beta Regression. Das betareg()-Modell berechnet das mittleren Prozente des Brokkoli in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert. Wir nutzen hier den Standardfehler, da die Standardabweichung mit der großen Fallzahl rießig wäre.\n\n\n\n\n\n\n\n56.5.2 Pilze auf Weizen\nUnser zweites Beispiel ist wirklich schwierig auszuwerten, da wir so viele Faktoren vorliegen haben. Zum einen haben wir als Faktor der Weizenlinien zehn genetische Linien vorliegen. Dann schauen wir uns auch noch zwanzig Pilzarten an. Das funktioniert dann hier als Demonstration nicht mehr. In der Realität würdest du dir dann auch Linien oder Pilzarten raussuchen, die sich interessieren und nicht wild hier Abbildungen produzieren. Wenn du alle Faktoren mit in die Modelle nimmst, siehst du wirklich gar nichts mehr. Vertraue mir, ich habe das compact letter display bis zum Buchstaben \\(z\\) mit diesem Beispiel ausgereizt.\n\n\nR Code [zeigen / verbergen]\nfungi_tbl &lt;- fungi_tbl |&gt; \n  filter(bunt %in% c(\"B1\", \"B12\", \"B157\", \"B51\", \"B189\", \"B4\")) |&gt; \n  filter(gen %in% c(\"Oro\", \"Albit\", \"Turkey\", \"Hybrid128\")) \n\n\nMit unserem reduzierten Datensatz können wir dann einmal unsere Beta Regression rechnen. Ich nehme hier mal keinen gesonderten Varianzterm an, einfach um das Beispiel etwas kürzer zu halten.\n\n\nR Code [zeigen / verbergen]\nfungi_fit &lt;- betareg(percent ~ gen + bunt + gen:bunt, data = fungi_tbl)\n\n\nDann können wir auch schon die ANOVA rechnen. Hier hilft die ANOVA wirklich mal einen schnellen Überblick über die Daten zu erhalten.\n\n\nR Code [zeigen / verbergen]\nfungi_fit |&gt; \n  Anova() |&gt; \n  model_parameters()\n\n\nParameter |   Chi2 | df |      p\n--------------------------------\ngen       | 416.57 |  3 | &lt; .001\nbunt      | 155.99 |  5 | &lt; .001\ngen:bunt  | 284.37 | 15 | &lt; .001\n\nAnova Table (Type 2 tests)\n\n\nWir sehen, dass wir auf jeden Fall einen Effekt der Weizenlinie wie auch der Pilzart haben. Leider haben wir auch eine signifikante Interaktion, so dass ich die Daten dann für die Faktoren getrennt auswerten werde. Wir nutzen dann das Objekt auch gleich um das compact letter display zu erstellen. Mehr geht dann natürlich immer, aber da schaue doch mal in das Kapitel zu den multiplen Vergleichen und dem Posthoc Test rein.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- fungi_fit |&gt; \n  emmeans(~ gen | bunt) \n\n\nIm Folgenden einmal der Code für das compact letter display. Ich zeige auch hier die Ausgabe nur einmal als tibble damit die Ausgabe nicht so lang wird. Wir sehen dann gleich mal den mittleren Pilzbefall pro Linie und Pilzart. Es sind wirklich viele Ergebnisse für die Vergleiche, da wir wirklich viele Level der Faktorkombination haben. Irgendwann ist dann auch das compact letter display am Ende.\n\n\nR Code [zeigen / verbergen]\nemm_cld &lt;- emm_obj |&gt; \n  cld(Letters = letters) |&gt; \n  as_tibble() \nemm_cld\n\n\n# A tibble: 24 × 8\n   gen       bunt   emmean      SE    df asymp.LCL asymp.UCL .group\n   &lt;fct&gt;     &lt;fct&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; \n 1 Albit     B1    0.00731 0.00499   Inf -0.00247     0.0171 \" a  \"\n 2 Oro       B1    0.0109  0.00708   Inf -0.00293     0.0248 \" a  \"\n 3 Turkey    B1    0.0835  0.0272    Inf  0.0302      0.137  \"  b \"\n 4 Hybrid128 B1    0.832   0.0378    Inf  0.758       0.907  \"   c\"\n 5 Oro       B51   0.0186  0.0107    Inf -0.00246     0.0396 \" a  \"\n 6 Albit     B51   0.0250  0.0133    Inf -0.000979    0.0511 \" a  \"\n 7 Turkey    B51   0.254   0.0445    Inf  0.167       0.341  \"  b \"\n 8 Hybrid128 B51   0.941   0.0226    Inf  0.896       0.985  \"   c\"\n 9 Oro       B4    0.0418  0.0185    Inf  0.00565     0.0780 \" a \" \n10 Albit     B4    0.0906  0.0283    Inf  0.0350      0.146  \" a \" \n# ℹ 14 more rows\n\n\nIn der Abbildung 56.8 siehst du einmal das sehr heterogene Ergebnis. Wir haben teilweise Weizenarten mit einem sehr starken Pilzbefall und teilweise dann mit gar keinem Pilzbefall. Das Ganze ist dann auch immer abhängig von der Art des Pilzes und dann der befallenen Linie. Wir haben hier eben eine klassische Interaktion vorliegen. Hier habe ich mich dann auch für den Standardfehler für die Fehlerbalken entschieden, da die Standardabweichung eventuell über die Eins hinausgeht.\n\n\nR Code [zeigen / verbergen]\nemm_cld |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = bunt, y = emmean, fill = gen)) +\n  theme_minimal() + \n  labs(y = \"[%] infiziert\", x = \"Art des Pilzes\",\n       fill = \"Genetische Linie\") +\n  scale_y_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1)) +\n  geom_bar(stat = \"identity\", width = 0.7,\n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = str_trim(.group), y = emmean + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = emmean-SE, ymax = emmean+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  theme(legend.position = \"top\") +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 56.8— Säulendigramm des mittleren Pilzbefalls von Weizen durch verschiedene Pilzarten. Das betareg()-Modell berechnet den mittleren Pilzbefall in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert. Wir nutzen hier den Standardfehler, da die Standardabweichung mit der großen Fallzahl rießig wäre.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-beta.html#referenzen",
    "href": "stat-modeling-beta.html#referenzen",
    "title": "56  Beta Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nBurnham, K. P., & Anderson, D. R. (2004). Multimodel inference: understanding AIC and BIC in model selection. Sociological methods & research, 33(2), 261–304.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Beta Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html",
    "href": "stat-modeling-multinom.html",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "",
    "text": "57.1 Annahmen an die Daten\nLetzte Änderung am 25. March 2024 um 08:41:34\nWas machen wir wenn wir ein Outcome haben mit mehr als zwei Kategorien. Wenn wir nur zwei Kategorien hätten, dann würden wir eine logistische Regression rechnen. Wenn wir mehr als zwei Kategorien haben, dann sind wir in dem Fall der multinomialen / ordinalen logistischen Regression. Wir rechnen eine multinomialen Regression, wenn wir keine Ordnung in den Kategorien in dem Outcome haben. Wenn wir eine Ordnung vorliegen haben, dann nutzen wir die ordinale Regression. Wir werden uns erstmal eine ordinale Regression anschauen mit nur drei geordneten Stufen. Dann schauen wir uns einmal wie wir eine ordinale Regression auf Boniturnoten in der Likert-Skala rechnen. Wir machen das getrennt, denn wir sind bei wenigen geordneten Kategorien meistens noch am Effekt zwischen den Kategorien interessiert. Im Gegensatz wollen wir bei einem Outcome mit Boniturnoten einen Gruppenvergleich rechnen. Dann interessiert uns der Unterschied und die Effekte zwischen den Boniturnoten nicht. Deshalb trennen wir das hier etwas auf.\nIm zweiten Teil wollen wir uns dann noch eine multinominale Regression auf ungeordneten Kategorien eines Outcomes anschauen. Korrekterweise tun wir nur so, als wäre unser vorher geordnetes Outcome dann eben ungeordnet. Das macht dann aber bei deiner Anwendung dann keinen großen Unterschied. Als eine Alternative zur multinationalen Regression stelle ich dann noch die logistische Regression vor. Wir können nämlich einfach unsere Daten nach dem Outcome jeweils in kleinere Datensätze mit nur jeweils zwei der Kategorien aufspalten. Das ist zwar nicht schön, aber auch eine Möglichkeit mit einem Problem umzugehen.\nIch gehe hier nicht auf die Theorie hinter der multinomialen / ordinalen logistischen Regression ein. Wenn dich dazu mehr interessiert findest du in den jeweiligen Abschnitten dann noch eine passende Referenz. Da kannst du dann schauen, welche Informationen du noch zusätzlich findest.\nIm folgenden Kapitel zu der multinomialen / ordinalen logistischen linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form ideal sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.\nDaher sieht unser Modell wie folgt aus. Wir haben ein \\(y\\) und \\(p\\)-mal \\(x\\). Wobei \\(p\\) für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser \\(y\\) einer Multinomialverteilung. Damit finden wir im Outcome im Falle der multinomialen logistischen linearen Regression ungeordnete Kategorien und im Falle der ordinalen logistischen linearen Regression geordnete Kategorien.\n\\[\ny \\sim x_1 + x_2 + ... + x_p\n\\]\nWir können in dem Modell auch Faktoren \\(f\\) haben, aber es geht hier nicht um einen Gruppenvergleich. Das ist ganz wichtig. Wenn du einen Gruppenvergleich rechnen willst, dann musst du in Kapitel 43 nochmal nachlesen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#annahmen-an-die-daten",
    "href": "stat-modeling-multinom.html#annahmen-an-die-daten",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "",
    "text": "Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das Kapitel 50 zu Imputation von fehlenden Werten.\nWenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das Kapitel 48 zu Ausreißer in den Daten.\nWenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das Kapitel 49 bei der Variablenselektion.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#genutzte-r-pakete",
    "href": "stat-modeling-multinom.html#genutzte-r-pakete",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.2 Genutzte R Pakete",
    "text": "57.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom,\n               parameters, performance, gtsummary,\n               ordinal, janitor, MASS, nnet, flextable,\n               emmeans, multcomp, ordinal, see, scales,\n               janitor, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(magrittr::extract)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#daten",
    "href": "stat-modeling-multinom.html#daten",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.3 Daten",
    "text": "57.3 Daten\nIm Folgenden wollen wir uns die Daten von den infizierten Ferkeln noch einmal anschauen. Wir nehmen als Outcome die Spalte frailty und damit die Gebrechlichkeit der Ferkel. Die Spalte ordnen wir einmal nach robust, pre-frail und frail. Wobei robust ein gesundes Ferkel beschreibt und frail ein gebrechliches Ferkel. Damit wir später die Richtung des Effekts richtig interpretieren können, müssen wir von gut nach schlecht sortieren. Das brauchen wir nicht, wenn wir Boniturnoten haben, dazu mehr in einem eigenen Abschnitt. Wir bauen uns dann noch einen Faktor mit ebenfalls der Spalte frailty in der wir so tun, als gebe es diese Ordnung nicht. Wir werden dann die ordinale Regression mit dem Outcome frailty_ord rechnen und die multinominale Regression dann mit dem Outcome frailty_fac durchführen.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt;\n  mutate(frailty_ord = ordered(frailty, levels = c(\"robust\", \"pre-frail\", \"frail\")),\n         frailty_fac = as_factor(frailty)) |&gt; \n  select(-infected)\n\n\nSchauen wir uns nochmal einen Ausschnitt der Daten in der Tabelle 57.1 an.\n\n\n\n\nTabelle 57.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nlocation\nactivity\ncrp\nfrailty\nbloodpressure\nweight\ncreatinin\nfrailty_ord\nfrailty_fac\n\n\n\n\n61\nmale\nnortheast\n15.31\n22.38\nrobust\n62.24\n19.05\n4.44\nrobust\nrobust\n\n\n53\nmale\nnorthwest\n13.01\n18.64\nrobust\n54.21\n17.68\n3.87\nrobust\nrobust\n\n\n66\nfemale\nnortheast\n11.31\n18.76\nrobust\n57.94\n16.76\n3.01\nrobust\nrobust\n\n\n59\nfemale\nnorth\n13.33\n19.37\nrobust\n56.15\n19.05\n4.35\nrobust\nrobust\n\n\n63\nmale\nnorthwest\n14.71\n21.57\nrobust\n55.38\n18.44\n5.27\nrobust\nrobust\n\n\n55\nmale\nnorthwest\n15.81\n21.45\nrobust\n60.29\n18.42\n4.78\nrobust\nrobust\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n54\nfemale\nnorth\n11.82\n21.5\npre-frail\n55.32\n19.75\n3.92\npre-frail\npre-frail\n\n\n56\nmale\nwest\n13.91\n20.8\nfrail\n58.37\n17.28\n7.44\nfrail\nfrail\n\n\n57\nmale\nnorthwest\n12.49\n21.95\npre-frail\n56.66\n16.86\n2.44\npre-frail\npre-frail\n\n\n61\nmale\nnorthwest\n15.26\n23.1\nrobust\n57.18\n15.55\n3.08\nrobust\nrobust\n\n\n59\nfemale\nnorth\n13.13\n20.23\nrobust\n56.64\n18.6\n3.41\nrobust\nrobust\n\n\n63\nfemale\nnorth\n10.01\n19.89\nrobust\n57.46\n18.6\n4.2\nrobust\nrobust\n\n\n\n\n\n\n\n\nDas wären dann die Daten, die wir für unsere Modelle dann brauchen. Schauen wir mal was wir jetzt bei der ordinalen Regression herausbekommen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#sec-ordinal",
    "href": "stat-modeling-multinom.html#sec-ordinal",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.4 Ordinale logistische Regression",
    "text": "57.4 Ordinale logistische Regression\nEs gibt sicherlich einiges an Paketen in R um eine ordinale Regression durchzuführen. Ich nutze gerne die Funktion polr() aus dem R Paket {MASS}. Daneben gibt es auch noch das R Paket {ordinal} mit der Funktion clm(), die wir dann noch im Anschluss besprechen werden. Ich nutze jetzt erstmal die Funktion polr(), da wir hier noch eine externe Referenz haben, die uns noch detailliertere Informationen liefern kann.\n\n\nIch verweise gerne hier auf das tolle Tutorium Ordinal Logistic Regression | R Data Analysis Examples. Hier erfährst du noch mehr über die Analyse der ordinalen logistischen Regression.\nWir schon erwähnt sparen wir usn die mathematischen Details und utzen gleich die Funktion polr auf unserem Outcome frailty. Wir müssen keine Verteilungsfamilie extra angeben, dass haben wir schon mit der Auswahl der Funktion getan. Die Funktion polr kann nur eine ordinale Regression rechnen und wird einen Fehler ausgeben, wenn das Outcome \\(y\\) nicht passt.\n\n\nR Code [zeigen / verbergen]\nologit_fit &lt;- polr(frailty_ord ~ age + sex + location + activity + crp + \n                     bloodpressure + weight + creatinin, \n                   data = pig_tbl)\n\n\nSchauen wir uns einmal die Ausgabe des Modellfits der ordinalen Regression mit der Funktion summary() an. Wir sehen eine Menge Zahlen und das wichtigste für uns ist ja, dass wir zum einen Wissen, dass wir auch die ordinale Regression auf der \\(link\\)-Funktion rechnen. Wir erhalten also wieder eine Transformation des Zusammenhangs zurück, wie wir es schon bei der Poisson Regression sowie bei der logistischen Regression hatten.\nHier gibt es nur die Kurzfassung der link-Funktion. Dormann (2013) liefert hierzu in Kapitel 7.1.3 nochmal ein Einführung in das Thema.\n\n\nR Code [zeigen / verbergen]\nologit_fit |&gt; summary()\n\n\nCall:\npolr(formula = frailty_ord ~ age + sex + location + activity + \n    crp + bloodpressure + weight + creatinin, data = pig_tbl)\n\nCoefficients:\n                     Value Std. Error t value\nage                0.03191    0.02168  1.4718\nsexmale            0.06970    0.26447  0.2635\nlocationnortheast -0.27291    0.28063 -0.9725\nlocationnorthwest  0.07598    0.24883  0.3054\nlocationwest       0.24400    0.27285  0.8942\nactivity          -0.06970    0.07267 -0.9591\ncrp                0.06499    0.06820  0.9529\nbloodpressure     -0.05051    0.03037 -1.6632\nweight             0.06190    0.06649  0.9310\ncreatinin         -0.01100    0.06854 -0.1605\n\nIntercepts:\n                 Value   Std. Error t value\nrobust|pre-frail  0.6494  3.0697     0.2116\npre-frail|frail   2.4716  3.0724     0.8044\n\nResidual Deviance: 794.6938 \nAIC: 818.6938 \n\n\nUnsere Ausgabe teilt sich in zwei Teile auf. In dem oberen Teil sehen wir die Koeffizienten des Modells zusammen mit dem Fehler und der Teststatistik. Was wir nicht sehen, ist ein \\(p\\)-Wert. Die Funktion rechnet uns keinen Signifikanztest aus. Das können wir aber gleich selber machen. In dem Abschnitt Intercepts finden wir die Werte für die Gruppeneinteilung auf der link-Funktion wieder. Wir transformieren ja unsere drei Outcomekategorien in einen kontinuierliche Zahlenzusammenhang. Trotzdem müssen ja die drei Gruppen auch wieder auftauchen. In dem Abschnitt Intercepts finden wir die Grenzen für die drei Gruppen auf der link-Funktion.\n\n\nWir gibt auch ein Tutorial für How do I interpret the coefficients in an ordinal logistic regression in R?\nBerechnen wir jetzt einmal die \\(p\\)-Werte per Hand. Dafür brauchen wir die absoluten Werte aus der t value Spalte aus der summary des Modellobjekts. Leider ist die Spalte nicht schön formatiert und so müssen wir uns etwas strecken um die Koeffizienten sauber aufzuarbeiten. Wir erhalten dann das Objekt coef_tbl wieder.\n\n\nR Code [zeigen / verbergen]\ncoef_tbl &lt;- summary(ologit_fit) |&gt; \n  coef() |&gt; \n  as_tibble(rownames = \"term\") |&gt; \n  clean_names() |&gt; \n  mutate(t_value = abs(t_value))\n\ncoef_tbl\n\n\n# A tibble: 12 × 4\n   term                value std_error t_value\n   &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 age                0.0319    0.0217   1.47 \n 2 sexmale            0.0697    0.264    0.264\n 3 locationnortheast -0.273     0.281    0.973\n 4 locationnorthwest  0.0760    0.249    0.305\n 5 locationwest       0.244     0.273    0.894\n 6 activity          -0.0697    0.0727   0.959\n 7 crp                0.0650    0.0682   0.953\n 8 bloodpressure     -0.0505    0.0304   1.66 \n 9 weight             0.0619    0.0665   0.931\n10 creatinin         -0.0110    0.0685   0.161\n11 robust|pre-frail   0.649     3.07     0.212\n12 pre-frail|frail    2.47      3.07     0.804\n\n\nUm die Fläche rechts von dem \\(t\\)-Wert zu berechnen, können wir zwei Funktionen nutzen. Die Funktion pnorm() nimmt eine Standradnormalverteilung an und die Funktion pt() vergleicht zu einer \\(t\\)-Verteilung. Wenn wir rechts von der Verteilung schauen wollen, dann müssen wir die Option lower.tail = FALSE wählen. Da wir auch zweiseitig statistisch Testen, müssen wir den ausgerechneten \\(p\\)-Wert mal zwei nehmen. Hier einmal als Beispiel für den \\(t\\)-Wert von \\(1.96\\). Mit pnorm(1.96, lower.tail = FALSE) * 2 erhalten wir \\(0.05\\) als Ausgabe. Das ist unser \\(p\\)-Wert. Was uns ja nicht weiter überrascht. Denn rechts neben dem Wert von \\(1.96\\) in einer Standardnormalverteilung ist ja \\(0.05\\). Wenn wir einen \\(t\\)-Test rechnen würden, dann müssten wir noch die Freiheitsgrade df mit angeben. Mit steigendem \\(n\\) nähert sich die \\(t\\)-Verteilung der Standardnormalverteilung an. Wir haben mehr als \\(n = 400\\) Beobachtungen, daher können wir auch df = 400 setzen. Da kommt es auf eine Zahl nicht an. Wir erhalten mit pt(1.96, lower.tail = FALSE, df = 400) * 2 dann eine Ausgabe von \\(0.0507\\). Also fast den gleichen \\(p\\)-Wert.\nIm Folgenden setzte ich die Freiheitsgrade df = 3 dammit wir was sehen. Bei so hohen Fallzahlen wir in unserem beispiel würden wir sonst keine Unterschiede sehen.\n\n\nR Code [zeigen / verbergen]\ncoef_tbl |&gt; \n  mutate(p_n = pnorm(t_value, lower.tail = FALSE) * 2,\n         p_t = pt(t_value, lower.tail = FALSE, df = 3) * 2) |&gt; \n  mutate(across(where(is.numeric), round, 3))\n\n\n# A tibble: 12 × 6\n   term               value std_error t_value   p_n   p_t\n   &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 age                0.032     0.022   1.47  0.141 0.237\n 2 sexmale            0.07      0.264   0.264 0.792 0.809\n 3 locationnortheast -0.273     0.281   0.973 0.331 0.403\n 4 locationnorthwest  0.076     0.249   0.305 0.76  0.78 \n 5 locationwest       0.244     0.273   0.894 0.371 0.437\n 6 activity          -0.07      0.073   0.959 0.338 0.408\n 7 crp                0.065     0.068   0.953 0.341 0.411\n 8 bloodpressure     -0.051     0.03    1.66  0.096 0.195\n 9 weight             0.062     0.066   0.931 0.352 0.421\n10 creatinin         -0.011     0.069   0.161 0.872 0.883\n11 robust|pre-frail   0.649     3.07    0.212 0.832 0.846\n12 pre-frail|frail    2.47      3.07    0.804 0.421 0.48 \n\n\nDamit haben wir einmal händisch uns die \\(p\\)-Werte ausgerechnet. Jetzt könnte man sagen, dass ist ja etwas mühselig. Gibt es da nicht auch einen einfacheren Weg? Ja wir können zum einen die Funktion tidy() nutzen um die 95% Konfidenzintervalle und die exponierten Effektschätzer aus der ordinalen Regresssion zu erhalten. Wir erhalten aber wieder keine \\(p\\)-Werte sondern müssten uns diese \\(p\\)- Werte dann wieder selber berechnen.\n\n\nR Code [zeigen / verbergen]\nologit_fit |&gt; \n  tidy(conf.int = TRUE, exponentiate = TRUE) |&gt; \n  select(-coef.type)\n\n\n# A tibble: 12 × 6\n   term              estimate std.error statistic conf.low conf.high\n   &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 age                  1.03     0.0217     1.47     0.990      1.08\n 2 sexmale              1.07     0.264      0.264    0.639      1.80\n 3 locationnortheast    0.761    0.281     -0.973    0.437      1.32\n 4 locationnorthwest    1.08     0.249      0.305    0.662      1.76\n 5 locationwest         1.28     0.273      0.894    0.747      2.18\n 6 activity             0.933    0.0727    -0.959    0.808      1.08\n 7 crp                  1.07     0.0682     0.953    0.934      1.22\n 8 bloodpressure        0.951    0.0304    -1.66     0.896      1.01\n 9 weight               1.06     0.0665     0.931    0.934      1.21\n10 creatinin            0.989    0.0685    -0.161    0.865      1.13\n11 robust|pre-frail     1.91     3.07       0.212   NA         NA   \n12 pre-frail|frail     11.8      3.07       0.804   NA         NA   \n\n\nUm all dieses Berechnen zu umgehen, können wir dann auch die Funktion model_parameters() nutzen. Hier berechnen wir dann die \\(p\\)-Wert mit \\(df = 400\\) aus einer \\(t\\)-Verteilung. Damit umgehen wir das Problem, dass unser Modellfit keine \\(p\\)-Werte liefert.\n\n\nR Code [zeigen / verbergen]\nologit_fit |&gt; \n  model_parameters() \n\n\n# alpha\n\nParameter        | Log-Odds |   SE |        95% CI | t(400) |     p\n-------------------------------------------------------------------\nrobust|pre-frail |     0.65 | 3.07 | [-5.39, 6.68] |   0.21 | 0.833\npre-frail|frail  |     2.47 | 3.07 | [-3.57, 8.51] |   0.80 | 0.422\n\n# beta\n\nParameter            | Log-Odds |   SE |        95% CI | t(400) |     p\n-----------------------------------------------------------------------\nage                  |     0.03 | 0.02 | [-0.01, 0.07] |   1.47 | 0.142\nsex [male]           |     0.07 | 0.26 | [-0.45, 0.59] |   0.26 | 0.792\nlocation [northeast] |    -0.27 | 0.28 | [-0.83, 0.27] |  -0.97 | 0.331\nlocation [northwest] |     0.08 | 0.25 | [-0.41, 0.56] |   0.31 | 0.760\nlocation [west]      |     0.24 | 0.27 | [-0.29, 0.78] |   0.89 | 0.372\nactivity             |    -0.07 | 0.07 | [-0.21, 0.07] |  -0.96 | 0.338\ncrp                  |     0.06 | 0.07 | [-0.07, 0.20] |   0.95 | 0.341\nbloodpressure        |    -0.05 | 0.03 | [-0.11, 0.01] |  -1.66 | 0.097\nweight               |     0.06 | 0.07 | [-0.07, 0.19] |   0.93 | 0.352\ncreatinin            |    -0.01 | 0.07 | [-0.15, 0.12] |  -0.16 | 0.873\n\n\nIn Tabelle 57.2 sehen wir nochmal die Ergebnisse der ordinalen Regression einmal anders aufgearbeitet. Wir aber schon bei der Funktion tidy() fehlen in der Tabelle die \\(p\\)-Werte. Wir können aber natürlich auch eine Entscheidung über die 95% Konfidenzintervalle treffen. Wenn die 1 mit im 95% Konfidenzintervall ist, dann können wir die Nullhypothese nicht ablehnen.\n\n\nR Code [zeigen / verbergen]\nologit_fit |&gt; \n  tbl_regression(exponentiate = TRUE) |&gt; \n  as_flex_table()\n\n\n\n\nTabelle 57.2— Tabelle der Ergebnisse der ordinalen Regression.\n\n\n\nCharacteristicOR195% CI1age1.030.99, 1.08sexfemale——male1.070.64, 1.80locationnorth——northeast0.760.44, 1.32northwest1.080.66, 1.76west1.280.75, 2.18activity0.930.81, 1.08crp1.070.93, 1.22bloodpressure0.950.90, 1.01weight1.060.93, 1.21creatinin0.990.86, 1.131OR = Odds Ratio, CI = Confidence Interval\n\n\n\n\n\nWi es im gazen Kapitel schon durchscheint, die Interpreation der \\(OR\\) aus einer ordinalen Regression ist nicht einfach, geschweige den intuitiv. Was wir haben ist der Trend. Wir haben unser Outcome von robust zu frail sortiert und damit von gut nach schlecht. Wir können so die Richtung der Variablen in unserem Modell interpretieren. Das heißt, dass männliche Ferkel eher von einer Gebrechlichkeit betroffen sind als weibliche Ferkel. Oder wir sagen, dass ein ansteigender CRP Wert führt zu weniger Gebrechlichkeit. Auf diesem Niveau lassen sich die \\(OR\\) einer ordinalen Regression gut interpretieren.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#sec-mult-comp-ord-reg",
    "href": "stat-modeling-multinom.html#sec-mult-comp-ord-reg",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.5 Gruppenvergleich",
    "text": "57.5 Gruppenvergleich\nIn diesem Abschnitt wollen wir Gruppenvergleich mit dem Cumulative Link Models (CLM) für ordinale Daten rechnen. Oder andersherum, wir haben Boniturdaten vorliegen und wollen hierfür einen multipen Vergleich rechnen. Mehr zu dem Modell findest du im Tutorium zu Introduction to Cumulative Link Models (CLM) for Ordinal Data. Wir konzentrieren uns hier direkt auf die Auswertung an einem Spieldatensatz. Daran können wir dann einfacher erkennen, was bei einem Vergleich rauskommt, wenn wir wissen was wir reingesteckt haben. Wenn du mehr zu dem Thema lesen willst, dann hilft eventuell auch die Hilfeseite zu Ordinal models with {emmeans}. Ich muss aber sagen, dass die Seite etwas theoretisch ist.\nWir bauen uns jetzt einen Spieldatensatz mit zwanzig Boniturnoten für drei Tierarten. Ich nehme hier nur fünf Notenschritte, da sonst die Sachlage sehr unübersichtlich wird. Im Prinzip generieren wir uns mit der Funktion sample nach vorgegeben Wahrscheinlichkeiten für jede Note zwanzig Boniturnoten für jede Tierart. Dabei haben Katzen eine niedrigere Note als Hunde und die Hunde haben schlechtere Noten als die Füchse. Am Ende brauchen wir dann noch einen geordneten Faktor likert_ord damit wir die ordinale Regression rechnen können. Die ursprünglichen Noten behalte ich als numerisch um die Daten besser in {ggplot} abbilden zu können.\n\n\nR Code [zeigen / verbergen]\nset.seed(20231201)\nn_grp &lt;- 20\ngrade_tbl &lt;- tibble(trt = gl(3, n_grp, labels = c(\"cat\", \"dog\", \"fox\")),\n                    likert = c(sample(1:5, size = n_grp, replace = TRUE, prob = c(0.2, 0.5, 0.2, 0.1, 0.0)),\n                               sample(1:5, size = n_grp, replace = TRUE, prob = c(0.1, 0.2, 0.5, 0.2, 0.0)),\n                               sample(1:5, size = n_grp, replace = TRUE, prob = c(0.0, 0.0, 0.2, 0.5, 0.3)))) |&gt; \n  mutate(likert_ord = ordered(likert))\n\n\nDann berechnen wir einmal die mittleren Boniturnoten für die drei Tierarten. Wir sehen, dass wir ziemlich gerade Durchschnittsnoten haben.\n\n\nR Code [zeigen / verbergen]\ngrade_tbl |&gt; \n  group_by(trt) |&gt; \n  summarise(mean(likert))\n\n\n# A tibble: 3 × 2\n  trt   `mean(likert)`\n  &lt;fct&gt;          &lt;dbl&gt;\n1 cat              2  \n2 dog              3  \n3 fox              4.1\n\n\nJetzt können wir die Daten auch schon in die ordinale Regression mit clm() stecken. Da die Noten alle den gleichen Abstand zueinander haben, nutzen wir die Option threshold = \"symmetric\". Wir brauchen hier die Ausgabe der Moelldierung gar nicht weiter im Detail. Wir nutzen den Fit dann gleich in der ANOVA und {emmeans} für den Gruppenvergleich der mittleren Boniturnoten.\n\n\nR Code [zeigen / verbergen]\nclm_fit &lt;- clm(likert_ord ~ trt, data = grade_tbl,\n               threshold = \"symmetric\")\n\n\nDie ANOVA funktioniert wie gewohnt. Wir müssen hier auch nichts anpassen, wir kriegen einfach so unsere p-Werte geliefert. Wir haben einen signifikanten Effekt der Tierarten, was ja auch zu erwarten war. Die Boniturnoten unterscheiden sich zwischen Katzen, Hunden und Füchsen.\n\n\nR Code [zeigen / verbergen]\nanova(clm_fit)\n\n\nType I Analysis of Deviance Table with Wald chi-square tests\n\n    Df  Chisq Pr(&gt;Chisq)    \ntrt  2 33.628  4.986e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nDann können wir auch schon den multipen Gruppenvergleich rechnen. Da wir die mittleren Boniturnoten wiedergegeben haben wollen, nutzen wir die Option mode = \"mean.class\". Sonst würden wir andere Werte erhalten, die dann wirklich schwer zu interpretieren sind. Wie du siehst, sind es die gleichen Werte die wir auch oben für unsere Mittelwerte über die Boniturnoten berechnet haben.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- clm_fit |&gt; \n  emmeans(~ trt, mode = \"mean.class\")\n\n\nDann können wir uns auch schon das compact letter display wiedergeben lassen. Auch hier gibt es keine Überraschung, die drei Tierarten unterscheiden sich. Mit der Ausgabe könnten wir dann auch gleich ein Säulendigramm erstellen, aber das zeige ich gleich mal in dem zweiten Beispiel für zwei Faktoren und der Bonitur von Weizen.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  cld(Letters = letters)\n\n\n trt mean.class    SE  df asymp.LCL asymp.UCL .group\n cat       1.98 0.169 Inf      1.65      2.31  a    \n dog       3.00 0.162 Inf      2.68      3.32   b   \n fox       4.09 0.162 Inf      3.77      4.40    c  \n\nConfidence level used: 0.95 \nP value adjustment: tukey method for comparing a family of 3 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nIn unserem zweiten Beispiel schauen wir uns einen zweifaktoriellen Datensatz einmal an. Wir haben Weizen angepflanzt und bonitieren die Weizenpflanzen nach der Likert Skala. Dabei bedeutet dann eine 1 ein schlechte Note und eine 9 die bestmögliche Note. Wir hätten natürlich hier auch einen Kurskal-Wallis-Test rechnen können und dann im Anschluss einen paarweisen Wilcoxon Test. Nun modellieren wir hier aber die Boniturnoten mal mit einer ordinalen Regression und rechnen den anschließenden Gruppenvergleich dann mit dem R Paket {emmeans}.\nUnser Datensatz grade_tbl enthält den Faktor block mit drei Levels sowie den Faktor variety mit fünf Leveln. Jedes Level repräsentiert dabei eine Weizensorte. Wichtig ist hier, dass wir die Noten als geordneten Faktor mit der Funktion ordered erstellen. Nur dann haben die Noten eine Ordnung und die folgenden Funktionen erkennen dann auch die Spalte grade_ord als eine ordinale Spalte mit Noten.\n\n\nR Code [zeigen / verbergen]\ngrade_tbl &lt;- tibble(block = rep(c(\"I\", \"II\", \"III\"), each = 3),\n                    A = c(2, 3, 4, 3, 3, 2, 4, 2, 1),\n                    B = c(7, 9, 8, 9, 7, 8, 9, 6, 7),\n                    C = c(6, 5, 5, 7, 5, 6, 4, 7, 6),\n                    D = c(2, 3, 1, 2, 1, 1, 2, 2, 1),\n                    E = c(4, 3, 7, 5, 6, 4, 5, 7, 5)) |&gt;\n  gather(key = variety, value = grade, A:E) |&gt; \n  mutate(grade_ord = ordered(grade))\n\n\nWir schauen uns nochmal den Datensatz an und sehen, dass wir einmal die Spalte grade als numerische Spalte vorliegen haben und einmal als geordneten Faktor. Wir brauchen die numerische Spalte um die Daten besser in ggplot() darstellen zu können.\n\n\nR Code [zeigen / verbergen]\ngrade_tbl |&gt; head(4)\n\n\n# A tibble: 4 × 4\n  block variety grade grade_ord\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;ord&gt;    \n1 I     A           2 2        \n2 I     A           3 3        \n3 I     A           4 4        \n4 II    A           3 3        \n\n\nIn Abbildung 57.1 sehen wir einmal die Daten als Dotplot dargestellt. Auf der x-Achse sind die Weizensorten und auf der y-Achse die Boniturnoten. Ich habe noch die zusätzlichen Linien für jede einzelne Note mit eingezeichnet.\n\n\nR Code [zeigen / verbergen]\nggplot(grade_tbl, aes(variety, grade, fill = block)) +\n  theme_minimal() +\n  geom_dotplot(binaxis = \"y\", stackdir='center', \n               position=position_dodge(0.6), dotsize = 0.75) +\n  scale_y_continuous(breaks = 1:9, limits = c(1,9)) +\n  scale_fill_okabeito() \n\n\n\n\n\n\n\n\nAbbildung 57.1— Dotplot des Datenbeispiels für die Bonitur von fünf Weizensorten.\n\n\n\n\n\nJetzt können wir schon die Funktion clm() aus dem R Paket {ordinal} verwenden um die ordinale Regression zu rechnen. Wir haben in dem R Paket {ordinal} noch weitere Modelle zu Verfügung mit denen wir auch komplexere Designs bis hin zu linearen gemischten Modellen für eine ordinale Regresssion rechnen können. Da wir mit Boniturnoten als Outcome arbeiten setzen wir auch die Option threshold = \"symmetric\". Damit teilen wir der Funktion clm() mit, dass wir es mit einer symmetrischen Notenskala zu tun haben. Wenn du das nicht hast, dass kannst du die Option auch auf \"flexible\" stellen. Dann wird eine nicht symmetrische Verteilung des Outcomes angenommen.\n\n\nR Code [zeigen / verbergen]\nclm_fit &lt;- clm(grade_ord ~ variety + block + variety:block, data = grade_tbl,\n               threshold = \"symmetric\")\n\n\nEs ist auch möglich auf dem Modellfit eine ANOVA zu rechnen. Wir machen das hier einmal, aber wir erwarten natürlich einen signifikanten Effekt von der Sorte. Die Signifikanz konnten wir ja schon oben im Dotplot sehen.\n\n\nR Code [zeigen / verbergen]\nanova(clm_fit)\n\n\nType I Analysis of Deviance Table with Wald chi-square tests\n\n              Df   Chisq Pr(&gt;Chisq)    \nvariety        4 38.7587  7.813e-08 ***\nblock          2  0.0987     0.9518    \nvariety:block  8  4.9452     0.7634    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nJetzt nutzen wir wieder den Modellfit für unseren Gruppenvergleich in {emmeans}. Wir nutzen dafür wieder die Funktion emmeans() und lassen uns das compact letter display über die Funktion cld() wiedergeben. Da wir hier eigentlich keinen signifikanten Effekt der Blöcke vorliegen haben, könnten wir auch einfach die Option ~ variety nutzen und den Block weglassen. Dann wäre auch die Ausgabe mit den compact letter display etwas übersichtlicher. Ich habe dann noch die Ausgabe einmal nach den Sorten sortiert und nicht nach dem compact letter display um hier etwas mehr Übersicht zu erhalten.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- clm_fit |&gt; \n  emmeans(~ variety * block, mode = \"mean.class\") |&gt; \n  cld(Letters = letters) |&gt; \n  arrange(variety)\nemm_obj\n\n\n variety block mean.class    SE  df asymp.LCL asymp.UCL .group \n A       III         2.23 0.600 Inf     1.054      3.41  abc   \n A       II          2.68 0.484 Inf     1.737      3.63  abc   \n A       I           3.02 0.540 Inf     1.960      4.08  abcd  \n B       III         7.17 0.623 Inf     5.949      8.39      ef\n B       I           7.97 0.502 Inf     6.985      8.95       f\n B       II          7.97 0.502 Inf     6.985      8.95       f\n C       I           5.32 0.550 Inf     4.238      6.40     de \n C       III         5.76 0.672 Inf     4.441      7.08     def\n C       II          5.98 0.582 Inf     4.835      7.12      ef\n D       II          1.39 0.349 Inf     0.709      2.08  a     \n D       III         1.76 0.417 Inf     0.938      2.57  ab    \n D       I           2.03 0.502 Inf     1.048      3.02  ab    \n E       I           4.34 0.739 Inf     2.888      5.78   bcde \n E       II          5.00 0.597 Inf     3.829      6.17    cde \n E       III         5.58 0.616 Inf     4.369      6.78     def\n\nConfidence level used: 0.95 \nP value adjustment: tukey method for comparing a family of 15 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nIn der Abbildung 57.2 siehst du dann einmal die Ausgabe des multipen Gruppenvergleichs visualisiert. Hier wäre es dann schon fast sinnvoll über die Blöcke zu mitteln und daher den Block aus dem Modell zu nehmen. Der Block hat keinen Effekt und sorgt aber für noch mehr Vergleiche, die gerechnet werden müssen. Du kannst dann ja oben nochmal die Funktion emmeans() anpassen und gemittelt über alle Blöcke mit der Option ~ variety rechnen. Die Funktion str_trim() entfernt dann noch die Leerzeichen von dem compact letter display und zentriert damit alles schön.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = variety, y = mean.class, fill = block)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Boniturnote\", x = \"Sorte\",\n       fill = \"Block\") +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = str_trim(.group), y = mean.class + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = mean.class-SE, ymax = mean.class+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 57.2— Säulendigramm der mittleren Boniturnote des Weizen aus einer ordinalen Regression. Das compact letter display wird dann in {emmeans} generiert. Teilweise kommt das compact letter display an seine visuellen Grenzen. Hier wäre es dann schon fast sinnvoll über die Blöcke zu mitteln und daher den Block aus dem Modell zu nehmen.\n\n\n\n\n\n\n\n\n\n\n\nAnwendungsbeispiel: Gruppenvergleich für eine Bonitur\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit Brokkoli an. Wir haben uns in diesem Experiment verschiedene Dosen fert_amount von einem Dünger aufgebracht sowie verschiedene Zeitpunkte der Düngung fert_time berücksichtigt. Ziel ist es die Boniturnoten für den Stamm von Brokkoli miteinander zu vergleichen. Auch hier haben wir einige Besonderheiten in den Daten, da nicht jede Faktorkombination vorliegt. Wir ignorieren aber diese Probleme und rechnen einfach stumpf unseren Gruppenvergleich. Wir müssen aber ein paar Anpassungen durchführen. Unsere Noten müssen ein geordneter Faktor sein, daher nutzen wir die Funktion ordered. Darüber hinaus schmeißen wir die Düngerzeit early aus den Daten, da wir zu dem Zeitpunkt keine hohlen Stämme bonitiert haben.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl &lt;- read_excel(\"data/broccoli_weight.xlsx\") |&gt; \n  mutate(fert_time = factor(fert_time, levels = c(\"none\", \"early\", \"late\")),\n         fert_amount = as_factor(fert_amount),\n         block = as_factor(block),\n         stem_hollowness_num = stem_hollowness,\n         stem_hollowness = ordered(stem_hollowness)) |&gt;\n  filter(fert_time == \"early\") |&gt; \n  select(fert_time, fert_amount, block, stem_hollowness, stem_hollowness_num) |&gt; \n  droplevels() |&gt; \n  na.omit()\n\n\nIm Folgenden einmal die Tabelle mit tabyl aus dem R Paket {janitor}. Mehr dazu auf der Hilfeseite zu tabyls: a tidy, fully-featured approach to counting things. Wir sehen, dass wir kaum schlechte Noten erhalten. Fast alle Brokkoliköpfe haben eine 1 erhalten, was für intakte Köpfe ohne einen hohlen Stamm spricht.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl |&gt; \n  tabyl(stem_hollowness, fert_amount) \n\n\n stem_hollowness 150 225 300\n               1 213 329 154\n               2   6  47  15\n               3   4  32  22\n               4   2  14  17\n               5   1  10   4\n               6   0   3   2\n               8   0   1   0\n\n\nDie Tabelle sehen wir dann auch nochmal in der Abbildung 57.3 als Violinplot visualisiert. Wir sehen hier nochmal sehr drastisch, dass wir kaum Noten großer als Eins in den Daten vorliegen haben.\n\n\nR Code [zeigen / verbergen]\nggplot(broc_tbl, aes(fert_amount, stem_hollowness_num, fill = fert_amount)) +\n  theme_minimal() +\n  geom_violin() +\n  scale_y_continuous(breaks = 1:9, limits = c(1,9)) +\n  scale_fill_okabeito() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nAbbildung 57.3— Violinplot der Boniturnoten der Brokkolistämme. Klar ist die sehr schiefe Verteilung der Boniturnoten zu erkennen.\n\n\n\n\n\nWir rechnen jetzt natürlich trotzdem eine ordinale Regression mit der Funktion clm(). Wir setzen die Option theshold = \"symmetric\" da wir davon ausgehen, dass unsere Noten alle den gleichen Abstand zueinander haben.\n\n\nR Code [zeigen / verbergen]\nclm_fit &lt;- clm(stem_hollowness ~ fert_amount, \n               data = broc_tbl, threshold = \"symmetric\")\n\n\nJetzt rechnen wir in den beiden folgenden Tabs einmal die ANOVA und dann auch den multiplen Gruppenvergleich mit {emmeans}. Da wir hier ordinale Daten haben, können wir dann nicht einfach die Standardverfahren nehmen. Wir entscheiden uns dann für den Standardfehler bei der Darstellung.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA und nutzen den \\(\\mathcal{X}^2\\)-Test für die Ermittelung der p-Werte. Wir müssen hier einen Test auswählen, da per Standardeinstellung kein Test gerechnet wird. Wir machen dann die Ausgabe nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\nclm_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter   | Chi2(2) |      p\n------------------------------\nfert_amount |   35.82 | &lt; .001\n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass der die Menge des Düngers signifikant ist. Wir haben nicht mehr Faktoren in dem Modell gehabt, so dass wir hier auch keine weiteren Aussagen tätigen können.\n\n\nIm Folgenden rechnen wir einmal für den Faktor fert_amount einen Gruppenvergleich. Wir setzen hier die Option mean.class damit wir dann die mittleren Noten wiedergegeben bekommen. Mit den mittleren Noten können wir dann ein Säulendiagramm erstellen. Dann adjustieren wir noch nach Bonferroni und sind fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- clm_fit |&gt; \n  emmeans(~ fert_amount, mode = \"mean.class\") |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n fert_amount mean.class     SE  df asymp.LCL asymp.UCL .group\n 150               1.11 0.0308 Inf      1.04      1.18  a    \n 225               1.50 0.0485 Inf      1.39      1.62   b   \n 300               1.61 0.0753 Inf      1.43      1.79   b   \n\nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 3 estimates \nP value adjustment: bonferroni method for 3 tests \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die mean.class stellt den mittleren Noten des Brokkoli für die Menge der Düngung dar. Wir nutzen dann auch hier die Standardfehler für die Abbildungen, da wir sonst schnelle Werte kleiner 0 und größer 9 erhalten. Dann können wir zum Abschluss auch das compact letter display anhand der Abbildung interpretieren.\nGerade in diesem Beispiel bietet es sich an, dass wir explizit mindestens einen Notenpunktunterschied vorliegen haben wollen, damit wir von einem relevanten Unterschied sprechen können. Die Funktion cld() erlaubt es ein \\(\\Delta\\) zu definieren, dass mindestens überschritten sein muss, damit wir einen Unterschied feststellen. Alles was in dem Bereich \\(\\pm\\Delta\\) liegt, gilt dann als gleich auch wenn es sonst signifikant wäre. Deshalb setzen wir die Option delta = 1 um sicherzustellen, dass nur relevante Unterschiede auch als solche angezeigt werden. Daher haben wir nach der Anpassung auch keine signifikanten Unterschiede mehr. Alle Gruppen sind gleich.\n\n\nR Code [zeigen / verbergen]\nclm_fit |&gt; \n  emmeans(~ fert_amount, mode = \"mean.class\") |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\", delta = 1)\n\n\n fert_amount mean.class     SE  df asymp.LCL asymp.UCL .equiv.set\n 150               1.11 0.0308 Inf      1.04      1.18  a        \n 225               1.50 0.0485 Inf      1.39      1.62  a        \n 300               1.61 0.0753 Inf      1.43      1.79  a        \n\nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 3 estimates \nP value adjustment: bonferroni method for 3 tests \nStatistics are tests of equivalence with a threshold of 1 \nP values are left-tailed \nsignificance level used: alpha = 0.05 \nEstimates sharing the same symbol test as equivalent \n\n\n\n\n\nIn der Abbildung 60.23 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Zwar sind die mittleren Boniturnoten signifikant unterschiedlich, aber ist der Effekt auf der vollen Boniturnotenskala kaum zu sehen. Wir haben es hier mit knapp einer Notenstufe Unterschied zu tun und das ist wirklich wenig. Daher wäre hier mal der Fall, dass wir einen signifikanten aber nicht relevanten Unterschied vorliegen haben.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = fert_amount, y = mean.class, fill = fert_amount)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Boniturnote\", x = \"Düngemenge [mg/l]\",\n       fill = \"Düngemenge [mg/l]\") +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = str_trim(.group), y = mean.class + SE + 0.01), vjust = -0.25) +\n  geom_errorbar(aes(ymin = mean.class-SE, ymax = mean.class+SE),\n                width = 0.2) +\n  scale_fill_okabeito() +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(breaks = c(0, 0.5, 1.0, 1.5, 2.0), limits = c(0, 2))\n\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = fert_amount, y = mean.class, fill = fert_amount)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Boniturnote\", x = \"Düngemenge [mg/l]\",\n       fill = \"Düngemenge [mg/l]\") +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = str_trim(.group), y = mean.class + SE + 0.01), vjust = -0.25) +\n  geom_errorbar(aes(ymin = mean.class-SE, ymax = mean.class+SE),\n                width = 0.2) +\n  scale_fill_okabeito() +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(breaks = 0:9, limits = c(0,9))\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Reduzierte Boniturskala.\n\n\n\n\n\n\n\n\n\n\n\n(b) Volle Boniturskala.\n\n\n\n\n\n\n\nAbbildung 57.4— Säulendigramm der mittleren Boniturnote des Brokkoli aus einer ordinalen Regression. Das clm()-Modell berechnet das mittlere Boniturnote für den Faktor fert_amount. Das compact letter display wird dann in {emmeans} generiert. Wir nutzen hier den Standardfehler, da die Standardabweichung mit der großen Fallzahl rießig wäre.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#sec-multinom",
    "href": "stat-modeling-multinom.html#sec-multinom",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.6 Multinomiale logistische Regression",
    "text": "57.6 Multinomiale logistische Regression\nWas machen wir in eine multinomialen logistische Regression? Im Gegensatz zu der ordinalen Regression haben wir in der multinominalen Regression keine Ordnung in unserem Outcome. Das macht die Sache dann schon eine Nummer komplizierter. Und wir lösen dieses Problem indem wir ein Level des Outcomes oder eben eine Kategorie des Outcomes als Referenz definieren. Dann haben wir wieder unsere Ordnung drin. Und die Definition der Referenz ist auch manchmal das schwerste Unterfangen. Wenn ich keine Ordnung in meinem Outcome habe, wie soll ich dann die Referenz bestimmen? Aber das ist dann immer eine Frage an den konkreten Datensatz. Hier basteln wir uns ja die Fragestellung so hin, dass es passt.\n\n\nIch verweise gerne hier auf das tolle Tutorium Multinomial Logistic Regression | R Data Analysis Examples. Hier erfährst du noch mehr über die Analyse der multinominale logistischen Regression.\nUm eine Referenz in dem Outcome zu definieren nutzen wir die Funktion relevel() und setzen als unsere Referenz das Level frail aus unserem Outcome frailty. Wir hätten auch jedes andere Level als Referenz nehmen können. Zu dieser Referenz werden wir jetzt unser Modell anpassen. Ich nehme immer als Referenz das schlechteste im Sinne von nicht gut. In unserem Fall ist das eben das Level frail.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- pig_tbl |&gt; \n  mutate(frailty_fac = relevel(frailty_fac, ref = \"frail\"))\n\n\nNachdem wir unsere Referenz definiert haben, können wir wieder recht einfach mit der Funktion multinom() aus dem Paket {nnet} die multinominalen Regression rechnen. Ich mache keinen Hehl daraus. Ich mag die Funktion nicht, da die Ausgabe der Funktion sehr unsortiert ist und uns nicht gerade die Arbeit erleichtert. Auch schweigt die Funktion nicht, sondern muss immer eine Ausgabe wiedergeben. Finde ich sehr unschön.\n\n\nR Code [zeigen / verbergen]\nmultinom_fit &lt;- multinom(frailty_fac ~ age + sex + location + activity + crp + bloodpressure + weight + creatinin, \n                         data = pig_tbl)\n\n\n# weights:  36 (22 variable)\ninitial  value 452.628263 \niter  10 value 403.652821\niter  20 value 392.117661\niter  30 value 391.553171\nfinal  value 391.549041 \nconverged\n\n\nDie Standardausgabe von multinom() hat wiederum keine \\(p\\)-Werte und wir könnten uns über die Funktion pnorm() wiederum aus den \\(t\\)-Werten unsere \\(p\\)-Werte berechnen. Leider erspart sich multinom() selbst den Schritt die \\(t\\)-Werte zu berechnen, so dass wir die \\(t\\)-Werte selber berechnen müssen. Nicht das es ein Problem wäre, aber schön ist das alles nicht. Im Folgenden siehst du dann einmal die Berechnung der \\(p\\)-Werte über die Berechnung der Teststatistik.\n\n\nR Code [zeigen / verbergen]\nz_mat &lt;- summary(multinom_fit)$coefficients/summary(multinom_fit)$standard.errors\np_n &lt;- (1 - pnorm(abs(z_mat), 0, 1)) * 2\np_n\n\n\n          (Intercept)       age    sexmale locationnortheast locationnorthwest\nrobust      0.9330415 0.8633078 0.16908717         0.4269151         0.6194343\npre-frail   0.7114684 0.1360834 0.03831569         0.7078459         0.6316654\n          locationwest   activity       crp bloodpressure    weight creatinin\nrobust       0.6632781 0.09080926 0.3594687     0.1421612 0.1134502 0.7118954\npre-frail    0.7383270 0.06115011 0.5643200     0.4895252 0.0683936 0.6178310\n\n\nJetzt müssten wir diese \\(pp\\)-Werte aus der Matrix noch mit unseren Koeffizienten verbauen und da hört es dann bei mir auf. Insbesondere da wir ja mit model_parameters() eine Funktion haben, die uns in diesem Fall wirklich gut helfen kann. Wir nehmen hier zwar die \\(t\\)-Verteilung an und haben damit leicht höre \\(p\\)-Werte, aber da wir eine so große Anzahl an Beobachtungen haben, fällt dieser Unterschied nicht ins Gewicht.\n\n\nR Code [zeigen / verbergen]\nmultinom_fit |&gt; model_parameters(exponentiate = TRUE)\n\n\n# Response level: robust\n\nParameter            | Odds Ratio |   SE |           95% CI |     z |     p\n---------------------------------------------------------------------------\n(Intercept)          |       1.50 | 7.27 | [0.00, 19843.63] |  0.08 | 0.933\nage                  |       0.99 | 0.03 | [0.93,     1.06] | -0.17 | 0.863\nsex [male]           |       0.54 | 0.24 | [0.23,     1.29] | -1.38 | 0.169\nlocation [northeast] |       1.45 | 0.67 | [0.58,     3.60] |  0.79 | 0.427\nlocation [northwest] |       0.82 | 0.32 | [0.38,     1.77] | -0.50 | 0.619\nlocation [west]      |       0.82 | 0.37 | [0.34,     1.98] | -0.44 | 0.663\nactivity             |       1.22 | 0.14 | [0.97,     1.54] |  1.69 | 0.091\ncrp                  |       0.91 | 0.10 | [0.73,     1.12] | -0.92 | 0.359\nbloodpressure        |       1.07 | 0.05 | [0.98,     1.18] |  1.47 | 0.142\nweight               |       0.84 | 0.09 | [0.68,     1.04] | -1.58 | 0.113\ncreatinin            |       1.04 | 0.11 | [0.84,     1.29] |  0.37 | 0.712\n\n# Response level: pre-frail\n\nParameter            | Odds Ratio |   SE |          95% CI |     z |     p\n--------------------------------------------------------------------------\n(Intercept)          |       0.15 | 0.77 | [0.00, 3351.94] | -0.37 | 0.711\nage                  |       1.06 | 0.04 | [0.98,    1.13] |  1.49 | 0.136\nsex [male]           |       0.38 | 0.18 | [0.16,    0.95] | -2.07 | 0.038\nlocation [northeast] |       1.20 | 0.60 | [0.46,    3.17] |  0.37 | 0.708\nlocation [northwest] |       0.82 | 0.34 | [0.37,    1.84] | -0.48 | 0.632\nlocation [west]      |       1.17 | 0.54 | [0.47,    2.90] |  0.33 | 0.738\nactivity             |       1.26 | 0.16 | [0.99,    1.61] |  1.87 | 0.061\ncrp                  |       0.94 | 0.11 | [0.75,    1.17] | -0.58 | 0.564\nbloodpressure        |       1.04 | 0.05 | [0.94,    1.14] |  0.69 | 0.490\nweight               |       0.81 | 0.09 | [0.65,    1.02] | -1.82 | 0.068\ncreatinin            |       1.06 | 0.12 | [0.85,    1.33] |  0.50 | 0.618\n\n\nWas sehen wir? Zuerst haben wir etwas Glück. Den unsere Referenzlevel macht dann doch Sinn. Wir vergleichen ja das Outcomelevel robust zu frail und das Outcomelevel pre-frail zu frail. Dann haben wir noch das Glück, dass durch unsere Ordnung dann auch frail das schlechtere Outcome ist, so dass wir die \\(OR\\) als Risiko oder als protektiv interpretieren können. Nehmen wir als Beispiel einmal die Variable crp. Der CRP Wert höht das Risiko für frail. Das macht schonmal so Sinn. Und zum anderen ist der Effekt bei dem Vergleich von pre-frail zu frail mit \\(1.16\\) nicht so große wie bei robust zu frail mit \\(1.26\\). Das macht auch Sinn. Deshalb passt es hier einigermaßen.\nIn Tabelle 57.3 sehen wir nochmal die Ausgabe von einer multinominalen Regression durch die Funktion tbl_regression() aufgearbeitet.\n\n\nR Code [zeigen / verbergen]\nmultinom_fit |&gt; \n  tbl_regression(exponentiate = TRUE) |&gt; \n  as_flex_table()\n\n\n\n\nTabelle 57.3— Tabelle der Ergebnisse der multinominalen Regression.\n\n\n\nOutcomeCharacteristicOR195% CI1p-valuerobustage0.990.93, 1.060.9sexfemale——male0.540.23, 1.290.2locationnorth——northeast1.450.58, 3.600.4northwest0.820.38, 1.770.6west0.820.34, 1.980.7activity1.220.97, 1.540.091crp0.910.73, 1.120.4bloodpressure1.070.98, 1.180.14weight0.840.68, 1.040.11creatinin1.040.84, 1.290.7pre-frailage1.060.98, 1.130.14sexfemale——male0.380.16, 0.950.038locationnorth——northeast1.200.46, 3.170.7northwest0.820.37, 1.840.6west1.170.47, 2.900.7activity1.260.99, 1.610.061crp0.940.75, 1.170.6bloodpressure1.040.94, 1.140.5weight0.810.65, 1.020.068creatinin1.060.85, 1.330.61OR = Odds Ratio, CI = Confidence Interval\n\n\n\n\n\nLeider wird die Sache mit einer multinominalen Regression sehr unangenehm, wenn wir wirklich nicht sortierbare Level im Outcome haben. Dann haben wir aber noch ein Möglichkeit der multinominalen Regression zu entkommen. Wir rechnen einfach separate logistische Regressionen. Die logistischen Regressionen können wir dann ja separat gut interpretieren.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#logistische-regression-als-ausweg",
    "href": "stat-modeling-multinom.html#logistische-regression-als-ausweg",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "57.7 Logistische Regression als Ausweg",
    "text": "57.7 Logistische Regression als Ausweg\n\n\n\n\n\n\nBitte Beachten bei der Berechung über separate logistische Regressionen\n\n\n\nDurch die Verwendung von separaten logistischen Regressionen vermindern wir die Fallzahl je gerechneter Regression, so dass wir größere \\(p\\)-Werte erhalten werden als in einer multinominalen Regression. Oder andersherum, durch die verminderte Fallzahl in den separaten logistischen Regressionen haben wir eine geringere Power einen signifikanten Unterschied nachzuweisen.\n\n\nEs gibt den einen Ring um sich zu knechten. Und das ist die logistische Regression. Gut die logistische Regression hilft jetzt nicht, wenn es mit Boniturnoten zu tun hast, aber wenn wir wenige Level im Outcome haben. In unserem Fall haben wir ja drei Level vorliegen, da können wir dann jeweils ein Level rausschmeißen und haben dann nur noch ein binäres Outcome. Das ist auch die zentrale Idee. Wir entfernen immer alle Level bis wir nur noch zwei Level in unserem Outcome haben und rechnen für diese beiden Level dann eine logistische Regression.\nSchauen wir uns erstmal an, wie sich die Daten über die drei Kategorien in unserem Outcome verteilen. Wenn wir eine Kategorie im Outcome kaum vorliegen haben, könnten wir diese Daten vielleicht mit einer anderen Kategorie zusammenlegen oder aber müssen von unserer Idee hier Abstand nehmen.\n\n\nR Code [zeigen / verbergen]\npig_tbl$frailty_fac |&gt; tabyl()\n\n\n pig_tbl$frailty_fac   n   percent\n               frail  55 0.1334951\n              robust 214 0.5194175\n           pre-frail 143 0.3470874\n\n\nWir haben nicht so viele Beobachtungen in der Kategorie frail. Wir könnten also auch die beiden Faktorlevel pre-frail und frail zusammenlegen. Das R Paket {forcats} liefert sehr viele Funktion, die dir helfen Faktoren zu kodieren und zu ändern.\n\n\nR Code [zeigen / verbergen]\npig_tbl$frailty_fac |&gt; \n  fct_recode(frail_pre_frail = \"frail\", frail_pre_frail = \"pre-frail\") |&gt; \n  tabyl()\n\n\n fct_recode(pig_tbl$frailty_fac, frail_pre_frail = \"frail\", frail_pre_frail = \"pre-frail\")\n                                                                           frail_pre_frail\n                                                                                    robust\n   n   percent\n 198 0.4805825\n 214 0.5194175\n\n\nDas ist jetzt aber nur eine Demonstration für die Zusammenlegung. Wir wollen jetzt trotzdem unsere drei logistischen Regressionen rechnen. Warum drei? Wir haben ja drei Level in unserem Outcome und wir werden jetzt uns drei Datensätze so bauen, dass in jdem Datensatz unser Outcome immer nur zwei Level hat. Die einzelnen Datensätze speichern wir dann in einer Liste.\n\n\nR Code [zeigen / verbergen]\npig_lst &lt;- list(robust_prefrail = filter(pig_tbl, frailty_fac %in% c(\"robust\", \"pre-frail\")),\n                robust_frail = filter(pig_tbl, frailty_fac %in% c(\"robust\", \"frail\")),\n                prefrail_frail = filter(pig_tbl, frailty_fac %in% c(\"pre-frail\", \"frail\")))\n\n\nWir können das auch fancy. Und das demonstriere ich dann mal hier. Wenn wir die Funktion combn() nutzen erhalten wir eine Liste mit allen zweier Kombinationen wieder. Diese Liste können wir dann in die Funktion map() stecken, die dann über die Liste unserer Kombinationen iteriert. Pro Liste filtern map() dann den Datensatz für uns heraus. Ja, ist ein wenig over the top, aber ich wollte das mal für mich mit map() ausprobieren und es passte hier so schön.\n\n\nR Code [zeigen / verbergen]\npig_fancy_lst &lt;- combn(c(\"robust\", \"pre-frail\", \"frail\"), 2, simplify = FALSE) |&gt; \n  map(~filter(pig_tbl, frailty_fac %in% .x)) \n\n\nEgal wie du auf die Liste gekommen bist, wir müssen noch die überflüssigen Level droppen. Keine Ahnung was das deutsche Wort ist. Vermutlich ist das deutsche Wort dann entfernen. Dann können wir für jeden der Listeneinträge die logistische Regression rechnen. Am Ende lassen wir uns noch die exponierten Modellfits ausgeben. In der letzten Zeile entferne ich noch den Intercept von der Ausgabe des Modells. Den Intercept brauchen wir nun wirklich nicht.\n\n\nR Code [zeigen / verbergen]\npig_lst |&gt; \n  map(~mutate(.x, frailty_fac = fct_drop(frailty_fac))) |&gt; \n  map(~glm(frailty_fac ~ age + sex + location + activity + crp + bloodpressure + weight + creatinin, \n           data = .x, family = binomial)) |&gt; \n  map(model_parameters, exponentiate = TRUE) |&gt; \n  map(extract, -1, )\n\n\n$robust_prefrail\nParameter            | Odds Ratio |   SE |       95% CI |     z |     p\n-----------------------------------------------------------------------\nage                  |       1.06 | 0.03 | [1.01, 1.12] |  2.40 | 0.017\nsex [male]           |       0.70 | 0.21 | [0.39, 1.27] | -1.16 | 0.246\nlocation [northeast] |       0.80 | 0.26 | [0.42, 1.49] | -0.70 | 0.484\nlocation [northwest] |       0.97 | 0.28 | [0.55, 1.72] | -0.09 | 0.929\nlocation [west]      |       1.38 | 0.44 | [0.75, 2.57] |  1.03 | 0.302\nactivity             |       1.04 | 0.09 | [0.88, 1.23] |  0.48 | 0.631\ncrp                  |       1.03 | 0.08 | [0.88, 1.20] |  0.33 | 0.743\nbloodpressure        |       0.96 | 0.03 | [0.90, 1.03] | -1.04 | 0.300\nweight               |       0.97 | 0.08 | [0.83, 1.13] | -0.39 | 0.695\ncreatinin            |       1.02 | 0.08 | [0.87, 1.19] |  0.21 | 0.834\n\n$robust_frail\nParameter            | Odds Ratio |   SE |       95% CI |     z |     p\n-----------------------------------------------------------------------\nage                  |       1.00 | 0.04 | [0.93, 1.07] |  0.03 | 0.973\nsex [male]           |       0.52 | 0.23 | [0.22, 1.24] | -1.46 | 0.145\nlocation [northeast] |       1.45 | 0.68 | [0.59, 3.79] |  0.79 | 0.430\nlocation [northwest] |       0.85 | 0.33 | [0.39, 1.82] | -0.42 | 0.674\nlocation [west]      |       0.88 | 0.40 | [0.37, 2.18] | -0.28 | 0.780\nactivity             |       1.23 | 0.15 | [0.97, 1.58] |  1.69 | 0.090\ncrp                  |       0.92 | 0.10 | [0.75, 1.14] | -0.75 | 0.453\nbloodpressure        |       1.07 | 0.05 | [0.97, 1.18] |  1.36 | 0.172\nweight               |       0.84 | 0.10 | [0.67, 1.04] | -1.57 | 0.116\ncreatinin            |       1.04 | 0.11 | [0.84, 1.29] |  0.36 | 0.717\n\n$prefrail_frail\nParameter            | Odds Ratio |   SE |       95% CI |     z |     p\n-----------------------------------------------------------------------\nage                  |       1.05 | 0.04 | [0.98, 1.12] |  1.26 | 0.208\nsex [male]           |       0.40 | 0.19 | [0.15, 0.99] | -1.94 | 0.053\nlocation [northeast] |       1.12 | 0.57 | [0.42, 3.11] |  0.22 | 0.825\nlocation [northwest] |       0.77 | 0.33 | [0.33, 1.78] | -0.60 | 0.548\nlocation [west]      |       1.05 | 0.51 | [0.41, 2.74] |  0.11 | 0.914\nactivity             |       1.22 | 0.15 | [0.97, 1.55] |  1.69 | 0.092\ncrp                  |       0.95 | 0.11 | [0.74, 1.20] | -0.46 | 0.649\nbloodpressure        |       1.03 | 0.05 | [0.93, 1.14] |  0.57 | 0.566\nweight               |       0.84 | 0.09 | [0.67, 1.03] | -1.65 | 0.100\ncreatinin            |       1.04 | 0.13 | [0.82, 1.33] |  0.34 | 0.734\n\n\nEine Sache ist super wichtig zu wissen. Wie oben schon geschrieben, durch die Verwendung von separaten logistischen Regressionen vermindern wir die Fallzahl je Regression, so dass wir größere \\(p\\)-Werte erhalten werden, als in einer multinominalen Regression. Das ist der Preis, den wir dafür bezahlen müssen, dass wir besser zu interpretierende Koeffizienten erhalten. Und das ist auch vollkommen in Ordnung. Ich selber habe lieber Koeffizienten, die ich interpretieren kann, als unklare Effekte mit niedrigen \\(p\\)-Werten.\nSchauen wir einmal auf unseren Goldstandard, der Variable für den CRP-Wert. Die Variable haben wir ja jetzt immer mal wieder in diesem Kapitel interpretiert und uns angeschaut. Die Variable crp passt von dem Effekt jedenfalls gut in den Kontext mit rein. Die Effekte sind ähnlich wie in der multinominalen Regression. Wir haben eben nur größere \\(p\\)-Werte. Jetzt müssen wir entscheiden, wir können vermutlich die getrennten logistischen Regressionen besser beschreiben und interpretieren. Das ist besonders der Fall, wenn wir wirklich Probleme haben eine Referenz in der multinominalen Regression festzulegen. Dann würde ich immer zu den getrennten logistischen Regressionen greifen als eine schief interpretierte multinominale Regression.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-multinom.html#referenzen",
    "href": "stat-modeling-multinom.html#referenzen",
    "title": "57  Multinomiale / Ordinale Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nDormann, C. F. (2013). Parametrische Statistik. Springer.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Multinomiale / Ordinale Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html",
    "href": "stat-modeling-logistic.html",
    "title": "58  Logistische Regression",
    "section": "",
    "text": "58.1 Annahmen an die Daten\nLetzte Änderung am 25. March 2024 um 08:38:15\nDie logistische Regression ist die Regression, wenn wir rüber in die Medizin schauen. Wohl in keinem Bereich der Wissenschaften wird so viel eine logistische Regression gerechnet wie in der Humanmedizin, Epidemiologie oder Pharmazie. Wir haben in der logistischen Regression ein \\(0/1\\) Outcome als \\(y\\) vorliegen. Also entweder ist eine Beobachtung erkrankt oder nicht. Meistens beschränkt sich die Betrachtung auf erkrankt (\\(1\\), ja) oder eben nicht erkrankt (\\(0\\), nein) bzw. gesund. Wichtig hierbei ist, dass wir eigentlich immer sagen, dass das Schlechte mit \\(1\\) kodiert wird. Wenn du das machst, dann wird dir die Interpretation der Effektschätzer der logistischen Regression leichter fallen.\nGleich zu Beginn dann nochmal wir werden die logistische Regression in den Agrarwissenschaften eher selten sehen. Im Bereich der Pflanzenwissenschaften kommt die logistische Regression kaum bis gar nicht vor. Im Bereich der Tierwissenschaften schon eher, aber dort dann im Bereich der Tiermedizin und eben wieder Erkrankungen.\nWo wir hingegen dann wieder die logistische Regression brauchen, ist bei der Klassifikation oder eben der Vorhersage von einem binären Ereignis. Dafür bietet sich dann die logistische Regression wieder an. Deshalb werden wir am Ende des Kapitels nochmal was zur Klassifikation machen, obwohl das hier eigentlich nur so halb reinpasst. Wenn du nicht Klassifizieren willst, dann lasse den letzten Abschnitt einfach weg.\nUnser gemessenes Outcome \\(y\\) folgt einer Binomialverteilung. Damit finden wir im Outcome nur \\(0\\) oder \\(1\\) Werte. Im folgenden Kapitel zu der multiplen logistischen linearen Regression gehen wir davon aus, dass die Daten in der vorliegenden Form ideal sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.\nDaher sieht unser Modell wie folgt aus. Wir haben ein \\(y\\) und \\(p\\)-mal \\(x\\). Wobei \\(p\\) für die Anzahl an Variablen auf der rechten Seite des Modells steht. Im Weiteren folgt unser \\(y\\) einer Binomailverteilung. Damit finden wir im Outcome nur \\(0\\) oder \\(1\\) Werte. Das ist hier sehr wichtig, denn wir wollen ja eine multiple logistische lineare Regression rechnen. In R nutzen wir dazu die Funktion glm() mit der Option family = binomial.\n\\[\ny \\sim x_1 + x_2 + ... + x_p\n\\]\nDann würde das Modell in R wie folgt aussehen.\nR Code [zeigen / verbergen]\nglm(y ~ x_1 + x_2, ..., family = binomial)\nNeben der Möglichkeit, dass wir \\(0/1\\) im Outcome \\(y\\) haben, könnten wir auch unser Outcome anders beschreiben. Wir nutzen dann dafür das Wilkinson-Rogers Format welches dann den Anteil an Erfolgen an Fehlschlägen beschreibt. Wir schreiben aber in das Modell die konkrete Anzahl an Erfolgen und Fehlschlägen.\n\\[\n(Success|Failure) \\sim x_1 + x_2 + ... + x_p\n\\]\nIn R würden wir dann die zwei Spalten mit der Anzahl an Erfolgen und Fehlschlägen mit cbind() zusammenfassen und in glm() ergänzen. Daher würden wir dann in R wie folgt schreiben.\nR Code [zeigen / verbergen]\nglm(cbind(success, failure) ~ x_1 + x_2, ..., family = binomial)\nWir können in dem Modell auch Faktoren \\(f\\) haben, aber es geht hier am Anfang des Kapitels nicht um einen reinen Gruppenvergleich. Das ist ganz wichtig. Wenn du einen Gruppenvergleich rechnen willst, dann musst du in Kapitel 58.8 nochmal nachlesen, wir du dann das Modell weiterverwendest.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#annahmen-an-die-daten",
    "href": "stat-modeling-logistic.html#annahmen-an-die-daten",
    "title": "58  Logistische Regression",
    "section": "",
    "text": "Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das Kapitel 50 zu Imputation von fehlenden Werten.\nWenn du denkst, dass du Ausreißer oder auffällige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das Kapitel 48 zu Ausreißer in den Daten.\nWenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das Kapitel 49 bei der Variablenselektion.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#genutzte-r-pakete",
    "href": "stat-modeling-logistic.html#genutzte-r-pakete",
    "title": "58  Logistische Regression",
    "section": "58.2 Genutzte R Pakete",
    "text": "58.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, conflicted, broom,\n               parameters, performance, gtsummary, see,\n               tidymodels, cutpointr, emmeans, multcomp,\n               conflicted)\nconflicts_prefer(yardstick::accuracy)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(magrittr::extract)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#daten",
    "href": "stat-modeling-logistic.html#daten",
    "title": "58  Logistische Regression",
    "section": "58.3 Daten",
    "text": "58.3 Daten\nIn diesem Kapitel nutzen wir die infizierten Ferkel als Beispieldatensatz. Wir haben in dem Datensatz über vierhundert Ferkel untersucht und festgehalten, ob die Ferkel infiziert sind (\\(1\\), ja) oder nicht infiziert (\\(0\\), nein). Wir haben daneben noch eine ganze Reihe von Risikofaktoren erhoben. Hier sieht man mal wieder wie wirr die Sprache der Statistik ist. Weil wir rausfinden wollen welche Variable das Risiko für die Infektion erhöht, nennen wir diese Variablen Risikofaktoren. Obwohl die Variablen gar keine kategorialen Spalten sind bzw. nicht alle. So ist das dann in der Statistik, ein verwirrender Begriff jagt den Nächsten.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") \n\n\nSchauen wir uns nochmal einen Ausschnitt der Daten in der Tabelle 58.1 an.\n\n\n\n\nTabelle 58.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nlocation\nactivity\ncrp\nfrailty\nbloodpressure\nweight\ncreatinin\ninfected\n\n\n\n\n61\nmale\nnortheast\n15.31\n22.38\nrobust\n62.24\n19.05\n4.44\n1\n\n\n53\nmale\nnorthwest\n13.01\n18.64\nrobust\n54.21\n17.68\n3.87\n1\n\n\n66\nfemale\nnortheast\n11.31\n18.76\nrobust\n57.94\n16.76\n3.01\n0\n\n\n59\nfemale\nnorth\n13.33\n19.37\nrobust\n56.15\n19.05\n4.35\n1\n\n\n63\nmale\nnorthwest\n14.71\n21.57\nrobust\n55.38\n18.44\n5.27\n1\n\n\n55\nmale\nnorthwest\n15.81\n21.45\nrobust\n60.29\n18.42\n4.78\n1\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n54\nfemale\nnorth\n11.82\n21.5\npre-frail\n55.32\n19.75\n3.92\n1\n\n\n56\nmale\nwest\n13.91\n20.8\nfrail\n58.37\n17.28\n7.44\n0\n\n\n57\nmale\nnorthwest\n12.49\n21.95\npre-frail\n56.66\n16.86\n2.44\n1\n\n\n61\nmale\nnorthwest\n15.26\n23.1\nrobust\n57.18\n15.55\n3.08\n1\n\n\n59\nfemale\nnorth\n13.13\n20.23\nrobust\n56.64\n18.6\n3.41\n0\n\n\n63\nfemale\nnorth\n10.01\n19.89\nrobust\n57.46\n18.6\n4.2\n1\n\n\n\n\n\n\n\n\nIn dem nächsten Abschnitt werden wir die Daten nutzen um rauszufinden welche Variablen einen Einfluss auf den Infektionsstatus der Ferkel hat.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#theoretischer-hintergrund",
    "href": "stat-modeling-logistic.html#theoretischer-hintergrund",
    "title": "58  Logistische Regression",
    "section": "58.4 Theoretischer Hintergrund",
    "text": "58.4 Theoretischer Hintergrund\nWir schaffen wir es, durch einen \\(0/1\\) Outcome auf der y-Achse eine gerade Linie durch die Punkte zu zeichnen und die Koeffiziente dieser Gerade zu bestimmen? Immerhin gibt es ja gar keine Werte zwischen \\(0\\) und \\(1\\). In Abbildung 58.1 sehen wir beispielhaft den Zusammenhang zwischen dem Infektionsstatus und der Aktivität der Ferkel. Wir haben zwei horizontale Linien. Wie zeichen wir jetzt da eine Gerade durch?\n\n\nR Code [zeigen / verbergen]\nggplot(pig_tbl, aes(x = activity, y = infected)) +\n  theme_minimal() +\n  geom_point() +\n  scale_y_continuous(breaks = c(0, 1))\n\n\n\n\n\n\n\n\nAbbildung 58.1— Visualisierung des Zusammenhangs zwischen dem Infektionsstatus und der Aktivität der Ferkel.\n\n\n\n\n\nIn der folgenden Abbildung 58.2 sehen wir nochmal die gleiche Darstellung der Daten aus dem R Paket {see} und der entsprechenden Funktion geom_binomdensity(). Leider ist die Nutzung nicht so, wie du {ggplot} gewohnt bist, aber für die Darstellung hier ist es sehr angenehm die Verteilung der Beobachtungen besser zu sehen. Du siehst hier einmal ganz gut, wie sich die \\(0/1\\)-Werte für die infizierten Schweine über die Werte der Aktivität anordnen. In der obigen Abbdilung sind dann eben die Punkte alle übereinander angeordnet.\n\n\nR Code [zeigen / verbergen]\nggplot() +\n  theme_minimal() +\n  geom_binomdensity(pig_tbl, x = \"activity\", y = \"infected\") +\n  scale_y_continuous(breaks = c(0, 1))\n\n\n\n\n\n\n\n\nAbbildung 58.2— Visualisierung des Zusammenhangs zwischen dem Infektionsstatus und der Aktivität der Ferkel.\n\n\n\n\n\nDer Trick hierbei ist wieder die Transformation des Zusammenhangs von \\(y \\sim x\\) auf einen \\(\\log\\)-scale. Das heißt wir Rechnen nicht mit den \\(0/1\\) Werten sondern transformieren den gesamten Zusammenhang. Das ist wichtig, den es gibt einen Unterschied zwischen der Transformation von \\(y\\) und der Transformation die hier gemeint ist. Wir halten fest, wir rechnen also nicht auf der ursprünglichen Skala der Daten sondern auf der \\(\\log\\)-scale. Allgemeiner wird auch von der link-Funktion gesprochen, da wir ja verschiedene Möglichkeiten der Transformation des Zusammenhangs haben.\nHier gibt es nur die Kurzfassung der link-Funktion. Dormann (2013) liefert hierzu in Kapitel 7.1.3 nochmal ein Einführung in das Thema.\nWir gehen wir also vor. Zuerst Modellieren wir die Wahrscheinlichkeit für den Eintritt des Ereignisses. Wir machen also aus unseren binären \\(0/1\\) Daten eine Wahrscheinlichkeit für den Eintritt von 1.\n\\[\nY \\rightarrow Pr(Y = 1)\n\\]\nDamit haben wir schon was erreicht den \\(Pr(Y = 1)\\) liegt zwischen \\(0\\) und \\(1\\). Damit haben wir also schon Werte dazwischen. Wenn wir aber normalverteilte Residuen haben wollen, dann müssen unsere Werte von \\(-\\infty\\) bis \\(+\\infty\\) laufen können. Daher rechnen wir im Weiteren die Chance.\n\\[\n\\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}\n\\] Die Chance (eng. Odds) für das Eintreten von \\(Y=1\\) ist eben die Wahrscheinlichkeit für das Eintreten geteilt durch die Gegenwahrscheinlichkeit. Das ist schon besser, denn damit liegen unsere transformierten Werte für den Zusammenhang schon zwischen \\(0\\) und \\(+\\infty\\). Wenn wir jetzt noch den \\(\\log\\) von den Chancen rechnen, dann haben wir schon fast alles was wir brauchen.\n\\[\n\\log\\left(\\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}\\right)\n\\]\nDer Logarithmus der Chance liegt dann zwischen \\(-\\infty\\) und \\(+\\infty\\). Deshalb spricht man auch von den \\(\\log\\)-Odds einer logistischen Regression. Auch sieht man hier woher das logistisch kommt. Wir beschreiben im Namen auch gleich die Transformation mit. Am ende kommen wir somit dann auf folgendes Modell.\n\\[\n\\log\\left(\\cfrac{Pr(y = 1)}{1 - Pr(Y = 1)}\\right) = \\beta_0 + \\beta_1 x_1 + ...  + \\beta_p x_p + \\epsilon\n\\] Vielleicht ist dir der Begriff Wahrscheinlichkeit und der Unterschied zur Chance nicht mehr so präsent. Deshalb hier nochmal als Wiederholung oder Auffrischung.\n\nEine Wahrscheinlichkeit beschreibt dem Anteil an Allen. Zum Beispiel den Anteil Gewinner an allen Teilnehmern. Den Anteil Personen mit Therapieerfolg an allen Studienteilnehmern.\nEine Chance oder (eng. Odds) beschreibt ein Verhältnis. Somit das Verhältnis Gewinner zu Nichtgewinner. Oder das Verhältnis Personen mit Therapieerfolg zu Personen ohne Therapieerfolg\n\nNochmal an einem Zahlenbeispiel. Wenn wir ein Glücksspiel haben, in dem es 2 Kombinationen gibt die gewinnen und drei 3 Kombinationen die verlieren, dann haben wir eine Wahrscheinlichkeit zu gewinnen von \\(2 / 5 = 0.40 = 40\\%\\). Wenn wir die Chance zu gewinnen ausrechnen erhalten wir \\(2:3 = 0.67 = 67\\%\\). Wir sehen es gibt einen deutlichen Unterschied zwischen Chance und Wahrscheinlichkeit. Wenn wir große Fallzahl haben bzw. kleine Wahrscheinlichkeiten, dann ist der Unterschied nicht mehr so drastisch. Aber von einer Gleichkeit von Wahrscheinlichkeit und Chance zu sprechen kann nicht ausgegangen werden.\nWas ist nun das Problem? Wir erhalten aus einer logistischen Regression \\(\\log\\)-Odds wieder. Der Effektchätzer ist also eine Chance. Wir werden aber das Ergebnis wie eine Wahrscheinlichkeit interpretieren. Diese Diskrepanz ist wenigen bekannt und ein Grund, warum wir in der Medizin immer uns daran erinnern müssen, was wir eigentlich mit der logistischen Regression aussagen können.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#modellierung",
    "href": "stat-modeling-logistic.html#modellierung",
    "title": "58  Logistische Regression",
    "section": "58.5 Modellierung",
    "text": "58.5 Modellierung\nDie Modellerierung der logistischen Regression ist sehr einfach. Wir nutzen wieder die Formelschreibweise im glm() um unsere Variablen zu definieren. Wenn unser Outcome nicht binär ist, dann jammert R und gibt uns einen Fehler aus. Ich kann hier nur dringlichst raten, das Outcome in \\(0/1\\) zu kodieren mit dem Schlechten als \\(1\\).\nDas glm() muss dann noch wissen, dass es eine logistische Regression rechnen soll. Das machen wir in dem wir als Verteilungsfamilie die Binomialverteilung auswählen. Wir geben also an family = binomial und schon können wir das volle Modell fitten.\n\n\nR Code [zeigen / verbergen]\nlog_fit &lt;- glm(infected ~ age + sex + location + activity + crp + \n                 frailty + bloodpressure + weight + creatinin, \n               data = pig_tbl, family = binomial)\n\n\nDas war extrem kurz und scherzlos. Also können wir dann auch ganz kurz schauen, ob das Modell einigermaßen funktioniert hat.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#performance-des-modells",
    "href": "stat-modeling-logistic.html#performance-des-modells",
    "title": "58  Logistische Regression",
    "section": "58.6 Performance des Modells",
    "text": "58.6 Performance des Modells\nNachdem wir das Modell gefittet haben, wollen wir uns nochmal das \\(R^2\\) wiedergeben lassen um zu entscheiden, ob unser Modell einigermaßen funktioniert hat. Dieser Abschnitt ist sehr kurz. Wir haben leider nur sehr wenige Möglichkeiten um ein logistischen Modell zu bewerten.\n\n\nR Code [zeigen / verbergen]\nr2(log_fit)\n\n\n# R2 for Logistic Regression\n  Tjur's R2: 0.285\n\n\nJa, so viel Varianz erklären wir nicht, aber wenn du ein wenig im Internet suchst, dann wirst du feststellen, dass das Bestimmtheitsmaß so eine Sache in glm()’s ist. Wir sind aber einigermaßen zufrieden. Eventuell würde eine Variablenselektion hier helfen, aber das ist nicht Inhalt dieses Kapitels.\nIn Abbildung 58.3 schauen wir nochmal auf die Residuen und die möglichen Ausreißer. Wieder sehen beide Plots einigermaßen in Ordnung aus. Die Abbildungen sind jetzt nicht die Besten, aber ich würde hier auch anhand der Diagnoseplots nicht die Modellierung verwerfen.\n\n\nR Code [zeigen / verbergen]\ncheck_model(log_fit, colors = cbbPalette[6:8], \n            check = c(\"qq\", \"outliers\")) \n\n\n\n\n\n\n\n\nAbbildung 58.3— Ausgabe ausgewählter Modelgüteplots der Funktion check_model().",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#interpretation-des-modells",
    "href": "stat-modeling-logistic.html#interpretation-des-modells",
    "title": "58  Logistische Regression",
    "section": "58.7 Interpretation des Modells",
    "text": "58.7 Interpretation des Modells\nZu Interpretation schauen wir uns wie immer nicht die rohe Ausgabe an, sondern lassen uns die Ausgabe mit der Funktion model_parameters() aus dem R Paket {parameters} wiedergeben. Wir müssen noch die Option exponentiate = TRUE wählen, damit unsere Koeffizienten nicht als \\(\\log\\)-Odds sondern als Odds wiedergeben werden. Korrekterweise erhalten wir die Odds ratio wieder was wir auch als \\(OR\\) angegeben.\n\n\nR Code [zeigen / verbergen]\nmodel_parameters(log_fit, exponentiate = TRUE)\n\n\nParameter            | Odds Ratio |       SE |       95% CI |     z |      p\n----------------------------------------------------------------------------\n(Intercept)          |   2.91e-11 | 1.24e-10 | [0.00, 0.00] | -5.69 | &lt; .001\nage                  |       1.00 |     0.03 | [0.95, 1.06] |  0.16 | 0.872 \nsex [male]           |       0.74 |     0.26 | [0.37, 1.48] | -0.84 | 0.398 \nlocation [northeast] |       1.07 |     0.40 | [0.52, 2.22] |  0.19 | 0.852 \nlocation [northwest] |       0.62 |     0.20 | [0.33, 1.17] | -1.47 | 0.142 \nlocation [west]      |       0.76 |     0.28 | [0.37, 1.56] | -0.75 | 0.450 \nactivity             |       1.05 |     0.10 | [0.87, 1.27] |  0.51 | 0.612 \ncrp                  |       2.64 |     0.29 | [2.14, 3.32] |  8.70 | &lt; .001\nfrailty [pre-frail]  |       1.12 |     0.46 | [0.49, 2.48] |  0.27 | 0.788 \nfrailty [robust]     |       0.81 |     0.31 | [0.37, 1.72] | -0.54 | 0.588 \nbloodpressure        |       1.09 |     0.04 | [1.01, 1.17] |  2.09 | 0.037 \nweight               |       1.00 |     0.09 | [0.85, 1.19] |  0.06 | 0.955 \ncreatinin            |       1.12 |     0.10 | [0.94, 1.33] |  1.23 | 0.218 \n\n\nWie interpretieren wir nun das \\(OR\\) einer logistischen Regression? Wenn wir darauf gechtet haben, dass wir mit \\(1\\) das Schlechte meinen, dann können wir wir folgt mit dem \\(OR\\) sprechen. Wenn wir ein \\(OR &gt; 1\\) haben, dann haben wir ein Risiko vorliegen. Die Variable mit einem \\(OR\\) größer als \\(1\\) wird die Chance auf den Eintritt des schlechten Ereignisses erhöhen. Wenn wir ein \\(OR &lt; 1\\) haben, dann sprechen wir von einem protektiven Faktor. Die Variable mit einem \\(OR\\) kleiner \\(1\\) wird vor dem Eintreten des schlechten Ereignisses schützen. Schauen wir uns den Zusammenhang mal im Detail für die Ferkeldaten an.\n\n(intercept) beschreibt den Intercept der logistischen Regression. Wenn wir mehr als eine simple Regression vorliegen haben, wie in diesem Fall, dann ist der Intercept schwer zu interpretieren. Wir konzentrieren uns auf die Effekte der anderen Variablen.\nsex beschreibt den Effekt der männlichen Ferkel zu den weiblichen Ferkeln. Daher haben männliche Ferkel eine \\(2.75\\) höhere Chance infiziert zu werden als weibliche Ferkel.\nlocation [northeast], location [northwest] und location [west] beschreibt den Unterschied zur location [north]. Alle Orte haben eine geringere Chance für eine Infektion zum Vergleich der Bauernhöfe im Norden. Zwar ist keiner der Effekte signifikant, aber ein interessantes Ergebnis ist es allemal.\nactivity beschreibt den Effekt der Aktivität der Ferkel. Wenn sich die Ferkel mehr bewegen, dann ist die Chance für eine Infektion gemindert.\ncrp beschreibt den Effekt des CRP-Wertes auf den Infektionsgrad. Pro Einheit CRP steigt die Chance einer Infektion um \\(2.97\\) an. Das ist schon ein beachtlicher Wert.\nfrailty beschreibt die Gebrechlichkeit der Ferkel. Hier müssen wir wieder schauen, zu welchem Level von frailty wir vergleichen. Hier vergleichen wir zu frail. Also dem höchsten Gebrechlichkeitgrad. Ferkel die weniger gebrechlich sind, haben eine niedrigere Chance zu erkranken.\nbloodpressure, weight und creatinin sind alles Variablen, mit einem \\(OR\\) größer als \\(1\\) und somit alles Riskovariablen. Hier sind zwar die \\(OR\\) relativ klein, aber das muss erstmal nichts heißen, da die \\(OR\\) ja hier die Änderung für eine Einheit von \\(x\\) beschreiben. Deshalb musst du immer schauen, wie die Einheiten von kontinuierlichen kodiert Variablen sind.\n\nKommen wir nochmal zu den gänigen Tabellen für die Zusammenfassung eines Ergebnisses einer logistischen Regression. Teilweise sind diese Tabellen so generisch und häufiog verwendet, dass wir schon einen Begriff für diese Tabellen haben. In Tabelle 58.2 siehst du die table 1 für die Übersicht aller Risikovariablen aufgeteilt nach dem Infektionsstatus. Diese Art der Tabellendarstellung ist so grundlegend für eine medizinische Veröffentlichung, dass sich eben der Begriff table 1 etabliert hat. Fast jede medizinische Veröffentlichung hat als erste Tabelle diese Art von Tabelle angegeben. Hierbei ist wichtig, dass die \\(p\\)-Werte alle nur aus einem einfachen statistischen Test stammen. Die \\(p\\)-Werte einer multiplen logistischen Regression werden daher immer anders sein.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt; tbl_summary(by = infected) |&gt; add_p() |&gt; as_flex_table()\n\n\n\n\nTabelle 58.2— Ausgabe der Daten in einer Summary Table oder auch Table 1 genannt. In medizinischen Veröffentlichungen immer die erste Tabelle für die Zusammenfassung der Patienten (hier Ferkel) für jede erhobende Risikovariable.\n\n\n\nCharacteristic0, N = 13611, N = 2761p-value2age59.5 (57.0, 63.0)60.0 (57.0, 63.0)0.9sex0.2female47 (35%)114 (41%)male89 (65%)162 (59%)location0.3north36 (26%)85 (31%)northeast23 (17%)61 (22%)northwest48 (35%)76 (28%)west29 (21%)54 (20%)activity13.40 (12.25, 14.34)13.24 (12.28, 14.54)0.8crp19.12 (18.13, 19.83)20.57 (19.77, 21.46)&lt;0.001frailty0.5frail18 (13%)37 (13%)pre-frail42 (31%)101 (37%)robust76 (56%)138 (50%)bloodpressure56.2 (54.3, 58.5)57.2 (55.1, 59.6)0.021weight18.61 (17.34, 19.41)18.32 (17.19, 19.60)0.8creatinin4.85 (3.67, 5.93)4.86 (4.06, 5.85)0.31Median (IQR); n (%)2Wilcoxon rank sum test; Pearson's Chi-squared test\n\n\n\n\n\nIn Tabelle 58.3 siehst du nochmal für eine Auswahl an Variablen die simplen logistischen Regressionen gerechnet. Du müsst also nicht jede simple logistische Regression selber rechnen, sondern kannst auch die Funktion tbl_uvregression() verwenden. Das R Paket {tbl_summary} erlaubt weitreichende Formatierungsmöglichkeiten. Am bestes schaust du einmal im Tutorial Tutorial: tbl_regression selber nach was du brauchst oder anpassen willst.\n\n\nR Code [zeigen / verbergen]\npig_tbl|&gt;\n  select(infected, age, crp, bloodpressure) |&gt;\n  tbl_uvregression(\n    method = glm,\n    y = infected,\n    method.args = list(family = binomial),\n    exponentiate = TRUE,\n    pvalue_fun = ~style_pvalue(.x, digits = 2)\n  ) |&gt; as_flex_table()\n\n\n\n\nTabelle 58.3— Simple logistische Regression für eine Auswahl an Einflussvariablen. Für jede Einflussvariable wurde eine simple logistische Regression gerechnet.\n\n\n\nCharacteristicNOR195% CI1p-valueage4121.000.95, 1.040.88crp4122.622.14, 3.27&lt;0.001bloodpressure4121.081.02, 1.150.0131OR = Odds Ratio, CI = Confidence Interval\n\n\n\n\n\nnun gibt es viele Möglichkeiten sich die logistische Regression wiedergeben zu lassen In Tabelle 58.4 siehst du nochmal die Möglichkeit, die dir das R Paket {tbl_summary} bietet. Am Ende ist es dann eine reine Geschmacksfrage, wie wir die Daten dann aufarbeiten wollen.\n\n\nR Code [zeigen / verbergen]\nlog_fit |&gt; tbl_regression(exponentiate = TRUE) |&gt; as_flex_table()\n\n\n\n\nTabelle 58.4— Ausgabe der multiplen logistischen Regression durch die Funktion tbl_regression().\n\n\n\nCharacteristicOR195% CI1p-valueage1.000.95, 1.060.9sexfemale——male0.740.37, 1.480.4locationnorth——northeast1.070.52, 2.220.9northwest0.620.33, 1.170.14west0.760.37, 1.560.5activity1.050.87, 1.270.6crp2.642.14, 3.32&lt;0.001frailtyfrail——pre-frail1.120.49, 2.480.8robust0.810.37, 1.720.6bloodpressure1.091.01, 1.170.037weight1.000.85, 1.19&gt;0.9creatinin1.120.94, 1.330.21OR = Odds Ratio, CI = Confidence Interval\n\n\n\n\n\nZum Abschluss wollen wir uns einmal die Ergebnisse des Modellfits als logistischen Gerade für eine simple lineare Regression mit dem Modell \\(infected \\sim crp\\) anschauen. Wie immer können wir uns den Zusammenhang nur in einem simplen Modell anschauen. Im Fall einer multiplen linearen Regresion können wir nicht so viele Dimensionen in einer Grpahik darstellen. Wir fitten also das Modell log_fit_crp wie im folgenden dargestellt.\n\n\nR Code [zeigen / verbergen]\nlog_fit_crp &lt;- glm(infected ~ crp, data = pig_tbl, family = binomial)\n\n\nNun können wir uns mit der Funktion predict() die Wert auf der Geraden wiedergeben lassen. Wenn wir predict() nur so aufrufen, dann erhalten wir die Werte für \\(y\\) auf der transformierten \\(link\\)-Scale wieder. Das hilft uns aber nicht weiter, wir haben ja nur 0 und 1 Werte für \\(y\\) vorliegen.\n\n\nR Code [zeigen / verbergen]\npredict(log_fit_crp, type = \"link\") |&gt; \n  extract(1:10) |&gt; \n  round(2)\n\n\n    1     2     3     4     5     6     7     8     9    10 \n 3.19 -0.41 -0.29  0.29  2.41  2.30 -0.08 -0.08  2.72  1.83 \n\n\nDa wir die Werte für die Wahrscheinlichkeit das ein Ferkel infiziert ist, also die Wahrscheinlichkeit \\(Pr(infected = 1)\\), müssen wir noch die Option type = reponse wählen. So erhalten wir die Wahrscheinlichkeiten wiedergegeben.\n\n\nR Code [zeigen / verbergen]\npredict(log_fit_crp, type = \"response\") |&gt; \n  extract(1:10) |&gt; \n  round(2)\n\n\n   1    2    3    4    5    6    7    8    9   10 \n0.96 0.40 0.43 0.57 0.92 0.91 0.48 0.48 0.94 0.86 \n\n\nAbschließend können wir uns die Gerade auch in der Abbildung 58.4 visualisieren lassen. Auf der x-Achse sehen wir die crp-Werte und auf der y-Achse den Infektionsstatus. Auf der \\(reponse\\)-scale sehen wir eine S-Kurve. Auf der \\(link\\)-scale würden wir eine Gerade sehen.\n\n\nR Code [zeigen / verbergen]\nggplot(pig_tbl, aes(x = crp, y = infected)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(log_fit_crp, type = \"response\")), color = \"red\") \n\n\n\n\n\n\n\n\nAbbildung 58.4— Visualisierung der logistischen Gerade in einer simplen logistischen Regression mit der Variable crp.\n\n\n\n\n\nNun haben wir das Kapitel zur logistischen Regression fast abgeschlossen. Was noch fehlt ist die Besonderheit der Prädiktion im Kontext des maschinellen Lernens. Das machen wir jetzt im folgenden Abschnitt. Wenn dich die logistische Regression nur interessiert hat um einen kausalen Zusammenhang zwischen Einflussvariablen und dem binären Outcome zu modellieren, dann sind wir hier fertig.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#sec-mult-comp-log-reg",
    "href": "stat-modeling-logistic.html#sec-mult-comp-log-reg",
    "title": "58  Logistische Regression",
    "section": "58.8 Gruppenvergleich",
    "text": "58.8 Gruppenvergleich\nHäufig ist es ja so, dass wir das Modell nur schätzen um dann einen Gruppenvergleich zu rechnen. Das heißt, dass es uns interessiert, ob es einen Unterschied zwischen den Leveln eines Faktors gegeben dem Outcome \\(y\\) gibt. Wir machen den Gruppenvergleich jetzt einmal an der Gebrechlichkeit frailty durch. Wir habe die drei Gruppen frail, pre-frail und robust vorliegen. Wir wollen jetzt wissen, ob es einen Unterschied zwischen den Gruppen hinsichtlich dem Infektionsstatus von den Ferkeln gibt.\nWenn du gerade hierher gesprungen bist, nochmal das simple Modell für unseren Gruppenvergleich. Wir haben hier nur einen Faktor frailty mit in dem Modell. Am Ende des Abschnitts findest du dann noch ein Beispiel mit zwei Faktoren zu beschädigten Mais nach der Ernte.\n\n\nR Code [zeigen / verbergen]\nlog_fit &lt;- glm(infected ~ frailty, data = pig_tbl, family = binomial)\n\n\nEigentlich ist es recht einfach. Wir rechnen jetzt als erstes die ANOVA. Hier müssen wir dann einmal den Test angeben, der gerechnet werden soll um die p-Werte zu erhalten. Dann nutze ich noch die Funktion model_parameters() um eine schönere Ausgabe zu erhalten.\n\n\nR Code [zeigen / verbergen]\nlog_fit |&gt; \n  anova(test = \"Chisq\") |&gt; \n  model_parameters(drop = \"NULL\")\n\n\nParameter | df | Deviance | df (error) | Deviance (error) |     p\n-----------------------------------------------------------------\nfrailty   |  2 |     1.48 |        409 |           521.14 | 0.478\n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass die Gebrechlichkeit der Ferkel keinen signifikanten Einfluss auf den Infektionsstatus hat. Dennoch rechnen wir einmal den Gruppenvergleich. Immerhin geht es hier ja auch um die Demonstration.\nIm folgenden nutzen wir das R Paket {emmeans} wie folgt. Wenn wir die Wahrscheinlichkeiten wiedergeben haben wollen, dann nutzen wir die Option regrid = \"response\". In unserem emmeans-Objekt stehen jetzt die Wahrscheinlichkeiten infiziert zu sein für das jeweilige Level von frailty. Wenn wir aber später die Odds ratio benötigen, dann müssen wir die Option type = \"response\" verwenden. Erstere Option nutze ich später um direkt aus der emmeans Ausgabe ein Säulendiagramm zu erstellen. Auf dem ersten Blick sind beide Ausgaben gleich, aber im Hintergrund werden andere Optionen gesetzt, so dass in folgenden Berechnungen dann was anderes herauskommt.\n\nOption regrid = \"response\"Option type = \"response\"\n\n\nMit dieser Option erhalten wir dann ein emmeans-Objekt in dem die Wahrscheinlichkeiten prob hinterlegt sind. Diese Art der Berechnung eignet sich besonders, wenn später ein compact letter dislay visualisiert werden soll.\n\n\nR Code [zeigen / verbergen]\nem_prob_obj &lt;- log_fit |&gt; \n  emmeans(~ frailty, regrid = \"response\")\nem_prob_obj\n\n\n frailty    prob     SE  df asymp.LCL asymp.UCL\n frail     0.673 0.0633 Inf     0.549     0.797\n pre-frail 0.706 0.0381 Inf     0.632     0.781\n robust    0.645 0.0327 Inf     0.581     0.709\n\nConfidence level used: 0.95 \n\n\n\n\nMit dieser Option bereiten wir dann die Berechnung von Odds ratios vor. Wir wollen dann auf der ursprünglichen Skala rechnen und nicht auf der Linkfunktion. Wenn du also Odds ratios haben willst, dann musst du diese Option wählen.\n\n\nR Code [zeigen / verbergen]\nem_odds_obj &lt;- log_fit |&gt; \n  emmeans(~ frailty, type = \"response\")\nem_odds_obj\n\n\n frailty    prob     SE  df asymp.LCL asymp.UCL\n frail     0.673 0.0633 Inf     0.539     0.783\n pre-frail 0.706 0.0381 Inf     0.627     0.775\n robust    0.645 0.0327 Inf     0.578     0.706\n\nConfidence level used: 0.95 \nIntervals are back-transformed from the logit scale \n\n\nAchtung, das Objekt sieht jetzt zwar sehr ähnlich aus, aber für die weitere Berechnung macht es dann doch einen Unterschied welchen type du nutzt.\n\n\n\nWenn du un an den Odds ratios und den p-Werten interessiert bist, dann kannst du den Gruppenvergleich mit der Funktion contrast() rechnen. Wir wollen hier alle paarweisen Vergleiche rechnen. Wie immer kannst du auch die Adjustierung anpassen, wenn du möchtest.\n\n\nR Code [zeigen / verbergen]\nem_odds_obj |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\")\n\n\n contrast             odds.ratio    SE  df null z.ratio p.value\n frail / (pre-frail)       0.855 0.291 Inf    1  -0.460  1.0000\n frail / robust            1.132 0.363 Inf    1   0.386  1.0000\n (pre-frail) / robust      1.324 0.308 Inf    1   1.208  0.6815\n\nP value adjustment: bonferroni method for 3 tests \nTests are performed on the log odds ratio scale \n\n\nWir sehen also, dass wir auch hier keine signifikanten Unterschiede vorliegen haben. Jetzt lassen wir uns nochmal das unadjustierte compact letter display wiedergeben. Aber auch in dem unadjustierten Fall finden wir keine signifikanten Unterschiede.\n\n\nR Code [zeigen / verbergen]\nem_odds_obj |&gt;\n  cld(Letters = letters, adjust = \"none\")\n\n\n frailty    prob     SE  df asymp.LCL asymp.UCL .group\n robust    0.645 0.0327 Inf     0.578     0.706  a    \n frail     0.673 0.0633 Inf     0.539     0.783  a    \n pre-frail 0.706 0.0381 Inf     0.627     0.775  a    \n\nConfidence level used: 0.95 \nIntervals are back-transformed from the logit scale \nTests are performed on the log odds ratio scale \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nAm Ende möchte ich hier nochmal einen Spieldatensatz infected_tbl erstellen indem ich wiederum drei Gruppen miteinander vergleiche. Ich tue mal so als würden wir uns hier zwei Pestizide und eine Kontrolle anschauen. Unser Outcome ist dann, ob wir eine Infektion vorliegen haben oder das Pestizid alles umgebracht hat. Damit haben wir dann unser Outcome infected definiert. Wir bauen uns die Daten so, dass \\(80%\\) der Beobachtungen in der Kontrolle infiziert sind. In den beiden Behandlungsgruppen sind jeweils \\(50%\\) und \\(30%\\) der Beobachtungen nach der Behandlung noch infiziert. Wir haben jeweils zwanzig Pflanzen n_grp beobachtet. Das sind wirklich wenige Beobachtungen für einen \\(0/1\\) Endpunkt, aber es sollte hier reichen. Dann habe ich noch einen Seed gesetzt, damit auch immer die gleichen Zahlen generiert werden.\n\n\nR Code [zeigen / verbergen]\nset.seed(20231201)\nn_grp &lt;- 20\ninfected_tbl &lt;- tibble(trt = gl(3, n_grp, labels = c(\"ctrl\", \"roundUp\", \"killAll\")),\n                       infected = c(rbinom(n_grp, 1, 0.8), \n                                    rbinom(n_grp, 1, 0.5), \n                                    rbinom(n_grp, 1, 0.2)))\n\n\nJetzt bauen wir uns wieder unser logistisches Modell zusammen, dass kennst du ja schon. Vorher wollen wir aber nochmal in die Daten schauen. Unser Datensatz hat ja nur ein Outcome und eine Behandlung als Faktor mit drei Leveln bzw. Gruppen. Wir können jetzt einmal nachvollziehen woher die Werte in einer {emmeans}-Ausgabe eigentlich kommen. Schauen wir uns dazu erstmal die Tabelle mit den Infektionen zugeordnet zu den Behandlungen an.\n\n\nR Code [zeigen / verbergen]\ninfected_tbl %$% \n  table(trt, infected) \n\n\n         infected\ntrt        0  1\n  ctrl     5 15\n  roundUp 12  8\n  killAll 16  4\n\n\nJetzt berechnen wir einmal die Anteile der Infektionen in den jeweiligen Behandlungen. Wir würden ja erwarten, dass wir \\(80%\\), \\(50%\\) und \\(20%\\) vorfinden, aber da wir nur ein kleinen Fallzahl simuliert haben, ergibt sich natürlich eine Abweichung. Wir finden nämlich in den Daten für ctrl gleich \\(15/20 = 0.75\\), für roundUp gleich \\(8/20 = 0.4\\) und für killAll gleich \\(4/20 = 0.2\\) anteilig Infektionen. Finden wir diese Zahlen auch in {emmeans} wieder?\nAls erstes bauen wir uns wieder ein Modell der logistischen Regression.\n\n\nR Code [zeigen / verbergen]\ninfected_log_fit &lt;- glm(infected ~ trt, data = infected_tbl, family = \"binomial\")\n\n\nDann stecken wir das Modell einmal in emmeans() und schauen uns die Ausgabe an und nutzen die Option regrid = \"response\" um uns Wahrscheinlichkeiten wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\ninfected_log_fit  |&gt; \n  emmeans(~ trt, regrid = \"response\") \n\n\n trt     prob     SE  df asymp.LCL asymp.UCL\n ctrl    0.75 0.0968 Inf    0.5602     0.940\n roundUp 0.40 0.1095 Inf    0.1853     0.615\n killAll 0.20 0.0894 Inf    0.0247     0.375\n\nConfidence level used: 0.95 \n\n\nUnd tatsächlich, wir finden die gleichen Anteile in der Ausgabe wieder, wie wir auch in unseren Daten vorab aus der Tabelle berechnet haben. Wir erhalten also den Anteil der 1-sen in einem Outcome aus der Funktion emmeans() wieder. Der Anteil an 1-sen ist ja auch nichts anderes als der Mittelwert des Outcomes für die Spalte.\nIm nächsten Schritt wollen wir einmal die Odds ratios verstehen. Dafür erstmal den Aufruf in emmeans() und dann schauen wir einmal in die Ausgabe. Wir wollen jetzt die Odds ratios einmal händisch berechnen.\n\n\nR Code [zeigen / verbergen]\ninfected_log_fit |&gt; \n  emmeans(~ trt, type = \"response\") |&gt; \n  pairs()\n\n\n contrast          odds.ratio   SE  df null z.ratio p.value\n ctrl / roundUp          4.50 3.10 Inf    1   2.182  0.0742\n ctrl / killAll         12.00 9.13 Inf    1   3.265  0.0031\n roundUp / killAll       2.67 1.92 Inf    1   1.359  0.3626\n\nP value adjustment: tukey method for comparing a family of 3 estimates \nTests are performed on the log odds ratio scale \n\n\nWir wissen ja die Anteile der 1-sen in der Kontrollgruppe ctrl mit \\(0.75\\) sowie den Anteil an 1-sen in der Behandlungsgruppe roundUp mit \\(0.4\\). Wir haben die Werte ja oben in der Tabelle bestimmt. Jetzt können wir die Odds mit \\(Odds = p/(1-p)\\) für die beiden Gruppen berechnen und dann den Quotienten als Odds ratio berechnen.\n\\[\nctrl/roundUp = \\cfrac{0.75}{0.25}/\\cfrac{0.4}{0.6} = 4.5\n\\]\nWie wir sehen, passen die Zahlen. Wir können jetzt auch für die Behandlungsgruppe killAll mit einem Anteil an 1-sen von \\(0.2\\) weitermachen. Auch hier berechnen wir erst die Odds und dann den Quotienten aus den beiden Odds.\n\\[\nctrl/killAll = \\cfrac{0.75}{0.25}/\\cfrac{0.2}{0.8} = 12\n\\]\nDann nochmal als Überprüfung den letzten Wert für den Vergleich von roundUp zu killAll.\n\\[\nroundUp/killAll = \\cfrac{0.4}{0.6}/\\cfrac{0.2}{0.8} = 2.67\n\\]\nNun könntest du einwenden, dass Odds ratios nicht so einfach zu interpretieren sind und du eigentlich nur wissen willst um welchen Faktor mehr oder weniger Infizierte es in einer Gruppe gibt. Also kein Chancenverhältnis sondern eben einfach ein Wahrscheinlichkeitsverhältnis. Du willst also sagen, dass in der Kontrollgruppe x-fach mehr oder weniger infizierte Beobachtungen auftauchen. Damit willst du die Wahrscheinlichkeiten aus der Tabelle weiter oben in ein Verhätnis setzen. Daher willst du folgende Zusammenhänge berechnen.\n\\[\n\\cfrac{ctrl}{roundUp} = \\cfrac{0.75}{0.4} = 1.88\n\\]\n\\[\n\\cfrac{ctrl}{killAll} = \\cfrac{0.75}{0.2} = 3.75\n\\]\n\\[\n\\cfrac{roundUp}{killAll} = \\cfrac{0.4}{0.2} = 2.00\n\\]\nWir können also sagen, dass wir in der Kontrolle ungefähr 1.88 mal mehr Infizierte haben als in der Behandlung roundUp. Oder aber, dass wir in der Kontrolle 3.75 mal mehr Infizierte haben als in der Behandlung killAll Um solche Zahlen zu berechnen, nutzen wir die Poisson Regression auf unseren \\(0/1\\)-Daten. Dafür müssen wir einmal die Option family = \"poisson\" setzen.\n\n\nR Code [zeigen / verbergen]\ninfected_pois_fit &lt;- glm(infected ~ trt, data = infected_tbl, family = \"poisson\")\n\n\nDann können wir auch schon die Funktion emmeans() anwenden, um uns einmal die Wahrscheinlichkeitsverhältnisse als ratio wiedergeben zu lassen. Wie immer kannst du natürlich den Fit auch erstmal in ein eigenes Objekt stecken und dann noch andere Funktionen in {emmeans} nutzen. Wie du gleich siehst, haben wir aber auch hier keine signifikanten Unterschiede zwischen den Gruppen.\n\n\nR Code [zeigen / verbergen]\ninfected_pois_fit |&gt; \n  emmeans(~ trt, type = \"response\") |&gt; \n  pairs()\n\n\n contrast          ratio    SE  df null z.ratio p.value\n ctrl / roundUp     1.88 0.821 Inf    1   1.436  0.3224\n ctrl / killAll     3.75 2.110 Inf    1   2.349  0.0493\n roundUp / killAll  2.00 1.225 Inf    1   1.132  0.4943\n\nP value adjustment: tukey method for comparing a family of 3 estimates \nTests are performed on the log scale \n\n\nDamit sind wir einmal mit unserem Gruppenvergleich für die logistische Regression auf einem \\(0/1\\) Outcome durch. In dem Kapitel zu den Multiple Vergleichen oder Post-hoc Tests findest du dann noch mehr Inspirationen für die Nutzung von {emmeans}. Hier war es dann die Anwendung auf binäre Outcomes zusammen mit einem Faktor. Wenn du dir das Ganze nochmal an einem Beispiel für zwei Faktoren anschauen möchtest, dann findest du im folgenden Kasten ein Beispiel für die Auswertung von Beschädigungen an Mais nach verschiedenen Ernteverfahren und Zeitpunkten.\n\n\n\n\n\n\nAnwendungsbeispiel: Zweifaktorieller Gruppenvergleich für Maisernte\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit Mais an. Wir haben uns in diesem Experiment verschiedene Arten trt von Ernteverfahren von Mais angeschaut. Dann haben wir nach vier Zeitpunkten bestimmt, ob der Mais durch das Ernteverfahren nachträglich beschädigt war. Die Beschädigung selber wurde dann etwas komplizierter mit einem Labortest festgestellt, aber wir schauen uns nur die Ausprägung ja/nein also \\(1/0\\) als Outcome an. Durch einen Fehler im Labor müssen wir eine Kombination für den letzten Tag und der dritten Behandlung entfernen.\n\n\nR Code [zeigen / verbergen]\nmaize_tbl &lt;- read_excel(\"data/maize_rate.xlsx\") |&gt; \n   mutate(damaged = ifelse(time == \"5d\" & trt == 3, NA, damaged),\n          trt = factor(trt, labels = c(\"wenig\", \"mittel\", \"viel\")))\n\n\nDann können wir auch schon die logistische Regression mit glm() rechnen. Auch hier wieder darauf achten, dass wir dann als Option family = binomial wählen und unser Outcome infected als Faktor kodiert ist.\n\n\nR Code [zeigen / verbergen]\nmaize_fit &lt;- glm(damaged ~ trt + time + trt:time, data = maize_tbl, family = binomial) \n\n\nIn den beiden folgenden Tabs findest du dann einmal das Ergebnis für die ANOVA und einmal für den Gruppenvergleich mit dem R Paket {emmeans}. Bitte beachte, dass die ANOVA für ein glm()-Objekt nicht ganz gleich wie für ein lm()-Objekt ist. Du kannst aber die ANOVA erstmal ganz normal interpretieren, nur haben wir hier nicht die Möglichkeit ein \\(\\eta^2\\) zu bestimmen. Dann nutzen wir {emmeans} für den Gruppenvergleich.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA und nutzen den \\(\\mathcal{X}^2\\)-Test für die Ermittelung der p-Werte. Wir müssen hier einen Test auswählen, da per Standardeinstellung kein Test gerechnet wird. Wir machen dann die Ausageb nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\nmaize_fit |&gt; \n  anova(test = \"Chisq\") |&gt; \n  model_parameters(drop = \"NULL\")\n\n\nParameter | df | Deviance | df (error) | Deviance (error) |      p\n------------------------------------------------------------------\ntrt       |  2 |    38.74 |        162 |           136.89 | &lt; .001\ntime      |  3 |    27.46 |        159 |           109.43 | &lt; .001\ntrt:time  |  5 |     4.00 |        154 |           105.43 | 0.550 \n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass der Effekt für die Behandlung und die Zeit signifikant sind. Wir haben aber keine Interaktion vorliegen. Daher können wir dann die Analyse gemeinsam über alle Zeitpunkte rechnen.\n\n\nIm Folgenden rechnen wir einmal über alle Faktorkombinationen von trt und time einen Gruppenvergleich. Dafür nutzen wir die Opition trt * time. Wenn du die Analyse getrennt für die Zeitpunkte durchführen willst, dann nutze die Option trt | time. Wir wollen die Wahrscheinlichkeiten für das Auftreten einer Beschädigung von wiedergegeben bekommen, deshalb die Option regrid = \"response. Dann adjustieren wir noch nach Bonferroni und sind fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- maize_fit |&gt; \n  emmeans(~ trt * time, regrid = \"response\") |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n trt    time     prob         SE  df  asymp.LCL asymp.UCL .group\n viel   2d   0.133333 0.08777075 Inf -0.1157247  0.382391  a    \n viel   1d   0.400000 0.12649111 Inf  0.0410692  0.758931  ab   \n mittel 5d   0.600000 0.12649111 Inf  0.2410692  0.958931  abc  \n mittel 2d   0.800000 0.10327956 Inf  0.5069343  1.093066   bc  \n viel   1h   0.866667 0.08777075 Inf  0.6176087  1.115725   bc  \n wenig  5d   0.866667 0.08777075 Inf  0.6176087  1.115725   bc  \n mittel 1d   0.933333 0.06440612 Inf  0.7505747  1.116092    c  \n mittel 1h   0.933333 0.06440612 Inf  0.7505747  1.116092    c  \n wenig  1d   1.000000 0.00000883 Inf  0.9999749  1.000025    c  \n wenig  1h   1.000000 0.00000883 Inf  0.9999749  1.000025    c  \n wenig  2d   1.000000 0.00000883 Inf  0.9999749  1.000025    c  \n viel   5d     nonEst         NA  NA         NA        NA       \n\nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 11 estimates \nP value adjustment: bonferroni method for 55 tests \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Dann können wir auch das compact letter display anhand der Abbildung interpretieren.\n\n\n\nIn der Abbildung 58.5 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Hier unbedingt SE als den Standardfehler für die Fehlerbalken nutzen, da wir sonst Fehlerbalken größer und kleiner als \\(0/1\\) erhalten, wenn wir die Standardabweichung nutzen würden. Wir sehen einen klaren Effekt der Behandlung viel. Schade, dass wir dann nach 5 Tagen leider keine Auswertung für die dritte Behandlung vorliegen haben. Aber sowas passiert dann unter echten Bedingungen mal schnell.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = time, y = prob, fill = trt)) +\n  theme_minimal() + \n  labs(y = \"Anteil beschädigter Mais\", x = \"Stunden nach Ernte\",\n       fill = \"Behandlung\") +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = .group, y = prob + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = prob-SE, ymax = prob+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 58.5— Säulendigramm der Anteile des beschädigten Mais aus einer logistischen Regression. Das glm()-Modell berechnet die Wahrscheinlichkeiten in jeder Faktorkombination, was dann die Anteile des beschädigten Mais entspricht. Das compact letter display wird dann in {emmeans} generiert.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#dichotomisierung",
    "href": "stat-modeling-logistic.html#dichotomisierung",
    "title": "58  Logistische Regression",
    "section": "58.9 Dichotomisierung",
    "text": "58.9 Dichotomisierung\nManchmal ist es so, dass wir eine logistsiche Regression rechnen wollen. Wir fragen nicht, wie ist unser \\(y\\) verteilt und was für eine Regression können wir dann rechnen? Sondern wir wollen mit der logistischen Regression durch die Wand. Wenn wir das wollen, dann können wir unser \\(y\\) dichotomisieren. Das heißt, wir machen aus einer Variable, die mehr als zwei Level hat einen Faktor mit zwei Leveln. Dafür stehen uns verschiedene Möglichkeiten offen.\nIn dem R Paket {dplyr} haben wir mit der Funktion recode() die Möglichkeit eine Variable von alt = neu umzukodieren. Dabei müssen wir natürlich darauf achten, dass wir die alten Level der Variable richtig schreiben und bei der neuen Level nur zwei Namen eintragen. Dann sind wir auch schon durch mit der Umbenennung.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt; \n  mutate(frailty = recode(frailty, \n                          \"robust\" = \"robust\", \n                          \"pre-frail\" = \"frail_prefrail\", \n                          \"frail\" = \"frail_prefrail\")) |&gt; \n  pull(frailty) |&gt; extract(1:20)\n\n\n [1] \"robust\"         \"robust\"         \"robust\"         \"robust\"        \n [5] \"robust\"         \"robust\"         \"frail_prefrail\" \"robust\"        \n [9] \"robust\"         \"robust\"         \"frail_prefrail\" \"robust\"        \n[13] \"robust\"         \"robust\"         \"frail_prefrail\" \"robust\"        \n[17] \"frail_prefrail\" \"frail_prefrail\" \"robust\"         \"frail_prefrail\"\n\n\nIch finde die Funktion case_when() etwas übersichtlicher. Das ist aber eigentlich nur eine Geschmacksfrage. Am Ende kommt jedenfalls das Gleiche heraus.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt; \nmutate(frailty = case_when(frailty == \"robust\" ~ \"robust\",\n                           frailty == \"pre-frail\" ~ \"frail\",\n                           frailty == \"frail\" ~ \"frail\")) |&gt; \n  pull(frailty) |&gt; extract(1:20)\n\n\n [1] \"robust\" \"robust\" \"robust\" \"robust\" \"robust\" \"robust\" \"frail\"  \"robust\"\n [9] \"robust\" \"robust\" \"frail\"  \"robust\" \"robust\" \"robust\" \"frail\"  \"robust\"\n[17] \"frail\"  \"frail\"  \"robust\" \"frail\" \n\n\nHäufig haben wir auch den Fall, dass wir keine kontinuierlichen \\(x\\) in unseren Daten wollen. Alles soll sich in Faktoren verwandeln, so dass wir immer eine 2x2 Tafel haben. Wenn es sein muss, liefert hier cutpointr() die Lösung für dieses Problem. Wir müssen dafür zum einen unser kontinuierliches \\(x\\) angeben und dann mit class unser binäres \\(y\\). Wir erhalten dann für unser \\(y\\) den bestmöglichen Split für unser \\(x\\). Im Beispiel wollen wir einmal die Variable crp für unser Outcome infected in zwei Gruppen aufteilen. Wir wollen eigentlich immer zwei Gruppen, da wir dann in dem Setting eines \\(\\mathcal{X}^2\\)-Test und einer einfacheren Interpretation von dem \\(OR\\) sind.\nWir immer haben wir eine große Bandbreite an Optionen, wie wir den besten Split unseres \\(x\\) kriegen wollen. Ich gehe hier mit den Default-Werten. Damit kommt man eigentlich recht weit. Ich möchte gerne die Summe der Sensivität und der Spezifität sum_sens_spec über alle möglichen Cutpoints maximieren maximize_metric. Der Cutpoint mit der maximalen Summe an Sensivität und der Spezifität wird mir dann wiedergegeben. Natürlich hat das R Paket {cutpoint} noch viel mehr Optionen. Mehr gibt es in An introduction to cutpointr.\n\n\nR Code [zeigen / verbergen]\ncp_crp &lt;- cutpointr(data = pig_tbl,\n                    x = crp,\n                    class = infected,\n                    method = maximize_metric, \n                    metric = sum_sens_spec) \n\ncp_crp\n\n\n# A tibble: 1 × 16\n  direction optimal_cutpoint method          sum_sens_spec      acc sensitivity\n  &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;\n1 &gt;=                   19.71 maximize_metric       1.48870 0.752427    0.768116\n  specificity      AUC pos_class neg_class prevalence outcome  predictor\n        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    \n1    0.720588 0.806119         1         0   0.669903 infected crp      \n  data               roc_curve             boot \n  &lt;list&gt;             &lt;list&gt;                &lt;lgl&gt;\n1 &lt;tibble [412 × 2]&gt; &lt;rc_ctpnt [282 × 10]&gt; NA   \n\n\nIn Abbildung 58.6 sehe wir die Ausgabe der Funktion cutpointr() nochmal visualisiert. Wir sehen, dass der Split einigermaßen die crp-Werte im Sinne von unserem Outcome aufteilt.\n\n\nR Code [zeigen / verbergen]\nplot(cp_crp)\n\n\n\n\n\n\n\n\nAbbildung 58.6— Visualisierung des Ergebnisses der Funktion cutpointr für die Variable crp.\n\n\n\n\n\nWir können uns jetzt noch den optimalen Cutpoint aus der Ausgabe herausziehen, wenn wir den Punkt nicht aus der Ausgabe ablesen wollen.\n\n\nR Code [zeigen / verbergen]\npluck(cp_crp, \"optimal_cutpoint\")\n\n\n[1] 19.71\n\n\nAm Ende können wir dann über case_when() uns ein binären CRP-Wert zusammenbauen. Wir müssen dann natürlich entscheiden welche Variable wir mit ins Modell nehme, aber meistens machen wir uns ja die Mühen um dann die neue Variable zu verwenden.\n\n\nR Code [zeigen / verbergen]\npig_tbl |&gt; \nmutate(crp_bin = case_when(crp &gt;= 19.84 ~ \"high\",\n                           crp &lt; 19.84 ~ \"low\")) |&gt; \nselect(crp, crp_bin)  \n\n\n# A tibble: 412 × 2\n     crp crp_bin\n   &lt;dbl&gt; &lt;chr&gt;  \n 1  22.4 high   \n 2  18.6 low    \n 3  18.8 low    \n 4  19.4 low    \n 5  21.6 high   \n 6  21.4 high   \n 7  19.0 low    \n 8  19.0 low    \n 9  21.9 high   \n10  21.0 high   \n# ℹ 402 more rows\n\n\nDamit haben wir uns dann auch mit dem Problem der Dichotomisierung in der logististischen Regression einmal beschäftigt. Somit bleibt dann noch die Prädiktion übrig.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#prädiktion",
    "href": "stat-modeling-logistic.html#prädiktion",
    "title": "58  Logistische Regression",
    "section": "58.10 Prädiktion",
    "text": "58.10 Prädiktion\nDa wir später in dem Kapitel 73 die logistische Regression auch als Vergleich zu maschinellen Lernverfahren in der Klassifikation nutzen werden gehen wir hier auch die Prädiktion einmal für die logistische Regression durch. Wir wollen also eine Klassifikation, also eine Vorhersage, für das Outcome infected mit einer logistischen Regression rechnen. Wir nutzen dazu die Möglichkeiten des R Pakets {tidymodels} wodurch wir einfacher ein Modell bauen und eine Klassifikation rechnen können. Unsere Fragestellung ist, ob wir mit unseren Einflussvariablen den Infektionsstatus vorhersagen können. Das heißt wir wollen ein Modell bauen mit dem wir zukünftige Ferkel als potenziell krank oder gesund anhand unser erhobenen Daten einordnen bzw. klassifizieren können.\n\n\nMehr zu Rezepten (eng. recipes) kannst du im Kapitel 73 zu den Grundlagen des maschinellen Lernens erfahren.\nDer erste Schritt einer Klassifikation ist immer sicherzustellen, dass unser Outcome auch wirklich aus Kategorien besteht. In R nutzen wir dafür einen Faktor und setzen dann auch gleich die Ordnung fest.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- pig_tbl |&gt; \n  mutate(infected = factor(infected, levels = c(0, 1)))\n\n\nNun bauen wir uns ein einfaches Rezept mit der Funktion recipe(). Dafür legen wir das Modell, was wir rechnen wollen einmal fest. Wir nehmen infected als Outcome und den Rest der Vairbalen . aus dem Datensatz pig_tbl als die \\(x\\) Variablen. Dann wollen wir noch alle Variablen, die ein Faktor sind in eine Dummyvariable umwandeln.\n\n\nR Code [zeigen / verbergen]\npig_rec &lt;- recipe(infected ~ ., data = pig_tbl) |&gt; \n  step_dummy(all_nominal_predictors())\n\n\nWir wollen jetzt unser Modell definieren. Wir rechnen eine logistsiche Regression und deshalb nutzen wir die Funktion logistic_reg(). Da wir wirklich viele Möglichkeiten hätten die logistische Regression zu rechnen, müssen wir noch den Algorithmus wählen. Das tuen wir mit der Funktion set_engine(). Wir nutzen hier den simplen glm() Algorithmus. Es gebe aber auch andere Implementierungen.\n\n\nR Code [zeigen / verbergen]\nlogreg_mod &lt;- logistic_reg() |&gt; \n  set_engine(\"glm\")\n\n\nJetzt müssen wir noch einen Workflow definieren. Wir wollen ein Modell rechnen und zwar mit den Informationen in unserem Rezept. Das bauen wir einmal zusammen und schauen uns die Ausgabe an.\n\n\nR Code [zeigen / verbergen]\npig_wflow &lt;- workflow() |&gt; \n  add_model(logreg_mod) |&gt; \n  add_recipe(pig_rec)\n\npig_wflow\n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n1 Recipe Step\n\n• step_dummy()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\n\nDas passt alles soweit. Ja, es ist etwas kompliziert und das ginge sicherlich auch einfacher. Wir werden dann aber noch sehen, dass wir es uns mit dem Ablauf sehr viel einfacher machen, wenn wir kompliziertere Modelle schätzen wollen. Mehr dazu findest du dann im Kapitel 73 zu den maschinellen Lernverfahren.\nJetzt können wir den Workflow nutzen um den Fit zu rechnen. Bis jetzt haben wir nur Informationen gesammelt. Dadurch das wir jetzt das Objekt pig_workflow in die Funktion fit() pipen rechnen wir das Modell.\n\n\nR Code [zeigen / verbergen]\npig_fit &lt;- pig_wflow |&gt; \n  fit(data = pig_tbl)\n\n\nDas erhaltende Modell könne wir dann in die Funktion predict() stecken um uns den Inektionsstatus vorhersagen zu lassen.\n\n\nR Code [zeigen / verbergen]\npredict(pig_fit, new_data = pig_tbl)\n\n\n# A tibble: 412 × 1\n   .pred_class\n   &lt;fct&gt;      \n 1 1          \n 2 0          \n 3 0          \n 4 1          \n 5 1          \n 6 1          \n 7 0          \n 8 0          \n 9 1          \n10 1          \n# ℹ 402 more rows\n\n\nIn der Spalte .pred_class finden wir dann die vorhergesagten Werte des Infektionsstatus anhand unseres gefitteten Modells. Eigentlich würden wir ja gerne die vorhergesagten Werte mit unseren Orginalwerten vergleichen. Hier hilft uns die Funktion augment(). Dank der Funktion augment() erhalten wir nicht nur die vorhergesagten Klassen sondern auch die Wahrscheinlichkeit für die Klassenzugehörigkeiten. Daneben dann aber auch die Originalwerte für den Infektionsstatus in der Spalte infected.\n\n\nR Code [zeigen / verbergen]\npig_aug &lt;- augment(pig_fit, new_data = pig_tbl) |&gt; \n  select(infected, matches(\"^\\\\.\"))\n\npig_aug\n\n\n# A tibble: 412 × 4\n   infected .pred_class .pred_0 .pred_1\n   &lt;fct&gt;    &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 1        1            0.0229   0.977\n 2 1        0            0.787    0.213\n 3 0        0            0.540    0.460\n 4 1        1            0.391    0.609\n 5 1        1            0.128    0.872\n 6 1        1            0.102    0.898\n 7 1        0            0.559    0.441\n 8 0        0            0.687    0.313\n 9 1        1            0.0556   0.944\n10 1        1            0.193    0.807\n# ℹ 402 more rows\n\n\nWir können dann die Werte aus dem Objekt pig_aug nutzen um uns die ROC Kurve als Güte der Vorhersage wiedergeben zu lassen. Wir nutzen hier die schnelle Variante der Ploterstellung. In dem Kapitel 76.6 zum Vergleich von Algorithmen gehe ich noch näher auf die möglichen Optionen bei der Erstellung einer ROC Kurve ein. Hier fällt die ROC Kurve dann mehr oder minder vom Himmel. Ich musste noch der Funktion mitgeben, dass das Event bei uns das zweite Level des Faktors infected ist. Sonst ist unsere ROC Kurve einmal an der Diagonalen gespiegelt.\nIn dem Kapitel 40 erfährst du mehr darüber was eine ROC Kurve ist und wie du die ROC Kurve interpretieren kannst.\n\n\nR Code [zeigen / verbergen]\npig_aug |&gt; \n  roc_curve(truth = infected, .pred_1, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 58.7— ROC Kurve für die Vorhersage des Infektionsstatus der Ferkel anhand der erhobenen Daten.\n\n\n\n\n\nNa das hat doch mal gut funktioniert. Die ROC Kurve verläuft zwar nicht ideal aber immerhin ist die ROC Kurve weit von der Diagnolen entfernt. Unser Modell ist also in der Lage den Infektionsstatus der Ferkel einigermaßen solide vorherzusagen. Schauen wir uns noch die area under the curve (abk. AUC) an.\n\n\nR Code [zeigen / verbergen]\npig_aug |&gt; \n  roc_auc(truth = infected, .pred_1, event_level = \"second\")\n\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.819\n\n\nDer beste Wert wäre hier eine AUC von \\(1\\) und damit eine perfekte Vorhersage. Der schlechteste Wert wäre eine AUC von \\(0.5\\) und damit eine nahezu zufällige Zuordnung des Infeketionsstatus zu den Ferkeln von unserem Modell. Mit einer AUC von \\(0.83\\) können wir aber schon gut leben. Immerhin haben wir kaum am Modell rumgeschraubt bzw. ein Tuning betrieben. Wenn du mehr über Tuning und der Optimierung von Modellen zu Klassifikation wissen willst, dan musst du im Kapitel 73 zu den maschinellen Lernverfahren anfangen zu lesen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-logistic.html#referenzen",
    "href": "stat-modeling-logistic.html#referenzen",
    "title": "58  Logistische Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nDormann, C. F. (2013). Parametrische Statistik. Springer.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Logistische Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html",
    "href": "stat-modeling-prob-model.html",
    "title": "59  Linear Probability Model",
    "section": "",
    "text": "59.1 Genutzte R Pakete\nLetzte Änderung am 01. April 2024 um 11:16:53\nDas Wahrscheinlichkeitsmodell (eng. probability model oder linear probability model) ist ein seltsames Konstrukt aus der Ökonomie und den Sozialwissenschaften. Wir nutzen hier auch den englischen Begriff, da der deutsche Begriff eigentlich nicht benutzt wird. Es handelt sich hier also um probability models. Was macht also das probability model? Eigentlich alles falsch, was man so im Allgemeinen meinen würde. Das probability model nimmt als Outcome \\(y\\) eine \\(0/1\\) Variable. Wir modellieren also wie bei der logistischen Regression ein Outcome \\(y\\) was sich nur durch zwei Ausprägungen darstellen lässt. Und damit wären wir dann auch beim Punkt angekommen. Anstatt das \\(0/1\\) Outcome jetzt richtig mit der logistischen Regression auszuwerten, nutzen wir die klassische Gaussian Regression mit der Annahme eines normalverteilten Outcomes. Wir nutzen hier also das falsche Modell für das gemessene Outcome. Warum machen wir das? Weil sich die Effektschätzer aus einer Gaussian Regression auf einem \\(0/1\\) Outcome besser interpretieren lassen. Wie immer gibt es viel Disput, ob du so was überhaupt machen darfst. Können tust es auf jeden Fall. Wir können auf alle Daten alle Modelle anwenden. Nun ist es aber so, dass die Auswertung von einem \\(0/1\\) Outcome mit einem probability model teilweise in der Ökonomie oder den Sozialwissenschaften sehr verbreitet ist. Deshalb findest du auch hier dieses etwas kurzes Kapitel.\nWir immer gibt es auch wieder zwei gute Tutorien auf die sich hier alles reimt. Einmal bitte das Tutorium Linear Probability Model sowie Binary Dependent Variables and the Linear Probability Model besuchen. Wenn du noch mehr über lm() und glm() lesen möchtest, dann kannst du das auch nochmal in der Frage zu Linear probability model: lm() und glm() machen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, sandwich, lmtest, \n               emmeans, multcomp, see,\n               performance, broom, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(magrittr::extract)\nconflicts_prefer(magrittr::set_names)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#daten",
    "href": "stat-modeling-prob-model.html#daten",
    "title": "59  Linear Probability Model",
    "section": "59.2 Daten",
    "text": "59.2 Daten\nIn diesem Kapitel nutzen wir die infizierten Ferkel als Beispieldatensatz. Wir haben in dem Datensatz über vierhundert Ferkel untersucht und festgehalten, ob die Ferkel infiziert sind (\\(1\\), ja) oder nicht infiziert (\\(0\\), nein). Wir haben daneben noch eine ganze Reihe von Risikofaktoren erhoben. Hier sieht man mal wieder wie wirr die Sprache der Statistik ist. Weil wir rausfinden wollen welche Variable das Risiko für die Infektion erhöht, nennen wir diese Variablen Risikofaktoren. Wir nehmen hier jetzt aber nicht alle Variablen mit, sondern nur die Variablen für den Entzündungswert crp, das Geschlecht sex, dem Alter age und der Gebrechlichkeitskategorie frailty.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt; \n  select(infected, crp, sex, age, frailty) \n\n\nSchauen wir uns nochmal einen Ausschnitt der Daten in der Tabelle 59.1 an.\n\n\n\n\nTabelle 59.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\ninfected\ncrp\nsex\nage\nfrailty\n\n\n\n\n1\n22.38\nmale\n61\nrobust\n\n\n1\n18.64\nmale\n53\nrobust\n\n\n0\n18.76\nfemale\n66\nrobust\n\n\n1\n19.37\nfemale\n59\nrobust\n\n\n…\n…\n…\n…\n…\n\n\n1\n21.95\nmale\n57\npre-frail\n\n\n1\n23.1\nmale\n61\nrobust\n\n\n0\n20.23\nfemale\n59\nrobust\n\n\n1\n19.89\nfemale\n63\nrobust\n\n\n\n\n\n\n\n\nIm Folgenden wollen wir einmal modellieren, ob es einen Zusammenhang von den Variablen crp, sex, age und frailty auf das \\(0/1\\)-Outcome infected gibt. Welche der Variablen erniedrigen oder erhöhen also das Risiko einer Ferkelinfektion?",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#theoretischer-hintergrund",
    "href": "stat-modeling-prob-model.html#theoretischer-hintergrund",
    "title": "59  Linear Probability Model",
    "section": "59.3 Theoretischer Hintergrund",
    "text": "59.3 Theoretischer Hintergrund\nDen theoretischen Hintergrund belassen wir hier nur kurz. Die Idee sehen wir dann einmal in der Abbildung 59.1. Wir haben hier dann nur die Variable crp und das Outcome infected dargestellt. Wir sehe die klaren zwei Ebenen. Wir haben ja bei dem Infektionsstatus auch nur zwei mögliche Ausprägungen. Entweder ist unser Ferkel infiziert oder eben nicht. Da wir aber die Entzündungswerte kontinuierlich messen ergeben sich die beiden Ebenen.\n\n\nR Code [zeigen / verbergen]\nggplot(pig_tbl, aes(x = crp, y = infected)) +\n  theme_minimal() +\n  geom_point() \n\n\n\n\n\n\n\n\nAbbildung 59.1— Visualisierung des Zusammenhangs zwischen dem Infektionsstatus und den Entzündungswerten der Ferkel.\n\n\n\n\n\nTja und dann rechnen wir einfach eine Gaussian linear Regression mit der Funktion lm(). Es ergibt sich dann eine gerade Linie, wie wir sie in der Abbildung 59.2 sehen. Da wir aber mit unserem Infektionsstatus auf \\(0/1\\) begrenzt sind, aber eine Gerade nicht, haben wir das Problem, dass wir in diesem Fall den Infektionsstatus für CRP-Werte größer als 22 überschätzen. Ich meine mit überschätzen dann auch wirklich Werte zu erhalten, die es dann gar nicht geben kann. Es kann keinen Infektionsstatus über ja geben.\n\n\nR Code [zeigen / verbergen]\nggplot(pig_tbl, aes(x = crp, y = infected)) +\n  theme_minimal() +\n  geom_point() +\n  stat_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\nAbbildung 59.2— Visualisierung des Zusammenhangs zwischen dem Infektionsstatus und den Entzündungswerten der Ferkel ergänzt um Gerade aus der Gaussian linearen Regression.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#modellierung",
    "href": "stat-modeling-prob-model.html#modellierung",
    "title": "59  Linear Probability Model",
    "section": "59.4 Modellierung",
    "text": "59.4 Modellierung\nDann können wir schon das probability model anpassen. Dazu nehmen wir die Funktion lm(), die wir auch für unsere Gaussian linearen Regression unter der Annahme eines normalverteilten Outcomes \\(y\\) nutzen. Wichtig ist hier, dass wir auf keinen Fall unseren Infektionsstatus infected als einen Faktor übergeben. Der Infektionsstatus infected muss numerisch sein.\n\n\nR Code [zeigen / verbergen]\nlm_fit &lt;- lm(infected ~ crp + age + sex + frailty, data = pig_tbl)\n\n\nSchauen wir uns aber gleich mal die Modellausgabe an. Wie immer, du kannst alle Zahlen und Spalten in eine Funktion stecken und am Ende kommt dann was raus. Woher soll auch die Funktion wissen, dass es sich um einen Faktor handelt oder eine numerische Variable?\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  summary()\n\n\n\nCall:\nlm(formula = infected ~ crp + age + sex + frailty, data = pig_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.9413 -0.3454  0.1220  0.3052  0.7996 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.648693   0.411294  -6.440 3.38e-10 ***\ncrp               0.162087   0.014160  11.447  &lt; 2e-16 ***\nage               0.001468   0.004522   0.325    0.746    \nsexmale          -0.047673   0.041556  -1.147    0.252    \nfrailtypre-frail  0.038275   0.065363   0.586    0.558    \nfrailtyrobust    -0.011544   0.062065  -0.186    0.853    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4103 on 406 degrees of freedom\nMultiple R-squared:  0.2499,    Adjusted R-squared:  0.2406 \nF-statistic: 27.05 on 5 and 406 DF,  p-value: &lt; 2.2e-16\n\n\nNeben der sehr schlechten Modellgüte, die wir am Bestimmtheitsmaß \\(R^2\\) mit 0.24 erkennen, sind aber die Residuen nach den deskriptiven Maßzahlen einigermaßen okay. Wir werden aber gleich noch sehen, dass die Maßzahlen hier auch trügen können. Was ist den nun das Tolle am probability model? Wir können die Effektschätzer Estimate direkt als prozentuale Veränderung interpretieren. Das heißt, wir können sagen, dass pro Einheit crp die Wahrscheinlichkeit infiziert zu sein um 16.2087% ansteigt. Das ist natürlich eine sehr schöne Eigenschaft. Nur leider gibt es da meistens dann doch ein Problem. Dafür schauen wir uns einmal die Spannweite der vorhergesagten Werte an.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  predict() |&gt; \n  range() |&gt; \n  round(2)\n\n\n[1] -0.04  1.27\n\n\nWie du siehst, kriegen wir Werte größer als Eins und kleiner als Null aus dem Modell raus. Das macht jetzt aber recht wenig Sinn. Wir können die Werte aus predict() als Wahrscheinlichkeit infiziert zu sein interpretieren. Da unsere Ferkel aber nur gesund oder krank sein können, machen negative Werte der Wahrscheinlichkeit infiziert zu sein keinen Sinn. Auch Werte größer als Eins können wir nur sehr schwer interpretieren.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#varianzheterogenität",
    "href": "stat-modeling-prob-model.html#varianzheterogenität",
    "title": "59  Linear Probability Model",
    "section": "59.5 Varianzheterogenität",
    "text": "59.5 Varianzheterogenität\nWenn du das probability model durchführst, dann hast du in den meisten Fällen das Problem der Heteroskedastizität, auch Varianzheterogenität genannt. Oder in anderen Worten, die Residuen als Fehler unseres Modell sind nicht gleichmäßig mit gleich großen Werten verteilt um die Gerade. Gut, dass klingt jetzt etwas sperrig, hier einmal die Abbildung 59.3 um es besser zu verstehen.\n\n\n\n\n\n\n\n\nAbbildung 59.3— Varianzheterogenität oder Heteroskedastizität in den Daten. Die Abstände der Punkte zu der Geraden, die Residuen, werden immer größer. Wir haben keinen konstanten oder homogenen Fehler.\n\n\n\n\n\nFür unser Modell lm_fit von oben können wir auch gleich die Funktion check_heteroscedasticity() aus dem R Paket {performance} nutzen um zu Überprüfen ob wir Varianzheterogenität vorliegen haben. Aber Achtung, ich wäre hier sehr vorsichtig, wenn die Funktion sagt, dass wir keine Varianzheterogenität vorliegen haben.\n\n\nR Code [zeigen / verbergen]\ncheck_heteroscedasticity(lm_fit)\n\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\nNeben der Funktion check_heteroscedasticity() gibt es auch die Möglichkeit über check_model() sich die Varianzen und damit die Residuen einmal anzuschauen. Die visuelle Überprüfung ist auf jeden Fall Pflicht. Und wie du in der Abbildung 59.4 siehst, sind die Varianzen weder homogen noch irgendwie normalverteilt. Wir gehen also von Varianzheterogenität aus. Damit liegen wir in Linie mit der Funktion check_heteroscedasticity(), aber das muss nicht immer unbedingt sein. Besonders bei kleiner Fallzahl, kann es vorkommen, dass check_heteroscedasticity() eine Varianzheterogenität übersieht.\n\n\nR Code [zeigen / verbergen]\ncheck_model(lm_fit, check = c(\"homogeneity\", \"normality\"))\n\n\n\n\n\n\n\n\nAbbildung 59.4— Überprüfung der Varianzhomogeniutät des Modells lm_fit mit der Funktion check_model(). Wir sehen hier eine klare Varianzheterogenität in dem Modell.\n\n\n\n\n\nJetzt kann man sich fragen, warum sind denn da so Bögen drin? Das kommt von den Abständen der Punkte auf den beiden Ebenen. Die Gerade läuft ja durch einen Bereich in dem keine Beobachtungen sind. Daher ist am Anfang der Abstand zu einer der beiden Ebenen, entweder der Null oder der Eins, minimal und erhöht sich dann langsam. Weil ja nicht alle Beobachtungen alle bei Null sind springen die Abstände von klein zu groß. In Abbildung 59.5 siehst du nochmal den Zusammenhang. Unsere angepasste Gerade steigt ja an, wie du in Abbildung 59.2 siehst. Daher sind die Abstände zu den Null Werten am Anfang sehr klein und stiegen dann an. Sobald die erste Beobachtung mit einem Infektionsstatus von Eins auftaucht, springt der Abstand natürlich sofort nach oben. Werte größer als Eins dürfte es auf der x-Achse gar nicht geben, den dort werden dann Werte größer als Eins geschätzt.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  augment() |&gt; \n  ggplot(aes(x = .fitted, y = .resid^2, color = as_factor(infected))) +\n  theme_minimal() +\n  geom_point() +\n  labs(x = \"Angepasste Werte\", y = \"Residuen\", color = \"Infected\") +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 59.5— Etwas andere Darstellung der angepassten Werte .fitted und der Residuen .resid aus dem Modell lm_fit. Die Punkte sind nach dem Infektionsstatus eingefärbt.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#interpretation-des-modells",
    "href": "stat-modeling-prob-model.html#interpretation-des-modells",
    "title": "59  Linear Probability Model",
    "section": "59.6 Interpretation des Modells",
    "text": "59.6 Interpretation des Modells\nWir haben ja schon einmal weiter oben in das Modell geschaut und eine Interpretation vorgenommen. Wir erinnern uns, wir können die Effektschätzer Estimate aus einem probability model direkt als prozentuale Veränderung interpretieren. Das heißt, wir können sagen, dass pro Einheit crp die Wahrscheinlichkeit infiziert zu sein um 16.2087% ansteigt. Das ist natürlich eine sehr schöne Eigenschaft. Dann haben wir auch noch gleich die Richtung mit drin, wenn wir also negative Effekte haben, dann senkt die Variable das Risiko pro Einheit um den prozentualen Wert. Bei kategorialen Variablen haben wir dann den Unterschied zu der nicht vorhandenen Gruppe. Daher sind männliche Ferkel um 5% weniger infiziert als weibliche Ferkel. Leider geht der t-Test, der die \\(p\\)-Werte produziert, von homogenen Varianzen aus. Die haben wir aber nicht vorliegen.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  summary() |&gt; \n  pluck(\"coefficients\") |&gt; \n  round(4)\n\n\n                 Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)       -2.6487     0.4113 -6.4399   0.0000\ncrp                0.1621     0.0142 11.4467   0.0000\nage                0.0015     0.0045  0.3246   0.7457\nsexmale           -0.0477     0.0416 -1.1472   0.2520\nfrailtypre-frail   0.0383     0.0654  0.5856   0.5585\nfrailtyrobust     -0.0115     0.0621 -0.1860   0.8525\n\n\nDeshalb müssen wir nochmal ran. Wir können die Funktion coeftest() aus dem R Paket {lmtest} zusammen mit den R Paket {sandwich} nutzen um unsere Modellanpassung für die Varianzheterogenität zu adjustieren. Wir ändern also die Spalte Strd. Error. Es gibt aber sehr viele Möglichkeiten type die Varianz anzupassen. Das ist ein eigenes Kapitel worum wir uns hier nicht scheren. Wir nehmen mehr oder minder den Standard mit HC1.\n\n\nR Code [zeigen / verbergen]\nlm_fit |&gt; \n  coeftest(vcov. = vcovHC, type = \"HC1\") |&gt; \n  round(4) |&gt; \n  tidy()\n\n\n# A tibble: 6 × 5\n  term             estimate std.error statistic p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)       -2.65      0.392     -6.75    0    \n2 crp                0.162     0.0121    13.4     0    \n3 age                0.0015    0.0045     0.326   0.745\n4 sexmale           -0.0477    0.0411    -1.16    0.247\n5 frailtypre-frail   0.0383    0.0598     0.640   0.522\n6 frailtyrobust     -0.0115    0.0559    -0.206   0.836\n\n\nWir schauen also als erstes auf den Standardfehler und sehen, dass unsere Gaussian lineare Regression (OLS) den Standardfehler als zu hoch geschätzt hat. Größer Standardfehler bedeutet kleinere Teststatistik und damit dann auch weniger signifikante \\(p\\)-Werte. In der Tabelle 59.2 siehst du nochmal die beiden Spalten der Standardfehler nebeneinander. Unser Sandwich-Schätzer (HC1) liefert da die besseren Fehlerterme, die eher der Realität der Varianzheterogenität entsprechen. Wir brauchen die adjustierten Standardfehler aber nur, wenn wir eine statistischen Test rechnen wollen und den \\(p\\)-Wert für die Bewertung der Signifikanz brauchen.\n\n\n\n\nTabelle 59.2— Vergleich der Standardfehler der Gaussian linear Regression mit der Annahme der homogenen Varianzen (OLS) und die Adjusterung der Fehler mit dem Sandwich-Schätzer (HC1).\n\n\n\n\n\n\n\nOLS\nHC1\n\n\n\n\n(Intercept)\n0.4113\n0.3924\n\n\ncrp\n0.0142\n0.0121\n\n\nage\n0.0045\n0.0045\n\n\nsexmale\n0.0416\n0.0411\n\n\nfrailtypre-frail\n0.0654\n0.0598\n\n\nfrailtyrobust\n0.0621\n0.0559",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-prob-model.html#gruppenvergleich",
    "href": "stat-modeling-prob-model.html#gruppenvergleich",
    "title": "59  Linear Probability Model",
    "section": "59.7 Gruppenvergleich",
    "text": "59.7 Gruppenvergleich\nHäufig ist es ja so, dass wir das Modell nur schätzen um dann einen Gruppenvergleich zu rechnen. Das heißt, dass es uns interessiert, ob es einen Unterschied zwischen den Leveln eines Faktors gegeben dem Outcome \\(y\\) gibt. Wir machen den Gruppenvergleich jetzt einmal an der Gebrechlichkeit frailty einmal durch. Wir habe die drei Gruppen frail, pre-frail und robust vorliegen. Danach schauen wir uns nochmal die prinzipielle Idee des Gruppenvergleichs auf mittleren Wahrscheinlichkeiten infiziert zu sein an.\nEigentlich ist es recht einfach. Wir nehmen wieder unser lineares Modell, was wir oben schon angepasst haben. Wir schicken dann das Modell in die Funktion emmeans() um die Gruppenvergleiche zu rechnen. Jetzt müssen wir nur zwei Dinge noch machen. Zum einen wollen wir alle paarweisen Vergleiche zwischen den drei Leveln von dem Faktor frailty rechnen, deshalb setzen wir method = \"pairwise\". Dann müssen wir noch dafür sorgen, dass wir nicht homogene Varianzen schätzen. Deshalb setzen wir die Option vcov. = sandwich::vcovHAC. Damit wählen wir aus dem Paket {sandwich} den Sandwichschätzer vcovHAC und berücksichtigen damit die Varianzheterogenität in den Daten. Wenn du das Paket {sandwich} schon geladen hast, dann musst du das Paket nicht mit Doppelpunkt vor die Funktion des Sandwich-Schätzers setzen.\n\n\nR Code [zeigen / verbergen]\nem_obj &lt;- lm_fit |&gt; \n  emmeans(~ frailty, method = \"pairwise\", vcov. = sandwich::vcovHAC)\nem_obj\n\n\n frailty   emmean     SE  df lower.CL upper.CL\n frail      0.668 0.0482 406    0.573    0.763\n pre-frail  0.706 0.0355 406    0.636    0.776\n robust     0.656 0.0288 406    0.600    0.713\n\nResults are averaged over the levels of: sex \nConfidence level used: 0.95 \n\n\nDann können wir auch schon uns die Kontraste und damit die Mittelwertsvergleiche wiedergeben lassen. Was heißt hier Mittelwertsvergleiche? Die Mittelwerte sind hier natürlich die mittlere Wahrscheinlichkeit infiziert zu sein. Wir adjustieren hier einmal die \\(p\\)-Werte für multiple Vergleiche nach Bonferroni, damit du auch mal die Optionen siehst.\n\n\nR Code [zeigen / verbergen]\nem_obj |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\")\n\n\n contrast             estimate     SE  df t.ratio p.value\n frail - (pre-frail)   -0.0383 0.0597 406  -0.641  1.0000\n frail - robust         0.0115 0.0559 406   0.206  1.0000\n (pre-frail) - robust   0.0498 0.0458 406   1.088  0.8313\n\nResults are averaged over the levels of: sex \nP value adjustment: bonferroni method for 3 tests \n\n\nWir sehen also, dass es einen prozentualen Unterschied zwischen frail - (pre-frail) von -3% gibt. Daher ist die mittlere Wahrscheinlichkeit von pre-frail größer als die von frail. Den Zusammenhang sehen wir auch weiter oben in der Ausgabe von emmeans. Dort haben wir eine mittlere Infektionswahrscheinlichkeit von 66.8% für frail und eine mittlere Infektionswahrscheinlichkeit von 70.6% für pre-frail. Keiner der Vergleiche ist signifikant. Beachte, dass jeder Vergleich immer einen unterschiedlichen Standardfehler zugewiesen bekommt um die Varianzheterogenität zu berücksichtigen.\nJetzt lassen wir uns nochmal das unadjustierte compact letter display wiedergeben. Aber auch in dem unadjustierten Fall finden wir keine signifikanten Unterschiede.\n\n\nR Code [zeigen / verbergen]\nem_obj |&gt;\n  cld(Letters = letters, adjust = \"none\")\n\n\n frailty   emmean     SE  df lower.CL upper.CL .group\n robust     0.656 0.0288 406    0.600    0.713  a    \n frail      0.668 0.0482 406    0.573    0.763  a    \n pre-frail  0.706 0.0355 406    0.636    0.776  a    \n\nResults are averaged over the levels of: sex \nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nAm Ende möchte ich hier nochmal einen Spieldatensatz toy_tbl erstellen indem ich wiederum drei Gruppen miteinander vergleiche. Ich tue mal so als würden wir uns hier zwei Pestizide und eine Kontrolle anschauen. Unser Outcome ist dann, ob wir eine Infektion vorliegen haben oder das Pestizid alles umgebracht hat. Damit haben wir dann unser Outcome infected definiert. Wir bauen uns die Daten so, dass 80% der Beobachtungen in der Kontrolle infiziert sind. In den beiden Behandlungsgruppen sind jeweils 50% und 30% der Beobachtungen nach der Behandlung noch infiziert. Wir haben jeweils zwölf Pflanzen n_grp beobachtet. Das sind wirklich wenige Beobachtungen für einen \\(0/1\\) Endpunkt.\n\n\nR Code [zeigen / verbergen]\nn_grp &lt;- 12\ntoy_tbl &lt;- tibble(trt = gl(3, n_grp, labels = c(\"ctrl\", \"roundUp\", \"killAll\")),\n                  infected = c(rbinom(n_grp, 1, 0.8), rbinom(n_grp, 1, 0.5), rbinom(n_grp, 1, 0.2)))\n\n\nJetzt bauen wir uns wieder unser Modell zusammen.\n\n\nR Code [zeigen / verbergen]\ntoy_fit &lt;- lm(infected ~ trt, data = toy_tbl)\ntoy_fit\n\n\n\nCall:\nlm(formula = infected ~ trt, data = toy_tbl)\n\nCoefficients:\n(Intercept)   trtroundUp   trtkillAll  \n     0.6667      -0.1667      -0.5000  \n\n\nWie du sehen kannst, treffen wir die voreingestellten Infektionswahrscheinlichkeiten nur einigermaßen. Wir wollen für die Kontrolle 80% und erhalten 83.3%. Für roundUp haben wir 50% gewählt und erhalten \\(83.3 - 41.67 = 41.63\\). Auch bei killAll sieht es ähnlich aus, wir wollen 20% und erhalten $83.3 - 58.33 = 24.97$. Wir haben aber auch echt wenige Beobachtungen. Auf der anderen Seite ist es dann für ein agrarwissenschaftliches Experiment gra nicht mal so wenig.\nUnd hier sehen wir dann auch gleich das Problem mit der Funktion check_heteroscedasticity(). Wegen der geringen Fallzahl sagt die Funktion, dass alles okay ist mit den Varianzen und wir keine Varianzheterogenität vorliegen haben.\n\n\nR Code [zeigen / verbergen]\ncheck_heteroscedasticity(toy_fit)\n\n\nOK: Error variance appears to be homoscedastic (p = 0.410).\n\n\nWenn wir uns aber mal die Abbildung 59.6 anschauen sehen wir, dass wir auf keinen Fall Varianzhomogenität vorliegen haben. Die geringe Fallzahl von zwölf Beobachtungen je Gruppe ist zu klein, damit die Funktion check_heteroscedasticity() eine signifikanten Abweichung finden kann. Deshalb schaue ich mir immer die Abbildungen an.\n\n\nR Code [zeigen / verbergen]\ncheck_model(toy_fit, check = c(\"homogeneity\", \"normality\"))\n\n\n\n\n\n\n\n\nAbbildung 59.6— Überprüfung der Varianzhomogeniutät des Modells toy_fit mit der Funktion check_model(). Wir sehen hier eine klare Varianzheterogenität in dem Modell.\n\n\n\n\n\nWir können hier auch den coeftest() für Varianzheterogenität rechnen, aber wir sind ja hier an den Gruppenvergleichen interessiert, so dass wir dann gleich zu emmeans weitergehen.\n\n\nR Code [zeigen / verbergen]\ncoeftest(toy_fit, vcov. = vcovHC, type = \"HC1\")\n\n\n\nt test of coefficients:\n\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.66667    0.14213  4.6904 4.58e-05 ***\ntrtroundUp  -0.16667    0.20719 -0.8044  0.42692    \ntrtkillAll  -0.50000    0.18119 -2.7596  0.00937 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWie schon oben gezeigt, können wir dann einfach emmeans() nutzen um die Gruppenvergleiche zu rechnen. Auch hier müssen wir einmal angeben, dass wir einen paarweisen Vergleich rechnen wollen. Wir wollen alle Gruppen miteinander vergleichen. Dann noch die Option vcov. = sandwich::vcovHAC gewählt um für heterogene Varianzen zu adjustieren.\n\n\nR Code [zeigen / verbergen]\nem_obj &lt;- toy_fit |&gt; \n  emmeans(~ trt, method = \"pairwise\", vcov. = sandwich::vcovHAC)\nem_obj \n\n\n trt     emmean    SE df lower.CL upper.CL\n ctrl     0.667 0.130 33   0.4026    0.931\n roundUp  0.500 0.146 33   0.2021    0.798\n killAll  0.167 0.108 33  -0.0528    0.386\n\nConfidence level used: 0.95 \n\n\nAuch hier sehen wir die mittlere Wahrscheinlichkeit infiziert zu sein in der Spalte emmean. Die Standardfehler SE sind für jede Gruppe unterschiedlich, die Adjustierung für die Varianzheterogenität hat geklappt. Dann kannst du noch die paarweisen Gruppenvergleiche über einen Kontrasttest dir wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nem_obj |&gt; \n  contrast(method = \"pairwise\", adjust = \"none\")\n\n\n contrast          estimate    SE df t.ratio p.value\n ctrl - roundUp       0.167 0.198 33   0.842  0.4059\n ctrl - killAll       0.500 0.169 33   2.960  0.0057\n roundUp - killAll    0.333 0.181 33   1.837  0.0752\n\n\nOder aber du nutzt das compact letter display.\n\n\nR Code [zeigen / verbergen]\nem_obj |&gt;\n  cld(Letters = letters, adjust = \"none\")\n\n\n trt     emmean    SE df lower.CL upper.CL .group\n killAll  0.167 0.108 33  -0.0528    0.386  a    \n roundUp  0.500 0.146 33   0.2021    0.798  ab   \n ctrl     0.667 0.130 33   0.4026    0.931   b   \n\nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDa die Fallzahl sehr gering ist, können wir am Ende nur zeigen, dass sich die Kontrolle von der Behandlung killAll unterscheidet. Hätten wir mehr Fallzahl, dann könnten wir sicherlich auch zeigen, dass der Unterschied zwischen der Kontrolle zu der Behandlung roundUp in eine signifikante Richtung geht. So klein ist der Unterschied zwischen Kontrolle und roundUp mit 41.7% ja nicht.\n\n\n\n\n\n\nAnwendungsbeispiel: Beschädigter Mais nach der Ernte\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit Mais an. Wir haben uns in diesem Experiment verschiedene Arten trt von Ernteverfahren von Mais angeschaut. Dann haben wir nach vier Zeitpunkten bestimmt, ob der Mais durch das Ernetverfahren nachträglich beschädigt war. Die Beschädigung selber wurde dann etwas komplizierter mit einem Labortest festgestellt, aber wir schauen uns nur die Ausprägung ja/nein also \\(1/0\\) als Outcome an. Durch einen Fehler im Labor müssen wir eine Kombination für den letzten Tag und der dritten Behandlung entfernen.\n\n\nR Code [zeigen / verbergen]\nmaize_tbl &lt;- read_excel(\"data/maize_rate.xlsx\") |&gt; \n   mutate(damaged = ifelse(time == \"5d\" & trt == 3, NA, damaged),\n          trt = factor(trt, labels = c(\"wenig\", \"mittel\", \"viel\")))\n\n\nDann rechnen wir auch schon das lm() Modell und nutzen {emmeans} für den Gruppenvergleich. Hier unbedingt SE als den Standardfehler für die Fehlerbalken nutzen, da wir sonst Fehlerbalken größer und kleiner als \\(0/1\\) erhalten, wenn wir die Standardabweichung nutzen würden. Du solltest auch immer von Varianzheterogenität ausgehen, deshalb nutze ich hier auch die Option vcov. = sandwich::vcovHAC in emmeans(). In der Abbildung 59.7 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Wir sehen einen klaren Effekt der Behandlung viel. Schade, dass wir dann nach 5 Tagen leider keine Auswertung für die dritte Behandlung vorliegen haben. Aber sowas passiert dann unter echten Bedingungen mal schnell.\n\n\nR Code [zeigen / verbergen]\nlm(damaged ~ trt + time + trt:time, data = maize_tbl) |&gt; \n  emmeans(~ trt * time, vcov. = sandwich::vcovHAC) |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\") |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = time, y = emmean, fill = trt)) +\n  theme_minimal() + \n  labs(y = \"Anteil beschädigter Mais\", x = \"Stunden nach Ernte\",\n       fill = \"Behandlung\") +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = .group, y = emmean + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = emmean-SE, ymax = emmean+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 59.7— Säulendigramm der Anteile des beschädigten Mais aus einem linearen Modell. Das lm()-Modell berechnet die Mittelwerte in jeder Faktorkombination, was dann die Anteile des beschädigten Mais entspricht. Das compact letter display wird dann in {emmeans} generiert.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Linear Probability Model</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html",
    "href": "stat-modeling-mixed.html",
    "title": "60  Lineare gemischte Modelle",
    "section": "",
    "text": "60.1 Genutzte R Pakete\nLetzte Änderung am 29. March 2025 um 11:23:03\nIn diesem Kapitel vollen wir die Grundzüge der lineare gemischten Modell (eng. linear mixed models, abk. lmm) zu versuchen zu verstehen. Wir immer, es gibt dazu auch hervorragende Literatur wie das sehr ausführliche Buch von Zuur et al. (2009) oder Roback & Legler (2021) mit dem freien Onlinebuch Beyond Multiple Linear Regression - Applied Generalized Linear Models and Multilevel Models in R. Auch liefert Salinas Ruı́z et al. (2023) mit dem Open Access Buch Generalized Linear Mixed Models with Applications in Agriculture and Biology eine gute Quelle zum Weiterlesen. Wir fangen jetzt aber erstmal an zu verstehen, wie eigentlich ein Experiment aussehen muss, damit wir ein lineares gemischtes Modell rechnen wollen. Dabei ist der erste wichtige Punkt, das wir hier mit den gemischten Modellen hierarchische Daten abbilden. Es gibt also eine Hierarchie zwischen den Daten und damit auch eine Abhängigkeit innerhalb der Daten. Eine Abhängigkeit ist in der Statistik eine Korrelationsstruktur. Hier konzentrieren wir uns auf agrarwissenschaftliche Daten. Wir haben dabei in den Agarwissenschaften unser \\(x\\) als Faktoren \\(f\\) vorliegen. Für das \\(y\\) können aber jeden Messwert als Outcome abbilden den wir wollen. Dafür gibt es dann zum Beispiel die Funktion glmer(), die das Äquivalent zu der Funktion glm() ist.\nWir haben also folgendes, mehrfaktorielles Modell vorliegen. Diese Faktoren haben teilweise eine Hierarchie, die wir dann modellieren wollen.\n\\[\ny \\sim f_1 + f_2 + z_1 + z_2\n\\]\nUnd eigentlich haben wir ja gar nicht vier gleichwertige Faktoren vorliegen, sondern meistens unsere Behandlungsfaktor \\(f_1\\) und \\(f_2\\) an dem wir interessiert sind und dann noch bis zu zwei weitere Faktoren \\(z_1\\) und \\(z_2\\), die eine weitere Gruppierung repräsentieren. Wir können auch noch mehr Faktoren vorliegen haben, aber ich empfehle ein Design immer auf maximal vier Faktoren zu begrenzen. Unsere beiden Faktoren \\(z_1\\) und \\(z_2\\) beschreiben jetzt aber nicht noch mehr Behandlungen sondern stellen ein Feld, einen Block oder aber einen Stall dar. Wir haben es also mit Faktoren für eine “Position” zu tun. Die Position kann auch eine zeitliche Komponente sein. Deshalb schreiben wir etwas allgemeiner für die Faktoren \\(z_1\\) und \\(z_2\\) auch als “zufällige” Effekte. Wie schon erwähnt es handelt sich nicht ausschließlich um Blöcke, es können auch andere Positionen in Raum und Zeit sein. Es geht immer mehr und manchmal braucht man auch mehr Faktoren, aber in unserem Kontext hier würde ich anraten sich auf eher auf drei Faktoren zu begrenzen. Also entweder zwei Behandlungsfaktoren \\(f_1\\) sowie \\(f_2\\) und ein Positionsfaktor \\(z_1\\) oder aber ein Behandlungsfaktor \\(f_1\\) und zwei Positionsfaktoren \\(z_1\\) sowie \\(z_2\\).\nAls wäre das nicht kompliziert genug, haben wir meistens auch noch verschachtelte (eng. nested) Daten vorliegen. Damit meine ich, dass wir den Faktor \\(z_1\\) in jedem Level des Faktors \\(z_2\\) vorliegen haben. Wir können eben verschiedene Standorte als Faktor \\(z_2\\) betrachten und an jedem der Standorte haben wir Blöcke \\(z_1\\) vorliegen. Mehr dazu findest du dann auch in dem Kapitel Versuchsplanung in R und gleich nochmal weiter unten im Text.\nWas ist nun das Besondere an einem linearen gemischten Modell? Wie der Name schon sagt, haben wir irgendwas gemischt. Glücklicherweise mischen wir nur zwei Dinge miteinander. Wir mischen hier feste Effekte (eng. fixed effect) und zufällige Effekte (eng. random effect) miteinander. Bis jetzt kennst du eigentlich nur feste Effekte. Immer wenn wir ein Modell gebaut haben, dann haben wir das Modell mit festen Effekten gebaut. Wir haben dabei Fakotoren als feste Effekte modelliert. Was ist also nun der Unterschied zwischen der Wahl einen Faktor als festen Effekt oder zufälligen Effekt anzusehen? Zuerst ist dies eine Modellierungsentscheidung. Wir müssen uns also zwischen Arten von Modellen unterscheiden. Daher können wir auch verschiedene Modelle mit unterschiedlichen Anzahlen an Faktoren bauen und dann diese Modelle vergleichen. Welcher Faktor jetzt als fester Effekt und welcher als zufälliger Effekt gilt, liegt dabei an uns.\nDie Idee hinter dem Modell mit festen Effekten ist, dass die beobachteten Effektgrößen von Block zu Block variieren können, was aber nur auf den Varianz der Blöcke zurückzuführen ist. In Wirklichkeit sind die wahren Effektgrößen alle gleich: Sie sind fix. Alle Blöcke haben den gleichen Mittelwert und variieren nur in der Varianz. Wir sehen aber diesen wahren Mittelwert nicht, da sich alle Blöcke eben immer leicht unterscheiden. Mehr dazu auch in The Fixed-Effect Model)\nDas Modell der zufälligen Effekte geht davon aus, dass es nicht nur eine wahre Effektgröße gibt, sondern eine Verteilung der wahren Effektgrößen. Jeder unserer Blöcke kann also einen anderen wahren Mittelwert haben. Das Ziel des Modells mit zufälligen Effekten ist es daher nicht, die eine wahre Effektgröße aller Blöcke zu schätzen, sondern den Mittelwert der Verteilung der wahren Effekte. Mehr dazu auch in The Random-Effect Model)\nDabei verbinden die gemischten Modelle die Vorteile eines Modells mit festen Effekt sowie eines Modells mit zufälligen Effekten. Lineare gemischte Modelle schätzen nun die subjektspezifischen Auswirkungen (eng. subject-specific) auf die Varianz eines Versuches. Dabei kommt es häufig darauf an unter welchen Umständen eine Beobachtung gemessen wurde. Stehen die Pflanze zusammen auf einem Feld? Sind die Ferkel alle Nachkommen einer Sau? Daher erweitern wir unser lineare Modell um einen zufälligen Effekt \\(z\\) und schreiben wie folgt.\n\\[\ny \\sim f_1 + 1|z_1\n\\]\nWir schreiben in R den Term für da zufällige Modell in der Form \\(z_0|z_1\\). Meist setzen wir den Intercept \\(z_0\\) für den zufälligen Effekt auf 1. Wenn wir darstellen wollen, das ein zufälliger Faktor in einem anderen zufälligen Fakotr genestet ist, dann schreiben wir 1|z_1/z_2.\n\\[\ny \\sim f_1 + 1|z_1/z_2\n\\]\nDas heißt, dass der zufällige Blockfaktor \\(z_1\\) in den zufälligen Blockfaktor \\(z_2\\) genestet ist. Das klingt jetzt etwas schräg, also einmal ein Beispiel. Wir haben eine Schule, dann sind die Schulklassen dieser Schule in der Schule genestet. Es gibt diese spezifischen Klassen mit den Schülern schlichtweg nicht in anderen Schulen. Wir sagen genestet (eng. nested), wenn wir sagen wollen, dass ein Faktor in einen anderen Faktor verschränkt ist. Die Klassen einer Schule sind in der Schule genestet.\nIn der Abbildung 60.1 siehst du einmal exemplarisch die Darstellung eines experimentellen Designs mit drei Faktoren. Die Behandlung ist dabei ein fester Effekt und die beiden Faktoren für die Tische und die Gewächshäuser sind zufällige Effekte. Damit wir in der Folge nicht immer so sehr durcheinander kommen, habe ich die festen Effekt als blau Kästen und die zufälligen Effekte als orange Kästen gesetzt.\nOkay, das ist jetzt bis hierher sehr abstrakt. Machen wir das mal konkret mit einem Beispiel mit drei Behandlungen gegen Blattläuse auf jeweils vier Tischen in drei Gewächshäusern. Pro Behandlung nehmen wir fünf Pflanzen. Damit ergibt sich folgendes Schema der Abhängigkeiten mit den jeweiligen Anzahlen.\n\\[\n\\overbrace{\\mbox{Gewächshauser}}^{n_g = 3} \\xrightarrow[alle]{beinhaltet} \\underbrace{\\mbox{Tische}}_{n_t = 4} \\xrightarrow[alle]{beinhaltet} \\overbrace{\\mbox{Behandlungen}}^{n_b = 3} \\xrightarrow[alle]{beinhaltet} \\underbrace{\\mbox{Beobachtungen}}_{n_w = 5}\n\\]\nWie du an dem obigen Beispiel sehen kannst, kommen wir bei linearen gemischten Modellen sehr schnell auf sehr große Fallzahlen. Wir haben im obigen, kleinen Beispiel alleine schon eine Fallzahl von \\(n_{gesamt} = 3 \\times 4 \\times 3 \\times 5 = 180\\) Pflanzen. Und damit ist eigentlich unser Beispiel sehr klein gewählt. Eigentlich brauchen wir für einen zufälligen Effekt als Daumenregel immer mehr als fünf Level für eine gute Modellschätzung.\nWie immer ist dieses Kapitel nur ein kleiner Teil von möglichen Orten um etwas über lineare gemischte Modelle zu lernen. In dem folgenden Kasten habe ich dir eine weitreichende Sammlung an Ideen und Tutorien zusammengesucht. Vielleicht findest du ja noch mehr Informationen dort. Für eine Analyse im Rahmen einer Abschlussarbeit sollte das Wissen hier aber reichen.\nNormalerweise nutze ich nur R Pakete, die auch auf CRAN oder eben per p_load() zu installieren sind. In diesem Kapitel brauche ich aber noch ein extra Paket, da die Ausgaben von linearen gemischten Modellen sehr unordentlich sind. Das R Paket {mixedup} hilft mir hier. Deshalb installiere ich einmal wie folgt {mixedup}.\nR Code [zeigen / verbergen]\nremotes::install_github('m-clark/mixedup')\nWir wollen folgende R Pakete ganz normal in diesem Kapitel nutzen. Es sind eine Menge geworden, aber das zeigt auch mal wieder, dass gemischte Modelle nicht unbedingt das einfachtse Modell sind.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom, see, simstudy,\n               multcomp, emmeans, lme4, broom.mixed, readxl,\n               parameters, ggridges, scales, performance, \n               ggdist, gghalves, glmmTMB, lmerTest, mixedup,\n               multilevelmod, agridat, desplot, modelsummary,\n               ggbeeswarm, ordinal, janitor, RVAideMemoire, \n               conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(lme4::lmer)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\ntheme_set(theme_minimal(base_size = 12))\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html#daten",
    "href": "stat-modeling-mixed.html#daten",
    "title": "60  Lineare gemischte Modelle",
    "section": "60.2 Daten",
    "text": "60.2 Daten\nAls erstes Beispiel nehmen wir einen Datensatz zu den Testergebnissen von Schülern an amerikanischen Schulen. Jetzt ist das kein Beispiel, welches du vielleicht in einem biologischen oder agrarwissenschaftlichen Umfeld erwarten würdest. Ich mache das aber hier bewusst, da wir uns alle sehr gut die Abhängigkeiten von Schülerleistungen von der jeweiligen Klasse und dem Standort der Schule vorstellen können. Jedem wird klar sein, dass ein Testergebnis aus einer Klausur nicht unabhängig davon ist, auf welche Schule der Schüler geht oder in welcher Klasse er unterrichtet wird. Schüler in einer gemeinsamen Klasse oder Schule werden sich ähnlicher sein als Schüler in unterschiedlichen Klassen oder Schulen.\nIn der Abbildung 60.2 siehst du einmal das Abhängigkeitsverhältnis in unserem Schuldatenbeispiel. Wir wenden in den verschiedenen Klassen als Behandlung trt eines von drei Lehrmethoden Frontal, Flipped Classroom oder HyperFlex an. Dabei wird natürlich eine ganze Klasse nach der entsprechenden Lehrmethode unterrichtet. Pro Schule finden sich drei Klassen und eine Klasse ist dann in einer der neun Schulen genestet.\n\n\n\n\n\n\nflowchart LR\n    C(trt):::fixed --- D(((nested))) --&gt; E(class):::random --- F(((nested))) --&gt; G(school):::random\n    classDef fixed fill:#56B4E9,stroke:#333,stroke-width:0.75px\n    classDef random fill:#E69F00,stroke:#333,stroke-width:0.75px\n\n\n\n\nAbbildung 60.2— In unseren Schuldaten haben wir verschiedene Schulen school und Klassen class mit zwei innovativen Lehrmethoden unterrichtet. Eine Kontrollgruppe soll die Ergebnisse eines Leistungstests absichern. Daher sind die Lehrmethoden trt in dem Faktor class genestet. Der Faktor class ist dann wiederum in jedem Faktor school genestet.\n\n\n\n\n\nIn dem folgenden Kasten werden einmal die Schuldaten simuliert. Daher können wir dann einmal nachvollziehen, welche Werte wir jeweils für die Effekte der Schule, der Klasse und der Lehrform gesetzt haben. Wir sehen dann auch mal, welche zufälligen Effekte wir eigentlich setzen müssen und wie wir dann die Modelle miteinander vergleichen. Du kannst den Kasten gerne überspringen und dann einfach mit der Visualisierung und Auswertung der Daten weitermachen.\n\n\n\n\n\n\nGenerierung von Schuldaten (3-faktoriell)\n\n\n\n\n\nWarum sollte man Daten simulieren? Reichen da nicht echte Daten? Wir können an den simulierten Daten die Werte zurückverfolgen, wir wir bei der Erstellung voreingestellt haben. Damit können wir dann auch bewerten, wie gut die statistischen Methoden funktioniert haben. Wir machen es uns aber auch etwas einfacher und bauen uns kein kompliziertes Beispiel. Umfangreich ist es nur, da Daten für ein gemischtes Modell eben auch umfangreich sind.\nAus Gründen der Einfachheit haben wir immer ein balanciertes Design vorliegen. Wir haben also immer in allen Faktorkombinationen die gleiche Anzahl an Beobachtungen n_reps vorliegen. In der Anwendung mag es Unterschiede geben, so hat eine Sau sicherlich nicht immer exakt zwölf Ferkel, aber in unseren Beispielen macht es keinen Unterschied. Balanciert oder unbalanciert ist bei gemischten Modellen eher nachrangig wichtig. Das R Paket {simstudy} erlaubt die Simulation von komplexeren Gruppenstrukturen mit auch unbalancierten Daten. Am Ende wäre es dann mit {simstudy} vermutlich einfacher gewesen… hier können wir dann auch unterschiedlich Klassengrößen und Anzahlen simulieren.\nIm Folgenden setze ich einmal Werte für die Schulanzahl, Klassenzahl pro Schule sowie die Anzahl an Behandlungen. Dann müssen wir noch definieren wie viele Schüler dann pro Klasse zu finden sind. Wenn wir das haben, dann können wir auch die Effekte der Klassen, Schulen und der Lehrformate festlegen. Dabei sind die Effekt der zufälligen Effekte der Klassen und Schule dann die zusätzliche Varianz abgebildet durch die Standardabweichungen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(spatstat.random)\n# set seed\nset.seed(20231208)\n# sample sizes\nn_school &lt;- 9\nn_class_per_school &lt;- 3\nn_class &lt;- n_school * n_class_per_school\nn_trt &lt;- 3\nn_reps &lt;- 20\n# effects and standard deviation\nsd_school &lt;- 10\nsd_class &lt;- 5\nsd_error &lt;- 2\neff_trt &lt;- c(frontal = 10,\n             flipped = -10,\n             hyflex = 30)\n\n\nDann können wir uns schon das Grid für die Daten erstellen. Dabei müssen wir dann mehrfach expand_grid() nutzen um erst die Schulen zu erschaffen, dann die Lehrformate den Schulen zuordnen und dann die Klassen pro Schule erschaffen. Ende müssen wir noch den Datensatz mit der Anzahl an Schülern pro Klasse erweitern. Dann beschreibt jede Zeile genau einen Schüler. Neben der Zuordnung jedes einzelnen Schülern zu einem Lehrformat, Klasse und Schule, müssen wir noch die Effekte \\(s_0\\), \\(c_0\\) und \\(t_{eff}\\), die jeder Schüler durch eben jene Zuordnung erhält, ergänzen.\n\n\nR Code [zeigen / verbergen]\nschool_grid_tbl &lt;- tibble(s_id = 1:n_school,\n                          s_0 = rnorm(n_school, 0, sd_school)) |&gt; \n  add_column(trt = rep(1:n_trt, n_trt),\n             t_eff = rep(eff_trt, n_trt)) |&gt; \n  expand_grid(c_per_s = 1:n_class_per_school) |&gt;\n  mutate(c_id = 1:n_class,\n         c_0 = rnorm(n_class, 0, sd_class)) |&gt; \n  expand_grid(reps = 1:n_reps)\n\n\nJetzt können wir unseren Testscore berechnen, der sich aus den einzelnen Effekten der Schule \\(s_0\\), der Klasse \\(c_0\\) sowie dem Lehrformat \\(t_{eff}\\) ergibt, berechnen. Am Ende addieren wir auf jeden Wert noch einen Fehler und runden die Werte des Tests auf zwei Stellen. Dann bauen wir uns noch die Faktorlevel für die Schulen, Klassen und dem Lehrformat.\n\n\nR Code [zeigen / verbergen]\nschool_tbl &lt;- school_grid_tbl |&gt; \n  arrange(trt) |&gt; \n  mutate(test = round(50 + s_0 + c_0 + t_eff + rnorm(n(), 0, sd_error), 2),\n         s_id = factor(s_id, labels = c(\"Springfield School\", \"Jacksonville High\", \"Franklin Country\", \n                                        \"Clinton Christian\", \"Arlington Academy\", \"Georgetown High\", \n                                        \"Greenville School\", \"Bristol Country\", \"Dover Tech Center\")),\n         c_id = as_factor(c_id),\n         c_per_s = factor(c_per_s, labels = c(\"1a\", \"1b\", \"1c\")),\n         trt = factor(trt, labels = c(\"Frontal\", \"Flipped classroom\", \"HyFlex\"))) \n\n\nDann schreiben wir die Daten noch in eine Exceldatei school_testing.xlsx und können diese dann im weiteren Verlauf der Analyse nutzen. Auch hier passen wir etwas die Namen der Spalten an, damit die Spalten etwas mehr Aussagekraft haben.\n\n\nR Code [zeigen / verbergen]\nschool_tbl |&gt; \n  select(school_id = s_id, class_in_school_id = c_per_s, class_id = c_id, trt, test) |&gt; \n  write_xlsx(\"data/school_testing.xlsx\")\n\n\n\n\n\nDie Schuldaten liegen dann in dem Datensatz school_testing.xlsx vor. Wir müssen hier dann nur noch die Faktoren bilden, damit wir dann auch die Visualisierungen sauber hinkriegen.\n\n\nR Code [zeigen / verbergen]\nschool_tbl &lt;- read_excel(\"data/school_testing.xlsx\") |&gt; \n  mutate(school_id = as_factor(school_id),\n         class_in_school_id = as_factor(class_in_school_id),\n         class_id = as_factor(class_id),\n         trt = as_factor(trt)) \n\n\nEs ergibt sich dann der Datensatz der Schuldaten wie in Tabelle 60.1 gekürzt gezeigt.\n\n\n\n\nTabelle 60.1— Datensatz der Testscores für die Schüler an verschiedenen Schulen und Klassen. Die Schüler wurden in den Klassen jewiels mit einem von drei Lehrformaten unterrichtet. Die Klassen und Schulen sind die zufälligen Effekte. Das Lehrformat ist der feste Effekt.\n\n\n\n\n\n\n\n\n\n\n\n\n\nschool_id\nclass_in_school_id\nclass_id\ntrt\ntest\n\n\n\n\nSpringfield School\n1a\n1\nFrontal\n59.75\n\n\nSpringfield School\n1a\n1\nFrontal\n60.29\n\n\nSpringfield School\n1a\n1\nFrontal\n63.43\n\n\nSpringfield School\n1a\n1\nFrontal\n65.36\n\n\n…\n…\n…\n…\n…\n\n\nDover Tech Center\n1c\n27\nHyFlex\n107.29\n\n\nDover Tech Center\n1c\n27\nHyFlex\n108.62\n\n\nDover Tech Center\n1c\n27\nHyFlex\n107\n\n\nDover Tech Center\n1c\n27\nHyFlex\n108.52\n\n\n\n\n\n\n\n\nIn der Tabelle 60.2 im folgenden Kasten findest du den einfachst möglichen Datensatz für nur zwei Schülern pro Klasse sowie insgesamt nur zwei Klassen für zwei Schulen. Damit kannst du dir einmal denn Aufbau visualisieren und siehst auch einmal wie sich die Effekte der Klassen, Schule und Lehrformat für jeden der sechzehn Schüler zusammensetzt. Jede Zeile repräsentiert ja einen Schüler.\n\n\n\n\n\n\nEinfachst möglicher Schuldatensatz (3-faktoriell)\n\n\n\n\n\n\n\n\nTabelle 60.2— Kurzform eines dreifaktoriellen Datensatzes mit zwei zufälligen Effekten für school und class sowie einem Bahandlungsfaktor trt. Die zufälligen Effekte sind normalverteilt mit \\(\\mathcal{N}(0, s^2)\\). Pro Behandlung haben wir dann nur zwei Wiederholungen. Dennoch erreichen wir eine Fallzahl von sechzehn Beobachtungen daher Schülern.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nschool\n\\(\\boldsymbol{eff_{school}}\\)\nclass\n\\(\\boldsymbol{eff_{class}}\\)\ntrt\n\\(\\boldsymbol{eff_{trt}}\\)\nreps\n\n\n\n\n1\n\\(0.23\\)\n1\n\\(-0.14\\)\n1\n\\(10\\)\n1\n\n\n1\n\\(0.23\\)\n1\n\\(-0.14\\)\n1\n\\(10\\)\n2\n\n\n1\n\\(0.23\\)\n1\n\\(-0.14\\)\n2\n\\(5\\)\n1\n\n\n1\n\\(0.23\\)\n1\n\\(-0.14\\)\n2\n\\(5\\)\n2\n\n\n1\n\\(0.23\\)\n2\n\\(0.21\\)\n1\n\\(10\\)\n1\n\n\n1\n\\(0.23\\)\n2\n\\(0.21\\)\n1\n\\(10\\)\n2\n\n\n1\n\\(0.23\\)\n2\n\\(0.21\\)\n2\n\\(5\\)\n1\n\n\n1\n\\(0.23\\)\n2\n\\(0.21\\)\n2\n\\(5\\)\n2\n\n\n2\n\\(0.71\\)\n3\n\\(-0.83\\)\n1\n\\(10\\)\n1\n\n\n2\n\\(0.71\\)\n3\n\\(-0.83\\)\n1\n\\(10\\)\n2\n\n\n2\n\\(0.71\\)\n3\n\\(-0.83\\)\n2\n\\(5\\)\n1\n\n\n2\n\\(0.71\\)\n3\n\\(-0.83\\)\n2\n\\(5\\)\n2\n\n\n2\n\\(0.71\\)\n4\n\\(0.59\\)\n1\n\\(10\\)\n1\n\n\n2\n\\(0.71\\)\n4\n\\(0.59\\)\n1\n\\(10\\)\n2\n\n\n2\n\\(0.71\\)\n4\n\\(0.59\\)\n2\n\\(5\\)\n1\n\n\n2\n\\(0.71\\)\n4\n\\(0.59\\)\n2\n\\(5\\)\n2\n\n\n\n\n\n\n\n\n\nDann einmal den Datenklassiker yates.oats schlechthin als das Split-plot experiment of oats aus dem R Paket {agridat}. Warum ist es der Klassiker? Weil es im Prinzip das erste Split plot Experiment war. Deshalb ist es nicht schlechter als andere. Ich nutze es hier, weil es gut funktioniert und wir uns einmal eine Auswertung eines komplexeren Datensatzes mit einem linearen gemischten Modell anschauen können. Wir haben insgesamt die mittleren Ertragswerte von Hafer für 72 Parzellen vorliegen. Im weiteren haben wir zwei Behandlungsfaktoren mit der Stickstoffgabe nitro und der Sorte gen. Da wir ein Split plot Experiment vorliegen haben, brauchen wir natürlich die Reihen- und Spaltenpositionen sowie die Information über den Block. Alle drei Positionsfaktoren werden wir dann versuchen als zufällige Effekte in das gemischte Modell zu nehmen. In der Abbildung 60.3 siehst du einmal das Abhängigkeitsverhältnis in den Daten.\n\n\n\n\n\n\nflowchart LR\n    A(nitro):::fixed --- B(((nestet))) --&gt; C(gen):::fixed --- D(((nestet))) --&gt; E(cols/rows) --- F(block):::random\n    classDef fixed fill:#56B4E9,stroke:#333,stroke-width:0.75px\n    classDef random fill:#E69F00,stroke:#333,stroke-width:0.75px\n\n\n\n\nAbbildung 60.3— Abhängigkeitsstruktur des split plot design. Der Faktor gen ist in den Spalten cols/rows der Blöcke randomisiert und der zweite Faktor nitro innerhalb des anderen Faktors.\n\n\n\n\n\nIch erweitere noch den Datensatz um die einzelnen Pflanzenwerte indem ich für jeden yield-Wert als Mittelwert noch zwölf Pflanzen für die Parzelle simuliere. Damit baue ich die Daten sozusagen wieder zurück und komme auf meine individuellen Werte für jede der 72 Parzellen.\n\n\nR Code [zeigen / verbergen]\ndata(yates.oats)\noats_tbl &lt;- yates.oats |&gt; \n  as_tibble() |&gt; \n  mutate(nitro = as_factor(nitro),\n         row = as_factor(row),\n         col = as_factor(col)) |&gt; \n  expand_grid(plant_id = 1:12) |&gt; \n  mutate(plant_yield = round(rnorm(n(), yield, 2), 2)) |&gt; \n  select(row, col, block, nitro, gen, plant_id, plant_yield)\n\n\nIn der Tabelle 60.3 siehst du nochmal einen Ausschnitt aus den Daten. Wir fokussieren uns hier auf das Outcome yield was wir als normalverteilt annehmen. Die anderen möglichen Outcomes ignorieren wir dann erstmal. Wir brauchen dann auch die Informationen für die Position auf dem Feld row und col um dann einen gute Abbildung des Designs über das R Paket {desplot} zu erstellen.\n\n\n\n\nTabelle 60.3— Haferdatensatz im Split plot Design für zwei Behandlungsfaktoren nitro und gen sowie drei Positionsfaktoren row, col und block. Wir schauen uns hier nur das Outcome Haferertrag yield an.\n\n\n\n\n\n\nrow\ncol\nblock\nnitro\ngen\nplant_id\nplant_yield\n\n\n\n\n16\n3\nB1\n0\nGoldenRain\n1\n81.69\n\n\n16\n3\nB1\n0\nGoldenRain\n2\n78.75\n\n\n16\n3\nB1\n0\nGoldenRain\n3\n81.68\n\n\n16\n3\nB1\n0\nGoldenRain\n4\n75.71\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n2\n2\nB6\n0.6\nVictory\n9\n100.22\n\n\n2\n2\nB6\n0.6\nVictory\n10\n101.27\n\n\n2\n2\nB6\n0.6\nVictory\n11\n101.9\n\n\n2\n2\nB6\n0.6\nVictory\n12\n101.41\n\n\n\n\n\n\n\n\nNeben einem normalverteilten Outcome wollen wir uns danna auch noch eine andere häufige Art von einem Outcome anschauen. Wir betrachten nämlich noch Zähldaten oder Abundanz von Arten. Wir nutzen hier auch einen Datensatz aus dem R Paket {agridat} und zwar den Datensatz zu Wireworms controlled by fumigants in a latin square. Es geht hier also um die Verwendung von fünf Insektiziden in einem Feld mit \\(5 \\times 5\\) großen Parzellen. In jedem der Parzellen haben wir dann die Würmer an zehn Punkten gezählt. Die zehn Zählpunkte habe ich mir ausgedacht, aber dann aber wir später ein paar mehr Beobachtungen zum darstellen. Wie du siehst, haben wir hier ein latin square design vorliegen, welches ich dir nochmal in der Abbildung 60.4 dargestellt habe.\n\n\n\n\n\n\nflowchart LR\n    A(trt):::fixed --- B(((nested))) --&gt; C(rows):::random\n    B(((nested))) --&gt; D(cols):::random\n    C --- F(block)\n    D --- F\n    classDef fixed fill:#56B4E9,stroke:#333,stroke-width:0.75px\n    classDef random fill:#E69F00,stroke:#333,stroke-width:0.75px\n\n\n\n\nAbbildung 60.4— Schematische Darstellung der Abhängigkeitsstruktur im latin suare design für unsere Wurmdaten. Die Behandlungen werden in rows und cols genestet, die einem quadratischen Block mit den Längen der Anzahl der Level der Behandlungen entsprechen.\n\n\n\n\n\nIm Folgenden habe ich einmal die Daten geladen und die Mittelwerte der Parzellen worms wieder auf die ursprünglichen, ausgedachten zehn Zählpunkte erweitert. Auch hier müssen wir dann unsere Daten wieder entsprechend mit Faktoren versehen, damit wir die Daten dann richtig im R Paket {desplot} abbilden können.\n\n\nR Code [zeigen / verbergen]\ndata(cochran.wireworms)\nwireworms_tbl &lt;- cochran.wireworms |&gt; \n  as_tibble() |&gt; \n  mutate(trt = as_factor(trt),\n         col = as_factor(col),\n         row = as_factor(row)) |&gt; \n  expand_grid(site_id = 1:10) |&gt; \n  mutate(count_worms = rpois(n(), worms))\n\n\nDu erhälst dann folgenden Auszug in der Tabelle 60.4 von den Wurmdaten. Hier sind dann die Namen der Behandlungen etwas kurz, aber wir belassen es mal bei den Namen. Du kannst dir hier eben fünf Insektizide vorstellen, die wir dann miteinander vergleichen würden. Zu den Gruppenvergleichen findest du dann ganz am Ende des Kapitels nochmal einen eignene Abschnitt sowie dann auch zwei Anwendungsbeispiele.\n\n\n\n\nTabelle 60.4— Auszug aus den Wurmdaten in einem latin square design für fünf verschiedene Insektizide.\n\n\n\n\n\n\nrow\ncol\ntrt\nworms\nsite_id\ncount_worms\n\n\n\n\n1\n1\nP\n3\n1\n4\n\n\n1\n1\nP\n3\n2\n3\n\n\n1\n1\nP\n3\n3\n8\n\n\n1\n1\nP\n3\n4\n4\n\n\n…\n…\n…\n…\n…\n…\n\n\n5\n5\nO\n8\n7\n14\n\n\n5\n5\nO\n8\n8\n10\n\n\n5\n5\nO\n8\n9\n11\n\n\n5\n5\nO\n8\n10\n9\n\n\n\n\n\n\n\n\nIn der folgenden Box findest du noch mehr Daten und experimentelle Designs aus dem R Paket {agridat}. Dort findest du dann noch mehr Inspirationen wie Daten aussehen könnten, die mit einem linearen gemischten Modell ausgewertet werden. Nicht alle der dortigen Daten können nur mit einem gemischten Modell ausgewertet werden, es gibt auch eine Reihe an einfacheren Datensätzen. Ich habe hier jetzt zwei der über hundert Datensätze ausgewählt, die ich relativ repräsentativ finde.\n\n\n\n\n\n\nWeitere Daten zu gemischten Modellen\n\n\n\nAlle Daten hier stammen aus dem R Paket {agridat} und lassen sich somit mit der Funktion data() laden. Die Daten liegen meistens nicht als tibble() vor, so dass manchmal noch etwas Datenaufbereitung notwendig ist.\n\nMating crosses of chickens\nLatin square of four breeds of sheep with four diets\nBirth weight of lambs from different lines/sires\nWeight gain calves in a feedlot\nAverage daily gain of 65 steers for 3 lines, 9 sires.\nMulti-environment trial of oats in United States, 5 locations, 7 years.\n\nEs gibt natürlich noch mehr Datensätze, die du dann mit einem gemischten Modell auswerten kannst, aber das ist hier einmal eine Auswahl an möglichen Datensätzen zum üben.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html#visualisierung",
    "href": "stat-modeling-mixed.html#visualisierung",
    "title": "60  Lineare gemischte Modelle",
    "section": "60.3 Visualisierung",
    "text": "60.3 Visualisierung\nDer wichtigste Teil in einer Analyse ist die Visualisierung der Zusammenhänge. Das ist noch wahrer bei ser komplexen Modellen wie es die linearen gemischten Modelle sind. Wir müssen erstmal verstehen welche Gruppenstrukturen wir in den Daten haben und welchen Einfluss diese auf die jeweiligen Outcomes haben. Häufig müssen wir dazu dann aber mehrere Abbildungen erstellen, den bei so vielen Faktoren reichen dann einfache 2D Abbidlungen dann meistens nicht mehr aus. Ich versuche hier dann einmal zu zeigen, wie du das meiste aus {ggplot} rausholen kannst, um dir komplexe Daten zu visualisieren.\nWie bringen wir also möglichst viele informative Abbildungen sinnvoll zusammen? Wir nutzen dazu das R Paket{gghalves}. Wir können mit {gghalves} halbe Plots erstellen und diese dann miteinander kombinieren für ein Faktorlevel kombinieren. Dabei setzen wir dann in die Mitte Boxplots. Links von den Boxplots zeichnen wir die einzelnen Beobachtungen als Punkte mit stat_dots() und die Verteilung der einzelnen Beobachtungen zeichnen wir mit dem R Paket {ggdist} auf die rechte Seite. Das Tutorium Visualizing Distributions with Raincloud Plots liefert dann noch mehr Anleitungen für noch mehr Varianten. Wie du aber schon am R Code siehst, ist das eine etwas komplexere Abbildung geworden.\nDamit wir den ganzen R Code nicht die ganze zeit kopieren müssen, habe ich im folgenden Chunk einmal ein {ggplot}-Template erstellt, welches ich dann immer wieder mit neuen Daten und einem aes()-Aufruf versehen werde. Das kürzt dann doch ziemlich den Code zusammen. Insbesondere da wir ja sehr viele Abbildungen für unsere drei Datensätz bauen müssen. Du kannst natürlich auch immer dreimal die einzelnen Abbildungen bauen oder aber mit facet_wrap() arbeiten um den dritten Faktor darzustellen.\n\n\nR Code [zeigen / verbergen]\ngg_half_template &lt;- ggplot() +\n  stat_halfeye(adjust = .5, width = .6, \n               .width = 0, justification = -.2, \n               point_colour = NA) + \n  geom_boxplot(width = 0.15, outlier.shape = NA) +\n  stat_dots(side = \"left\", justification = 1.12, binwidth = .25) +\n  coord_cartesian(xlim = c(1.2, 2.9), clip = \"off\") +\n  scale_color_okabeito() +\n  theme(legend.position = \"top\") \n\n\nBeginnen wir uns nun einmal die drei Datensätze zu visualisieren und nutzen dann die Abbildungen um etwas über die hierarchischen Strukturen in den Daten zu erfahren. Aus den Rückschlüssen können wir dann entscheiden, wie wir unsere lineare gemischten Modelle bauen müssen.\n\n60.3.1 Schuldaten\nDann schauen wir uns einmal in den folgenden beiden Tabs die Schuldaten und damit die Effekte der Schulen und der jeweils drei Klassen auf die Testergebnisse der Schüler an. Es ist immer wichtig sich alle möglichen Kombinationen von Faktoren anzuschauen um dann auch eine Idee für das gemischte Modell im Anschluss zu finden. Sonst stochert man sehr im Nebel rum und mit den Abbildungen hat man dann einen Hinweis, wohin es gehen könnte.\n\nEffekt der SchuleEffekt der Klassen\n\n\nIn der folgenden Abbildung 60.5 sehen wir einmal die Effekte der Schule aufgeteilt nach den Lehrformaten auf die Testergebnisse der jeweiligen Schüler. Es fällt sofort ein Effekt der Schulen auf die Testergebnisse auf. Zum Beispiel hat die Greenville School im Frontalunterricht sehr viel schlechte Testergebnisse als die beiden anderen Schulen mit Frontalunterricht. Ähnliches, aber im positiven Sinne, sehen wir bei der Arlington Academy, die gegen den Trend der beiden anderen Schulen, bessere Ergebnisse bei dem Lehrformat Flipped Classroom erreicht. Somit müssen wir in unserer Analyse die Schule mit berücksichtigen, es macht eben einen Unetrschied, auf welche Schule ein Schüler gegangen ist.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  school_tbl + \n  aes(x = trt, y = test, color = school_id) +\n  labs(x = \"Lehrformat\", y = \"Testscore\", color = \"Schule\") +\n  guides(color = guide_legend(nrow = 3, byrow = FALSE))\n\n\n\n\n\n\n\n\nAbbildung 60.5— Dreifachplot der Testergebnisse der Schüler zusammen über alle drei Klassen in den jeweiligen neun Schulen aufgetrennt nach dem Lehrformat. Teilweise sind starke Effekte der Schulen auf die Testergebnisse der Schüler zu erkennen.\n\n\n\n\n\n\n\nJetzt schauen wir uns noch den Effekt der Klasse an und fragen uns in der Abbildung 60.6, ob wir auch einen starken Effekt der Klassen auf die Testergebnisse haben. Hier sehen wir zwar auch Unterschiede zwischen den Klassen, aber die Effekt sind in den Lehrformaten eher gleichmäßig vertreten. Die kleine Gruppe bei dem Lehrformat Frontal gehört zur einer Schule und nicht zu einer einzelnen Klasse. Damit könnten wir die Klasse eher ignorieren, wenn wir unser Modell bauen. Es macht nicht so einen großen Unterschied in welche Klasse ein Schüler gegangen ist.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  school_tbl + \n  aes(x = trt, y = test, color = class_in_school_id) +\n  labs(x = \"Lehrformat\", y = \"Testscore\", color = \"Klasse\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE))\n\n\n\n\n\n\n\n\nAbbildung 60.6— Dreifachplot der Testergebnisse der Schüler zusammen über alle Schulen in den jeweiligen drei Klassen aufgetrennt nach dem Lehrformat. Die Effekte der einzelnen Klassen sind nicht so stark ausgeprägt. Der Effekt der Schulen scheint in diesem Fall stärker zu sein.\n\n\n\n\n\n\n\n\nGerade haben wir gesehen, dass die Schulen mehr der Varianz in den Testergebnissen der Schüler erklären als die Klassen. Brauchen wir eigentlich nur die Schulen oder reichen auch die Informationen die in den einzelnen Klassen stecken? Wir haben ja unsere Daten so gebaut, dass wir immer nur drei Klassen pro Schule haben und jeweils eine der drei Klassen ein Lehrformat erhält. Damit könnte es sein, dass wir mit dem Faktor class_id auch die Varianz der Schulen scholl_id mit abbilden könnten. Das funktioniert hier aber nur, da die immer die gleiche Anzahl an Klassen mit der gleichen Anzahl an Lehrformaten in einer Schule verschachtelt ist. Schauen wir dazu einmal in die Abbildung 60.7. Wie wir sehen, scheinen die einzelnen Klassen die jeweiligen Schulen mit abzubilden. Die Klasse 19, 20 und 21 ist beim Forntalunterreicht schlechter. Dies wird die Schule Greenville School sein. Wir können also alleine durch die Information zu den einzlenen Klassen die Varianz der Schulen erklären! Mal schauen, was das dann später für unser lineares gemischtes Modell bedeutet.\n\n\nR Code [zeigen / verbergen]\nggplot(school_tbl, aes(x = class_id, y = test, fill = trt)) +\n  geom_boxplot(outlier.size = 0.5) +\n  labs(x = \"Individuelle Klassen ID\", y = \"Testscore\", fill = \"Lehrformat\") +\n  scale_fill_okabeito() +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\nAbbildung 60.7— Boxplot der Testergebnisse der drei Lehrformate aufgeteilt nach den individuellen Klassen. Da immer nur drei Klassen pro Schule erhoben wurden, bilden die individuellen Klassen auch den Effekt der Schulen mit ab.\n\n\n\n\n\n\n\n60.3.2 Weizendaten\nBei den Weizendaten haben wir auch die Positionen der einzelnen Parzellen durch die Faktoren row und col. Damit wissen wir an welcher Stelle die jeweiligen Parzellen auf dem Feld zu finden sind. Damit wissen wir dann auch, welche Behandlung mit Stickstoff und welche Weizenlinie wo aufgebracht wurde. In der Abbildung 60.8 sehen wir die Visualisierung des experimentellen Designs mit dem R Paket {desplot}. Wir sehen klar die Struktur der sechs Blöcke. In jedem Block finden sich die drei Sorten. In jeder Sorte wurde dann unterschiedlich mit Stickstoff gedüngt. Wir haben hier aber keine echte Spaltanlage vorliegen, da die Stickstoffbehandlung als Subplot quadratisch angeordnet ist. Später brauchen wir die Informationen um unser lineares gemischtes Modell sauber zu definieren.\n\n\nR Code [zeigen / verbergen]\ndesplot(oats_tbl, block ~ col*row, \n        num = nitro, col = gen,\n        cex = 1, aspect = 5/3,\n        main = \"\")\n\n\n\n\n\n\n\n\nAbbildung 60.8— Visualisierung des experimentellen Designs des Split plots für die Weizendaten. In sechs Blöcken wurden die drei Sorten aufgebracht. In jeder Sorte wurden wiederum die Sticktoffmengen randomisiert. Es kiegt keine echte Spaltanlage vor, da die Subplots innberhalb der Blöcke quadratisch angeordnet sind.\n\n\n\n\n\nIn den folgenden Tabs schauen wir uns dann einmal die Effekte der Weizenlinien sowie der Stickstoffdüngung auf den Ertrag an. Dabei trennen wir dann die Abbildung für die Blöcke auf. Auch hier wollen wir uns erstmal einen Überblick verschaffen und schauen, ob wir überhaupt einen Effekt von den Behandlungen haben oder aber ob die Blöcke sich einigermaßen gleich verhalten. Auch könnte es sein, dass die genetische Linien des Weizen an unterschiedlichen Standorten der Blöcke dann auf einmal doch andere Erträge bringen. All das wollen wir uns einmal in den folgenden Abbildungen anschauen.\n\nEffekt der Linie genEffekt des Stickstoff nitroEffekt von gen in block\n\n\nIn der Abbildung 60.9 sehen wir die Ausiwkungend der Sorte des Weizens auf den Ertrag aufgeteilt nach den sechs Blöcken. Klar ist zu erkennen, dass der Block 4 teilweise zu sehr viel höheren Erträgen führt. Auch haben wir bei der Sorte Victory einzelne Gruppen von Pflanzen, die anscheinend mehr Ertrag im Block 4 produzieren. Hier liegt also eine klare Wechselwirkung zwischen den Blöcken und der Sorte vor. Der Block muss auf jeden Fall mit in das lineare gemischte Modell. Die Effekt über die Sorten hinweg deuten auf keinen Trend hin, im Mittel sind alle Sorten des Weizen gleich im Bezug auf den Ertrag.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  oats_tbl + \n  aes(x = gen, y = plant_yield, color = block) +\n  labs(x = \"Genetische Linie\", y = \"Ertrag\", color = \"Block\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE))\n\n\n\n\n\n\n\n\nAbbildung 60.9— Betrachtung der Auswirkungen der Sorte gen des Weizens auf den Ertrag, aufgeteilt nach den Blöcken. Einige Blöcke haben klar mehr Ertrag als andere Blöcke, wie auch schon bei den Stickstoffdüngungen.\n\n\n\n\n\n\n\nBetrachten wir in der Abbildung 60.10 den Ertrag in Abhängigkeit von der Stickstoffdüngung. Auch hier teilen wir die Daten wieder nach den Blöcken auf. Zuerst sehen wir einen klaren Trend. mit der Zunahme der Stickstoffkonzentration nimmt auch der Ertrag zu. Dennoch haben wir auch hier ein klares Problem mit dem Block 4. Der Block 4 hat immer am meisten Ertrag über alle Stickstoffstufen. In der Dosis 0.4 gibt es sogar eine Gruppe von Beobachtungen, die eindeutig am meisten Ertrag im Block 4 liefert. Auch hier sehen wir wieder eine Abhängigkeit des Ertrags von dem Block. Gehen wir also mal der Struktur der Daten weiter nach.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  oats_tbl + \n  aes(x = nitro, y = plant_yield, color = block) +\n  labs(x = \"Stickstoffkonzentration\", y = \"Ertrag\", color = \"Block\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE))\n\n\n\n\n\n\n\n\nAbbildung 60.10— Betrachtung der Auswirkungen der Stickstoffdüngung nitro des Weizens auf den Ertrag, aufgeteilt nach den Blöcken. Einige Blöcke haben klar mehr Ertrag als andere Blöcke, wie auch schon bei den Sorten.\n\n\n\n\n\n\n\nAbschließend schauen wir nochmal in der Abbildung 60.11 auf die Wechselwirkung zwischen den Blöcken und den Sorten. Hier sehen wir endlich unsere kleinen Gruppen, die wir auch schon in den beiden anderen Abbildungen gesehen haben klar zugeordnet. Die Sorten spalten sich klar über die Blöcke und Stickstoffgaben auf. Es macht also einen Unterschied wo wir die einzelnen Sorten gepflanzt haben. Die Blöcke und Sorten interagieren klar miteinander. Wir können also sagen, dass die Sorten in den Blöcken auf jeden Fall genestet sind. Wir werden also diese Struktur auf jeden Fall berücksichtigen müssen.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  oats_tbl + \n  aes(x = nitro, y = plant_yield, color = block) +\n  labs(x = \"Stickstoffkonzentration\", y = \"Ertrag\", color = \"Block\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE)) +\n  facet_wrap(~ gen)\n\n\n\n\n\n\n\n\nAbbildung 60.11— Betrachtung der Auswirkungen der Stickstoffdüngung nitro des Weizens auf den Ertrag, aufgeteilt nach den Blöcken und den Sorten des Weizens. Klar ist zu erkennen, dass einige Sorten in einigen Blöcken klar mehr Ertrag haben.\n\n\n\n\n\n\n\n\nJetzt wollen wir nochmal schauen, ob wir auch eine Interaktion zwischen der Stickstoffdüngung, den Weizensorten und den Blöcken vorliegen haben. Insbesondere müssen wir natürlich schauen, wie sich unsere beiden Behandlungen nitro und gen untereinander verhalten. Wenn wir hier auch eine Interaktion vorliegen haben, dann müssen wir diese Interaktion auch im Modell abbilden. Zuerst erschaffen wir uns aber die Mittelwerte über alle Faktorenkombinationen.\n\n\nR Code [zeigen / verbergen]\nstat_oats_tbl &lt;- oats_tbl |&gt; \n  group_by(nitro, gen, block) |&gt; \n  summarise(mean = mean(plant_yield))\n\n\nDann sind wir wieder etwas faul und bauen uns erstmal ein {ggplot}-Template für die Interaktionsabbildungen. Sonst produzieren wir wieder sehr viel redunanten Code, was wir uns hier dann sparen können. Wir werden uns einfach die Mittelwerte über die Stickstoffgaben getrennt für die Sorten und die Blöcke einmal anschauen.\n\n\nR Code [zeigen / verbergen]\ngg_inter_template &lt;- ggplot() +\n  stat_summary(fun = mean, geom = \"point\") +\n  stat_summary(fun = mean, geom = \"line\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE)) +\n  scale_color_okabeito() +\n  theme(legend.position = \"top\") \n\n\nIn der Abbildung 60.12 sehen wir einmal die Interaktionsplots für die verschiedenen möglichen Interaktionen zwischen den Faktoren der Stickstoffdüngung, der Weizensorte und den Blöcken. Abbildung 60.12 (a) zeigt klar, dass es keine Interaktion zwischen der Stickstoffdüngung und den Sorten gibt. Die Graden laufen parallel zueinander. Wir haben einen mittleren Effekt der Stickstoffdüngung, da wir einen Anstieg beobachten. Dennoch ist die Ordnung der Sorten pro Level der Stickstoffdüngung gleich. Würden sich die Graden überschneiden, hätten wir eine Interaktion vorliegen. Da die Graden das nicht tun, können wir also von keiner Interaktion zwischen nitro und gen ausgehen. Wir sehen aber auch in den beiden anderen Abbildungen, dass wir auf jeden Fall den Block mit modellieren müssen. Der Block hat zumindest einen visuellen Einfluss auf den Ertrag.\n\n\nR Code [zeigen / verbergen]\ngg_inter_template %+% \n  oats_tbl + \n  aes(x = nitro, y = plant_yield, color = gen, group = gen) +\n  labs(x = \"Stickstoffkonzentration\", y = \"Ertrag\", color = \"Sorte\") \n\ngg_inter_template %+% \n  oats_tbl + \n  aes(x = nitro, y = plant_yield, color = gen, group = gen) +\n  labs(x = \"Stickstoffkonzentration\", y = \"Ertrag\", color = \"Sorte\") +\n  facet_wrap(~ block)\n\ngg_inter_template %+% \n  oats_tbl + \n  aes(x = nitro, y = plant_yield, color = block, group = block) +\n  labs(x = \"Stickstoffkonzentration\", y = \"Ertrag\", color = \"Block\") +\n  facet_wrap(~ gen) \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Interaktion nitro:gen\n\n\n\n\n\n\n\n\n\n\n\n(b) Interaktion nitro:gen:block\n\n\n\n\n\n\n\n\n\n\n\n(c) Interaktion nitro:block:gen\n\n\n\n\n\n\n\nAbbildung 60.12— Interaktionsplot der Mittelwerte für die Stickstoffbehandlung nitro, den Sorten des Weizens gen sowie den Blöcken block. Dargestellt sind die Mittelwerte für die jeweilige Faktorkombination. Wenn wir keine Interaktion erwarten, dann laufen die Graden parallel zueinander.\n\n\n\n\n\n\n60.3.3 Wurmdaten\nIn den vorherigen Datensätzen haben wir uns ein eher normalverteiltes Outcome angeschaut. In den Wurmdaten wollen wir uns einmal Zähldaten anschauen. Das hat natürlich auf den Plot des experimentellen Designs erstmal keinen Einfluss. Wir haben die Informationen zu den Reihen und den Spalten und können daran dann unser Latinsquare Design einmal in dem R Paket {desplot} in der Abbildung 60.13 darstellen. In einem Latinsquare Design ist jede unserer fünf Behandlungen genau einmal in jeder Reihe oder Spalte vertreten. Ich habe einmal die Parzellen nach den Behandlungen eingefärbt. Nochmal zur Erinnerung, die Buchstaben haben hier keine tiefere Bedeutung. Die Buchstaben stellen eben nur die fünf verschiedenen Insektiziede gegen den Wurmbefall dar.\n\n\nR Code [zeigen / verbergen]\ndesplot(wireworms_tbl, trt ~ col * row,\n        text = trt, cex = 1, show.key = FALSE,\n        main = \"\") \n\n\n\n\n\n\n\n\nAbbildung 60.13— Latinsquare Design der Insektizidbehandlung auf einem \\(5 \\times 5\\) großen Versuchsfeld. Jede Behandlung ist genau einmal in jeder Reihe und jeder Spalte vertreten. Die Buchstaben sind willkürlich gewählt.\n\n\n\n\n\nJetzt schauen wir uns in der Abbildung 60.14 nochmal die Effekte der Spalte und der Reihe auf die Anzahl der Würmer an. Hier muss man natürlich bedenken, dass die Reihen und die Spalten verschoben die gleichen Effekte haben. Den jede Spalte ist auch ein Teil einer Reihe und umgekehrt. Wir sehen aber sofort das es Problem mit der Spalte 1 sowie dann mit der Reihe 1 gibt. Hier haben wir bei der Insektizidbehandlung N sehr viel mehr Würmer als in den anderen Parzellen. Teilweise sehen wir auch Abweichungen nach oben bei den anderen Behandlungen, je nachdem welche Parzelle wir betrachten. Hier müssen wir auf jeden Fall unser Modell so anpassen, dass die Spalten und Reihen im Modell berücksichtigt werden.\n\n\nR Code [zeigen / verbergen]\ngg_half_template %+%\n  wireworms_tbl + \n  aes(x = trt, y = count_worms, color = col) +\n  labs(x = \"Insektizidbehandlung\", y = \"Anzahl Würmer\", color = \"Spalte (col)\") +\n  coord_cartesian(xlim = c(1.2, 4.9), clip = \"off\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE)) \n\ngg_half_template %+%\n  wireworms_tbl + \n  aes(x = trt, y = count_worms, color = row) +\n  labs(x = \"Insektizidbehandlung\", y = \"Anzahl Würmer\", color = \"Reihe (row)\") +\n  coord_cartesian(xlim = c(1.2, 4.9), clip = \"off\") +\n  guides(color = guide_legend(nrow = 1, byrow = FALSE)) \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Spalte (col)\n\n\n\n\n\n\n\n\n\n\n\n(b) Reihe (row)\n\n\n\n\n\n\n\nAbbildung 60.14— Betrachtung der Auswirkung der verschiedenen Insketizidbehandlung auf die Anzahl von Würmern aufgeteilt für die Spalten und Reihen in einem Latinsquare Design. Teilweise sind die Effekte der Position col und row auf die Würmeranzahlen klar ersichtlich.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html#modellierung",
    "href": "stat-modeling-mixed.html#modellierung",
    "title": "60  Lineare gemischte Modelle",
    "section": "60.4 Modellierung",
    "text": "60.4 Modellierung\nNachdem wir uns jetzt ausführlich mit der Visualisierung beschäftigt haben, werden wir uns jetzt einmal mit der Modellierung der lineare Modelle befassen. Häufig sind die Modelle sehr komplex und auch ich weiß dann immer nicht, was soll wie in ein Modell rein, deshalb muss ich auch am Ende immer verschiedene Modelle miteinander vergleichen. Das beste Modell sollte so wenige Faktoren und Interaktionen enthalten wie möglich, aber dennoch alle Quellen von möglicher Varianz abdecken. Daher lohnt es sich immer auch ein sehr einfaches Modell mit in die Analyse zu nehmen und zu schauen, ob es nicht auch mit einem einfachen Modell klappen würde. Nicht immer ist ein lineares gemischtes Modell die beste Lösung. Manchmal passt dann auch ein einfaches Modell mit nur festen Effekten.\n\n\n\n\n\n\nMindestanzahl an Leveln für einen zufälligen Effekt\n\n\n\nWir brauchen mindestens 5 bis 6 Level für einen Faktor, den wir als zufälligen Effekt deklarieren. Das würde hier aber leider die Beispiele sehr komplex machen… deshalb hier mit weniger Leveln und dafür dann nicht so guten Ergebnissen.\n\n\nWir immer in R haben wir auch eine ganze Reihe von Paketen zu Verfügung um ein lineares gemischtes Modell zu schätzen. Damit die Sachlage hier nicht ausartet, konzentriere ich mich auf die großen zwei Pakete plus eine etwas andere Implementierung. Zum einen hat Bates et al. (2014) das R Paket {lme4} entwickelt, welches uns erlaubt lineare gemischte Modelle in R anzuwenden. Es gibt noch das ältere R Paket {nlme} was ich aber nicht mehr für lineare gemischte Modelle nutze. Wir nutzen aber gerne die Funktion gls() aus dem R Paket {nlme}, wenn wir eine lineare Regression mit heterogenen Varianzen rechnen wollen. Eine andere Implementierung mit mehr Möglichkeiten, wenn es um nicht normalverteilte Daten geht, ist das R Paket {glmmTMB}. Wir haben hier insbesondere die Möglichkeit mehr Varianzstrukturen in den Daten abzubilden. Dazu dann gerne mehr in den Vignetten des R Pakets unter Covariance structures with glmmTMB. Du musst dich aber nicht tiefer Einlesen, im prinzip sind die Regeln ähnlich wie bei einem glm(). Mehr dazu dann aber gleich in dem entsprechenden Abschnitt zu dem R Paket {glmmTMB}. Teilweise sind die Ausgaben der verschiedenen R Paket schlecht miteinander zu vergleichen, da man nicht weiß, wo was wiedergegeben wird. Hier hilft das R Paket {mixedup}, welches einem die Arbeit abnimmt gewisse Information aus einem Fit zu einem linearen gemischten Modell zu extrahieren. Abschließend schauen wir uns noch die Implementierung der linearen gemischten Modell in dem R Paket {multilevelmod} an, da wir hier noch einfacher ein gemischtes Modell auswählen können. Wichtig ist hier zu wissen, dass die Funktionen aus {glmmTMB} nicht implementiert sind. Daher musst du dann schauen, was du brauchst und danach entscheiden. Ich stelle alle Varianten hier dann einmal vor.\nIn der folgenden Tabelle findest du nochmal die Schreibweise für die zufälligen Effekte in einem linearen gemischten Modell in R. Glücklicherweise ist die Schreibweise mittlerweile in R bindend und alle neueren Pakete nutzen auch diese Formelschreibweise der zufälligen Effekte. Im Allgmeinen definieren wir einen zufälligen Effekt mit (1 | random). Wir wollen damit einen festen Mittelwert für jedes Level des zufälligen Faktors schätzen. Diese Schreibweise ist damit dann auch der Standard. Wenn du noch eine kontinuierliche Variable c_1 in den Daten hättest, die sich innerhalb der zufälligen Effekte ändert, dann könntest du auch einen variierenden Mittelwert der zufälligen Effekte für die zusätzliche Variable mit (c_1 | random)schätzen. Aber dieser Fall tritt eher selten auf.\n\nBedeutung der Formelschreibweise der zufälligen Effekte in einem linearen gemischten Modell in {lmer} und {glmmTMB}. Mehr zu der Bedeutung dann in der Veröffentlichung von Bates et al. (2014). Glücklicherweise ist die Schreibweise mittlerweile in R bindend und alle neueren Pakete nutzen auch diese Formelschreibweise der zufälligen Effekte.\n\n\n\n\n\n\nFormula\nBedeutung\n\n\n\n\n\\((1\\; |\\; g)\\)\nZufälliger \\(y\\)-Achsenabschnitt mit festen Mittelwert (eng. Random intercept with fixed mean)\n\n\n\\((1\\; |\\; g_1/g_2)\\)\nDer \\(y\\)-Achsenabschnitt variiert in \\(g_1\\) und \\(g_2\\) innerhalb von \\(g_1\\) (eng. Intercept varying among g1 and g2 within g1)\n\n\n\\((1\\; |\\; g_1) + (1\\; |\\; g_2)\\)\nDer \\(y\\)-Achsenabschnitt variiert zwischen \\(g_1\\) und \\(g_2\\) (eng. Intercept varying among g1 and g2)\n\n\n\\(x + (x\\; |\\; g)\\)\nKorrelierter zufälliger \\(y\\)-Achsenabschnitt und Steigung (eng. Correlated random intercept and slope)\n\n\n\\(x + (x\\; ||\\; g)\\)\nUnkorrelierter zufälliger \\(y\\)-Achsenabschnitt und Steigung (eng. Uncorrelated random intercept and slope)\n\n\n\nManchmal ist es etwas schwierig sich vorzustellen was die Formelschreiweise genau bedeutet. Daher habe ich nochmal die jeweilige Bedeutung visulaisiert. Die Quelle der Abbdilung ist das Openbook von Steve Midway und geht nochmal mit tollen Beispielen auf die verschiedenen Fälle ein.\n\n\n\n\n\n\n\n\nAbbildung 60.15— Visualisierung der verschiedenen Modelle eines linearen Modells und linearen gemischten Modellen mit Messweiderholungen mit drei Individuen. (A) Klassisches lineares Modell mit zwei Parametern für den y-Achsenabschnitt \\(\\alpha\\) und der Steigung \\(\\beta\\). (B) Gemischtes Modell mit einem festen y-Achsenabschnitt \\(\\alpha\\) sowie variable Steigungen für die Individuen. (C) Ein gemischtes Modell mit variablen y-Achsenabschnitt \\(\\alpha\\) sowie einer festen Steigung \\(\\beta\\). (D) Ein gemischtes Modell mit einem variablen y-Achsenabschnitt \\(\\alpha\\) sowie variabler Steigung \\(\\beta\\) [Zum Vergrößern anklicken]\n\n\n\n\n\n\n60.4.1 Mitteln über einen zufälligen Effekt\nManchmal können wir das auch mit den gemischten Modellen einfach lassen und über eine Faktor mitteln und dann ist auch gut. Damit haben wir dann die individuelle Variabilität “weggemittelt”. Das funktioniert in einem balancierten Design teilweise hervorragend und ist auf jeden Fall immer einen Versuch wert. Bei komplexeren Designs lässt sich manchmal dann leider nicht gut festlegen über welchen Faktor am besten gemittelt werden sollte. Dann hilft eben doch nur ein komplexeres gemischtes Modell. Haben wir aber über einen Faktor gemittelt, können wir alles nur mit festen Effekten in einem lm() oder glm() lösen. Das macht uns dann das Modellieren sehr viel einfacher. Deshalb hier einmal als Beispiel das Mitteln über die einzelnen Klassen und damit auch über die Schüler. Wir kriegen dann einen Mittelwert pro Klasse und nehmen damit die individuelle Varianz aus unseren Daten raus.\n\n\nR Code [zeigen / verbergen]\nmean_school_tbl &lt;- school_tbl |&gt; \n  group_by(school_id, trt, class_id) |&gt; \n  summarise(mean_test = mean(test))\n\n\nNachdem wir über den Faktor class_id gemittelt haben, können wir dann einfach ein lineares Modell mit der Funktion lm() rechnen. Dann schaue ich gleich nochmal im Abschnitt zu dem R Paket lme4() wie gut unser Modell abschneidet. Wir werden vermutlich einen kleineren Fehler haben, da wir natürlich auch Variabilität wegmitteln. Aber das ist ja auch das Ziel der Übung.\n\n\nR Code [zeigen / verbergen]\nmean_lm_fit &lt;- lm(mean_test ~ trt + school_id + trt:school_id, data = mean_school_tbl)\n\n\nIch kann immer nur empfehlen, einmal den Schritt zu machen und über die individuellen Pflanzen oder Beobachtungen zu mitteln. Häufig lässt sich damit dann ein gemischtes Modell vermeiden, was dann auch die Interpretation der Ergebnisse und deren Darstellung einfacher macht.\n\n\n60.4.2 … mit dem R Paket {lme4}\nDas R Paket {lme4} von Bates et al. (2014) ist das Standardpaket, welches uns erlaubt lineare gemischte Modelle in R anzuwenden. Hier gibt es dann auch mit der Hilfeseite GLMM FAQ – Ben Bolker and others auch umfangreiche Informationen und Ratschläge für die Nutzung. Auch hier musst du dort nicht alles nachlesen um ein lineares gemischtes Modell in R rechnen zu können. Manchmal kommt es aber zu Problemen im Fit des Modells, so dass hier dann Hilfe zu finden ist. Im Folgenden schauen wir uns einmal die Implementierung von {lme4} für die Schuldaten an. Wir nutzen dazu die Hauptfunktion lmer(), wenn wir normalverteilte Daten als Outcome vorliegen haben. Mit einem Testscore können wir davon ausgehen, dass dieser normalverteilt ist. Wir rechnen jetzt verschiedene Modelle in den folgenden Tabs und schauen dann im Anschluss einmal, welches der Modelle das beste Modell ist. Das beste Modell könnten wir dann zum Beispiel in einem Gruppenvergleich weiter nutzen.\n\nlmer() 2-faktoriell ungenestedlmer() 3-faktoriell ungenestedlmer() 3-faktoriell genested\n\n\nBeginnen wollen wir mit dem einfachsten linearen gemischten Modell. Wir haben hier nur einen festen Effekt trt sowie einen zufälligen Effekt school_id vorliegen. Damit ignorieren wir die Varianzen aus den Klassen. Wir schauen also, ob wir mit einem etwas simpleren Modell schon ein gutes Ergebnis erhalten.\n\n\nR Code [zeigen / verbergen]\nlmer_2fac_fit &lt;- lmer(test ~ trt +\n                        (1 | school_id), \n                      data = school_tbl)\n\n\nWie gut hat nun das Modell geklappt? Fangen wir einmal mit einem \\(R^2\\) an. Ähnlich wie das Bestimmtheitsmaß \\(R^2\\) gibt der Intraclass Correlation Coefficient (abk. ICC) Aufschluss über die erklärte Varianz und kann als “der Anteil der Varianz, der durch die Gruppierungsstruktur in den Daten erklärt wird” interpretiert werden. Damit haben wir dann auch eine Maßzahl, wie gut unser gemischtes Modell funktioniert hat. Uns interessiert hier nur das adjustierte ICC.\n\n\nR Code [zeigen / verbergen]\nlmer_2fac_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.880\n  Unadjusted ICC: 0.213\n\n\nDas sieht gar nicht schlecht aus für einen ersten Versuch. Mit einem ICC von \\(0.88\\) sind wir schon ziemlich weit oben an der Grenze. Jetzt müssen wir noch schauen, wie die anderen Maßzahlen aussehen. Eventuell reicht dieses einfache Modell schon aus um unsere Daten zu modellieren und zu erklären. Wir nutzen hier die Funktion model_performance() aus dem R Paket {performance} um zu schauen, wie gut unser Modell dann zu den Daten gepasst hat.\n\n\nR Code [zeigen / verbergen]\nlmer_2fac_fit |&gt; model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |  RMSE | Sigma\n--------------------------------------------------------------------------------\n3154.459 | 3154.572 | 3175.917 |      0.971 |      0.758 | 0.880 | 4.271 | 4.307\n\n\nHier schauen wir einmal auf das R2 (marg.), was auch eine andere Art des Bestimmtheitsmaßes für die festen Effekte ist. Also auch hier jetzt die Frage, wieviel Prozent der Varianz erklären meine festen Effekte? Hier liefert dann das R2 (marg.) eine Antwort. Das R2 (cond.) berücksichtigt sowohl die festen als auch die zufälligen Effekte bei der Berechnung des \\(R^2\\). Damit haben wir hier die erklärte Varianz von festen und zufälligen Effekten bei \\(0.97\\), also über \\(97\\%\\). Hier haben wir ein echt gutes Modell vorliegen. Die anderen Maßzahlen brauchen wir nur für einen direkten Vergleich von Modellen.\n\n\nNachdem wir schon recht gute Ergebnisse mit dem simplen gemischten Modell mit nur einem zufälligen Effekt erreicht haben, nehmen wir jetzt noch neben dem Effekt der Schule den Effekt der Klassen class_in_school_id als zufälligen Effekt mit ins Modell. Dann wollen wir mal schauen, ob dieses Modell dann besser ist als das einfache Modell. Unser einfaches Modell ist schon so gut, dass wir hier kaum noch Steigerungen hinkriegen und wir müssen uns dann am Ende fragen, ob nicht ein einfacheres Modell nicht auch reichen würde.\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_fit &lt;- lmer(test ~ trt +\n                        (1 | class_in_school_id) + \n                        (1 | school_id), \n                      data = school_tbl)\n\n\nAuch hier berechnen wir dann einmal den Intraclass Correlation Coefficient (abk. ICC) um mehr über die erklärte Varianz der zufälligen Effekte zu erfahren. Der ICC steigt noch um einen winzigen Betrag gegenüber dem simpleren Modell mit nur einem zufälligen Effekt. Ob sicher hier der Umstieg lohnt, muss man dann nochmal überlegen.\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.891\n  Unadjusted ICC: 0.216\n\n\nDann schauen wir uns nochmal die Werte für R2 (cond.) und R2 (marg.) an und sehen, dass wir hier auch nur eine kleine Steigerung in den Werten haben. Wir erklären zwar noch mehr Varianz, aber der Anteil ist doch recht gering.\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_fit |&gt; model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |  RMSE | Sigma\n--------------------------------------------------------------------------------\n3115.541 | 3115.699 | 3141.291 |      0.974 |      0.757 | 0.891 | 4.077 | 4.119\n\n\nAm Ende musst du dann überlegen, ob sich hier noch eine weitere Modellierung lohnt. Wir kommen zwar noch höher mit den Werten für das Bestimmtheitsmaß, aber dann wird auch das Modell auch um einiges komplizierter. Daher kannst du dir als letztes noch das genestete Modell einmal anschauen.\n\n\nJetzt bleibt uns eigentlich nur noch als Modell ein genestetes gemischtes Modell übrig indem wir dann die Klassen in den Schulen genestet modellieren. Das entspricht dann natürlich exakt der Abhängigkeitsstruktur, wie wir auch unsere Daten gebaut haben. Also sollten wir mit dem folgenden Modell auch fast die gesamte Varianz erklären. Im echten Leben kennen wir natürlich nicht die Art und Weise wie die Daten entstanden sind. Deshalb hier als Demonstration das Modell mit einem genesteten, zufälligen Term für die Klassen in den Schulen dargestellt durch (1 | class_id/school_id).\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_nested_fit &lt;- lmer(test ~ trt +  \n                               (1 | class_id/school_id), \n                             data = school_tbl)\n\n\nAuch heir schauen wir dann einmal den Intraclass Correlation Coefficient (abk. ICC) an und sehen, dass der Wert fast Eins ist. Das wundert uns natürlich nicht.\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_nested_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.967\n  Unadjusted ICC: 0.195\n\n\nUnd dann sehen wir auch, dass wir mit unseren Modell mit den genesteten zufälligen Effekten ein R2 (cond.) von über \\(99\\%\\) erreichen. Damit bildet unser genestetes Modell exakt die Abhängigkeitsstruktur wieder, mit der wir auch die Daten gebaut haben.\n\n\nR Code [zeigen / verbergen]\nlmer_3fac_nested_fit |&gt; model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |  RMSE | Sigma\n--------------------------------------------------------------------------------\n2458.714 | 2458.871 | 2484.463 |      0.993 |      0.798 | 0.967 | 1.968 | 2.019\n\n\nDamit habe ich gezeigt, dass wir auch ein perfektes Modell erhalten können, wenn wir wissen wie die Daten erschaffen wurden. Unsere anderen Modelle sind noch so gut, da ich ein sehr balanciertes Design für die Erstellung der Schuldaten gewählt habe. Wenn die Klassen unterschiedliche groß wären und auch unterschiedliche Anzahlen von Klassen pro Schule vorliegen würden, dann sehen die anderen Modelle bedeutend schlechter aus.\n\n\n\nManchmal möchten wir dann doch noch mehr Informationen als den Intraclass Correlation Coefficient (abk. ICC) oder das R2 (cond.) oder das R2 (marg.) aus dem linearen gemischten Modell extrahieren. Da mir das aber dann aktuell zu weit geht und hier auch nicht mehr erklärt, verweise ich auf die folgenden Funktionen aus dem R Paket {mixedup}. Du erhälst mit den Funktionen die Effekte für die zufälligen wie auch festen Effekte und das auch übergreifend für andere Pakte. Manchmal ist auch die Funktion summary() sehr klobig für ein lmer()-Objekt, da hilft dann die Funktion summarize_model(). In seltenen Fällen bist du dann auch an der Varianzstruktur und deren Schätzern interessiert, dafür gibt es dann auch noch die Funktion extract_vc(). Ich führe die Funktionen hier jetzt nicht aus, da wir einfach nur Output produzieren.\n\n\nR Code [zeigen / verbergen]\nextract_random_effects(lmer_2fac_fit)\nextract_fixed_effects(lmer_2fac_fit)\nsummarize_model(lmer_2fac_fit)\nextract_vc(lmer_2fac_fit)\n\n\nWir schauen uns dann einmal in einer Übersichtstabelle die drei Modelle an. Im folgenden Kasten findest du den Modellvergleich mit dem R Paket {modelsummary}. Wir können hier verschiedenste Sachen anschauen. Wichtig ist zum Beispiel ganz am Ende der \\(RMSE\\). Je kleiner der root mean square error ist, desto besser ist das Modell. Hier sehen wir, dass wir das beste Modell mit lmer_3fac_nested_fit vorliegen haben. Der \\(RSME\\) ist mit 1.97 am kleinsten. Danach kommt aber schon das simple lineare Modell mit nur den festen Effekten. Da das lm-Modell auch fast \\(96.5\\%\\) der Varianz erklärt können wir auch das lm-Modell hier nehmen und haben dann ein einfacheres Modell, was wir dann auch einfacher beschreiben können. Da musst du dann abwägen, aber es muss ja nicht immer komplex sein. Ein gutes, solides Modell reicht ja auch.\n\n\n\n\n\n\nModellvergleich mit modelsummary()\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"lm (mean model)\" = mean_lm_fit, \n                 \"lmer 2-fakoriell\" = lmer_2fac_fit, \n                 \"lmer 3-fakoriell genested\" = lmer_3fac_nested_fit,\n                 \"lmer 3-fakoriell ungenested\" = lmer_3fac_fit),\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\"))\n\n\n \n\n  \n    \n    \n    tinytable_x2ati74m061clzacp639\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                lm (mean model)\n                lmer 2-fakoriell\n                lmer 3-fakoriell genested\n                lmer 3-fakoriell ungenested\n              \n        \n        \n        \n                \n                  (Intercept)                      \n                  66.341            \n                  60.683           \n                  60.683            \n                  60.683           \n                \n                \n                                                   \n                  [60.709, 71.973]  \n                  [47.419, 73.948] \n                  [53.547, 67.819]  \n                  [47.306, 74.060] \n                \n                \n                                                   \n                  s.e. = 2.681      \n                  s.e. = 6.752     \n                  s.e. = 3.633      \n                  s.e. = 6.810     \n                \n                \n                  trtFlipped classroom             \n                  -39.715           \n                  -28.335          \n                  -28.335           \n                  -28.335          \n                \n                \n                                                   \n                  [-47.680, -31.750]\n                  [-47.093, -9.576]\n                  [-38.426, -18.243]\n                  [-47.093, -9.576]\n                \n                \n                                                   \n                  s.e. = 3.791      \n                  s.e. = 9.549     \n                  s.e. = 5.137      \n                  s.e. = 9.549     \n                \n                \n                  trtHyFlex                        \n                  32.491            \n                  25.569           \n                  25.569            \n                  25.569           \n                \n                \n                                                   \n                  [24.526, 40.457]  \n                  [6.810, 44.327]  \n                  [15.477, 35.660]  \n                  [6.810, 44.327]  \n                \n                \n                                                   \n                  s.e. = 3.791      \n                  s.e. = 9.549     \n                  s.e. = 5.137      \n                  s.e. = 9.549     \n                \n                \n                  school_idClinton Christian       \n                  0.542             \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [-7.423, 8.507]   \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  school_idGreenville School       \n                  -17.515           \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [-25.480, -9.550] \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  school_idJacksonville High       \n                  -2.892            \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [-10.857, 5.073]  \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  school_idArlington Academy       \n                  20.060            \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [12.095, 28.025]  \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  school_idFranklin Country        \n                  -13.406           \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [-21.371, -5.441] \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  school_idGeorgetown High         \n                  -24.335           \n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  [-32.300, -16.370]\n                                   \n                                    \n                                   \n                \n                \n                                                   \n                  s.e. = 3.791      \n                                   \n                                    \n                                   \n                \n                \n                  SD (Observations)                \n                                    \n                  4.307            \n                  2.019             \n                  4.119            \n                \n                \n                  SD (Intercept school_id)         \n                                    \n                  11.682           \n                                    \n                  11.683           \n                \n                \n                  SD (Intercept school_idclass_id) \n                                    \n                                   \n                  10.528            \n                                   \n                \n                \n                  SD (Intercept class_id)          \n                                    \n                                   \n                  2.776             \n                                   \n                \n                \n                  SD (Intercept class_in_school_id)\n                                    \n                                   \n                                    \n                  1.529            \n                \n                \n                  Num.Obs.                         \n                  27                \n                  540              \n                  540               \n                  540              \n                \n                \n                  R2                               \n                  0.976             \n                                   \n                                    \n                                   \n                \n                \n                  R2 Adj.                          \n                  0.965             \n                                   \n                                    \n                                   \n                \n                \n                  R2 Marg.                         \n                                    \n                  0.758            \n                  0.798             \n                  0.757            \n                \n                \n                  R2 Cond.                         \n                                    \n                  0.971            \n                  0.993             \n                  0.974            \n                \n                \n                  AIC                              \n                  168.6             \n                  3154.5           \n                  2458.7            \n                  3115.5           \n                \n                \n                  BIC                              \n                  181.5             \n                  3175.9           \n                  2484.5            \n                  3141.3           \n                \n                \n                  ICC                              \n                                    \n                  0.9              \n                  1.0               \n                  0.9              \n                \n                \n                  Log.Lik.                         \n                  -74.294           \n                                   \n                                    \n                                   \n                \n                \n                  RMSE                             \n                  3.79              \n                  4.27             \n                  1.97              \n                  4.08             \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\n\n\n\nUnd dann nochmal die visuelle Überprüfung mit check_model(). Hier schauen wir einmal, ob unser lineares gemischtes Modell dann auch funktioniert hat. Das praktische an der Funktion ist, dass wir in den Überschriften zu den einzelnen Abbildungen immer lesen könne, was wir in den Abbildungen sehen müssen, wenn die Annahme erfüllt sein soll. Wir haben hier also eine wunderbare visuelle Überprüfung des Modells. Ich mache das ganze jetzt nur für das Modell lmer_2fac_fit, was etwas willkürlich ist, aber sonst haben wir hier zig Abbildungen. Du kannst dann ja einfach selber bei den anderen Modellen schauen.\n\n\n\n\n\n\nModellüberprüfung mit check_model()\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncheck_model(lmer_2fac_fit)\n\n\n\n\n\n\n\n\nAbbildung 60.16— Überprüfung des Modells mit der Funktion check_model() aus dem R Paket {performance}. Eine Reihe von Annahmen an das Modell wird in verschiedenen Abbildungen visuell überprüft. Unter den Überschriften steht die Annahme an die Abbildung und wann die Annahme in der Überschrift als erfüllt gilt.\n\n\n\n\n\n\n\n\nBei den Schuldaten sind wir von einem normalverteilten Outcome testscore ausgegangen. Das R Paket {lme4} hat auch die Möglichkeit mit nicht normalverteilten Daten über die Funktion glmer() umzugehen. Da schauen wir aber gleich mal rein und zwar bei den Würmerdaten und stellen dabei auch das R Paket {glmmTMB} als Alternative vor. Du könnest aber den folgenden Abschnitt auch einfach mit einem glmer() rechnen aus dem Paket {lme4} rechnen, aber das R Paket {glmmTMB} hat ein paar Vorteile bei der Modellierung von nicht-normalverteilten Daten.\n\n\n60.4.3 … mit dem R Paket {glmmTB}\nHier schauen wir uns einmal den Datensatz zu den Würmern an. Wir haben hier kein normalverteiltes Outcome mehr vorliegen sondern zählen ja die Würmer. Wenn wir Zähldaten vorliegen haben, dann nutzen wir die Poissonverteilung um die Daten auszuwerten. Dazu müssen wir dann aber die Funktion glmer() verwenden, welche uns erlaubt auch eine andere Verteilung für das Outcome zu nutzen. Die Funktion glmer() ist in dem R Paket {lme4} implementiert und funktioniert nur, wenn du keine Overdispersion in den Daten vorliegen hast. Overdispersion bedeutet, dass die Varianz mit dem Mittelwert überproportional ansteigt. In einer Poissonverteilung steigt die Varianz der Daten mit dem Mittelwert der Zähldaten in einem 1:1 Verhältnis an. Wenn du ein größeres Verhältnis hast, also mit steigenden Mittelwert proportional größere Varianzen, dann liegt Overdispersion vor. Dafür haben wir dann gleich die Funktion check_overdispersion(). Wichtig ist, dass du keine Poissonregression rechnen kannst, wenn du Overdispersion vorliegen hast. Dann musst du deine Poissonregression für die Overdispersion adjustieren indem du eine andere Verteilungsfamilie wählst. Leider sind in {lme4} keine anderen Poissonfamilien implementiert, so dass wir dann auf das R Paket {glmmTMB} ausweichen. In dem R Paket {glmmTMB} gibt es eine reichhaltige Auswahl an Kovarianzstrukturen und Möglichkeiten Abhängigkeiten zu modellieren. Mehr dazu findest du auf der Hilfeseite zu Covariance structures with glmmTMB und auf der Seite zu glmmTMB: Generalized Linear Mixed Models using Template Model Builder. Auf der letzteren Seite findest du dann auch die Vignetten mit den jeweiligen Hilfsthemen. Leider kann {glmmTB} auch nicht alles modellieren, wenn es um die möglichen Fehlerquellen geht und auch hier verweise ich einmal auf eine Hilfeseite zu Covariance structures for the error term with glmmTMB - a workaround. Wie immer du musst das nicht alles lesen. Es ist auch eine Sammlung an Hilfen hier für den Fall, dass es mal jemand braucht.\nIn den beiden folgenden Tabs wollen wir dann einmal verschiedene Varianten durchprobieren. Zuerst rechnen wir das naive fixe Effekt Modell mit einem glm() und einer Quasipoissonverteilung. Dann probieren wir ein gemischtes Modell mit glmer() und einer Poissonfamilie und schauen, ob wir Overdispersion vorliegen haben. Parallel dazu rechnen wir dann in dem anderen Tab die Poissonregression unter der Annahme von Overdispersion mit glmmTMB() und der Option famliy = nbinom1, was faktisch einer Quasipoissonverteilung entspricht.\n\nglm mit family = quasipoissonglmer() mit family = poissonglmmTMB() mit family = nbinom1\n\n\nDieser Tab ist sehr kurz. Wir rechnen einfach eine Poissonregression unter der Annahme von Overdispersion. Deshalb nutzen wir hier auch gleich eine Quasipoissonverteilung, die es uns erlaubt für das Auftreten von einer Overdispersion zu adjustieren. Mehr zu der einfachen Poissonregression gibt es dann in dem Kapitel Poissonregression. Dort kannst du dann auch noch mehr zum Thema Poissonregression nachlesen. Wir rechnen also eine Poissonregression und nutzen dafür ein glm() und die Option family = \"quasipoisson\". Wir nehmen dabei als Effekte die Behandlung trt sowie die Positionen row und col mit in das Modell. Ich verzichte auf Interaktionen, da das Modell schon so recht groß ist.\n\n\nR Code [zeigen / verbergen]\nglm_quasipoisson_fit &lt;- glm(count_worms ~ trt + row + col, \n                            data = wireworms_tbl, family = \"quasipoisson\")\n\n\nDas Bestimmtheitsmaß \\(R^2\\) ist in einem glm-Modell nicht so einfach. Deshalb nutzen wir folgende Funktion um uns sowas ähnliches wiedergeben zu lassen. Wir interpretieren aber das \\(R^2\\) ganz gewohnt als den Anteil der erklärten Varianz in dem Outcome durch das Modell.\n\n\nR Code [zeigen / verbergen]\nr2_efron(glm_quasipoisson_fit)\n\n\n[1] 0.5286153\n\n\nDieses Modell nehmen wir dann als simple Alternative mit in den Vergleich zu den anderen gemischten Modellen. Manchmal reicht auch ein einfaches Modell und es muss nicht immer ein komplexes Modell sein.\n\n\nJetzt aber einmal ein lineares gemischtes Modell mit der Poissonfamilie für die Auswertung der Zähldaten. Daher haben wir dann einen fixen Effekt für die Behandlung trt sowie die beiden zufälligen Effekte für die Positionen der Parzellen mit (1 | row) und (1 | col). Dann wählen wir noch die Poissonfamilie aus und können das Modell einmal rechnen.\n\n\nR Code [zeigen / verbergen]\nglmer_poisson_fit &lt;- glmer(count_worms ~ trt + (1|row) + (1|col), \n                           data = wireworms_tbl, family = \"poisson\")\n\n\nBevor wir überhaupt etwas machen, schauen wir erstmal ob Overdispersion in unseren Daten vorliegt. Wenn unser Modell Overdispersion anzeigt, dann können wir das Modell gleich lassen. Das ist sehr wichtig zu wissen, ein Modell mit einer Poissonfamilie und Overdispersion wird dir immer falsche Ergebnisse liefern. Insbesondere wenn es dir um die Gruppenvergleiche geht. Die Nichtberücksichtigung der Overdispersion lässt deine Fehler zu klein werden und damit findest du zu viele falsche signifikante Ergebnisse.\n\n\nR Code [zeigen / verbergen]\nglmer_poisson_fit  |&gt; check_overdispersion()\n\n\n# Overdispersion test\n\n       dispersion ratio =   1.624\n  Pearson's Chi-Squared = 394.713\n                p-value = &lt; 0.001\n\n\nOverdispersion detected.\n\n\nWir haben sehr starke Overdispersion vorliegen und gehen daher in den anderen Tab und rechnen eine Quasipoisson Regression in einem linearen gemischten Modell. Hier nutzen wir dann das R Paket {glmmTMB}. Nur wenn du keine Overdispersion vorliegen hast, dann kannst du eine eine reine Poissonregression rechnen.\n\n\nDa wir in {lme4} keine Quasipoissonverteilung auswählen können, nutzen wir das R Paket {glmmTMB} mit der Verteilungsfamilie nbinom1, was einer Parametrisierung einer Quasipoissonverteilung entspricht. Mehr dazu dann auch auf der Hilfeseite zu Covariance structures with glmmTMB. Eigentlich spricht nichts dagegen gleich das R Paket {glmmTMB} zu nutzen, wenn du mit nicht normalverteilten Outcomes arbeitest. Auch bei einem normalverteilten Outcome liefert dir {glmmTMB} auch \\(p\\)-Werte aus einer ANOVA. Es macht also doch Sinn sich mal andere Pakete anzuschauen.\nUm das Modell zu rechnen nutzen wir die Funktion glmmTMB() und der Rest bleibt glücklicherweise gleich. Wir ändern hier nur die Option family = nbinom1 und können dann einmal das Modell rechnen. Und ja, es gebe noch andere Möglichkeiten, aber wir bleiben hier mal bei einer. Am Ende kannst du dann auch verschiedene Familien durch testen und schauen, wo du den kleinsten Fehler am Ende erhälst. Dafür bietet sich ja das Paket {modelsummary} gerade an.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_nbinom1_fit &lt;- glmmTMB(count_worms ~ trt + (1|row) + (1|col), \n                               data = wireworms_tbl, family = nbinom1) \n\n\nAuch hier können wir einmal den Intraclass Correlation Coefficient (abk. ICC) schätzen und sehen, dass nicht viel Varianz durch unser Modell erklärt wird. Das ist etwas bedauerlich, aber manchmal kann man nicht mehr aus den Daten herausholen.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_nbinom1_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.248\n  Unadjusted ICC: 0.111\n\n\nDann schauen wir nochmal in das Bestimmtheitsmaß \\(R^2\\) und sehen, dass wir auch hier eher bescheidene Werte erhalten. Wir können mit den festen und zufälligen Effekten zusammen nur \\(66.9\\%\\) der Varianz in den Wurmanzahlen erklären. Das ist auch hier kein guter Wert, aber wie immer besser als gar nichts.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_nbinom1_fit |&gt; r2()\n\n\nWarning: mu of 4.7 is too close to zero, estimate of random effect variances may\n  be unreliable.\n\n\n# R2 for Mixed Models\n\n  Conditional R2: 0.662\n     Marginal R2: 0.551\n\n\nWir nehmen dann auch das Modell hier mit in den Vergleich und schauen einmal welches Modell das beste Modell ist. Wie immer kann ein komplexeres Modell zwar besser sein, aber am Ende wollen wir dann doch eher ein einfaches Modell haben.\n\n\n\nDann wollen wir uns mal die drei Modelle anschauen und entscheiden, welches der drei Modelle das beste Modell ist. Wir wissen aber schon, dass wir Overdispersion in den Daten vorliegen haben und deshalb keine einfache Poissonregression rechnen dürfen. Daher fällt das glmer()-Modell mit der Poissonfamilie aus der Betrachtung. Dann bleibt nur noch das reine fixe Effekt Modell in glm() oder eben das gemischte Modell aus glmmTMB() mit einer Quasipoissonverteilung übrig. Im folgenden Kasten findest du den Modellvergleich mit dem R Paket {modelsummary}. Leider liefert die Funktion glm() keine Bestimmtheitsmaße \\(R^2\\) für unser Modell, aber da haben wir ja oben händisch den Wert von \\(R^2 = 0.53\\) berechnet. Von den reinen Werten her, wäre sogar das glmer() das beste Modell, aber die statistischen Gütezahlen gelten nur, wenn es eben die Annahmen an das Modell auch passen. Und die Grundannahme an das glmer()-Modell ist eben, dass mit einer Poissonverteilung keine Overdispersion vorliegt. Somit ist dann tatsächlich unser glmmTMB()-Modell das Beste. Der RMSE ist klein, wie bei den anderen Modellen, und darüber hinaus haben wir dann noch relativ hohe Werte für das Bestimmtheitsmaße \\(R^2\\).\n\n\n\n\n\n\nModellvergleich mit modelsummary()\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"glm quasipoisson\" = glm_quasipoisson_fit,\n                 \"glmer poisson\" = glmer_poisson_fit, \n                 \"glmmTMB nbinom1\" = glmmTMB_nbinom1_fit),\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\"))\n\n\n \n\n  \n    \n    \n    tinytable_upjbwr4x33rg2md3mdc6\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                glm quasipoisson\n                glmer poisson\n                glmmTMB nbinom1\n              \n        \n        \n        \n                \n                  (Intercept)       \n                  -0.041          \n                  0.083          \n                  -0.037         \n                \n                \n                                    \n                  -0.041          \n                  0.083          \n                  0.678          \n                \n                \n                                    \n                  [-0.460, 0.349] \n                  [-0.311, 0.477]\n                  [-0.491, 0.417]\n                \n                \n                                    \n                  [-0.460, 0.349] \n                  [-0.311, 0.477]\n                  [0.421, 1.091] \n                \n                \n                                    \n                  s.e. = 0.206    \n                  s.e. = 0.201   \n                  s.e. = 0.232   \n                \n                \n                  trtM              \n                  1.741           \n                  1.728          \n                  1.852          \n                \n                \n                                    \n                  [1.391, 2.120]  \n                  [1.447, 2.010] \n                  [1.467, 2.237] \n                \n                \n                                    \n                  s.e. = 0.185    \n                  s.e. = 0.144   \n                  s.e. = 0.196   \n                \n                \n                  trtN              \n                  1.709           \n                  1.715          \n                  1.849          \n                \n                \n                                    \n                  [1.362, 2.086]  \n                  [1.435, 1.995] \n                  [1.463, 2.235] \n                \n                \n                                    \n                  s.e. = 0.184    \n                  s.e. = 0.143   \n                  s.e. = 0.197   \n                \n                \n                  trtO              \n                  1.577           \n                  1.575          \n                  1.704          \n                \n                \n                                    \n                  [1.224, 1.959]  \n                  [1.291, 1.858] \n                  [1.314, 2.093] \n                \n                \n                                    \n                  s.e. = 0.187    \n                  s.e. = 0.145   \n                  s.e. = 0.199   \n                \n                \n                  trtP              \n                  1.463           \n                  1.450          \n                  1.589          \n                \n                \n                                    \n                  [1.102, 1.850]  \n                  [1.161, 1.738] \n                  [1.197, 1.981] \n                \n                \n                                    \n                  s.e. = 0.190    \n                  s.e. = 0.147   \n                  s.e. = 0.200   \n                \n                \n                  row2              \n                  0.022           \n                                 \n                                 \n                \n                \n                                    \n                  [-0.256, 0.302] \n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.142    \n                                 \n                                 \n                \n                \n                  row3              \n                  0.387           \n                                 \n                                 \n                \n                \n                                    \n                  [0.131, 0.647]  \n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.131    \n                                 \n                                 \n                \n                \n                  row4              \n                  0.877           \n                                 \n                                 \n                \n                \n                                    \n                  [0.641, 1.121]  \n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.122    \n                                 \n                                 \n                \n                \n                  row5              \n                  0.423           \n                                 \n                                 \n                \n                \n                                    \n                  [0.164, 0.685]  \n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.133    \n                                 \n                                 \n                \n                \n                  col2              \n                  -0.322          \n                                 \n                                 \n                \n                \n                                    \n                  [-0.553, -0.094]\n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.117    \n                                 \n                                 \n                \n                \n                  col3              \n                  -0.332          \n                                 \n                                 \n                \n                \n                                    \n                  [-0.566, -0.102]\n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.118    \n                                 \n                                 \n                \n                \n                  col4              \n                  -0.272          \n                                 \n                                 \n                \n                \n                                    \n                  [-0.497, -0.047]\n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.115    \n                                 \n                                 \n                \n                \n                  col5              \n                  -0.206          \n                                 \n                                 \n                \n                \n                                    \n                  [-0.439, 0.024] \n                                 \n                                 \n                \n                \n                                    \n                  s.e. = 0.118    \n                                 \n                                 \n                \n                \n                  SD (Intercept col)\n                                  \n                  0.118          \n                  0.099          \n                \n                \n                                    \n                                  \n                                 \n                  [0.032, 0.309] \n                \n                \n                  SD (Intercept row)\n                                  \n                  0.318          \n                  0.302          \n                \n                \n                                    \n                                  \n                                 \n                  [0.156, 0.588] \n                \n                \n                  Num.Obs.          \n                  250             \n                  250            \n                  250            \n                \n                \n                  R2 Marg.          \n                                  \n                  0.581          \n                  0.551          \n                \n                \n                  R2 Cond.          \n                                  \n                  0.736          \n                  0.662          \n                \n                \n                  AIC               \n                                  \n                  1189.9         \n                  1156.5         \n                \n                \n                  BIC               \n                                  \n                  1214.6         \n                  1184.7         \n                \n                \n                  ICC               \n                                  \n                  0.4            \n                  0.2            \n                \n                \n                  F                 \n                  16.038          \n                                 \n                                 \n                \n                \n                  RMSE              \n                  2.67            \n                  2.68           \n                  2.69           \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\n\n\n\nAbschließend überprüfen wir in der Abbildung 60.17 nochmal, ob auch alle Annahmen an das Modell stimmen. Hierzu nutzen wir dann wieder eine visuelle Überprüfung mit der Funktion check_model(). Das Modell sieht einigermaßen okay aus. Die visuelle Überprüfung der Overdispersion ist nicht so super, aber wir sehen ja auch in der obigen Analyse, dass wir eigentlich keine Overdisperion mehr in den Daten vorliegen haben. Bei nicht normalverteilten Outcomes ist die Einschätzung der Modellgüte manchmal etwas schwierig. Aber wir hier bei dem glmmTMB()-Modell, es ist das beste was wir haben. Mehr geben dann die Daten einfach nicht her.\n\n\n\n\n\n\nModellüberprüfung mit check_model()\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncheck_model(glmmTMB_nbinom1_fit)\n\n\n\n\n\n\n\n\nAbbildung 60.17— Überprüfung des Modells mit der Funktion check_model() aus dem R Paket {performance}. Eine Reihe von Annahmen an das Modell wird in verschiedenen Abbildungen visuell überprüft. Unter den Überschriften steht die Annahme an die Abbildung und wann die Annahme in der Überschrift als erfüllt gilt.\n\n\n\n\n\n\n\n\n\n\n60.4.4 … mit dem R Paket {multilevelmod}\nDas R Paket {parsnip} erlaubt verschiedene Modellierungen sehr schon zu vereinheitlichen. Wir nutzen die Idee auch sehr in den Kapitel zur Klassifikation. Hier stelle ich einmal das R Paket {parsnip} mit dem Fokus auf die lineare Regression vor. Leider ist {glmmTMB} nicht in dem Paket eingebaut, so dass wir hier wieder extra analysieren müssen. Aber gut, man kann nicht alles haben. Um den folgenden Prozess einmal durchlaufen zu lassen, brauchen wir noch das R Paket {multilevelmod}, welches uns erlaubt in {parsnip} dann auch lineare gemischte Modelle anzuwenden.\nIm Folgenden einmal als Beispiel die Weizendaten oats_tbl, die wir dann auch gleich nochmal in dem Gruppenvergleich nutzen. Hier als erstmal zwei lineare Regression. Wir rechnen jetzt einmal ein lineares gemischtes Modell und nutzen dafür die Funktion set_engine(\"lmer\"). Danach rechnen wir dann als Vergleich dazu ein simples lineares Modell mit set_engine(\"lm\"). Wir du siehst, ist die engine unabhängig vom Formelaufruf. Das heißt, wir können die engine jetzt immer wieder verwenden.\n\n\nR Code [zeigen / verbergen]\noats_lmer_spec &lt;- linear_reg() |&gt; \n  set_engine(\"lmer\")\noats_lm_spec &lt;- linear_reg() |&gt; \n  set_engine(\"lm\")\n\n\nJetzt können wir mit der Funktion fit() verschiedene Modell anpassen. Ich habe mich jetzt für ein lm()-Modell sowie zwei lmer()-Modelle entschieden. Einmal ein lmer()-Modell mit Interaktionsterm und einmal ohne. Wir haben ja in der obigen Abbildung gesehen, dass wir eigentlich keine Interaktion zwischen den Behandlungen nitro und den Sorten gen vorliegen haben. Dann brauchen wir noch die Funktion extract_fit_engine() damit wir die Ausgabe der Funktion fit() auch für andere Pakete korrekt anwenden können.\n\n\nR Code [zeigen / verbergen]\noats_lm_fit &lt;- oats_lm_spec |&gt; \n  fit(plant_yield ~ nitro + gen + block, data = oats_tbl) |&gt; \n  extract_fit_engine()  \n\noats_lmer_fit &lt;- oats_lmer_spec |&gt; \n  fit(plant_yield ~ nitro + gen + (1|block/gen), data = oats_tbl) |&gt; \n  extract_fit_engine()  \n\noats_lmer_int_fit &lt;- oats_lmer_spec |&gt; \n  fit(plant_yield ~ nitro + gen + nitro:gen + (1|block/gen), data = oats_tbl) |&gt; \n  extract_fit_engine()  \n\n\nDamit sich hier nicht alles doppelt, einmal als Beispiel die Ausgabe des Intraclass Correlation Coefficient (abk. ICC) für das klassische lineare gemischte Modell. Wir sehen, dass die zufälligen Effekte sehr viel der Varianz in den Daten erklären. Das stimmt dann auch mit der Abbildung von oben überein. Die Blocke sind dort sehr variablen, was den Ertrag vom Weizen angeht.\n\n\nR Code [zeigen / verbergen]\noats_lmer_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.749\n  Unadjusted ICC: 0.461\n\n\nUnd dann nochmal als Übersicht die Ergebnisse der Ausgabe der Funktion model_performance(). Auch das funktioniert wunderbar.\n\n\nR Code [zeigen / verbergen]\noats_lmer_fit |&gt; model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |   RMSE |  Sigma\n----------------------------------------------------------------------------------\n6666.443 | 6666.654 | 6709.297 |      0.846 |      0.385 | 0.749 | 10.850 | 10.983\n\n\nIm folgenden Kasten findest du den Modellvergleich mit dem R Paket {modelsummary}. Auch hier sehen wir, dass das glmer-Modell mit und ohne Interaktion ungefähr den gleichen RMSE produziert. Der RMSE ist auch kleiner als beim lm()-Modell, deshalb ist das gemischte Modell vorzuziehen. Je kleiner das Modell ist, desto besser, deshalb wäre hier das Modell ohne Interaktion vorzuziehen. Da die Bestimmtheitsmaße \\(R^2\\) zwischen den gemischten Modellen auch ungefähr gleich sind, passt es auch hier. Den etwas geringeren ICC-Wert nehmen wir dann in kauf, wenn dafür unser Modell etwas simpler ist.\n\n\n\n\n\n\nModellvergleich mit modelsummary()\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"lm\" = oats_lm_fit, \n                 \"lmer ohne Interaktion\" = oats_lmer_fit,\n                 \"lmer mit Interaktion\" = oats_lmer_int_fit),\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\"))\n\n\n \n\n  \n    \n    \n    tinytable_gz8ae26rj0dtvy2r0wo1\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                lm\n                lmer ohne Interaktion\n                lmer mit Interaktion\n              \n        \n        \n        \n                \n                  (Intercept)             \n                  66.892          \n                  79.855          \n                  79.914          \n                \n                \n                                          \n                  [63.728, 70.055]\n                  [64.528, 95.181]\n                  [64.487, 95.340]\n                \n                \n                                          \n                  s.e. = 1.612    \n                  s.e. = 7.809    \n                  s.e. = 7.860    \n                \n                \n                  nitro0.2                \n                  19.543          \n                  19.543          \n                  18.693          \n                \n                \n                                          \n                  [16.845, 22.241]\n                  [17.469, 21.617]\n                  [15.157, 22.230]\n                \n                \n                                          \n                  s.e. = 1.375    \n                  s.e. = 1.057    \n                  s.e. = 1.802    \n                \n                \n                  nitro0.4                \n                  34.754          \n                  34.754          \n                  34.696          \n                \n                \n                                          \n                  [32.056, 37.452]\n                  [32.679, 36.828]\n                  [31.160, 38.233]\n                \n                \n                                          \n                  s.e. = 1.375    \n                  s.e. = 1.057    \n                  s.e. = 1.802    \n                \n                \n                  nitro0.6                \n                  44.014          \n                  44.014          \n                  44.685          \n                \n                \n                                          \n                  [41.316, 46.712]\n                  [41.940, 46.089]\n                  [41.149, 48.222]\n                \n                \n                                          \n                  s.e. = 1.375    \n                  s.e. = 1.057    \n                  s.e. = 1.802    \n                \n                \n                  genMarvellous           \n                  5.294           \n                  5.294           \n                  6.776           \n                \n                \n                                          \n                  [2.958, 7.631]  \n                  [-8.619, 19.208]\n                  [-7.471, 21.023]\n                \n                \n                                          \n                  s.e. = 1.190    \n                  s.e. = 7.089    \n                  s.e. = 7.259    \n                \n                \n                  genVictory              \n                  -6.580          \n                  -6.580          \n                  -8.239          \n                \n                \n                                          \n                  [-8.916, -4.244]\n                  [-20.493, 7.333]\n                  [-22.486, 6.008]\n                \n                \n                                          \n                  s.e. = 1.190    \n                  s.e. = 7.089    \n                  s.e. = 7.259    \n                \n                \n                  blockB2                 \n                  5.247           \n                                  \n                                  \n                \n                \n                                          \n                  [1.943, 8.552]  \n                                  \n                                  \n                \n                \n                                          \n                  s.e. = 1.683    \n                                  \n                                  \n                \n                \n                  blockB3                 \n                  4.963           \n                                  \n                                  \n                \n                \n                                          \n                  [1.659, 8.267]  \n                                  \n                                  \n                \n                \n                                          \n                  s.e. = 1.683    \n                                  \n                                  \n                \n                \n                  blockB4                 \n                  44.214          \n                                  \n                                  \n                \n                \n                                          \n                  [40.910, 47.518]\n                                  \n                                  \n                \n                \n                                          \n                  s.e. = 1.683    \n                                  \n                                  \n                \n                \n                  blockB5                 \n                  7.057           \n                                  \n                                  \n                \n                \n                                          \n                  [3.753, 10.362] \n                                  \n                                  \n                \n                \n                                          \n                  s.e. = 1.683    \n                                  \n                                  \n                \n                \n                  blockB6                 \n                  16.294          \n                                  \n                                  \n                \n                \n                                          \n                  [12.990, 19.599]\n                                  \n                                  \n                \n                \n                                          \n                  s.e. = 1.683    \n                                  \n                                  \n                \n                \n                  nitro0.2 × genMarvellous\n                                  \n                                  \n                  2.967           \n                \n                \n                                          \n                                  \n                                  \n                  [-2.035, 7.968] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  nitro0.4 × genMarvellous\n                                  \n                                  \n                  -4.681          \n                \n                \n                                          \n                                  \n                                  \n                  [-9.682, 0.321] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  nitro0.6 × genMarvellous\n                                  \n                                  \n                  -4.213          \n                \n                \n                                          \n                                  \n                                  \n                  [-9.214, 0.788] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  nitro0.2 × genVictory   \n                                  \n                                  \n                  -0.418          \n                \n                \n                                          \n                                  \n                                  \n                  [-5.419, 4.584] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  nitro0.4 × genVictory   \n                                  \n                                  \n                  4.853           \n                \n                \n                                          \n                                  \n                                  \n                  [-0.148, 9.855] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  nitro0.6 × genVictory   \n                                  \n                                  \n                  2.200           \n                \n                \n                                          \n                                  \n                                  \n                  [-2.801, 7.202] \n                \n                \n                                          \n                                  \n                                  \n                  s.e. = 2.548    \n                \n                \n                  SD (Observations)       \n                                  \n                  10.983          \n                  10.810          \n                \n                \n                  SD (Intercept genblock) \n                                  \n                  12.175          \n                  12.179          \n                \n                \n                  SD (Intercept block)    \n                                  \n                  14.580          \n                  14.580          \n                \n                \n                  Num.Obs.                \n                  864             \n                  864             \n                  864             \n                \n                \n                  R2                      \n                  0.721           \n                                  \n                                  \n                \n                \n                  R2 Adj.                 \n                  0.718           \n                                  \n                                  \n                \n                \n                  R2 Marg.                \n                                  \n                  0.385           \n                  0.391           \n                \n                \n                  R2 Cond.                \n                                  \n                  0.846           \n                  0.851           \n                \n                \n                  AIC                     \n                  7059.9          \n                  6666.4          \n                  6625.8          \n                \n                \n                  BIC                     \n                  7117.0          \n                  6709.3          \n                  6697.2          \n                \n                \n                  ICC                     \n                                  \n                  0.7             \n                  0.8             \n                \n                \n                  Log.Lik.                \n                  -3517.948       \n                                  \n                                  \n                \n                \n                  RMSE                    \n                  14.19           \n                  10.85           \n                  10.64",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html#sec-mult-comp-lmer-reg",
    "href": "stat-modeling-mixed.html#sec-mult-comp-lmer-reg",
    "title": "60  Lineare gemischte Modelle",
    "section": "60.5 Gruppenvergleich",
    "text": "60.5 Gruppenvergleich\nVielleicht bist du direkt aus dem Kapitel zu den multiplen Vergleichen hierher gesprungen. Wenn ja, dann musst du eventuell nochmal weiter oben anfangen zu lesen, denn hier geht es eher um die schnelle Variante, den Gruppenvergleich mit einem linearen gemischten Modell durchzuführen. Details stehen in dem Kapitel. Wir nutzen hier einmal das R Paket {lme4} zusammen mit dem R Paket {lmerTest}, welches uns dann auch erlaubt statistische Tests mit einem \\(p\\)-Wert zurechnen. Leider ist das in der ursprünglichen Version so nicht implementiert und deshalb müssen wir noch ein zusätzliches Paket laden. In dem R Paket {glmmTMB} funktioniert soweit alles wie es soll, nur das wir hier dann noch das R Paket {car} benötigen um die ANOVA zu rechnen. Wir ignorieren hier das Bestimmtheitsmaß oder die Modellgüte. Wir ziehen hier einmal stumpf den Prozess des Testens durch. Der Gruppenvergleich läuft dann wie gewohnt in {emmeans} ab. Mehr dazu dann auch in den beiden Anwendungsbeispielen in den grünen Kästen im Anschluss.\n\n\n\n\n\n\nWelches R Paket mit welchem Endpunkt?\n\n\n\nManchmal ist es etwas verwirrend, welches R Paket für die gemischten linearen Modellen mit welcher Funktion für welchen Endpunkt oder Outcome geeignet ist. Hier mal eine schnelle Übersicht, damit du dich orientieren kannst.\n\nWenn dein Outcome normalverteilt ist, wie zum Beispiel das Trocken- oder Frischgewicht, dann hilft die Funktion lmer() aus dem R Paket {lme4} weiter.\nWenn du Zähldaten hast dann nutzt die Funktion glmer() aus dem R Paket lme4 oder eben die Funktion glmmTMB() aus dem gleichnamigen R Paket mit der entsprechenden Option für die Verteilungsfamilie.\nWenn du Boniturdaten oder aber ein ordinales Outcome vorliegen hast, dann kannst du die Funktion clmm() aus dem R Paket {ordinal} nutzen. Du brauchst hier noch zusätzlich die Funktion Anova.clmm() aus dem R Paket {RVAideMemoire} um die ANOVA rechnen zu können.\n\nAlle drei Varianten zeige ich dir in den grünen Kästen zu den beispielhaften Anwendungen am Ende des Kapitels.\n\n\nIch zeige dir jetzt einmal in den beiden Tabs die Gruppenvergleiche für das R Paket {lme4} und der Funktion lmer() sowie dann den Gruppenvergleich mit dem R Paket {glmmTMB} und der gleichnamigen Funktion. Du kannst die Funktion lmer() ohne weiteres durch die Funktion glmer() ersetzen. Ich würde aber in dem Fall immer zu dem Paket {glmmTMB} wechseln. Für nicht-normalverteilte Outcomes ist {glmmTMB} einfach besser, da wir in dem Paket mehr Möglichkeiten haben die Daten zu modellieren. Wir nutzen hier als Beispiel die Weizendaten mit der Behandlung nitro sowie den Sorten gen und verschiedenen Blöcken im Split Plot Design. Wir wissen dass die Blöcke und die Sorten miteinander interagieren und packen deshalb diese genestete Struktur nochmal in den zufälligen Effekt mit (1|block/gen). Wir brauchen hier den Interaktionsterm, damit wir anschließend in {emmeans} uns alle Faktorkombinationen anzeigen lassen können. Jedenfalls ist es dann so einfacher und wir verlieren nichts.\n\nGruppenvergleich mit lmer()Gruppenvergleich mit glmmTMB()\n\n\nJetzt müssen wir die Funktion lmer() aus dem R Paket {lmerTest} nutzen, damit wir dann später die ANOVA mit \\(p\\)-Werten erhalten. Ich nutze das Paket {lmerTest} sehr punktuell, deshalb lade ich mit dem Aufruf lmerTest::lmer() nur einmal die Funktion lmer() aus dem Paket. Wenn ich sonst lmer() nutze, ist es wieder die Funktion aus dem Paket {lme4}. Sonst kriegt man auch Probleme mit dem R Paket {conflicted}, was zurecht möchte, dass wir uns für eine Funktion aus einem Paket entscheiden. Wenn wir das haben, dann können wir wie gewohnt das Modell anpassen.\n\n\nR Code [zeigen / verbergen]\nlmer_fit &lt;- lmerTest::lmer(plant_yield ~ nitro + gen + nitro:gen + (1|block/gen), data = oats_tbl)\n\n\nUnd schon können wir die ANOVA rechnen und erhalten dann auch über die Funktion model_parameters() eine schönere Ausgabe wieder. Obwohl es in unserer Abbildung nicht so aussah, haben wir eine signifikante Interaktion in unseren Daten vorliegen. Wir werden daher dann die Daten getrennt einmal auswerten. Auch um ein wenig Platz zu sparen.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter | Sum_Squares | df | Mean_Square |      F |      p\n------------------------------------------------------------\nnitro     |    2.40e+05 |  3 |    79973.41 | 684.31 | &lt; .001\ngen       |      329.19 |  2 |      164.59 |   1.41 | 0.289 \nnitro:gen |     3870.16 |  6 |      645.03 |   5.52 | &lt; .001\n\nAnova Table (Type 3 tests)\n\n\nEinmal die paarweisen Vergleich für unsere Behandlung nitro. Wir sehen, dass alle Vergleiche signifikant sind. Das haben wir aber schon aus der obigen Abbildung erwartet.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  emmeans(~ nitro) |&gt; \n  pairs()\n\n\n contrast            estimate   SE  df t.ratio p.value\n nitro0 - nitro0.2     -19.54 1.04 837 -18.787  &lt;.0001\n nitro0 - nitro0.4     -34.75 1.04 837 -33.409  &lt;.0001\n nitro0 - nitro0.6     -44.01 1.04 837 -42.312  &lt;.0001\n nitro0.2 - nitro0.4   -15.21 1.04 837 -14.622  &lt;.0001\n nitro0.2 - nitro0.6   -24.47 1.04 837 -23.525  &lt;.0001\n nitro0.4 - nitro0.6    -9.26 1.04 837  -8.902  &lt;.0001\n\nResults are averaged over the levels of: gen \nDegrees-of-freedom method: kenward-roger \nP value adjustment: tukey method for comparing a family of 4 estimates \n\n\nDann die Vergleiche für die Sorten. Hier haben wir dann keinen signifikanten Unterschied mehr vorliegen. Auch das überrascht uns jetzt nicht sehr. Auch in der obigen Abbildung haben sich die Sorten kaum Unterschiede was den Ertrag anging.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  emmeans(~ gen) |&gt; \n  pairs()\n\n\n contrast                estimate   SE df t.ratio p.value\n GoldenRain - Marvellous    -5.29 7.09 10  -0.747  0.7423\n GoldenRain - Victory        6.58 7.09 10   0.928  0.6358\n Marvellous - Victory       11.87 7.09 10   1.675  0.2614\n\nResults are averaged over the levels of: nitro \nDegrees-of-freedom method: kenward-roger \nP value adjustment: tukey method for comparing a family of 3 estimates \n\n\nAbschließend machen wir dann noch das compact letter display fertig. Hier dann mit allen Faktorkombinationen von der Stickstoffdüngung nitro und den Sorten gen, wenn du nitro * gen durchlaufen lässt. Für mich ist die Ausgabe dann zu groß, deshalb hier nur die Anwendung für nitro getrennt für alle Sorten.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  emmeans(~ nitro | gen) |&gt; \n  cld(Letters = letters)\n\n\ngen = GoldenRain:\n nitro emmean   SE   df lower.CL upper.CL .group\n 0       79.9 7.86 9.27     62.2     97.6  a    \n 0.2     98.6 7.86 9.27     80.9    116.3   b   \n 0.4    114.6 7.86 9.27     96.9    132.3    c  \n 0.6    124.6 7.86 9.27    106.9    142.3     d \n\ngen = Marvellous:\n nitro emmean   SE   df lower.CL upper.CL .group\n 0       86.7 7.86 9.27     69.0    104.4  a    \n 0.2    108.3 7.86 9.27     90.6    126.1   b   \n 0.4    116.7 7.86 9.27     99.0    134.4    c  \n 0.6    127.2 7.86 9.27    109.5    144.9     d \n\ngen = Victory:\n nitro emmean   SE   df lower.CL upper.CL .group\n 0       71.7 7.86 9.27     54.0     89.4  a    \n 0.2     90.0 7.86 9.27     72.2    107.7   b   \n 0.4    111.2 7.86 9.27     93.5    128.9    c  \n 0.6    118.6 7.86 9.27    100.9    136.3     d \n\nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \nP value adjustment: tukey method for comparing a family of 4 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nUnd damit sind wir dann auch schon mit dem Gruppenvergleich mit lmer() durch. Die ANOVA und das compact letter display lässt sich schnell und einfach erstellen. Wir müssen eben nur darauf achten, dass wir das richtige Helferpaket mit {lmerTest} für die Modellierung des linearen gemischten Modell nutzen.\n\n\nDann rechnen wir nochmal flux das lineare gemischte Modell mit der Funktion glmmTMB(). Eigentlich ist alles genauso wie in dem andern Tab mit der Funktion lmer(). Wir brauchen hier aber keine Helferfunktionen. Die Funktion glmmTMB() kann das Modell so schätzen, dass wir auch eine ANOVA rechnen können. Wir müssen aber nur gleiche eine spezielle Implementierung wählen, aber das ist auch kein Problem.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_fit &lt;- glmmTMB(plant_yield ~ nitro + gen + nitro:gen + (1|block/gen), data = oats_tbl)\n\n\nUnd schon können wir die ANOVA rechnen und erhalten dann auch über die Funktion model_parameters() eine schönere Ausgabe wieder. Hier müssen wir die Funktion Anova() aus dem R Paket {car} nutzen. Obwohl es in unserer Abbildung nicht so aussah, haben wir eine signifikante Interaktion in unseren Daten vorliegen. Wir werden daher dann die Daten getrennt einmal auswerten. Auch um ein wenig Platz zu sparen.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_fit |&gt; \n  car::Anova() |&gt; \n  model_parameters()\n\n\nParameter |    Chi2 | df |      p\n---------------------------------\nnitro     | 2075.02 |  3 | &lt; .001\ngen       |    3.38 |  2 | 0.185 \nnitro:gen |   33.47 |  6 | &lt; .001\n\nAnova Table (Type 2 tests)\n\n\nEinmal die paarweisen Vergleich für unsere Behandlung nitro. Wir sehen, dass alle Vergleiche signifikant sind. Das haben wir aber schon aus der obigen Abbildung erwartet. Also auch hier nichts anderes zu dem anderen Tab.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_fit |&gt; \n  emmeans(~ nitro) |&gt; \n  pairs()\n\n\n contrast            estimate   SE  df t.ratio p.value\n nitro0 - nitro0.2     -19.54 1.03 849 -18.888  &lt;.0001\n nitro0 - nitro0.4     -34.75 1.03 849 -33.588  &lt;.0001\n nitro0 - nitro0.6     -44.01 1.03 849 -42.539  &lt;.0001\n nitro0.2 - nitro0.4   -15.21 1.03 849 -14.701  &lt;.0001\n nitro0.2 - nitro0.6   -24.47 1.03 849 -23.651  &lt;.0001\n nitro0.4 - nitro0.6    -9.26 1.03 849  -8.950  &lt;.0001\n\nResults are averaged over the levels of: gen \nP value adjustment: tukey method for comparing a family of 4 estimates \n\n\nDann die Vergleiche für die Sorten. Hier haben wir dann keinen signifikanten Unterschied mehr vorliegen. Auch das überrascht uns jetzt nicht sehr. Auch in der obigen Abbildung haben sich die Sorten kaum Unterschiede was den Ertrag anging.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_fit |&gt; \n  emmeans(~ gen) |&gt; \n  pairs()\n\n\n contrast                estimate   SE  df t.ratio p.value\n GoldenRain - Marvellous    -5.29 6.47 849  -0.818  0.6919\n GoldenRain - Victory        6.58 6.47 849   1.017  0.5664\n Marvellous - Victory       11.87 6.47 849   1.835  0.1589\n\nResults are averaged over the levels of: nitro \nP value adjustment: tukey method for comparing a family of 3 estimates \n\n\nAbschließend machen wir dann noch das compact letter display fertig. Für mich ist die Ausgabe dann zu groß, wenn ich mit nitro * gen alle Faktorkombinationen anzeigen lasse, deshalb hier nur die Anwendung für nitro getrennt für alle Sorten.\n\n\nR Code [zeigen / verbergen]\nglmmTMB_fit |&gt; \n  emmeans(~ nitro | gen) |&gt; \n  cld(Letters = letters)\n\n\ngen = GoldenRain:\n nitro emmean   SE  df lower.CL upper.CL .group\n 0       79.9 7.19 849     65.8     94.0  a    \n 0.2     98.6 7.19 849     84.5    112.7   b   \n 0.4    114.6 7.19 849    100.5    128.7    c  \n 0.6    124.6 7.19 849    110.5    138.7     d \n\ngen = Marvellous:\n nitro emmean   SE  df lower.CL upper.CL .group\n 0       86.7 7.19 849     72.6    100.8  a    \n 0.2    108.3 7.19 849     94.2    122.5   b   \n 0.4    116.7 7.19 849    102.6    130.8    c  \n 0.6    127.2 7.19 849    113.1    141.3     d \n\ngen = Victory:\n nitro emmean   SE  df lower.CL upper.CL .group\n 0       71.7 7.19 849     57.6     85.8  a    \n 0.2     90.0 7.19 849     75.8    104.1   b   \n 0.4    111.2 7.19 849     97.1    125.3    c  \n 0.6    118.6 7.19 849    104.5    132.7     d \n\nConfidence level used: 0.95 \nP value adjustment: tukey method for comparing a family of 4 estimates \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nAuch hier sehen wir dann die Unterschiede in den einzelnen Sorten. Alle sind soweit signifikant. Damit sind wir auch mit der Implementierung von {glmmTMB} durch. Die ANOVA und das compact letter display lässt sich schnell und einfach erstellen.\n\n\n\nIn den folgenden grünen Kästen schauen wir uns jetzt drei Anwenundungsbeispiele für einen Gruppenvergleich mit linearen gemischten Modellen an. Zum einen betrachten wir ein dreifaktorieller Gruppenvergleich für das Gewicht von Brokkoliköpfen und zum anderen ein weiterer dreifaktorieller Gruppenvergleich für Thripsenbefall. Dann betrachten wir noch ein ordinales Modell mit den Boniturnoten bei Schweinen. Alle Auswertungen sind vollständig und haben auch teilweise erklärenden Text. Im Zweifel musst du dann nochmal in diesem Kapitel nachschlagen, wenn dir Teile unklar sind.\n\n\n\n\n\n\nAnwendungsbeispiel: Gruppenvergleich für Brokkolikopfgewicht (3-faktoriell)\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit Brokkoli an. Wir haben uns in diesem Experiment verschiedene Dosen fert_amount von einem Dünger aufgebracht sowie verschiedene Zeitpunkte der Düngung fert_time berücksichtigt. Auch hier haben wir einige Besonderheiten in den Daten, da nicht jede Faktorkombination vorliegt. Wir ignorieren aber diese Probleme und rechnen einfach stumpf unseren Gruppenvergleich und ignorieren die fehlenden Faktorkombinationen. Wir haben aber mit den Gewicht ein normalverteiltes Outcome vorliegen und haben die Pflanzen in Blöcken randomisiert. Leider kennen wir nicht das experimentelle Design und müssen daher etwas blind modellieren.\n\n\nR Code [zeigen / verbergen]\nbroc_tbl &lt;- read_excel(\"data/broccoli_weight.xlsx\") |&gt; \n  mutate(fert_time = factor(fert_time, levels = c(\"none\", \"early\", \"late\")),\n         fert_amount = as_factor(fert_amount),\n         block = as_factor(block)) |&gt;\n  select(-stem_hollowness) \n\n\nJetzt wollen wir einmal das Modell auftellen. Wir nehmen die beiden Behandlungen als festen Effekt mit einem Interaktionsterm in das gemischte Modell. Den Block nehmen wir dann als zufälligen Effekt mit rein. Wir nutze hier dann das R Paket {lmerTest} um das lineare gemischte Modell zu rechnen, da wir dann besser die Gruppenvergleiche und die ANOVA rechnen können. Mit der Funktion asu dem R Paket {lme4} kriegen wir aus der ANOVA keine \\(p\\)-Werte.\n\n\nR Code [zeigen / verbergen]\nlmer_fit &lt;- lmerTest::lmer(weight ~ fert_time + fert_amount + fert_time:fert_amount + (1 | block), \n                           data = broc_tbl) \n\n\nDann berechnen wir auch einmal die \\(R^2\\)-Werte für unser Modell. Hier gibt es dann nochmal mehr Informationen auf \\(R^2\\) for Mixed Models – Marginal vs. Conditional. Wichtig ist, dass das Conditional R2, die gesamte erklärte Varianz von festen und zufälligen Effekten beschriebt und das Marginal R2 nur die erklärte Varianz aus den festen Effekten. Tja, das Modell ist nun echt nicht gerade das beste Modell nach dem Bestimmtheitsmaß. Die festen Effekte, also unsere Behandlungen, erklären kaum etwas von der Varianz. Aber schauen wir mal weiter.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; r2()\n\n\n# R2 for Mixed Models\n\n  Conditional R2: 0.246\n     Marginal R2: 0.081\n\n\nDer Intraclass Correlation Coefficient (ICC) ist dann das Bestimmtheitsmaß \\(R^2\\) für die zufälligen Effekte. Auch hier sehen wir eher maue Werte. Wir haben anscheinend sehr viel Varianz in den Daten, die wir nicht durch unsere Faktoren erklären können.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.180\n  Unadjusted ICC: 0.165\n\n\nMit der Funktion model_performance() können wir uns dann nochmal alles zusammen anschauen. Viele der Werte sind nur wichtig, wenn wir Modelle miteinander vergleichen. Das Bestimmtheitsmaß \\(R^2\\) als einzelner Wert ist da schon wichtiger.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  model_performance()\n\n\n# Indices of model performance\n\nAIC       |      AICc |       BIC | R2 (cond.) | R2 (marg.) |   ICC |    RMSE |   Sigma\n---------------------------------------------------------------------------------------\n20281.884 | 20282.001 | 20330.022 |      0.246 |      0.081 | 0.180 | 165.876 | 166.410\n\n\nJetzt rechnen wir in den beiden folgenden Tabs einmal die ANOVA und dann auch den multiplen Gruppenvergleich mit {emmeans}. Da wir hier normalveteilte Daten haben, können wir dann einfach die Standardverfahren nehmen. Eventuell müssten wir bei dem Gruppenvergleich mit emmeans() nochmal für die multiplen Vergleiche adjustieren, aber da erfährst du dann mehr in dem Kapitel zu den Multiple Vergleichen oder Post-hoc Tests. Bei den gemischten Modellen müssen wir nicht für Varianzheterogenität adjustieren, das machen dann die Modelle intern schon.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA und erhalten Dank der Nutzung des R Paketes {lmerTest} auch die \\(p\\)-Werte. Wenn du nicht das R Paket {lmerTest} nutzt, wird per Standardeinstellung kein Test gerechnet. Wir machen dann die Ausgabe nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter             | Sum_Squares | df | Mean_Square |     F |      p\n-----------------------------------------------------------------------\nfert_time             |    2.89e+06 |  2 |    1.44e+06 | 52.11 | &lt; .001\nfert_amount           |    2.13e+06 |  2 |    1.07e+06 | 38.48 | &lt; .001\nfert_time:fert_amount |    27123.13 |  2 |    13561.57 |  0.49 | 0.613 \n\nAnova Table (Type 3 tests)\n\n\nWir sehen, dass der Effekt der Düngerzeit und die Menge des Düngers signifikant ist, jedoch wir keinen signifikanten Einfluss durch die Interaktion haben. Wir haben aber also keine Interaktion vorliegen. Wir sehen hier den Block nicht mehr, da der Effekt des Blocks in den zufälligen Effekt ist und hier nicht mehr gezeigt wird. Für die ANOVA der zufälligen Effekte können wir dann die Funktion ranova() nutzen.\n\n\nR Code [zeigen / verbergen]\nlmer_fit |&gt; \n  ranova() |&gt; \n  model_parameters(drop = \"&lt;none&gt;\")\n\n\nParameter   |      AIC | Log_Likelihood | df |      p\n-----------------------------------------------------\n(1 | block) | 20503.99 |      -10243.99 |  8 | &lt; .001\n\nAnova Table (Type 1 tests)\n\n\nNun können wir auch erkennen, dass wir einen signifikanten Effekt des Blocks haben. Du kannst aber die Ausgabe der zufälligen ANOVA nicht mit der obigen ANOVA vergleichen. Wir erhalten aus der ANOVA keine Informationen über die erklärte Varianz. Diese Information erhalten wir dann oben aus der Funktion icc(). Dann können wir auch in dem anderem Tab mit dem Gruppebvergleich in {emmeans} weitermachen.\n\n\nIm Folgenden rechnen wir einmal über alle Faktorkombinationen von fert_time und fert_amount einen Gruppenvergleich. Dafür nutzen wir die Option fert_time * fert_amount. Wenn du die Analyse getrennt für die Menge und den Zeitpunkt durchführen willst, dann nutze die Option fert_time | fert_amount. Dann adjustieren wir noch nach Bonferroni und sind schon fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- lmer_fit |&gt; \n  emmeans(~ fert_time * fert_amount) |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n fert_time fert_amount emmean   SE   df lower.CL upper.CL .group\n none      0              169 51.7 9.08    -9.82      347  a    \n late      150            400 40.5 3.44   167.50      633   b   \n early     150            432 40.5 3.42   198.20      665   bc  \n late      225            467 40.5 3.44   234.22      700    cd \n early     225            497 39.7 3.18   250.86      743     de\n late      300            506 40.6 3.46   273.96      738     de\n early     300            517 40.6 3.45   285.45      750      e\n early     0           nonEst   NA   NA       NA       NA       \n late      0           nonEst   NA   NA       NA       NA       \n none      150         nonEst   NA   NA       NA       NA       \n none      225         nonEst   NA   NA       NA       NA       \n none      300         nonEst   NA   NA       NA       NA       \n\nDegrees-of-freedom method: kenward-roger \nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 7 estimates \nP value adjustment: bonferroni method for 21 tests \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die emmean stellt den mittleren Gewicht des Brokkoli je Faktorkombination dar unter Berücksichtigung der Varianz der Blöcke als zufälligen Effekt. Du siehst ja auch, dass wir hier keine homogen Varianzen \\(SE\\) haben. Dann können wir zum Abschluss auch das compact letter display anhand der Abbildung interpretieren. Einige der Vergleiche konnten nicht gerechnet werden, da wir die Faktorkombination nicht in den Daten vorliegen haben.\n\n\n\nIn der Abbildung 60.18 siehst du das Ergebnis der Auswertung in einem Säulendiagramm und in der Abbildung 60.19 die Ergebnisse in einem Dot-Boxplot. Wir sehen einen klaren Effekt der Düngezeitpunkte sowie der Düngermenge auf das Gewicht von Brokkoli. Wenn wir ein mittleres Gewicht von \\(500g\\) für den Handel erreichen wollen, dann erhalten wir das Zielgewicht nur bei einer Düngemenge von \\(300mg/l\\). Hier stellt sich dann die Frage, ob wir bei \\(225mg/l\\) und einem frühen Zeitpunkt der Düngung nicht auch genug Brokkoli erhalten. Das Ziel ist es ja eigentlich in einen Zielbereich zu kommen. Die Köpfe sollen ja nicht zu schwer und auch nicht zu leicht sein. Aber diese Frage und andere Fragen der biologischen Anwendung lassen wir dann hier einmal offen, denn das Beispiel soll ja nur ein Beispiel sein. Besonders spannend ist hier der Unterschied in den beiden Abbildungen. Schau dir dazu einmal die beiden verschiedenen Tabs an.\n\nBarplotsDotplots und Boxplots\n\n\nIm Folgenden einmal die Barplots mit den Mittelwerten und dem Standardfehler. Hier sieht es so aus, also ob die Düngezeitpunkte relativ verlässlich ein Zielgewicht von \\(500g\\) im Mittel erreichen würden. Das stimmt auch, wenn wir uns auf den Mittelwert beziehen. Auch der Standardfehler ist relativ klein, da wir ja so viele Beobachtungen vorliegen haben. Schau dir dazu dann einmal den Dot-Boxplot in dem anderen Tab an.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = fert_time, y = emmean, fill = fert_amount)) +\n  theme_minimal() + \n  labs(y = \"Mittleres Gewicht [g] des Brokkoli\", x = \"Düngezeitpunkt\",\n       fill = \"Düngemenge [mg/l]\") +\n  scale_y_continuous(breaks = seq(0, 500, by = 100)) +\n  geom_hline(yintercept = 500, size = 0.75, linetype = 2) +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = .group, y = emmean + SE + 0.01),  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = emmean-SE, ymax = emmean+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  theme(legend.position = \"top\") +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 60.18— Säulendigramm der mittleren Brokkoligewichte aus einem linearen gemischten Modell. Das lmer()-Modell berechnet das mittler Gewicht des Brokkoli in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert. Wir nutzen hier den Standardfehler, da die Standardabweichung mit der großen Fallzahl rießig wäre. Wir haben noch ein Mindestgewicht von 500g ergänzt.\n\n\n\n\n\n\n\nAls erstes müssen wir nochmal das emm_obj in einen tibble umwandeln, damit wir dann das compact letter display direkt in die Grafik setzen können. Wir entfernen dann noch alle Faktorkombinationen, die wir nicht brauchen, damit wir dann auch gleich die Positionen richtig setzen können. Wichtig ist auch, dass die Faktoren richtig sortiert sind, sonst passt es gleich nicht mit dem Zufügen des compact letter display zu der Position.\n\n\nR Code [zeigen / verbergen]\nemm_cld_tbl &lt;- emm_obj |&gt; \n  as_tibble() |&gt; \n  arrange(fert_time, fert_amount) |&gt; \n  na.omit()\n\n\nDie Positionen für das compact letter display berechnen wir uns aus dem Wert des \\(3^{rd}\\) Quantile. Dann ergänzen wir noch die Werte für das compact letter display und fertig sind wir. Aber auch hier lieber einmal doppelt schauen, dass wir auch wirklich die richtigen Buchstaben zu den richtigen Faktorkombinationen ergänzt haben.\n\n\nR Code [zeigen / verbergen]\ncld_pos_tbl &lt;- broc_tbl |&gt; \n  group_by(fert_time, fert_amount) |&gt; \n  summarise(quant_3rd = quantile(weight, 0.75)) |&gt; \n  add_column(group = emm_cld_tbl$.group)\n\n\nJetzt stellen wir den Dot-Boxplot einmal in der folgenden Abbildung dar. Dazu nutzen wir das R Paket {gghalves} und die entsprechenden Funktionen. Wir müssen hier relativ viel machen, damit der Plot gut aussieht. Aber das meiste ist einfach nur Code wiederverwendet. Spannend ist hier die Variabilität in den Daten. Wir sehen hier, das unsere Brokkoliköpfe bei weitem nicht so nahe an dem Zielbereich sind, wie die Barplots suggerieren. Wir wollen eigentlich ziemlich eng um die \\(500g\\) sein, sonnst muss der Supermarkt wild packen um immer die gleiche Packungsgröße zu haben. Jetzt wirken die Unterschiede zwischen den Zeitpunkten und den Mengen auch schon wieder etwas anders. Auch mit weniger Dünger können wir relativ große Brokkoli erhalten. Das plazieren der Buchstaben wäre vermutlich mit annotate() einfacher gewesen.\n\n\nR Code [zeigen / verbergen]\nggplot(broc_tbl, aes(x = fert_time, y = weight, fill = fert_amount)) + \n  labs(y = \"Mittleres Gewicht [g] des Brokkoli\", x = \"Düngezeitpunkt\",\n       fill = \"Düngemenge [mg/l]\") +\n  geom_hline(yintercept = 500, size = 0.75, linetype = 2) +\n  geom_half_point(aes(color = fert_amount), \n                  transformation = position_quasirandom(width = 0.05),\n                  side = \"l\", size = 0.5, alpha = 0.5,\n                  position = position_dodge(width = 0.9)) +\n  geom_half_boxplot(aes(fill = fert_amount), \n                    side = \"r\", width = 0.5, outlier.size = 0.8,\n                    position = position_dodge(width = 0.9)) + \n  geom_text(data = cld_pos_tbl, aes(label = str_trim(group), y = quant_3rd + 70),\n            position = position_dodge(width = 0.9), hjust = -1) +\n  scale_fill_okabeito() + scale_color_okabeito() +\n  guides(color = \"none\") + theme(legend.position = \"top\") \n\n\n\n\n\n\n\n\nAbbildung 60.19— Dotplots und Boxplots der mittleren Brokkoligewichte aus einem linearen gemischten Modell. Das lmer()-Modell berechnet das mittler Gewicht des Brokkoli in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert. Wir haben noch ein Mindestgewicht von 500g ergänzt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnwendungsbeispiel: Gruppenvergleich für Thripsenbefall (3-faktoriell)\n\n\n\nIm folgenden Beispiel schauen wir uns nochmal ein praktische Auswertung von einem agrarwissenschaftlichen Beispiel mit jungen Apfelbäumen an. Wir haben uns in diesem Experiment verschiedene Dosen trt von einem Insektizid aufgebracht sowie verschiedene Startanzahlen von Raubmilben als biologische Alternative untersucht. Dann haben wir noch fünf Zeitpunkte bestimmt, an denen wir die Anzahl an Thripsen auf den Blättern gezählt haben. Wir haben nicht die Blätter per se gezählt sondern Fallen waagerecht aufgestellt. Dann haben wir geschaut, wie viele Thripsen wir über above und unter below von den Fallen gefunden haben. In unserem Fall beschränken wir uns auf die obere Anzahl an Thripsen und schauen uns auch nur die Behandlung mit dem Insektizid an.\n\n\nR Code [zeigen / verbergen]\ninsects_tbl &lt;- read_excel(\"data/insects_count.xlsx\") |&gt; \n  mutate(timepoint = factor(timepoint, labels = c(\"1 Tag\", \"4 Tag\", \"7 Tag\", \"11 Tag\", \"14 Tag\")),\n         rep = as_factor(rep),\n         trt = as_factor(trt)) |&gt;\n  select(timepoint, trt, rep, thripse = thripse_above, mite = mite_above) |&gt; \n  filter(trt %in% c(\"10ml\", \"30ml\", \"60ml\"))\n\n\nWarum bietet sich hier ein lineares gemischtes Modell an? Wir haben hier eine Wiederholung vorliegen, die wir dann als zufälligen Effekt modellieren können. Wir können daher die Poissonregression mit glmer() rechnen. Auch hier wieder darauf achten, dass wir dann als Option family = poisson wählen. Es hängt jetzt davon ab, ob du in deinen Daten Overdispersion vorliegen hast oder nicht, ob wir glmer() nutzen können. In den beiden folgenden Tabs, rechne ich dann mal beide Modelle. Einmal ohne die Berücksichtigung von Overdispersion mit glmer() aus dem R Paket {lme4} und einmal mit Berücksichtigung der Overdispersion mit glmmTMB() aus dem gleichnamigen R Paket.\n\nglmer() mit family = poissonglmmTMB() mit family = nbinom1\n\n\nAls Erstes rechnen wir eine normale Poissonregression mit glmer() und schauen einmal, ob wir Overdispersion vorliegen haben. Wenn wir Overdispersion vorliegen haben, dann können wir keine Poissonregression rechnen, sondern müssen auf eine Quasipoisson Regression ausweichen. Das ist aber sehr einfach, wie du im anderen Tab sehen wirst.\n\n\nR Code [zeigen / verbergen]\ninsects_poisson_fit &lt;- glmer(thripse ~ trt + timepoint + trt:timepoint + (1 | rep), \n                             data = insects_tbl, \n                             family = poisson) \n\n\nBevor wir uns das Modell mit summary() überhaupt anschauen, wollen wir erstmal überprüfen, ob wir überhaupt Overdispersion vorliegen haben. Wenn ja, dann können wir uns die summary() hier gleich sparen und wir können dann mit dem Modell auch keine Gruppenvergleiche rechnen. Also einmal geguckt, was die Overdispersion macht.\n\n\nR Code [zeigen / verbergen]\ninsects_poisson_fit |&gt; check_overdispersion()\n\n\n# Overdispersion test\n\n       dispersion ratio =   18.796\n  Pearson's Chi-Squared = 2518.668\n                p-value =  &lt; 0.001\n\n\nOverdispersion detected.\n\n\nWir haben sehr starke Overdispersion vorliegen und gehen daher in den anderen Tab und rechnen eine Quasipoisson Regression mit dem R Paket {glmmTMB}. Nur wenn du keine Overdispersion vorliegen hast, dann kannst du eine eine Poissonregression mit glmer() rechnen.\n\n\nDa wir in {lme4} keine Quasipoissonverteilung auswählen können, nutzen wir das R Paket {glmmTMB} mit der Verteilungsfamilie nbinom1, was einer Parametrisierung einer Quasipoissonverteilung entspricht. Meistens nutze ich gleich die glmmTMB() Funktion, da wir in biologischen Daten sehr häufig Overdispersion vorliegen haben. Dann kann man sich eine Runde gleich sparen. Aber am Ende kannst du dann auch die Modelle miteinander vergleichen und auch berichten wie groß deine Overdispersion ist.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit &lt;- glmmTMB(thripse ~ trt + timepoint + trt:timepoint + (1|rep), \n                                    data = insects_tbl,\n                                    family = nbinom1) \n\n\nIm Folgedne schauen wir nochmal, ob wir in unserem neuen Modell in glmmTMB() noch Overdispersion vorliegen haben.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; check_overdispersion()\n\n\n# Overdispersion test\n\n dispersion ratio = 0.814\n          p-value = 0.712\n\n\nNo overdispersion detected.\n\n\nDas passt soweit. Wir haben keine Overdispersion mehr. Dann berechnen wir auch einmal die \\(R^2\\)-Werte für unser Modell. Hier gibt es dann nochmal mehr Informationen auf \\(R^2\\) for Mixed Models – Marginal vs. Conditional. Wichtig ist, dass das Conditional R2, die gesamte erklärte Varianz von festen und zufälligen Effekten beschriebt und das Marginal R2 nur die erklärte Varianz aus den festen Effekten.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; r2()\n\n\n# R2 for Mixed Models\n\n  Conditional R2: 0.407\n     Marginal R2: 0.176\n\n\nTja, das Modell ist nun echt nicht gerade das beste Modell nach dem Bestimmtheitsmaß. Die festen Effekte, also unsere Behandlungen, erklären kaum etwas von der Varianz. Aber schauen wir mal weiter. Der Intraclass Correlation Coefficient (ICC) beschreibt nun die erklärte Varianz durch unsere zufälligen Effekte.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; icc()\n\n\n# Intraclass Correlation Coefficient\n\n    Adjusted ICC: 0.280\n  Unadjusted ICC: 0.230\n\n\nAuch hier sind die Ergebnisse eher mau aus. Du kannst dir die gesamte Übersicht auch gleich in der Funktion model_performance() wiedergeben lassen. Das spart dann ein wenig Zeit und Code.\n\n\nR Code [zeigen / verbergen]\ninsects_quasipoisson_fit |&gt; \n  model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |   RMSE |  Sigma | Score_log | Score_spherical\n----------------------------------------------------------------------------------------------------------------\n1282.606 | 1287.242 | 1333.786 |      0.407 |      0.176 | 0.280 | 23.535 | 21.910 |    -4.414 |           0.063\n\n\nWir haben hier auf jeden Fall Overdispersion vorliegen. Daher nutze ich dann auch das Modell hier in glmmTMB() mit der Annahme an eine Quasipoissonverteilung. Dann stimmt es auch mit unseren Varianzen und wir produzieren nicht zufällig zu viele signifikante Ergebnisse, die es dann gar nicht gibt.\n\n\n\nIch habe mich gerade in den obigen Tabs für eine Quasipoissonregression in einem linearen gemischten Modell mit glmmTMB() entschieden, da wir Overdispersion vorliegen haben. Damit mache ich dann mit dem insects_quasipoisson_fit Modell weiter. In den beiden folgenden Tabs findest du dann einmal das Ergebnis für die ANOVA und einmal für den Gruppenvergleich mit dem R Paket {emmeans}. Bitte beachte, dass die ANOVA für ein glmmTMB()-Objekt nicht ganz gleich wie für ein lm()-Objekt ist. Du kannst aber die ANOVA erstmal ganz normal interpretieren, nur haben wir hier nicht die Möglichkeit ein \\(\\eta^2\\) zu bestimmen. Dann nutzen wir {emmeans} für den Gruppenvergleich. Nochmal, weil wir Overdispersion festgestellt haben, nutzen wir das Objekt insects_quasipoisson_fit mit der Berücksichtigung der Overdispersion.\nIm Folgenden rechnen wir einmal über alle Faktorkombinationen von trt und timepoint einen Gruppenvergleich. Dafür nutzen wir die Opition trt * timepoint. Wenn du die Analyse getrennt für die Zeitpunkte durchführen willst, dann nutze die Option trt | timepoint. Wir wollen die Wahrscheinlichkeiten für das Auftreten einer Beschädigung von wiedergegeben bekommen, deshalb die Option regrid = \"response. Dann adjustieren wir noch nach Bonferroni und sind fertig.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- insects_quasipoisson_fit |&gt; \n  emmeans(~ trt * timepoint, type = \"response\") |&gt;\n  cld(Letters = letters, adjust = \"bonferroni\")\nemm_obj\n\n\n trt  timepoint response    SE  df asymp.LCL asymp.UCL .group\n 60ml 4 Tag         10.6  3.76 Inf      3.72      30.0  a    \n 60ml 14 Tag        10.6  4.00 Inf      3.50      32.1  ab   \n 60ml 11 Tag        15.7  5.34 Inf      5.80      42.6  abc  \n 30ml 11 Tag        19.3  6.42 Inf      7.28      51.3  abc  \n 60ml 7 Tag         19.7  6.30 Inf      7.69      50.4  abc  \n 30ml 14 Tag        20.0  6.42 Inf      7.82      51.3  abc  \n 60ml 1 Tag         20.0  6.18 Inf      8.11      49.5  abc  \n 30ml 4 Tag         20.8  6.55 Inf      8.25      52.5  abc  \n 30ml 1 Tag         22.7  7.19 Inf      8.93      57.5  abc  \n 10ml 4 Tag         23.3  7.03 Inf      9.64      56.5  abc  \n 10ml 14 Tag        30.8  8.52 Inf     13.70      69.4  abc  \n 30ml 7 Tag         32.0  9.02 Inf     14.00      73.2  abc  \n 10ml 1 Tag         40.3 10.29 Inf     19.03      85.2   bc  \n 10ml 7 Tag         40.7 10.48 Inf     19.09      86.7   bc  \n 10ml 11 Tag        43.6 10.83 Inf     21.06      90.4    c  \n\nConfidence level used: 0.95 \nConf-level adjustment: bonferroni method for 15 estimates \nIntervals are back-transformed from the log scale \nP value adjustment: bonferroni method for 105 tests \nTests are performed on the log scale \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die response stellt die mittlere Anzahl an Thripsen je Faktorkombination dar. Dann können wir auch das compact letter display anhand der Abbildung interpretieren. Ich stelle die Abbildung wieder einmal als Barplot und einmal als Dot-Boxplot in den beiden Tabs dar.\n\nBarplotsDotplots und Boxplots\n\n\nIn der Abbildung 60.20 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. Hier unbedingt SE als den Standardfehler für die Fehlerbalken nutzen, da wir sonst Fehlerbalken größer und kleiner als \\(0\\) erhalten, wenn wir die Standardabweichung nutzen würden. Das ist in unserem Fall nicht so das Problem, aber wenn du eher kleine Anzahlen zählst, kann das schnell zu Werten kleiner Null führen. Wir sehen einen klaren Effekt der Behandlung 60ml. Die Zeit hat keinen Effekt, was ja schon aus der ANOVA klar war, die Säulen sehen für jeden Zeitpunkt vollkommen gleich aus. Gut etwas Unterschied ist ja immer.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = timepoint, y = response, fill = trt)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Anzahl an Thripsen\", x = \"Messzeitpunkte der Zählungen\",\n       fill = \"Dosis\") +\n  geom_bar(stat = \"identity\", width = 0.8, \n           position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_text(aes(label = str_trim(.group), y = response + SE + 1), size = 3,  \n            position = position_dodge(width = 0.9), vjust = -0.25) +\n  geom_errorbar(aes(ymin = response-SE, ymax = response+SE),\n                width = 0.2,  \n                position = position_dodge(width = 0.9, preserve = \"single\")) +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 60.20— Säulendigramm der mittleren Zahl der Thripsen aus einer Quasipoissonregression mit einem gemischten Modell. Das glmmTMB()-Modell berechnet die mittlere Anzahl in jeder Faktorkombination. Das compact letter display wird dann in {emmeans} generiert.\n\n\n\n\n\n\n\nDamit wir uns gleich einmal die Daten in einem Dotplot und Boxplot anschauen können, brauchen wir noch die Positionen für das compact letter display in unser Abbildung. Daher brauchen wir erstmal das compact letter display und entfernen alle Faktorkombinationen, die keine Werte haben.\n\n\nR Code [zeigen / verbergen]\nemm_cld_tbl &lt;- emm_obj |&gt; \n  as_tibble() |&gt; \n  arrange(timepoint, trt)\n\n\nJetzt berechnen wir uns noch die Position. Ich setze hier das compact letter display auf die Position des dritten Quartils, was ausreichen sollte und nicht zu weit weg ist. Damit haben wir dann die Buchstaben nahe genug an den Boxen der Boxplots.\n\n\nR Code [zeigen / verbergen]\ncld_pos_tbl &lt;- insects_tbl |&gt; \n  group_by(timepoint, trt) |&gt; \n  summarise(quant_3rd = quantile(thripse, 0.75)) |&gt; \n  add_column(group = emm_cld_tbl$.group)\n\n\nIn der Abbildung 60.21 siehst du dann einmal das Ergebnis des Dot-Boxplot. Im Gegensatz zu dem anderen Beispiel sind die Daten hier etwas übersichtlicher was die Dotplots angeht. Dennoch sieht man hier teilweise sehr viel mehr. Zum einen wird die große Variabilität in den Daten klar. Teilweise sind die Unterschiede nur durch wenige Beobachtungen zu erklären, die die mittleren Raten nach oben ziehen. So sind in bei allen Dosen immer wieder sehr wenige Thrispen zu beobachten. Die Unterschiede kommen dann von wenigen großen Zählungen. Wenn diese ausbleiben, dann haben wir eher einen Unterschied. Die Aussagekraft von den Dot-Boxplots sind auf jeden Fall sehr viel höher als bei den einfachen Barplots.\n\n\nR Code [zeigen / verbergen]\nggplot(insects_tbl, aes(x = timepoint, y = thripse, fill = trt)) + \n  labs(y = \"Mittlere Anzahl an Thripsen\", x = \"Messzeitpunkte der Zählungen\",\n       fill = \"Dosis\") +\n  geom_half_point(aes(color = trt), \n                  transformation = position_quasirandom(width = 0.05),\n                  side = \"l\", size = 0.5, alpha = 0.5,\n                  position = position_dodge(width = 0.9, preserve = \"single\")) +\n  geom_half_boxplot(aes(fill = trt), \n                    side = \"r\", width = 0.5, outlier.size = 0.8,\n                    position = position_dodge(width = 0.9, preserve = \"single\")) + \n  geom_text(data = cld_pos_tbl, aes(label = group, y = quant_3rd + 5),\n            position = position_dodge(width = 0.9), hjust = 0) +\n  scale_fill_okabeito() + scale_color_okabeito() +\n  guides(color = \"none\") + theme(legend.position = \"top\") \n\n\n\n\n\n\n\n\nAbbildung 60.21— Dotplots und Boxplots der mittleren Zahl der Thripsen aus einer Quasipoissonregression mit einem gemischten Modell. Das glmmTMB()-Modell berechnet die mittlere Anzahl in jeder Faktorkombination. Durch die Darstellung in Dotplot und Boxplot ist die große Heterogenität in den Daten zu sehen. Das compact letter display wird dann in {emmeans} generiert.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnwendungsbeispiel: Gruppenvergleich für Boniturnoten von Schweinen (3-faktoriell)\n\n\n\nIn dem folgenden agrawissenschaftlichen Beispiel wollen wir uns einmal die Auswertung von verschiedenen Schweinerassen im Bezug auf ihre Fußgesundheit in zwei Platzangeboten in Ställen anschauen. Die Ställe haben dabei zwei Arten von Belegung vorliegen, nämlich einmal eine weite Belegung und einmal eine enge Belegung. Darüber hinaus ist die Studie in verschiedenen Ställen und und verschiedenen Orten durchgeführt worden. Es ergibt sich also ein recht komplexer Datensatz. Dabei sind die Ställe barn auf den Höfe location genestet. Darüber hinaus haben wir eine Behandlung spacing sowie die verschiedenen Schweinerassen breed. Ich habe hier nur eine Auswahl an Schweinerassen getroffen, da mir sonst das clmm()-Modell zu lange dauert bis es gerechnet ist. Wir brauchen dann später für unser clmm()-Modell das Outcome noch als geordneten Faktor. Wenn du den Code nutzt, dann kannst du gerne alle Schweinerassen mit in das Modell nehmen. Ebenfalls hilfreich ist das Tutorium Ordinal regression in R: part 1 auf das ich gerne verweisen möchte. Am Ende haben wir einen sehr großen Datensatz mit 2840 bonitierten Schweinen. Das sind wirklich eine Menge Schweine.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/bonitur_pig.xlsx\") |&gt; \n  mutate(breed = as_factor(breed),\n         spacing = factor(spacing, labels = c(\"Weite Belegung\", \"Enge Belegung\")),\n         location = as_factor(location),\n         barn = as_factor(barn),\n         foot_inflamed_fct = ordered(foot_inflamed)) |&gt; \n  filter(breed %in% c(\"Vietnamese Pot-bellied\", \"Welsh\", \"Belarus Black Pied\", \"Saddleback\", \n                     \"American Yorkshire\", \"Bentheim Black Pied\", \"Mangalica\")) |&gt; \n  na.omit()\n\n\nDie Daten sehen wir dann auch nochmal in der Abbildung 60.22 als Violinplot visualisiert. Wir sehen, dass wir bei der Anzahl an Beobachtungen dann nichts mehr sehen. Die Violinplots mögen sich unterscheiden, aber so richtig gut erkennen, können wir hier eigentlich nicht. Auch lassen sich hier schwer halbe Abbildungen erstellen. Wir haben teilweise so viele Beobachtungen mit geringen Noten, dass wir kaum etwas erkennen können.\n\n\nR Code [zeigen / verbergen]\nggplot(pig_tbl, aes(breed, foot_inflamed, fill = breed)) +\n  theme_minimal() +\n  geom_violin() +\n  scale_y_continuous(breaks = 1:9, limits = c(1,9)) +\n  theme(legend.position = \"none\") +\n  facet_wrap(~ spacing, ncol = 1) +\n  scale_fill_okabeito() +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +\n  labs(x = \"Schweinerasse\", y = \"Boniturnote\")\n\n\n\n\n\n\n\n\nAbbildung 60.22— Violinplot der Boniturnoten für die Fußgesundheit der Schweinerassen aufgeteilt nach dem Platzangebot. Klar ist die sehr schiefe Verteilung der Boniturnoten zu erkennen.\n\n\n\n\n\nWir rechnen jetzt eine ordinale gemischte Regression mit der Funktion clmm(). Wir schreiben das Modell wie wir es schon kennen mit zwei festen und einem genesteten zufälligen Effekt. Wir betrachten auch die Interaktion zwischen den Schweinerassen und dem Platzangebot. Mich würde wundern wenn alle Schweinerassen auf das Platzangebot gleich reagieren würden. Dann müssen wir noch sichergehen das unser Outcome als Faktor mit der Spalte foot_inflamed_fct kodiert ist, damit wir das Modell rechnen können.\n\n\nR Code [zeigen / verbergen]\nclmm_fit &lt;- clmm(foot_inflamed_fct ~ breed + spacing + breed:spacing + (1 | location/barn), \n                 data = pig_tbl)\n\n\nWir nutzen das Modell clmm_fit direkt für den Gruppenvergleich und übergehen einmal die Modelldiagnostik hier. Jetzt rechnen wir in den beiden folgenden Tabs einmal die ANOVA und dann auch den multiplen Gruppenvergleich mit {emmeans}. Da wir hier ordinale Daten haben, können wir dann nicht einfach die Standardverfahren nehmen. Wir entscheiden uns dann für den Standardfehler bei der Darstellung.\n\nANOVA mit anova()Gruppenvergleich mit emmeans()\n\n\nWir rechnen hier einmal die ANOVA mit der Funktion Anova.clmm() aus dem R Paket {RVAideMemoire}. In dem Paket {ordinal} ist keine ANOVA für den Gruppenvergleich implementiert. Wir machen dann die Ausgabe nochmal schöner und fertig sind wir.\n\n\nR Code [zeigen / verbergen]\nclmm_fit |&gt; \n  Anova.clmm() |&gt;\n  model_parameters()\n\n\nParameter     |   Chi2 | df |      p\n------------------------------------\nbreed         | 158.00 |  6 | &lt; .001\nspacing       | 184.31 |  1 | &lt; .001\nbreed:spacing |  30.62 |  6 | &lt; .001\n\nAnova Table (Type 2 tests)\n\n\nWir sehen, dass die Schweinerasse signifikant ist. Ebenso hat der Abstand in den Ställen einen signifikanten Einfluss auf die Fußgesundheit. Wie es auch zu erwarten war, verhalten sich natürlich nicht alle Schweinerassen identisch im Bezug auf das Platzangebot und der Fußgesundheit. Es wäre auch sehr komisch, wenn wir hier keine Interaktion gehabt hätten. Wir werten also gleich mal die Boniturnoten getrennt für das Platzangebot aus. Auch hier müssen wir uns Fragen was ist mehr von Interesse, ich entscheide mich hier für die Rassen.\n\n\nIm Folgenden rechnen wir einmal für den Faktor breed getrennt für die beiden Platzangebote spacing einen Gruppenvergleich. Immerhin haben wir eine Interaktion vorliegen. Wir setzen hier die Option mean.class damit wir dann die mittleren Noten wiedergegeben bekommen. Mit den mittleren Noten können wir dann ein Säulendiagramm erstellen. Dann adjustieren wir nicht und sind auch schon fertig. Warum adjustieren wir hier nicht? Wenn du hier adjustierst ist am Ende nichts mehr signifikant, da du so viele Gruppenvergleiche rechnest, das hier die \\(p\\)-Werte nicht klein genug werden. Irgendwo ist dann auch eine Grenze. Die Effekte sind hier nicht stark genug sein um sie dann noch signifikant nachzuweisen.\n\n\nR Code [zeigen / verbergen]\nemm_obj &lt;- clmm_fit |&gt; \n  emmeans(~ breed | spacing, mode = \"mean.class\") |&gt;\n  cld(Letters = letters, adjust = \"none\")\nemm_obj\n\n\nspacing = Weite Belegung:\n breed                  mean.class     SE  df asymp.LCL asymp.UCL .group\n American Yorkshire           1.10 0.0843 Inf     0.933      1.26  a    \n Mangalica                    1.13 0.1044 Inf     0.922      1.33  a    \n Saddleback                   1.19 0.1486 Inf     0.895      1.48  a    \n Welsh                        1.19 0.1516 Inf     0.892      1.49  a    \n Vietnamese Pot-bellied       1.20 0.1574 Inf     0.889      1.51  a    \n Belarus Black Pied           1.52 0.3692 Inf     0.795      2.24  a    \n Bentheim Black Pied          1.82 0.5319 Inf     0.777      2.86  a    \n\nspacing = Enge Belegung:\n breed                  mean.class     SE  df asymp.LCL asymp.UCL .group\n American Yorkshire           1.16 0.1326 Inf     0.903      1.42  ab   \n Mangalica                    1.63 0.4327 Inf     0.782      2.48  a    \n Welsh                        2.04 0.6361 Inf     0.793      3.29  ab   \n Saddleback                   2.11 0.6683 Inf     0.798      3.42  abc  \n Bentheim Black Pied          2.41 0.7771 Inf     0.884      3.93   bcd \n Vietnamese Pot-bellied       2.76 0.8871 Inf     1.017      4.49    cd \n Belarus Black Pied           2.84 0.9110 Inf     1.053      4.62     d \n\nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas emm_obj Objekt werden wir dann gleich einmal in {ggplot} visualisieren. Die mean.class stellt den mittleren Noten der Fußgesundheit für die Menge die Rassen getrennt nach dem Platzangebot dar. Wir nutzen dann auch hier die Standardfehler für die Abbildungen, da wir sonst schnelle Werte kleiner 0 und größer 9 erhalten. Dann können wir zum Abschluss auch das compact letter display anhand der Abbildung interpretieren.\n\n\n\nIn der Abbildung 60.23 siehst du das Ergebnis der Auswertung in einem Säulendiagramm. In unserem Fall ist die weite Belegung nicht signifikant über die Rassen. Bei der engen Belegung sehen wir schon einige Unterschiede in der Benotung der Fußgesundheit. Die große Frage bleibt hier, ist der Effekt den wir sehen überhaupt relevant oder nicht? Immerhin haben wir sehr geringe mittlere Boniturnoten, die eventuell darüber hinwegtäuschen wie stark der Effekt eigentlich ist. Als Faustformel sage ich mir immer, dass ich eigentlich immer einen Notenschritt als Änderung sehen möchte. Sonst ist es eigentlich zu wenig um von einer Relevanz zu sprechen. Aber das ist eher eine Diskussion im Kontext der wissenschaftlichen Fragestellung als eine statistische Diskussion.\n\n\nR Code [zeigen / verbergen]\nemm_obj |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = breed, y = mean.class, fill = breed)) +\n  theme_minimal() + \n  labs(y = \"Mittlere Boniturnote\", x = \"Schweinerasse\") +\n  geom_bar(stat = \"identity\", position = position_dodge(0.9)) +\n  geom_text(aes(label = str_trim(.group), y = mean.class + SE + 0.01), vjust = -0.25,\n            position = position_dodge(0.9)) +\n  geom_errorbar(aes(ymin = mean.class-SE, ymax = mean.class+SE),\n                width = 0.2, position = position_dodge(0.9)) +\n  facet_wrap(~ spacing, ncol = 1) +\n  theme(legend.position = \"none\") +\n  scale_fill_okabeito() +\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +\n  ylim(0, 4)\n\n\n\n\n\n\n\n\nAbbildung 60.23— Säulendigramm der mittleren Boniturnote der Fußgesundheit aus einer ordinalen gemischten Regression. Das clmm()-Modell berechnet das mittlere Boniturnote für den Faktor breed getrennt für die beiden Platzangebote spacing. Das compact letter display wird dann in {emmeans} generiert. Fraglich bleibt, ob die Unterschiede wirklich relevant sind, da die mittleren Boniturnoten sehr nahe beieinander liegen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-mixed.html#referenzen",
    "href": "stat-modeling-mixed.html#referenzen",
    "title": "60  Lineare gemischte Modelle",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nBates, D., Mächler, M., Bolker, B., & Walker, S. (2014). Fitting linear mixed-effects models using lme4. arXiv preprint arXiv:1406.5823.\n\n\nRoback, P., & Legler, J. (2021). Beyond multiple linear regression: applied generalized linear models and multilevel models in R. CRC Press.\n\n\nSalinas Ruı́z, J., Montesinos López, O. A., Hernández Ramı́rez, G., & Crossa Hiriart, J. (2023). Generalized Linear Mixed Models with Applications in Agriculture and Biology. Springer Nature.\n\n\nWinter, B. (2013). Linear models and linear mixed effects models in R with linguistic applications. arXiv preprint arXiv:1308.5499.\n\n\nZuur, A. F., Ieno, E. N., Walker, N. J., Saveliev, A. A., Smith, G. M., et al. (2009). Mixed effects models and extensions in ecology with R (Bd. 574). Springer.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Lineare gemischte Modelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html",
    "href": "stat-modeling-gee.html",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "",
    "text": "61.1 Annahmen an die Daten\nLetzte Änderung am 25. March 2024 um 08:32:11\nVerallgemeinerte Schätzgleichungen (eng. Generalized Estimating Equations, abk. GEE) sind eine Methode zur Modellierung von Längsschnitt- oder Clusterdaten (eng. longitudinal bzw. clustered). Ich nutrze nur die Abkürzung GEE im weiteren Text, sonst wird mir das hier zu lang. Unter dem deutschen Begriff sind die GEE’s eigentlich nicht bekannt. Jedenfalls nicht bei Anwendern. Die GEE’s werden in der Regel bei nicht-normalen Daten wie binären oder Zähldaten verwendet. Damit siehst du auch schon, warum wir eigentlich nicht so oft GEE’s in der Anwendung finden. Wir haben in den Agrarwissenschaften meist ein normalverteiltes Outcome \\(y\\) und so nutzen wir dann häufig eben lineare gemischte Modelle. Damit ist das GEE auch eine Alternative für das lineare gemischte Modell. In beiden Modellklassen lassen sich normalverteilte, binäre und auch Zähldaten auswerten. Es ist eher eine Frage, was wir für eine Aussage über die Daten treffen wollen. Wollen wir eine beobachtungsbezogene Aussage (eng. subject-specific) treffen, dann nutzen wir lineare gemischte Modelle. Wollen wir eine populationsbezogene Aussage (eng. population average) treffen, dann nutzen wir das GEE.\nIm folgenden Kapitel zu den Generalized Estimating Equations (GEE) gehen wir davon aus, dass die Daten in der vorliegenden Form ideal sind. Das heißt wir haben weder fehlende Werte vorliegen, noch haben wir mögliche Ausreißer in den Daten. Auch wollen wir keine Variablen selektieren. Wir nehmen alles was wir haben mit ins Modell. Sollte eine oder mehre Bedingungen nicht zutreffen, dann schaue dir einfach die folgenden Kapitel an.\nGrundsätzlich ist das Thema GEE eher ein stiefmütterliches statistisches Thema. Ich selber habe gar nicht so viel zu GEE’s gefunden, so dass wie immer gilt: Augen auf im statistischen Straßenverkehr! Besonders die Variablenselektion, die ja an die Modellklasse gebunden ist, mag nicht so funktionieren wie gewollt. Bitte bei GEE Fragestellungen keine automatisierte Selektion anwenden. Dann lieber über compare_models() aus dem R Paket {parameters} die Modellvergleiche direkt vergleichen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#annahmen-an-die-daten",
    "href": "stat-modeling-gee.html#annahmen-an-die-daten",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "",
    "text": "Wenn du fehlende Werte in deinen Daten vorliegen hast, dann schaue bitte nochmal in das Kapitel 50 zu Imputation von fehlenden Werten.\nWenn du denkst, dass du Ausreißer oder auffälige Werte in deinen Daten hast, dann schaue doch bitte nochmal in das Kapitel 48 zu Ausreißer in den Daten.\nWenn du denkst, dass du zu viele Variablen in deinem Modell hast, dann hilft dir das Kapitel 49 bei der Variablenselektion.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#genutzte-r-pakete",
    "href": "stat-modeling-gee.html#genutzte-r-pakete",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.2 Genutzte R Pakete",
    "text": "61.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom,\n               parameters, performance, geepack, gee,\n               geesmv, multcomp, emmeans, scales, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(magrittr::set_names)\nconflicts_prefer(dplyr::filter)\n#cbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n#                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#daten",
    "href": "stat-modeling-gee.html#daten",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.3 Daten",
    "text": "61.3 Daten\n\n\n\n\n\n\nDu musst deine Daten nach der ID sortieren\n\n\n\nGanz wichtig, sonst funktioniert das GEE nicht und du kriegst auch keine Warnmeldung! Du musst die Daten mit arrange für deine ID Spalte sortieren.\n\n\nIch habe hier einmal zwei Datenbeispiel mitgebracht. Wir werden uns aber im folgenden Abschnitt dann nur die Schweine anschauen, das Kuhbeispiel können wir dann nochmal anderweitig nutzen oder aber du rechnest nochmal selber mit den Kühen. Wichtig hierbei ist, dass wir sicher sind, dass wir die Daten nach der ID Spalte der Tiere sortiert haben. Das heist, dass alle Tier ID’s Zeilen wirklich beieinander stehen. Das ist wichtig, sonst schafft GEE nur eine sehr seltsame Ausgaben zu produzieren. Leider ohne eine Warnung auszugeben. Deshalb nutzen wir die Funktion arrange() um nochmal nach der Spalte pig_id zu sortieren.\n\n\nR Code [zeigen / verbergen]\npig_gain_tbl &lt;- read_excel(\"data/pig_feed_data.xlsx\") |&gt; \n  mutate(weight_gain = round(weight_gain, 2)) |&gt; \n  arrange(pig_id)\n\n\nIn Tabelle 61.1 sehen wir nochmal einen Auszug aus den Daten. Wir haben unsere wiederholte Messung time. Das heißt wir haben unsere Schweine wiederholt gemessen. Jedes Schwein für jede Behandlung fünfmal. Wir brauchen die pig_id um zu wissen, welche Werte der Geichtszunahme dann auch immer zu einem Ferkel gehören. Im Weiteren haben wir noch die Bucht, in der die Ferkel gehalten wurden, notiert. Die Information lassen wir aber hier erstmal im späteren Modell weg.\n\n\n\n\nTabelle 61.1— Auszug aus dem Daten zu den kranken Ferkeln. Jedes Ferkel wurde wiederholt gemessen.\n\n\n\n\n\n\ntime\npig_id\ncove\ntreatment\nweight_gain\n\n\n\n\n1\n1\n1\nfeed_10\n44.29\n\n\n2\n1\n1\nfeed_10\n59\n\n\n3\n1\n1\nfeed_10\n49.96\n\n\n4\n1\n1\nfeed_10\n66.17\n\n\n…\n…\n…\n…\n…\n\n\n2\n120\n10\nfeed_20\n56.17\n\n\n3\n120\n10\nfeed_20\n58.13\n\n\n4\n120\n10\nfeed_20\n68.48\n\n\n5\n120\n10\nfeed_20\n34.99\n\n\n\n\n\n\n\n\nDas zweite Datenbeispiel dient zur Veranschaulichung eines weiteres Messwiederholungsbeispiels. Wir haben drei Kühe wiederholt an drei Zeitpunkten gemessen. JEde Kuh hat immer nur die gleiche Behandlung erhalten. Das Outcome ist einmal die Anzahl an Zellen in der Milch pro ml und einmal der Fettgehalt in %. Die Daten sind in der Form relativ übersichtlich. Wir haben leider sehr wenige Messwiederholungen, so dass hier ein GEE oder aber auch ein lineares gemischtes Modell fraglich ist. Wir wollen eigentlich mindesnten fünf Level für den Clusterfaktor. Wir gehen wieder sicher, dass die Daten auch richtig nach ID sortiert sind.\n\n\nR Code [zeigen / verbergen]\nmilk_tbl &lt;- read_csv2(\"data/milk_feeding.csv\") |&gt; \n  rename(cow_id = id_cow) |&gt; \n  arrange(cow_id)\n\n\nIn Tabelle 61.2 sehen wir nochmal den Ausschnitt aus den Milchdaten. Wir haben insgesamt auch nur vierzehn Kühe gemessen, was auch nicht so viele Tiere sind. Im Ferkelbeispiel hatten wir uns 120 Ferkel angeschaut. Deshal ist dieser Datensatz sehr klein für ein komplexes Modell wie GEE.\n\n\n\n\nTabelle 61.2— Auszug aus Daten zu Milchkühen. Jede Kuh wurde wiederholt gemessen.\n\n\n\n\n\n\ncow_id\ntrt\ntime_point\ncell_count\nfat_perc\n\n\n\n\n1\n1\n1\n1932\n0.69\n\n\n1\n1\n2\n6771\n0.94\n\n\n1\n1\n3\n2225\n0.01\n\n\n2\n0\n1\n2572\n0.15\n\n\n…\n…\n…\n…\n…\n\n\n13\n1\n3\n8445\n0.06\n\n\n14\n1\n1\n19707\n0.95\n\n\n14\n1\n2\n9428\n0.5\n\n\n14\n1\n3\n8184\n0.96\n\n\n\n\n\n\n\n\nGehen wir einmal auf den theoretischen Hintergrund zu GEE ein und schauen wir mal, wie wir da unser Datenbeispiel zu passt.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#theoretischer-hintergrund",
    "href": "stat-modeling-gee.html#theoretischer-hintergrund",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.4 Theoretischer Hintergrund",
    "text": "61.4 Theoretischer Hintergrund\nGanz wichtig, wir gehen jetzt nicht auf den mathematischen Hintergurnd ein. Das ist auch zu schräg. Das will heißen, dass der mathematische Hintergrund von GEE’s wirklich vieles übersteigt. Ich kann GEE’s anwenden, aber ich weis nicht, wie ein GEE mathematisch funktioniert. Das muss man ja auch nicht. Deshalb hier nur die Theorie, was ein GEE macht und in welchen Hintergründen wir das GEE anwenden. Zuerst schätzt das GEE die durchschnittlichen Auswirkungen auf die Population (eng. population average). Betrachten wir dabei die folgenden zwei Szenarien nach Allison (2009):\n\nSzenario 1: Du bist ein Arzt. Du möchtest wissen, um wie viel ein Cholesterinmedikament die Wahrscheinlichkeit eines Herzinfarkts bei deinem Patienten senkt.\nSzenario 2: Du bist ein staatlicher Gesundheitsbeamter. Du möchtest wissen, wie sich die Zahl der Menschen, die an einem Herzinfarkt sterben, verändern würde, wenn alle Menschen in der Risikogruppe das Cholesterinmedikament einnehmen würden.\n\nIm ersten Szenario wollen wir die subjektspezifischen (eng. subject-specific) Chancen wissen. Im zweiten Fall sind wir an der Vorhersage für die gesamte Bevölkerung interessiert. GEE kann uns Schätzungen für das zweite, aber nicht für das erste Szenario liefern. Dami sind wir schon recht weit. Wir wollen also nichts über die einzelnen Ferkel wissen, sondern nur über die Gesamtzahl an Ferklen mitteln. Das ist natürlich manachmal gewollt und manchmal eher nicht. In der Zucht kommt es drauf an, ob du individuelle Effekte haben möchtest, also für einen Eber oder eben die Leistung der gesamten Rasse bewerten willst. Je nachdem kannst du dan ein GEE einsetzen oder nicht. GEE’s sind somit für einfaches Clustering oder wiederholte Messungen gedacht. Komplexere Designs wie verschachtelte oder gekreuzte Gruppen, z. B. verschachtelte Messwiederholungen innerhalb eines Probanden oder einer Gruppe, können nicht ohne weiteres berücksichtigt werden. Hier nutzen wir dann wieder gemischte lineare Modelle.\nEin großer Vorteil der GEE ist, dass wir eine Korrelation zwischen den wiederholten Messungen, also Ferkeln, annehmen können. Das heist, wir können die Verwandtschaft oder den zeitlichen Zusammenhang zwischend den Messwiederholungen abbilden. Dafür brauchen wir dann natürlich auch Fallzahl, die schnell mal über die hundert Beobachtungen geht. Wir können dann zwischen folgenden Zusammenhängen der Korrelation entscheiden.\n\nindependence, daher sind die Beobachtungen im Zeitverlauf sind unabhängig.\nexchangeable, daher haben alle Beobachtungen im Zeitverlauf die gleiche Korrelation \\(\\rho_{const.}\\).\nar1, die Korrelation \\(\\rho\\) nimmt als Potenz der Anzahl \\(p\\) der Zeitpunkte, die zwischen zwei Beobachtungen liegen, ab. Daher rechnen wir mit \\(\\rho, \\rho^2, \\rho^3,..., \\rho^p\\) über die Zeitpunkte.\nunstructured, daher kann die Korrelation zwischen allen Zeitpunkten unterschiedlich sein.\n\nLeider gibt es keine automatische Auswahl. Wir müssen also überlegen, welche Korrelationmatrix am besten passen würde. Da unstructured sehr viel Fallzahl benötigt um valide zu sein, nehme ich meistens exchangeable, wenn ich ein GEE rechne. Eine unabhänige Korrealtion anzunehmen macht wenig Sinn, dann brauche ich auch kein GEE rechnen. Die Korrelation ist ja die Stärke von einem GEE.\nWir haben nun zwei R Pakete, die beide das gleiche tun, nämlich ein GEE rechnen. Wir haben die Wahl zwischen dem R Paket gee und der Funktion gee() sowie der Funktion geeglm() aus dem R Paket {geepack}. Ich neige zu dem letzteren Paket. Das R Paket {geepack} ist etwas neueren Ursprungs und funktioniert bisher recht reibungslos.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#modellieren-mit-gee",
    "href": "stat-modeling-gee.html#modellieren-mit-gee",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.5 Modellieren mit gee()",
    "text": "61.5 Modellieren mit gee()\nLeider ist es so, dass wir kaum kontrollieren können, was alles aus den Funktionen in die R Console geschrieben wird. Die Funktionen sind schon recht alt und es gab mal einen Trend, dass eine Funktion immer schön was wiedergeben soll. Das ist natürlich immer etwas nervig, wenn man das nicht will. Wir erhalten also bei der Funktion gee() immer die Koeffizienten des Modells ausgegeben, ob wir es nun in einem Objekt speichern oder auch nicht. Ich finde sowas immer ziemlich nervig.\nAlso wir bauen wir uns unser gee Modell? Zuerst kommt wie immer die formula, da ändert sich nichts. Wir nehmen in unser Modell als Outcome die Gewichtszunahme und als Einflusvariablen dann die Behandlung sowie die Zeit und die Interaktion zwischen der Behandlung und der Zeit. Die Daten sind auch gleich. Erst mit der Option id = ändert sich was. Hier geben wir die Spalte ein, in der die ID’s der Ferkel bzw. der Beobachtungen stehen. Das war es auch schon für den CLustereffekt. Dann nach die Verteilungsfamilie, wir können hier auch für nicht normalverteilte Daten ein GEE schätzen. Zum Abschluss noch die Korrelationsstruktur definiert. Wir nehmen hier exchangeable, diese Korrelationsstruktur ist für den Anfang immer ganz gut und macht auch häufig Sinn.\n\n\nR Code [zeigen / verbergen]\ngee_fit &lt;- gee(weight_gain ~ treatment + treatment * time,\n               data = pig_gain_tbl, \n               id = pig_id, \n               family = gaussian,\n               corstr = \"exchangeable\")\n\n\n             (Intercept)      treatmentfeed_10+10         treatmentfeed_20 \n               56.441300                 1.573500                 3.378825 \n                    time treatmentfeed_10+10:time    treatmentfeed_20:time \n               -2.358900                 0.207000                 0.182875 \n\n\nNachdem wir das Modell gefittet haben, können wir uns einmal die Korrelationsstruktur anschauen. Da ist die Funktion gee wirklich gut. Die Korrelationsstuktur können wir uns einfach so rausziehen.\n\n\nR Code [zeigen / verbergen]\npluck(gee_fit, \"working.correlation\") |&gt; \n  round(3)\n\n\n      [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] 1.000 0.082 0.082 0.082 0.082\n[2,] 0.082 1.000 0.082 0.082 0.082\n[3,] 0.082 0.082 1.000 0.082 0.082\n[4,] 0.082 0.082 0.082 1.000 0.082\n[5,] 0.082 0.082 0.082 0.082 1.000\n\n\nWas sehen wir? Natürlich muss auf der Diagonalen eine 1 stehen, den untereinander sind die Variablen ja identisch und damit mit 1 korreliert. Auf der Nicht-Diagonalen finden wir dann die Korrelation untereinander. Da wir exchangeable für die Korrelationsstruktur gewählt haben, haben wir überall die gleiche Korrelation. Alle Ferkel sind untereinander über die Zeitpunkte gleich mit \\(\\rho = 0.82\\) korreliert.\nWir lassen uns jetzt noch die Modellparameter ausgeben und schauen uns einmal an, ob wir was signifikantes gefunden haben.\n\n\nR Code [zeigen / verbergen]\ngee_fit |&gt; model_parameters()\n\n\nParameter                     | Coefficient |   SE |         95% CI |     z |      p\n------------------------------------------------------------------------------------\n(Intercept)                   |       56.44 | 1.23 | [52.53, 60.35] | 28.27 | &lt; .001\ntreatment [feed_10+10]        |        1.57 | 1.65 | [-3.96,  7.11] |  0.56 | 0.341 \ntreatment [feed_20]           |        3.38 | 1.66 | [-2.16,  8.91] |  1.20 | 0.041 \ntime                          |       -2.36 | 0.19 | [-3.49, -1.22] | -4.07 | &lt; .001\ntreatment [feed_10+10] × time |        0.21 | 0.24 | [-1.40,  1.81] |  0.25 | 0.386 \ntreatment [feed_20] × time    |        0.18 | 0.25 | [-1.42,  1.79] |  0.22 | 0.456 \n\n\nWir sehen, dass es einen signifikanten Unterschied in der Zeit gibt, das war ja auch zu erwarten, denn mit der Zeit werden die Ferkel schwerer. Wir haben aber auch einen schwach signifikanten Effekt zwischen feed_10 und feed_20 mit einem \\(p\\)-Wert von \\(0.041\\). Hier machen wir kurz Stop, dann geht es aber in dem Abschnitt zu den Posthoc Tests mit dem Modell weiter. Wir wollen ja noch für alle Behanlungslevel einen paarweisen Vergleich rechnen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#modellieren-mit-geeglm",
    "href": "stat-modeling-gee.html#modellieren-mit-geeglm",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.6 Modellieren mit geeglm()",
    "text": "61.6 Modellieren mit geeglm()\nDer eigentlcihe Unetrschied zwischen der Funktion gee() und geeglm() ist, dass sich im Hintergrund eine Menge anders abspielt, das wir nicht sehen. Für mich war geeglm() immer schneller und stabiler. Der einzige Grund war immer nochmal ein gee() laufen zu lassen, da sich die Korrelationsmatrix so einfach aus dem gee() Objekt ziehen lassen lässt.\n\n\nR Code [zeigen / verbergen]\ngeeglm_fit &lt;- geeglm(weight_gain ~ treatment + treatment * time,\n                     data = pig_gain_tbl, \n                     id = pig_id, \n                     family = gaussian,\n                     corstr = \"exchangeable\")\n\n\nWir erhalten zwar auch die geschätzte Korrelation, aber nicht in so einer schönen Matrix. Also ist es dann Geschmackssache. Du weist dann ja, das wir mit exchangeable überall die gleiche Korrelation angenommen haben.\n\n\nR Code [zeigen / verbergen]\npluck(geeglm_fit, \"geese\", \"alpha\")\n\n\n   alpha \n0.082597 \n\n\nAm Ende schauen wir uns dann nochmal den Fit aus dem geeglm() Modell an. Und stellen fest, dass das Modell numerisch fast identisch ist. Wir haben also nur dir Wahl in der Darstellungsform und in der Geschwindigkeit.\n\n\nR Code [zeigen / verbergen]\ngeeglm_fit |&gt; model_parameters()\n\n\nParameter                     | Coefficient |   SE |         95% CI | Chi2(1) |      p\n--------------------------------------------------------------------------------------\n(Intercept)                   |       56.44 | 1.23 | [54.04, 58.84] | 2120.76 | &lt; .001\ntreatment [feed_10+10]        |        1.57 | 1.65 | [-1.66,  4.81] |    0.91 | 0.341 \ntreatment [feed_20]           |        3.38 | 1.66 | [ 0.13,  6.62] |    4.17 | 0.041 \ntime                          |       -2.36 | 0.19 | [-2.73, -1.99] |  153.65 | &lt; .001\ntreatment [feed_10+10] × time |        0.21 | 0.24 | [-0.26,  0.67] |    0.75 | 0.386 \ntreatment [feed_20] × time    |        0.18 | 0.25 | [-0.30,  0.66] |    0.56 | 0.456 \n\n\nWir haben also dann zwei Funktionen, die wir nutzen können. Am Ende kannst du dann beide ausprobieren. Machmal hat man mit geeglm() etwas mehr Glück, wenn die Daten einfach mal nicht wollen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#multipler-vergleich-mit-emmeans",
    "href": "stat-modeling-gee.html#multipler-vergleich-mit-emmeans",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.7 Multipler Vergleich mit emmeans",
    "text": "61.7 Multipler Vergleich mit emmeans\nGut, soweit sind wir dann gekommen. Wir haben unser Modell gefittet und meistens wollen wir dann noch einen all-pair Vergleich bzw. den paarweisen Vergleich rechnen. Das machen wir erst einmal mit der Funktionalität aus dem R Paket {emmeans}, das uns erlaubt auch das compact letter display wiederzugeben. Wenn dich mehr zum Prozess des Codes für die Nutzung von {emmeans} interessiert, dann schaue doch einfach nochmal ins Kapitel 43. In dem Kapitel zu den multiplen Vergleichen erkläre ich dir nochmal genauer den Funktionsablauf.\nWichtig ist, dass wir unsere Vergleiche mit Bonferroni adjustieren. Wenn du das nicht möchtest, dann musst du adjust = \"none\" auswählen. Sonst machen wir die Ausageb nochmal tidy() und dann runden wir noch. Wir erhalten dann das compact letter display wieder.\n\n\nR Code [zeigen / verbergen]\nres_gee &lt;- geeglm_fit |&gt; \n  emmeans(~ treatment) \n\nres_gee_cld &lt;- res_gee |&gt; \n  cld(adjust = \"bonferroni\", Letters = letters) |&gt; \n  tidy() |&gt; \n  select(treatment, estimate, conf.low, conf.high, .group) |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\nres_gee_cld \n\n\n# A tibble: 3 × 5\n  treatment  estimate conf.low conf.high .group\n  &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; \n1 feed_10        49.4     47.0      51.7 \" a \" \n2 feed_10+10     51.6     49.1      54.0 \" ab\" \n3 feed_20        53.3     51.0      55.6 \"  b\" \n\n\nWenn dich die Abbildungen und weiteres interessieren, dann schaue einfach nochmal ins Kapitel zu den multiplen vergleichen. Dort zeige ich dann wie wir das compact letter display in eine Abbildung ergänzen. Der Ablauf ist auch im Kapitel 60 zu den linearen gemischten Modellen gezeigt.\nWir sehen, dass sich die Gruppe feed_10 von der Gruppe feed_20 unterscheidet. Beide Gruppen haben nicht den gleichen Buchstaben. Die Gruppe feed_10+10 unterscheidet sich weder von der Gruppe feed_10 noch von der Gruppe feed_20. Wir können uns im folgenden Codeblock dann auch die \\(p\\)-Werte für die Vergleiche wiedergeben lassen. Die Aussagen sind die selben.\n\n\nR Code [zeigen / verbergen]\nres_gee_tbl &lt;- res_gee |&gt; \n  contrast(method = \"pairwise\", adjust = \"bonferroni\") |&gt; \n  tidy(conf.int = TRUE) |&gt; \n  mutate(p.value = pvalue(adj.p.value),\n         across(where(is.numeric), round, 2)) |&gt; \n  select(contrast, estimate, \n         conf.low, conf.high, p.value) \n\nres_gee_tbl\n\n\n# A tibble: 3 × 5\n  contrast               estimate conf.low conf.high p.value\n  &lt;chr&gt;                     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 feed_10 - (feed_10+10)    -2.19    -5.56      1.17 0.355  \n2 feed_10 - feed_20         -3.93    -7.2      -0.66 0.012  \n3 (feed_10+10) - feed_20    -1.73    -5.06      1.59 0.636  \n\n\nDie Funktion emmeans() hätten wir auch mit dem Modell aus dem gee() Fit nutzen können. Als letzten Abschnitt wollen wir uns jetzt noch eine Besonderheit der GEE Varianzschätzung anschauen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#multipler-vergleich-mit-multcomp-und-geesmv",
    "href": "stat-modeling-gee.html#multipler-vergleich-mit-multcomp-und-geesmv",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "61.8 Multipler Vergleich mit multcomp und geesmv",
    "text": "61.8 Multipler Vergleich mit multcomp und geesmv\nNatürlich haben wir uns nicht in den Details wie ein GEE funktioniert verloren. Es ist nun aber so, dass ein GEE auf sehr unterschiedliche Art und Weise die Korrelationsstruktur und die Varianzen dahinter schätzen kann. Je nach geschätzter Varianz kommen natürlich auch eventuell ganz andere Signifikanzen aus dem Modell. Deshalb hat sich wirklich eine Horde an mathematischen Statistikern an der Varianzschätzung im GEE abgearbeitet.\n\n\ngeesmv: Modified Variance Estimators for Generalized Estimating Equations\nDas R Paket {geesmv} bietet ganze neun Implementierungen von Schätzern für die Varianz/Covarianzstruktur der Daten an. Jetzt stellt sich die Frage, welche Implementierung für den Varianzschätzer denn nun nutzen? Zum einen hat natürlich die geschätzte Varianz einen nicht zu unterschätzenden Effekt auf die Signifikanz der Koeffizienten des GEE Models. Zum anderen ist aber der multiple Vergleich nach dem Schätzen des Modells und dem getrennten Schätzen der Varianz sehr mühselig. Leider helfen uns auch unsere Standardpakete nicht so richtig weiter. Die Funktionalität ist nicht für {geesmv} implementiert. Was wiederum dafür spricht, dass der Bedarf von Anwendern sehr eingeschränkt zu seien scheint. Nun müssen wir folgende epischen Schritte durchführen um einen multiplen Vergleich rechnen zu können.\n\nWir fitten unser geeglm() Modell in der mean parametrization, dass heist wir entfernen den Intercept aus dem Modell und lassen unser Modell somit durch den Urspung laufen. Im Prinzip setzen wir den Intercept auf 0 und erhalten so die Mittelwerte jedes Levels des Faktors treatment.\nWir speichern die \\(\\beta\\)-Koeffizienten von dem treatment aus unserem GEE Modell in einem Objekt ab.\nWir rechnen mit der gleichen Angabe wie vorher das geeglm() Modell eine der neun Funktion. Ich habe hier zufällig die Funktion GEE.var.lz() gewählt. Wir speichern die Ausgabe der Varianz der Koeffizienten in einem Objekt.\nWir kombinieren die \\(\\beta\\)-Koeffizienten und die Varianz in einem Objekt mit der Funktion left_join().\nWir bauen uns unsere eigene Kontrastmatrix in der steht welches Level der Behandlung mit welchen anderen Level verglichen werden soll.\nWir übergeben alle Einzelteile an die Funktion glht() aus dem R Paket {multcomp} und rechnen unseren multiplen Vergleich.\n\nNa dann mal auf. Gehen wir die Schritte einmal nacheinander durch und schauen, was wir da so alles gemacht haben. Nochmal Achtung, hier musst du wirklich schauen, ob sich der Aufwand lohnt. Ich zeige es hier einmal, den in bestimmten Fällen kann sich eine andere Implementierung für die Schätzung der Varianz durchaus lohnen. Denn aus Erfahrung weiß ich, dass der Standardvarianzschätzer nicht immer der beste Schätzer sein muss (Kruppa & Hothorn, 2021).\nIm Folgenden schätzen wir einmal ein ganz normales GEE Modell mit der Funktion geeglm(). Wir werden aber nur die Koeffizienten brauchen. Die Varianz der Koeffizienten nutzen wir nicht. Ebenso brauchen wir die mean Parametrisierung, dass heißt wir setzen den Intercept auf 0.\n\n\nR Code [zeigen / verbergen]\ngeeglm_fit &lt;- geeglm(weight_gain ~ 0 + treatment + treatment * time,\n                     data = pig_gain_tbl, \n                     id = pig_id, \n                     family = gaussian,\n                     corstr = \"exchangeable\")\n\n\nWir speichern einmal die Koeffizienten in dem Objekt beta_tbl. Die brauchen wir später um die paarweisen Vergleiche zu rechnen.\n\n\nR Code [zeigen / verbergen]\nbeta_tbl &lt;- coef(geeglm_fit) |&gt; \n  enframe()\n\n\nUm die Varianz der Koeffizienten zu schätzen nutzen wir jetzt eine der Implementierungen in geesmv. Ich habe mich etwas zufällig für die Implementierung GEE.var.lz() entschieden. Diese Funktion liefer nur die Varianz der Koeffizienten. Leider aber nicht auch gleich noch die Koeffizienten dazu… deshalb der blöde doppelte Schritt. Wir speichern dann die Varianzen in dem Objekt vbeta_tbl.\n\n\nR Code [zeigen / verbergen]\ngee_lz_vcov &lt;- GEE.var.lz(weight_gain ~ 0 + treatment + treatment * time,\n                          data = as.data.frame(pig_gain_tbl), \n                          id = \"pig_id\",\n                          family = gaussian,\n                          corstr = \"independence\") \n\n\n        treatmentfeed_10      treatmentfeed_10+10         treatmentfeed_20 \n               56.441300                58.014800                59.820125 \n                    time treatmentfeed_10+10:time    treatmentfeed_20:time \n               -2.358900                 0.207000                 0.182875 \n\n\nR Code [zeigen / verbergen]\nvbeta_tbl &lt;- pluck(gee_lz_vcov, \"cov.beta\") |&gt; \n  enframe()\n\n\nJetzt verbinden wir noch die beiden Objekte beta_tbl und vbeta_tbl über die Funktion left_join(). Wir können mit der Funktion zwei Datensätze nach einer gemeinsamen Spalte zusammenführen. Dann müssen zwar die Einträge in der Spalte gleich sein, aber die Sortierung kann anders sein. Dann müssen wir noch die Zeilen rausfiltern in denen die Behandlungsmittelwerte sind. Am Ende benennen wir die Spalten noch sauber nach dem was die Spalten sind.\n\n\nR Code [zeigen / verbergen]\ncoef_tbl &lt;- left_join(beta_tbl, vbeta_tbl, by = \"name\") |&gt; \n  filter(str_detect(name, \"time\", negate = TRUE)) |&gt; \n  set_names(c(\"parameter\", \"beta\", \"vbeta\"))\n\n\nDas war jetzt ein Angang. Leider geht es nicht so einfach weiter. Wir müssen uns für die Vergleiche die Kontrastmatrix selberbauen. Wir machen einen paarweisen Vergleich, also wählen wir den Tukey Kontrast aus.\n\n\nR Code [zeigen / verbergen]\ncontrMat_n &lt;- setNames(rep(1, length(coef_tbl$parameter)),\n                       coef_tbl$parameter) |&gt; \n  contrMat(type = \"Tukey\")\n\ncontrMat_n \n\n\n\n     Multiple Comparisons of Means: Tukey Contrasts\n\n                                       treatmentfeed_10 treatmentfeed_10+10\ntreatmentfeed_10+10 - treatmentfeed_10               -1                   1\ntreatmentfeed_20 - treatmentfeed_10                  -1                   0\ntreatmentfeed_20 - treatmentfeed_10+10                0                  -1\n                                       treatmentfeed_20\ntreatmentfeed_10+10 - treatmentfeed_10                0\ntreatmentfeed_20 - treatmentfeed_10                   1\ntreatmentfeed_20 - treatmentfeed_10+10                1\n\n\nNun können wir alles zusammenbringen. Wir nutzen die Helferfunktion parm() aus dem R Paket {multcomp} um diei Koeffizienten richtig in glht() zuzuordnen. Dann noch der Kontrast mit rein in die Funktion und wir können unseren Vergleich rechnen. Leider fehlen noch die Freiheitsgrade, die wären dann in unserem Fall null, das ist aber Unsinn. Wir ergänzen die Freiheitsgrade aus unserem ursprünglichen Modell für die Koeffizienten.\n\n\nR Code [zeigen / verbergen]\nmult_gee &lt;- glht(parm(coef = coef_tbl$beta, \n                      vcov = diag(coef_tbl$vbeta)), \n                 linfct = contrMat_n)\nmult_gee$df &lt;- geeglm_fit$df.residual\n\n\nJetzt können wir uns die \\(p\\)-Werte und die 95% Konfidenzintervalle wiedergeben lassen. Du musst echt überlegen, ob sich der Aufwand lohnt. Wir erhalten hier jetzt kein signifikanten Unterschied mehr. Das liegt daran, dass wir in diesem Fall höhere Varianzen geschätzt haben als das geeglm() normalerweise tun würde. Höhere Varianzen der Koeffizienten, weniger signifikante Koeffizienten. Und dann auch weniger signifikante paarweise Unterschiede.\n\n\nR Code [zeigen / verbergen]\nmult_gee |&gt; \n  tidy(conf.int = TRUE) |&gt; \n  select(contrast, estimate, conf.low, conf.high, adj.p.value)\n\n\n# A tibble: 3 × 5\n  contrast                               estimate conf.low conf.high adj.p.value\n  &lt;chr&gt;                                     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 treatmentfeed_10+10 - treatmentfeed_10     1.57   -2.30       5.45       0.607\n2 treatmentfeed_20 - treatmentfeed_10        3.38   -0.510      7.27       0.103\n3 treatmentfeed_20 - treatmentfeed_10+10     1.81   -1.88       5.49       0.483\n\n\nAls Fazit nehmen wir mit, dass wir noch die Möglichkeit haben auf andere Art und Weise die Varianz in einem GEE zu schätzen. Ob uns das hilft steht auf einen anderem Blatt, aber wir haben die Möglichkeit hier noch nachzuadjustieren, wenn es mit dem Varianzschätzer klemmen sollte. Großartig unterstützt wird das Paket nicht, dass sieht man ja schon daran wie Oldschool die Analyse ist.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-gee.html#referenzen",
    "href": "stat-modeling-gee.html#referenzen",
    "title": "61  Generalized Estimating Equations (GEE)",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nAllison, P. D. (2009). Fixed effects regression models. SAGE publications.\n\n\nKruppa, J., & Hothorn, L. (2021). A comparison study on modeling of clustered and overdispersed count data for multiple comparisons. Journal of Applied Statistics, 48(16), 3220–3232.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Generalized Estimating Equations (GEE)</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html",
    "href": "stat-modeling-non-linear.html",
    "title": "62  Nicht lineare Regression",
    "section": "",
    "text": "62.1 Genutzte R Pakete\nLetzte Änderung am 05. August 2025 um 10:14:22\nWas wollen wir mit der nicht-linearen Regression erreichen? Zum einen erhalten wir durch die nicht-lineare Regression die Möglichkeit auch Abhängigkeiten zu modellieren, die nicht linear sind. Zum anderen wollen wir auch nicht nur Gruppen miteinander vergleichen, sondern auch Verläufe modellieren. Häufig sind diese Verläufe über die Zeit nicht linear. Es gibt Sättigungskurven oder aber auch einen exponentiellen Verfall oder ein exponentielles Wachstum. All dies können wir mit nicht-linearen Modellen abbilden und modellieren. Für Zeitreihen habe ich dann noch ein eigenes Kapitel geschrieben, hier wollen wir uns dann mal mit den Verläufen beschäftigen und schauen, dass wir die Koeffizienten einer Geradengleichung erhalten.\nWichtig hierbei ist, dass wir oft nicht statistisch Testen, sondern ein Modell haben wollen, dass die Punkte gut beschreibt. Mit Modell meinen wir hier die Gerade, die durch die Punkte läuft. Für diese Grade wollen wir die Koeffizienten schätzen also rausfinden, wie wir später die Gerade zeichnen könnten, wenn wir die Punkte nicht vorliegen hätten. Also die Frage beantworten, wie \\(y\\) nicht-linear von \\(x\\) abhängt. Wir immer gibt es eine Reihe von Möglichkeiten das Problem zu lösen einer Geradengleichung zu erhalten, die nicht linear ist. Normalerweise haben wir ja eine Regressionsgleichung für eine simple lineare Regression in der folgenden Form vorliegen.\n\\[\ny \\sim \\beta_0 + \\beta_1 \\cdot x\n\\]\nWenn wir jetzt aber eine nicht-lineare Regression rechnen wollen, dann müssen wir hier zum Beispiel ein Polynom einfügen. Damit schreiben wir nicht mehr \\(x\\) sondern \\(x^b\\) und erhalten folgende, beispielhafte Formel. Warum beispielhaft? Je nach Fragestellung brauchen wir verschiedene Parameter die wir dann für den Kurvenverlauf bestimmen müssen.\n\\[\ny \\sim \\beta_0 + \\beta_1 \\cdot x^b\n\\]\nDieses \\(b\\) (eng. power) und die anderen Koeffizienten müssen wir jetzt irgendwie berechnen. Manchmal fällt das \\(\\beta_1\\) dann auch weg oder aber wir haben eben eine noch komplexere Art der mathematischen Darstellung. Wir gehen daher hier dann mal verschiedene Lösungen für das Problem durch. Nicht alle Lösungen liefern auch eine Geradengleichung, die du dann auch aufschreiben kannst.\nUnd damit kommen wir auch zu dem zentralen Problem. Woher weiß ich, welche Gerade oder Kurve ich berechnen will? Eine super Hilfestellung liefert die Seite A collection of self-starters for nonlinear regression in R. Dort kannst du einmal schauen, welche Funktionen es gibt, die du dann zum Beispiel in nls() aus dem R Paket {stats} modellieren kannst. Das R Paket {stats} kommt gleich mit R mit und muss nicht installiert werden. Mit Modellieren meine ich dann, die Gradenfunktion bestimmen kannst. Die richtige Startfunktion zu finden ist aber wirklich nicht trivial. Dafür gibt es dann aber mit dem R Paket {mfp} eine Lösung, dafür kann das Paket dann andere Sachen nicht. Schau dich also einmal um und entscheide, was du brauchst um deine Fragestellung zu beantworten.\nSchaue dir auch die folgenden Zerforschenbeispiele einmal an, wenn dich mehr zu dem Thema der Abbildung von nicht-linearen Regressionen interessiert. Du findest in den Kästen Beispiele für Posterabbildungen zur nicht-linearen Regression, die ich dann zerforscht habe. Dann habe ich auch noch gleich die nicht-lineare Regression gerechnet um die Geradengleichungen sauber darzustellen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom, nlraa, modelsummary,\n               parameters, performance, see, mgcv, mfp, marginaleffects,\n               gratia, readxl, nlstools, janitor, ggeffects, nls.multstart,\n               conflicted)\ncb_pal &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n            \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#daten",
    "href": "stat-modeling-non-linear.html#daten",
    "title": "62  Nicht lineare Regression",
    "section": "62.2 Daten",
    "text": "62.2 Daten\nIn unserem Datenbeispiel schauen wir uns die Wachstumskurve von Hühnchen an. Wir verfolgen das Gewicht über 36 Tage. Dabei messen wir an jedem Tag eine unterschiedliche Anzahl an Kücken bzw. Hünchen. Wir wissen auch nicht, ob wir immer die gleichen Hühnchen jedes Mal messen. Dafür war die Hühnchenmastanlage zu groß. Wir wissen aber wie alt jedes Hühnchen bei der Messung war.\n\n\nR Code [zeigen / verbergen]\nchicken_tbl &lt;- read_csv2(\"data/chicken_growth.csv\")  \n\n\nIn Tabelle 62.1 sehen wir nochmal die Daten für die ersten drei und die letzten drei Zeilen. Alleine überschlagsmäßig sehen wir schon, dass wir es nicht mit einem linearen Anstieg des Gewichtes zu tun haben. Wenn wir einen linearen Anstieg hätten, dann würde ein Hühnchen, dass am Tag 1 ca. 48g wiegt, nach 36 Tagen ca. 1728g wiegen. Das ist hier eindeutig nicht der Fall. Wir haben vermutlich einen nicht-linearen Zusammenhang.\n\n\n\n\nTabelle 62.1— Auszug aus Hühnchendatensatz.\n\n\n\n\n\n\nage\nweight\n\n\n\n\n1\n48\n\n\n1\n46\n\n\n1\n44\n\n\n…\n…\n\n\n36\n2286\n\n\n36\n2278\n\n\n36\n2309\n\n\n\n\n\n\n\n\nSchauen wir uns die Daten dann gleich einmal in einer Visualisierung mit ggplot() an um besser zu verstehen wie die Zusammenhänge in dem Datensatz sind.\nNeben dem Hünchendatensatz haben wir noch einen Datenstatz zu dem Wachstum von Wasserlinsen. Wir haben einmal händisch die Dichte bestimmt duckweeds_density und einmal mit einem Sensor gemessen. Dabei sind die Einheiten der Sensorwerte erstmal egal, wir wollen aber später eben nur mit einem Sensor messen und dann auf den Wasserlinsengehalt zurückschließen. Wir haben hier eher eine Sätigungskurve vorliegen, denn die Dichte der Wasserlinsen ist ja von der Oberfläche begrenzt. Auch können sich die Wasserlinsen nicht beliebig teilen, es gibt ja nur eine begrenzte Anzahl an Ressourcen.\n\n\nR Code [zeigen / verbergen]\nduckweeds_tbl &lt;- read_excel(\"data/duckweeds_density.xlsx\")\n\n\nIn der Tabelle 62.2 siehst du dann einmal einen Auszug aus den Daten zu den Wasserlinsen. Es ist ein sehr einfacher Datensatz mit nur zwei Spalten. Wie du siehst, scheint sich das bei der nicht linearen Regression durchzuziehen. Es gehen auch komplexere Modelle, aber dann kann ich die Ergebnisse schlechter visualisieren.\n\n\n\n\nTabelle 62.2— Auszug aus Wasserlinsendatensatz.\n\n\n\n\n\n\nduckweeds_density\nsensor\n\n\n\n\n4.8\n0.4303\n\n\n4.8\n0.4763\n\n\n4.8\n0.4954\n\n\n…\n…\n\n\n53.2\n2.1187\n\n\n53.2\n2.1296\n\n\n53.2\n2.1246\n\n\n\n\n\n\n\n\nAuch die Wasserlinsendaten wollen wir uns erstmal in einer Abbildung anschauen und dann sehen, ob wir eine Kurve durch die Punkte gelegt kriegen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#visualisierung",
    "href": "stat-modeling-non-linear.html#visualisierung",
    "title": "62  Nicht lineare Regression",
    "section": "62.3 Visualisierung",
    "text": "62.3 Visualisierung\nIn Abbildung 62.9 (a) sehen wir die Visualisierung der Hühnchengewichte nach Alter in Tagen. Zum einen sehen wir wie das Körpergewicht exponentiell ansteigt. Zum anderen sehen wir in Abbildung 62.9 (b), dass auch eine \\(log\\)-transformiertes \\(y\\) nicht zu einem linearen Zusammenhang führt. Der Zusammenhang zwischen dem Körpergewicht und der Lebensalter bleibt nicht-linear.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Ohne transformierten \\(y\\).\n\n\n\n\n\n\n\n\n\n\n\n(b) Mit \\(log\\)-transformierten \\(y\\).\n\n\n\n\n\n\n\nAbbildung 62.9— Visualisierung der Hühnchengewichte nach Alter in Tagen. Auch mit \\(log\\)-transformierten Körpergewicht liegt immer noch kein linearer Zusammenhang zwischen dem Lebensalter und dem Körpergewicht vor.\n\n\n\n\nDeshalb wollen wir den Zusammenhang zwischen dem Körpergewicht der Hühnchen und dem Lebensalter einmal mit einer nicht-linearen Regression modellieren. Wir sind also nicht so sehr an \\(p\\)-Werten interessiert, wir sehen ja, dass die gerade ansteigt, sondern wollen wissen wie die Koeffizienten einer möglichen exponentiellen Gleichung aussehen.\nFür die Visualisierung der Wasserlinsendaten in der Abbildung 62.10 verzichte ich einmal auf die logarithmische Darstellung. Wir wollen hier dann eine Kurve durch die Punkte legen so wie die Daten sind. Auffällig ist erstmal, dass wir sehr viel weniger Beobachtungen und auch Dichtemesspunkte auf der \\(x\\)-Achse haben. Wir haben dann zu den jeweiligen Wasserlinsendichten dann drei Sensormessungen. Das könnte noch etwas herausfordernd bei der Modellierung werden.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Gemessene Dichte der Wasserlinsen\", y = \"Sensorwert\")\n\n\n\n\n\n\n\n\nAbbildung 62.10— Visualisierung der Sensorwerte nach Wasserlinsendichte. Pro Dichtewert liegen drei Sensormessungen vor.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#nonlinear-least-squares-mit-nls",
    "href": "stat-modeling-non-linear.html#nonlinear-least-squares-mit-nls",
    "title": "62  Nicht lineare Regression",
    "section": "62.4 Nonlinear least-squares mit nls()",
    "text": "62.4 Nonlinear least-squares mit nls()\nZum nicht-linearen Modellieren nutzen wir die Funktion nls() (eng. nonlinear least-squares). Die Funktion nls() ist das nicht-lineare Äquivalent zu der linearen Funktion lm(). Nur müssen wir mit der nls() Funktion etwas anders umgehen. Zum einen müssen wir die formula() anders definieren. Der große Vorteil von nls() ist, dass wir hier auch die Koeffizienten unser Geradengleichung wiederkriegen. In den anderen Möglichkeiten kriegen wir dann teilweise nicht die Informationen zu einer Kurve wieder. Wir haben dann zwar ein wunderbares Modell, können das Modell aber nicht einfach als eine mathematische Gleichung aufschreiben. Daher hier nls() etwas ausführlicher, da wir dann mit nls() schon die Sachen auch erhalten, die wir meist wollen.\n\n62.4.1 … von Wachstum\nIn unserem Hühnchenbeispiel nehmen ein exponentielles Wachstum an. Daher brauchen wir einen geschätzten Koeffizienten für den Exponenten des Alters sowie einen Intercept. Wir gehen nicht davon aus, dass die Hühnchen mit einem Gewicht von 0g auf die Welt bzw. in die Mastanlage kommen. Unsere Formel sehe dann wie folgt aus.\n\\[\nweight \\sim \\beta_0 + age^{\\beta_1}\n\\]\nDa wir in R keine \\(\\beta\\)’s schreiben können nutzen wir die Buchstaben b0 für \\(\\beta_0\\) und b1 für \\(\\beta_1\\). Im Prinzip könnten wir auch andere Buchstaben nehmen, aber so bleiben wir etwas konsistenter zu der linearen Regression. Somit sieht die Gleichung dann in R wie folgt aus.\n\\[\nweight \\sim b_0 + age^{b_1}\n\\]\nWichtig hier, wir müssen R noch mitteilen, dass wir age hoch b1 rechnen wollen. Um das auch wirklich so zu erhalten, zwingen wir R mit der Funktion I() auch wirklich einen Exponenten zu berechnen. Wenn wir nicht das I() nutzen, dann kann es sein, dass wir aus versehen eine Schreibweise für eine Abkürzung in der formula Umgebung nutzen.\nIm Weiteren sucht die Funktion iterativ die besten Werte für b0 und b1. Deshalb müssen wir der Funktion nls() Startwerte mitgeben, die in etwa passen könnten. Hier tippe ich mal auf ein b0 = 1 und ein b1 = 1. Wenn wir einen Fehler wiedergegeben bekommen, dann können wir auch noch an den Werten drehen.\n\n\nR Code [zeigen / verbergen]\nfit &lt;- nls(weight ~ b0 + I(age^b1), data = chicken_tbl, \n           start = c(b0 = 1, b1 = 1))\n\n\n\n\n\n\n\n\nBessere Startwerte für nls()\n\n\n\nLeider müssen wir in nls() die Startwerte selber raten. Das kannst du natürlich aus der Abbildung der Daten abschätzen, aber ich muss sagen, dass mir das immer sehr schwer fällt. Deshalb gibt es da einen Trick. Wir rechnen ein lineares Modell und zwar logarithmieren wir beide Seiten der Gleichung. Dann können wir die Koeffizienten aus dem Modell als Startwerte nehmen.\n\n\nR Code [zeigen / verbergen]\nlm(log(weight) ~ log(age), chicken_tbl)\n\n\n\nCall:\nlm(formula = log(weight) ~ log(age), data = chicken_tbl)\n\nCoefficients:\n(Intercept)     log(age)  \n      3.475        1.085  \n\n\nManchmal musst du auch nur die linke Seite logarithmieren.\n\n\nR Code [zeigen / verbergen]\nlm(log(weight) ~ age, chicken_tbl)\n\n\nEs hängt dann immer etwas vom Modell ab und wie die Werte dann anschließend in nls() konvergieren. Ich habe eigentlich immer mit einem der beiden Methoden Startwerte gefunden. Wir nehmen hier mal die Startwerte aus dem ersten Ansatz mit der doppelten Logarithmierung.\nWir erhalten hier für den Intercept den Wert 3.475 und für die Steigung den Wert 1.085. Da in meiner obigen Gleichung die Steigung b1 ist und der Intercept dann b0 setzen wir die Zahlen entsprechend ein. Für den Intercept müssen wir dann noch den Exponenten wählen.\n\n\nR Code [zeigen / verbergen]\nnls(weight ~ b0 + I(age^b1), data = chicken_tbl, \n    start = c(b0 = exp(3.475), b1 = 1.085))\n\n\nNonlinear regression model\n  model: weight ~ b0 + I(age^b1)\n   data: chicken_tbl\n    b0     b1 \n92.198  2.178 \n residual sum-of-squares: 4725115\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.175e-06\n\n\nJetzt sollten wir keine Fehlermeldung erhalten haben, dass unser Modell nicht konvergiert ist oder anderweitig kein Optimum gefunden hat.\nDas R Paket {nls.multstart} versucht das Problem der Startwerte nochmal algorithmisch zu lösen. Wenn du also keine guten Startwerte mit den Trick über lm() findest, dann ist das R Paket hier nochmal ein guter Startpunkt. Es geht auch komplexer wie das Tutorium unter Nonlinear Modelling using nls, nlme and brms nochmal zeigt.\n\n\nR Code [zeigen / verbergen]\nnls_multstart(weight ~ b0 + I(age^b1), data = chicken_tbl, \n              lower = c(b0 = 0, b1 = 0),\n              upper = c(b0 = Inf, b1 = Inf),\n              start_lower = c(b0 = 0, b1 = 0),\n              start_upper = c(b0 = 500, b1 = 5),\n              iter = 500)\n\n\nNonlinear regression model\n  model: weight ~ b0 + I(age^b1)\n   data: data\n    b0     b1 \n92.198  2.178 \n residual sum-of-squares: 4725115\n\nNumber of iterations to convergence: 6 \nAchieved convergence tolerance: 1.49e-08\n\n\nNatürlich kommt hier das Gleiche raus, aber manchmal findet man dann wirklich nicht die passenden Startwerte. Die Funktion macht ja nichts anderes als der ursprünglichen nls() Funktion etwas unter die Arme zugreifen.\n\n\nWir nutzen wieder die Funktion model_parameters() aus dem R Paket {parameters} um uns eine aufgeräumte Ausgabe wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nfit |&gt; \n  model_parameters() |&gt; \n  select(Parameter, Coefficient)\n\n\n# Fixed Effects\n\nParameter | Coefficient\n-----------------------\nb0        |       92.20\nb1        |        2.18\n\n\nDie \\(p\\)-Werte interessieren uns nicht weiter. Wir sehen ja, dass wir einen Effekt von dem Alter auf das Körpergewicht haben. Das überrascht auch nicht weiter. Wir wollen ja die Koeffizienten \\(\\beta_0\\) und \\(\\beta_1\\) um die Gleichung zu vervollständigen. Mit dem Ergebnis aus der Funktion nls() können wir jetzt wie folgt schreiben.\n\\[\nweight \\sim 92.20 + age^{2.18}\n\\]\nDamit haben wir dann auch unsere nicht-lineare Regressionsgleichung erhalten. Passt den die Gleichung auch zu unseren Daten? Das können wir einfach überprüfen. Dafür müssen wir nur in die Funktion predict() unser Objekt des Fits unseres nicht-linearen Modells fit stecken und erhalten die vorhergesagten Werte für jedes \\(x\\) in unserem Datensatz. Oder etwas kürzer, wir erhalten die “Gerade” der Funktion mit den Koeffizienten aus dem nls() Modell wieder. In Abbildung 62.11 sehen wir die gefittete Gerade.\n\n\nR Code [zeigen / verbergen]\nggplot(chicken_tbl, aes(age, weight)) +\n  geom_line(aes(y = predict(fit)), size = 1, color = \"#CC79A7\") +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 62.11— Visualisierung der Hühnchengewichte nach Alter in Tagen mit der geschätzen nicht-linearen Regressionsgleichung.\n\n\n\n\n\nWie wir erkennen können sieht die Modellierung einigermaßen gut aus. Wir haben zwar einige leichte Abweichungen von den Beobachtungen zu der geschätzten Geraden, aber im Prinzip könnten wir mit der Modellierung leben. Wir hätten jetzt also eine nicht-lineare Gleichung die den Zusammenhang zwischen Körpergewicht und Lebensalter von Hühnchen beschreibt. Die Verwendung von nest() und map() ist schon erweiterte Programmierung in R. Du findest hier mehr über broom and dplyr und die Anwendung auf mehrere Datensätze.\nNun könnte man argumentieren, dass wir vielleicht unterschiedliche Abschnitte des Wachstums vorliegen haben. Also werden wir einmal das Alter in Tagen in vier gleich große Teile mit der Funktion cut_number() schneiden. Beachte bitte, dass in jeder Gruppe gleich viele Beobachtungen sind. Du kannst sonst händisch über case_when() innerhalb von mutate() dir eigene Gruppen bauen. Wir nutzen auch die Funktion map() um über alle Subgruppen des Datensatzes dann ein nls() laufen zu lassen.\n\n\nR Code [zeigen / verbergen]\nnls_tbl &lt;- chicken_tbl |&gt; \n  mutate(grp = as_factor(cut_number(age, 4))) |&gt; \n  group_by(grp) |&gt; \n  nest() |&gt; \n  mutate(nls_fit = map(data, ~nls(weight ~ b0 + I(age^b1), data = .x, \n                                  start = c(b0 = 1, b1 = 2))),\n         pred = map(nls_fit, ~predict(.x))) \n\n\nUm den Codeblock oben kurz zu erklären. Wir rechnen vier nicht-lineare Regressionen auf den vier Altersgruppen. Dann müssen wir uns noch die vorhergesagten Werte wiedergeben lassen damit wir die gefittete Gerade zeichnen können. Wir nutzen dazu die Funktion unnest() um die Daten zusammen mit den vorhergesagten Werten zu erhalten.\n\n\nR Code [zeigen / verbergen]\nnls_pred_tbl &lt;- nls_tbl |&gt; \n  unnest(c(data, pred))\n\n\nIn Abbildung 62.12 sehen wir die vier einzelnen Geraden für die vier Altersgruppen. Wir sind visuell besser als über alle Altersgruppen hinweg. Das ist doch mal ein schönes Ergebnis.\n\n\n\n\n\n\n\n\nAbbildung 62.12— Visualisierung der Hühnchengewichte nach Alter in Tagen mit der geschätzen nicht-linearen Regressionsgleichung aufgeteilt nach vier Altersgruppen.\n\n\n\n\n\nWir können uns jetzt noch die b0 und b1 für jede der vier Altergruppen wiedergeben lassen. Wir räumen etwas auf und geben über select() nur die Spalten wieder, die wir auch brauchen und uns interessieren.\n\n\nR Code [zeigen / verbergen]\nnls_tbl |&gt; \n  mutate(tidied = map(nls_fit, tidy)) |&gt; \n  unnest(tidied) |&gt; \n  select(grp, term, estimate) \n\n\n# A tibble: 8 × 3\n# Groups:   grp [4]\n  grp     term  estimate\n  &lt;fct&gt;   &lt;chr&gt;    &lt;dbl&gt;\n1 [1,2]   b0       44.4 \n2 [1,2]   b1        4.21\n3 (2,8]   b0       60.1 \n4 (2,8]   b1        2.42\n5 (8,25]  b0      128.  \n6 (8,25]  b1        2.18\n7 (25,36] b0      330.  \n8 (25,36] b1        2.14\n\n\nWas sehen wir? Wir erhalten insgesamt acht Koeffizienten und können darüber dann unsere vier exponentiellen Gleichungen für unsere Altergruppen erstellen. Wir sehen, dass besonders in der ersten Gruppe des Alters von 1 bis 2 Tagen wir den Intercept überschätzen und den Exponenten unterschätzen. In den anderen Altersgruppen passt dann der Exponent wieder zu unserem ursprünglichen Modell über alle Altersgruppen.\n\\[\nweight_{[1-2]} \\sim 44.4 + age^{4.21}\n\\]\n\\[\nweight_{(2-8]} \\sim 60.1 + age^{2.42}\n\\]\n\\[\nweight_{(8-25]} \\sim 128.0 + age^{2.18}\n\\]\n\\[\nweight_{(25-36]} \\sim 330.0 + age^{2.14}\n\\]\nJe nachdem wie zufrieden wir jetzt mit den Ergebnissen der Modellierung sind, könnten wir auch andere Altersgruppen noch mit einfügen. Wir belassen es bei dieser Modellierung und schauen uns nochmal die andere Richtung an.\n\n\n62.4.2 … von Sättigung\nSchauen wir uns jetzt einmal ein Beispiel der Sättigung an. Hier nehmen wir dann eine Power-Funktion in der Form \\(y = a + x^b\\). Wir könnten noch eine Konstante \\(c\\) als Multiplikator einfügen, wir schauen jetzt aber mal, ob unsere einfache Parametrisierung jetzt funktioniert. Prinzipiell sehen ja unsere Punkte wie eine Power-Funktion aus. Daher bauen wir uns einmal die Fomel in nls() und lassen uns die Koeffizienten \\(a\\) und \\(b\\) wiedergeben. Dann schauen wir, ob die Koeffizienten Sinn machen und die Punkte auch gut beschreiben.\n\n\nR Code [zeigen / verbergen]\nduckweeds_nls_fit &lt;- nls(sensor ~ a + I(duckweeds_density^b), data = duckweeds_tbl, \n                         start = c(a = 0, b = 0))\nduckweeds_nls_fit \n\n\nNonlinear regression model\n  model: sensor ~ a + I(duckweeds_density^b)\n   data: duckweeds_tbl\n      a       b \n-1.1468  0.2975 \n residual sum-of-squares: 0.08168\n\nNumber of iterations to convergence: 5 \nAchieved convergence tolerance: 1.432e-06\n\n\nSchauen wir uns einmal das Bestimmtheitsmaß \\(R^2\\) für die Anpassung an. Das ist ja immer unser erstes abstraktes Maß für die Modellgüte und wie gut die Kurve durch die Punkte gelaufen ist. Das sieht doch schon sehr gut aus. Wir wollen den Wert aber dann noch gleich einmal visuell überprüfen.\n\n\nR Code [zeigen / verbergen]\nduckweeds_nls_fit |&gt; r2()\n\n\n  R2: 0.986\n\n\nDann können wir auch schon die mathematische Gleichung aufschreiben. Wir haben einen negativen \\(y\\)-Achsenabschnitt \\(a\\) sowie eine Power kleiner als 1. Damit sollte unsere Kurve mit steigenden \\(x\\)-Werten abflachen. Ich kann mir immer nicht vorstellen, wie so eine Funktion aussehen würde, dafür fehlt mir die mathematische Phantasie.\n\\[\nsensor = -1.1468 + duckweeds\\_density^{0.2975}\n\\]\nDann wollen wir einmal die Funktion visualisieren. Wir haben zwei Möglichkeiten. Entweder bauen wir uns die mathematische Funktion in R nach und plotten dann die mathematische Funktion mit geom_function() oder wir nutzen nur den Fit duckweeds_nls_fit direkt in ggplot(). Erstes erlaubt nochmal sicherzugehen, dass wir auch die mathematische Funktion richtig aufgeschrieben haben. Wenn du die nicht brauchst, dann ist die zweite Variante natürlich weit effizienter.\n\nMit geom_function()Mit geom_line() und predict()\n\n\nJetzt nehmen wir einmal unsere Koeffizienten aus dem nls()-Modell und bauen uns eine Funktion nach. Das ist im Prinzip die mathematische Formel nur in der Schreibweise in R.\n\n\nR Code [zeigen / verbergen]\nduckweed_func &lt;- \\(x){-1.1468 + x^{0.2975}} \n\n\nDann können wir auch schon die Kurve durch die Punkte in der folgenden Abbildung legen. Da wir hier eine Funktion vorliegen haben, ist der Verlauf auch sehr schön glatt. Wir sehen aber auch, dass die Funktion sehr schön passt. Die Kurve läuft gut durch die Punkte. Etwas was wir auch schon von dem \\(R^2\\) erwartet hatten.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_function(fun = duckweed_func, color = \"#CC79A7\") +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Gemessene Dichte der Wasserlinsen\", y = \"Sensorwert\")\n\n\n\n\n\n\n\n\nAbbildung 62.13— Angepasste Kurve aus der Funktion nls() dargestellt mit der Funktion geom_function().\n\n\n\n\n\n\n\nSchneller geht es in der Funktion geom_line() und predict(), wo wir dann die Anpassung unseres Modells direkt als \\(y\\)-Werte übergeben. Da wir hier jetzt nur die \\(x\\)-Werte nutzen, die wir auch in den Daten vorliegen haben, wirkt die Kurve bei so wenigen Messpunkten auf der \\(x\\)-Achse etwas stufig. Aber auch hier sehen wir, dass die Kurve gut durch unsere Punkte läuft. Diese Variante ist die etwas schnellere, wenn du nicht an der mathematischen Formulierung interessiert bist.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_line(aes(y = predict(duckweeds_nls_fit)), size = 1, color = \"#0072B2\") +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Gemessene Dichte der Wasserlinsen\", y = \"Sensorwert\")\n\n\n\n\n\n\n\n\nAbbildung 62.14— Angepasste Kurve aus der Funktion nls() dargestellt mit der Funktion geom_line() und predict().\n\n\n\n\n\n\n\n\nJetzt bietet es sich nochmal an die Vorhersageintervalle oder Prädiktionsintervalle (eng. prediction interval) der Abbildung hinzuzufügen. Neben den Vorhersageintervallen könntne wir auch die 95% Konfidenzintervalle (eng. confidence interval) hinzufügen. Hier müssen wir gleich entscheiden, was wir eigentlich zeigen wollen. Wir müssen also zwischen den beiden Intervallen unterscheiden. Vorhersageintervalle machen eine Aussage zu der Genauigkeit von zukünftigen Beobachtungen wohingegen die die Konfidenzintervalle eine Aussage über die Koeffizienten des Modells treffen. Mehr dazu gibt es auch hier Stack Exchange unter Prediction interval vs. confidence interval in linear regression analysis. Konfidenzintervalle geben dir also die Bandbreite wieder in der die Gerade verläuft. Dafür nutzen die Konfidenzintervalle die Daten und geben dir ein Intervall an, in dem die Gerade durch die Koeffizienten des Modells mit 95% Sicherheit verläuft. Das Vorhersageintervall gibt dir an mit welchen Bereich zukünftige Beobachtung mit 95% Sicherheit fallen werden. Das Vorhersageintervall ist breiter als das Konfidenzintervall und nicht jede Methode liefert auch beide Intervalle.\nEs ist uns möglich über Bootstrap, also einer Simulation aus unseren Daten, ein Vorhersageintervall sowie ein Konfidenzintervall zu generieren. Zu dem Bootstrapverfahren kannst du in den Klassifikationskapiteln mehr lesen. Ich nutze hier 500 Simulationen um mir die Intervalle ausgeben zu lassen. Bei einer echten Analyse würde ich die Anzahl auf 1000 bis 2000 setzen. Wir brauchen also als erstes unser Bootstrapobjekt mit dem wir dann in den Tabs weitermachen.\n\n\nR Code [zeigen / verbergen]\nnls_boot_obj &lt;- nlsBoot(duckweeds_nls_fit, niter = 500)\n\n\nIch habe jetzt das Prädiktionsintervall und das Konfidenzintervall jeweils in einem der Tabs berechnet. Wenn du deine Daten auswertest musst du dich dann für ein Intervall entscheiden. Meistens nutzen wir das Konfidenzintervall, da die Interpretation und die Darstellung im Allgemeinen bekannter ist.\n\nVorhersageintervall (eng. prediction interval)Konfidenzintervall (eng. confidence interval)\n\n\nUm das Vorhersageintervall zu erstellen nutzen wir die Funktion nlsBootPredict() und übergeben als neue Daten unseren Datensatz. Dann müssen wir natürlich noch als Option interval = \"prediction\" wählen um das Vorhersageintervall wiedergegeben zu bekommen. Ich muss dann noch etwas aufräumen und auch die \\(x\\)-Werte wieder ergänzen damit wir gleich alles in ggplot() darstellen können. Auch nerven mich die doppelten Werte, die brauche ich nicht für die Darstellung und entferne sie über distinct().\n\n\nR Code [zeigen / verbergen]\npred_plim_tbl &lt;- nlsBootPredict(nls_boot_obj, newdata = duckweeds_tbl, interval = \"prediction\") |&gt; \n  as_tibble() |&gt; \n  clean_names() |&gt; \n  mutate(duckweeds_density = duckweeds_tbl$duckweeds_density) |&gt; \n  distinct(duckweeds_density, .keep_all = TRUE)\npred_plim_tbl\n\n\n# A tibble: 6 × 4\n  median x2_5_percent x97_5_percent duckweeds_density\n   &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n1  0.460        0.262         0.578               4.8\n2  1.08         0.860         1.19               14.5\n3  1.44         1.24          1.54               24.2\n4  1.71         1.50          1.82               33.9\n5  1.93         1.73          2.05               43.5\n6  2.12         1.90          2.23               53.2\n\n\nAus der mittleren Abweichung des Medians zu der unteren 2.5% Grenze x2_5_percent sowie zu der oberen 97.5% Grenze x97_5_percent lässt sich leicht noch eine Konstante \\(\\phi\\) errechnen, die wir dann zu unserer mathematischen Formel ergänzen können. Dann hätten wir auch die mathematische Formel für die obere und untere Kurve des Vorhersageintervalls. Im Prinzip ist das Vorhersageintervall ja nur eine verschobene Kurve der ursprünglichen Geradengleichung. Wir subtrahieren und addieren also unser \\(\\phi\\) jeweils zu dem \\(y\\)-Achsenabschnitt von \\(-1.1468\\) aus dem nls()-Modell.\n\n\nR Code [zeigen / verbergen]\nwith(pred_plim_tbl, x2_5_percent - median) |&gt; mean()\n\n\n[1] -0.2095557\n\n\nR Code [zeigen / verbergen]\nwith(pred_plim_tbl, x97_5_percent - median) |&gt; mean()\n\n\n[1] 0.1108667\n\n\nDamit hätten wir dann für die 2.5% und 97.% Grenzen des Vorhersageintervalls folgende mathematische Formel. Ich ersetze hier einmal \\(duckweeds\\_density\\) durch \\(x\\) um die Formel etwas aufzuräumen und zu kürzen.\n\\[\n[-1.358 + x^{0.298}; \\; -1.031 + x^{0.298}]\n\\]\nWir machen es uns etwas einfacher und nutzen hier dann die Funktion geom_ribbon() um die Fläche des Vorhersageintervalls. Wir nutzen hier also nicht die Informationen aus unserem nls()-Modell direkt sondern erschaffen uns die Informationen nochmal über eine Bootstrapsimulation. Es ist einfach noch ein Extraschritt, wenn du eben noch ein Intervall haben willst. Nicht immer ist es notwendig und die Breite des Vorhersageintervalls hängt auch maßgeblich von der Anzahl an Beobachtungen ab.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_line(data = pred_plim_tbl, aes(y = median), color = \"#CC79A7\") +\n  geom_ribbon(data = pred_plim_tbl, fill = \"#CC79A7\", alpha = 0.3,\n              aes(x = duckweeds_density, ymin = x2_5_percent, ymax = x97_5_percent), inherit.aes = FALSE) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Gemessene Dichte der Wasserlinsen\", y = \"Sensorwert\")\n\n\n\n\n\n\n\n\nAbbildung 62.15— Angepasste Kurve aus der Funktion nls() zusammen mit dem Vorhersageintervall.\n\n\n\n\n\n\n\nUm das Konfidenzintervall zu erstellen nutzen wir ebenfalls die Funktion nlsBootPredict() und übergeben als neue Daten unseren Datensatz. Dann müssen wir natürlich noch als Option interval = \"confidence\" auswählen um das Konfidenzintervall wiedergegeben zu bekommen. Ich muss dann auch hier aufräumen und die \\(x\\)-Werte wieder ergänzen damit wir gleich alles in ggplot() darstellen können. Auch nerven mich die doppelten Werte, die brauche ich nicht für die Darstellung und entferne sie über distinct().\n\n\nR Code [zeigen / verbergen]\npred_clim_tbl &lt;- nlsBootPredict(nls_boot_obj, newdata = duckweeds_tbl, interval = \"confidence\") |&gt; \n  as_tibble() |&gt; \n  clean_names() |&gt; \n  mutate(duckweeds_density = duckweeds_tbl$duckweeds_density) |&gt; \n  distinct(duckweeds_density, .keep_all = TRUE)\npred_clim_tbl \n\n\n# A tibble: 6 × 4\n  median x2_5_percent x97_5_percent duckweeds_density\n   &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n1  0.452        0.388         0.506               4.8\n2  1.07         1.03          1.10               14.5\n3  1.43         1.40          1.46               24.2\n4  1.71         1.67          1.74               33.9\n5  1.93         1.88          1.96               43.5\n6  2.12         2.06          2.16               53.2\n\n\nAus der mittleren Abweichung des Medians zu der unteren 2.5% Grenze x2_5_percent sowie zu der oberen 97.5% Grenze x97_5_percent lässt sich leicht noch eine Konstante \\(\\phi\\) errechnen, die wir dann zu unserer mathematischen Formel ergänzen können. Dann hätten wir auch die mathematische Formel für die obere und untere Kurve des Konfidenzintervalls. Im Prinzip ist das Konfidenzintervall ja nur eine verschobene Kurve der ursprünglichen Geradengleichung. Wir subtrahieren und addieren also unser \\(\\phi\\) jeweils zu dem \\(y\\)-Achsenabschnitt von \\(-1.1468\\) aus dem nls()-Modell.\n\n\nR Code [zeigen / verbergen]\nwith(pred_clim_tbl, x2_5_percent - median) |&gt; mean()\n\n\n[1] -0.04642345\n\n\nR Code [zeigen / verbergen]\nwith(pred_clim_tbl, x97_5_percent - median) |&gt; mean()\n\n\n[1] 0.03770604\n\n\nDamit hätten wir dann für die 2.5% und 97.% Grenzen des Konfidenzintervalls folgende mathematische Formel. Ich ersetze hier einmal \\(duckweeds\\_density\\) durch \\(x\\) um die Formel etwas aufzuräumen und zu kürzen.\n\\[\n[-1.1978 + x^{0.298}; \\; -1.1098 + x^{0.298}]\n\\]\nWir machen es uns einfacher und nutzen hier dann die Funktion geom_ribbon() um die Fläche des Konfidenzintervalls. Wir nutzen hier also nicht die Informationen aus unserem nls()-Modell direkt sondern erschaffen uns die Informationen nochmal über eine Bootstrapsimulation. Es ist einfach noch ein Extraschritt, wenn du eben noch ein Intervall haben willst. Nicht immer ist es notwendig und die Breite des Konfidenzintervalls hängt auch maßgeblich von der Anzahl an Beobachtungen ab.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_line(data = pred_clim_tbl, aes(y = median), color = \"#0072B2\") +\n  geom_ribbon(data = pred_clim_tbl, fill = \"#0072B2\", alpha = 0.3,\n              aes(x = duckweeds_density, ymin = x2_5_percent, ymax = x97_5_percent), inherit.aes = FALSE) +\n  geom_point() +\n  theme_minimal() +\n  labs(x = \"Gemessene Dichte der Wasserlinsen\", y = \"Sensorwert\")\n\n\n\n\n\n\n\n\nAbbildung 62.16— Angepasste Kurve aus der Funktion nls() zusammen mit dem Konfidenzintervall.\n\n\n\n\n\n\n\n\n\n\n62.4.3 … von Zerfall\nNachdem wir uns einem exponentiellen Anstieg und die Sättigung angeschaut haben, wollen weit uns nun einmal mit einem exponentiellen Zerfall beschäftigen. Wir betrachten einen exponentziellen Zerfall einer Blattläuse Population. Wir wollen die folgende Gleichung lösen und die Werte für die Konstante \\(a\\) und den Exponenten \\(\\beta_1\\) schätzen. Nun haben wir diesmal keinen Intercept vorliegen.\n\\[\ncount \\sim a \\cdot week^{\\beta_1}\n\\]\nDie Daten sind angelegt an ein Experiment zu Blattlauskontrolle. Wir haben ein neues Biopestizid welchen wir auf die Blattläuse auf Rosen sprühen. Wir zählen dann automatisiert über eine Kamera und Bilderkennung wie viele Blattläuse sich nach den Wochen des wiederholten Sprühens noch auf den Rosen befinden. Wir erhalten damit folgende Daten im Objekt exp_tbl.\n\n\nR Code [zeigen / verbergen]\nset.seed(20221018)\nexp_tbl &lt;- tibble(count = c(rnorm(10, mean = 17906, sd = 17906/4), \n                            rnorm(10, mean =  5303, sd =  5303/4),\n                            rnorm(10, mean =  2700, sd =  2700/4),\n                            rnorm(10, mean =  1696, sd =  1696/4), \n                            rnorm(10, mean =   947, sd =   947/4), \n                            rnorm(10, mean =   362, sd =   362/4)), \n                  weeks = rep(1:6, each = 10)) \n\n\nWir müssen ja wieder die Startwerte in der Funktion nls() angeben. Meistens raten wir diese oder schauen auf die Daten um zu sehen wo diese Werte in etwa liegen könnten. Dann kann die Funktion nls() diese Startwerte dann optimieren. Es gibt aber noch einen anderen Trick. Wir rechnen eine lineare Regression über die \\(log\\)-transformierten Daten und nehmen dann die Koeffizienten aus dem linearen Modell als Startwerte für unsere nicht-lineare Regression.\n\n\nR Code [zeigen / verbergen]\nlm(log(count) ~ log(weeks), exp_tbl)\n\n\n\nCall:\nlm(formula = log(count) ~ log(weeks), data = exp_tbl)\n\nCoefficients:\n(Intercept)   log(weeks)  \n      9.961       -2.024  \n\n\nAus der linearen Regression erhalten wir einen Intercept von \\(9.961\\) und eine Steigung von \\(-2.025\\). Wir exponieren den Intercept und erhalten den Wert für \\(a\\) mit \\(\\exp(9.961)\\). Für den Exponenten \\(b1\\) tragen wir den Wert \\(-2.025\\) als Startwert ein. Mit diesem Trick erhalten wir etwas bessere Startwerte und müssen nicht so viel rumprobieren.\n\n\nR Code [zeigen / verbergen]\nfit &lt;- nls(count ~ a * I(weeks^b1), data = exp_tbl, \n           start = c(a = exp(9.961), b1 = -2.025))\n\n\nWir können uns noch die Koeffizienten wiedergeben lassen und die Geradengleichung vervollständigen. Wie du siehst sind die Werte natürlich anders als die Startwerte. Wir hätten aber ziemlich lange rumprobieren müssen bis wir nahe genug an die Startwerte gekommen wären damit die Funktion nls() iterativ eine Lösung für die Gleichung findet.\n\n\nR Code [zeigen / verbergen]\nfit |&gt; \n  model_parameters() |&gt; \n  select(Parameter, Coefficient)\n\n\n# Fixed Effects\n\nParameter | Coefficient\n-----------------------\na         |    17812.11\nb1        |       -1.69\n\n\nAbschließend können wir dann die Koeffizienten in die Geradengleichung eintragen.\n\\[\ncount \\sim 17812.11 \\cdot week^{-1.69}\n\\]\nIn Abbildung 62.17 sehen wir die Daten zusammen mit der gefitteten Gerade aus der nicht-linearen Regression. Wir sehen, dass die Gerade ziemlich gut durch die Mitte der jeweiligen Punkte läuft.\n\n\nR Code [zeigen / verbergen]\nggplot(exp_tbl, aes(weeks, count)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(fit)), color = \"#CC79A7\") +\n  scale_x_continuous(breaks = 1:6)\n\n\n\n\n\n\n\n\nAbbildung 62.17— Visualisierung der Sterberate von Blattläusen nach Aufbringen eines Bio-Pestizides mit der nicht-linearen Regressionsgleichung.\n\n\n\n\n\n\n\n62.4.4 … der Michaelis-Menten Gleichung\nIn diesem Abschnitt wollen wir uns mit dem Modellieren einer Sättigungskurve beschäftigen. Daher bietet sich natürlich die Michaelis-Menten-Gleichung an. Die Daten in enzyme.csv geben die Geschwindigkeit \\(v\\) des Enzyms saure Phosphatase (\\(\\mu mol/min\\)) bei verschiedenen Konzentrationen des Substrats Nitrophenolphosphat, [S] (mM), an. Die Daten können mit der Michaelis-Menten-Gleichung modelliert werden und somit kann eine nichtlineare Regression kann verwendet werden, um \\(K_M\\) und \\(v_{max}\\) zu schätzen.\n\n\nR Code [zeigen / verbergen]\nenzyme_tbl &lt;- read_csv2(file.path(\"data/enzyme.csv\")) |&gt; \n  rename(S = concentration, v = rate)\n\n\nIn Tabelle 62.3 sehen wir einen Auszug aus den Enzymedaten. Eigentlich relativ klar. Wir haben eine Konzentration \\(S\\) vorliegen und eine Geschwindigkeit \\(v\\).\n\n\n\n\nTabelle 62.3— Auszug aus Enzymedatensatz.\n\n\n\n\n\n\nS\nv\n\n\n\n\n0\n0.05\n\n\n1\n2.78\n\n\n2\n3.35\n\n\n…\n…\n\n\n48\n11.04\n\n\n49\n9.18\n\n\n50\n11.56\n\n\n\n\n\n\n\n\nSchauen wir uns die Daten einmal in der Abbildung 62.18 an. Wir legen die Konzentration \\(S\\) auf die \\(x\\)-Achse und Geschwindigkeit \\(v\\) auf die \\(y\\)-Achse.\n\n\nR Code [zeigen / verbergen]\nggplot(enzyme_tbl, aes(x = S, y = v)) +\n  theme_minimal() +\n  geom_point() +\n  labs(x = \"[S] / mM\", y = expression(v/\"µmol \" * min^-1))\n\n\n\n\n\n\n\n\nAbbildung 62.18— Visualisierung der Geschwindigkeit \\(v\\) des Enzyms saure Phosphatase bei verschiedenen Konzentrationen des Substrats Nitrophenolphosphat.\n\n\n\n\n\nDie Reaktionsgleichung abgeleitet aus der Michaelis-Menten-Kinetik lässt sich allgemein wie folgt darstellen. Wir haben die Konzentration \\(S\\) und die Geschwindigkeit \\(v\\) gegeben und wollen nun über eine nicht-lineare Regression die Werte für \\(v_{max}\\) und \\(K_M\\) schätzen.\n\\[\nv = \\cfrac{v_{max} \\cdot S}{K_M + S}\n\\]\nDabei gibt \\(v\\) die initiale Reaktionsgeschwindigkeit bei einer bestimmten Substratkonzentration [S] an. Mit \\(v_{max}\\) beschreiben wir die maximale Reaktionsgeschwindigkeit. Eine Kenngröße für eine enzymatische Reaktion ist die Michaeliskonstante \\(K_M\\). Sie hängt von der jeweiligen enzymatischen Reaktion ab. \\(K_M\\) gibt die Substratkonzentration an, bei der die Umsatzgeschwindigkeit halbmaximal ist und somit \\(v = 1/2 \\cdot v_{max}\\) ist. Wir haben dann die Halbsättigung vorliegen.\nBauen wir also die GLeichung in R nach und geben die Startwerte für \\(v_{max}\\) und \\(K_M\\) für die Funktion nls() vor. Die Funktion nls() versucht jetzt die beste Lösung für die beiden Koeffizienten zu finden.\n\n\nR Code [zeigen / verbergen]\nenzyme_fit &lt;- nls(v ~ vmax * S /( KM + S ), data  = enzyme_tbl,\n                  start = c(vmax = 9, KM = 2))\n\n\nWir können uns dann die Koeffizienten ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\nenzyme_fit |&gt; \n  model_parameters() |&gt; \n  select(Parameter, Coefficient)\n\n\n# Fixed Effects\n\nParameter | Coefficient\n-----------------------\nvmax      |       11.85\nKM        |        4.28\n\n\nJetzt müssen wir die Michaelis-Menten-Gleichung nur noch um die Koeffizienten ergänzen.\n\\[\nv = \\cfrac{11.85 \\cdot S}{4.28 + S}\n\\]\nIn der Abbildung 62.19 können wir die gefittete Gerade nochmal überprüfen und schauen ob das Modellieren geklappt hat. Ja, hat es die Gerade läuft direkt mittig durch die Punkte.\n\n\nR Code [zeigen / verbergen]\nggplot(enzyme_tbl, aes(x = S, y = v)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(enzyme_fit)), color = \"#CC79A7\") +\n  labs(x = \"[S] / mM\", y = expression(v/\"µmol \" * min^-1))\n\n\n\n\n\n\n\n\nAbbildung 62.19— Visualisierung der Michaelis-Menten-Kinetik zusammen mit der gefitteten Gerade aus einer nicht-linearen Regression.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#multivariate-fractional-polynomials-mit-mfp",
    "href": "stat-modeling-non-linear.html#multivariate-fractional-polynomials-mit-mfp",
    "title": "62  Nicht lineare Regression",
    "section": "62.5 Multivariate Fractional Polynomials mit {mfp}",
    "text": "62.5 Multivariate Fractional Polynomials mit {mfp}\nManchmal haben wir keine Ahnung, welche mathematische Formel denn überhaupt passen könnte. Ohne eine mathematische Formel können wir dann auch schlecht in nls() Startwerte angeben. Ohne die Angabe von Startwerten für die Formel können wir dann auch nichts rechnen. Die wenigsten Menschen haben eine exponentielle Idee im Kopf, wenn sie eine Kurve sehen. Aus dem Grund wurden die Multivariate Fractional Polynomials (abk. mfp) entwickelt, die dir dann eine Formel wiedergeben. Das Schöne daran ist, dass du einfach nur sagen musst, welche Variable als Polynom in die Formel soll und den Rest macht die Funktion mfp aus dem gleichnamigen R Paket {mfp} dann für sich. Hier sei auch einmal auf das Tutorial Multivariate Fractional Polynomials: Why Isn’t This Used More? verwiesen. Die Entwickler des R Paketes {mfp} haben auch eine eigene Hilfeseite unter Multivariable Fractional Polynomials (MFP) eingerichtet. Wir immer ist das Thema zu groß, daher hier nur die simple Anwendung.\nDer wichtigste Schritt ist einmal die Variable zu bezeichnen, die als Polynom behandelt werden soll. Wir machen das hier mit der Funktion fp(). Wir sagen damit der Funktion mfp(), dass wir bitte die Koeffizienten und eine “Hochzahl” \\(a\\) für das Alter haben wollen. Wir erhalten also die Koeffizienten für die folgende mathematische Formel mit Zahlen wieder.\n\\[\nweight \\sim \\beta_0 + \\beta_1 \\cdot age^{a}\n\\]\nDann rechnen wir also einfach schnelle einmal das Modell.\n\n\nR Code [zeigen / verbergen]\nmfp_fit &lt;- mfp(weight ~ fp(age), data = chicken_tbl)\n\n\nWir können dann auch gleich einmal in die Zusammenfassung reinschauen und sehen, was dort für eine Formel für das Alter age geschätzt wurde.\n\n\nR Code [zeigen / verbergen]\nsummary(mfp_fit) \n\n\n\nCall:\nglm(formula = weight ~ I((age/10)^2), data = chicken_tbl)\n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     66.300      8.229   8.057 1.62e-14 ***\nI((age/10)^2)  188.226      1.520 123.839  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 13642.51)\n\n    Null deviance: 213533638  on 317  degrees of freedom\nResidual deviance:   4311034  on 316  degrees of freedom\nAIC: 3934.1\n\nNumber of Fisher Scoring iterations: 2\n\n\nEs ist auch möglich sich die Formel direkt wiedergeben zu lassen. Hier ist dann wichtig zu verstehen, was wir dort sehen. Die Funktion mfp() testet immer verschiedene ganzzahlige a-Werte für die Potenz. Dann versucht die Funktion mfp() die restlichen Koeffizienten optimal den Daten anzupassen.\n\n\nR Code [zeigen / verbergen]\nmfp_fit$formula\n\n\nweight ~ I((age/10)^2)\n&lt;environment: 0x13f322e60&gt;\n\n\nNun haben wir erstmal die Informationen über das Alter und die Potenz \\(a\\) und wie diese beiden miteinander zusammengehören. Jetzt fehlen aber noch die Koeffizienten für die Steigung und den y-Achsenabschnitt. Die haben wir auch oben in der summary() gesehen, aber wir können uns die Werte auch separat anzeigen lassen.\n\n\nR Code [zeigen / verbergen]\nmfp_fit$coefficients \n\n\nIntercept     age.1 \n 66.30015 188.22589 \n\n\nDann können wir auch einmal die etwas kompliziertere mathematische Gleichung aufschreiben. Da wir an ganzzahlige Potenzen gebunden sind, muss der Rest etwas anderes aussehen. Aber die Formel geht eigentlich noch. Da wir eben auch eine ganzzahlige Potenz haben, können wir auch selber mit einem Taschenrechner rechnen. Das wird ja bei Kommazahlen schon etwas mühseliger.\n\\[\nweight \\sim 66.3 + 188 \\cdot \\left(\\cfrac{age}{10}\\right)^{2}\n\\]\nDann können wir die Funktion auch schon in R übersetzen. Wir machen eigentlich nichts anderes als das wir das \\(age\\) durch durch \\(x\\) ersetzen, was generischer ist. Und wir brauchen diese Art der Darstellung dann auch in ggplot().\n\n\nR Code [zeigen / verbergen]\nage_func &lt;- \\(x) {66.3 + 188 * (x/10)^2}\n\n\nIn der Abbildung 62.20 sehen wir einmal das Ergebnis der Anpassung. Ich habe hier einmal beides gemacht, einmal mit der Funktion geom_function() und einmal mit geom_line() und predict(). So kannst du mal sehen, dass wir hier das gleiche rauskriegen. Die erste Variante ist eben die bessere, wenn du auch die mathematische Gleichung angeben wilst. Dann bist du dir sicher, dass auch die Gleichung zu der angepassten Kurve passt.\n\n\nR Code [zeigen / verbergen]\nggplot(chicken_tbl, aes(age, weight)) +\n  geom_function(fun = age_func, color = \"#CC79A7\", linetype = 'dashed') +\n  geom_point() +\n  theme_minimal()\n\nggplot(chicken_tbl, aes(age, weight)) +\n  geom_line(aes(y = predict(mfp_fit)), size = 1, color = \"#0072B2\") +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) … mit geom_function()\n\n\n\n\n\n\n\n\n\n\n\n(b) … mit geom_line() und predict()\n\n\n\n\n\n\n\nAbbildung 62.20— Visualisierung der Hühnchengewichte nach Alter in Tagen mit der geschätzen nicht-linearen Regressionsgleichung nach der Funktion mfp(). Die geschätzten Kurven sind natürlich in beiden Fälle die gleichen Kurven. Es geht hier um die Form der Umsetzung in {ggplot}.\n\n\n\n\nUnd welche der beiden mathematischen Gleichungen ist denn nun besser? Dafür fitten wir nochmal das nls() Modell von oben und vergleichen das Modell einmal zu dem mfp()-Modell von eben.\n\n\nR Code [zeigen / verbergen]\nnls_fit &lt;- nls(weight ~ b0 + I(age^b1), data = chicken_tbl, \n               start = c(b0 = 1, b1 = 1))\n\n\nIn der Tabelle 62.4 sehen wir die Funktion modelsummary() und den entsprechenden Modellvergleich der beiden Modelle zu Anpassung einer nicht-linearen Regression. Welche der beiden Modelle und damit mathematischen Gleichungen beschreibt unsere Daten besser? Leider ist es so, dass wir aus dem nls()-Modell nicht so viele Informationen erhalten wie es zu wünschen wäre. Wir könnten das AIC als Kriterium nehmen und da gilt, dass ein kleineres AIC besser ist, nehmen wir das mfp()-Modell.\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"nls Modell\" = nls_fit,\n                 \"mfp Modell\" = mfp_fit))\n\n\n\n\nTabelle 62.4— Modellvergleich für das nls() Modell mit dem mfp() Modell. Wir vergleichen hier nur die beiden Modelle, da beide Modelle eine mathematische Gleichung wiedergeben, die wir dann berichten können.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                nls Modell\n                mfp Modell\n              \n        \n        \n        \n                \n                  b0\n                  92.198\n                  \n                \n                \n                  \n                  (8.319)\n                  \n                \n                \n                  b1\n                  2.178\n                  \n                \n                \n                  \n                  (0.002)\n                  \n                \n                \n                  (Intercept)\n                  \n                  66.300\n                \n                \n                  \n                  \n                  (8.229)\n                \n                \n                  I((age/10)^2)\n                  \n                  188.226\n                \n                \n                  \n                  \n                  (1.520)\n                \n                \n                  Num.Obs.\n                  318\n                  318\n                \n                \n                  R2\n                  \n                  0.980\n                \n                \n                  AIC\n                  3963.3\n                  3934.1\n                \n                \n                  BIC\n                  3974.6\n                  3945.4\n                \n                \n                  Log.Lik.\n                  -1978.632\n                  -1964.050\n                \n                \n                  RMSE\n                  \n                  116.43\n                \n                \n                  isConv\n                  TRUE\n                  \n                \n                \n                  finTol\n                  3.25578530276516e-08\n                  \n                \n        \n      \n    \n\n\n\n\n\n\nUnd am Ende nochmal, wie gut war die Anpassung des Modells an die Datenpunkte eigentlich? Hier können wir dann wieder das Bestimmtheitsmaß \\(R^2\\) nutzen. Wie immer siehst du Bestimmtheitsmaß \\(R^2\\) auch in der summary() aber hier dann einmal als direkter Aufruf.\n\n\nR Code [zeigen / verbergen]\nmfp_fit |&gt; r2()\n\n\n  R2: 0.980\n\n\n\n\nR Code [zeigen / verbergen]\nnls_fit |&gt; r2()\n\n\n  R2: 0.978\n\n\nDa sich jetzt die beiden Bestimmtheitsmaße \\(R^2\\) wirklich nicht unterscheiden, ist es wohl eher eine Frage des Geschmacks, welche mathematische Formel besser passt. In unserem Beispiel sind ja auch die eher jüngeren Hühner das Problem und nicht so die etwas älteren Hühner. Aber diese Frage lasse ich dann mal offen, du kannst oben die map() Funktion auch mit mfp() laufen lassen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#generalized-additive-models-gam-mit-mgcv",
    "href": "stat-modeling-non-linear.html#generalized-additive-models-gam-mit-mgcv",
    "title": "62  Nicht lineare Regression",
    "section": "62.6 Generalized Additive Models (GAM) mit {mgcv}",
    "text": "62.6 Generalized Additive Models (GAM) mit {mgcv}\nNeben den Modellen, die uns eine mathematische Funktion wiedergeben, gibt es natürlich noch Modelle, die effizienter und besser sind. Diese Effizienz und bessere Modellanpassung bezahlen wir dann aber mit der schwierigeren Darstellbarkeit als Formel. Wenn du also ein Modell anpassen willst, was sehr gut durch Punkte läuft und dann dieses Modell nutzen willst um zukünftige Werte vorherzusagen, dann kannst du Generalized Additive Models (abk. GAM) nutzen. Du erhälst aber keine Formel wieder sondern das Modell liegt dann als Objekt in R vor. Damit kannst du dann arbeiten und Prognosen rechnen aber keine Formel in deine Abbildung schreiben. Es gibt zu GAM einmal das gute Tutorium Advanced Data Analysis from an Elementary Point of View sowie das R Paket {gratia}, welches bei der Darstellung von einem GAM-Modell hilft. Aber nochmal, wenn du eine Formel in deine Abbildung schreiben willst, dann ist das Generalized Additive Model nicht die Antwort auf deine Frage. Selbst wenn ein GAM das beste Modell sein sollte, was du findest. Die Hilfeseite How to solve common problems with GAMs ist auch ein guter Anlaufpunkt, wenn mal eine GAM_modellierung nicht funktionieren will.\nWenn wir jetzt ein GAM rechnen wollen, dann müssen wir einmal über die Funktion s() dem GAM mitteilen, welcher der variablen als Polynom in das Modell rein soll. Das ist sehr ähnlich dem mfp-Modell und der Funktion fp(). Wie immer kannst du der Funktion s() noch zusätzliche Informationen mitgeben aber das übersteigt diese Einführung hier.\n\n\nR Code [zeigen / verbergen]\ngam_fit &lt;- gam(weight ~ s(age), data = chicken_tbl)\n\n\nUnd dann können wir uns auch schon die Modellgüte des GAM einmal anschauen. Das ist eigentlich das Schöne der Implementierung in dem R Paket {mgvc}, dass wir hier auch alle Helferfunktionen der anderen Pakete nutzen können.\n\n\nR Code [zeigen / verbergen]\ngam_fit |&gt; \n  model_performance()\n\n\n# Indices of model performance\n\nAIC      |     AICc |      BIC |    R2 |    RMSE |   Sigma\n----------------------------------------------------------\n3932.049 | 3932.316 | 3954.467 | 0.980 | 114.984 | 115.891\n\n\nWir sehen auch hier, dass wir ein sehr gutes Modell mit einem Bestimmtheitsmaße \\(R^2\\) von \\(98\\%\\). Wir könnten uns auch die Modellkoeffizienten anschauen, aber leider kriegen wir hier nur die Information, ob der Intercept signifikant unterschiedliche von der Null ist und ob wir einen signifikanten Anstieg haben. Beides ist zwar nett, aber interessiert uns eher nicht in unsere Fragestellungen.\n\n\nR Code [zeigen / verbergen]\ngam_fit |&gt; \n  model_parameters() \n\n\n# Fixed Effects\n\nParameter   | Coefficient |   SE |           95% CI | t(313.04) |      p\n------------------------------------------------------------------------\n(Intercept) |      683.11 | 6.50 | [670.32, 695.89] |    105.11 | &lt; .001\n\n# Smooth Terms\n\nParameter         |       F |   df |      p\n-------------------------------------------\nSmooth term (age) | 3229.85 | 3.96 | &lt; .001\n\n\nDann können wir auch in der Abbildung 62.21 einmal das Modell sehen. Wir sehen, dass wir eine sehr gute Modellanpassung haben. Wir können also das Modell gut nutzen um das Gewicht von zukünftigen Hünchen zu schätzen. Eine mathematische Formel erhalten wir aber nicht.\n\n\nR Code [zeigen / verbergen]\nggplot(chicken_tbl, aes(age, weight)) +\n  geom_line(aes(y = predict(gam_fit)), size = 1, color = \"#CC79A7\") +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 62.21— Visualisierung der Hühnchengewichte nach Alter in Tagen mit der geschätzen nicht-linearen Regressionsgleichung.\n\n\n\n\n\nDann machen wir das auch gleich mal in dem wir uns drei Hühnchen mit einem Alter von 10, 20 und 30 Tagen vorgeben. Wir wollen jetzt das Gewicht der drei Hühnchen vorhersagen.\n\n\nR Code [zeigen / verbergen]\ntest_tbl &lt;- tibble(age = c(10, 20, 30))\n\n\nDafür können wir dann die Funktion predict() nutzen in der wir dann zum einen unser Modell gam_fit eingeben sowie die Testdaten test_tbl mit den drei Altersangaben für die drei neuen Hühnchen. Wir erhalten dann das vorhergesagt Gewicht an den drei Zeitpunkten. Ob das jetzt sinnvoll ist oder nicht, hängt wie immer von der Fragestellung ab. Hier sei es einfach einmal präsentiert.\n\n\nR Code [zeigen / verbergen]\npredict(gam_fit, newdata = test_tbl)\n\n\n        1         2         3 \n 276.0335  826.0534 1783.0346 \n\n\nDamit sind wir schon fast durch mit dem ersten Beispiel und GAM. In {ggplot} musst du aber gar nicht den langen Weg gehen, wenn du nur mit GAM eine Kurve in deine Punkte zeichnen willst. Das geht sehr einfach mit der Funktion stat_smooth(). Du hast dann auch dort die Möglichkeit neben GAM auch andere Arten der Anpassung einer Funktion an deine Daten zu wählen.\nAls zweites Beispiel wollen wir uns nochmal die Wasserlinsen anschauen und sehen, was passiert, wenn wir weniger Messpunkte auf der \\(x\\)-Achse haben als bei unseren Hühnchendaten. Wenn du zu wenige Beobachtungen auf der \\(x\\)-Achse hast, dann kann das GAM-Modell Probleme bekommen eine Anpassung zu rechnen. Hier hat mir dann die Seite How to solve common problems with GAMs sehr geholfen. Ich musste einfach die Anzahl an Dimensionen \\(k\\) für den Glättungsterm auf eine niedrigere Zahl setzen. Wenn du also zu wenige Messwerte hast, dann ist das Setzen von \\(k&lt;5\\) eine guter Startpunkt.\n\n\nR Code [zeigen / verbergen]\nduckweeds_gam_fit &lt;- gam(sensor ~ s(duckweeds_density, k = 3), data = duckweeds_tbl)\n\n\nDann können wir uns auch schon in der Abbildung 62.22 die Anpassung der Kurve aus GAM an die Beobachtungen anschauen. Da die Methode keine mathematische Formel oder entaprechende Koeffizienten wiedergibt, müssen wir hier mit der predict() Funktion arbeiten. Das Ergebnis sieht aber sehr gut aus, wir laufen mit der Kurve sehr gut durch die Beobachtungen.\n\n\nR Code [zeigen / verbergen]\nggplot(duckweeds_tbl, aes(duckweeds_density, sensor)) +\n  geom_point() +\n  geom_line(aes(y = predict(duckweeds_gam_fit)), size = 1, color = \"#CC79A7\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 62.22— Angepasste Kurve aus der Funktion gam().\n\n\n\n\n\nWenn wir GAM nutzen dann können wir uns auf verschiedenen Wegen ein Konfidenzintervall wiedergeben lassen. Ein Vorhersageintervall ist nur mit sehr viel Arbeit und eigenem Programmieren möglich. Mir was das in dem Tutorium Prediction intervals for Generalized Additive Models (GAMs) einfach zu krass. Für mich lohnt es sich nicht auf die Art und Weise ein Vorhersageintervall zu berechnen, da bleibe ich lieber bei den Implementierungen, die es schon gibt. Daher jetzt einmal das Konfidenzintervall aus dem R Paket {ggeffects}, dem R Paket {marginaleffects} sowie dem R Paket {gratia}. Wie immer ist es auch eien Sammlung an Möglichkeiten. Wenn ich entscheiden müsste, dann würde ich das R Paket {marginaleffects} bevorzugen, die Funktionalität ist einfach. Das R Paket {gratia} hat den Vorteil für GAM-Modelle entwickelt zus ein.\n\nMit {marginaleffects}Mit {gratia}Mit {ggeffects}\n\n\nDas R Paket {marginaleffects} erlaubt es ziemlich direkt die vorhergesagten Werte über die Funktion predictions() aus den Daten zu erhalten. Es gibt auch eine Hilfeseite unter GAM – Estimate a Generalized Additive Model. Wir müssen hier noch etwas aufräumen und die doppelten Werte für die Wasserlinsendichte über die Funktion distinct() entfernen. Wir erhalten hier auch etwas mehr Informationen also wir in den anderen Paekten wiedergegeben kriegen.\n\n\nR Code [zeigen / verbergen]\nmarg_pred_tbl &lt;- predictions(duckweeds_gam_fit, newdata = duckweeds_tbl) |&gt; \n  as_tibble() |&gt; \n  select(duckweeds_density, sensor, estimate, std.error, conf.low, conf.high) |&gt; \n  distinct(duckweeds_density, .keep_all = TRUE)\nmarg_pred_tbl \n\n\n# A tibble: 6 × 6\n  duckweeds_density sensor estimate std.error conf.low conf.high\n              &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1               4.8  0.430    0.489    0.0372    0.416     0.562\n2              14.5  0.965    0.994    0.0228    0.949     1.04 \n3              24.2  1.45     1.43     0.0258    1.38      1.48 \n4              33.9  1.72     1.75     0.0257    1.70      1.80 \n5              43.5  1.98     1.95     0.0227    1.91      2.00 \n6              53.2  2.12     2.09     0.0372    2.02      2.16 \n\n\nIm Folgenden werde ich gleich die Ausgabe marg_pred_tbl nutzen um in dem ggplot die Konfidenzintervalle einmal zu visualisieren. Da wir alle Informationen haben, geht das sehr direkt aus der Funktion heraus.\n\n\nDas R Paket {gratia} erlaubt mit der Funktion confint() die Konfidenzintervalle des GAM-Modells zu schätzen. Hier müssen wir dann einiges angeben. Wenn du die Option shift = TRUE vergisst, dann wird nicht der Intercept auf die Konfidenzintervalle addiert und dein Konfidenzintervall liegt dann sauber auf dem Ursprung. Das war super nervig rauszufinden warum das am Anfang so war. Auch heißt es hier mal data statt newdata, aber das war dann schon nicht das Problem mehr. Auch hier schmeiße ich am Ende alle doppelten Wasserlinsendichten aus den Daten mit der Funktion distinct() raus.\n\n\nR Code [zeigen / verbergen]\ngratia_pred_tbl &lt;- confint(duckweeds_gam_fit, parm = \"s(duckweeds_density)\", \n                           shift = TRUE, type = \"confidence\", data = duckweeds_tbl) |&gt; \n  select(duckweeds_density, .estimate, .se, .lower_ci, .upper_ci) |&gt; \n  distinct(duckweeds_density, .keep_all = TRUE)\ngratia_pred_tbl \n\n\n# A tibble: 6 × 5\n  duckweeds_density .estimate    .se .lower_ci .upper_ci\n              &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1               4.8     0.489 0.0372     0.416     0.562\n2              14.5     0.994 0.0228     0.949     1.04 \n3              24.2     1.43  0.0258     1.38      1.48 \n4              33.9     1.75  0.0257     1.70      1.80 \n5              43.5     1.95  0.0227     1.91      2.00 \n6              53.2     2.09  0.0372     2.02      2.16 \n\n\nNeben der Funktion confint() hat das R Paket noch eine weitreichende Fülle an zusätzlichen Funktionen für die Darstellung von komplexeren GAM-Modellen. Es lohnt sich also auf jeden Fall einmal die Hilfeseite von {gratia} zu besuchen und mehr über das R Paket zu erfahren, wenn du tiefergreifend mit der Modellierung von GAM’s beginnen willst.\n\n\nR Paket {ggeffects} liefert mit der Funktion ggpredict() eine super aufgeräumte Funktion um die vorhergesagten Werte von dem Sensor für die Wasserlinsendichte zu erhalten. Dann kriegen wir auch noch ein Konfidenzintervall dazu. Der einzige Manko ist, dass wir die Ausgabe für die weitere Verwertung dann etwas mehr bearbeiten müssen.\n\n\nR Code [zeigen / verbergen]\ngg_pred_obj &lt;- ggpredict(duckweeds_gam_fit, terms = \"duckweeds_density\") \ngg_pred_obj\n\n\n# Predicted values of sensor\n\nduckweeds_density | Predicted |     95% CI\n------------------------------------------\n             4.80 |      0.49 | 0.41, 0.57\n            14.50 |      0.99 | 0.95, 1.04\n            24.20 |      1.43 | 1.37, 1.48\n            33.90 |      1.75 | 1.69, 1.80\n            43.50 |      1.95 | 1.90, 2.00\n            53.20 |      2.09 | 2.01, 2.17\n\n\nWenn du die Ausgabe dann weiter verwenden willst, dann musst du hier noch etwas mehr Arbeit rein stecken und die Ausgabe dann über die Umwandlung in einen tibble weiterverarbeiten.\n\n\n\nIn der Abbildung 62.23 siehst du dann einmal die angepasste Kurve aus der Funktion gam() zusammen mit dem Konfidenzintervall aus {marginaleffects}. Wenn du oben in den Tabs einmal die Ausgaben aus den Funktionen vergleichst, wirst du feststellen, dass die numerischen Werte alle sehr ähnlich sind. Daher ist es eher eine Geschmacks- und Anwendungsfrage, welches Paket du verwendest. Wenn du viel mit GAM-Modellen rechnest, dann kannst du auch alles sehr gut in der Umgebung des R Paketes {gratia} machen. Die Kurve läuft jedenfalls super durch unser Konfidenzintervall, daher können wir uns ziemlich sicher sein, gute Koeffizienten für das GAM-Modell gefunden zu haben. Wie schon oben geschrieben, an ein mathematisches Modell mit Funktion kommst du in GAM nicht ran. Dafür musst du dann eine andere Implementierung wie nls() oder mfp() nutzen.\n\n\nR Code [zeigen / verbergen]\nggplot(marg_pred_tbl, aes(duckweeds_density, sensor)) +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \"grey90\") +\n  geom_point() +\n  geom_line(aes(y = estimate), color = cb_pal[2]) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 62.23— Angepasste Kurve aus der Funktion gam() zusammen mit dem Konfidenzintervall aus {marginaleffects}.\n\n\n\n\n\n\n\n\n\n\n\nGam und Loess in {ggplot}\n\n\n\nIn {ggplot} können wir direkt über die Funktion stat_smooth() eine Kurve durch unsere Punkte legen. Wenn du mehr Lesen willst, dann empfehle ich einmal das Tutorium zu GAM and LOESS smoothing. Ich gehe hier nicht weiter auf die Local Regression (LOESS) ein, da wir weder ein Bestimmtheitsmaße \\(R^2\\) noch eine mathematische Geradengleichung. Daher lohnt sich aus meiner Sicht die Anwendung der Funktion loess() einfach in der Praxis nicht. für die Visualisierung mag es aber dann doch sinnvoll sein. Damit können wir auch einfach eine GAM oder Loess-Funktion in ggplot() direkt anwenden ohne über zusätzliche Pakete oder Funktionen zu gehen.\n\n\nR Code [zeigen / verbergen]\nggplot(chicken_tbl, aes(age, weight)) +\n  stat_smooth(method = \"gam\") +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) GAM\n\n\n\n\n\n\n\nAbbildung 62.24— Direkte Anwednung von GAM und Loess in ggplot() ohne eine zusätzliche Funktion.\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nggplot(chicken_tbl, aes(age, weight)) +\n  stat_smooth(method = \"loess\") +\n  geom_point() +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-non-linear.html#referenzen",
    "href": "stat-modeling-non-linear.html#referenzen",
    "title": "62  Nicht lineare Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nArchontoulis, S. V., & Miguez, F. E. (2015). Nonlinear regression models and applications in agricultural research. Agronomy Journal, 107(2), 786–798.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Nicht lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html",
    "href": "stat-modeling-robust-quantile.html",
    "title": "63  Robuste und Quantilesregression",
    "section": "",
    "text": "63.1 Genutzte R Pakete\nLetzte Änderung am 08. June 2025 um 12:27:22\nIn diesem Kapitel geht es um zwei Arten der Regression, die immer wieder genannt werden, aber dennoch eine Art Nischendasein fristen. Zum einen möchte ich hier die robuste Regression (eng. robust regression) und zum anderen die Quantilsregression (eng. quantile regression) vorstellen. Die robuste Regression ist faktisch statistisch tot. Das heißt, die Implementierungen werden kaum weiterentwickelt und auch findet methodische Forschung nur in der theoretischen Nische statt. Zwar wird die robuste Regression in ihrer ursprünglichen Form als Regression angewendet, aber das reicht meistens nicht. Selten wollen wir nur durch ein paar Punkte eine Gerade ziehen und uns über das gute Modell erfreuen. Wir haben mit dem Modell meist mehr vor. Wir wollen eine ANOVA rechnen und dann auch einen wie auch immer gearteten Mittelwertsvergleich. Wenn dies zwar theoretisch möglich ist, praktisch aber nicht implementiert, dann wollen und können wir die Methoden nur eingeschränkt verwenden. Bei der Quantilsregression sieht es etwas anders aus, hier können wir dann schon den ein oder anderen Mittelwertsvergleich rechnen. Was bei der Quantilsregression eher problematisch ist, ist das das Modell nicht immer konvergiert oder aber nicht algorithmisch eine Lösung für einen spezifischen Datensatz findet. In diesem Datensatz dann den einen Grund zu finden, ist dann meist so aufwendig, dass wir es auch gleich mit der Quantilsregression lassen können.\nDer Charme der Quantilesregression ist ja am Ende, dass wir auch den Median als Quantile auswählen können. So haben wir dann die Möglichkeit eine Regression auf den Medianen zu rechnen. Wir vergleichen damit dann auch die Mediane und sind so nicht mehr auf die Normalverteilung unseres Outcomes wie in der gewöhnlichen Regression angewiesen. Also eigentlich eine tolle Sache, wenn wir nur an den Mittelwertsvergleichen interessiert sind. Eine klassische ANOVA geht leider nicht auf einer Medianregression. Eine klassische ANOVA wäre aber mit nicht parametrischen Methoden sowieso nicht möglich gewesen. Wir verlieren also nicht so viel, gewinnen aber etwas, wenn das Modell konvergiert und ein Ergebnis liefert.\nIn diesem Kapitel brechen wir etwas die bisherige Struktur der Regressionskapitel auf. Wir schauen uns hier zuerst die beiden Modelle an und entscheiden dann, ob wir die Modelle für die ANOVA oder den Gruppenvergleich überhaupt nutzen können. Am Ende vergleichen wir dann einmal alle Modell mit dem fantastische Paket {modelsummary} mit der gleichnamigen Funktion. Hier hilft dann wie immer die tolle Hilfsseite von modelsummary zu besuchen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, conflicted, broom, quantreg,\n               see, performance, emmeans, multcomp, janitor,\n               parameters, effectsize, MASS, modelsummary,\n               robustbase, multcompView, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\n#cbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n#                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#daten",
    "href": "stat-modeling-robust-quantile.html#daten",
    "title": "63  Robuste und Quantilesregression",
    "section": "63.2 Daten",
    "text": "63.2 Daten\nFür unser erstes Beispiel nutzen wir die Daten aus einem Wachstumsversuch mit Basilikum mit vier Bodenbehandlungen und vier Blöcken, die Blöcke sind eigentlich Gewächshaustische. Wir wollen also einen klassischen Gruppenvergleich mit Berücksichtigung der Blockstruktur rechnen.\n\n\nR Code [zeigen / verbergen]\nbasi_tbl &lt;- read_excel(\"data/keimversuch_basilikum_block.xlsx\") |&gt;\n  clean_names() |&gt; \n  mutate(versuchsgruppe = as_factor(versuchsgruppe)) |&gt; \n  select(versuchsgruppe, block_1:block_4)\n\n\nIn Tabelle 63.1 sehen wir einmal die Daten im Wide-Format. Wir haben also das Frischgewicht der Basilikumpflanzen gemessen und wollen wissen, ob die verschiedenen Bodenarten einen Einfluss auf das Wachstum haben.\n\n\n\n\nTabelle 63.1— Datensatz des Frischegewichts von Basilikumpflanzen auf vier Tischen bzw. Blöcken in vier Versuchsgruppen.\n\n\n\n\n\n\nversuchsgruppe\nblock_1\nblock_2\nblock_3\nblock_4\n\n\n\n\nErde\n16\n21\n23\n23\n\n\nErde\n17\n19\n18\n24\n\n\nErde\n16\n22\n23\n24\n\n\nErde\n9\n17\n18\n21\n\n\nErde\n17\n21\n22\n24\n\n\nErde+Fließ\n18\n22\n21\n21\n\n\n…\n…\n…\n…\n…\n\n\nErde+Perlite\n20\n25\n25\n25\n\n\nPerlite+Fließ\n22\n25\n25\n24\n\n\nPerlite+Fließ\n25\n25\n26\n26\n\n\nPerlite+Fließ\n15\n19\n19\n19\n\n\nPerlite+Fließ\n17\n22\n22\n22\n\n\nPerlite+Fließ\n22\n22\n22\n22\n\n\n\n\n\n\n\n\nDa wir die Daten im Wide-Format vorliegen haben, müssen wir die Daten nochmal in Long-Format umwandeln. Wie immer nutzen wir dafür die Funktion pivot_longer().\n\n\nR Code [zeigen / verbergen]\nbasi_block_tbl &lt;- basi_tbl |&gt; \n  pivot_longer(cols = block_1:block_4,\n               values_to = \"weight\",\n               names_to = \"block\") |&gt; \n  mutate(block = as_factor(block))\n\n\nIn der Abbildung 63.4 siehst du einmal die Daten als Dotplots mit Mittelwert und Standardabweichung. Wir machen hier mal einen etwas komplizierteren Plot, aber immer nur Barplot ist ja auch langweilig.\n\n\nR Code [zeigen / verbergen]\nggplot(basi_block_tbl, aes(versuchsgruppe, weight, color = block)) +\n  theme_minimal() +\n  scale_color_okabeito() +\n  geom_point(position = position_dodge(0.5), shape = 4, size = 2.5) +\n  stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult = 1), \n               geom=\"pointrange\", position = position_dodge(0.5))  +\n  stat_summary(fun = \"mean\", fun.min = \"min\", fun.max = \"max\", geom = \"line\",\n               position = position_dodge(0.5)) \n\n\n\n\n\n\n\n\nAbbildung 63.4— Dotplot des Frischegewichts von Basilikumpflanzen auf vier Tischen bzw. Blöcken in vier Versuchsgruppen mit Mittelwert und Standardabweichung.\n\n\n\n\n\nUnser zweiter Datensatz ist ein Anwendungsdatensatz aus dem Gemüsebau. Wir schauen uns das Wachstum von drei Gurkensorten über siebzehn Wochen an. Die Gurkensorten sind hier unsere Versuchsgruppen. Da wir es hier mit echten Daten zu tun haben, müssen wir uns etwas strecken damit die Daten dann auch passen. Wir wollen das Wachstum der drei Gurkensorten über die Zeit betrachten - also faktisch den Verlauf des Wachstums. Wir ignorieren hier einmal die abhängige Datenstruktur über die Zeitpunkte.\n\n\nMit einer abhängigen Datenstruktur müssten wir eigentlich ein lineares gemischtes Modell rechnen. Aber wir nutzen hier die Daten einmal anders.\nIm Weiteren haben wir zwei Typen von Daten für das Gurkenwachstum. Einmal messen wir den Durchmesser für jede Sorte (D im Namen der Versuchsgruppe) oder aber die Länge (L im Namen der Versuchsgruppe). Wir betrachten hier nur das Längenwachstum und deshalb filtern wir erstmal nach allen Versuchsgruppen mit einem L im Namen. Am Ende schmeißen wir noch Spalten raus, die wir nicht weiter brauchen.\n\n\nR Code [zeigen / verbergen]\ngurke_raw_tbl &lt;- read_excel(\"data/wachstum_gurke.xlsx\") |&gt; \n  clean_names() |&gt; \n  filter(str_detect(versuchsgruppe, \"L$\")) |&gt; \n  select(-pfl, -erntegewicht) |&gt; \n  mutate(versuchsgruppe = factor(versuchsgruppe, \n                                 labels = c(\"Katrina\", \"Proloog\", \"Quarto\"))) \n\n\nIn der Tabelle 63.2 sehen wir einmal die rohen Daten dargestellt.\n\n\n\n\nTabelle 63.2— Datensatz zu dem Längen- und Dickenwachstum von Gurken.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nversuchsgruppe\nt1\nt2\nt3\nt4\nt5\nt6\nt7\nt8\nt9\nt10\nt11\nt12\nt13\nt14\nt15\nt16\nt17\n\n\n\n\nProloog\n5.5\n6.1\n7.4\n8.9\n9.9\n12\n14.4\n17\n19.8\n21.2\n23.2\n24\n29.7\n32.8\nNA\nNA\nNA\n\n\nProloog\n4.6\n5.1\n6.4\n5.7\n5.5\n5.2\n5\n5\n4.5\n0\n0\n0\n0\n0\nNA\nNA\nNA\n\n\nProloog\n5.3\n5.8\n6.8\n8.3\n9\n10\n12.3\n14.6\n17.6\n19.3\n23.1\n23.8\n31.7\n32.3\nNA\nNA\nNA\n\n\nProloog\n5.4\n5.7\n6.9\n8.2\n8.6\n10\n12.1\n14.5\n16.2\n17.1\n19.3\n21.6\n28.5\n30\nNA\nNA\nNA\n\n\nProloog\n5\n5.5\n6.3\n7.5\n8.3\n10\n12.2\n14.4\n16.5\n19.9\n21\n22.9\n30.4\n31\nNA\nNA\nNA\n\n\nProloog\n4.2\n4.6\n5.4\n5.5\n5.2\n5.3\n6.1\n6.5\n8\n9.3\n11\n12.5\n22.3\n24.2\nNA\nNA\nNA\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\nKatrina\n3.7\n3.9\n3.9\n4\n4\n4\n4\n4\n4\n4\n4\n4.7\n5.2\n5.4\n5.3\n5.4\n5\n\n\nKatrina\n3\n3.2\n3.3\n3.5\n3.6\n4.4\n5.2\n5.8\n6\n6.2\n6.1\n6.2\n6.8\n7.9\n9.4\n10.4\n13.2\n\n\nKatrina\n3.3\n3.3\n3.4\n3.6\n3.5\n3.5\n3.4\n3.7\n3.5\n3.6\n3.6\n3.6\n2.8\n0\nNA\nNA\nNA\n\n\nKatrina\n3.2\n3.4\n3.7\n4\n4.5\n5.9\n6.9\n8.4\n9.4\n11\n12.2\n13.5\n17.9\n18\nNA\nNA\nNA\n\n\nKatrina\n3.3\n3.4\n3.9\n4.6\n5.2\n6.5\n7.9\n9.5\n10.5\n11.7\n13\n13.4\n17.9\n18\nNA\nNA\nNA\n\n\nKatrina\n3.1\n3.6\n3.6\n3.8\n4.2\n4.9\n5.7\n6.8\n7.7\n9.1\n10.7\n12.3\n17.7\n18.6\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nDann müssen wir die Daten noch in Long-Format bringen. Da wir dann auch noch auf zwei Arten die Daten über die Zeit darstellen wollen, brauchen wir einmal die Zeit als Faktor time_fct und einmal als numerisch time_num. Leider haben wir auch Gurken mit einer Länge von 0 cm, diese Gruken lassen wir jetzt mal drin, da wir ja eine robuste Regression noch rechnen wollen. Auch haben wir ab Woche 14 keine Messungen mehr in der Versuchsgruppe Prolong, also nehmen wir auch nur die Daten bis zur vierzehnten Woche.\n\n\nR Code [zeigen / verbergen]\ngurke_time_len_tbl &lt;- gurke_raw_tbl |&gt; \n  pivot_longer(cols = t1:t17,\n               values_to = \"length\",\n               names_to = \"time\") |&gt; \n  mutate(time_fct = as_factor(time),\n         time_num = as.numeric(time_fct)) |&gt; \n  filter(time_num &lt;= 14)\n\n\nIn der Abbildung 63.5 sehen wir dann nochmal den Scatterplot für das Gurkenwachstum. Die gestrichtelten Linien stellen den Median und die durchgezogene Line den Mittelwert der Gruppen dar.\n\n\nR Code [zeigen / verbergen]\nggplot(gurke_time_len_tbl, aes(time_num, length, color = versuchsgruppe)) +\n  theme_minimal() +\n  geom_point2(position = position_dodge(0.5)) +\n  stat_summary(fun = \"mean\", geom = \"line\") +\n  stat_summary(fun = \"median\", geom = \"line\", linetype = 2) +\n  scale_x_continuous(breaks = 1:14) +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 63.5— Scatterplot des Längenwachstums der drei Gurkensorten über vierzehn Wochen. Die gestrichtelten Linien stellen den Median und die durchgezogene Line den Mittelwert der Gruppen dar.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#gewöhnliche-lineare-regression",
    "href": "stat-modeling-robust-quantile.html#gewöhnliche-lineare-regression",
    "title": "63  Robuste und Quantilesregression",
    "section": "63.3 Gewöhnliche lineare Regression",
    "text": "63.3 Gewöhnliche lineare Regression\nDamit wir einen Vergleich zu der robusten Regression und der Quantilsregression haben wollen wir hier zu Anfang nochmal schnell die gewöhnliche Regression (eng. ordinary linear regression), die du schon durch die Funktion lm() kennst. Wir fitten also einmal das Modell mit Interaktionsterm für den Basilikumdatensatz.\n\n\nR Code [zeigen / verbergen]\nbasi_lm_fit &lt;- lm(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\n\n\n\n63.3.1 ANOVA\nDann schauen wir uns nochmal den Interaktionsplot in Abbildung 63.6 mit der Funktion emmip() aus dem R Paket {emmeans} an. Wir sehen, das wir eventuell eine leichte Interaktion vorliegen haben könnten, da sich einige der Geraden überschneiden.\n\n\nR Code [zeigen / verbergen]\nemmip(basi_lm_fit, versuchsgruppe ~ block, CIs = TRUE, \n      cov.reduce = FALSE) +\n  theme_minimal() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 63.6— Interaktionsplot über die Versuchsgruppen und Blöcke.\n\n\n\n\n\nSchauen wir einmal in eine zweifaktorielle ANOVA, ob sich unser leichter Verdacht validieren lässt.\n\n\nR Code [zeigen / verbergen]\nbasi_lm_fit |&gt; \n  anova() |&gt; \n  model_parameters()\n\n\nParameter            | Sum_Squares | df | Mean_Square |     F |      p\n----------------------------------------------------------------------\nversuchsgruppe       |      158.84 |  3 |       52.95 |  6.53 | &lt; .001\nblock                |      355.34 |  3 |      118.45 | 14.60 | &lt; .001\nversuchsgruppe:block |       83.51 |  9 |        9.28 |  1.14 | 0.346 \nResiduals            |      519.20 | 64 |        8.11 |       |       \n\nAnova Table (Type 1 tests)\n\n\nWir sehen, dass wir mindestens einen paarweisen Unterschied zwischen den Versuchsgruppen und den Blöcken erwarten. Die Interaktion ist nicht signifikant. Betrachten wir noch kurz das \\(\\eta^2\\) um zu sehen, wie viel Varianz jeweils die Versuchsgruppe und Blöcke erklären.\n\n\nR Code [zeigen / verbergen]\nbasi_lm_fit |&gt; \n  eta_squared()\n\n\n# Effect Size for ANOVA (Type I)\n\nParameter            | Eta2 (partial) |       95% CI\n----------------------------------------------------\nversuchsgruppe       |           0.23 | [0.08, 1.00]\nblock                |           0.41 | [0.24, 1.00]\nversuchsgruppe:block |           0.14 | [0.00, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].\n\n\nLeider erklären hier die Blöcke sehr viel der Varianz, das ist nicht so schön, aber in diesem Kapitel lassen wir es dabei.\n\n\n63.3.2 Gruppenvergleich\nWir haben keine Interaktion vorliegen, alos mitteln wir einmal über alle Blöcke. Wenn du den Code | block zu dem Aufruf der emmeans() Funktion hinzufügst, dann hast du die Analyse für die Blöcke getrennt durchgeführt.\n\n\nR Code [zeigen / verbergen]\nbasi_lm_fit |&gt; \n  emmeans(specs = ~ versuchsgruppe) |&gt;\n  cld(Letters = letters, adjust = \"none\") \n\n\n versuchsgruppe emmean    SE df lower.CL upper.CL .group\n Erde+Fließ       19.4 0.637 64     18.1     20.7  a    \n Erde             19.8 0.637 64     18.5     21.0  a    \n Perlite+Fließ    22.1 0.637 64     20.8     23.3   b   \n Erde+Perlite     22.6 0.637 64     21.4     23.9   b   \n\nResults are averaged over the levels of: block \nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nWenn wir uns die unadjustierten \\(p\\)-Werte anschauen, dann sehen wir einen leichten Effekt zwischen den einzelnen Versuchsgruppen. Warum sage ich leichten Effekt? Die Mittelwerte der Gruppen in der spalte emmean unterscheiden sich kaum. Aber soviel zu der gewöhnlichen Regression, das war ja hier nur der Vergleich und die Erinnerung.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#sec-robust-reg",
    "href": "stat-modeling-robust-quantile.html#sec-robust-reg",
    "title": "63  Robuste und Quantilesregression",
    "section": "63.4 Robuste Regression",
    "text": "63.4 Robuste Regression\n\n\n\n\n\n\nNur Normalverteilung? Geht auch mehr?\n\n\n\nNein es geht auch mit allen anderen Modellen. So ist auch das glm() für die robuste Regression implementiert. Wir schauen uns aber nur die Grundlagen für die klassische robuste Regression unter der Annahme eines nromalverteilten Outcomes an.\n\n\nBei einer robusten Regression werden jeder Beobachtung auf der Grundlage ihres Residuums unterschiedliche Gewichte (eng. robustness weights) von 0 bis 1 zugewiesen. Wir kennen ja ein Residuum als die Differenz zwischen den beobachteten und den vorhergesagten Werten der Daten. Die vorhergesagten Daten sind ja die Punkte auf der Geraden. Je kleiner also das Residuum ist, desto größer ist die Gewichtung und desto näher liegt eine Beobachtung an der geschätzten Geraden. Wir bestrafen also Punkte, die weit weg von unserer potenziellen Gerade liegen.\n\n\nEin englisches Tutorium gibt es dann nochmal ausführlicher unter R demo | Robust Regression (don’t depend on influential data!)\nEbenso liefert auch das Tutorium Robust regression | R data analysis example einen Überblick.\nSchauen wir uns das Problem an einem kleinen Spieldatensatz einmal an, den es so in vielen Geschmacksrichtungen gibt. Wir haben acht Beobachtungen mit jeweils einem \\(x\\) und einem \\(y\\) Wert in unserem Datensatz reg_tbl. Wie folgt einmal dargestellt.\n\n\nR Code [zeigen / verbergen]\nreg_tbl &lt;- tibble(x = c(0, 1, 2, 3, 4, 5, 6, 7),\n                  y = c(1, 1.4, 2.5, 2.7, 4.3, 5.2, 0, 6.7))\n\n\nWir rechnen jetzt einmal eine gewöhnliche lineare Regression mit der Funktion lm() und eine robuste Regression mit dem Paket {MASS} und der Funtkion rlm(). Es gibt noch das R Paket {robustbase} und der Funktion rq() aber wir können die Ergebnisse dann nicht in {emmeans} weiter nutzen, was uns dann etwas den Weg mit versperrt. Wir können aber für die multiplen Mittelwertsvergleich mit {robustbase} das R Paket {multcomp} nutzen. Aber fangen wir hier erstmal mit dem Beispiel an und vergleichen die beiden Implementierungen der robusten Regression zu der gewöhnlichen Regression\n\n\nR Code [zeigen / verbergen]\nreg_lm_fit &lt;- lm(y ~ x, reg_tbl)\nreg_rlm_fit &lt;- rlm(y ~ x, reg_tbl)\nreg_lmrob_fit &lt;- lmrob(y ~ x, reg_tbl)\n\n\nIn der Abbildung 63.7 sehen wir einmal den Unterschied zwischen den beiden robusten Regressionen und der gewöhnlichen Regression.\n\n\nR Code [zeigen / verbergen]\nggplot(reg_tbl, aes(x, y, label = x)) +\n  theme_minimal() +\n  geom_label() +\n  geom_line(aes(y = predict(reg_lm_fit), colour = \"lm\")) +\n  geom_line(aes(y = predict(reg_rlm_fit), colour = \"rlm\")) +\n  geom_line(aes(y = predict(reg_lmrob_fit), colour = \"lmrob\")) +\n  scale_colour_okabeito() +\n  labs(colour = \"Method\")\n\n\n\n\n\n\n\n\nAbbildung 63.7— Scatterplot für den Unterschied zwischen einer robusten und gewöhnlichen Regression. Die gewöhnliche Regression ist gelb, die robuste Regression MASS::rlm() grün und die robuste Regression robustbase::lmrob() blau.\n\n\n\n\n\nIn unserem Beispiel ist die sechste Beobachtung der Ausreißer. Die lm-Regression wird durch den Wert 0 der sechsten Beobachtung nach unten gezogen. Die sechste Beobachtung erhält ein viel zu starkes Gewicht in der gewöhnlichen Regression im Bezug auf den Verlauf der Geraden. Die robusten Regressionen geben der sechsten Beobachtung hingegen ein viel geringeres Gewicht, so dass die Beobachtung keinen Einfluss auf den Verlauf der Geraden hat. In einer robusten Regression erhält eine Beobachtung mit einem großen Residuum sehr wenig Gewicht, in diesem konstruierten Beispiel fast 0. Daher können wir sagen, das unser Modell robust gegen Ausreißer ist.\nOkay, soweit lernt es jeder und die Idee der robusten Regression ist auch ziemlich einleuchtend. Aber in der Wissenschaft zeichnen wir keine Gerade durch Punkte und freuen uns drüber, dass die eine gerade besser passt als die andere Gerade. Wir nutzen dann ja das Modell weiter in eine ANOVA oder aber eben in einem paarweisen Gruppenvergleich. Und hier fangen dann die Probleme der Implementierung an. Leider ist es so, dass nicht alle Funktionalitäten implementiert sind. Das heißt, die Funktion anova() oder emmeans() kann mit der Ausgabe der robusten Regressionen mit MASS::rlm() und robustbase::lmrob() nichts anfangen. Das ist problematisch und nicht anwenderfreundlich. Und wir sind hier nunmal Anwender…\nWarum so unbeliebt? Das ist eine gute Frage. Zu der robusten Regression gibt es eine lange Geschichte mit vielen Wirrungen und Irrungen. Am Ende kannst du in Wikipedia noch etwas zur History and unpopularity of robust regression nachlesen. Nach Stromberg (2004) hat es auch etwas mit der schlechten und mangelhaften Implementierung in gängiger Statistiksoftware zu tun. Das merke ich hier auch gerade, als ich versuche die Funktionen zusammen zubauen und miteinander zu vernetzen. Sicherlich gibt es auch die biologische Diskussion. Gibt es in biologischen Daten eigentlich überhaupt Ausreißer? Oder müssten wir nicht Ausreißer besonders betrachten, weil die Ausreißer dann doch mehr über die Daten verraten? Macht es also Sinn die Ausreißer einfach platt zu bügeln und nicht mehr weiter zu beachten oder ist nicht die Beobachtung Nr.6 oben von Interesse? Denn vielleicht ist was mit dem Experiment schief gelaufen und diese Beobachtung ist gerade ein Anzeichen dafür. Dann müssten auch die anderen Messwerte kritisch hinterfragt werden.\nWie immer es auch sein. Wir fitten jetzt mal die beiden robusten Regression in der Standardausstattung mit der Funktion MASS::rlm() aus dem Paket {MASS} wie folgt.\n\n\nR Code [zeigen / verbergen]\nbasi_rlm_fit &lt;- rlm(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\n\n\nDann natürlich noch die Funktion robustbase::lmrob() aus dem Paket {robustbase}. Hinter dem Paket {robusbase} steht ein ganzen Buch von Maronna et al. (2019), aber leider keine gute Internetseite mit Beispielen und Anwendungen in R, wie es eigentlich heutzutage üblich ist. Aber dennoch, hier einmal das Modell.\n\n\nR Code [zeigen / verbergen]\nbasi_lmrob_fit &lt;- lmrob(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\n\n\n\n63.4.1 ANOVA\nDann wollen wir einmal eine zweifaktorielle ANOVA auf den Modell der robusten Regression mit der Funktion MASS::rlm() rechnen. Leider kann ich schon gleich sagen, dass wir hier ein Problem kriegen. Es ist nicht ganz klar unter Theoretikern welche Anzahl an Beobachtungen für die Residuen in der robusten Regression genutzt werden soll. Welche Beobachtungen werden den im Modell berücksichtigt und welche nicht? Daher ist dann der Wert für die Freiheitsgrade \\(df\\) leer und wir erhalten keine \\(F\\)-Statistik und dann auch keine \\(p\\)-Werte. Für mich super unbefriedigend, so kann man dann auch keine Funktionen richtig nutzen. Die Funktion robustbase::lmrob() bietet die ANOVA nicht an.\n\n\nR Code [zeigen / verbergen]\nbasi_rlm_aov &lt;- basi_rlm_fit |&gt; \n  anova() |&gt; \n  tidy()\nbasi_rlm_aov\n\n\n# A tibble: 4 × 6\n  term                    df sumsq meansq statistic p.value\n  &lt;chr&gt;                &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 versuchsgruppe           3 114.   37.9         NA      NA\n2 block                    3 318.  106.          NA      NA\n3 versuchsgruppe:block     9  63.7   7.07        NA      NA\n4 Residuals               NA 527.   NA           NA      NA\n\n\nWas als Freiheitsgrad für die Residuen nehmen? In unserem Datensatz haben wir 80 Basilikumpflanzen und somit auch Beobachtungen vorliegen. Wir setzen jetzt einfach brutal die Freiheitsgrade df für die Residuen auf 80 und können dann die Mean Squares für die Residuen berechnen. Also einmal flott die meansq für die Residuen durch die Anzahl an Beobachtungen geteilt.\n\n\nR Code [zeigen / verbergen]\nms_resid &lt;- 527 / 80\n\n\nMit den Mean Square der Residuen können wir dann auch die \\(F\\)-Werte berechnen. Den rechnerischen Weg kennen wir ja schon aus der zweifaktoriellen ANOVA.\n\n\nR Code [zeigen / verbergen]\nf_calc &lt;- basi_rlm_aov$meansq / ms_resid\n\n\nWie kriegen wir jetzt aus den ganzen berechneten \\(F\\)-Werten die entsprechenden \\(p\\)-Werte? Die \\(p\\)-Werte sind die Fläche rechts von den berechneten Werten. Wir können die Funktion pf() nutzen um diese Flächen zu berechnen. Wir machen das einmal beispielhaft für einen \\(F_{calc} = 3.41\\) für 4 Gruppen mit \\(df_1 = 4 - 1 = 3\\) und 12 Beobachtungen \\(df_2 = 12\\). Die Berechnung von \\(df_2\\) ist statistisch falsch aber für unseren MacGyver Hack hinreichend.\n\n\nR Code [zeigen / verbergen]\npf(3.41, 3, 12, lower.tail = FALSE) |&gt; round(3)\n\n\n[1] 0.053\n\n\nUnd siehe da, wir erhalten einen \\(p\\)-Wert von \\(0.053\\). Nun können wir das nicht nur für einzelnen \\(F\\)-Werte machen sondern auch für unseren ganzen Vektor f_calc. Als \\(df_2\\) setzen wir die Anzahl an Basilikumpflanzen.\n\n\nR Code [zeigen / verbergen]\np_vec &lt;- pf(f_calc, c(3, 3, 9), c(80, 80, 80), lower.tail = FALSE) |&gt; \n  scales::pvalue()\n\n\nDie berechneten \\(F\\)-Werte und \\(p\\)-Werte können wir jetzt in die ANOVA Tabelle ergänzen.\n\n\nR Code [zeigen / verbergen]\nbasi_rlm_aov |&gt; \n  mutate(statistic = f_calc, \n         p.value = p_vec)\n\n\n# A tibble: 4 × 6\n  term                    df sumsq meansq statistic p.value\n  &lt;chr&gt;                &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 versuchsgruppe           3 114.   37.9       5.75 0.001  \n2 block                    3 318.  106.       16.1  &lt;0.001 \n3 versuchsgruppe:block     9  63.7   7.07      1.07 0.391  \n4 Residuals               NA 527.   NA        NA    &lt;NA&gt;   \n\n\nDas war jetzt ein ganz schöner Angang und den \\(p\\)-Werten ist nur approximativ zu trauen, aber wenn wir weit vom Signifikanzniveau \\(\\alpha\\) gleich 5% sind, dann macht eine numerische Ungenauigkeit auch nicht viel aus. Achtung deshalb bei \\(p\\)-Werten nahe des Signifikanzniveau \\(\\alpha\\), hier ist dann die Aussage mit Vorsicht zu treffen oder eher nicht möglich.\nGlücklicherweise können wir aus den Sum of squares dann unsere \\(\\eta^2\\)-Werte für die erklärte Varianz unserer ANOVA berechnen. Das ist dann doch schon mal was. Wir sehen, dass die Blöcke am meisten der Varianz erklären und die Versuchsgruppen sehr wenig. Das ist für das Modell dann nicht so schön, deckt sich aber mit den Ergebnissen gewöhnlichen Regression. Wir erhalten eine Konfidenzintervalle, woran du schon erkennen kannst, dass in der Ausgabe der ANOVA der robusten Regression was fehlt.\n\n\nR Code [zeigen / verbergen]\nbasi_rlm_fit |&gt; \n  eta_squared()\n\n\n# Effect Size for ANOVA (Type I)\n\nParameter            | Eta2 (partial) |       95% CI\n----------------------------------------------------\nversuchsgruppe       |           0.23 | [0.08, 1.00]\nblock                |           0.41 | [0.24, 1.00]\nversuchsgruppe:block |           0.14 | [0.00, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].\n\n\nNochmal als Erinnerung, mit der Funktion robustbase::lmrob() ist die ANOVA nicht möglich. Die Funktionalität ist nicht implementiert.\n\n\n63.4.2 Gruppenvergleich\nDafür geht der Gruppenvergleich für die robuste Regression mit MASS::rlm() wie von alleine. Wir haben keine Interaktion vorliegen, daher müssen wir auch nicht den Block berücksichtigen. Das wir in Block 1 ein Problem haben, steht dann aber auf einem anderen Blatt. Da aber alle Basilikumpflanzen immer im Block 1 kleiner sind, passt es dann wieder im Sinne keiner Interaktion. Mit Interaktion hätten wir sonst versuchsgruppe | block statt nur versuchsgruppe hinter die Tilde geschrieben. Dann wollen wir noch das compact letter disply und alles ist wie es sein sollte.\n\n\nR Code [zeigen / verbergen]\nbasi_rlm_fit |&gt; \n  emmeans(specs = ~ versuchsgruppe) |&gt;\n  cld(Letters = letters, adjust = \"none\") \n\n\n versuchsgruppe emmean    SE df asymp.LCL asymp.UCL .group\n Erde+Fließ       19.7 0.668 NA      18.4      21.0  a    \n Erde             19.9 0.668 NA      18.6      21.2  a    \n Perlite+Fließ    22.2 0.668 NA      20.9      23.5   b   \n Erde+Perlite     22.4 0.668 NA      21.1      23.7   b   \n\nResults are averaged over the levels of: block \nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nWir sehen also, dass sich Erde+Fließ und Erde nicht unterscheiden. Die beiden aber dann von Perlite+Fließ sowie Erde+Perlite. Am Ende unterscheiden sich Perlite+Fließ und Erde+Perlite nicht.\nFür die Funktion robustbase::lmrob() müssen wir dann auf das R Paket {multcomp} umswitchen. Hier kriegen wir dann ein Problem, wenn wir eine Interaktion vorliegen ahben, da ist {multcomp} nicht so schön anzuwenden, wie dann {emmeans}. Aber hier schauen wir uns dann mal die einfache Implementierung ohne Interaktion an. Bei einer Interaktion müssten wir dann händisch über die Funktion filter() die Analysen für die einzelnen Blöcke aufspalten.\nWir lassen jetzt aber erstmal auf dem Modell aus der Funktion robustbase::lmrob() den paarweisen Vergleich nach Tukey laufen.\n\n\nR Code [zeigen / verbergen]\nmult_lmrob &lt;- glht(basi_lmrob_fit, linfct = mcp(versuchsgruppe = \"Tukey\"))\n\n\nDas erhaltende Objekt können wir dann mit tidy() aufräumen und uns dann die gewünschten Spalten wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nmult_lmrob_tbl &lt;- mult_lmrob |&gt; \n  tidy(conf.int = TRUE) |&gt; \n  select(contrast, estimate, conf.low, conf.high, adj.p.value) \n\nmult_lmrob_tbl\n\n\n# A tibble: 6 × 5\n  contrast                     estimate conf.low conf.high adj.p.value\n  &lt;chr&gt;                           &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 Erde+Fließ - Erde              1.68      -1.79      5.14       0.592\n2 Erde+Perlite - Erde            1.63      -2.38      5.64       0.717\n3 Perlite+Fließ - Erde           4.84      -1.35     11.0        0.181\n4 Erde+Perlite - Erde+Fließ     -0.0439    -2.87      2.78       1.00 \n5 Perlite+Fließ - Erde+Fließ     3.17      -2.53      8.86       0.474\n6 Perlite+Fließ - Erde+Perlite   3.21      -2.80      9.22       0.509\n\n\nWir sehen, dass wir mit der Adjustierung keinen signifikanten Unterschied zwischen den Bodensorten finden. Im Folgenden dann noch die Darstellung im compact letter display, wo wir etwas rumfrickeln müssen damit die Funktion multcompLetters() auch die Kontraste aus der Funktion glht() akzeptiert. Aber das haben wir dann alles zusammen.\n\n\nR Code [zeigen / verbergen]\nmult_lmrob_tbl |&gt; \n  mutate(contrast = str_replace_all(contrast, \"\\\\s\", \"\")) |&gt; \n  pull(adj.p.value, contrast) |&gt; \n  multcompLetters() |&gt; \n  pluck(\"Letters\")\n\n\n   Erde+Fließ  Erde+Perlite Perlite+Fließ          Erde \n          \"a\"           \"a\"           \"a\"           \"a\" \n\n\nAuch hier sehen wir keinen Unterschied im compact letter display für die adjustierten \\(p\\)-Werte. Für die unadjustierten rohen \\(p\\)-Werte nutzen wir dann den Umweg über die summary() Funktion. Die unadjustierten \\(p\\)-Werte können wir dann auch in das compact letter display umwandeln lassen.\n\n\nR Code [zeigen / verbergen]\nsummary(mult_lmrob, test = adjusted(\"none\")) |&gt; \n  tidy() |&gt; \n  mutate(contrast = str_replace_all(contrast, \"\\\\s\", \"\")) |&gt; \n  pull(p.value, contrast) |&gt; \n  multcompLetters() |&gt; \n  pluck(\"Letters\")\n\n\n   Erde+Fließ  Erde+Perlite Perlite+Fließ          Erde \n         \"ab\"          \"ab\"           \"a\"           \"b\" \n\n\nUnd wenn man eine andere Funktion nutzt, dann kommen auch leicht andere Ergebnisse raus. Bei den rohen \\(p\\)-Werten haben wir jetzt etwas andere Unterschiede. Aber das liegt auch an den sehr ähnlichen Mittelwerten. So groß sind die Unterschiede nicht, so dass wir hier natürlich durch unterschiedliche Algorithmen leicht andere Ergebnisse kriegen. Wieder ein Grund die \\(p\\)-Werte zu adjustieren um dann auch konsistente Ergebnisse zu haben.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#sec-quantile-reg",
    "href": "stat-modeling-robust-quantile.html#sec-quantile-reg",
    "title": "63  Robuste und Quantilesregression",
    "section": "63.5 Quantilsregression",
    "text": "63.5 Quantilsregression\nJetzt wollen wir uns als Spezialfall der robusten Regression einmal die Quantilesregression anschauen. Wir der Name schon sagt, optimiert die Quantilregression nicht über den Mittelwert und die Standardabweichung als quadratische Abweichungen sondern über den Median und die absoluten Abweichungen. Wir haben es also hier mit einer Alternativen zu der gewöhnlichen Regression zu tun. Das schöne an der Quantilesregression ist, dass der Median nicht so anfällig gegenüber Ausreißern ist. Hier haben wir einen Vorteil. Wir können theoretisch auch andere Quantile als Referenzwert nehmen und die absoluten Abstände berechnen. Wenn wir aber später dann mit emmeans die Gruppenvergleiche rechnen wollen, geht das nur über den Median.\n\n\nEin englisches Tutorium gibt es dann nochmal ausführlicher unter Quantile Regression as an useful Alternative for Ordinary Linear Regression\nUm die Quantilesregression zu rechnen nutzen wir das R Paket {quantreg} und die Funktion rq(). Wichtig ist hier, dass wir das tau auf \\(0.5\\) setzen und somit dann eine Median-Regression rechnen. Wir können theoretisch auch andere Quantile als Referenz wählen, aber dann passt es nicht mehr mit emmeans(). Wir nutzen hier auch nochmal die Gelegenheit zwei Modelle mit anzupassen. Wir rechnen einmal ein Modell mit einer linearen Komponente der Zeit time_num und einmal ein Modell mit der quadratischen Komponente der Zeit mit poly(time_num, 2) was nicht anderes als time_num\\(^2\\) ist. Neben dieser Variante ist mit nlrq() auch eine Möglichkeit implementiert um noch komplexere nicht lineare Zusammenhänge zu modellieren. Hier dann einfach mal die Hilfeseite von ?nlrq anschauen.\n\n\nR Code [zeigen / verbergen]\ntime_rq_lin_fit &lt;- rq(length ~ versuchsgruppe + time_num + versuchsgruppe:time_num, tau = 0.5,\n                      gurke_time_len_tbl)\ntime_rq_quad_fit &lt;- rq(length ~ versuchsgruppe * poly(time_num, 2), tau = 0.5, \n                       gurke_time_len_tbl)\n\n\nIn der Abbildung 63.8 plotten wir einmal die Modelle aus der linearen und der quadratischen Anpassung des zeitlichen Verlaufs in die Abbildung. Wir sehen, dass das Modell mit der quadratischen Anpassung besser zu den Daten passt. Daher nutzen wir jetzt im weiteren das Modell time_rq_quad_fit.\n\n\nR Code [zeigen / verbergen]\nggplot(gurke_time_len_tbl, aes(time_num, length, color = versuchsgruppe)) +\n  theme_minimal() +\n  geom_point2(position = position_dodge(0.5)) +\n  scale_color_okabeito() +\n  geom_line(aes(y = predict(time_rq_quad_fit), linetype = \"Quadratic\")) +\n  geom_line(aes(y = predict(time_rq_lin_fit), linetype = \"Linear\")) +\n  scale_x_continuous(breaks = 1:14) +\n  labs(linetype = \"\", color = \"\")\n\n\n\n\n\n\n\n\nAbbildung 63.8— Scatterplot des Längenwachstums der drei Gurkensorten über vierzehn Wochen. Die gestrichtelten Linien stellen den Median und die durchgezogene Line den Mittelwert der Gruppen dar.\n\n\n\n\n\n\n63.5.1 ANOVA\nMachen wir es kurz. Die ANOVA ist für die Quantilsregression nicht implementiert und damit auch nicht anwendbar. Damit können wir aber leben, wenn wir die ANOVA nur als Vortest ansehen. Wir müssen dann eine mögliche Interaktion visuell überprüfen. Um die Interaktion visuell zu überprüfen nutzen wir die Funktion emimp() aus dem R Paket {emmeans}. Wir sehen in der Abbildung 63.9, dass sich die Gerade für die Versuchsgruppen über die Zeit nicht schneiden, was gegen eine starke Interaktion spricht. Die Steigung ist aber für alle drei Versuchsgruppen über die Zeit nicht gleich, wir haben zumindest eine mittlere Interaktion.\n\n\nR Code [zeigen / verbergen]\nemmip(time_rq_lin_fit, versuchsgruppe ~ time_num, CIs = TRUE, \n      cov.reduce = FALSE) +\n  theme_minimal() +\n  scale_color_okabeito()\n\nemmip(time_rq_quad_fit, versuchsgruppe ~ time_num, CIs = TRUE, \n      cov.reduce = FALSE) +\n  theme_minimal() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Linear\n\n\n\n\n\n\n\n\n\n\n\n(b) Quadratic\n\n\n\n\n\n\n\nAbbildung 63.9— Interaktionsplot über den zeitlichen Verlauf für alle drei Sorten für die Quantilesregression.\n\n\n\n\nWir würden also in unseren Gruppenvergleich der Mediane auf jeden Fall die Interaktion mit rein nehmen und die emmeans() Funktion entsprechend mit dem | anpassen.\n\n\n63.5.2 Gruppenvergleich\nWenn wir den Gruppenvergleich in emmeans() rechnen wollen, dann geht es nur dem Spezialfall der Median-Regression. Wir müssen also zwangsweise in der Quantilesregression rq() das tau = 0.5 setzen um dann eine Median-Regression zu rechnen. Sonst können wir nicht emmeans nutzen.\n\n\nR Code [zeigen / verbergen]\ntime_rq_quad_fit |&gt; \n  emmeans(~ versuchsgruppe | time_num, \n          adjust = \"none\", at = list(time_num = c(1, 7, 14))) |&gt;\n  cld(Letters = letters, adjust = \"none\") \n\n\ntime_num =  1:\n versuchsgruppe emmean     SE  df lower.CL upper.CL .group\n Quarto           2.30 0.0513 243     2.20     2.40  a    \n Katrina          3.30 0.2879 243     2.73     3.87   b   \n Proloog          5.00 0.2243 243     4.56     5.44    c  \n\ntime_num =  7:\n versuchsgruppe emmean     SE  df lower.CL upper.CL .group\n Quarto           3.83 0.2467 243     3.35     4.32  a    \n Katrina          5.20 0.3184 243     4.57     5.83   b   \n Proloog         11.97 0.2938 243    11.39    12.55    c  \n\ntime_num = 14:\n versuchsgruppe emmean     SE  df lower.CL upper.CL .group\n Quarto           7.30 1.7815 243     3.79    10.81  a    \n Katrina         11.36 3.1038 243     5.25    17.47  a    \n Proloog         30.06 1.6609 243    26.79    33.34   b   \n\nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n\n\nDas sieht ja schon mal ganz gut aus. Interessant ist, dass wir an dann in der vierzehnten Woche dann keinen signifikanten Unterschied mehr vorliegen zwischen Quarto und Katrina vorliegen haben. Das liegt dann aber alleinig an dem hohen Standardfehler SE der Sorte Katrina mit \\(3.1\\) gegenüber den anderen Sorten. Vermutlich sehe das Ergebnis leicht anders aus, wenn wir die unsinnigen Gurken mit einer Länge von 0 cm wirklich aus den Dten entfernen würden und nicht zu Demonstrationszwecken wie hier drin lassen würden.\nAber Achtung, die Spalte emmean beschriebt hier die Mediane. Wir haben also hier die Mediane des Längenwachstums für die Gurken vorliegen. Wenn wir die paarweisen Vergleich rechnen wollen würden dann können wir noch pairwise ~ versuchsgruppe statt ~ versuchsgruppe schreiben. Auch liefert die Funktion pwpm() die Medianunterschiede wie wir im Folgenden einmal sehen. Ich habe hier mal das at entfernt und da die Zeit numrisch ist, haben wir dann auch nur noch eine Tabelle. Die Diagonal: [Estimates] (emmean) sind die Mediane des Längenwachstums.\n\n\nR Code [zeigen / verbergen]\ntime_rq_quad_fit |&gt; \n  emmeans(~ versuchsgruppe | time_num, adjust = \"none\") |&gt;\n  pwpm()\n\n\n        Katrina Proloog  Quarto\nKatrina [ 5.50]  &lt;.0001  0.0095\nProloog   -7.41 [12.91]  &lt;.0001\nQuarto     1.48    8.89 [ 4.02]\n\nRow and column labels: versuchsgruppe\nUpper triangle: P values   adjust = \"tukey\"\nDiagonal: [Estimates] (emmean) \nLower triangle: Comparisons (estimate)   earlier vs. later",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#modellvergleich",
    "href": "stat-modeling-robust-quantile.html#modellvergleich",
    "title": "63  Robuste und Quantilesregression",
    "section": "63.6 Modellvergleich",
    "text": "63.6 Modellvergleich\nIm Folgenden wollen wir einmal verschiedene Modelle miteinander vergleichen und schauen, welches Modell hier das beste ist. Das machen wir dann einmal für die Basilikumdaten sowie die Wachstumsdaten für die Gurken.\n\n63.6.1 Basilikumdaten\nFür den Modellvergleich der gewöhnlichen, robusten und medianen Regression nutzen wir nochmal den Datensatz für das Basilikumwachstum. In einem ersten Schritt fitten wir wieder alle Modelle und achten darauf, dass wir bei der Quantilesregression angeben welches Quantile wir wollen. Wir wählen mit tau = 0.5 dann den Median und rechnen so eine Medianregression.\n\n\nR Code [zeigen / verbergen]\nbasi_lm_fit &lt;- lm(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\nbasi_rlm_fit &lt;- rlm(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\nbasi_lmrob_fit &lt;- lmrob(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl)\nbasi_rq_fit &lt;- rq(weight ~ versuchsgruppe + block + versuchsgruppe:block, basi_block_tbl,\n                  tau = 0.5)\n\n\nIm Folgenden nutzen wir dann das fantastische Paket {modelsummary} mit der gleichnamigen Funktion um uns einmal die Modelle im Vergleich anzuschauen. Hier hilft dann wie immer die tolle Hilfsseite von {modelsummary} zu besuchen. Ich möchte nur nicht den Intercept und die Schätzer für die Blöcke haben, deshalb fliegen die hier einmal raus.\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"Ordinary\" = basi_lm_fit,\n                 \"MASS::rlm\" = basi_rlm_fit,\n                 \"robustbase::lmrob\" = basi_lmrob_fit,\n                 \"Quantile\" = basi_rq_fit),\n             estimate  = \"{estimate}\",\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\", \n                           \"t = {statistic}\",\n                           \"p = {p.value}\"),\n             coef_omit = \"Intercept|block\")\n\n\n \n\n  \n    \n    \n    tinytable_aqk58899476i0hqqnlay\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                Ordinary\n                MASS::rlm\n                robustbase::lmrob\n                Quantile\n              \n        \n        \n        \n                \n                  versuchsgruppeErde+Fließ   \n                  2.200          \n                  1.515          \n                  1.675          \n                  1.000          \n                \n                \n                                             \n                  [-1.399, 5.799]\n                  [-2.257, 5.286]\n                  [-1.053, 4.403]\n                  [-0.374, 2.374]\n                \n                \n                                             \n                  s.e. = 1.801   \n                  s.e. = 1.888   \n                  s.e. = 1.366   \n                  s.e. = 0.701   \n                \n                \n                                             \n                  t = 1.221      \n                  t = 0.802      \n                  t = 1.227      \n                  t = 1.426      \n                \n                \n                                             \n                  p = 0.226      \n                  p = 0.425      \n                  p = 0.224      \n                  p = 0.159      \n                \n                \n                  versuchsgruppeErde+Perlite \n                  2.200          \n                  1.515          \n                  1.631          \n                  0.000          \n                \n                \n                                             \n                  [-1.399, 5.799]\n                  [-2.257, 5.286]\n                  [-1.529, 4.791]\n                  [-3.073, 3.073]\n                \n                \n                                             \n                  s.e. = 1.801   \n                  s.e. = 1.888   \n                  s.e. = 1.582   \n                  s.e. = 1.568   \n                \n                \n                                             \n                  t = 1.221      \n                  t = 0.802      \n                  t = 1.031      \n                  t = 0.000      \n                \n                \n                                             \n                  p = 0.226      \n                  p = 0.425      \n                  p = 0.306      \n                  p = 1.000      \n                \n                \n                  versuchsgruppePerlite+Fließ\n                  5.200          \n                  4.683          \n                  4.841          \n                  6.000          \n                \n                \n                                             \n                  [1.601, 8.799] \n                  [0.911, 8.455] \n                  [-0.037, 9.718]\n                  [1.045, 10.955]\n                \n                \n                                             \n                  s.e. = 1.801   \n                  s.e. = 1.888   \n                  s.e. = 2.442   \n                  s.e. = 2.528   \n                \n                \n                                             \n                  t = 2.887      \n                  t = 2.480      \n                  t = 1.982      \n                  t = 2.373      \n                \n                \n                                             \n                  p = 0.005      \n                  p = 0.016      \n                  p = 0.052      \n                  p = 0.021      \n                \n                \n                  Num.Obs.                   \n                  80             \n                  80             \n                  80             \n                  80             \n                \n                \n                  R2                         \n                  0.535          \n                                 \n                  0.501          \n                  0.480          \n                \n                \n                  R2 Adj.                    \n                  0.426          \n                                 \n                  0.384          \n                                 \n                \n                \n                  AIC                        \n                  410.7          \n                  411.8          \n                                 \n                  404.5          \n                \n                \n                  BIC                        \n                  451.1          \n                  452.3          \n                                 \n                  442.7          \n                \n                \n                  Log.Lik.                   \n                  -188.326       \n                  -188.914       \n                                 \n                                 \n                \n                \n                  F                          \n                  4.912          \n                  3.903          \n                                 \n                                 \n                \n                \n                  RMSE                       \n                  2.55           \n                  2.57           \n                  2.55           \n                  2.69           \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\nWie wir sehen sehen haben nicht alle Modelle die gleichen Informationen zurück gegeben. Insbesondere das fehlen des Bestimmtheitsmaßes \\(R^2\\) bei der robusten Regression MASS::rlm ist schmerzlich, da wir hier dann nicht die Möglichkeit haben eine Aussage über die erklärte Varianz der robusten Regression zu treffen. Auch fehlt bei der Medianregression das adjustierte \\(R^2\\), was die Nutzung bei Modellen mit mehr als einer Einflussvariable \\(x\\) im Modell erschwert bis nutzlos macht. Da ist dann die Funktion aus dem Paket {robustbase} besser, hier haben wir dann ein \\(R^2\\) vorliegen. Daher bleibt uns am Ende nur das AIC oder BIC, wobei wir dort den kleinsten Wert als besser erachten. Die AIC und BIC Werte sind somit am besten für die Quantilesregression. Für die Funktion robustbase::lmrob haben wir dann kein AIC. Dafür ist dann aber der Fehler RMSE bei der gewöhnlichen Regressionzusammen mit der Funktion robustbase::lmrob am niedrigsten. Und so stehe ich wieder davor und weiß nicht was das beste Modell ist. Hier müsste ich dann nochmal überlegen, ob ich lieber über Mittelwerte oder Mediane berichten möchte und das ist ohne die Forschungsfrage nicht hier zu lösen.\n\n\n63.6.2 Gurkendaten\nFür den Modellvergleich der gewöhnlichen, robusten und medianen Regression nutzen wir nochmal den Datensatz für das Längenwachstum der Gurken. In einem ersten Schritt fitten wir wieder alle Modelle und achten darauf, dass wir bei der Quantilesregression angeben welches Quantile wir wollen. Wir wählen mit tau = 0.5 dann den Median und rechnen so eine Median-Regression. Darüber hinaus schauen wir uns nochmal die quadratische Anpassung der Zeit in dem letzten Modell an. Mal schauen, ob das Modell dann auch bei den Kennzahlen das beste Modell ist. Visuell sah das quadratische Modell des zeitlichen Verlaufs schon mal sehr gut aus.\n\n\nR Code [zeigen / verbergen]\ntime_lm_fit &lt;- lm(length ~ versuchsgruppe + time_num + versuchsgruppe:time_num, gurke_time_len_tbl)\ntime_rlm_fit &lt;- rlm(length ~ versuchsgruppe + time_num + versuchsgruppe:time_num, gurke_time_len_tbl)\ntime_rq_lin_fit &lt;- rq(length ~ versuchsgruppe + time_num + versuchsgruppe:time_num, tau = 0.5,\n                      gurke_time_len_tbl)\ntime_rq_quad_fit &lt;- rq(length ~ versuchsgruppe * poly(time_num, 2), tau = 0.5, \n                       gurke_time_len_tbl)\n\n\nAuch hier nutzen wir dann das fantastische Paket {modelsummary} mit der gleichnamigen Funktion um uns einmal die Modelle im Vergleich anzuschauen.\n\n\nR Code [zeigen / verbergen]\nmodelsummary(lst(\"Ordinary\" = time_lm_fit,\n                 \"Robust\" = time_rlm_fit,\n                 \"Quantile linear\" = time_rq_lin_fit,\n                 \"Quantile quadratic\" = time_rq_quad_fit),\n             estimate  = \"{estimate}\",\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\", \n                           \"t = {statistic}\",\n                           \"p = {p.value}\"),\n             coef_omit = \"Intercept|time_num\")\n\n\n \n\n  \n    \n    \n    tinytable_knw2t7yrx9j3j6quc2g4\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        \n              \n                 \n                Ordinary\n                Robust\n                Quantile linear\n                Quantile quadratic\n              \n        \n        \n        \n                \n                  versuchsgruppeProloog\n                  -0.218         \n                  -1.028         \n                  -0.823         \n                  8.483          \n                \n                \n                                       \n                  [-3.056, 2.619]\n                  [-2.693, 0.638]\n                  [-2.852, 1.206]\n                  [6.612, 10.353]\n                \n                \n                                       \n                  s.e. = 1.440   \n                  s.e. = 0.846   \n                  s.e. = 1.035   \n                  s.e. = 0.954   \n                \n                \n                                       \n                  t = -0.152     \n                  t = -1.215     \n                  t = -0.795     \n                  t = 8.890      \n                \n                \n                                       \n                  p = 0.880      \n                  p = 0.225      \n                  p = 0.427      \n                  p = &lt;0.001     \n                \n                \n                  versuchsgruppeQuarto \n                  -0.412         \n                  -0.641         \n                  -0.986         \n                  -1.883         \n                \n                \n                                       \n                  [-3.249, 2.426]\n                  [-2.307, 1.025]\n                  [-3.045, 1.074]\n                  [-3.817, 0.050]\n                \n                \n                                       \n                  s.e. = 1.440   \n                  s.e. = 0.846   \n                  s.e. = 1.051   \n                  s.e. = 0.986   \n                \n                \n                                       \n                  t = -0.286     \n                  t = -0.758     \n                  t = -0.938     \n                  t = -1.909     \n                \n                \n                                       \n                  p = 0.775      \n                  p = 0.449      \n                  p = 0.349      \n                  p = 0.057      \n                \n                \n                  Num.Obs.             \n                  252            \n                  252            \n                  252            \n                  252            \n                \n                \n                  R2                   \n                  0.581          \n                                 \n                  0.548          \n                  0.537          \n                \n                \n                  R2 Adj.              \n                  0.572          \n                                 \n                                 \n                                 \n                \n                \n                  AIC                  \n                  1472.0         \n                  1488.9         \n                  1345.9         \n                  1316.6         \n                \n                \n                  BIC                  \n                  1496.7         \n                  1513.6         \n                  1367.1         \n                  1348.4         \n                \n                \n                  Log.Lik.             \n                  -729.020       \n                  -737.435       \n                                 \n                                 \n                \n                \n                  F                    \n                  68.209         \n                  269.196        \n                                 \n                                 \n                \n                \n                  RMSE                 \n                  4.37           \n                  4.51           \n                  4.53           \n                  4.59           \n                \n        \n      \n    \n\n    \n\n  \n\n\n\n\nHier sieht es ähnlich aus wie bei den Modellvergleichen von den Basilikumdaten. Nur hier wissen wir, dass wir Ausreißer in der Form von Gurken mit einer Länge von 0 cm in den Daten haben. Daher sehen wir auch, dass die robuste Regression und die Median-Regression ein niedrigeres AIC und BIC haben. Für mich interessant ist, dass der Fehler RMSE wieder am kleinsten bei der gewöhnlichen Regression ist, das mag aber auch an der Berechnung liegen. Da wir Ausreißer haben, sind natürlich dann auch die robuste Regression und die Median-Regression vorzuziehen. Da die Median-Regression den kleineren AIC Wert hat, nehmen wir dann die Median-Regression als die beste Regression an. Der RMSE ist am kleinsten für die quadratische Anpassung des zeitlichen Verlaufs. Deshalb wäre dann das vierte Modell mit dem niedrigsten AIC und dem niedrigsten RMSE das Modell der Wahl.\nIch wiederhole mich hier wirklich, aber vermutlich wäre es schlauer zuerst die Daten zu bereinigen und die Gurken mit einem Wachstum von 0 cm zu entfernen. Auch die anderen Wachstumskurven von anderen Gurken sind etwas wirr. Da müsste man auch nochmal ran und schauen, ob nicht die Gurken lieber aus der Analyse raus müssen. Am Ende ist dann natürlich die Frage, ob man die Daten dann nicht doch lieber über ein gemischtes Modell auswertet, da natürlich die Zeitpunkte voneinander abhängig sind, wenn wir immer die glecihen Gurken messen und nicht ernten. Aber wie immer im Leben, alles geht nicht.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-robust-quantile.html#referenzen",
    "href": "stat-modeling-robust-quantile.html#referenzen",
    "title": "63  Robuste und Quantilesregression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nMaronna, R. A., Martin, R. D., Yohai, V. J., & Salibián-Barrera, M. (2019). Robust statistics: theory and methods (with R). John Wiley & Sons.\n\n\nStromberg, A. (2004). Why write statistical software? The case of robust statistical methods. Journal of Statistical Software, 10, 1–8.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Robuste und Quantilesregression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html",
    "href": "stat-modeling-survival.html",
    "title": "64  Überlebenszeitanalysen",
    "section": "",
    "text": "64.1 Genutzte R Pakete\nLetzte Änderung am 10. January 2025 um 09:56:55\nIn diesem Kapitel wollen wir uns nochmal mit der Zeit beschäftigen. Wir haben hier aber keine zeitlichen Messwiederholungen an dem gleichen Subjekt, Tier oder Pflanze vorliegen sondern wir schauen uns an, wie lange es dauert bis ein Ereignis eintritt. Deshalb nennen wir diese Analysen algemein Ereigniszeitanalysen. Häufig schauen wir uns aber die zeit an, die es braucht, bis das Ereignis “tot” für eine Beobachtung eintritt. Daher heißt das Kapitel auch Überlebenszeitanalysen (eng. survival analysis).\nÜberlebenszeitanalysen sind in den Humanwissenschaften und inbesondere in der Onkologie das Thema schlechthin. Wir beantworten hier die Fragen nach 3 Monatsmortalität und wollen wissen, wie viele patienten nach einer Behandlung mit einem Krebsmedikament nach drei Monaten noch leben. Du kanst dir vorstellen, dass es hier eine Menge an Annahmen und Modellen gibt. Wir wollen uns hier in dem Kapitel die Grundlagen anschauen. Da vieles in der Wissenschaft meist in englischer Sprache abläuft, kann ich hier sehr den das Buch von David & Mitchel (2012) empfehlen. Insbesondere die Einführungskapitel sind sehr gut geschrieben. Diese Detailtiefe wie bei David & Mitchel (2012) werde ich in diesem Abschnitt nicht erreichen. In den Agrarwissenschaften ist alles ein wenig anders als in den Humanwissenschaften.\nWie bereits erwähnt, konzentriert sich die Überlebensanalyse auf die erwartete Zeitdauer bis zum Auftreten eines Ereignisses von Interesse. Das Ereignis von Interesse ist dann meist ein Rückfall (eng. relapse) oder eben tot (eng. death). Es kann jedoch sein, dass das Ereignis bei einigen Personen innerhalb des Untersuchungszeitraums nicht beobachtet wird, was zu sogenannten zensierten Beobachtungen führt. Die Zensierung kann auf folgende Weise erfolgen:\nDiese Art der Zensierung, die als rechte Zensierung (eng. right censoring) bezeichnet wird, wird in der Überlebensanalyse in diesem Kapitel behandelt.\nAm Ende muss ich dann nochmal auf die proportional hazards assumption hinweisen. Wir gehen davon aus, dass die Risiken im Zeitverlauf proportional sind, was bedeutet, dass die Wirkung eines Risikofaktors im Zeitverlauf konstant ist. Das ist jetzt etwas umständlich ausgedrückt, aber wir sagen, dass die Wahrscheinlichkeit zu Sterben über die ganze Studie immer konstant ist. Männer fangen also nicht nach \\(t\\) Tagen an zügiger zu Versterben als Frauen. Wenn wir eine Verletzung der proportional hazards assumption vorliegen haben, dann müssen wir nochmal tiefer in das Thema einsteigen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, conflicted, broom,\n               survminer, survival, parameters,\n               gtsummary, janitor, ranger)\nconflicts_prefer(dplyr::filter)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#daten",
    "href": "stat-modeling-survival.html#daten",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.2 Daten",
    "text": "64.2 Daten\nInsgesamt schauen wir uns in diesem Kapitel dann drei Datensätze an. Einmal einen Datensatz der sehr simple ist und nochmal erklärt wie die Datenstruktur in R aussehen muss. Dafür nutzen wir das Überleben von Dodos. Dann einen Datensatz, der etwas komplizierter ist. Wir betrachten hier das Überleben von Fruchtfliegen. Den Abschluss bildet ein Datensatz zu einer klinischen Studie von Lungenkrebs. Der Datensatz wird viel in Beispielen genutzt, so dass ich den Datensatz auch hier nochmal vorstellen möchte.\n\n64.2.1 Überleben von Dodos\nWir schauen uns hier das Überleben von Dodos mit oder ohne Schnabelstutzen an. Wir schauen dann an jedem Lebenstag, wie viele Dodos verstorben sind. Da wir es hier mit sehr schnell wachsenden Dodos zu tun haben, ist der Datensatz nicht so lang was die Zeit angeht. Wir beobachten nur die ersten 55 Lebenstage (eng. days of life, abk. dol) bevor die Dodos dann geschlachtet werden. In der Tabelle 64.1 sehen wir die rohen Daten, die wir in der Form nicht analysieren können. Wir müssen uns hier etwas strecken, damit das Format der Daten für die Überlebenszeitanalyse passt.\n\n\n\n\nTabelle 64.1— Rohe Datentabelle mit den jeweiligen Lebenstagen (abk. dol) und der Anzahl an lebenden sowie toten Dodos an den entsprechenden Tagen.\n\n\n\n\n\n\ntrt\ndol\ncount\ndeath\n\n\n\n\nnone\n1\n250\n0\n\n\nnone\n2\n250\n0\n\n\nnone\n3\n250\n0\n\n\nnone\n4\n250\n0\n\n\nnone\n5\n250\n0\n\n\nnone\n6\n245\n5\n\n\n…\n…\n…\n…\n\n\nclipped\n50\n179\n3\n\n\nclipped\n51\n177\n2\n\n\nclipped\n52\n176\n1\n\n\nclipped\n53\n173\n3\n\n\nclipped\n54\n170\n3\n\n\nclipped\n55\n163\n7\n\n\n\n\n\n\n\n\nUnsere Daten zu den Dodos beinhalten die folgenden Spalten mit den entsprechenden Bedeutungen.\n\ntrt, die Behandlung der Schnäbel mit none und clipped\ndol, der day of life also der Lebenstag der Dodos\ncount, die Anzahl an lebenden Dodos an dem entprechenden day of life\ndeath, die Anzahl an tot aufgefundenen Dodos an dem entpsrechenden day of life\n\nWir haben somit \\(n = 500\\) beobachtete Dodos mit jeweils 250 für jede der beiden Schnabelbehandlungen. Jetzt brauchen wir aber wie immer einen Datansatz in dem jede Zeile einen beobachteten Dodo entspricht. In der Tabelle 64.2 sehen wir welche Art von Tabelle wir bauen müssen.\n\n\n\nTabelle 64.2— Beispielhafte Datentabelle für die Analyse der Dododaten. Jede Zeile entspricht einem beobachteten Dodo und dem entsprechenden Informationen zur Lebensdauer und Schnabelbehandlung.\n\n\n\n\n\ndodo_id\ntrt\ndol\ndeath\n\n\n\n\n1\nnone\n6\n1\n\n\n2\nnone\n6\n1\n\n\n3\nnone\n7\n1\n\n\n…\n…\n…\n…\n\n\n249\nnone\n55\n0\n\n\n250\nnone\n55\n0\n\n\n251\nclipped\n6\n1\n\n\n…\n…\n…\n…\n\n\n500\nclipped\n55\n0\n\n\n\n\n\n\nFangen wir also mit der Information an, die wir haben. Wir wissen wie viele Dodos jeweils zu einem bestimmten Lebenstag gestorben sind. Daher können wir anhand der Spalte death die Anzahl an Zeilen entsprechend vervielfältigen. Sind an einem Lebenstag drei Dodos gestorben, dann brauchen wir dreimal eine Zeile mit der Information des Lebenstages und dass an diesem Tag ein Dodo gestorben ist. Wir nutzen dazu die Funktion uncount(). Dann erschaffen wir noch eine Spalte death in der einfach immer eine 1 steht, da ja an diesem Lebenstag ein Dodo verstorben ist.\n\n\nR Code [zeigen / verbergen]\ndeath_tbl &lt;- dodo_raw_tbl |&gt; \n  uncount(death) |&gt;  \n  mutate(death = 1) \n\n\nIm nächsten Schritt müssen wir die lebenden Dodos separat für jede Behandlung ergänzen. Daher spalten wir uns die Daten in eine Liste auf und ergänzen dann die Informationen zu den fehlenden, lebenden Dodos. Alle lebenden Dodos haben die maximale Lebenszeit, sind nicht gestorben und damit bleibt die Anzahl auch konstant.\n\n\nR Code [zeigen / verbergen]\nalive_tbl &lt;- death_tbl |&gt; \n  split(~trt) |&gt; \n  map(~tibble(dol = max(.x$dol),\n              death = rep(0, last(.x$count)),\n              count = last(.x$count))) |&gt; \n  bind_rows(.id = \"trt\")\n\n\nWenn wir die Informationen zu toten und den noch lebenden Dodos gebaut haben, können wir uns dann einen finalen Datensatz zusammenkleben.\n\n\nR Code [zeigen / verbergen]\ndodo_tbl &lt;- bind_rows(death_tbl, alive_tbl)\n\n\nIn der Tabelle 64.3 sehen wir den finalen Dododatensatz, den wir uns aus den Informationen zusammengebaut haben. Wir haben hier einmal die Struktur eines Überlebenszeitdatensatzes gelernt und das wir manchmal uns ganz schön strecken müssen um die Daten dann auch gut umzubauen. Wir werden am Ende nur die Informationen in der Spalte dol, death und trt nutzen.\n\n\n\n\nTabelle 64.3— Finaler Dododatensatz für die Überlebenszeitanalysen.\n\n\n\n\n\n\ntrt\ndol\ncount\ndeath\n\n\n\n\nnone\n6\n245\n1\n\n\nnone\n6\n245\n1\n\n\nnone\n6\n245\n1\n\n\nnone\n6\n245\n1\n\n\nnone\n6\n245\n1\n\n\nnone\n7\n241\n1\n\n\n…\n…\n…\n…\n\n\nnone\n55\n85\n0\n\n\nnone\n55\n85\n0\n\n\nnone\n55\n85\n0\n\n\nnone\n55\n85\n0\n\n\nnone\n55\n85\n0\n\n\nnone\n55\n85\n0\n\n\n\n\n\n\n\n\n\n\n64.2.2 Überleben von Fruchtfliegen\nIm folgenden Beispiel in Tabelle 64.4 beobachten wir Fruchtfliegen bis fast alle Insekten verstorben sind. Das ist natürlich das andere Extrem zu den Dododatensatz. Wir testen hier ein Insektizid und am Ende haben wir dann keine lebenden Fruchtfliegen mehr. Das würdest du mit Dodos oder Schweinen nicht machen, denn so lange möchtest du die Tiere ja auch nicht beobachten, bis alle gestorben sind. Bei Fruchtfliegen dauert es eben nicht so lange bis alle Fliegen verstorben sind.\nWir laden die Daten der Fruchtfliegen aus der Datei fruitfly.xlsx.\n\n\nR Code [zeigen / verbergen]\nfruitfly_tbl &lt;- read_excel(\"data/fruitfly.xlsx\")\n\n\nDamit arbeiten wir dann im Folgenden weiter.\n\n\n\n\nTabelle 64.4— Fruchtfliegendatensatz mit verschiedenen Covariaten zu der Behandlung, der Zeit und dem Status der Fruchtfliegen.\n\n\n\n\n\n\ntrt\ntime\nstatus\nsex\nweight\nweight_bin\n\n\n\n\nfruitflyEx\n2\n1\nmale\n8.13\nlow\n\n\nfruitflyEx\n2\n1\nmale\n7.75\nlow\n\n\nfruitflyEx\n3\n1\nmale\n9.86\nlow\n\n\nfruitflyEx\n3\n1\nmale\n6.36\nlow\n\n\n…\n…\n…\n…\n…\n…\n\n\ncontrol\n23\n1\nfemale\n21.02\nhigh\n\n\ncontrol\n24\n1\nfemale\n16.45\nhigh\n\n\ncontrol\n25\n1\nfemale\n14.17\nlow\n\n\ncontrol\n26\n1\nfemale\n17.73\nhigh\n\n\n\n\n\n\n\n\nUnsere Daten zu den Fruchtfliegen beinhalten die folgenden Spalten mit den entsprechenden Bedeutungen.\n\ntrt, als die Behandlung mit den beiden Leveln fruitflyEx und control\ntime, den Zeitpunkt des Todes der entsprechenden Fruchfliege\nstatus, den Status der Fruchtfliege zu dem Zeitpunkt time. Hier meist 1 und damit tot, aber ein paar Fruchtfliegen sind bei der Überprüfung entkommen und haben dann eine 0.\nsex, das Geschlecht der entsprechenden Fruchtfliege\nweight, das Gewicht der entsprechenden Fruchtfliege in \\(\\mu g\\).\nweight_bin das Gewicht der entsprechenden Fruchtfliege aufgeteilt in zwei Gruppen nach dem Cutpoint von \\(15 \\mu g\\).\n\n\n\n64.2.3 Überleben von Lungenkrebs\nZum Abschluss möchte ich noch den Datensatz lung in der Tabelle 64.5 aus dem R Paket {survival} vorstellen. Das hat vor allem den Grund, dass es sich hier um einen klassischen Datensatz zur Überlebenszeitanalyse handelt und ich auch dieses Teilgebiet einmal mit abdecken möchte. Wie schon weiter oben gesagt, Überlebenszeitanalysen kommen eher in dem Humanbereich vor. Darüber hinaus bedienen sich fast alle anderen Tutorien im Internet diesem Datensatz, so dass du dann einfacher die englischen Texte nachvollziehen kannst.\n\n\n\n\nTabelle 64.5— Der Datensatz lung über eine Beobachtungsstudiue Studie zu Lungenkrebs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninst\ntime\nstatus\nage\nsex\nph.ecog\nph.karno\npat.karno\nmeal.cal\nwt.loss\n\n\n\n\n3\n306\n2\n74\n1\n1\n90\n100\n1175\nNA\n\n\n3\n455\n2\n68\n1\n0\n90\n90\n1225\n15\n\n\n3\n1010\n1\n56\n1\n0\n90\n90\nNA\n15\n\n\n5\n210\n2\n57\n1\n1\n90\n60\n1150\n11\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n13\n191\n1\n39\n1\n0\n90\n90\n2350\n-5\n\n\n32\n105\n1\n75\n2\n2\n60\n70\n1025\n5\n\n\n6\n174\n1\n66\n1\n1\n90\n100\n1075\n1\n\n\n22\n177\n1\n58\n2\n1\n80\n90\n1060\n0\n\n\n\n\n\n\n\n\n\ninst Institution code\ntime Survival time in days\nstatus censoring status 1=censored, 2=dead\nage Age in years\nsex Male=1 Female=2\nph.ecog ECOG performance score (0=good 5=dead)\nph.karno Karnofsky performance score (bad=0-good=100) rated by physician\npat.karno Karnofsky performance score as rated by patient\nmeal.cal Calories consumed at meals\nwt.loss Weight loss in last six months\n\nTrotz seiner Prominenz hat der Datensatz einen Fehler. Wir wollen den Status nicht auf 1/2 kodiert haben sondern auf 0/1. Ebenso wollen wir die Spalte inst nicht, da wir die Informationen nicht brauchen. Dann sind noch die Namen der Spalten hässlich, so dass wir da die Funktion clean_names() nutzen um einmal aufzuräumen.\n\n\nR Code [zeigen / verbergen]\nlung_tbl &lt;- lung |&gt; \n  as_tibble() |&gt; \n  mutate(status = recode(status, `1` = 0, `2` = 1)) |&gt; \n  clean_names() |&gt; \n  select(-inst)",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#die-surv-funktion",
    "href": "stat-modeling-survival.html#die-surv-funktion",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.3 Die Surv() Funktion",
    "text": "64.3 Die Surv() Funktion\nAls die Besonderheit bei der Bearbeitung von Überlebenszeitanalysen ist die Andersartigkeit von unserem \\(y\\). Wir haben ja zwei Spalten, die das Outcome beschreiben. Zum einen die Dauer oder Zeit bis zum Ereignis und dann die Spalte, die beschreibt, ob das Ereignis überhaupt eingetreten ist. In R lösen wir dieses Problem in dem wir zwei Spalten in dem Objekt Surv() zusammenführen. Alle Analysen in R gehen nur mit dem Surv() Objekt.\n\n\nR Code [zeigen / verbergen]\nSurv(time, death)\n\n\nIn dem Objekt Surv() haben wir erst die Spalte für die Zeit und dann die Spalte für das Ereignis. Für den Dododatensatz haben wir dann folgende Zusammenhänge.\n\ndol in den Daten dodo_tbl ist gleich time in dem Surv() Objekt\ndeath in den Daten dodo_tbl ist gleich death in dem Surv() Objekt\n\nBei dem Fruchfliegendatensatz sieht die Sachlage dann so aus.\n\ntime in den Daten fruitfly_tbl ist gleich time in dem Surv() Objekt\nstatus in den Daten fruitfly_tbl ist gleich death in dem Surv() Objekt\n\nFür den Lungenkrebsdatensatz haben wir dann folgende Zuordnung.\n\ntime in den Daten lung_tbl ist gleich time in dem Surv() Objekt\nstatus in den Daten lung_tbl ist gleich death in dem Surv() Objekt\n\nIm Folgenden haben wir dann immer auf der linken Seite vom ~ ein Surv() Objekt stehen. Daran muss man sich immer etwas gewöhnen, sonst kommt sowas ja nicht in den Analysen vor.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#visualisierung-über-kaplan-meier-kurven",
    "href": "stat-modeling-survival.html#visualisierung-über-kaplan-meier-kurven",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.4 Visualisierung über Kaplan Meier Kurven",
    "text": "64.4 Visualisierung über Kaplan Meier Kurven\n\n\n\n\n\n\nNur kategoriale Variablen in einer Kaplan Meier Kurve\n\n\n\nWir können nur kategoriale Variablen in einer Kaplan Meier Kurve darstellen. Das heißt, wir müssen alle unsere \\(x\\), die kontinuierlich sind in eine kategoriale Variable umwandeln.\n\n\nWir können nur kategoriale Variablen in einer Kaplan Meier Kurve darstellen. Das heißt, wir müssen alle unser \\(X\\), die wir haben, in Variablen mit Kategorien umwandeln. Wenn du also in deinen Daten eine Spalte für das Gewicht in kg hast, dann musst du dir überlegen, wie du diese Werte in Kategorien änderst. Eine beliebte Variante ist, dass du zwei Gruppen bildest. Einmal die Patienten, die schwerer sind als der Median des Körpergewichts und einmal eine Gruppe für die Patienten, die leichter sind als der Median des Körpergewichts. Die Kategorisierung von Variablen ist faktisch ein eigenes Problem und lässt sich ohne den biologischen Hintergrund eigentlich nicht sauber durchführen. Daher werden in klinischen Studien oder Experimenten die Daten gleich in Kategorien erhoben. Daher gibt es vorab klare Kriterien in welcher Gewichtsklasse oder Altersklasse ein Patient landen wird. Das Gleiche gilt dann auch für andere kontinuierlichen Variablen.\nEin häufiger Fehler bei der Betrachtung der Kaplan Meier Kurve ist diese als die simple lineare Regression der Überlebenszeitanalyse anzusehen. Wir können zwar mit der Kaplan Meier Kurve immer nur ein \\(X\\) betrachten aber der Algorithmus basiert auf dem \\(\\mathcal{X}^2\\)-Test und hat nichts mit einer Regression zu tun. Daher kann es sein, dass du unterschiedliche Ergebnisse in der Visualisierung mit Kaplan Meier Kurven und dann der Analyse mit dem Cox Proportional-Hazards Modell erhälst.\nIn R nutzen wir das Paket {survminer} und die Funktion ggsurvplot() für die Visualisierung der Kaplan Meier Kurven.\n\n64.4.1 Dodos\nUm eine Kaplan Meier Kurve zeichnen zu können, brauchen wie als erstes die Funktion survfit(). Mit der Funktion survfit() können wir zum einen das mediane Überleben berechnen und alle Informationen erhalten, die wir brauchen um die Kaplan Meier Kurve zu plotten.\n\n\nR Code [zeigen / verbergen]\ntrt_fit &lt;- survfit(Surv(dol, death) ~ trt, data = dodo_tbl)\n\n\nWir können einmal das Objekt trt_fit uns anschauen.\n\n\nR Code [zeigen / verbergen]\ntrt_fit\n\n\nCall: survfit(formula = Surv(dol, death) ~ trt, data = dodo_tbl)\n\n              n events median 0.95LCL 0.95UCL\ntrt=clipped 250     87     NA      NA      NA\ntrt=none    250    165   44.5      40      49\n\n\nZum einen fallen uns die NA’s in der Wiedergabe des Fits der Überlebenszeit auf. Wenn wir uns die Abbildung 64.1 einmal anschauen, dann wird das Problem etwas klarer. Wir sehen nämlich, dass wir bei den geklippten Tieren gar nicht so weit runter kommen mit den toten Tieren, dass wir das mediane Überleben berechnen könnten. Nicht immer können wir auch alle statistischen Methoden auf alle Fragestellungen anwenden. Insbesondere wenn nicht genug Ereignisse wie in diesem Beispiel auftreten.\n\n\nR Code [zeigen / verbergen]\nggsurvplot(trt_fit, \n           data = dodo_tbl, \n           risk.table = TRUE,\n           surv.median.line = \"hv\",\n           ggtheme = theme_light(),\n           palette = cbbPalette[2:8])\n\n\n\n\n\n\n\n\nAbbildung 64.1— Kaplan Meier Kurven für unsere geklippten Dodos. Wir sehen, dass die geklippten Tiere in der Zeit der Versuchsdurchführung garnicht zur Hälfte versterben.\n\n\n\n\n\n\n\n64.4.2 Fruchtfliegen\nGehen wir einen Schritt weiter und schauen uns das Modell für die Fruchtfliegen an. Hier haben wir eine Behandlung mit zwei Leveln also Gruppen vorliegen. Wir nutzen wieder die Funktion survfit() um einaml unser Modell der Überlebenszeiten zu fitten.\n\n\nR Code [zeigen / verbergen]\ntrt_fit &lt;- survfit(Surv(time, status) ~ trt, data = fruitfly_tbl)\n\n\nWir erhalten dann folgende Ausgabe des Modells.\n\n\nR Code [zeigen / verbergen]\ntrt_fit\n\n\nCall: survfit(formula = Surv(time, status) ~ trt, data = fruitfly_tbl)\n\n                n events median 0.95LCL 0.95UCL\ntrt=control    50     49     15      13      17\ntrt=fruitflyEx 50     44     12      10      14\n\n\nIn der Abbildung 64.2 sehen wir die Visualisierung des Modells als Kaplan Meier Kurve. In diesem Experiment sterben fast alle Fruchtfliegen im Laufe der Untersuchung. Wir können also einfach das mediane Überleben für beide Gruppen berechnen.\n\n\nR Code [zeigen / verbergen]\nggsurvplot(trt_fit, \n           data = fruitfly_tbl, \n           risk.table = TRUE,\n           surv.median.line = \"hv\",\n           ggtheme = theme_light(),\n           palette = cbbPalette[2:8])\n\n\n\n\n\n\n\n\nAbbildung 64.2— Kaplan Meier Kurven für die Fruchtfliegen nach der Behandlung mit einem Pestizid und einer Kontrolle.\n\n\n\n\n\nNachdem wir die Kaplan Meier Kurven einmal für die Behandlung durchgeführt haben, können wir uns auch anschauen, ob das Überleben der Fruchtfliegen etwas mit dem Gewicht der Fruchtfliegen zu tun hat. Hier können wir nicht auf das Gewicht in der Spalte weight zurückgreifen sondern müssen die Variable weight_bin mit zwei Klassen nehmen.\n\n\nR Code [zeigen / verbergen]\nweight_fit &lt;- survfit(Surv(time, status) ~ weight_bin, data = fruitfly_tbl)\n\n\nWir erhalten dann die Kaplan Meier Kurven in der Abbildung 64.3 zurück. Hier ist es wichtig sich nochmal klar zu machen, dass wir eben nur kategoriale Variablen in einer Kaplan Meier Kurve darstellen können.\n\n\nR Code [zeigen / verbergen]\nggsurvplot(weight_fit, \n           data = fruitfly_tbl, \n           risk.table = TRUE,\n           surv.median.line = \"hv\",\n           ggtheme = theme_light(),\n           palette = cbbPalette[2:8])\n\n\n\n\n\n\n\n\nAbbildung 64.3— Kaplan Meier Kurven für die Fruchtfliegen nach der Behandlung mit einem Pestizid und einer Kontrolle.\n\n\n\n\n\n\n\n64.4.3 Lungenkrebs\nAls letztes Beispiel wollen wir uns nochmal den Datensatz lung_tbl anschauen. Zwar ist Lungenkrebs jetzt nichts was Tiere und Pflanzen als eine wichtige Erkrankung haben können, aber der Datensatz wird viel als Beispiel genutzt, so dass ich den Datensatz hier auch nochmal vorstellen möchte. Auch sind teilweise gewisse Schritte von Interesse, die eventuell auch in deiner Tier- oder Mäusestudie von Interesse sein könnten.\nBeginnen wir einmal mit dem Nullmodell. Das heißt, wir schauen uns den Verlauf des gesamten Überlebens einmal an. Wir wollen wissen, wie das mediane Überleben in unseren Daten ausschaut ohne das wir uns irgendeien Variable anschauen.\n\n\nR Code [zeigen / verbergen]\nnull_fit &lt;- survfit(Surv(time, status) ~ 1, data = lung_tbl)\n\n\nIm Folgenden einmal die Ausgabe des Fits.\n\n\nR Code [zeigen / verbergen]\nnull_fit\n\n\nCall: survfit(formula = Surv(time, status) ~ 1, data = lung_tbl)\n\n       n events median 0.95LCL 0.95UCL\n[1,] 228    165    310     285     363\n\n\nWir sehen, dass wir ein medianes Überleben von \\(310\\) Tagen haben. Es gibt insgesamt \\(165\\) Ereignisse zu beobachten von insgesamt \\(228\\) in die Studie eingeschlossenen Patienten. Wir können uns auch für bestimmte Zeitpunkte das Überleben wiedergeben lassen. Wir schauen uns hier einmal das Überleben nach einem Jahr bzw. \\(365.25\\) Tagen an.\n\n\nR Code [zeigen / verbergen]\nnull_fit |&gt; \n  summary(times = 365.25)\n\n\nCall: survfit(formula = Surv(time, status) ~ 1, data = lung_tbl)\n\n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n  365     65     121    0.409  0.0358        0.345        0.486\n\n\nHier sehen wir, dass \\(40.9\\%\\) das eine Jahr überlebt haben. Achtung, immer auf die Kodierung achten. Nur wenn du death = 1 kodiert hast, kannst du hier die Ausgaben der Funktionen in diesem Sinne interpretieren. Gerne kannst du hier auch das 3 Monatsüberleben bestimmen. Das kommt ganz darauf an, was deine Fragestellung ist. In der Abbildung 64.4 siehst du nochmal die Kaplan Meyer Kurve für das Nullmodell.\n\n\nR Code [zeigen / verbergen]\nggsurvplot(null_fit, \n           data = lung_tbl, \n           risk.table = TRUE,\n           surv.median.line = \"hv\",\n           ggtheme = theme_light(),\n           palette = cbbPalette[2])\n\n\n\n\n\n\n\n\nAbbildung 64.4— Kaplan Meier Kurven für das Nullmodell des Lungenkrebsdatensatzes.\n\n\n\n\n\nSchauen wir uns auch einmal Kaplan Meier Kurven für die Variable ph_ecog an. Hier haben wir das Problem, dass die Kategorie 3 kaum mit Patienten belegt ist. Daher filtern wir die Kategorie 3 einmal aus unseren Daten raus.\n\n\nR Code [zeigen / verbergen]\nlung_tbl %&lt;&gt;% \n  filter(ph_ecog != 3)\n\n\nWir können dann das Modell der Überlebenszeit einmal fitten.\n\n\nR Code [zeigen / verbergen]\nlung_fit &lt;- survfit(Surv(time, status) ~ ph_ecog, data = lung_tbl)\n\n\nIn der Abbildung 64.5 sehen wir dann die Kaplan Meier Kurve für die Variable ph_ecog. Du kannst hier schön sehen, dass wenn wir mehrere Kategorien in der Variable haben auch mehrere Graphen erhalten. Wichtig hierbei ist nochmal, dass sich die Graphen nicht überschneiden oder aber in der Mitte kreuzen. Dann haben wir ein Problem und könnten die Daten nicht auswerten. Konkret geht es hier um die proportional hazards assumption, die besagt, dass Überlebenszeitkurven für verschiedene Gruppen Hazardfunktionen haben müssen, die über die Zeit \\(t\\) proportional sind. Daher dürfen sich die Kurven nicht schneiden.\n\n\nR Code [zeigen / verbergen]\nggsurvplot(lung_fit, \n           data = lung_tbl, \n           risk.table = TRUE,\n           surv.median.line = \"hv\",\n           ggtheme = theme_light(),\n           palette = cbbPalette[2:8])\n\n\n\n\n\n\n\n\nAbbildung 64.5— Kaplan Meier Kurve für die Variable ph_ecog des Lungenkrebsdatensatzes.\n\n\n\n\n\nGanz zum Schluss dann noch die Frage, ob wir einen signifikanten Unterschied zwischen den beiden Kurven sehen. Dafür können wir dann die Funktion survdiff() nutzen. Die Funktion survdiff() gibt uns dann einen p-Wert wieder, ob sich die Kurven unterscheiden. Da es sich hier um einen globalen p-Wert handelt, erfahren wir nur, dass sich die Kurven unterscheiden, aber nicht welche. Dafür müssten wir dann die Kurven paarweise getrennt betrachten. Eigentlich ist nur der p-Wert von Interesse, die anderen Informationen haben eigentlich keinen biologischen Mehrwert.\n\n\nR Code [zeigen / verbergen]\nsurvdiff(Surv(time, status) ~ ph_ecog, data = lung_tbl)\n\n\nCall:\nsurvdiff(formula = Surv(time, status) ~ ph_ecog, data = lung_tbl)\n\n            N Observed Expected (O-E)^2/E (O-E)^2/V\nph_ecog=0  63       37     53.9    5.3014    8.0181\nph_ecog=1 113       82     83.1    0.0144    0.0295\nph_ecog=2  50       44     26.0   12.4571   14.9754\n\n Chisq= 18  on 2 degrees of freedom, p= 1e-04",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#cox-proportional-hazards-modell",
    "href": "stat-modeling-survival.html#cox-proportional-hazards-modell",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.5 Cox Proportional-Hazards Modell",
    "text": "64.5 Cox Proportional-Hazards Modell\nWenn die Kaplan Meyer Kurven sowas wie die simple lineare Regression sind, dann ist das Cox Proportional-Hazards Modell die multiple Regression in den Ereigniszeitanalysen. Damit haben wir natürlich wieder einen statistischen Engel überfahren. Das Cox Proportional-Hazards Modell ist natürlich etwas anders und lässt sich so einfach auch nicht mit einer multiplen Regression vergleichen, aber die Anwendung ist ähnlich. Wo wir bei den Kaplan Meier Kurven nur ein \\(X\\) in das Modell nehmen können, so können wir beim Cox Proportional-Hazards Modell beliebig viele \\(X\\) mit ins Modell nehmen. Theoretisch müssen die Variablen in einem Cox Proportional-Hazards Modell auch nicht mehr kategorial sein. Da wir aber meist alles schon in Kategorien visualisiert haben, bleiben wir dann meist im Cox Proportional-Hazards Modell auch bei den Kategorien in den Variablen. Auch im Fall des Cox Proportional-Hazards Modells kann ich hier nur eine Übersicht geben. Es findet sich natürlich auch ein Tutorium zum Cox Proportional-Hazards Model Tools. Für das Überprüfen der Modellannahmen empfiehlt sich auch das Tutorium zu Cox Model Assumptions.\nIn R nutzen wir die Funktion coxph() um ein Cox Proportional-Hazards Modell anzupassen. Die Anwendung ist eigentlich ziemlich einfach und lässt sich schnell durchführen.\n\n\nR Code [zeigen / verbergen]\nfit_1 &lt;- coxph(Surv(time, status) ~ trt + sex + weight, data = fruitfly_tbl) \nfit_1 |&gt; \n  model_parameters(exponentiate = TRUE)\n\n\nParameter        | Coefficient |   SE |        95% CI |    z |      p\n---------------------------------------------------------------------\ntrt [fruitflyEx] |        4.09 | 1.44 | [2.05,  8.17] | 4.00 | &lt; .001\nsex [male]       |        6.91 | 1.82 | [4.12, 11.59] | 7.32 | &lt; .001\nweight           |        1.02 | 0.04 | [0.95,  1.10] | 0.60 | 0.549 \n\n\nAls Koeffizienten erhalten wir das Hazard ratio (abk. HR) wieder. Wie schon bei der logistischen Regression müssen wir auch hier die Koeffizienten exponieren, damit wir die Link-scale verlassen. Wir können das HR wie ein Risk ratio (abk. RR) interpretieren. Es handelt sich also mehr um eine Sterbewahrscheinlichkeit. Ganz richtig ist die Interpretation nicht, da wir hier noch eine Zeitkomponente mit drin haben, aber für den umgangssprachlichen Gebrauch reicht die Interpretation.\nWenn wir ein \\(HR &gt; 1\\) vorliegen haben, so steigert die Variable das Risiko zu sterben. Daher haben wir eine protektive Variable vorliegen, wenn dass \\(HR &lt; 1\\) ist. Häufig wollen wir ein \\(HR &lt; 0.8\\) oder \\(HR &lt; 0.85\\) haben, wenn wir von einem relevanten Effekt sprechen wollen. Sonst reicht uns die Risikoreduktion nicht, um wirklich diese Variable zukünftig zu berücksichtigen. Aber wie immer hängt die Schwelle sehr von deiner Fragestellung ab.\nIch habe nochmal als Vergleich die Variable weight in das Modell genommen und damit den fit_1 angepasst sowie die Variable weight in zwei Gruppen zu weight_bin aufgeteilt. Hier siehst du sehr schön, dass der Effekt der Dichotomisierung nicht zu unterschätzen ist. Im fit_1 ist die kontinuierliche Variable weight eine Risikovariable, daher wir erwarten mehr tote Fruchtfliegen mit einem steigenden Gewicht. In dem fit_2 haben wir die dichotomisierte Variable weight_bin vorliegen und schon haben wir eine protektive Variable. Wenn das Gewicht steigt, dann sterben weniger Fruchtfliegen. Zwar ist in beiden Fällen die Variable nicht signifikant, aber du solltest eine Dichotomisierung immer überprüfen.\n\n\nR Code [zeigen / verbergen]\nfit_2 &lt;- coxph(Surv(time, status) ~ trt + sex + weight_bin, data = fruitfly_tbl) \nfit_2 |&gt; \n  model_parameters(exponentiate = TRUE)\n\n\nParameter        | Coefficient |   SE |        95% CI |     z |      p\n----------------------------------------------------------------------\ntrt [fruitflyEx] |        5.07 | 1.77 | [2.56, 10.05] |  4.65 | &lt; .001\nsex [male]       |        7.28 | 1.93 | [4.33, 12.23] |  7.50 | &lt; .001\nweight bin [low] |        0.62 | 0.20 | [0.33,  1.16] | -1.48 | 0.138 \n\n\nNachdem wir ein Cox Proportional-Hazards Modell angepasst haben, wollen wir nochmal überprüfen, ob die Modellannahmen auch passen. Insbesondere müssen wir überprüfen, ob das Risiko über die ganze Laufzeit der Studie gleich bleibt oder sich ändert. Wir testen also die proportional hazards assumption. Dafür können wir in R die Funktion cox.zph() nutzen.\n\n\nR Code [zeigen / verbergen]\ntest_ph &lt;- cox.zph(fit_2)\ntest_ph\n\n\n              chisq df     p\ntrt        0.000866  1 0.977\nsex        3.400374  1 0.065\nweight_bin 0.185700  1 0.667\nGLOBAL     3.971563  3 0.265\n\n\nWir lesen die Ausgabe von unten nach oben. Zuerst könne wir die proportional hazards assumption nicht ablehnen. Unser globaler p-Wert ist mit \\(0.265\\) größer als das Signifikanzniveau \\(\\alpha\\) gleich \\(5\\%\\). Betrachten wir die einzelnen Variablen, dann können wir auch hier die proportional hazards assumption nicht ablehnen. In der Abbildung 64.6 ist der Test auf die proportional hazards assumption nochmal visualisiert. Wenn die durchgezogene Linie innerhalb der gestrichelten Linien, als Bereich von \\(\\pm 2\\) Standardfehlern, bleibt, dann ist soweit alles in Orndung. Bei einem Verstoß gegen die proportional hazards assumption kannst du folgende Maßnahmen ausprobieren:\n\nHinzufügen von einer Kovariate*Zeit-Interaktion in das Cox Proportional-Hazards Modell\nStratifizierung der Daten nach der Kovariaten, die der proportional hazards assumption nicht folgt\n\nAuch hier musst du dann mal tiefer in die Materie einsteigen und einmal in den verlinkten Tutorien schauen, ob da was passendes für dein spezifisches Problem vorliegt.\n\n\nR Code [zeigen / verbergen]\nggcoxzph(test_ph)\n\n\n\n\n\n\n\n\nAbbildung 64.6— Visualisierung der Überprüfung der Proportional-Hazards-Annahme.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#logistische-regression",
    "href": "stat-modeling-survival.html#logistische-regression",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.6 Logistische Regression",
    "text": "64.6 Logistische Regression\nWas schon wieder die logistische Regression? Ja, schon wieder die logistische Regression. Wenn du dich nicht mit der Ereigniszeitanalyse rumschlagen willst oder denkst, dass die Ereigniszeitanalyse nicht passt, dann hast du immer noch die Möglichkeit eine logistische Regression zu rechnen. Dafür müssen wir dann nur ein wenig an den Daten rumbasteln. Wir müssen dann nämlich eine neue Variable erschaffen. Wir schauen einfach zu einem Zeitpunkt \\(t\\), ob die Beobachtung noch lebt. Dadurch bauen wir uns dann eine Spalte mit \\(0/1\\) Werten. Dann kann es auch schon losgehen mit der logistischen Regression.\nIm ersten Schritt bauen wir uns eine neue Variable died_3_m für den Lingenkrebsdatensatz. Da in einer logistsichen Regression das Schlechte immer 1 ist, fragen wir, wer nach 90 Tagen verstorben ist. Also eine Lebenszeit unter 90 Tagen hatte. Diese Beobachtungen kriegen dann eine 1 und die anderen Beobachtungen eine 0.\n\n\nR Code [zeigen / verbergen]\nlung_logreg_tbl &lt;- lung_tbl |&gt; \n  mutate(died_3_m = ifelse(time &lt; 90, 1, 0))\n\n\nNachdem wir uns recht schnell eine neue Variable gebaut haben, können wir dann einfach die logistische Regression rechnen. Bitte beachte, dass du die Effekte nur auf der log-Scale wiedergegeben kriegst, du musst dann die Ausgabe noch exponieren. Das machen wir hier in der Funktion model_parameters() gleich mit.\n\n\nR Code [zeigen / verbergen]\nglm(died_3_m ~ age + sex + ph_ecog, data = lung_logreg_tbl, family = binomial) |&gt; \n  model_parameters(exponentiate = TRUE)\n\n\nParameter   | Odds Ratio |       SE |       95% CI |     z |     p\n------------------------------------------------------------------\n(Intercept) |   4.94e-03 | 9.59e-03 | [0.00, 0.18] | -2.74 | 0.006\nage         |       1.06 |     0.03 | [1.01, 1.13] |  2.29 | 0.022\nsex         |       0.45 |     0.23 | [0.16, 1.14] | -1.59 | 0.111\nph ecog     |       1.34 |     0.41 | [0.74, 2.47] |  0.96 | 0.335\n\n\nWas sind die Unterschiede? Eine logistische Regression liefert Odds Ratios, also ein Chancenverhältnis. Aus einer Ereigniszeitanalyse erhalten wir Hazard Ratios, was eher ein Risk Ratio ist und somit eine Wahrscheinlichkeit. Deshalb lassen sich die Ergebnisse an der Stelle nur bedingt vergleichen. Im Falle der logistischen Regression fallen auch Zensierungen weg. Wir betrachten eben nur einen einzigen Zeitpunkt. In der Ereigniszeitanalyse betrachten wir hingegen den gesamten Verlauf. Wir immer musst du überlegen, was ist deine Fragestellung und was möchtest du berichten. Wenn es dir wirklich nur um den Zeitpunkt \\(t\\) geht und dir die Progression dahin oder danach egal ist, dann mag die logistische Regression auch eine Möglichkeit der Auswertung sein.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#discrete-time-survival-analysis",
    "href": "stat-modeling-survival.html#discrete-time-survival-analysis",
    "title": "64  Überlebenszeitanalysen",
    "section": "64.7 Discrete Time Survival Analysis",
    "text": "64.7 Discrete Time Survival Analysis\n\n\n\n\n\n\nStand des Abschnitts\n\n\n\n\n\n\n\n\nDas Thema Discrete Time Survival Analysis ist erstmal auf Stand-By gesetzt, bis mir klar ist, wohin ich mit dem Abschnitt zum Ende hin will. Zentral fehlen mir aktuell die Beratungsfälle, die mir dann auch die Probleme aufzeigen, die ich lösen will. Das Thema ist einfach zu groß, deshalb erstmal hier diese Link- und Buchsammlung, die schon mal ein Ansatz ist, wenn du dich tiefer mit dem Thema auseinandersetzen willst.\n\n\nEinmal kurz die Idee der discrete time survival analysis erläutert. Wir schauen uns nicht an, wie lange es dauert bis ein Ereignis eintritt, sondern ob ein Ereignis in einem bestimmten Intervall auftritt. Die Frage ist also, ist der Krebs im \\(i\\)-ten Jahr aufgetreten? Dafür brauchen wir dann auch eine spezielle Form der Datendarstellung, nämlich person period data, die wir uns dann aber meistens aus normalen Überlebenszeitdaten bauen können. Da gibt es dann eine Reihe von Funktion in R für die Umwandlung zu person period data.\nEinmal bitte auch Suresh et al. (2022) anschauen mit der Veröffentlichung Survival prediction models: an introduction to discrete-time modeling. Dann gibt es noch zwei Tutorien, die ich dann nochmal aufarbeiten muss.\n\nEvent History Analysis - Example 6 - Discrete Time Hazard Model\nIntro to Discrete-Time Survival Analysis in R",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survival.html#referenzen",
    "href": "stat-modeling-survival.html#referenzen",
    "title": "64  Überlebenszeitanalysen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nDavid, G. K., & Mitchel, K. (2012). Survival analysis: a Self-Learning text. Spinger.\n\n\nSuresh, K., Severn, C., & Ghosh, D. (2022). Survival prediction models: an introduction to discrete-time modeling. BMC medical research methodology, 22(1), 207.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Überlebenszeitanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-noninferiority.html",
    "href": "stat-modeling-noninferiority.html",
    "title": "65  Äquivalenz oder Nichtunterlegenheit",
    "section": "",
    "text": "65.1 Genutzte R Pakete\nLetzte Änderung am 10. January 2025 um 09:57:06\nIn diesem Kapitel wollen wir uns mit Gleichheit beschäftigen. Dabei gibt es zwei Arten von Gleichheit. Zum einen können wir uns die technische Gleichheit anschauen oder aber die medizinische- oder Behandlungsgruppengleichheit. Wir definieren die beiden Settings daher wie folgt.\nJe nachdem welche Gleichheit du dir anschauen willst, musst du natürlich auch andere statistische Verfahren wählen. Wir schauen uns daher in diesem Kapitel zuerst einmal die technische Gleichheit an - die ich hier mal so benenne - und danach die medizinische Gleichheit, die sich auf das statistische Hypothesentesten bezieht. Bei der technischen Gleichheit nutzen wir die lineare Regression und deren Gütekriterien. Bei der medizinischen Gleichheit drehen wir die statistischen Null- und Alternativehypothese und haben damit andere Probleme. Wir rechnen aber einen klassischen Hypothesentest.\nZum Einstieg in die technische Gleichheit mag dir folgendes Beispiel der Zerforschung einer einfachen linearen Regression dienen. Hier geht es darum den Iodgehalt vor dem Waschen und nach dem Waschen von zwei Kräutern zu vergleichen und zu schauen, ob die beides gleich ist.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom, readxl,\n               effectsize, multcompView, multcomp,\n               janitor, see, parameters, yardstick,\n               rcompanion, emmeans, conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(dplyr::mutate)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Äquivalenz oder Nichtunterlegenheit</span>"
    ]
  },
  {
    "objectID": "stat-modeling-noninferiority.html#daten",
    "href": "stat-modeling-noninferiority.html#daten",
    "title": "65  Äquivalenz oder Nichtunterlegenheit",
    "section": "65.2 Daten",
    "text": "65.2 Daten\nAls erstes wollen wir uns einmal die Daten für die Überprüfung der technischen Gleichheit anschauen. Die Daten stammen aus Dronenüberflügen zur Bestimmung der Grasdichte auf Weideflächen aus der Datei drone_tech.xlsx. Dabei haben wir zum einen die Grasdichte traditionell mit einem Druckstab gemessen pressure_stick und vergleichen diese Werte dann mit den Werten aus dem Dronenüberflug. Der Drohnenüberflug liefert uns Bilder und aus den Bildern extrahieren wir einen RGB-Wert (abk. Red, Green, Blue) in der Spalte drone_rgb oder einen CMYK-Wert (abk. Cyan, Magenta, Yellow (Gelb), Key (Schwarz)) in der Spalte drone_cmyk. Wir wollen nun schauen, ob wir die drei Werte sinnvoll in ein Verhältnis setzen können. Ein Auszug aus den Daten ist nochmal in der Tabelle 65.1 dargestellt.\n\n\n\n\nTabelle 65.1— Datentabelle für den technischen Vergleich eines Druckstabes und dem RGB-Werten eines Dronenüberflugs auf die Grasdichte auf Weideflächen.\n\n\n\n\n\n\npressure_stick\ndrone_rgb\ndrone_cmyk\n\n\n\n\n1048.24\n373.31\n254.65\n\n\n1284.31\n671.45\n234.86\n\n\n1170.07\n544.5\n184.01\n\n\n…\n…\n…\n\n\n1013.34\n355.84\n219.67\n\n\n1134.29\n537.43\n212.86\n\n\n917.29\n266.74\n178.46\n\n\n\n\n\n\n\n\nIn unserem zweiten Datenbeispiel schauen wir uns die Keimungsdaten nach Behandlung mit sechs biologischen Pilzmittel unter zwei Kältebehandlungen aus der Datei cold_seeds.xlsx an. Dabei ist wichtig zu wissen, dass es eine Kontrolle gibt, die das chemische Standardpräparat repräsentiert. Wir wollen jetzt wissen, ob unsere biologischen Alternativen gleich gut sind. Das heißt, wir wollen nicht mehr oder weniger als das Standardpräparat sondern gleichviel. Als Outcome zählen wir die Sporen auf den jungen Keimlingen. Da unsere Pflanze auch eine Kältebehandlung überstehen würde, haben wir auch noch die beiden Kältevarianten mit untersucht. In der Tabelle 65.2 sind die Daten einmal dargestellt.\n\n\n\n\nTabelle 65.2— Nicht transformierter Datensatz zu dem Keimungsexperiment mit biologischen Pilzpräparaten.\n\n\n\n\n\n\ntrt\ncold\nnon_cold\n\n\n\n\n1\n386.25\n22.9\n\n\n1\n100.52\n169.59\n\n\n1\n56.84\n65.46\n\n\n1\n357.65\n142.44\n\n\n2\n37668.6\n20659.77\n\n\n2\n28302.99\n7333.37\n\n\n…\n…\n…\n\n\n8\n2334.1\n352.41\n\n\n8\n9776.15\n5025.68\n\n\n8\n1932.27\n918.05\n\n\n8\n777.63\n149.17\n\n\n8\n2933.99\n1416.51\n\n\n8\n5731.01\n2022.39\n\n\n\n\n\n\n\n\nWir müssen jetzt leider nochmal ran und die Daten etwas aufräumen. Zum einen muss die erste Behandlung raus, hier handelt es sich nur um eine positive Kontrolle, ob überhaupt etwas gewachsen ist. Dann wollen wir uns die Daten auch log-transformieren. Das hat den Grund, dass die statistischen Verfahren in der Äquivalenzanalyse eine Normalverteilung verlangen. Mit der log-Transformation erreichen wir log-normalverteilte Daten, die einer Normalverteilung recht nahe kommen. Am Ende wollen wir dann auch die zweite Behandlung so benennen, dass wir auch immer die Kontrolle erkennen.\n\n\nR Code [zeigen / verbergen]\ncold_seed_tbl &lt;- cold_seed_tbl |&gt;   \n  clean_names() |&gt; \n  filter(trt != 1) |&gt; \n  mutate(trt = as_factor(trt),\n         log_cold = log(cold),\n         log_non_cold = log(non_cold),\n         trt = fct_recode(trt, ctrl = \"2\")) \n\n\nEs ergibt sich dann die Tabelle 65.3. Wir werden dann in der folgenden Analyse nur noch die log-transformierten Spalten log_cold und log_non_cold nutzen.\n\n\n\n\nTabelle 65.3— Transformierter Datensatz zu dem Keimungsexperiment mit biologischen Pilzpräparaten.\n\n\n\n\n\n\ntrt\ncold\nnon_cold\nlog_cold\nlog_non_cold\n\n\n\n\nctrl\n37668.6\n20659.77\n10.54\n9.94\n\n\nctrl\n28302.99\n7333.37\n10.25\n8.9\n\n\nctrl\n2874.76\n1325.42\n7.96\n7.19\n\n\nctrl\n7564.44\n2103.64\n8.93\n7.65\n\n\n…\n…\n…\n…\n…\n\n\n8\n1932.27\n918.05\n7.57\n6.82\n\n\n8\n777.63\n149.17\n6.66\n5.01\n\n\n8\n2933.99\n1416.51\n7.98\n7.26\n\n\n8\n5731.01\n2022.39\n8.65\n7.61",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Äquivalenz oder Nichtunterlegenheit</span>"
    ]
  },
  {
    "objectID": "stat-modeling-noninferiority.html#technische-gleichheit",
    "href": "stat-modeling-noninferiority.html#technische-gleichheit",
    "title": "65  Äquivalenz oder Nichtunterlegenheit",
    "section": "65.3 Technische Gleichheit",
    "text": "65.3 Technische Gleichheit\nBeginnen wir also mit der Beurteilung von der technischen Gleichheit zweier Verfahren. Ich nutze hier das Wort technische Gleichheit, da wir hier nicht zwei Gruppen miteinander vergleichen, sondern eben kontinuierlich gemessene Werte haben und wissen wollen, ob diese gemessenen Werte aus den beiden Verfahren gleich sind. In unserem Beispiel wollen wir wissen, ob wir den Druckstab zum Messen der Grasdichte durch einen Drohnenüberflug erstetzen können. Der Dronenflug produziert Bilder und wir können auf zwei Arten Zahlen aus den Bildern generieren. Wir extrahieren entweder die RGB-Werte der Bilder oder aber die CMYK-Werte. Hier ist natürlich ein Schritt den ich überspringe, wir erhalten am Ende eben einen Wert für ein Bild. Oder andersherum, wir können genau einer Messung mit dem Druckstab ein Bild der Drone zuordnen.\nIn der Abbildung 65.6 (a) und in der Abbildung 65.6 (b) sehen wir den Zusammenhang zwischen dem Druckstab und der Dronenmessung für beide Farbskalenwerte nochmal visualisiert. In einer idealen Welt würden alle Punkte auf einer Linie liegen. Das heißt, wir haben einen perfekten Zusammenhang zwischen dem Druckstab und den Farbskalenwerten. So ein perfekter Zusammenhang tritt in der Natur nie auf, deshalb müssen wir uns nun mit statistischen Maßzahlen behelfen.\nWir können die Funktion geom_smooth() nutzen um eine lineare Funktion durch die Punkte zu legen. Wir sehen ist der Fehler, dargestellt als grauer Bereich, bei den CMYK-Werten größer. Auch haben wir Punkte die etwas nach oben weg streben. In der RGB-Skala haben wir eher einen linearen Zusammenhang. Im Folgenden wollen wir uns dann einmal die statistischen Maßzahlen zu der Visualisierung anschauen.\n\n\nR Code [zeigen / verbergen]\nggplot(drone_tbl, aes(drone_rgb, pressure_stick)) +\n  theme_minimal() +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = TRUE)\n\nggplot(drone_tbl, aes(drone_cmyk, pressure_stick)) +\n  theme_minimal() +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Dronenmessung mit RGB-Werten.\n\n\n\n\n\n\n\n\n\n\n\n(b) Dronenmessung mit CMYK-Werten.\n\n\n\n\n\n\n\nAbbildung 65.6— Vergleich der beiden Farbskalen aus der Dronenmessung zu der Grasdichte durch den Druckstab.\n\n\n\n\n\n65.3.1 Bestimmtheitsmaß \\(R^2\\)\nFür die genaueren Werte der linearen Funktion nutzen wir dann die Funktion lm(). Wir brauchen die statistischen Maßzahlen höchstens, wenn uns eine Umrechung von den Werten von der einen Messung zu der anderen Messung interessiert.\n\n\nR Code [zeigen / verbergen]\nfit_drone &lt;- lm(pressure_stick ~ drone_rgb, data = drone_tbl)\nfit_drone |&gt; model_parameters()\n\n\nParameter   | Coefficient |   SE |           95% CI | t(279) |      p\n---------------------------------------------------------------------\n(Intercept) |      766.33 | 5.12 | [756.26, 776.41] | 149.70 | &lt; .001\ndrone rgb   |        0.78 | 0.01 | [  0.76,   0.81] |  61.76 | &lt; .001\n\n\nZum einen können wir uns jetzt auch die lineare Funktion und damit den Zusammenhang von dem Druckstab zu der RGB-Farbskala erstellen. Mir der folgenden Formel können wir dann die Werte der Dronen RGB-Farbskala in die Werte des Druckstabes umrechnen.\n\\[\npressure\\_stick = 766.33 + 0.78 \\cdot drone\\_rgb\n\\]\nZum anderen erhalten wir mit der Funktion lm() dann auch die Möglichkeit das Bestimmtheitsmaß \\(R^2\\) zu berechnen. Du kennst das Bestimmtheitsmaß \\(R^2\\) schon aus dem Kapitel für die Qualität einer linearen Regression. Hier nochmal kurz zusammengefasst, das Bestimmtheitsmaß \\(R^2\\) beschreibt, wie gut die Punkte auf der Geraden liegen. Ein Bestimmtheitsmaß \\(R^2\\) von 1 bedeutet, dass die Punkte perfekt auf der Geraden liegen. Ein Bestimmtheitsmaß \\(R^2\\) von 0, dass die Punkte eher wild um eine potenzielle Graden liegen.\nIm Folgenden können wir uns noch einmal die Formel des Bestimmtheitsmaß \\(R^2\\) anschauen um etwas besser zu verstehen, wie die Zusammenhänge mathematisch sind. Zum einen brauchen wir den Mittelwert von \\(y\\) als \\(\\bar{y}\\) sowie die Werte der einzelnen Punkte \\(\\bar{y}\\) und die Werte auf der Geraden mit \\(\\hat{y}_i\\).\n\\[\n\\mathit{R}^2 =\n\\cfrac{\\sum_{i=1}^N \\left(\\hat{y}_i- \\bar{y}\\right)^2}{\\sum_{i=1}^N \\left(y_i - \\bar{y}\\right)^2}\n\\]\nIn der Abbildung 65.7 sehen wir den Zusammenhang nochmal visualisiert. Wenn die Abstände von dem Mittelwert zu den einzelnen Punkten mit \\(y_i - \\bar{y}\\) gleich dem Abstand der Mittelwerte zu den Punkten auf der Geraden mit \\(\\hat{y}_i- \\bar{y}\\) ist, dann haben wir einen perfekten Zusammenhang.\n\n\n\n\n\n\nAbbildung 65.7— Auf der linken Seite sehen wir eine Gerade die nicht perfekt durch die Punkte läuft. Wir nehmen ein Bestimmtheitsmaß \\(R^2\\) von ca. 0.7 an. Die Abstände der einzelnen Beobachtungen \\(y_i\\) zu dem Mittelwert der y-Werte \\(\\bar{y}\\) ist nicht gleich den Werten auf der Geraden \\(\\hat{y}_i\\) zu dem Mittelwert der y-Werte \\(\\bar{y}\\). Dieser Zusammenhang wird in der rechten Abbildung mit einem Bestimmtheitsmaß \\(R^2\\) von 1 nochmal deutlich.\n\n\n\nWir können die Funktion glance() nutzen um uns das r.squared und das adj.r.squared wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nfit_drone |&gt; \n  glance() |&gt; \n  select(r.squared)\n\n\n# A tibble: 1 × 1\n  r.squared\n      &lt;dbl&gt;\n1     0.932\n\n\nWir haben wir ein \\(R^2\\) von \\(0.932\\) vorliegen. Damit erklärt unser Modell bzw. die Gerade 93.2% der Varianz. Der Anteil der erklärten Varianz ist auch wunderbar hoch, so dass wir davon ausgehen können, dass der Druckstab und die RGB-Werte der Drone ungefähr das Gleiche wiedergeben.\n\n\n65.3.2 Korrelation\nNeben der Information wie gut die Punkte auf der Geraden liegen, also wie die Punkte um die Gerade streuen, können wir uns auch die Korrelation und damit die Steigung der Gerade wiedergeben lassen. Das Bestimmtheitsmaß \\(R^2\\) sagt uns nämlich nichts über die Richtung der Geraden aus. Die Korrelation liefert uns die Steigung der Geraden mit dem Vorzeichen.\nWir können hier verschiedene Korrelationsmaße berechnen. Am häufigsten werden wir die Korrelation nach Pearson berechnen, da wir von einem normalverteilten \\(y\\) ausgehen. Wenn dies nicht der Fall sein sollte empfiehlt sich stattdessen den Korrelationkoeffizienten nach Spearman zu nutzen.\n\n\nR Code [zeigen / verbergen]\ndrone_tbl %$% \n  cor(pressure_stick, drone_rgb, method = \"pearson\") |&gt; \n  round(2)\n\n\n[1] 0.97\n\n\nR Code [zeigen / verbergen]\ndrone_tbl %$% \n  cor(pressure_stick, drone_rgb, method = \"spearman\") |&gt; \n  round(2)\n\n\n[1] 0.96\n\n\n\n\nWir nutzen hier den %$%-Operator, da wir in die Funktion cor() die Spalten übergeben wollen. Die Funktion cor() ist relativ alt und möchte daher keinen Datensatz sondern zwei Vektoren.\nNachdem wir die Korrelation berechnet haben, sehen wir das wir einen positiven Zusammenhang vorliegen haben. Die Gerade durch die Punkte steigt an und ist fast eine 45\\(^{\\circ}\\) Gerade, da wir eine Korrelation nahe 1 vorliegen haben.\n\n\n65.3.3 MSE, RMSE, nRMSE und MAE\nNeben der Betrachtung der Abweichung vom Mittelwert von \\(y\\) können wir uns auch die Abstände von den geschätzten Punkten auf der Geraden \\(\\hat{y}_i\\) zu den eigentlichen Punkten anschauen \\(y_i\\). Wir haben jetzt zwei Möglichkeiten die Abstände zu definieren.\n\nWir schauen uns die quadratischen Abstände mit \\((y_i - \\hat{y}_i)^2\\) an. Wir berechnen dann die mittlere quadratische Abweichung (eng. mean square error abk. MSE).\nWir schauen uns die absoluten Abstände mit \\(|y_i - \\hat{y}_i|\\) an. Wir berechnen dann den mittleren absoluten Fehler (eng. mean absolute error, abk. MAE).\n\nIm Folgenden betrachten wir erst den MSE und seine Verwandten. Wie wir an der Formel sehen, berechnen wir für den MSE einfach nur die quadratische Abweichung zwischen den Beobachtungen \\(y_i\\) und den Werten auf der berechneten Geraden \\(\\hat{y}_i\\). Dann summieren wir alles auf und teilen noch durch die Anzahl der Beobachtungen also Punkte \\(n\\).\n\\[\nMSE = \\cfrac{1}{n}\\sum^n_{i=1}(y_i - \\hat{y}_i)^2\n\\]\nHäufig wollen wir dann nicht die quadratischen Abweichungen angeben. Wir hätten dann ja auch die Einheit der Abweichung im Quadrat. Daher ziehen wir die Wurzel aus dem MSE und erhalten den root mean square error (abk. RMSE). Hierfür gibt es dann keine gute Übersetzung ins Deutsche.\n\\[\nRMSE = \\sqrt{MSE} = \\sqrt{\\cfrac{1}{n}\\sum^n_{i=1}(y_i - \\hat{y}_i)^2}\n\\]\nDer RMSE ist ein gewichtetes Maß für die Modellgenauigkeit, das auf der gleichen Skala wie das Vorhersageziel angegeben wird. Einfach ausgedrückt kann der RMSE als der durchschnittliche Fehler interpretiert werden, den die Vorhersagen des Modells im Vergleich zum tatsächlichen Wert aufweisen, wobei größere Vorhersagefehler zusätzlich gewichtet werden.\nJe näher der RMSE-Wert bei 0 liegt, desto genauer ist das Modell. Der RMSE-Wert wird auf derselben Skala zurückgegeben wie die Werte, für das du Vorhersagen treffen willst. Es gibt jedoch keine allgemeine Regel für die Interpretation von den Wertebereichen des RMSE. Die Interpretation des RMSE kann nur innerhalb deines Datensatzes bewertet werden.\n\n\nR Code [zeigen / verbergen]\ndrone_tbl |&gt;\n  rmse(pressure_stick, drone_rgb)\n\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        694.\n\n\nAls letzte Möglichkeit sei noch der normalisierte root mean square error (abk. nRMSE) genannt. In diesem Fall wird der RMSE nochmal durch den Mittelwert von \\(y\\) geteilt.\n\\[\nnRMSE = \\cfrac{RMSE}{\\bar{y}} = \\cfrac{\\sqrt{MSE}}{\\bar{y}} = \\cfrac{\\sqrt{\\cfrac{1}{N}\\sum^N_{i=1}(y_i - \\hat{y}_i)^2}}{\\bar{y}}\n\\]\nIn wie weit jetzt jedes MSE Abweichungsmaß sinnvoll ist und auch in der Anwendung passen mag, sei einmal dahingestellt. Wichtig ist hier zu Wissen, dass wir die MSE-Fehler nutzen um verschiedene Verfahren zu vergleichen. Ein kleiner Fehler ist immer besser. Ein einzelner MSE-Wert an sich, ist dann immer schwer zu interpretieren.\nAls Alternative zu den MSE-Fehlern bietet sich dann der MAE an. Hier schauen wir dann auf die absoluten Abstände. Wir nehmen also das Vorzeichen raus, damit sich die Abstände nicht zu 0 aufaddieren. Wir haben dann folgende Formel vorliegen.\n\\[\nMAE = \\cfrac{1}{n}\\sum^n_{i=1}|y_i - \\hat{y}_i|\n\\]\nDer MAE hat gegenüber dem RMSE Vorteile in der Interpretierbarkeit. Der MAE ist der Durchschnitt der absoluten Werte der Fehler. MAE ist grundsätzlich leichter zu verstehen als die Quadratwurzel aus dem Durchschnitt der quadrierten Fehler. Außerdem beeinflusst jede einzelne Abweichung den MAE in direktem Verhältnis zum absoluten Wert der Abweichung, was bei der RMSE nicht der Fall ist. Der MAE ist nicht identisch mit dem mittleren quadratischen Fehler (RMSE), auch wenn einige Forscher ihn so angeben und interpretieren. MAE ist konzeptionell einfacher und auch leichter zu interpretieren als RMSE: Es ist einfach der durchschnittliche absolute vertikale oder horizontale Abstand zwischen jedem Punkt in einem Streudiagramm und der Geraden.\n\n\nR Code [zeigen / verbergen]\ndrone_tbl |&gt;\n  mae(pressure_stick, drone_rgb)\n\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 mae     standard        691.\n\n\nWir können uns mit der Funktion metrics() auch die Fehler zusammenausgeben lassen.\n\n\nR Code [zeigen / verbergen]\ndrone_tbl |&gt;\n  metrics(pressure_stick, drone_rgb)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     694.   \n2 rsq     standard       0.932\n3 mae     standard     691.   \n\n\nWie schon oben geschrieben, der MSE und Co. sind nur in einem Vergleich sinnvoll. Deshalb hier nochmal der Vergleich der beiden Farbskalen der Dronenbilder.\n\n\nR Code [zeigen / verbergen]\ndrone_tbl |&gt;\n  metrics(pressure_stick, drone_rgb)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     694.   \n2 rsq     standard       0.932\n3 mae     standard     691.   \n\n\nR Code [zeigen / verbergen]\ndrone_tbl |&gt;\n  metrics(pressure_stick, drone_cmyk)\n\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     843.   \n2 rsq     standard       0.546\n3 mae     standard     831.   \n\n\nWir schon zu erwarten ist auch hier der Fehler bei den RGB-Werten kleiner als bei den CMYK-Werten. Daher würden wir uns hier für die Umrechnung der RGB-Werte entscheiden.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Äquivalenz oder Nichtunterlegenheit</span>"
    ]
  },
  {
    "objectID": "stat-modeling-noninferiority.html#medizinische--oder-behandlungsgleichheit",
    "href": "stat-modeling-noninferiority.html#medizinische--oder-behandlungsgleichheit",
    "title": "65  Äquivalenz oder Nichtunterlegenheit",
    "section": "65.4 Medizinische- oder Behandlungsgleichheit",
    "text": "65.4 Medizinische- oder Behandlungsgleichheit\n\n\n\n\n\n\nDisclaimer - Wichtig! Lesen!\n\n\n\nDer folgende Text ist ein Lehrtext für Studierende. Es handelt sich keinesfalls um eine textliche Beratung für Ethikanträge oder Tierversuchsanträge geschweige den der Auswertung einer klinischen Studie. Alle Beispiel sind im Zweifel an den Haaren herbeigezogen und dienen nur der Veranschaulichung möglicher Sachverhalte.\nAntragsteller:innen ist die statistische Beratung von einer entsprechenden Institution dringlichst angeraten.\n\n\nWir eingangs schon geschrieben wollen wir bei der Medizinische- oder Behandlungsgleichheit nachweisen, dass sich verschiedene Behandlungsgruppen zu einer Kontrolle oder Standard gleich oder äquivalent sind. Wir haben es hier als mit einem klassischen Gruppenvergleich zu tun, bei dem wir die Hypothesen drehen. Wenn wir auf Unterschied testen, dann haben wir in der Nullhypothese \\(H_0\\) die Gleichheit zwischen zwei Mittelwerten stehen. Wir wollen die Gleichheit der Mittelwerte ablehnen. Wir schreiben also unsere beiden Hypothesenpaare wie folgt.\n\n\nWie immer gibt es auch tolle Tutorien wie das Tutorium von Daniël Lakens Equivalence Testing and Interval Hypotheses\n\nStatistischer Test auf Unterschied\n\n\\[\n\\begin{aligned}\nH_0: \\bar{y}_{1} &= \\bar{y}_{2} \\\\  \nH_A: \\bar{y}_{1} &\\neq \\bar{y}_{2} \\\\   \n\\end{aligned}\n\\]\n\n\nWenn wir jetzt einen statistischen Teste für die Äquivalenz oder Nichtunterlegenheit rechnen wollen, dann drehen wir das Hypothesenpaar. Wir wollen jetzt in der Nullhypothese die “Ungleichheit” der Mittelwerte ablehnen.\n\nStatistischer Test auf Gleichheit\n\n\\[\n\\begin{aligned}\nH_0: \\bar{y}_{1} &\\neq \\bar{y}_{2} \\\\  \nH_A: \\bar{y}_{1} &= \\bar{y}_{2} \\\\   \n\\end{aligned}\n\\]\n\n\nUnd hier beginnt auch schon die Krux. Konnten wir uns relativ einfach einigen, dass ein Mittelwertesunterschied \\(\\Delta\\) von 0 eine Gleichheit zwischen den beiden Mittelwerten der beiden Gruppen bedeutet, so ist die Festlegung auf einen Unterschied schon schwieriger. Die Bewertung, ob zwei Mittelwerte sich für zwei Gruppen unterscheiden, kann nur im Kontext der biologischen oder medizinischen Fragestellung beantwortet werden. Die Diskussion, ob ein \\(\\Delta\\) von 0.1 noch gleich oder ungleich ist, kann rein numerisch schwer geführt werden. Deshalb gibt es einige Richtlinien und Richtwerte.\nAus dem Grund definieren wir Äquivalenzgrenzen oder Äquivalenzzone. Die Äquivalenzzone wird durch eine untere Äquivalenzgrenze und/oder eine obere Äquivalenzgrenze definiert. Die untere Äquivalenzgrenze (UEG) definiert deine untere Grenze der Akzeptanz für die Mittelwertsdifferenz. Die obere Äquivalenzgrenze (UEL) definiert die obere Grenze der Akzeptanz für die Mittelwertsdifferenz. Jede Abweichung von der Mittelwertsdifferenz, die innerhalb dieses Bereichs der Äquivalenzgrenzen liegt, wird als unbedeutend angesehen. Du kannst hier statt Mittelwertsdifferenz natürlich auch in Anteilen denken, wenn es um das Odds ratio oder Risk ratio geht.\nAls erstes Beispiel einer Behörde hier einmal das Zitat der Europäische Behörde für Lebensmittelsicherheit (EFSA) für die Zulassung eines Pilzmittels aus unseren Beispiel. Hier sei angemerkt, dass viele statistische Methoden von einem normalverteilten Outcome oder aber approximativ log-normalverteilten Outcome ausgehen. Deshalb werden die Äquivalenzgrenzen hier auch auf der \\(log\\)-Skala benannt.\n\n“The limits for equivalence were set to \\(-\\cfrac{1}{2}\\log\\) and \\(\\cfrac{1}{2}\\log\\) equal to -0.5 and 0.5 because of the log transformation of the outcome.” — Europäische Behörde für Lebensmittelsicherheit (EFSA)\n\nHäufig werden die Effekte aus verschiedenen Studien auch skaliert, damit wir dann die Effekte besser vergleichen können. Als Skalierung bietet sich eine Normalisierung oder Standardisierung an. Als Beispiel in den Pflanzenwissenschaften sei Voet et al. (2019) genannt. Voet et al. (2019) führen Analysen zum Schutz vor unbeabsichtigten Auswirkungen von gentechnisch verändertem Mais auf die Umwelt oder die menschliche Gesundheit durch [Link]. Hier hilft besonders sich von anderen Studien vor dem Experiment zu inspirieren zu lassen. Um eine ausgiebige Literaturrecherche kommt man dann meist nicht rum.\nAuch sei noch das Institut für Qualität und Wirtschaftlichkeit im Gesundheitswesen (IQWiG) erwähnt, welches für die Regulierung von Anwendungen in der Humanmedizin zu tun hat. Da sind ja die Grenzen immer etwas fließend. Wann ist ein Medikament nur für die Agrarwissenschaften relevant und hate keine Auswirkungen auf den Menschen? Diese Frage lasse ich hier offen. Hier hilft aber auch der Blick in das Papier Allgemeine Methoden und dann das Kapitel 9. Hier einmal ein Zitat aus dem Abschnitt zu dem Nachweis zur Gleichheit. Wir sehen. so einfach ist die Sachlage nicht.\n\n“Umgekehrt erfordert auch die Interpretation nicht statistisch signifikanter Ergebnisse Aufmerksamkeit. Insbesondere wird ein solches Ergebnis nicht als Nachweis für das Nichtvorhandensein eines Effekts (Abwesenheit bzw. Äquivalenz) gewertet.” — Kapitel 9.3.5 Nachweis der Gleichheit in Allgemeine Methoden des Institut für Qualität und Wirtschaftlichkeit im Gesundheitswesen (IQWiG)\n\nSchauen wir uns nun nochmal unsere Keimungsdaten nach Behandlung mit sechs biologischen Pilzmittel unter zwei Kältebehandlungen an. Wenn wir den Richtlinien der EFSA folgen, dann rechnen wir auf den \\(\\log\\)-transformierten Daten. Die \\(\\log\\)-transformierten Daten sind damit auch approximativ normalverteilt, so dass wir hier dann alle statistischen Methoden nutzen können, die eine Normalverteilung voraussetzen. In der Abbildung 65.8 sehen wir, dass die \\(\\log\\)-transformierten Daten eindeutig mehr einer Normalverteilung folgen.\n\n\nR Code [zeigen / verbergen]\ncold_seed_tbl |&gt; \n  pivot_longer(cold:last_col(),\n               names_to = \"type\",\n               values_to = \"growth\") |&gt; \n  mutate(type = as_factor(type)) |&gt; \n  ggplot(aes(trt, growth, fill = trt)) +\n  theme_minimal() +\n  geom_boxplot() +\n  facet_wrap(~ type, scales = \"free_y\") +\n  scale_fill_okabeito() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nAbbildung 65.8— Boxplots der Wachstumsraten des Pilzes in der Standardkontrolle sowie den sechs neunen Präparaten. Die oberen Abbildungen sind auf der normalen Datenskala, die unteren Abbildungen sind \\(\\log\\)-transformiert.\n\n\n\n\n\nIm Folgenden gehen wir jetzt von einfach nach kompliziert. Daher schauen wir uns erstmal die einfachste statistische Methode an, die wir nutzen können und werden dann inhaltlich komplizierter.\n\n65.4.1 ANOVA mit Effektschätzer\nAls erstes missbrauchen wir die ANOVA für den Nachweis der Gleichheit. Das ist die Schlechteste der denkbaren Möglichkeiten aber im Rahmen einer Bachelorarbeit oder aber um sich einen ersten Überblick zu verschaffen sinnvoll. Warum ist die die ANOVA so schlecht? Wir testen hier weiterhin die Nullhypothese auf Gleichheit. Wenn wir also einen signifikante ANOVA vorfinden, dann würden wir die Nullhypothese der Gleichheit ablehnen und auf einen Mittelwertsunterschied schließen. Wie wir schon vorab gelernt haben, ist eine nicht signifikante ANOVA kein schlüssiger Beweis für die Gültigkeit der Nullhypothese der Gleichheit. Wir arbeiten mit dem Falsifikationsprinzip, wir können nur Hypothesen ablehnen. Eine abgelehnte Hypothese bedeutet aber nicht im Umkehrschluss, dass die Gegenhypothese wahr ist. Daher nutzen wir hier die ANOVA als einen Art Seismographen. Eine signifikante ANOVA deutet auf einen Unterschied in den Mittelwerten hin, dann ist es vermutlich unwahrscheinlich, dass wir Gleichheit vorliegen haben.\nSchauen wir uns dazu einmal die zwei einfaktoriellen ANOVA’s für die kälte und nicht-kälte Behandlung einmal an. Als erstes rechnen wir eine einfacktorielle ANOVA und schauen, ob wir ein signifkantes Eregbnis vorliegen haben.\n\n\nR Code [zeigen / verbergen]\nlm_non_cold_fit &lt;- lm(log_non_cold ~ trt, data = cold_seed_tbl)\n\nlm_non_cold_fit |&gt; anova() |&gt; model_parameters()\n\n\nParameter | Sum_Squares | df | Mean_Square |    F |     p\n---------------------------------------------------------\ntrt       |       26.39 |  6 |        4.40 | 2.75 | 0.018\nResiduals |      118.50 | 74 |        1.60 |      |      \n\nAnova Table (Type 1 tests)\n\n\nDa der \\(p\\)- Wert kleiner ist als das Signifikanzniveau \\(\\alpha\\) müssen wir die Nullhypothese der Gleichheit ablehnen. Mindestens einen paarweisen Unterschied zwischen den Gruppen gibt es. Prinzipiell könnten wir natürlich hoffen, dass alle Gruppen gleich zur Kontrolle sind und sich nur zwei Behandlungsgruppen unterscheiden, aber es ist schonmal ein schlechtes Zeichen, wenn wir eine signifikante ANOVA vorliegen haben und auf Gleichheit der Behandlungen zur Kontrolle aus sind.\nSchauen wir nochmal auf den Effekt. Wenn wir einen großen Effekt der Behandlungsgruppen vorliegen haben, dann deutet dies auch nicht gerade auf gleiche Gruppenunterschiede.\n\n\nR Code [zeigen / verbergen]\nlm_non_cold_fit |&gt; eta_squared() \n\n\n# Effect Size for ANOVA\n\nParameter | Eta2 |       95% CI\n-------------------------------\ntrt       | 0.18 | [0.02, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].\n\n\nWir sehen, dass wir nur 18% der Varianz durch unsere Behandlungsgruppen erklären. Daher würden wir hier nicht von einem großen Effekt ausgehen. Würde auch hier viel Varianz erklärt, dann könnten wir hier auch aufhören. Schauen wir uns nochmal die andere Art der Vorbehandlung an.\nJetzt schauen wir nochmal wo die paarweisen Unterschiede sind. Wir nutzen dazu den pairwise.t.test(). Darüber hinaus haben wir bei den nicht-kälte behandelten Samen eine stark unterschiedliche Streuung der einzelnen Beobachtungen in den Gruppen. Durch die unterschiedlichen Varianzen in den Gruppen setzten wir pool.sd = FALSE und nehmen hier Varianzheterogenität an. Dann schauen wir uns einmal das compact letter display an und sehen, welche Behandlungen sich voneinander unterscheiden oder nicht.\n\n\nR Code [zeigen / verbergen]\ncold_seed_tbl %$%\n  pairwise.t.test(log_non_cold, trt, pool.sd = FALSE,\n                  p.adjust.method = \"none\") |&gt; \n  extract2(\"p.value\") |&gt; \n  fullPTable() |&gt; \n  multcompLetters()\n\n\nctrl    3    4    5    6    7    8 \n \"a\" \"ab\" \"ab\"  \"b\"  \"a\"  \"b\" \"ab\" \n\n\nWir sehen, dass wir Unterschiede haben. Da wir hier nur zur Kontrolle vergleichen wollen, schauen wir nach dem Buchstaben der Kontrolle und sehen, dass wir hier den letter ahaben. Wir interpretieren das compact letter display nun etwas statistisch schief in dem Sinne, das gleiche Buchstaben Gleichheit aussagen. Immerhin unterscheiden sich die Behandlungen 3, 4, 6 und 8 nicht von der Kontrolle.\nDen gleichen Ablauf können wir jetzt auch einmal für die kälte-behandleten Samen machen. Wir rechnen wieder als erstes eine einfaktorielle ANOVA und schauen, ob wir einen signifikanten Unterschied zwischen den Gruppen haben.\n\n\nR Code [zeigen / verbergen]\nlm_cold_fit &lt;- lm(log_cold ~ trt, data = cold_seed_tbl)\n\nlm_cold_fit |&gt; anova() |&gt; model_parameters()\n\n\nParameter | Sum_Squares | df | Mean_Square |    F |     p\n---------------------------------------------------------\ntrt       |        9.80 |  6 |        1.63 | 2.71 | 0.020\nResiduals |       44.59 | 74 |        0.60 |      |      \n\nAnova Table (Type 1 tests)\n\n\nAuch hier zeigt die signifikante ANOVA, dass wir mindestens einen paarweisen Mittelwertsunterschied zwischen den Behandlungsgruppen haben. Welche Gruppen sich nun unterscheiden werden wir dann gleich einmal in dem paarweisen t-Test uns anschauen. Vorher nochmal schauen wir nochmal wie stark der Effekt der Behandlungsgruppen ist.\n\n\nR Code [zeigen / verbergen]\nlm_cold_fit |&gt; eta_squared()\n\n\n# Effect Size for ANOVA\n\nParameter | Eta2 |       95% CI\n-------------------------------\ntrt       | 0.18 | [0.02, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].\n\n\nAuch hier können wir 18% der Varianz in dem Wachstum durch die Behandlungsgruppen erklären. Das ist recht wenig. Schauen wir aber jetzt einmal den paarweisen t-Test an. Die Varianzen sind ungefähr gleich in den Gruppen, die Boxplots haben ungefähr die gleiche Ausdehnung nach der Logarithmierung. Deshalb nutzen wir hier einmal die Funktionalität von {emmeans}. Wir können bei der Funktion emeans() eine Deltaschranke einführen. Dann haben wir mit dem compact letter display ein Test auf Nichtunterlegenheit oder eben Gleichheit. Ich wähle hier mal eine Option von delta = 1 in der Funktion cld() um einfach mal zu zeigen, wie es dann aussieht.\n\n\nR Code [zeigen / verbergen]\nlm_cold_fit |&gt; \n  emmeans(~ trt) |&gt;\n  cld(Letters = letters, adjust = \"none\", delta = 1) |&gt; \n  arrange()\n\n\n trt  emmean    SE df lower.CL upper.CL .equiv.set\n 5      7.71 0.234 74     7.24     8.17  a        \n 4      7.87 0.224 74     7.42     8.32  a        \n 8      7.97 0.224 74     7.53     8.42  a        \n 3      8.09 0.224 74     7.64     8.54  a        \n 7      8.13 0.224 74     7.68     8.57  a        \n 6      8.14 0.245 74     7.65     8.62  a        \n ctrl   8.88 0.224 74     8.43     9.32   b       \n\nConfidence level used: 0.95 \nStatistics are tests of equivalence with a threshold of 1 \nP values are left-tailed \nsignificance level used: alpha = 0.05 \nEstimates sharing the same symbol test as equivalent \n\n\nHier unterscheiden sich nun alle Behandlungsgruppen von der Kontrolle. Die neuen Behandlungen unterscheiden sich aber untereinander nicht. Jetzt können wir uns noch anschauen, wie groß den der Mittelwertsunterschied für die einzelnen Behandlungen jeweils ist. Das kann uns die Funktion pwpm() wiedergeben.\n\n\nR Code [zeigen / verbergen]\nlm_cold_fit |&gt; \n  emmeans(~ trt) |&gt; \n  pwpm(adjust = \"none\")\n\n\n         ctrl        3        4        5        6        7      8\nctrl   [8.88]   0.0151   0.0021   0.0005   0.0286   0.0206 0.0057\n3     0.78844   [8.09]   0.4900   0.2401   0.8895   0.9033 0.7181\n4     1.00830  0.21986   [7.87]   0.6146   0.4258   0.4173 0.7413\n5     1.17217  0.38373  0.16387   [7.71]   0.2088   0.1965 0.4093\n6     0.74212 -0.04632 -0.26618 -0.43005   [8.14]   0.9816 0.6292\n7     0.74980 -0.03865 -0.25851 -0.42238  0.00767   [8.13] 0.6296\n8     0.90329  0.11485 -0.10501 -0.26888  0.16117  0.15350 [7.97]\n\nRow and column labels: trt\nUpper triangle: P values \nDiagonal: [Estimates] (emmean) \nLower triangle: Comparisons (estimate)   earlier vs. later\n\n\nWir lesen Lower triangle: Comparisons (estimate)   earlier vs. later und damit wird jeweils der ctrl- Mittelwert minus den Behandlungsmittelwerten in der ersten Spalte angegeben. Wir sehen, dass die Kontrolle immer ein größeres Wachstum hat. Damit haben wir zwar keine Gleichheit gezeigt, aber unsere Behandlungen haben alle weniger als die Kontrolle. Eventuell reicht das ja aus, wir haben zwar nicht gleich viel Wachstum wie die Kontrolle, aber durchgehend weniger.\nDas war jetzt hier natürlich die Version für Arme bzw. wenn wir im Rahmen einer Abschlussarbeit noch zusätzlich was berechnen wollen. Wenn es etwas aufwendiger sein soll, dann gibt es natürlich auch richtige statistischen Methoden für den Äquivalenztest.\n\n\n65.4.2 Äquivalenztest\nWenn wir wirklich in unserem Experiment oder Studie einen Äquivalenztest gleich von Anfang an rechnen wollen, dann können wir auch in R auf ein weitreichendes Angebot an Paketen und Funktionen zurückgreifen. Wie immer ist die Frage, was wollen wir? Wichtig ist, dass wir immer eine Gruppe brauchen zu der wir die Äquivalenz oder Gleichheit bestimmen wollen. Im Weiteren haben wir die Wahl zwischen zwei Ansätzen. Einmal den frequentistischen Ansatz sowie die bayesianische Variante. Ich möchte hier nicht mehr so ins Detail gehen, wir nutzen den frequentistischen Ansatz. Das hat auch den Vorteil, dass wir die Äquivalenz an 95% Konfidenzintervallen überprüfen. Mehr gibt es dann jeweils auf den beiden Hilfeseiten der Funktionen.\n\nEinmal den frequentistischen Ansatz aus dem Paket {parameters} durch die Funktion parameters::equivalence_test()\nOder die bayesianische Variante aus dem R Paket {bayestestR} durch die Funktion bayestestR::equivalence_test()\n\nWichtig ist, dass wir immer zum ersten Level des Faktors der Behandlung vergleichen! Das heißt, deine Kontrollgruppe sollte immer die erste Gruppe sein und das erste Level haben. Du kannst sonst mit der Funktion fct_relevel() und mutate() die Level neu anordnen. Wir haben hier aber das Glück, dass wir die Kontrolle als erstes Level der Behandlung trt vorliegen haben.\nWie gehen wir nun vor? Die Funktion equivalence_test() berechnet 95% Konfidenzintervalle für die paarweisen Vergleiche von jeder Behandlung zur Kontrolle. Wir erhalten also sechs 95% Konfidenzintervalle. Im Weiteren müssen wir entscheiden wie groß der Bereich der Äquivalenzzone sein soll. Wir müssen also über die Option range = Grenzen definieren und lassen die Funktion equivalence_test() die Grenzen selbstständig berechnen. Ich empfehle immer die Grenzen aus der Litertaur zu nehmen. In unserem Fall sind es die \\(\\log\\)-Grenzen aus der EFSA Regulierung mit -0.5 und 0.5, die setzen wir dann in die Option range = ein. Die range repräsentiert hierbei die Region of Practical Equivalence (ROPE) oder eben unsere Äquivalenzgrenzen.\n\n\nR Code [zeigen / verbergen]\nres_non_cold &lt;- parameters::equivalence_test(lm_non_cold_fit, \n                                             ci = 0.95,\n                                             range = c(-0.5, 0.5))\nres_non_cold\n\n\n# TOST-test for Practical Equivalence\n\n  ROPE: [-0.50 0.50]\n\nParameter   |         90% CI |   SGPV | Equivalence |      p\n------------------------------------------------------------\n(Intercept) | [ 6.99,  8.21] | &lt; .001 |    Rejected | &gt; .999\ntrt [3]     | [-1.81, -0.08] | 0.241  |    Rejected | 0.807 \ntrt [4]     | [-1.94, -0.22] | 0.164  |    Rejected | 0.868 \ntrt [5]     | [-2.87, -1.11] | &lt; .001 |    Rejected | 0.997 \ntrt [6]     | [-1.41,  0.39] | 0.494  |   Undecided | 0.541 \ntrt [7]     | [-2.16, -0.43] | 0.038  |    Rejected | 0.936 \ntrt [8]     | [-1.90, -0.18] | 0.188  |    Rejected | 0.851 \n\n\nWir sehen also einmal das Ergebnis unseres Äquivalenztest. Wichtig hierbei ist, dass wir zu der Kontrolle testen. Unsere Kontrolle steckt in dem (Intercept) und die Effekte aus der linearen Regression in lm_non_cold_fit beziehen sich ja alle auf den Intercept, so wird das Modell mit kategorialen Variablen gebaut. In der Spalte % in ROPE sehen wir in wie weit der Unterschied zwischen den Behandlungen, dargestellt als 95% Konfidenzintervall, in den Äquivalenzgrenzen liegt. In der folgenden Spalte H0 dann die Entscheidung für oder gegen die die Nullhypothese im Sinne der Gleichheit. Gut, das ist etwas wirr, schauen wir uns einmal die Abbildung 65.9 an, dann wird es klarer.\n\n\nR Code [zeigen / verbergen]\nplot(res_non_cold) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 65.9— Darstellung der zweiseitigen 95% Konfidenzintervalle für die Vergleiche der Behandlungen zu der Kontrolle. Liegt ein 95% Konfidenzintervall in den Äquivalenzgrenzen so kann die Nullhypothese und damit Gleichheit zur Kontrolle nicht abgelehnt werden.\n\n\n\n\n\nAls Ergebnis können wir mitnehmen, dass keine der Behandlungen gleich zur Kontrolle ist. Die Behandlung 6 ist noch am nächsten dran, gleich zu sein, aber wir können hier anhand den Daten keine Entscheidung treffen. Am Ende unterscheiden sich alle Behandlungen von der Kontrolle.\nAls anderes Beispiel schauen wir uns dann einmal noch die kälte Behandlung an. Hier sehen wir dann schon ein anderes Bild. Die Interpretation ist die gleiche wie eben schon. Wir wollen, dass die 95% Konfidenzintervalle in den Äquivalenzgrenzn von ROPE: [-0.50 0.50] liegen.\n\n\nR Code [zeigen / verbergen]\nres_cold &lt;- parameters::equivalence_test(lm_cold_fit, \n                                         ci = 0.95,\n                                         range = c(-0.5, 0.5))\nres_cold\n\n\n# TOST-test for Practical Equivalence\n\n  ROPE: [-0.50 0.50]\n\nParameter   |         90% CI |   SGPV | Equivalence |      p\n------------------------------------------------------------\n(Intercept) | [ 8.50,  9.25] | &lt; .001 |    Rejected | &gt; .999\ntrt [3]     | [-1.32, -0.26] | 0.227  |    Rejected | 0.817 \ntrt [4]     | [-1.54, -0.48] | 0.019  |    Rejected | 0.944 \ntrt [5]     | [-1.71, -0.63] | &lt; .001 |    Rejected | 0.979 \ntrt [6]     | [-1.30, -0.19] | 0.281  |    Rejected | 0.766 \ntrt [7]     | [-1.28, -0.22] | 0.263  |    Rejected | 0.784 \ntrt [8]     | [-1.43, -0.38] | 0.118  |    Rejected | 0.896 \n\n\nIn der Abbildung 65.10 sehen wir den Zusammenhang nochmal visualisiert. Hier fällt nochmal deutlicher auf, dass alle Behandlungen geringere Wachstumszahlen aufweisen. Wir könnten also Gleichheit auch so definieren, dass weniger oder gleich auch als äquivalent gilt. Das hängt natürlich vom biologischen Kontext ab, aber wir machen das jetzt einfach mal.\n\n\nR Code [zeigen / verbergen]\nplot(res_cold) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 65.10— Darstellung der zweiseitigen 95% Konfidenzintervalle für die Vergleiche der Behandlungen zu der Kontrolle. Liegt ein 95% Konfidenzintervall in den Äquivalenzgrenzen so kann die Nullhypothese und damit Gleichheit zur Kontrolle nicht abgelehnt werden.\n\n\n\n\n\nWenn du keine untere oder obere Grenze möchtest, also eigentlich nur eine Grenze, dann kannst du die andere Grenze auf Unendlich Inf setzen. Wir setzen hier mal die untere Grenze der Äquivalenz auf -Inf und testen somit faktisch nur einseitig.\n\n\nR Code [zeigen / verbergen]\nres_low_cold &lt;- parameters::equivalence_test(lm_cold_fit, \n                                             ci = 0.95,\n                                             range = c(-Inf, 0.5))\nres_low_cold \n\n\n# TOST-test for Practical Equivalence\n\n  ROPE: [-Inf 0.50]\n\nParameter   |         90% CI |   SGPV | Equivalence |      p\n------------------------------------------------------------\n(Intercept) | [ 8.50,  9.25] | &lt; .001 |    Accepted | &lt; .001\ntrt [3]     | [-1.32, -0.26] | &gt; .999 |    Accepted | 0.817 \ntrt [4]     | [-1.54, -0.48] | &gt; .999 |    Accepted | 0.944 \ntrt [5]     | [-1.71, -0.63] | &gt; .999 |    Accepted | 0.979 \ntrt [6]     | [-1.30, -0.19] | &gt; .999 |    Accepted | 0.766 \ntrt [7]     | [-1.28, -0.22] | &gt; .999 |    Accepted | 0.783 \ntrt [8]     | [-1.43, -0.38] | &gt; .999 |    Accepted | 0.896 \n\n\nWir sehen jetzt, dass sich alle 95% Konfidenzintervalle im ROPE-Bereich befinden. Damit sind dann auch alle Behandlungen gleich zur Kontrolle. Das gilt natürlich nur, da wir weniger als gleich definiert haben! Schauen wir nochmal in der Abbildung 65.11 uns die Visualisierung an.\n\n\nR Code [zeigen / verbergen]\nplot(res_low_cold) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 65.11— Darstellung der einseitigen 95% Konfidenzintervalle für die Vergleiche der Behandlungen zu der Kontrolle. Liegt ein 95% Konfidenzintervall in den Äquivalenzgrenzen so kann die Nullhypothese und damit Gleichheit zur Kontrolle nicht abgelehnt werden. Hier wurde nur einseitig getestet, da weniger als die Kontrolle in dem biologischen Kontext auch als Äquivalenz zählt.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Äquivalenz oder Nichtunterlegenheit</span>"
    ]
  },
  {
    "objectID": "stat-modeling-noninferiority.html#referenzen",
    "href": "stat-modeling-noninferiority.html#referenzen",
    "title": "65  Äquivalenz oder Nichtunterlegenheit",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nAltman, D. G., & Bland, J. M. (1995). Statistics notes: Absence of evidence is not evidence of absence. Bmj, 311(7003), 485.\n\n\nVoet, H. van der, Goedhart, P. W., Garcı́a-Ruiz, E., Escorial, C., & Tulinská, J. (2019). Equivalence limit scaled differences for untargeted safety assessments: Comparative analyses to guard against unintended effects on the environment or human health of genetically modified maize. Food and Chemical Toxicology, 125, 540–548.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Äquivalenz oder Nichtunterlegenheit</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html",
    "href": "stat-modeling-meta.html",
    "title": "66  Metaanalysen",
    "section": "",
    "text": "66.1 Genutzte R Pakete\nLetzte Änderung am 10. January 2025 um 13:33:32\nIn diesem Kapitel wollen wir uns einmal die Metaanalyse oder indirekte Vergleiche anschauen. Wir halten das Kapitel bewusst kurz, denn wenn wir das Thema ausführlich behandeln wollten, dann wäre es ein eigenes Buch. Das wollen wir aber nicht, es reicht, wenn wir hier die Grundlagen verstehen. Das heißt vor allem, dass wir die Daten so erstellt kriegen, dass wir selber eine Marktanalyse rechnen können. Der Fokus ist hier auf den Agrarwissenschaften, aber die Beispiele wurden von mir aus dem “Doing Meta-Analysis with R: A Hands-On Guide” von Harrer et al. (2021) adaptiert und in einen neuen Kontext gesetzt. Wenn du wirklich eine Metaanalyse rechnen willst, dann musst du nochmal durch das Buch von Harrer et al. (2021) oder den Artikel von Balduzzi et al. (2019) durcharbeiten.\nAlso gut, was macht also eine Metananalyse oder warum heißt es den indirekter Vergleich? Wenn wir normalerweise ein Experiment durchführen, dann messen wir verschiedene Outcomes und Einflussvariablen, rechnen ein Modell oder einen einfacheren statistischen Test und berichten die Effektschätzer und den \\(p\\)-Wert in einer wissenschaftlichen Veröffentlichung. Hier setzt die Metaanalyse dann an. Wir kombinieren nämlich die Ergebnisse und damit die Effektschätzer verschiedener Studien in einer riesigen Studie. Und diese riesige Studie nennen wir dann Metaanalyse. Wir kombinieren hierbei nur die Effektschätzer aus den verschiedenen Studien. Der algorithmische Prozess ist nicht so simple, basiert aber auf der wichtigen Annahme, dass die Studien alle in etwa homogen sind. Der Begriff ist hier sehr weit gefasst. Alle Studien müssen natürlich das gleiche Outcome haben, die gleichen Menschen, Tiere oder Pflanzen beobachten sowie das statistische Modell muss das Gleiche sein. Du siehst schnell, bevor du eine Metaanalyse rechnen kannst, geht sehr viel Zeit in die Suche nach passenden wissenschaftlichen Veröffentlichungen. Daher ist jeder Metaanalyse eigentlich eine systematische Literaturrecherche (eng. systematic review) vorgeschaltet. Wenn du mehr darüber lesen möchtest, dann kann dir Tawfik et al. (2019) einen Einstieg liefern.\nNoch als kleine Randbemerkung, wenn du aus den medizinischen Bereich kommst, dann solltest du die Leitlinien in den Allgemeinen Methoden des Institut für Qualität und Wirtschaftlichkeit im Gesundheitswesen (IQWiG) zu den Metaanalysen oder indirketen Vergleichen kennen. Wir können hier leider nicht in die Tiefe der Leitlinien abtauchen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, meta, conflicted)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#daten",
    "href": "stat-modeling-meta.html#daten",
    "title": "66  Metaanalysen",
    "section": "66.2 Daten",
    "text": "66.2 Daten\nWoher kommen eigentlich die Daten einer Metaanalyse? Wir können Google Scholar nutzen um zu einem Thema systematisch wissenschaftliche Veröffentlichungen zu suchen. Der Fokus liegt hier auf systematisch und beschreibt einen strukturierten Reviewprozess. In diesem Kapitel nutzen wir die Daten von Harrer et al. (2021) modifiziert auf ein agrarwissenschaftliches Beispiel. Wie immer liefert die originale Quelle noch mehr Informationen, wir kürzen hier einmal ab, damit wir die Kerngedanken verstehen.\n\n\nA step by step guide for conducting a systematic review and meta-analysis with simulation data\nBeginnen wir mit einer Datensatz in dem wir uns den Effekt von mittleren Erträgen in Weizen unter der Gabe von Eisen anschauen. Wir haben uns hier für eine Eisendosis mit \\(10\\mu mol\\) entschieden, die in allen Studien vorgekommen ist. Dann haben wir noch geschaut wie viele Pflanzen in der Gruppe untersucht wurden und wie die mitteleren Effekte plus die Standardabweichung waren.\n\n\nR Code [zeigen / verbergen]\ndrymatter_tbl &lt;- read_excel(\"data/meta/drymatter_iron_studies.xlsx\") \n\n\nSchauen wir uns nochmal die Daten genauer an. Hier ist es besonders wichtig zu beachten, dass wir uns einen Wert aus einem ganzen Experiment anschauen und verschiedene Werte aus verschiedenen Experimenten dann miteinander in Verbindung setzen wollen.\n\n\n\n\nTabelle 66.1— Daten zu den Weizenerträgen nach der Gabe von einer Eisendosis mit \\(10\\mu mol\\). In allen Studien wurde die gleiche Dosis auf die \\(n\\) Pflanzen gegeben.\n\n\n\n\n\n\nauthor\nn\nmean\nsd\n\n\n\n\nDeRubeis, 2005\n180\n32.6\n9.4\n\n\nDimidjian, 2006\n145\n31.9\n7.4\n\n\nDozois, 2009\n48\n28.6\n9.9\n\n\nLesperance, 2007\n142\n30.3\n9.1\n\n\nMcBride, 2007\n301\n31.9\n9.2\n\n\nQuilty, 2014\n104\n29.8\n8.6\n\n\n\n\n\n\n\n\nEin weiterer Effekt den wir uns anschauen können ist der Vergleich von Anteilen. In diesem Fall haben wir Ereignisse (eng. event) gezählt und wissen aber auch die Gesamtzahl an möglichen Ereignissen. Konkret haben wir die Anzahl an infizierten Sonnenblumensamen mit Mehltau nach der Behandlung mit MoldEx betrachtet. Dabei haben wir richtig viele Pflanzen (\\(n\\)) angeschaut und gezählt wie viele Samen dann mit Mehltau infiziert waren (event).\n\n\nR Code [zeigen / verbergen]\nsunflower_tbl &lt;- read_excel(\"data/meta/infected_sunflower_studies.xlsx\") \n\n\nAuch hier haben wir einmal in die ganzen Studien zu dem Wirkstoff MoldEx geschaut und jeweils rausgeschrieben, wie viele Sonnenblumensamen (\\(n\\)) betrachtet wurden und wie viele von den Sonnenblumen dann infiziert waren (event).\n\n\n\n\nTabelle 66.2— Daten zu den mit Mehltau infizierten Sonnenblumensamen nach der Behandlung mit MoldEx.\n\n\n\n\n\n\nauthor\nevent\nn\n\n\n\n\nBecker, 2008\n2186\n21826\n\n\nBoyd, 2009\n91\n912\n\n\nBoyd, 2007\n126\n1084\n\n\nCerda, 2014\n543\n7646\n\n\nFiellin, 2013\n6496\n55215\n\n\nJones, 2013\n10850\n114783\n\n\nLord, 2011\n86\n527\n\n\nMcCabe, 2005\n668\n9403\n\n\nMcCabe, 2012\n843\n11274\n\n\nMcCabe, 2013\n647\n8888\n\n\nNakawai, 2012\n11521\n126764\n\n\nSung, 2005\n1111\n11554\n\n\nTetrault, 2007\n2090\n16599\n\n\nWu, 2008\n2193\n25127\n\n\nZullig, 2012\n1913\n22783\n\n\n\n\n\n\n\n\nHäufig kann es vorkommen, dass wir weder die Mittelwerte und die Standardabweichung vorliegen haben oder aber die Anteile. Meist haben wir dann Glück, dass wir Effektschätzer wie das Odds ratio (\\(OR\\)), Risk ratio (\\(RR\\)) für die Anteile vorliegen haben. Oder aber wir finden Cohen’s \\(d\\) oder Hedge’s \\(g\\) für den Effekt der standardisierten Mittelwertsunterschiede.\nIn unserem Fall haben wir jetzt Euterkrebsdaten von Kühen und die entsprechenden Hedge’s \\(g\\) Werte für die Differenz der Kontrolle zur Chemotherapie. Auch hier haben alle Kühe die gleiche Chemotherapie erhalten und wir sind nur an dem Effekt zu der Kontrolle interessiert. Es gibt also nur einen paarweisen Gruppenvergleich.\n\n\nR Code [zeigen / verbergen]\ncow_tbl &lt;- read_excel(\"data/meta/cow_cancer_studies.xlsx\") \n\n\nSchauen wir uns nochmal einen Ausschnitt der Daten in der zu dem Euterkrebs von Kühen an.\n\n\n\n\nTabelle 66.3— Daten zum Euterkrebs von Kühen nach der Behandlung mit einer Chemotherapie zu einer Kontrolle.\n\n\n\n\n\n\nAuthor\nTE\nseTE\n\n\n\n\nCall et al.\n0.71\n0.26\n\n\nCavanagh et al.\n0.35\n0.20\n\n\nDanitzOrsillo\n1.79\n0.35\n\n\nde Vibe et al.\n0.18\n0.12\n\n\nFrazier et al.\n0.42\n0.14\n\n\nFrogeli et al.\n0.63\n0.20\n\n\nGallego et al.\n0.72\n0.22\n\n\nHazlett-Stevens & Oren\n0.53\n0.21\n\n\nHintz et al.\n0.28\n0.17\n\n\nKang et al.\n1.28\n0.34\n\n\nKuhlmann et al.\n0.10\n0.19\n\n\nLever Taylor et al.\n0.39\n0.23\n\n\nPhang et al.\n0.54\n0.24\n\n\nRasanen et al.\n0.43\n0.26\n\n\nRatanasiripong\n0.52\n0.35\n\n\nShapiro et al.\n1.48\n0.32\n\n\nSong & Lindquist\n0.61\n0.23\n\n\nWarnecke et al.\n0.60\n0.25\n\n\n\n\n\n\n\n\nWir haben jetzt also insgesamt drei Datensätze. Einmal einen Datensatz zu Weizenerträgen mit dem Effekt der Mittelwerte, einen Datensatz der Infektionen von Sonnenblumen mit Anteilen sowie einem Datensatz mit Euterkrebs mit vorausberechneten Effektmaß Hedge’s \\(g\\).",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#das-modell-mit-fixen-effekten",
    "href": "stat-modeling-meta.html#das-modell-mit-fixen-effekten",
    "title": "66  Metaanalysen",
    "section": "66.3 Das Modell mit fixen Effekten",
    "text": "66.3 Das Modell mit fixen Effekten\nDie Idee hinter dem Modell mit fixen Effekten (eng. fixed effect) ist, dass die beobachteten Effektgrößen von Studie zu Studie variieren können, was aber nur auf den Stichprobenfehler zurückzuführen ist. In Wirklichkeit sind die wahren Effektgrößen alle gleich: die Effekte sind fix. Aus diesem Grund wird das Modell mit festen Effekten manchmal auch als Modell mit “gleichen Effekten” oder “gemeinsamen Effekten” bezeichnet.\nDas Modell der festen Effekte geht davon aus, dass alle unsere Studien Teil einer homogenen Population sind und dass die einzige Ursache für Unterschiede in den beobachteten Effekten der Stichprobenfehler der Studien ist. Wenn wir die Effektgröße jeder Studie ohne Stichprobenfehler berechnen würden, wären alle wahren Effektgrößen absolut gleich.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#das-modell-mit-zufälligen-effekten",
    "href": "stat-modeling-meta.html#das-modell-mit-zufälligen-effekten",
    "title": "66  Metaanalysen",
    "section": "66.4 Das Modell mit zufälligen Effekten",
    "text": "66.4 Das Modell mit zufälligen Effekten\nDas Modell der zufälligen Effekte (eng. random effect) geht davon aus, dass es nicht nur eine wahre Effektgröße gibt, sondern eine Verteilung der wahren Effektgrößen. Das Ziel des Modells mit zufälligen Effekten ist es daher nicht, die eine wahre Effektgröße aller Studien zu schätzen, sondern den Mittelwert der Verteilung der wahren Effekte.\nIn der Praxis ist es sehr ungewöhnlich, eine Auswahl von Studien zu finden, die vollkommen homogen ist. Dies gilt selbst dann, wenn wir uns an bewährte Verfahren halten und versuchen, den Umfang unserer Analyse so präzise wie möglich zu gestalten.\nIn vielen Bereichen, einschließlich der Medizin und der Sozialwissenschaften, ist es daher üblich, immer ein Modell mit zufälligen Effekten zu verwenden, da ein gewisses Maß an Heterogenität zwischen den Studien praktisch immer zu erwarten ist. Ein Modell mit festen Effekten kann nur dann verwendet werden, wenn keine Heterogenität zwischen den Studien festgestellt werden konnte und wenn wir sehr gute Gründe für die Annahme haben, dass der wahre Effekt fest ist. Dies kann zum Beispiel der Fall sein, wenn nur exakte Replikationen einer Studie betrachtet werden oder wenn wir Teilmengen einer großen Studie meta-analysieren. Natürlich ist dies nur selten der Fall, und Anwendungen des Modells mit festem Effekt “in freier Wildbahn” sind eher selten.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#indirekte-vergleiche-in-r",
    "href": "stat-modeling-meta.html#indirekte-vergleiche-in-r",
    "title": "66  Metaanalysen",
    "section": "66.5 Indirekte Vergleiche in R",
    "text": "66.5 Indirekte Vergleiche in R\n\n\nR Code [zeigen / verbergen]\nm.mean &lt;- metamean(n = n,\n                   mean = mean,\n                   sd = sd,\n                   studlab = author,\n                   data = drymatter_tbl,\n                   sm = \"MRAW\",\n                   fixed = FALSE,\n                   random = TRUE,\n                   method.tau = \"REML\",\n                   hakn = TRUE,\n                   title = \"Ertrag von Weizen nach Eisenbehandlung\")\n\n\nsummary(m.mean)\n\n\nReview:     Ertrag von Weizen nach Eisenbehandlung\n\n                    mean             95%-CI %W(random)\nDeRubeis, 2005   32.6000 [31.2268; 33.9732]       18.0\nDimidjian, 2006  31.9000 [30.6955; 33.1045]       19.4\nDozois, 2009     28.6000 [25.7993; 31.4007]        9.1\nLesperance, 2007 30.3000 [28.8033; 31.7967]       17.0\nMcBride, 2007    31.9000 [30.8607; 32.9393]       20.7\nQuilty, 2014     29.8000 [28.1472; 31.4528]       15.8\n\nNumber of studies: k = 6\nNumber of observations: o = 920\n\n                        mean             95%-CI\nRandom effects model 31.1221 [29.6656; 32.5786]\n\nQuantifying heterogeneity:\n tau^2 = 1.0937 [0.0603; 12.9913]; tau = 1.0458 [0.2456; 3.6043]\n I^2 = 64.3% [13.8%; 85.2%]; H = 1.67 [1.08; 2.60]\n\nTest of heterogeneity:\n     Q d.f. p-value\n 14.00    5  0.0156\n\nDetails on meta-analytical method:\n- Inverse variance method\n- Restricted maximum-likelihood estimator for tau^2\n- Q-Profile method for confidence interval of tau^2 and tau\n- Hartung-Knapp adjustment for random effects model (df = 5)\n- Untransformed (raw) means\n\n\n\n\nR Code [zeigen / verbergen]\nm.prop &lt;- metaprop(event = event,\n                   n = n,\n                   studlab = author,\n                   data = sunflower_tbl,\n                   method = \"GLMM\",\n                   sm = \"PLOGIT\",\n                   fixed = FALSE,\n                   random = TRUE,\n                   hakn = TRUE,\n                   title = \"Befall von Sonnenblumen mit Mehltau\")\nsummary(m.prop)\n\n\nReview:     Befall von Sonnenblumen mit Mehltau\n\n               proportion           95%-CI\nBecker, 2008       0.1002 [0.0962; 0.1042]\nBoyd, 2009         0.0998 [0.0811; 0.1211]\nBoyd, 2007         0.1162 [0.0978; 0.1368]\nCerda, 2014        0.0710 [0.0654; 0.0770]\nFiellin, 2013      0.1176 [0.1150; 0.1204]\nJones, 2013        0.0945 [0.0928; 0.0962]\nLord, 2011         0.1632 [0.1327; 0.1976]\nMcCabe, 2005       0.0710 [0.0659; 0.0764]\nMcCabe, 2012       0.0748 [0.0700; 0.0798]\nMcCabe, 2013       0.0728 [0.0675; 0.0784]\nNakawai, 2012      0.0909 [0.0893; 0.0925]\nSung, 2005         0.0962 [0.0908; 0.1017]\nTetrault, 2007     0.1259 [0.1209; 0.1311]\nWu, 2008           0.0873 [0.0838; 0.0908]\nZullig, 2012       0.0840 [0.0804; 0.0876]\n\nNumber of studies: k = 15\nNumber of observations: o = 434385\nNumber of events: e = 41364\n\n                     proportion           95%-CI\nRandom effects model     0.0944 [0.0836; 0.1066]\n\nQuantifying heterogeneity:\n tau^2 = 0.0558; tau = 0.2362; I^2 = 98.3% [97.9%; 98.7%]; H = 7.74 [6.92; 8.66]\n\nTest of heterogeneity:\n           Q d.f.  p-value\n Wald 838.21   14 &lt; 0.0001\n LRT  826.87   14 &lt; 0.0001\n\nDetails on meta-analytical method:\n- Random intercept logistic regression model\n- Maximum-likelihood estimator for tau^2\n- Random effects confidence interval based on t-distribution (df = 14)\n- Logit transformation\n- Clopper-Pearson confidence interval for individual studies\n\n\n\n\nR Code [zeigen / verbergen]\nm.gen &lt;- metagen(TE = TE,\n                 seTE = seTE,\n                 studlab = Author,\n                 data = cow_tbl,\n                 sm = \"SMD\",\n                 fixed = FALSE,\n                 random = TRUE,\n                 method.tau = \"REML\",\n                 hakn = TRUE,\n                 title = \"Third Wave Psychotherapies\")\nsummary(m.gen)\n\n\nReview:     Third Wave Psychotherapies\n\n                          SMD            95%-CI %W(random)\nCall et al.            0.7091 [ 0.1979; 1.2203]        5.0\nCavanagh et al.        0.3549 [-0.0300; 0.7397]        6.3\nDanitzOrsillo          1.7912 [ 1.1139; 2.4685]        3.8\nde Vibe et al.         0.1825 [-0.0484; 0.4133]        7.9\nFrazier et al.         0.4219 [ 0.1380; 0.7057]        7.3\nFrogeli et al.         0.6300 [ 0.2458; 1.0142]        6.3\nGallego et al.         0.7249 [ 0.2846; 1.1652]        5.7\nHazlett-Stevens & Oren 0.5287 [ 0.1162; 0.9412]        6.0\nHintz et al.           0.2840 [-0.0453; 0.6133]        6.9\nKang et al.            1.2751 [ 0.6142; 1.9360]        3.9\nKuhlmann et al.        0.1036 [-0.2781; 0.4853]        6.3\nLever Taylor et al.    0.3884 [-0.0639; 0.8407]        5.6\nPhang et al.           0.5407 [ 0.0619; 1.0196]        5.3\nRasanen et al.         0.4262 [-0.0794; 0.9317]        5.1\nRatanasiripong         0.5154 [-0.1731; 1.2039]        3.7\nShapiro et al.         1.4797 [ 0.8618; 2.0977]        4.2\nSong & Lindquist       0.6126 [ 0.1683; 1.0569]        5.7\nWarnecke et al.        0.6000 [ 0.1120; 1.0880]        5.2\n\nNumber of studies: k = 18\n\n                             SMD           95%-CI    t  p-value\nRandom effects model (HK) 0.5771 [0.3782; 0.7760] 6.12 &lt; 0.0001\n\nQuantifying heterogeneity:\n tau^2 = 0.0820 [0.0295; 0.3533]; tau = 0.2863 [0.1717; 0.5944]\n I^2 = 62.6% [37.9%; 77.5%]; H = 1.64 [1.27; 2.11]\n\nTest of heterogeneity:\n     Q d.f. p-value\n 45.50   17  0.0002\n\nDetails on meta-analytical method:\n- Inverse variance method\n- Restricted maximum-likelihood estimator for tau^2\n- Q-Profile method for confidence interval of tau^2 and tau\n- Hartung-Knapp adjustment for random effects model (df = 17)",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#forest-plots",
    "href": "stat-modeling-meta.html#forest-plots",
    "title": "66  Metaanalysen",
    "section": "66.6 Forest Plots",
    "text": "66.6 Forest Plots\n\n\nForest Plots\n\n\nR Code [zeigen / verbergen]\nforest(m.mean, \n            sortvar = TE,\n            prediction = TRUE, \n            print.tau2 = FALSE)\n\n\n\n\n\n\n\n\nAbbildung 66.1— foo.\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nforest(m.prop, \n            sortvar = TE,\n            prediction = TRUE, \n            print.tau2 = FALSE,\n            leftlabs = c(\"Author\", \"event\", \"n\"))\n\n\n\n\n\n\n\n\nAbbildung 66.2— foo.\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nforest(m.gen, \n            sortvar = TE,\n            prediction = TRUE, \n            print.tau2 = FALSE,\n            leftlabs = c(\"Author\", \"g\", \"SE\"))\n\n\n\n\n\n\n\n\nAbbildung 66.3— foo.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#publication-bias",
    "href": "stat-modeling-meta.html#publication-bias",
    "title": "66  Metaanalysen",
    "section": "66.7 Publication Bias",
    "text": "66.7 Publication Bias\n\n\nPublication Bias\n\n\nR Code [zeigen / verbergen]\nfunnel(m.prop,\n            xlim = c(-3, -1.5),\n            studlab = TRUE)\n\nfunnel(m.mean,\n            xlim = c(27, 35),\n            studlab = TRUE)\n\nfunnel(m.gen,\n            xlim = c(-0.5, 2),\n            studlab = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Verteilung der beobachteten Werte.\n\n\n\n\n\n\n\n\n\n\n\n(b) Verteilung der theoretischen Werte.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) TEst\n\n\n\n\n\n\n\nAbbildung 66.4— dst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-meta.html#referenzen",
    "href": "stat-modeling-meta.html#referenzen",
    "title": "66  Metaanalysen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nBalduzzi, S., Rücker, G., & Schwarzer, G. (2019). How to perform a meta-analysis with R: a practical tutorial. BMJ Ment Health, 22(4), 153–160.\n\n\nHarrer, M., Cuijpers, P., A, F. T., & Ebert, D. D. (2021). Doing Meta-Analysis With R: A Hands-On Guide (1st Aufl.). Chapman & Hall/CRC Press.\n\n\nTawfik, G. M., Dila, K. A. S., Mohamed, M. Y. F., Tam, D. N. H., Kien, N. D., Ahmed, A. M., & Huy, N. T. (2019). A step by step guide for conducting a systematic review and meta-analysis with simulation data. Tropical medicine and health, 47(1), 1–9.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Metaanalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html",
    "href": "stat-modeling-cluster.html",
    "title": "67  Clusteranalysen",
    "section": "",
    "text": "67.1 Genutzte R Pakete\nLetzte Änderung am 24. March 2024 um 08:19:39\nIn diesem Kapitel wollen wir uns mit der Clusteranalyse beschäftigen. Zuerst was verstehen wir unter einem Cluster? Ein Cluster ist ein Zusammenschluss von ähnlichen Beobachtungen. Nun stellt sich zuerst die Frage, was heißt ähnlich? Wir brauchen also Maßzahlen für die Ähnlichkeit zwischen zwei und mehreren Beobachtungen. In unserem Datensatz haben wir ja nicht nur zwei Beobachtungen, also Zeilen, sondern sehr viel mehr. Im Weiteren haben wir in erster Linie kein Outcome \\(y\\). Wir nehmen alle Spalten \\(x\\) aus unseren Daten und versuchen anhand der Spalten Gruppen über die Beobachtungen in den Zeilen zu bilden. Manchmal wollen wir dann nachräglich die Cluster nach einer Spalte in unseren ursprünglichen Daten einfärben oder benennen. Dieses Benennen von bekannten Zuordnungen hat aber erstmal mit dem Clusteralgorithmus nichts zu tun. Wir schauen uns im Folgenden diese Schwerpunktthemen an.\nWie immer können wir nicht alles erschlagen und deshalb machen wir hier auch nur ein Auswahl. Mehr geht immer und dafür ist dann der folgende Kasten mit weiteren Tutorien für die Clusteranalyse da.\nWir wollen uns die Clusteranalyse an zwei Spieldaten anschauen sowie einmal an den echten Daten zu den Gummibärchen. Eigentlich werden ja auch gerne Fragebögen mit der Clusteranalyse ausgewertet, aber hier muss ich nochmal warten bis ich ein gutes Beispiel in den Beratungen hatte.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\nset.seed(20230727)\npacman::p_load(tidyverse, magrittr, palmerpenguins, readxl,\n               ggdendro, broom, cluster, factoextra, FactoMineR, \n               pheatmap, tidyclust, dlookr, janitor, corrplot,\n               dendextend, see, conflicted)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(dlookr::transform)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html#daten",
    "href": "stat-modeling-cluster.html#daten",
    "title": "67  Clusteranalysen",
    "section": "67.2 Daten",
    "text": "67.2 Daten\nBeginnen wir mit einem normierten Datensatz aus dem R Paket {cluster}. Der Datensatz animals wurde von mir noch mit ein paar Tieren ergänzt und schaut sich sechs Eigenschaften von 23 Tieren an. Wir wollen im Folgenden nun herausfinden, ob wir anhand der Eigenschaften in den Spalten die Tiere in den Zeilen in Gruppen einordnen können. Einige der Tiere sind ja näher miteinander verwandt als andere Tiere. Die ursprünglichen Daten liefen noch auf einem \\(1/2\\)-System, das ändern wir dann zu \\(0/1\\) damit wir dann auch besser mit den Daten arbeiten können. Für die Algorithmen ist es egal, aber ich habe lieber \\(1\\) gleich ja und \\(0\\) gleich nein.\n\n\nR Code [zeigen / verbergen]\nanimals_tbl &lt;- read_excel(\"data/cluster_animal.xlsx\", sheet = 1) |&gt; \n  clean_names() |&gt; \n  mutate(across(where(is.numeric), \\(x) x - 1))\n\n\nSchauen wir uns einmal den Datensatz in der Tabelle 68.3 an. Wir sehen, dass wir noch einige fehlende Werte in den Daten vorliegen haben. Das ist manchmal ein Problem, deshalb werden wir im Laufe der Analyse die NA Werte mit na.omit() entfernen.\n\n\n\n\nTabelle 67.1— Übersicht über die 23 Tiere mit den sechs Eigenschaften in den Spalten. Eine 1 bedeutet, dass die Eigenschaft vorliegt; eine 0 das die Eigenschaft nicht vorliegt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nanimal\nwarm_blooded\nfly\nvertebrate\nthreatened\nlive_in_groups\nhair\n\n\n\n\nant\n0\n0\n0\n0\n1\n0\n\n\nbee\n0\n1\n0\n0\n1\n1\n\n\ncat\n1\n0\n1\n0\n0\n1\n\n\ncentipede\n0\n0\n0\n0\n0\n1\n\n\nchimpanzee\n1\n0\n1\n1\n1\n1\n\n\ncow\n1\n0\n1\n0\n1\n1\n\n\ndolphin\n1\n0\n1\n1\n1\n0\n\n\nduck\n1\n1\n1\n0\n1\n0\n\n\neagle\n1\n1\n1\n1\n0\n0\n\n\nearthworm\n0\n0\n0\n0\n0\n0\n\n\nelephant\n1\n0\n1\n1\n1\n0\n\n\nfly\n0\n1\n0\n0\n0\n0\n\n\nfrog\n0\n0\n1\n1\nNA\n0\n\n\nherring\n0\n0\n1\n0\n1\n0\n\n\nhorse\n1\n0\n1\n0\n1\n1\n\n\nhuman\n1\n0\n1\n1\n1\n1\n\n\nlion\n1\n0\n1\nNA\n1\n1\n\n\nlizard\n0\n0\n1\n0\n0\n0\n\n\nlobster\n0\n0\n0\n0\nNA\n0\n\n\nrabbit\n1\n0\n1\n0\n1\n1\n\n\nsalmon\n0\n0\n1\n0\nNA\n0\n\n\nspider\n0\n0\n0\nNA\n0\n1\n\n\nwhale\n1\n0\n1\n1\n1\n0\n\n\n\n\n\n\n\n\nDer Tierdatensatz ist schön, da wir es hier nur mit 0/1 Werten zu tun haben. Wir werden später in dem preprocessing der Daten sehen, dass wir alle Spalten in der gleichen Spannweite der Werte wollen. Das klingt immer etwas kryptisch, aber der nächste Datensatz über verschiedene Kreaturen macht es deutlicher.\n\n\nEine andere Art die Daten zu Gruppieren kannst du im Tutorium Clustering Creatures nochmal nachvollziehen.\nIm Folgenen einmal der Datensatz, den wir dann in der gleichen Exceldatei finden nur eben auf dem zweiten Tabellenblatt. Wir reinigen noch die Namen und setzen die creature-Spalte auf Klein geschrieben. Wie du siehst, haben wir dann nur 15 Kreaturen und drei Spalten mit dem Gewicht, der Herzrate und dem maximalen möglichen Alter.\n\n\nR Code [zeigen / verbergen]\ncreature_tbl &lt;- read_excel(\"data/cluster_animal.xlsx\", sheet = 2) |&gt; \n  clean_names() |&gt; \n  mutate(creature = tolower(creature))\n\n\nIn der Tabelle 68.4 sehen wir nochmal die Daten dargestellt und hier erkennst du auch gut, wo das Problem liegt. Die Masse der Tiere reicht von \\(6g\\) beim Hamster bis \\(120000000g\\) beim Wal. Diese Spannweiten in einer Spalte und zwischen den Spalten führt dann zu Problemen bei den Algorithmen. Deshalb müssen wir hier Daten nochmal normalisieren oder aber standardisieren. Je nachdem was da besser passt.\n\n\n\n\nTabelle 67.2— Übersicht über die 15 Kreaturen mit den drei Eigenschaften in den Spalten. Wir haben hier sehr große Unterschiede in den Datenwerten. Daher müssen wir vor dem Clustern nochmal normalisieren.\n\n\n\n\n\n\ncreature\nmass_grams\nheart_rate_bpm\nlongevity_years\n\n\n\n\nhuman\n9.0e+04\n60\n70\n\n\ncat\n2.0e+03\n150\n15\n\n\nsmall dog\n2.0e+03\n100\n10\n\n\nmedium dog\n5.0e+03\n90\n15\n\n\nlarge dog\n8.0e+03\n75\n17\n\n\nhamster\n6.0e+01\n450\n3\n\n\nchicken\n1.5e+03\n275\n15\n\n\nmonkey\n5.0e+03\n190\n15\n\n\nhorse\n1.2e+06\n44\n40\n\n\ncow\n8.0e+05\n65\n22\n\n\npig\n1.5e+05\n70\n25\n\n\nrabbit\n1.0e+03\n205\n9\n\n\nelephant\n5.0e+06\n30\n70\n\n\ngiraffe\n9.0e+05\n65\n20\n\n\nlarge whale\n1.2e+08\n20\n80\n\n\n\n\n\n\n\n\nIm Weiteren betrachten wir noch das Beispiel der Gummibärchendaten. Auch hier haben wir echte Daten vorliegen, so dass wir eventuell Ausreißer entdecken könnten. Da wir hier fehlende Werte in den Daten haben, entfernen wir alle fehlenden Werte mit der Funktion na.omit(). Damit löschen wir jede Zeile in den Daten, wo mindestens ein fehlender Wert auftritt. Da wir hier mittlerweile sehr viele Daten vorliegen haben, wollen wir das Problem auf die beiden Quellen FU Berlin und dem Girls and Boys Day eingrenzen.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\")  |&gt;\n  filter(module %in% c(\"FU Berlin\", \"Girls and Boys Day\")) |&gt; \n  select(gender, age, height, semester, most_liked) |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked)) |&gt; \n  na.omit()\n\n\nAuch hier schauen wir uns in der Tabelle die ersten sieben Beobachtungen von den 192 Beobachtungen an. Wir sehen, dass wir hier mal ganz unterschiedliche Typen an Daten haben. Zum einen sehen wir dichotome Daten, wie das Geschlecht, sowie numerisch wie Alter und Größe, dann noch das Semester mit einer eher geordneten Struktur und nochmal ein Faktor mit sechs Stufen. Das schauen wir uns dann nochmal am Ende an, was wir dann machen können.\n\n\n\n\nTabelle 67.3— Auszuga us den Gummibärchendaten für die ersten sieben Beobachtungen.\n\n\n\n\n\n\ngender\nage\nheight\nsemester\nmost_liked\n\n\n\n\nm\n35\n193\n10\nlightred\n\n\nw\n21\n159\n6\nyellow\n\n\nw\n21\n159\n6\nwhite\n\n\nw\n36\n180\n10\nwhite\n\n\nm\n22\n180\n3\nwhite\n\n\nm\n22\n180\n3\ngreen\n\n\nw\n21\n163\n3\ngreen\n\n\n\n\n\n\n\n\nBevor wir jetzt aber die Daten clustern können, müssen wir die Daten vorher nochmal aufbereiten, damit die Algorithmen mit den Daten arbeiten können. Dann müssen wir am Ende auch noch vom tibble() in den data.frame() wechseln, da wir die Zeilennamen häufig brauchen. Wenn du beim tibble() bleiben willst, dann gibt es am Ende noch eine mögliche Lösung für dich.\n\n\n\n\n\n\nWeitere Datensätze fürs Clustern\n\n\n\n\n\nAndere mögliche Datensätze für die Zukunft: chorSub, flower, plantTraits, pluton, ruspini und agriculture. Die Datensätze sind teilweise im R Paket {cluster} enthalten.\nIm Weiteren noch die Palmer Penguins mit dem Datensatz penguins aus dem R Paket {palmerpenguins}.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html#daten-preprocessing",
    "href": "stat-modeling-cluster.html#daten-preprocessing",
    "title": "67  Clusteranalysen",
    "section": "67.3 Daten preprocessing",
    "text": "67.3 Daten preprocessing\nWir können die Daten so wir wie sie vorliegen haben in einem Clusteralgorithmus verwenden. Wir führen also keine Transformation der Daten durch, wir nutzen die Daten untransformiert. Dieses untransfomierte Verwenden der Daten führt aber meist dazu, dass Variablen nicht im gleichen Maße berücksichtigt werden. Es macht eben einen Unterschied, ob wir wie bei dem Alter sehr viele verschiedene Werte haben als beim Geschlecht. Es macht auch einen Unterschied, ob das Alter numerische Werte von 20 bis 60 haben kann und das Semester nur numerische Werte von 1 bis 10.\nIn dem Kapitel 20 findest du die hier verwendeten Standardfunktionen in R aus dem Paket {dlookr} für die Normalisierung sowie Standardisierung mit der Funktion transform(). Wenn es komplexer wird, dann empfehle ich den Workflow, wie er im Kapitel 75 für die Klassifikation von Daten vorgestellt wird. Am Ende des Kapitels zeige ich dir auf den Gummibärechendaten, wie dann alles einmal zusammenkommt.\n\n67.3.1 Normalisieren\nWenn wir Normalisieren dann Zwängen wir Variablen in ein Intervall von \\([0;1]\\). Es gehen natürlich auch andere Intervalle, aber das Intervall von 0 bis 1 ist wohl das häufigste Intervall was genutzt wird. Dazu nutzen wir die Funktion transform() aus dem R Paket {dlookr} und mit der Option minmax kriegen wir dann alle Werte einer Spalte zwischen 0 und 1. Dann machen wir das mal schnell mit den Daten aus dem Kreaturendatensatz.\n\n\nR Code [zeigen / verbergen]\nnorm_creature_tbl &lt;- creature_tbl |&gt; \n  mutate(mass_grams = transform(mass_grams, \"minmax\"),\n         heart_rate_bpm = transform(heart_rate_bpm, \"minmax\"),\n         longevity_years = transform(longevity_years, \"minmax\")) \nnorm_creature_tbl\n\n\n# A tibble: 15 × 4\n   creature    mass_grams   heart_rate_bpm longevity_years\n   &lt;chr&gt;       &lt;transfrm&gt;   &lt;transfrm&gt;     &lt;transfrm&gt;     \n 1 human       7.495004e-04 0.09302326     0.87012987     \n 2 cat         1.616667e-05 0.30232558     0.15584416     \n 3 small dog   1.616667e-05 0.18604651     0.09090909     \n 4 medium dog  4.116669e-05 0.16279070     0.15584416     \n 5 large dog   6.616670e-05 0.12790698     0.18181818     \n 6 hamster     0.000000e+00 1.00000000     0.00000000     \n 7 chicken     1.200001e-05 0.59302326     0.15584416     \n 8 monkey      4.116669e-05 0.39534884     0.15584416     \n 9 horse       9.999505e-03 0.05581395     0.48051948     \n10 cow         6.666170e-03 0.10465116     0.24675325     \n11 pig         1.249501e-03 0.11627907     0.28571429     \n12 rabbit      7.833337e-06 0.43023256     0.07792208     \n13 elephant    4.166619e-02 0.02325581     0.87012987     \n14 giraffe     7.499504e-03 0.10465116     0.22077922     \n15 large whale 1.000000e+00 0.00000000     1.00000000     \n\n\nWir sehen hier, dass in der Spalte mass_grams der Wal den maximalen Wert 1 kriegt und der Hamster den Wert 0. Alle anderen Kreaturen spannen sich numerisch zwischen diesen beiden Extremen auf. Das Gleiche erkenne wir dann auch bei der Herzrate und den Lebenspanne. Hier sind dann auch immer der Hamster und der Wal die extremsten numerischen Vertreter in den Spalten.\nHier helfen natürlich auch die Funktionen von dem R Paket {dplyr} und der Hilfsseite von across() um mehrere Spalten schneller in mutate zu transformieren. Aber wir üben hier nur begrenzt Programmierung und es ist dann an dir dieses Problem zu lösen.\n\n\n67.3.2 Standardisieren\nDie Standardisierung zwingt Variablen in eine \\(\\mathcal{N(0,1)}\\) Standardnormalverteilung. Das heißt, wir transformieren alle Variablen auf einen Mittelwert von \\(0\\) und einer Standardabweichung von \\(1\\). Das macht dann auch die Daten sehr schon gleichförmig. Wir wollen also für unseren Gummibärchendatensatz, dass das Alter einen Mittelwert von 0 und eien Standardabweichung von 1 kriegt. Hier nutzen wir auch die Funktion transform() aus dem R Paket {dlookr} mit der Option zscore. Es macht keinen Sinn Faktoren zu standardisieren, wir standardisieren nur numerische Spalte und das Semester zu transformieren ist schon so eine grenzwertige Sache.\n\n\nR Code [zeigen / verbergen]\nscale_gummi_tbl &lt;- gummi_tbl |&gt; \n  mutate(gender = as_factor(gender),\n         age = transform(age, \"zscore\"),\n         height = transform(height, \"zscore\"),\n         semester = transform(semester, \"zscore\"),\n         most_liked = as_factor(most_liked))\nscale_gummi_tbl\n\n\n# A tibble: 210 × 5\n   gender age        height     semester    most_liked\n   &lt;fct&gt;  &lt;transfrm&gt; &lt;transfrm&gt; &lt;transfrm&gt;  &lt;fct&gt;     \n 1 m       1.3171177  2.2399120  2.65128580 lightred  \n 2 w      -0.4374478 -1.3833258  1.09714758 yellow    \n 3 w      -0.4374478 -1.3833258  1.09714758 white     \n 4 w       1.4424438  0.8545564  2.65128580 white     \n 5 m      -0.3121217  0.8545564 -0.06845609 white     \n 6 m      -0.3121217  0.8545564 -0.06845609 green     \n 7 w      -0.4374478 -0.9570626 -0.06845609 green     \n 8 m      -0.3121217 -0.2111018 -0.06845609 green     \n 9 m      -0.1867956  0.4282931 -0.06845609 white     \n10 m      -0.5627739  0.8545564 -0.06845609 lightred  \n# ℹ 200 more rows\n\n\nWie beim Normalisieren helfen hier natürlich auch die Funktionen von dem R Paket {dplyr} und der Hilfsseite von across() um mehrere Spalten schneller in mutate zu transformieren. Wie oben schon angemerkt, dass ist dann deine Fingerübung.\n\n\n67.3.3 Das data.frame() Problem\nLeider ist es so, dass fast alle Pakete im Kontext der Clusteranalyse mit den Zeilennamen bzw. row.names() eines data.frame() arbeiten. Das hat den Grund, dass wir gut das Label in den Zeilennamen parken können, ohne das uns eine Spalte in den Auswertungen stört. Meistens ist das Label ja ein character und soll gar nicht in den Clusteralgorithmus mit rein. Deshalb müssen wir hier einmal unsere tibble() in einen data.frame() umwandeln. Die tibble() haben aus gutem Grund keine Zeilennamen, die Zeilennamen sind ein Ärgernis und Quelle von Fehlern und aus gutem Grund nicht in einem tibble() drin. Hier brauchen wir die Zeilennamen aber.\nWir bauen uns also einmal einen data.frame() für unseren Tierdatensatz und setzen die Tiernamen als Zeilennamen bzw. row.names(). Wir entfernen dann auch noch schnell alle fehlenden Werte, denn wir wollen usn hier nicht noch mit der Imputation von fehlenden Werten beschäftigen.\n\n\nR Code [zeigen / verbergen]\nanimals_df &lt;- animals_tbl |&gt; \n  na.omit() |&gt; \n  as.data.frame() |&gt; \n  column_to_rownames(\"animal\") \n\n\nDas Ganze machen wir dann auch noch einmal für die normalisierten Kreaturendaten. Wir wollen dann ja nur auf den normalisierten Daten weitermachen.\n\n\nR Code [zeigen / verbergen]\nnorm_creature_df &lt;- norm_creature_tbl |&gt; \n  as.data.frame() |&gt; \n  column_to_rownames(\"creature\") \n\n\nWie eben gesagt, ist es teilweise echt nervig immer die row.names() mit zu nehmen und alles ein data.frame() zu nutzen. Insbesondere wenn die Daten sehr groß werden, kann kann es sehr ungünstig sein, alles in einem data.frame() zu lagern. Deshalb gibt es das Paket {tidyclust}, welches ich am Ende nochmal vorstelle.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html#distanzmaße",
    "href": "stat-modeling-cluster.html#distanzmaße",
    "title": "67  Clusteranalysen",
    "section": "67.4 Distanzmaße",
    "text": "67.4 Distanzmaße\nWie nah oder weit entfernt sind jetzt zwei Beobachtungen? Wenn wir die Distanz von zwei Beobachtungen zueinander haben, wie weit ist dann eine dritte Beobachtung entfernt? Aus den paarweisen Abständen aller Beobachtungen zueinander können wir dann Cluster bilden. Wir brauchen aber zuallerst die Distanzen der Beobachtungen zuaeinander. Wir betrachten dabei im Folgenden immer die Distanzen zwischen den Zeilen des Datensatzes. Das heißt, wir wollen immer die Distanzen zwischen den Beobachtungen berechnen. Wie nah oder fern sind sich zwei Beobachtungen gegeben den Spalten? Wir schauen uns einmal zwei sehr intuitive Distanzmaße mit der euklidischen sowie der manhattan Distanz an.\n\nEuklidische Distanz\n\nDie euklidische Distanz \\(d_E\\) ist einfach die Wurzel des quadratischen Abstands zwischen zwei Punkten \\(p\\) und \\(q\\). \\[\nd_E(p,q) = \\sqrt{(p-q)^2}\n\\]\n\nManhattan Distanz\n\nDie manhattan Distanz \\(d_M\\) ist einfach der absolute Abstands zwischen zwei Punkten \\(p\\) und \\(q\\).\\[\nd_M(p,q) = \\lvert p-q \\rvert\n\\]\n\n\nEs gibt noch viel mehr Distanzen, die du berechnen kannst. Je nach R Paket sind unterschiedlich Distanzen dann auszuwählen. Hier eine generelle Empfehlung zu geben ist mir unmöglich. Da müssen wir dann zusammen mal schauen, was für deine Daten dann konkret passt.\n\nDie Funktion dist() als die Standardfunktion: Die Funktion akzeptiert nur numerische Daten als Eingabe und das zu verwendende Abstandsmaß muss eines der Folgenden sein: euclidean, maximum, manhattan, canberra, binary oder minkowski. Die Hilfeseite ?dist() liefert mehr Informationen über die Distanzmaße.\nDie Funktion get_dist() aus dem R Paket {factoextra}: Die Funktion akzeptiert nur numerische Daten als Eingabe. Im Vergleich zur Standardfunktion dist() unterstützt sie korrelationsbasierte Abstandsmaße einschließlich der Methoden pearson, kendall und spearman.\nDie Funktion daisy() aus dem R Paket {cluster}: Die Funktion kann mit anderen Variablentypen umgehen als numerisch, also auch mit Kategorien und Faktoren. In diesem Fall wird automatisch der Gower-Koeffizient als Metrik verwendet. Der Gower-Koeffizient ist eines der beliebtesten Näherungsmaße für gemischte Datentypen. Weitere Einzelheiten findest du auf der Hilfeseite der Funktion ?daisy.\nDie Funktion PCA() aus dem R Paket {FactoMineR}: Die Funktion erlaubt es dir eine Hauptkomponentenanalyse zu rechnen. Das ist aber dann ein eigens Thema für sich. In dem Kapitel 68 erkläre ich nochmal die Hauptkomponentenanalyse und zeige dort auch, wie du mit den Ergebnissen einer Hauptkomponentenanalyse clustern kannst.\n\nWenn du deine Daten transformierst, dann werden auch die Abstandmaße ähnlicher. Zum Beispiel werden durch die Standardisierung die folgenden Abstandsmaße kelinere Werte ergeben: Euklidisch, Manhattan und die Korrelation. Das ist aber nicht so schlimm, wenn du nicht untransformierte Daten mit transformierten Daten vergleichst.\nDie Funktion fviz_dist() aus dem R Paket {factorextra} ermöglicht dir die Distanzmatrix zu visualisieren. In der Abbildung 67.1 kannst du dir die Distanzmatrix der Funktion dist() als Heatmap anzuschauen. Wir nutzen die Distanzmatrix dann aber gleich um auf den Distanzen Cluster zu bilden.\n\n\nR Code [zeigen / verbergen]\nanimals_df  |&gt; \n  dist(method = \"euclidean\") |&gt; \n  fviz_dist()\n\n\n\n\n\n\n\n\nAbbildung 67.1— Heatmap der euklidischen Distanzen des Tierdatensatzes. Die Matrix ist symmetrisch. Hohe, blaue Werte bedeuten eine große Distanz dagegen kleine,rote Werte eine geringe Distanz zwischen den Beobachtungen.\n\n\n\n\n\nWenn du also die Distanzen zwischen deinen Beobachtungen berechnet hast, kannst du mit der Distanzmatrix entweder hierarchisch Clustern oder über den \\(k\\)-NN Algorithmus Gruppen bilden.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html#algorithmen-fürs-clustern",
    "href": "stat-modeling-cluster.html#algorithmen-fürs-clustern",
    "title": "67  Clusteranalysen",
    "section": "67.5 Algorithmen fürs Clustern",
    "text": "67.5 Algorithmen fürs Clustern\nJetzt schauen wir uns die zwei wichtigsten Algorithmen für das Clustern von Daten einmal an. Zum einen ist es die Hierarchische Clusteranalyse, die einen Baum wachsen lässt und wir so eine Entscheidung über die Gruppenzugehörigkeit bekommen. Der andere Algorithmus ist der \\(k\\) nächste Nachbarn (abk. k-NN) Methode, die sich immer die nächsten Beobachtungen anschaut und versucht ähnliche Beobachtungen zusammen zu führen.\n\n\n\n\n\n\nEin Clusteralgorithmus braucht zwingend eine Distanz(matrix)!\n\n\n\nDu kannst nur auf Distanzen clustern. Das heißt, dass du deine Daten irgendwie in Distanzen zwischen den Beobachtungen umwandeln musst. Im vorherigen Abschnitt hast du ja schon die wichtigsten Distanzalgorithmen kennen gelernt.\n\n\nWie immer gibt es verschiedene Methoden und Optionen für die beiden Algorithmen. Am Ende musst du schauen, ob die Ergebnisse des Clustern einen Sinn innerhalb deiner Fragestellung ergeben. Es kann also sein, dass du recht viele Optionen und Varianten durchprobieren musst, bevor du dann was gefunden hast was dich zufrieden stellt.\n\n67.5.1 Hierarchische Clusteranalyse\nGleich vorweg mal das Ergebnis einer hierarchischen Clusteranalyse der Tierdaten dargestellt als Dendrogramm in der Abbildung 67.2. Wir sehen, dass alle Beobachtungen anhand ihrer Distanz in einen Baum angeordnet werden. Das Tier ganz links ist maximal vom Tier ganz rechts entfernt. Damit ist also der Hering maximal weit vom Elefanten nach den Eigenschaften - also Spalten - in den Tierdaten entfernt.\n\n\n\n\n\n\n\n\nAbbildung 67.2— Beispiel für das Ergebnis einer hierarchischen Clusteranalyse der Tierdaten dargestellt als Dendrogramm\n\n\n\n\n\nWie bauen wir uns so ein Dendrogramm? Wir nehmen als erstes eine Distanzmatrix und nutzen dann die Distanzmatrix um nach verschiedenen Regeln die hierarchische Clusteranalyse durchzuführen. Es gibt vier gängige Ansätze für die Cluster-Cluster-Distanzierung, auch Linkage genannt:\n\nsingle linkage: Der Abstand zwischen zwei Clustern ist der Abstand zwischen den beiden nächstgelegenen Beobachtungen. In R nutzen wir dann single als Option.\naverage linkage: Der Abstand zwischen zwei Clustern ist der Durchschnitt aller Abstände zwischen den Beobachtungen in einem Cluster und den Beobachtungen im anderen Cluster. In R ist es dann die Option average.\ncomplete linkage: Der Abstand zwischen zwei Clustern ist der Abstand zwischen den beiden am weitesten entfernten Beobachtungen. Auch hier passt es dann mit dem Optionnamen von complete.\ncentroid method: Der Abstand zwischen zwei Clustern ist der Abstand zwischen ihren geometrischen Mittel oder Medianen. Hier nutzen wir die Option median.\nward method: Der Abstand zwischen zwei Clustern ist proportional zur Zunahme der Fehlerquadratsumme, die sich aus der Verbindung der beiden Cluster ergeben würde. Die Fehlerquadratsumme wird als Summe der quadrierten Abstände zwischen den Beobachtungen in einem Cluster und dem Schwerpunkt des Clusters berechnet. In R haben wir hier die Wahl zwischen ward.D und ward.D2. Wenn, dann nutze bitte ward.D2 da es sich um die neuere Implementierung handelt, die weniger fehleranfällig ist.\n\nWir nehmen also die Daten und berechnen erst die Distanzmatrix und dann die hierarchische Clusteranalyse. Da wir zum einen aus verschiedenen Distanzalgorithmen plus verschiedenen Algorithmen für das hierarchische Clustern wählen können, musst du hier immer mal wieder rumprobieren, bis du das richtige für dich gefunden hast. Wir schauen uns später noch Kriterien an, aber am Ende musst du entscheiden, ob es inhaltlich mit den gefundenen Gruppen passt.\nDie hierarchische Clusteranalyse führen wir in R mit dem Paket {hclust} durch. Die Distanz berechnen wir hier mit der Funktion dist(). Dann haben wir auch schon unser Clustern abgeschlossen. Der Baum ist gewachsen. Die Funktion hclust() ist nur eine mögliche Funktion für das hierarchische Clustern. Das R Paket {cluster} kennt noch eine mehr auch wenn ohne gute Hilfeseite. Du musst die Paketbeschreibung eine gute Übersicht an möglichen Algorithmen nehmen und unter den plot.* Funktionen schauen. Jeder Algorithmus hat eine eigene Funktion für einen Plot und so findest du schnell die Algorithmen. Hier jetzt aber weiter mit der Standardfunktion hclust().\n\n\nR Code [zeigen / verbergen]\nh_clust_animal &lt;- animals_df  |&gt; \n  dist(method = \"euclidean\") |&gt; \n  hclust(method = \"ward.D\")\n\n\nJetzt ist aber die Frage, wie kriegen wir die Gruppen? Bis jetzt ist ja jedes einzelne Tier für sich. Wir müssen also von den Enden des Baumes wieder noch oben gehen um unsere Tiere Gruppen zuzuordnen. Das macht die Funktion cutree(), die uns dann \\(k\\) Gruppen bildet. Das können wir dann einfach einmal machen und uns die sortierten Gruppen wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\ngrp_animal &lt;- cutree(h_clust_animal, k = 3)\ngrp_animal |&gt; sort()\n\n\n       ant        bee  centipede  earthworm        fly    herring     lizard \n         1          1          1          1          1          1          1 \n       cat        cow      horse     rabbit chimpanzee    dolphin       duck \n         2          2          2          2          3          3          3 \n     eagle   elephant      human      whale \n         3          3          3          3 \n\n\nWie wir sehen haben wir drei Gruppen, die Zahl sagt die Gruppe aus und die Namen dann das Tier. Du kannst dir auch andere Gruppenzuordnungen ansehen und schauen, welche inhaltlich besser passen würde. Hier haben wir das Problem, das der Chimpanse zusammen mit dem Delphin und dem Adler eingeordnet wird. Irgendwie nicht so die richtige Aufteilung. Da würde eine oder zwei Gruppen mehr viellicht besser passen.\nWir nehmen jetzt mal die normalisierten Kreaturen und schauen was wir hier rauskriegen. Die Funktionen sind die gleichen wie eben schon bei den Tierdaten.\n\n\nR Code [zeigen / verbergen]\nh_clust_creature &lt;- norm_creature_df |&gt; \n  dist(method = \"euclidean\") |&gt; \n  hclust(method = \"ward.D\")\n\n\nAuch hir schneiden wir die Bäume dann so zurecht, dass wir am Ende drei Gruppen erhalten. Auch hier kannst du dann immer wieder spielen, und schauen, ob du nicht mit mehr Gruppen ein besseres Ergebnis erhälst.\n\n\nR Code [zeigen / verbergen]\ngrp_creature &lt;- cutree(h_clust_creature, k = 3)\ngrp_creature |&gt; sort()\n\n\n      human    elephant large whale         cat     hamster     chicken \n          1           1           1           2           2           2 \n     monkey      rabbit   small dog  medium dog   large dog       horse \n          2           2           3           3           3           3 \n        cow         pig     giraffe \n          3           3           3 \n\n\nJa, jetzt haben wir den gleichen Fall, dass der Mensch zusammen mit dem Wal und dem Elefanten geclustert wurde. Irgendwie nicht so toll. Dann wollen wir uns mal im nächsten Schritt anschauen, wie wir ein Ergebnis einer hierarchischen Clusteranalyse visualisieren können.\n\n\n67.5.2 Dendrogramm\nNun können wir uns die Ergebnisse einer hierarchischen Clusteranalyse visualisieren. Dafür nutzen wir dann Dendrogramme. Dendrogramme sind nichts anders als Bäume. In der Abbildung 67.3 siehst du die Ergebnisse der hierarchischen Clusteranalyse als Dendrogramm. Wir nutzen hier die Funktion ggdendrogram(). Wie immer gibt es noch mehr uns noch schönere Dendrogramme, aber das übersteigt diesen Abschnitt. Schau dir das Paket {dendextend} und das Tutroium Introduction to dendextend einml genauer an. Dort findest du dann noch mehr zu Dendrogrammen.\n\n\nAuch gibt es noch ein schönes Tutorium für die Analyse weiterer spannender Datensätzen unter Hierarchical cluster analysis on famous data sets - enhanced with the dendextend package\n\n\nR Code [zeigen / verbergen]\nggdendrogram(h_clust_animal)\nggdendrogram(h_clust_creature)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.3— Dendrogramme der hierarchischen Clusteranalyse.\n\n\n\n\nHier sehen wir, was wir schon bei der Gruppenerstellung durch die Funktion cutree() gesehen haben. Irgendwie passt die Einteilung nicht so richtig. Wir sehen, dass bei den Tieren der Elefanten zusammen mit dem Wal und dem Delphin eingeordnet wird. Bei den Kreaturen haben wir den Mensch zusammen mit dem Elefanten. Also müssten wir hier nochmal zurück und entweder an den Distanzmaßen schrauben oder aber eine andere linkage in der hierarchischen Clusteranalyse nehmen.\nAuch geht es noch schöner durch die Funktion fviz_dend() in der wir dann auch direkt die Gruppen farblich kennzeichnen können. Das macht die Überprüfung welches Tier wo eingeordnet wird leichter. Hier habe ich dann bei den Kreaturendaten mal vier Gruppen gewählt und dann ist wenigstens der Wal nicht mehr in der Gruppe der Menschen und Elefanten.\n\n\nR Code [zeigen / verbergen]\nfviz_dend(h_clust_animal, cex = 0.5, k = 4, palette = \"jco\") \nfviz_dend(h_clust_creature, cex = 0.5, k = 4, palette = \"jco\") \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.4— Dendrogramme der hierarchischen Clusteranalyse eingefärbt nach den unterschiedlichen, zugeordneten Gruppen.\n\n\n\n\nWie du schön siehst, ist eine hierarchische Clusteranalyse nur so gut wie das entsprechende Dendrogramm. Ohne eine visuelle Überpüfung ist es meistens schwer zu sehen ob es dann wirklich passt. Hast du hunderte von Beobachtungen, dann wird es natürlich schwerer, aber dennoch solltest du dir einmal die Dendrogramme ansehen. Aber da gibt es dann auch bei den Tutorien mehr Hilfe und noch andere Einblicke.\n\n\n67.5.3 k-means Clusteranalyse\nKommen wir dann zum zweiten Algorithmus, der darauf basiert sich immer die \\(k\\) nächsten Nachbarn anzuschauen und zu entscheiden zu welcher Gruppe die Beachtungen gehören sollen. Das ist sehr simple das Prinzip des Algorithmus. Wir gehen hier jetzt aber nicht weiter in die Tiefe, der \\(k\\)-NN Algorithmus clustert nicht in der Form eines Baumes sondern schaut sich die direkten Verwandtschaft zwischen von der Distanz nahe liegenden Beobachtungen an. Daher können wir den Algorithmus auch auf alle Distanzmatrizen anwenden. Auch hier verweise ich nochmal auf das R Paket {cluster} welches als eine mögliche Alternative für die Funktion kmeans() die robustere Funktion pam() kennt. Wir nutzen hier einmal die Standardfunktion für das Clustern mit \\(k\\) nächsten Nachbarn, aber du solltest auch die anderen\n\n\nAuch gibt es noch ein schönes Tutorium für die Analyse weiterer spannender Datensätzen unter K-means Cluster Analysis\nDie kmeans() Funktion ist relativ simple. Wir definieren einfach wie viele Cluster oder Gruppen centers gebildet werden sollen. Der Algorithmus versucht jetzt die Beobachtungen um diese Zentren zu gruppieren. Dabei müssen wir vorab sagen wie viele Gruppen wir wollen. Wir sehen gleich nochmal ein Möglichkeit uns da iterativ zu nähern, das klappt aber nicht immer.\n\n\nR Code [zeigen / verbergen]\nknn_animal &lt;- animals_df |&gt; \n  kmeans(centers = 4)\nknn_creature &lt;- norm_creature_df |&gt; \n  kmeans(centers = 4)\n\n\nWir schauen uns hetzt nicht die Ausgabe an, sondern wollen gleich mal in der Abbildung 67.5 die Ergebnisse des Clusterings. Da haben wir dann schon fast ein ähnlich gutes Bild drüber. Du kannst dir aber mit animals_df$cluster die Cluster angeben lassen. Wir müssen dann noch die Fläche links und rechts auf dem Plot etwas erweitern damit wir dann dort mehr drauf kriegen. Wir nutzen hier die Funktion fviz_cluster() welche dafür geeignet ist gut Cluster darzustellen.\n\n\nR Code [zeigen / verbergen]\nfviz_cluster(knn_animal, data = animals_df, palette = \"jco\") +\n  theme_minimal() +\n  scale_x_continuous(expand = expansion(add = c(0.5, 0.5))) +\n  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) \n\nfviz_cluster(knn_creature, data = norm_creature_df, palette = \"jco\") +\n  theme_minimal() +\n  scale_x_continuous(expand = expansion(add = c(0.5, 1))) +\n  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.5— Darstellung des kmeans() Clustering. Die Einfärbung stellt die vier vordefinierten Cluster dar.\n\n\n\n\nWie du siehst funktioniert es einigermaßen für die Tierdaten. Ich möchte nochmal den Fokus auf die Symbole in der Mitte der Clusterflächen lenken, dort siehst du dann den Mittelpunkt. Alle Beobachtungen, die nah an dem Wert sind, werden zu diesem Cluster gezählt. Teilweise funktioniert das etwas komplizierter, den der Regenwurm ist auf jeden Fall näher an dem Mittelpunkt des grauen Clusters als dem gelben Clusters. Es gibt also noch sekundäre Regeln, die versuchen einen Cluster möglichst symmetrisch zu erstellen. Bei den Kreaturdaten haben wir auch das Problem, dass wieder unser Wal mit dem Elefanten und dem Menschen zusammengepackt wird. Hier scheinen die Daten wirklich nicht gut zu sein.\nWas ist das optimale \\(k\\) für die Anzahl an Gruppen, die wir in den Algorithmus stecken wollen? Dafür gibt es die Optimierungsfunktion fviz_nbclust(), die uns versucht die optimale Anzahl an Clustergruppen visuell abzuschätzen. Wir sehen die Kurven einmal in der Abbildung 67.6. Für die Tierdaten hat die Methode gap_stat nicht funktioniert, so dass wir da keine Entscheidung raus kriegen sondern selber schauen müssen.\n\n\nR Code [zeigen / verbergen]\nanimals_df |&gt; \n  fviz_nbclust(kmeans, method = \"wss\")\n\nnorm_creature_df |&gt; \n  fviz_nbclust(kmeans, method = \"gap_stat\")\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.6— Bestimmung der optimalen Anzahl an Clustern für den k-means Algorithmus und andere. Die Option gap_stat liefert eine Entscheidung, funktioniert aber nicht auf allen Datensätzen.\n\n\n\n\nWie wir sehen gibt es bei den Tierdaten zwar einen größeren Sprung von einem auf zwei Cluster, aber das hilft uns nichts. Wir wollen ja nicht nur einen Cluster wählen, dann können wir uns das Clustern auch sparen. Die anderen Sprünge sind auch eher gleichmäßig, so dass wir hier gar keine optimale Anzahl an Clustern haben. Das heißt, dass wir vermutlich die Tierdaten gar nicht so gut clustern können. Auch liefert der Algorithmus gap_stat die Empfehlung für nur einen Cluster. Das hilft uns nun auch nichts besonders weiter. Hier scheinen die Daten wirklich etwas schwierig zum clustern zu sein.\nWenn du kontienuierliche Spalten in deinen Daten hast, dann kannst du natürlichb auch zwei Spalten auswählen und dir die Aufteilung der Beobachtungen über diese beiden Spalten anschauen. In der Abbildung 67.7 habe ich das mal für zwei Spalten aus dem Kreaturendaten gemacht und dann die Individuen einmal nach den Clustern eingefärbt. Hier siehst du ganz gut, dass der Elefant und Mensch sowie Wal einfach alle drei lange Leben und eine geringe Herzrate haben. Das macht dann diese drei Wesen sehr ähnlich laut unseren Daten. Das heißt natürlich nicht, das der Mensch ein Wal ist. Es braucht einfach mehr Daten und damit Variablen um die Wesen voneinander zu trennen.\n\n\nR Code [zeigen / verbergen]\nggplot(creature_tbl, aes(longevity_years, heart_rate_bpm, label = creature)) + \n  theme_minimal() +\n  geom_label(aes(fill = as_factor(knn_creature$cluster)), colour = \"white\", \n             fontface = \"bold\", size=2) +\n  scale_fill_okabeito(name = \"Cluster\")\n\n\n\n\n\n\n\n\nAbbildung 67.7— .\n\n\n\n\n\nDas war es dann schon hier mit dem kurzen Ausflug zum Clustern mit dem kmeans Algorithmus. Du findest dann in dem Kapitel 68 zu der Hauptkomponentenanalyse nochmal die Anwendung auf einem anderem Gebiet. Hier ist aber vorerst einmal Schluß mit den Grundlagen.\n\n\n67.5.4 Silhouettenplot\nJetzt haben wir Gruppen gefunden und wollen wissen, ob das jetzt auch gute Gurppen sind oder nicht. Wenn wir nicht so viele Beobachtungen haben, dann können wir uns ja die Daten direkt anschauen. Aber häufig wollen wir auch einen Wert haben, der uns eine Bewertung erleichtert. Um das Ergebnis der Clusteranalyse zu beurteilen, eignet sich ein Silhouettenplot. Ein Silhouettenplot zeigt für jede Beobachtung \\(i\\) die Silhouettenbreite \\(s_i\\), welche definiert ist als normierte Differenz der kleinsten Distanz zu den Beobachtungen außerhalb der eigenen Gruppe und dem Mittelwert der Distanzen innerhalb einer Gruppe. Die Silhouettenbreite \\(s_i\\) kann jeden Wert im Intervall [-1, 1] annehmen und wird von dir folgendermaßen interpretiert.\n\n\\(s_i = 1\\) Die Beobachtung ist dem richtigen Cluster zugeordnet. Oder eher dem Cluster, der gut passt gegeben den Daten und der Anzahl an Clustern.\n\\(s_i = 0\\) Die Beobachtung hätte ebenso gut einer anderen Gruppe zugeordnet werden können. Und wurde also eher zufällig dem Cluster zugeordnet.\n\\(s_i = -1\\) Die Beobachtung ist schlecht zugeordnet. Und sollte damit eher einem anderen Cluster zugeordnet werden, den es vielleicht nicht gibt, da du zu wenige Clustergruppen vorab definiert hast.\n\nDann kannst du dir darüber hinaus die durchschnittliche Silhouettenbreite über alle Beobachtungen berechnen lassen, womit sich die Gruppenbildung als Ganzes beurteilen lässt. Die durchschnittliche Silhouettenbreite wird dann von dir analog interpretiert. Aber Achtung, nur weil du gute Werte der Qualität hier kriegst, heißt es nicht, dass du gute Cluster im Sinne deiner Fragestellung gefunden hast.\n\nDas R Paket {tidyclust} hat auch die Funktion silhouette(), die dir auch ermöglicht die Silhouettenplots erstellen zu lassen.\n\nWir nutzen jetzt einmal die Funktion silhouette() aus dem R Paket {cluster} und berechnen uns aus dem Vektor der Gruppenzugehörigkeit, also den Clustern, und der Distanzmatrix aus der die Cluster bestimmt wurden dann die Silhouettenplots. Dafür müssen wir dann die Ausgabe der Funktion silhouette() noch auf ein tibble() umbauen damit wir die Ausgabe gut in {ggplot} abbilden können.\n\n\nR Code [zeigen / verbergen]\nsilhouette_animals_tbl &lt;- cluster::silhouette(knn_animal$cluster, \n                                              dist(animals_df, \"canberra\")) |&gt; \n  as_tibble() |&gt; \n  mutate(animal = row.names(animals_df),\n         cluster = as_factor(cluster))\n\n\nUnd das ganze dann nochmal für die Kreaturendaten.\n\n\nR Code [zeigen / verbergen]\nsilhouette_creature_tbl &lt;- cluster::silhouette(knn_creature$cluster, \n                                               dist(norm_creature_df, \"canberra\")) |&gt; \n  as_tibble() |&gt; \n  mutate(creature = row.names(norm_creature_df),\n         cluster = as_factor(cluster))\n\n\nIn der Abbildung 67.8 siehst du die Silhouettenplots für die beiden beispielhaften Datensätze. Die Regel ist, dass alles was nach links geht schlecht ist, was bei der Null liegt irrelevant und je weiter nach rechts, desto besser ist.\n\n\nR Code [zeigen / verbergen]\nggplot(silhouette_creature_tbl, aes(x = creature, y = sil_width, fill = cluster)) +\n  theme_minimal() +\n  geom_bar(stat = \"identity\", width = 0.5) + \n  coord_flip() + \n  labs(x = \"\")\n\nggplot(silhouette_animals_tbl, aes(x = animal, y = sil_width, fill = cluster)) +\n  theme_minimal() +\n  geom_bar(stat = \"identity\", width = 0.5) + \n  coord_flip() + \n  labs(x = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.8— Silhouettenplot für die Bedeutung der einzelnen Beobachtung für die Erstellung der Cluster aus der verwendeten Distanzmatrix.\n\n\n\n\nBei den Tierdaten sehen wir, dass die Beobachtung des kleinen Hundes sowie des mittleren Hundes eigentlich schädlich für die Zuordnung der Cluster ist. Der Hamster ist dabei faktisch egal. Bei den Kreaturendaten ist es auch spannend, da wir hier den Hering und die Eidechse als problematisch sehen. Beachte, dass wir alles immer im Kontext der Distanzmatrix und dem Algorithmus sehen müssen. Daher kannst du dir für beliebige Kombinationen aus Distanzmatrix, Anzahl Clustern und dem Algorithmus dann jeweils die Silhouettenplots erstellen lassen und schauen, was ist das beste Clustering?\nWenn du dir die Silhouettenplots automatisiert ausgeben willst, dann kriegst du natürlich sehr viele Plots. Da ist es dann besser nach einem möglichst hohen Silhouettenwert zu schauen. Deshalb hier einmal der mittlere Silhouettenwert für die Tierdaten sowie deren Standardabweichung.\n\n\nR Code [zeigen / verbergen]\nsilhouette_animals_tbl |&gt; \n  summarise(mean(sil_width),\n            sd(sil_width))\n\n\n# A tibble: 1 × 2\n  `mean(sil_width)` `sd(sil_width)`\n              &lt;dbl&gt;           &lt;dbl&gt;\n1             0.271           0.300\n\n\nDas Ganze dann auch einmal für die Kreaturendaten berechnet.\n\n\nR Code [zeigen / verbergen]\nsilhouette_creature_tbl |&gt; \n  summarise(mean(sil_width),\n            sd(sil_width))\n\n\n# A tibble: 1 × 2\n  `mean(sil_width)` `sd(sil_width)`\n              &lt;dbl&gt;           &lt;dbl&gt;\n1             0.204           0.318\n\n\nWir sehen, dass wir am Ende mit unserem Clustern bei den Kreaturendaten eine bessere Zuordnung zu den Clustern erhalten. Wenn wir den Algorithmus tunen wollen würden, dann würden wir für verschiedene Kombinationen aus Algorithmus und Distanzmatrixen dann jeweils die mittleren Silhouettenwerte berechnen. Dazu kommt dann noch, dass wir auch die Anzahl der Cluster tunen können. Du siehst, es wird sehr schnell sehr viel, was man hier machen kann. Ich schaue dann mal, ob ich dann was finde, was ich in den Beispielhaften Auswertungen zeige.\n\n\n67.5.5 Heatmap\nHeatmaps visualisieren die Distanzen zwischen Beobachtungen indem Heatmaps die numerischen Distanzwerte in einer Farbskala darstellen. Wenn es um Heatmaps in R geht, dann gibt es so viele Möglichkeiten eine Heatmap in R zu erstellen, so dass ich hier nur einen Ausschnitt aus den Sammlungen vorstellen kann. Ich selber mag gerne das R Paket {pheatmap} mit dem guten Tutorium Making a heatmap in R with the pheatmap package. Am Anfang des Kapitels wird dieses Paket auch als empfehlenswert genannt. Daneben schauen wir uns nochmal die Heatmaps in dem R Paket {gplots} mit der Funktion heatmap.2() an.\n\n\n\n\n\n\nWeitere Tutorien für die Erstellung einer Heatmap\n\n\n\n\n\nWie immer gibt es eine Vielzahl an tollen Tutorien, die eine Heatmap gut erklären. Ich habe hier einmal eine Auswahl zusammengestellt und du kannst dich da ja mal vertiefend mit beschäftigen, wenn du willst. Teile der Tutorien findest du vermutlich hier im Kapitel wieder.\n\nEine Übersicht zu Heatmap in R: Static and Interactive Visualization\nDas Tutorium Hierarchical cluster analysis on famous data sets.\nDas R Paket {heatmaps} Tutorial heatmaps liefert nochmal Beispiele mit genetischen Datensätzen.\nDas R Paket ComplexHeatmap, was sich vom R Paket {pheatmap} inspirieren lies. Das geht dann aber hier zu weit, schauen da, wenn du wirklich Heatmaps brauchst.\n\n\n\n\nIn der Abbildung 67.9 sehen wir einmal die Funktion pheatmap() und die sich daraus ergebenden Heatmaps. Die Ähnlichkeit wird einmal in der Legende angegeben. Je nach gewünschten Distanzmaß, kommt da eben was anderes bei raus. Du musst dir da einmal die Hilfeseite ?pheatmap zu anschauen ober aber das Tutorium. In unserem Fall wollte ich vier Gruppen für die Spalten des Dendrogramms bei den Tierdaten haben. Bei den Kreaturen habe ich nur zwei Gruppen gewählt. Du kannst auch über die Zeilen gruppieren, aber das sprengt hier alles. Probiere es einfach selber aus.\n\n\nR Code [zeigen / verbergen]\npheatmap(animals_df, cutree_cols = 4)\npheatmap(norm_creature_df, cutree_cols = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.9— Darstellung der Ähnlichkeiten zwischen den Datensätzen mit der Funktion pheatmap(). Auch hier gibt es dann eine Menge möglicher Optionen, hier nur sehr sparsam gezeigt.\n\n\n\n\nDie Funktion heatmap.2() liefert sehr viel mehr Optionen und erlaubt noch etwas feinere Abstimmungen. Du kannst ziemlich einfach noch Dendrogramme für die Zeilen und Spalten ergänzen. Damit die Erstellung der Dendrogramme nicht so fehleranfällig ist, packe ich mir den Code immer in eine Funktion und entscheide dann nach der Option dim, ob ich die Daten transponieren oder nicht-transponieren muss. Die Spalten rechne ich auf den untransponierten Daten und die Zeilen mache ich zu Spalten durch das Transponieren mit der Funktion t().\n\n\nR Code [zeigen / verbergen]\nget_dendro_margin &lt;- function(tbl, k, dim = \"row\"){\n  if(dim == \"row\") {\n    tmp_tbl &lt;- tbl |&gt; \n      dist(method = \"man\") |&gt; \n      hclust(method = \"ward.D\") \n  } else {\n    tmp_tbl &lt;- t(tbl) |&gt; \n      dist(method = \"man\") |&gt; \n      hclust(method = \"com\") \n  }\n  dendro_obj &lt;- tmp_tbl |&gt; \n    as.dendrogram() |&gt; \n    ladderize() |&gt;\n    color_branches(k = k)\n  return(dendro_obj)\n}\n\n\nAlso einmal das Dendrogramm für vier Gruppen über die Zeilen gebaut. Wir nutzen \\(k = 4\\) für die Anzahl an einzufärbenden Gruppen sowie die Option dim = \"row\" um über die untransponierten Zeilen zu Clustern. Das machen wir jetzt einmal für den Tierdatensatz und dann einmal für den Kreaturendatensatz.\n\n\nR Code [zeigen / verbergen]\ndend_animal_r &lt;- get_dendro_margin(animals_df, k = 4, dim = \"row\")\ndend_creature_r &lt;- get_dendro_margin(norm_creature_df, k = 4, dim = \"row\")\n\n\nDas Ganze dann nochmal über die Spalten auf gleicher Weise nur dann eben mit der Option dim = \"col\". Hier haben wir aber nur drei Spalten in den Daten, da können wir dann keine drei Gruppen einfärben. Das wären ja dann die drei Spalten per se.\n\n\nR Code [zeigen / verbergen]\ndend_animal_c &lt;- get_dendro_margin(animals_df, k = 3, dim = \"col\")\ndend_creature_c &lt;- get_dendro_margin(norm_creature_df, k = 2, dim = \"col\")\n\n\nIn der Abbildung 67.10 kommt dann alles einmal zusammen gebaut. Wie du siehst, hat die Funktion heatmap.2() noch eine Menge zusätzliche Optionen. Ich habe hier einfach mal ein paar behalten mit denen du dann mal rumspielen kannst. Am Ende weiß ich dann auch immer nicht, was soll da denn so rein? Am besten die Dinge und Färbungen, die dann auch deine Fragestellung mit beantworten. Das ist dann aber an dir zu entscheiden.\n\n\nR Code [zeigen / verbergen]\ngplots::heatmap.2(as.matrix(animals_df), \n          main = \"Eigenschaften von Tieren\",\n          srtCol = 35,\n          Rowv = dend_animal_r, Colv = dend_animal_c,\n          trace=\"row\", hline = NA, tracecol = \"darkgrey\",         \n          margins =c(6, 5), key.xlab = \"no / yes\",\n          denscol = \"grey\", density.info = \"density\",\n          col = gplots::bluered(100))\n\n\ngplots::heatmap.2(as.matrix(norm_creature_df), \n          main = \"Eigenschaften von Kreaturen\",\n          srtCol = 35,\n          Rowv = dend_creature_r, Colv = dend_creature_c,\n          trace = \"row\", hline = NA, tracecol = \"darkgrey\",         \n          margins = c(6, 7), key.xlab = \"no / yes\",\n          denscol = \"grey\", density.info = \"density\",\n          col = gplots::bluered(100))\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten norm_creature_df\n\n\n\n\n\n\n\nAbbildung 67.10— Darstellung der Ähnlichkeiten zwischen den Datensätzen mit der Funktion heatmap.2(). Auch hier gibt es dann eine Menge möglicher Optionen.\n\n\n\n\nDie Tierdaten sind nur \\(0/1\\)-codiert, deshalb sind natürlich die Farben der Heatmap nur rot und blau. Wie du an dem Kreaturendatensatz sehen kannst, werden Heatmaps eigentlich nicht auf so kleinen Datensätzen gerechnet. Wenn du mehr Spalten hast, dann werden auch die Spaltenunterschriften kleiner. Ich habe hier jetzt nicht die Muse nochmal in der Hilfe der Funktion ?heatmap.2 die Optionen zu suchen.\nWir sehen aber auch, dass wir über die Zeilen eine obere Gruppe haben, die Eidechse bis Ameise beinhaltet. Dann kommt eine größere Gruppe der Säugetiere, die sich dann nochmal kleiner aufspaltet. Ich finde die Spalten etwas schwerer zu deuten, deshalb lass ich das mal hier. Bei den Kreaturen finde ich es noch schwerer. Zwar sind der Wal und der Elefant zeilweise zusammen, aber der Rest ist schwer zu deuten. Da ist mir dann doch zu viel Heterogenität drin, dass ich da dem Clustern glauben würde. Vermutlich sind jetzt aber auch die Daten etwas zu klein für eine gute Darstellung in einer Heatmap.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-cluster.html#sec-clust-tidyclust",
    "href": "stat-modeling-cluster.html#sec-clust-tidyclust",
    "title": "67  Clusteranalysen",
    "section": "67.6 Datenanalyse mit tidyclust",
    "text": "67.6 Datenanalyse mit tidyclust\nWie du schon oben gesehen hast, ist es teilweise echt nervig immer die row.names() mit zu nehmen oder alles ein data.frame() zu nutzen. Insbesondere wenn die Daten sehr groß werden, kann kann es sehr ungünstig sein, alles in einem data.frame() zu lagern. Deshalb gibt es das Paket {tidyclust}, was ich hier nochmal vorstellen möchte. Die Visualisierungen von oben können alle genutzt werden. Der Vorteil ist eben, dass wir hier in der tidy-Welt sind und uns auch die recipes() aus dem Klassifikationskapiteln zu nutze machen können. Da ist dann das Normalisieren und andere Vorbereitungsschritte der Daten viel einfacher. Damit wir auch mal die Datenanalyse mit einem großen Datensatz sehen, nutze ich hier einmal den Datensatz der Gummibärchendaten. Im Folgenden analysieren wir also die Gummibärchendaten einmal mit dem R Paket {tidyclust}.\n\n67.6.1 Hierarchical Clustering\nIm Folgenden also einmal der Ablauf in tidyclust für die hierarchische Clusteranalyse. Auch hier müssen wir im ersten Schritt einmal festlegen welche Anzahl an Clustern num_clusters wir wollen. Dann müssen wir auch noch festlegen, welche linkage Methode wir wollen. Ich nehme hier einmal die average Methode. Damit haben wir aber noch nichts gerechnet, sondern nur ein Objekt erschaffen in dem steht, was wir machen wollen.\n\n\ntidyclust Hilfeseite für das Hierarchical Clustering\n\n\nR Code [zeigen / verbergen]\nhc_spec &lt;- hier_clust(num_clusters = 3,\n                      linkage_method = \"average\")\n\n\nJetzt können wir das Objekt hc_spec in die Funktion fit() pipen, die uns dann die hierarchische Clusteranalyse rechnet. Da wir in der Funktion fit() bestimmen können, welche Spalten mit in den Algorithmus sollen, müssen wir nicht umständlich mit einem vollem Datensatz arbeiten.\n\n\nR Code [zeigen / verbergen]\nhc_fit &lt;- hc_spec |&gt;\n  fit(~ gender + age + height + semester + most_liked,\n      data = gummi_tbl)\n\n\nWenn es zu lang wird dann geht auch fit(~ .), dann ist es aber ehrlich gesagt besser, die Variante mit dem data.frame() zu nutzen. In diesem Fall nimmst du dann ja wieder alle Spalten mit rein. Mit dem hc_fit kannst du dann ganz normal weiterarbeiten. Die Funktion extract_fit_summary() erlaubt es dir dann die wichtigsten Informationen aus dem Fit rauszuziehen und über cluster_assignments kommst du dann an die Clusterzuordnungen ran.\n\n\nR Code [zeigen / verbergen]\nhc_summary &lt;- hc_fit |&gt; \n  extract_fit_summary()\n\n\nIm Folgenden einmal die ersten sieben Clusterzuordnungen.\n\n\nR Code [zeigen / verbergen]\nhc_summary |&gt; \n  pluck(\"cluster_assignments\") |&gt; \n  head(7)\n\n\n[1] Cluster_1 Cluster_1 Cluster_1 Cluster_1 Cluster_1 Cluster_1 Cluster_1\nLevels: Cluster_1 Cluster_2 Cluster_3\n\n\nDie weitere Analyse ist dann wie auch oben. Du kannst dir dann einen Silhouettenplot erstellen lassen oder aber die Ergebnisse in einem Dendrogramm visualisieren. Das ist dann alles das Gleiche.\n\n\n67.6.2 k-means Clustering\nAuch gibt es für den kmeans Algorithmus eine bessere Variante für einen sauberen Workflow. Auch hier wird als erstes einmal der Algorithmus definiert. In unserem Fall heißt er dann k_means(). Wir wählen mit num_clusters die Anzahl an Gruppen, die am Ende raus kommen sollen.\n\n\ntidyclust Hilfeseite für das k-means Clustering\n\n\nR Code [zeigen / verbergen]\nkmeans_spec &lt;- k_means(num_clusters = 3)\n\n\nDanach können wir dann unsere Informationen über den Algorithmus in die Funktion fit() weiterleiten. In der fit() Funktion definieren wir dann die Spalten, die für das Clustern von Bedeutung sein sollen.\n\n\nR Code [zeigen / verbergen]\nkmeans_fit &lt;- kmeans_spec |&gt;\n  fit(~ age + height + semester,\n      data = gummi_tbl)\n\n\nWir können auch hier über die Funktion extract_cluster_assignment() die Clusterzugehörigkeiten erhalten. Damit können wir dann prinzipiell auch schon aufhören und die Visualisierungen erstellen, die wir aus den vorherigen Abschnitten kennen.\n\n\nR Code [zeigen / verbergen]\nkmeans_fit |&gt;\n  extract_cluster_assignment()\n\n\n# A tibble: 210 × 1\n   .cluster \n   &lt;fct&gt;    \n 1 Cluster_1\n 2 Cluster_2\n 3 Cluster_2\n 4 Cluster_3\n 5 Cluster_1\n 6 Cluster_1\n 7 Cluster_2\n 8 Cluster_2\n 9 Cluster_1\n10 Cluster_1\n# ℹ 200 more rows\n\n\nMit der Funktion extract_fit_summary() erhalten wir dann noch zusätzliche Informationen, da musst du dann aber mal auf der Hilfeseite schauen, was du konkret an Informationen brauchst. Da gibt es wieder eine Menge. Am Ende kannst du dir dann noch die Informationen zu dem durchschnittlichen Silhouettenwert wiedergeben lassen um Modelle untereinander vergleichen zu können. Der Vergleich geht hier natürlich schneller, da du einfacher Variablen aus dem Modell nehmen kannst als dir immer weider enue Datensätze zu bauen.\n\n\nR Code [zeigen / verbergen]\nkmeans_fit |&gt;\n  tidyclust::silhouette_avg(select(gummi_tbl, age, height, semester))\n\n\n# A tibble: 1 × 3\n  .metric        .estimator .estimate\n  &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt;\n1 silhouette_avg standard       0.425",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Clusteranalysen</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html",
    "href": "stat-modeling-pca.html",
    "title": "68  Multivariate Verfahren",
    "section": "",
    "text": "68.1 Theoretischer Hintergrund\nLetzte Änderung am 08. January 2025 um 09:23:39\nIn diesem Kapitel betrachten wir verschiedene multivariate Verfahren. Im Znetrum steht dabei die Hauptkomponentenanalyse und deren verwandten Algorithmen. Die Hauptkomponentenanalyse (eng. Principle Component Analysis, abk. PCA) ist ein bedeutendes Verfahren zur Dimensionsreduktion. Wir haben also einen sehr großen Datensatz mit sehr vielen Spalten und wollen Muster in den Beobachtungen finden, die durch die Zeilen definiert sind. Dieses Kapitel umfasst dabei aber nur die notwendigen Verfahren und Anwendungen. Das hat vor allem damit zu tun, dass die Hauptkomponentenanalyse in den Sozialwissenschaften sehr weitreichend genutzt wird. Wir machen hier aber Agrarwissenschaften, also ist es eher ein nebensächlicher Fokus. Ebenso ist die Auswertung von Fragebögen allgemein ein Schwerpunkt der Hauptkomponentenanalyse. Auch werden Fragebögen eher selten in meinem Feld ausgewertet, deshalb hier nur das eine Kapitel, wenn man auch sicherlich viel mehr schreiben könnte.\nDas folgende Kapitel basiert zum Teilen auf den Articles - Principal Component Methods in R: Practical Guide. Diese Sammlung an Tutorien geben einen wunderbaren Überblick über alle möglichen Methoden zu der Hauptkomponentenanalyse und deren verwandten Algorithmen. Wenn dich dazu mehr interessiert kann ich das Buch von Kassambara (2017) dir sehr ans Herz legen. Dort findest du eine tolle Übersicht über die Hauptkomponentenanalyse in R.\nWas ist grob die Idee der Hauptkomponentenanalyse? Wir wollen Geraden durch unsere Datenwolke ziehen und dabei die Varianz minimieren. In der Abbildung 68.1 (a) siehst du eine solche Punktewolke. Das klingt jetzt wie die Regression und damit hast du auch recht. Die Hauptkomponentenanalyse und die lineare Regression sind nah miteinander verwandt. Damit wären wir schon beim ersten Punkt, Hauptkomponenten beschreiben einen Anteil der erklärten Varianz durch die entsprechende Hauptkomponente. Dabei erklärt grundsätzlich die 1. Hauptkomponente die meiste Varianz gefolgt von 2. Hauptkomponente und so fort. Die Hauptkomponenten sind somit nach dem Anteil der erklärten Varianz sortiert. Das ist eine grundlegende Eigenschaft der Hauptkomponenten. Darüber hinaus sind auch alle Hauptkomponenten untereinander mit 0 korreliert und somit maximal unkorreliert. Die Hauptkomponenten und damit die Geraden durch die Punktwolke stehen orthogonal oder senkrecht aufeinander. Es gibt so viele Hauptkomponente wie es Variablen in den Daten gibt. Mit Variablen meine ich hier die ungefähr die Spalten eines Datensatzes. Ungefähr, da wir nicht auf allen Spalten eine Hauptkomponenteanalyse rechnen können, aber dazu später mehr.\nIn der Abbildung 68.1 (b) sehen wir einmal dargestellt, was eine Hauptkomponentenanalyse erreichen will. Wir legen zuerst die 1. Hauptkomponente (PC1) so durch die Daten, dass die Varianz durch die 1. Hauptkomponente maximal minimiert wird. Dann berechnen wir die 2. Hauptkomponente (PC2) so, dass die 2. Hauptkomponente senkrecht auf der 1. Hauptkomponente steht. Wir reduzieren damit die Varianz maximal weiter. Denn nur durch den senkrechten Stand der zweiten Hauptkomponente auf der ersten Hauptkomponente, können wir maximal viel Varianz erklären. Da wir hier nur zwei Variablen haben, gibt es auch nur zwei Hauptkomponenten.\nMit zwei Variablen gibt es nur eine Möglichkeit, die 2. Hauptkomponente anzuordnen. Bei mehr als zwei Hauptkomponenten gebe es ja auch noch andere Drehungen der 2. Hauptkomponente die ebenfalls die Bedingung, das Lot zur 1. Hauptkomponente zu sein, erfüllen würde. Du kannst es als eine eine Drehung um die 1. Hauptkomponente als zentrale Achse sehen. Wir wählen die lotrechte Repräsentation der 2. Hauptkomponente, die am meisten Varianz erklärt, also die Abstände minimiert, die noch nicht durch die 1. Hauptkomponente minimiert wurden. Somit erklärt die 2. Hauptkomponente immer weniger Varianz als die 1. Hauptkomponente. Mit weiteren Hauptkomponenten würden wir dann immer so weiter machen, bis wir immer weniger Varianz erklären können.\nDu kannst dir jetzt noch den theoretischen Hintergrund durchlesen oder aber den Teil überspringen und die dann gleich die Daten einmal anschauen. Dann geht es auch gleich weiter zu dem Teil der angewandten Hauptkomponentenanalyse.\nSoweit klingt es ja alles recht einleuchten mit der Hauptkomponentenanalyse. Wie aber kommt jetzt die Idee einer Geraden durch die Punktewolke mit Hauptkomponenten zusammen? Wie geht das mathematisch eigentlich? Da sieht es schon etwas komplizierter aus. Deshalb fangen wir wie immer einmal mit einem Datensatz an. Wir nehmen das Datenbeispiel aus der Abbildung 68.1 (a). In der folgenden Tablle siehst du einmal die ersten sieben Wertepaare für \\(x\\) und \\(y\\) der insgesamt dreißig Zeilen.\nTabelle 68.1— Auszug aus den dreißig Datenpaaren \\(x\\) und \\(y\\).\n\n\n\n\n\n\nx\ny\n\n\n\n\n-1.4660039\n0.5425225\n\n\n-0.4523909\n-0.8303681\n\n\n-2.6538584\n-1.5160298\n\n\n-7.1191853\n-4.0628188\n\n\n2.4368904\n-0.1544630\n\n\n-6.9975329\n-3.7431590\n\n\n4.4292391\n3.4317681\nWie haben wir die Daten gebaut? Wir haben uns folgendes Modell genommen. Die \\(y\\) Werte hängen von den \\(x\\) Werten wfolgt ab.\n\\[\ny \\sim 0 + 0.5 \\cdot x + \\epsilon; \\; \\epsilon \\sim \\mathcal{N}(0,1)\n\\]\nDas heißt, wir haben eine Steigung der Geraden \\(\\beta_x\\) von \\(0.5\\). Unsere Punkte streuen mit einer Varianz von \\(1\\) um die Gerade. Wir wollen es nicht komplizierter machen als sowieso schon ist. Hier dann einmal die Implementierung in R. Das set.seed() nutzen wir um immer die gleichen Zahlen wiedergegeben zu bekommen. Wir ziehen die \\(x\\)-Werte aus einer Normalverteilung mit einem Mittelwert von 0 und einer Standardabweichung von 5.\nR Code [zeigen / verbergen]\nset.seed(2045312)\ntbl &lt;- tibble(x = rnorm(30, 0, 5),\n              y = 0 + 0.5 * x + rnorm(30, 0, 1))\nJetzt können wir einmal über die Funktion lm() die Koeffizienten der Geraden schätzen. Also wie ist den nun die Steigung und der Achsenabschnitt in den generierten Daten?\nR Code [zeigen / verbergen]\nlm(y ~ x, tbl) |&gt; \n  coefficients() |&gt; \n  round(2)\n\n\n(Intercept)           x \n       -0.1         0.5\nWir sehen, dass wir den y-Achsenabschnitt mit \\(-0.1\\) nicht ganz treffen, wohl aber die Steigung mit \\(0.5\\). Damit hätten wir die Information für die erste Gerade, was ja auch die 1. Hauptkomponente wäre. Nun müssten wir die Gerade finden, die senkrecht auf der geschätzten Geraden steht und durch den Nullpunkt läuft. Das könnten wir ausprobieren oder aber auch abschätzen. Problematisch wird das ganze, wenn wir mehr als zwei Variablen haben. Hier kommt uns aber die Varianz/Kovarianzmatrix \\(\\boldsymbol{\\Sigma_x}\\) zur Hilfe. In der Varianz/Kovarianzmatrix finden wir alle Informationen die wir brauchen und noch mehr.\nErstmal wollen wir die Varianz/Kovarianzmatrix mit der Funktion cov() aus dem Datensatz berechnen. Wir runden hier ziemlich streng damit wir die Zahlen besser vergleichen können.\nR Code [zeigen / verbergen]\ncov(tbl) |&gt; \n  round(1)\n\n\n     x    y\nx 21.6 10.9\ny 10.9  6.1\nHier nochmal die Varianz/Kovarianzmatrix mathematisch aufgeschrieben. Auf der Diagonalen der Matrix findest du die Varianzen von \\(x\\) sowie von \\(y\\). Auf den Nebendiagonalen dann die Kovarianz von \\(x\\) und \\(y\\). Die Kovarianz beschriebt ja das Variieren von \\(y\\), wenn sich auch \\(x\\) ändert. Eine Kovarianz von 0 bedeutet damit dann auch, dass wir keine Steigung oder einen Trend in der Punktewolke sehen. Ändert sich \\(x\\) ändert sich \\(y\\) nicht, wir haben kein gemeinsames Variieren.\n\\[\n\\Sigma =\n\\begin{pmatrix}\n\\operatorname{Var}(x) & \\operatorname{Cov}(x, y) \\\\\n\\operatorname{Cov}(x, y) & \\operatorname{Var}(y)\n\\end{pmatrix} =\n\\begin{pmatrix}\n21.6 & 10.9 \\\\\n10.9 & 6.1\n\\end{pmatrix}\n\\]\nUnd jetzt kommt der eigentlich Kniff. Wir können aus der Kovarianzmatrix unser \\(\\beta_x\\) berechnen. So einfach zwar nur, wenn wir zwei Variablen haben, aber das Prinzip ist auch bei mehr Variablen gegeben. Wenn wir die Kovarianz \\(\\operatorname{Cov}(x, y)\\) durch die Varianz (x) von \\(x\\) teilen, erhalten wir die Steigung der Geraden.\n\\[\n\\beta_x = \\cfrac{\\operatorname{Cov}(x, y)}{\\operatorname{Var}(x)} = \\cfrac{10.9}{21.6} \\approx 0.5\n\\]\nDas heißt, dass wir in der Varianz/Kovarianzmatrix die Informationen über die Steigung der Geraden haben. Mehr noch, wenn wir mehrere Variablen haben, dann ist das Zusammenspiel der Variablen in der Varianz/Kovarianzmatrix verborgen. Schauen wir dazu nochmal die Abbildung 68.3 (a) an. Hier sehen wir, wie die 1. Hauptkomponente durch die Punktewolke läuft. Wie kriegen wir jetzt in Abbildung 68.3 (b) für die 2. Hauptkomponente die Koeffizienten der Gerade bestimmt? Hier kommt uns eine Eigenschaft einer Matrix und die Zerlegung der Matrix in ihre Eigenwerte und Eigenvektoren zu Hilfe.\n(a) 1. Hauptkomponente (PC1) durch die Punktewolke\n\n\n\n\n\n\n\n\n\n\n\n(b) 2. Hauptkomponente (PC2) durch die Punktewolke\n\n\n\n\n\n\n\n\n\n\n\n(c) Regressionsgleichungen der 1. Hauptkomponente (PC1) sowie deren Rotation zur 2. Hauptkomponente.\n\n\n\n\n\n\n\nAbbildung 68.3— Schematische Darstellung der 1. Hauptkomponente (PC1) durch die Punktewolke mit maximal erklärter Varianz, da minimaler Abstand zu den Punkten. Die 2. Hauptkomponente muss lotrecht auf der 1. Hauptkomponente stehen und dabei die Varianz weiter maximal minimieren. Im Weiteren wurden dann die Regressiongleichungen ergänzt. [Zum Vergrößern anklicken]\nFolgende Funktion eigen() berechnet die Eigenwerte aus der Varianz/Kovarianzmatrix. Erstmal sieht das wieder realtiv wild aus und wir erkennen da noch nicht so richtig ein Muster. Eigenwerte und ihre Eigenvektoren sind nicht miteinander korreliert und stehen sozusagen orthogonal und damit senkrecht aufeinander. Das ist es was wir suchen!\nR Code [zeigen / verbergen]\neigen_res &lt;- cov(tbl) |&gt; \n  eigen()\neigen_res\n\n\neigen() decomposition\n$values\n[1] 27.2356150  0.4907358\n\n$vectors\n           [,1]       [,2]\n[1,] -0.8887583  0.4583762\n[2,] -0.4583762 -0.8887583\nWenn du jetzt die untere Zeile durch die obere Zeile der Eigenvektoren teilst, dann erhälst du zwei Zahlen.\nR Code [zeigen / verbergen]\neigen_res$vectors[2,] / eigen_res$vectors[1,]\n\n\n[1]  0.515749 -1.938928\nUnd wir sehen auch, dass wir in den Eigenwerten die Varianz wiederfinden. Wir hatten ja unsere \\(x\\)-Variable mit einer Standardabweichung von \\(5\\) erschaffen und unsere \\(y\\)-Variable um die Standardabweichung von \\(1\\) erhöht. Das finden wir dann auch hier wieder.\nR Code [zeigen / verbergen]\neigen_res$values |&gt; sqrt()\n\n\n[1] 5.2187752 0.7005254\nDie erste Zahl ist \\(\\beta_x\\) extrem nahe und entspricht auch der Steigung der Geraden durch die Punktewolke. Die zweite Zahl ist die Steigung einer Geraden die orthogonal auf der ersten gerade steht und durch den Ursprung läuft. Wir haben damit die zweite Hauptkomponente gefunden.\nDas Ganze auch mal mit der richtigen Funktion prcomp(), die das Ganze dann auch für mehr als zwei Dimensionen und Variablen kann. Hier siehst du auch warum es in der Funktion dann rotation heißt, es ist eben die Drehung der Hauptkomponenten untereinander. Auch finden wir hier in den Eigenwerten die Standardabweichungen wieder, die wir ursprünglich in der Generierung der Daten verwendet haben.\nR Code [zeigen / verbergen]\npca_res &lt;- prcomp(tbl)\npca_res\n\n\nStandard deviations (1, .., p=2):\n[1] 5.2187752 0.7005254\n\nRotation (n x k) = (2 x 2):\n        PC1        PC2\nx 0.8887583 -0.4583762\ny 0.4583762  0.8887583\nAuch hier können wir wieder die zweite Zeile durch die erste Zeile teilen und kriegen die Steigungen der Geraden aus der Abbildung 68.3 (b) wieder.\nR Code [zeigen / verbergen]\npca_res$rotation[2,] / pca_res$rotation[1,]\n\n\n      PC1       PC2 \n 0.515749 -1.938928\nIch habe dann mal die Geradengleichungen, die sich für die beiden Hauptkomponenten ergeben einmal zu der Abbildung 68.3 (c) ergänzt. Das funktioniert natürlich alles nur auf standardisierten Daten sonst ist ja auch der y-Achsenabschnitt nicht 0. Ja, es geht formal auch auf den nicht transformierten Daten, aber der Standard ist, die Daten zu standardisieren.\nDiese Demonstration funktioniert nur mit zwei Variablen, da wir ja nur zweidimensionale Abbildungen erstellen können und zum anderen der Zusammenhang der Steigungen aus der Varianz/Kovarianzmatrix und den Eigenwerten dann gegeben ist. Das Prinzip bleibt aber das Gleiche. Wir nutzen die mathematischen Eigenschaften der Eigenwertzerlegung von Matrizen um uns orthogonale Geraden wiedergeben zu lassen.\nWas machen wir jetzt also nochmal? Wir wollen unseren Daten, also die ganze Datenmatrix einmal so transformieren, dass wir neue Komponenten aus den Daten extrahieren, die die Daten auf einer anderen Dimension beschreiben. Im Prinzip handelt es sich also bei der Hauptkomponentenanalyse um eine komplexere Transformation der Daten. Wir nutzen dabei die Varianz/Kovarianzmatrix als unsere Distanzmatrix. Wird die gesamte Varianz der Daten vielleicht nur von wenigen Spalten verursacht? Dann brauchen wir ja nur diese wenigen Hauptkomponenten weiter betrachten. Wir nutzen also die Varianz/Kovarianzmatrix als unsere Ähnlichkeitsmatrix, wie schon bei den Clusteranalysen, um hier unbekannte Zusammenhänge zwischen den Spalten und damit dann Hauptkomponenten aufzuklären.\nNeben der PCA existiert noch das Multidimensional Scaling (abk. MDS). Das MDS ist im Prinzip eine Spezialform der PCA. Im Unterschied zur PCA wird die MDS auf einer Distanzmatrix gerechnet. In einer MDS können wir nicht einfach so unsere Daten reinstecken sondern müssen zuerst die Daten in eine Distanzmatrix umrechnen. Dafür gibt es die Funktion dist() oder as.dist(), wenn wir schon Distanzen vorliegen haben. Daher ist die Anwendung einer MDS nicht besonders komplizierter.\nWenn wir eine PCA in R rechnen wollen, dann haben wir zuerst die Wahl zwischen den Funktionen prcomp() und princomp(). Laut der R-Hilfe hat die Funktion prcomp() eine etwas bessere numerische Genauigkeit. Daher ist die Funktion prcomp() gegenüber princomp() vorzuziehen. Es gibt aber noch eine neuere Implementierung der Funktionalität in dem R Paket {FactoMineR} und der Funktion PCA(). Da wir dann alles aus einer Hand haben nutzen wir in diesem Kapitel also das R Paket {factoextra}. Wir haben in dem Paket auch die die Funktionen um sich Faktoranalysen super anzuschauen und durchzuführen. Du kannst mehr auf der Webseite Factoextra R Package: Easy Multivariate Data Analyses and Elegant Visualization mehr über das Paket erfahren.\nEs gibt eine natürlich große Anzahl an Quellen wie du in R eine PCA oder ein MDS durchführst. In der folgenden Box findest du eine Sammlung an Tutorien und R Code, der dir als Inspiration dienen mag. Ich werde Teile von den Tutorien in dem Kapitel hier adaptieren und verwenden, kann aber natürlich nichts alles nochmal nachkochen. Das ist ja auch nicht der Sinn hier.\nWir wollen uns jetzt die Hauptkomponentenanalyse an zwei Spieldaten anschauen. Eigentlich werden ja auch gerne Fragebögen mit der Hauptkomponentenanalyse ausgewertet, aber hier muss ich nochmal warten bis ich ein gutes Beispiel in den Beratungen hatte. Dann ergänze ich natürlich ein Beispiel für die Auswertung eines Fragebogen mittels Hauptkomponentenanalyse beim Skript zu den Beispielhaften Auswertungen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#theoretischer-hintergrund",
    "href": "stat-modeling-pca.html#theoretischer-hintergrund",
    "title": "68  Multivariate Verfahren",
    "section": "",
    "text": "Exkurs: Die Varianz/Kovarianzmatrix \\(\\boldsymbol{\\Sigma_x}\\)\n\n\n\n\n\nWenn du dich ein wenig mit Eigenwerten auskennst, dann weißt du, dass Eigenwerte immer auf einer Matrix berechnet werden. In unserem Fall werden die Eigenwerte der Hauptkomponeten auf der Varianz/Kovarianzmatrix der standardisierten Daten berechnet. Im Folgenden siehst du einmal die Varianz/Kovarianzmatrix \\(\\boldsymbol{\\Sigma_x}\\) für die Datenmatrix \\(x\\). Du musst dir vorstellen, dass jedes \\(x_1\\) bis \\(x_n\\) jeweils eine Spalte in deiner Datenmatrix \\(\\boldsymbol{x}\\) entspricht, die wir in unser Modell für die Hauptkomponentenanalyse aufnehmen wollen.\n\\[\n\\boldsymbol{\\Sigma_x} = \\begin{pmatrix}\\operatorname{Var}(x_1) & \\operatorname{Cov}(x_1,x_2) & \\cdots & \\operatorname{Cov}(x_1,x_n) \\\\ \\\\\n\\operatorname{Cov}(x_2,x_1)  & \\operatorname{Var}(x_2) & \\cdots & \\operatorname{Cov}(x_2,x_n) \\\\ \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\ \\\\\n\\operatorname{Cov}(x_n,x_1) & \\operatorname{Cov}(x_n,x_2) & \\cdots & \\operatorname{Var}(x_n)\n\\end{pmatrix}\n\\]\nFür den Fall von zwei Variablen \\(x_1\\) und \\(x_2\\) können wir die Idee der Kovarianz nochmal nachvollziehen. Später rechnen wir dann die Hauptkomponentenanalyse auf der großen Matrix, aber ich kann dir den Zusammenhang leider nur für zwei Variablen erklären, den zweidimensional kriege ich noch hin. Wir können mit folgender Formel die Kovarianzen zwischen den beiden Variablen \\(x_1\\) und \\(x_2\\) berechnen.\n\\[\n\\operatorname{Cov}(x_2,x_1) = \\sum_{i=1}^n(x_{1i}-\\bar{x_1})(x_{2i}-\\bar{x_2})\n\\]\nNochmal als Erinnerung, die Formel berechnet die quadrierten Abweichung der Beobachtungen von \\(x_1\\) zum Mittelwert \\(\\bar{x}_1\\) und somit die Varianz \\(\\operatorname{Var}(x_1)\\) von \\(x_1\\).\n\\[\n\\operatorname{Var}(x_1) = \\sum_{i=1}^n(x_{1i}-\\bar{x}_1)^2\n\\]\nEbenso berechnet diese Formel die quadrierten Abweichung der Beobachtungen von \\(x_2\\) zum Mittelwert \\(\\bar{x}_2\\) und damit die Varianz \\(\\operatorname{Var}(x_2)\\) von \\(x_2\\).\n\\[\n\\operatorname{Var}(x_2) = \\sum_{i=1}^n(x_{2i}-\\bar{x}_2)^2\n\\]\nDas Ganze ist natürlich sehr trocken. Deshalb füttern wir einmal die Variablen \\(x_1\\) und \\(x_2\\) mit echten Daten und erschaffen uns den Datensatz cov_tbl. In Tabelle 68.2 ist der Zusammenhang nochmal Schritt für Schritt aufgeschlüsselt wie sich die Zahlen grob berechnen. Ich habe ein, zwei Schritte ausgelassen, aber die ergänzt du fix selber.\n\n\nR Code [zeigen / verbergen]\ncov_tbl &lt;- tibble(x_1 = c(0.8, 1.0, 1.2, 1.9, 2.0, 2.7, 2.8),\n                  x_2 = c(1.2, 1.8, 1.3, 1.7, 2.6, 1.8, 2.7))\n\n\nDann können wir uns einmal den Mittelwert und die Varianz für die beiden Variablen \\(x_1\\) und \\(x_2\\) berechnen.\n\n\nR Code [zeigen / verbergen]\ncov_tbl |&gt; \n  gather() |&gt; \n  group_by(key) |&gt; \n  summarise(mean = mean(value), var = var(value))\n\n\n# A tibble: 2 × 3\n  key    mean   var\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 x_1    1.77 0.642\n2 x_2    1.87 0.339\n\n\nIn der folgenden Abbildung 68.2 siehst du einmal die Konzepte der Varianz für \\(x_1\\) in Subplot A und \\(x_2\\) in Subplot B dargestellt. Die durchgezogene Linie stellt dabei den Mittelwert für die beiden Variablen dar. Die Varianz berechnet sich jetzt als der quadrierte Abstand von den Beobachtungen zu den Mittelwerten. Der Abstand ist als gestrichelte Linie dargestellt. Faktisch addierst du die sich ergebenden Quadrate auf. Bei der Kovarianz sind es keine Quadrate, sondern Rechtecke. Die berechnest nämlich einmal den Abstand einer Beobachtung zum Mittelwert von \\(x_1\\) und einmal den Abstand zum Mittelwert von \\(x_2\\). Die beiden Abstände \\((x_{1i}-\\bar{x_1})\\) und \\((x_{2i}-\\bar{x_2})\\) multiplizierst du und addierst dann diese Rechtecke auf.\n\n\n\n\n\n\n\n\nAbbildung 68.2— Berechnung der Abstände für die Varianz von \\(x_1\\) sowie \\(x_2\\) in der oberen Zeile. In der unteren Zeile die Rechtecke der Berechnung der Kovarianz von \\(x_1\\) und \\(x_2\\).\n\n\n\n\n\nIn der folgenden Tabelle 68.2 siehst du dann das Vorgehen nochmal numerisch. Wichtig ist hierbei, dass wir am Ende die Varianz und die Kovarianz berechnen können indem wir die Summen \\(\\sum\\) durch \\(n-1\\) gleich 6 teilen.\n\n\n\nTabelle 68.2— Tabelle zur Berechnung der Varianz sowie der Kovarianz von \\(x_1\\) und \\(x_2\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\\(\\boldsymbol{x_1}\\)\n\\(\\boldsymbol{x_2}\\)\n\\(\\boldsymbol{(x_{2i}-\\bar{x}_2)^2}\\)\n\\(\\boldsymbol{(x_{1i}-\\bar{x}_1)^2}\\)\n\\(\\boldsymbol{(x_{1i}-\\bar{x}_1)(x_{2i}-\\bar{x}_2)}\\)\n\n\n\n\n1.2\n0.8\n0.94\n0.45\n0.65\n\n\n1.8\n1.0\n0.60\n0.01\n0.06\n\n\n1.3\n1.2\n0.33\n0.33\n0.33\n\n\n1.7\n1.9\n0.02\n0.03\n-0.02\n\n\n2.6\n2.0\n0.05\n0.53\n0.17\n\n\n1.8\n2.7\n0.86\n0.03\n-0.07\n\n\n2.7\n2.8\n1.06\n0.69\n0.85\n\n\n\n\\(\\sum\\)\n3.86\n2.05\n1.97\n\n\n\n\\(\\cfrac{\\sum}{n-1}\\)\n0.64\n0.34\n0.33\n\n\n\n\n\n\nSchauen wir mal, ob wir richtig gerechnet haben und die Varianz für \\(x_1\\) mit 0.64, die Varianz von \\(x_2\\) mit 0.34 sowie die Kovarianz von \\(x_1\\) und \\(x_2\\) auch R wiederfinden. Wir nutzen die Funktion cov() um uns die Varianz/Kovarianzmatrix wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\ncov_tbl |&gt; \n  cov() |&gt; \n  round(2)\n\n\n     x_1  x_2\nx_1 0.64 0.33\nx_2 0.33 0.34\n\n\nWie wir sehen können wir die Werte in der Varianz/Kovarianzmatrix wiederfinden. Das ist ja mal ein Erfolg. Wir nutzen also die Varianz/Kovarianzmatrix als unsere Ähnlichkeitsmatrix, wie schon bei den Clusteranalysen, um hier unbekannte Zusammenhänge zwischen den Spalten und damit dann den Hauptkomponenten aufzuklären.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeht das etwas korrekter?\n\n\n\nJa, das war jetzt mathematisch teilweise unsauber. Aber darum geht es ja hier auch nicht - wir machen ja hier die Anwendung mit einem erweiterten Grundverständnis. Mathematisch besser geht natürlich in dem A Beginner’s Guide to Eigenvectors, Eigenvalues, PCA, Covariance and Entropy. Auch dem Rahmen ist das Tutorium Eigenvalues and Eigenvectors: Properties interessant. Am Ende noch ein Tutorium von Stackexchange Making sense of principal component analysis, eigenvectors & eigenvalues. Wie immer, du musst wissen wie tief du dann noch abtauchen willst.\n\n\n\n\n\n\n\n\n\nHauptkomponente, Eigenwert und Varianz kurz zusammengefasst\n\n\n\nIn einer Hauptkomponentenanalyse ersetzen wir die ursprünglichen Spalten eines Datensatzes durch Hauptkomponenten. Die Hauptkomponenten haben so viele Dimensionen wie es Spalten im ursprünglichen Datensatz gibt. Jede Hauptkomponente hat einen Eigenwert (eng. eigenvalue), der den Anteil der erklärten Varianz der Hauptkomponente in den Daten beschreibt. Wir können die Beobachtungen oder Individuen (abk. ind) in den Zeilen betrachten oder aber die Variablen (abk. var) in den Spalten.\n\n\n\n\n\n\n\n\n\n\n\nWeitere Tutorien für die Principal Component Analysis\n\n\n\n\n\nWie immer gibt es eine Vielzahl an tollen Tutorien, die die PCA gut erklären. Ich habe hier einmal eine Auswahl zusammengestellt und du kannst dich da ja mal vertiefend mit beschäftigen, wenn du willst. Teile der Tutorien findest du vermutlich hier im Kapitel wieder.\n\nPrincipal Component Analysis (PCA) For Dummies\nPrincipal Component Analysis 4 Dummies: Eigenvectors, Eigenvalues and Dimension Reduction\nThe most gentle introduction to Principal Component Analysis\nWelcome to a Little Book of R for Multivariate Analysis!",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#genutzte-r-pakete",
    "href": "stat-modeling-pca.html#genutzte-r-pakete",
    "title": "68  Multivariate Verfahren",
    "section": "68.2 Genutzte R Pakete",
    "text": "68.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, readxl, patchwork,\n               factoextra, FactoMineR, ggpubr, MASS, mda,\n               janitor, corrplot, HDclassif, klaR, see,\n               conflicted)\nconflicts_prefer(dplyr::select)\nconflicts_prefer(magrittr::set_names)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#daten",
    "href": "stat-modeling-pca.html#daten",
    "title": "68  Multivariate Verfahren",
    "section": "68.3 Daten",
    "text": "68.3 Daten\nWenn wir jetzt die Hauptkomponentenanalyse rechnen wollen, dann brauchen wir auch Datenbeispiele. Ich habe jetzt zwei sehr eingängige Beispiele gewählt, die du nicht so stark inhaltlich durchdringen musst. Es geht um die Unterschiede von Tieren und deren Eigenschaften. Die Datenbeispiele sind so gewählt, dass du das Konzept hinter der Hauptkomponentenanalyse verstehst und nicht so sehr nach der direkten Anwendbarkeit. Danach schauen wir uns noch an, warum wir die Daten standardisieren müssen und wie wir mit dem data.frame()-Problem umgehen. Wir können leider keine tibble() in der Hauptkomponentenanalyse nutzen.\n\n68.3.1 Zwei Beispieldatensätze\nBeginnen wir mit einem normierten Datensatz aus dem R Paket {cluster}. Der Datensatz animals wurde von mir noch mit ein paar Tieren ergänzt und schaut sich sechs Eigenschaften von 23 Tieren an. Wir wollen im Folgenden nun herausfinden, ob wir anhand der Eigenschaften in den Spalten die Tiere in den Zeilen in Gruppen einordnen können. Einige der Tiere sind ja näher miteinander verwandt als andere Tiere. Die ursprünglichen Daten liefen noch auf einem \\(1/2\\)-System, das ändern wir dann zu \\(0/1\\) damit wir dann auch besser mit den Daten arbeiten können. Für die Algorithmen ist es egal, aber ich habe lieber \\(1\\) gleich ja und \\(0\\) gleich nein.\n\n\nR Code [zeigen / verbergen]\nanimals_tbl &lt;- read_excel(\"data/cluster_animal.xlsx\", sheet = 1) |&gt; \n  clean_names() |&gt; \n  mutate(across(where(is.numeric), \\(x) x - 1))\n\n\nSchauen wir uns einmal den Datensatz in der Tabelle 68.3 an. Wir sehen, dass wir noch einige fehlende Werte in den Daten vorliegen haben. Das ist manchmal ein Problem, deshalb werden wir im Laufe der Analyse die NA Werte mit na.omit() entfernen.\n\n\n\n\nTabelle 68.3— Übersicht über die 23 Tiere mit den sechs Eigenschaften in den Spalten. Eine 1 bedeutet, dass die Eigenschaft vorliegt; eine 0 das die Eigenschaft nicht vorliegt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nanimal\nwarm_blooded\nfly\nvertebrate\nthreatened\nlive_in_groups\nhair\n\n\n\n\nant\n0\n0\n0\n0\n1\n0\n\n\nbee\n0\n1\n0\n0\n1\n1\n\n\ncat\n1\n0\n1\n0\n0\n1\n\n\ncentipede\n0\n0\n0\n0\n0\n1\n\n\nchimpanzee\n1\n0\n1\n1\n1\n1\n\n\ncow\n1\n0\n1\n0\n1\n1\n\n\ndolphin\n1\n0\n1\n1\n1\n0\n\n\nduck\n1\n1\n1\n0\n1\n0\n\n\neagle\n1\n1\n1\n1\n0\n0\n\n\nearthworm\n0\n0\n0\n0\n0\n0\n\n\nelephant\n1\n0\n1\n1\n1\n0\n\n\nfly\n0\n1\n0\n0\n0\n0\n\n\nfrog\n0\n0\n1\n1\nNA\n0\n\n\nherring\n0\n0\n1\n0\n1\n0\n\n\nhorse\n1\n0\n1\n0\n1\n1\n\n\nhuman\n1\n0\n1\n1\n1\n1\n\n\nlion\n1\n0\n1\nNA\n1\n1\n\n\nlizard\n0\n0\n1\n0\n0\n0\n\n\nlobster\n0\n0\n0\n0\nNA\n0\n\n\nrabbit\n1\n0\n1\n0\n1\n1\n\n\nsalmon\n0\n0\n1\n0\nNA\n0\n\n\nspider\n0\n0\n0\nNA\n0\n1\n\n\nwhale\n1\n0\n1\n1\n1\n0\n\n\n\n\n\n\n\n\nDer Tierdatensatz ist schön, da wir es hier nur mit 0/1 Werten zu tun haben. Wir werden später in dem preprocessing der Daten sehen, dass wir alle Spalten in der gleichen Spannweite der Werte wollen. Das klingt immer etwas kryptisch, aber der nächste Datensatz über verschiedene Kreaturen macht es deutlicher.\n\n\nEine andere Art die Daten zu Gruppieren kannst du im Tutorium Clustering Creatures nochmal nachvollziehen.\nIm Folgenen einmal der Datensatz, den wir dann in der gleichen Exceldatei finden nur eben auf dem zweiten Tabellenblatt. Wir reinigen noch die Namen und setzen die creature-Spalte auf Klein geschrieben. Wie du siehst, haben wir dann nur 15 Kreaturen und drei Spalten mit dem Gewicht, der Herzrate und dem maximalen möglichen Alter.\n\n\nR Code [zeigen / verbergen]\ncreature_tbl &lt;- read_excel(\"data/cluster_animal.xlsx\", sheet = 2) |&gt; \n  clean_names() |&gt; \n  mutate(creature = tolower(creature))\n\n\nIn der Tabelle 68.4 sehen wir nochmal die Daten dargestellt und hier erkennst du auch gut, wo das Problem liegt. Die Masse der Tiere reicht von \\(6g\\) beim Hamster bis \\(120000000g\\) beim Wal. Diese Spannweiten in einer Spalte und zwischen den Spalten führt dann zu Problemen bei den Algorithmen. Deshalb müssen wir hier Daten nochmal normalisieren oder aber standardisieren. Je nachdem was da besser passt.\n\n\n\n\nTabelle 68.4— Übersicht über die 15 Kreaturen mit den drei Eigenschaften in den Spalten. Wir haben hier sehr große Unterschiede in den Datenwerten. Daher müssen wir vor dem Clustern nochmal normalisieren.\n\n\n\n\n\n\ncreature\nmass_grams\nheart_rate_bpm\nlongevity_years\n\n\n\n\nhuman\n9.0e+04\n60\n70\n\n\ncat\n2.0e+03\n150\n15\n\n\nsmall dog\n2.0e+03\n100\n10\n\n\nmedium dog\n5.0e+03\n90\n15\n\n\nlarge dog\n8.0e+03\n75\n17\n\n\nhamster\n6.0e+01\n450\n3\n\n\nchicken\n1.5e+03\n275\n15\n\n\nmonkey\n5.0e+03\n190\n15\n\n\nhorse\n1.2e+06\n44\n40\n\n\ncow\n8.0e+05\n65\n22\n\n\npig\n1.5e+05\n70\n25\n\n\nrabbit\n1.0e+03\n205\n9\n\n\nelephant\n5.0e+06\n30\n70\n\n\ngiraffe\n9.0e+05\n65\n20\n\n\nlarge whale\n1.2e+08\n20\n80\n\n\n\n\n\n\n\n\n\n\n68.3.2 Standardisieren\nDie Standardisierung zwingt Variablen in eine \\(\\mathcal{N(0,1)}\\) Standardnormalverteilung. Das heißt, wir transformieren alle Variablen auf einen Mittelwert von \\(0\\) und einer Standardabweichung von \\(1\\). Hier nochmal die Formel für die Standardisierung oder auch \\(z\\)-Transformation. Achtung, wir müssen unsere Daten standatdisieren, damit wir auf jeden Fall die Graden durch den Ursprung zeichnen können. Wir kriegen ja bei der Eigenwertzerlegung und der Hauptkomponentenanalyse nur die Stiegungen wieder und damit muss alles auf den Ursprung normiert werden.\n\\[\nz = \\cfrac{x_i - \\bar{x}}{s_x}\n\\]\nWie wir hier sehen ziehen wir von jeder \\(i\\)-ten Beobachtung den Mittlwert von allen Beobachtungen ab. Dann teilen wir noch durch die Standardabweichung alle Beobachtungen. Am Ende ist dann damit unser Mittelwert auf \\(0\\) und unsere Standardabweichung auf \\(1\\). Unsere Daten haben damit den Schwerpunkt bei der \\(0\\) und unsere Geraden der Hauptkomponentenanalyse laufen immer durch den Ursprung.\nDie Standardisierung macht dann auch die Daten sehr schon gleichförmig. Hier nutzen wir auch die Funktion transform() aus dem R Paket {dlookr} mit der Option zscore. Damit wir auch auf jeden Fall sicher gehen, dass wir die richtige Funktion nutzen, schreiben wir dlookr::transform() und damit ist sichergestellt, dass wir auch die Funktion transform() aus dem R Paket {dlookr} nutzen.\n\n\nR Code [zeigen / verbergen]\nstd_creature_tbl &lt;- creature_tbl |&gt; \n  mutate(mass_grams = dlookr::transform(mass_grams, \"zscore\"),\n         heart_rate_bpm = dlookr::transform(heart_rate_bpm, \"zscore\"),\n         longevity_years = dlookr::transform(longevity_years, \"zscore\")) \n\n\nRegistered S3 methods overwritten by 'dlookr':\n  method          from  \n  plot.transform  scales\n  print.transform scales\n\n\nR Code [zeigen / verbergen]\nstd_creature_tbl\n\n\n# A tibble: 15 × 4\n   creature    mass_grams heart_rate_bpm longevity_years\n   &lt;chr&gt;       &lt;transfrm&gt; &lt;transfrm&gt;     &lt;transfrm&gt;     \n 1 human       -0.2739558 -0.5739180      1.6794647     \n 2 cat         -0.2768074  0.2094888     -0.5409814     \n 3 small dog   -0.2768074 -0.2257372     -0.7428402     \n 4 medium dog  -0.2767102 -0.3127824     -0.5409814     \n 5 large dog   -0.2766129 -0.4433502     -0.4602379     \n 6 hamster     -0.2768702  2.8208449     -1.0254424     \n 7 chicken     -0.2768236  1.2975538     -0.5409814     \n 8 monkey      -0.2767102  0.5576696     -0.5409814     \n 9 horse       -0.2379870 -0.7131904      0.4683123     \n10 cow         -0.2509487 -0.5303954     -0.2583792     \n11 pig         -0.2720115 -0.4868728     -0.1372639     \n12 rabbit      -0.2768398  0.6882374     -0.7832119     \n13 elephant    -0.1148507 -0.8350536      1.6794647     \n14 giraffe     -0.2477083 -0.5303954     -0.3391227     \n15 large whale  3.6116436 -0.9220988      2.0831822     \n\n\nDie Funktion PCA(), die wir im Folgenden verwenden wollen, wird zwar auch die Daten intern von sich aus standardisieren, wenn die nicht standardisiert wurden. Ich mag es aber nicht, wenn wichtige Schritte in Funktionen begraben werden, deshalb hier nochmal das Beispiel, wie man es macht. Doppelt Standardisieren tut aber nicht weh, schon standardiserte Daten ändern sich nicht durch eine weitere Standardisierung.\n\n\n68.3.3 Das data.frame() Problem\nLeider ist es so, dass fast alle Pakete im Kontext der Hauptkomponentenanalyse mit den Zeilennamen bzw. row.names() eines data.frame() arbeiten. Das hat den Grund, dass wir gut das Label in den Zeilennamen parken können, ohne das uns eine Spalte in den Auswertungen stört. Meistens ist das Label ja ein character und soll gar nicht in die Hauptkomponentenanalyse mit rein. Deshalb müssen wir hier einmal unsere tibble() in einen data.frame() umwandeln. Die tibble() haben aus gutem Grund keine Zeilennamen, die Zeilennamen sind ein Ärgernis und Quelle von Fehlern und aus gutem Grund nicht in einem tibble() drin. Hier brauchen wir die Zeilennamen aber.\nWir bauen uns also einmal einen data.frame() für unseren Tierdatensatz und setzen die Tiernamen als Zeilennamen bzw. row.names(). Wir entfernen dann auch noch schnell alle fehlenden Werte, denn wir wollen uns hier nicht noch mit der Imputation von fehlenden Werten beschäftigen.\n\n\nR Code [zeigen / verbergen]\nanimals_df &lt;- animals_tbl |&gt; \n  na.omit() |&gt; \n  as.data.frame() |&gt; \n  column_to_rownames(\"animal\") \n\n\nDas Ganze machen wir dann auch noch einmal für die normalisierten Kreaturendaten. Wir wollen dann ja nur auf den normalisierten Daten weitermachen.\n\n\nR Code [zeigen / verbergen]\nstd_creature_df &lt;- std_creature_tbl |&gt; \n  as.data.frame() |&gt; \n  column_to_rownames(\"creature\")",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#hauptkomponentenanalyse",
    "href": "stat-modeling-pca.html#hauptkomponentenanalyse",
    "title": "68  Multivariate Verfahren",
    "section": "68.4 Hauptkomponentenanalyse",
    "text": "68.4 Hauptkomponentenanalyse\nJetzt haben wir uns mit sehr viel Theorie beschäftigt und deshalb nochmal in der Abbildung 68.4 ein schematischer Überblick über den Ablauf der Hauptkomponentenanalyse. Wir nutzen die Daten und berechnen für die Daten die Varianz/Kovarianzmatrix. Auf der Varianz/Kovarianzmatrix rechnen wir dann die Hauptkomponentenanalyse. Beide Schritte sind intern in den Funktionen in R implementiert. Du musst nur auf die Daten achten. Dann können wir uns die Hauptkomponenten und die Eigenwerte als Korrelationsplot anschauen und die Aussagekraft der Variablen sehen.\n\n\n\n\n\n\nAbbildung 68.4— Verlauf einer generalisierten Hauptkomponentenanalyse von dem Datensatz über die Varianz/Kovarianzmatrix zu den unkorrelierten Hauptkomponeten und deren Koordinaten unabhängig von den Eigenschaften der Variablen. Abschließend sind die Koordinaten der Hauptkomponenten im Koorelationsplot der 1. und 2. Hauptkomponente dargestellt. Variablen die nahe beieinander sind, sind positiv miteinander korreliert; Variablen in den gegenüberliegenden Quadranten naegativ. Je weiter eine Variable außen liegt, desto höher ist die Aussagekraft. Variablen nahe dem Ursprung, haben eine geringe Bedeutung. Am Beispiel der Variable fly werden nochmal die Koordinaten deutlich. [Zum Vergrößern anklicken]\n\n\n\nEs gibt viele Implementierungen der Hauptkomponentenanalyse in R. Wir nutzen die Funktion PCA() aus dem R Paket {FactoMineR} für die Analyse von kontinuierlichen Variablen. Denk immer daran, es kann maximal nur so viele Hauptkomponenten geben, wie wir auch Spalten in den Daten vorliegen haben. Folgende wichtige Funktionen werden wir jetzt einmal nutzen. Es gibt noch mehr, aber das übersteigt die einfache Hauptkomponentenanalyse, die wir uns hier anschauen wollen.\nDie zentrale Funktion ist aber die Funktion PCA() womit wir die eigentliche Hauptkomponentenanalyse erstmal durchführen, wenn kontinuierliche Variablen vorliegen. Die Funktion nimmt die Daten und berechnet dann intern die Varianz/Kovarianzmatrix. Die Varianz/Kovarianzmatrix wird dann als Distanzmatrix genutzt um die Hauptkomponenten und deren Eigenwerte zu berechnen.\nNeben der Funktion PCA() aus dem R Paket {FactoMineR} für die Analyse von kontinuierlichen Variablen gibt es noch eine Reihe anderer Funktionen für eine Hauptkomponentenanalyse wenn wir kategoriale Variablen oder eine Mischung vorliegen haben. Hier mal die vollständige Liste.\n\nPCA - Principal Component Analysis, zur Analyse eines Datensatzes mit kontinuierlichen Variablen\nCA - Correspondence Analysis (Korrespondenzanalyse), für die Analyse der Assoziation zwischen zwei kategorialen Variablen.\nMCA - Multiple Correspondence Analysis, für die Analyse eines Datensatzes mit kategorialen Variablen.\nFAMD - Factor Analysis of Mixed Data (Faktorenanalyse gemischter Daten), für die Analyse eines Datensatzes, der sowohl kontinuierliche als auch kategoriale Variablen enthält.\nMFA - Multiple Factor Analysis, für die Analyse eines Datensatzes, der in Gruppen strukturierte Variablen enthält.\n\n\n68.4.1 PCA - Principal Component Analysis\nBei der Nutzung der Funktion PCA() ist für mich wichtig, dass wir nicht gleich irgendwelche Abbildungen erhalten, deshalb ist hier im Skript graph = FALSE gewählt. Mit der Option scale.unit = TRUE musst du die Daten selber nicht standardisieren sondern die Funktion PCA() macht das für dich. Manchmal sind Fragebögen sehr groß mit mehr als Dutzenden von Fragen, da macht es Sinn sich nicht die Anzahl an Fragen als Hauptkomponenten wiedergeben zu lassen. Die Option ncp = 5 zum Beispiel schränkt hier die Anzahl auf 5 Hauptkomponenten ein. Bei den Kreaturen macht es keinen Sinn, da erhalten wir natürlich nur drei Hauptkomponenten, da wir nur drei Spalten in dem Datensatz haben.\n\n\nR Code [zeigen / verbergen]\npca_animals &lt;- PCA(animals_df, scale.unit = TRUE, \n                   ncp = 5, graph = FALSE)\n\n\n\n\nR Code [zeigen / verbergen]\npca_creature &lt;- PCA(std_creature_df, scale.unit = TRUE, \n                    ncp = 5, graph = FALSE)\n\n\nFolgende Funktionen sind wichtig um die klassische Hauptkomponentenanalyse einmal zu visualisieren und zu bewerten. Die Namen folgen alle einem Schema im Paket {FactoMineR}, so dass wir hier nur Kleinigkeiten im Namen ändern müssen um alle Funktionen zu nutzen.\n\nget_pca_ind(), get_pca_var(): Extrahiert die Ergebnisse für Individuen bzw. Variablen.\nfviz_pca_ind(), fviz_pca_var(): Visualisierung der Ergebnisse für Individuen bzw. Variablen.\nfviz_pca_biplot(): Erstellt einen Biplot der Individuen und Variablen.\n\n\n\n68.4.2 CA - Correspondence Analysis\n\n\n\n\n\n\nSpezialfall des \\(\\mathcal{X}^2\\)-Test\n\n\n\nDie CA-Analyse funktioniert nur auf einer \\(n \\times k\\) Tabelle. Daher können wir nur zwei Variablen mit Kategorien miteinander in Verbindung setzen. Eigentlich sehen wir hier eher einen großen \\(\\mathcal{X}^2\\)-Test. Deshalb gehe ich aktuell nicht auf die Lösung hier tiefer ein.\n\n\nWir nutzen die Correspondence Analysis zur Analyse des Zusammenhangs zwischen zwei kategorialen Variablen. Also eher ein großer \\(\\mathcal{X}^2\\)-Test mit anderen Mitteln auf einer \\(n \\times k\\) Tabelle.\n\n\nR Code [zeigen / verbergen]\nCA(tbl, ncp = 5, graph = FALSE)\n\n\nWir erhalten alle wichtigen Informationen aus einer Correspondence Analysis mit den folgenden Funktionen.\n\nget_ca_row(), get_ca_col(): Extrahiert die Ergebnisse für Zeilen bzw. Spalten.\nfviz_ca_row(), fviz_ca_col(): Visualisierung der Ergebnisse für Zeilen bzw. Spalten.\nfviz_ca_biplot(): Erstellt einen Biplot der Individuen und Variablen.\n\nWir betrachteten den Fall hier nicht weiter, da er wirklich sehr speziell ist und nur selten vorkommt.\n\n\n68.4.3 MCA - Multiple Correspondence Analysis\nWir nutzen die Multiple Correspondence Analysis für die Analyse eines Datensatzes mit kategorialen Variablen.\n\n\nR Code [zeigen / verbergen]\nMCA(tbl, ncp = 5, graph = FALSE)\n\n\nWir erhalten dann wiederum alle wichtigen Informationen und Abbildungen über folgende Funktionen.\n\nget_mca_ind(), get_mca_var(): Extrahiert die Ergebnisse für Individuen bzw. Variablen.\nfviz_mca_ind(), fviz_mca_var(): Visualisierung der Ergebnisse für Individuen bzw. Variablen.\nfviz_mca_biplot(): Erstellt einen Biplot der Individuen und Variablen.\n\n\n\n68.4.4 FAMD - Factor Analysis of Mixed Data\nFür die Analyse eines Datensatzes, der sowohl kontinuierlichen Variablen als auch kategorialen Variablen enthält nutzen wir die Factor Analysis of Mixed Data.\n\n\nR Code [zeigen / verbergen]\nFAMD(tbl, ncp = 5, graph = FALSE)\n\n\nAuch hier haben wir die wichtigen Funktionen für die Darstellung einmal dargestellt.\n\nget_famd_ind(), get_famd_var(): Extrahiert die Ergebnisse für Individuen bzw. Variablen.\nfviz_famd_ind(), fviz_famd_var(): Visualisierung der Ergebnisse für Individuen bzw. Variablen.\n\n\n\n68.4.5 MFA - Multiple Factor Analysis\nKomplexer wird es, wenn wir eine Multiple Factor Analysis durchführen wollen. In diesem Fall ist es die Analyse eines Datensatzes, der in Gruppen strukturierte Variablen enthält.\n\n\nR Code [zeigen / verbergen]\nMCA(X, ncp = 5, graph = FALSE)\n\n\nAuch gibt es bei der Multiple Factor Analysis ein Set an Funktionen, die wir hauptsählcihc benötigen.\n\nget_mfa_ind(), get_mfa_var(): Extrahiert die Ergebnisse für Individuen bzw. Variablen.\nfviz_mfa_ind(), fviz_mfa_var(): Visualisierung der Ergebnisse für Individuen bzw. Variablen.\n\nWeitere Funktionen finden sich dann noch auf der Tutoriumsseite zu der MFA - Multiple Factor Analysis.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#darstellung-der-ergebnisse",
    "href": "stat-modeling-pca.html#darstellung-der-ergebnisse",
    "title": "68  Multivariate Verfahren",
    "section": "68.5 Darstellung der Ergebnisse",
    "text": "68.5 Darstellung der Ergebnisse\nIm Folgenden betrachten wir dann die Hauptkomponentenanalyse auf drei Ebenen. Wir konzentrieren uns hier erstmal nur auf die Beispiele aus der Funktion PCA(). Prinzipiell sind die Analysen für die anderen Funktionen ähnlich und die Interpretation unterscheidet sich nur leicht.\n\nAuf der Ebene der Eigenwerte: Wir entscheiden, wie viele Hauptkomponenten wir eigentlich in die weitere Analyse nehmen wollen.\nAuf der Ebene der Variablen: Wir betrachten die Spalten und schauen wie sich die Spalten zueinander und den Beobachtungen verhalten. In der R Welt enden dann die Funktionen *_var.\nAuf der Eben der Individuen: Wir schauen uns einmal die Zeilen an und versuchen zu verstehen, wie sich die einzelenen Beobachtungen oder Individuen verhalten. Gibt es hier Auffälligkeiten? In der R Welt enden dann die Funktionen *_ind.\n\n\n68.5.1 Ebene der Eigenwerte\nDie Eigenwerte messen die Menge der von jeder Hauptkomponente beibehaltenen Variation. Damit repräsentieren die Eigenwerte die Varianz/Kovarianzmatrix der Daten. Die Eigenwerte sind für die ersten Hauptkomponenten grundsätzlich groß und für die nachfolgenden Hauptkomponente immer kleiner. Das heißt, die ersten Hauptkomponente beschreiben Variablen mit der größten Variation im Datensatz. Wie schon gesagt, wir erschaffen neue Variablen aus den Daten, die wir Hauptkomponenten nennen. Jede Hauptkomponente hat einen Eigenwert, der beschreibt, wie viel Varianz die Hauptkomponente in den Daten erklären kann.\nMit Hilfe der Eigenwerte lässt sich die Anzahl der Hauptkomponenten bzw. Dimensionen bestimmen, die nach der PCA beibehalten werden sollen. Wir wollen selten alle Hauptkomponenten berücksichtigen. Es geht hier ja auch darum die Dimensionen der Daten zu reduzieren. Wenn wir alle Hauptkomponenten weiterverwenden würden, dann könnten wir auch den ursprünglichen Datensatz nutzen. Die Eigenwerte und der Anteil der Varianzen, die von den Hauptkomponenten beibehalten werden, können mit folgenden Funktionen extrahiert werden.\n\nget_eigenvalue(): Extrahiert die Eigenwerte/Varianzen der Hauptkomponenten\nfviz_eig(): Visualisierung der Eigenwerte\n\nDabei bedeutet ein Eigenwert &gt; 1, dass die Hauptkomponenten mehr Varianz erklären als eine der ursprünglichen Variablen in den standardisierten Daten. Dies wird üblicherweise als Grenzwert für die Beibehaltung der Hauptkomponenten verwendet. Dies trifft nur zu, wenn die Daten standardisiert sind.\n\n\nR Code [zeigen / verbergen]\neig_animals &lt;- get_eigenvalue(pca_animals) |&gt; \n  as_tibble()\neig_animals \n\n\n# A tibble: 6 × 3\n  eigenvalue variance.percent cumulative.variance.percent\n       &lt;dbl&gt;            &lt;dbl&gt;                       &lt;dbl&gt;\n1      2.54             42.3                         42.3\n2      1.24             20.6                         62.9\n3      0.848            14.1                         77.1\n4      0.723            12.1                         89.1\n5      0.515             8.58                        97.7\n6      0.137             2.29                       100  \n\n\nDie Summe aller Eigenwerte für die Tiere ergibt eine Gesamtvarianz von 6. Jetzt können wir ganz einfach den Anteil der erklärten Varianz von jedem Eigenwert berechnen. In der zweiten Spalte finden wir dann die Werte der Eigenwerte geteilt durch die Gesamtvarianz. Daher ist \\(42.35\\) gleich \\(2.54\\) geteilt durch \\(6\\). Der kumulative Prozentsatz der erklärten Variation wird durch Addition der aufeinander folgenden Anteile der erklärten Variation ermittelt.\n\n\nR Code [zeigen / verbergen]\neig_creature &lt;- get_eigenvalue(pca_creature) |&gt; \n  as_tibble()\neig_creature\n\n\n# A tibble: 3 × 3\n  eigenvalue variance.percent cumulative.variance.percent\n       &lt;dbl&gt;            &lt;dbl&gt;                       &lt;dbl&gt;\n1      1.99             66.2                         66.2\n2      0.730            24.3                         90.5\n3      0.285             9.49                       100  \n\n\nDie Summe aller Eigenwerte für die Kreaturen ergibt eine Gesamtvarianz von 3. Damit können wir dann auch einfach die anderen Werte in den Spalten nachvollziehen.\nJetzt stellt sich natürlich die Frage, wie viele der Hauptkomponenten sollen den jetzt zukünftig berücksichtigt werden? Leider gibt es keine allgemein anerkannte objektive Methode, um zu entscheiden, wie viele Hauptkomponenten ausreichend sind. Dies hängt von dem jeweiligen Anwendungsbereich und dem jeweiligen Datensatz ab. In der Praxis neigen wir dazu, die ersten paar Hauptkomponenten zu betrachten, um interessante Muster in den Daten zu finden. Dafür nutzen wir den Scree Plot und entscheiden anhand der Beuge in dem Plot. Wenn wir nur wenige Variablen in den Daten haben, dann kann es sein, dass wir nur wenige Hauptkomponenten raus schmeißen. In der Abbildung 68.5 siehst du einmal die beiden Scree Plots für die beiden Datensätze.\n\n\nR Code [zeigen / verbergen]\nfviz_eig(pca_animals, addlabels = TRUE)\nfviz_eig(pca_creature, addlabels = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.5— Eigenwerte für die beiden Datensätze. [Zum Vergrößern anklicken]\n\n\n\n\nWir sehen für die Tierdaten, dass die erste Hauptkomponente gut 42% der Varianz in den Daten erklärt, die folgende Hauptkomponente dann nur noch 20% und so weiter. Hier sehen wir dann auch die Beuge und könnten schließen, dass die ersten beiden Hauptkomponenten ausreichen um den Datensatz zu beschreiben. Bei den Kreaturendaten sieht es so aus, als ob wir die Datan alleinig mit der ersten Hauptkomponente erklären könnten. Wir sehen ja, dass gut 62% der Varianz durch die erste Hauptkomponente erklärt wird.\n\n\n68.5.2 Ebene der Variablen\n\n\n\n\n\n\nget_*_var() für andere Funktionen aus FactoMineR\n\n\n\nDu kannst einfach das * in get_*_var() durch den klein geschriebenen Funktionaufruf von MCA, FAMD und MFA ersetzen um dir dann auch die Ergebnisse analog zu der PCA herausgeben zu lassen. Die Interpretation ist ähnlich bis gleich.\n\n\nSchauen wir jetzt einmal die Informationen der Variablen also Spalten der Hauptkomponentenanalyse an. Wir erhalten jetzt also die Informationen zu den einzelnen Hauptkomponenten, die ja die Variablen bzw. Spalten der Daten repräsentieren. Wir erhalten die Informationen über die Funktion get_pca_var().\n\n\nR Code [zeigen / verbergen]\nvar_animals &lt;- get_pca_var(pca_animals)\nvar_creature &lt;- get_pca_var(pca_creature)\nvar_creature\n\n\nPrincipal Component Analysis Results for variables\n ===================================================\n  Name       Description                                    \n1 \"$coord\"   \"Coordinates for the variables\"                \n2 \"$cor\"     \"Correlations between variables and dimensions\"\n3 \"$cos2\"    \"Cos2 for the variables\"                       \n4 \"$contrib\" \"contributions of the variables\"               \n\n\nSchauen wir uns einmal an was wir mit den Informationen über die Variablen durch die Funktion get_pca_var() machen können.\n\ncoord: Koordinaten der Variablen zur Erstellung eines Streudiagramms. Wir nutzen meistens nur die ersten beiden Hauptkomponenten, da wir sonst kein zweidimensionalen Scatterplot machen können.\ncor: Die Korrelation zwischen den ursprünglichen Variablenwerten in den Zeilen und den neuen Hauptkomponenten in den Spalten.\ncos2: stellt die Qualität der Darstellung der Variablen auf der Faktorkarte dar. Es wird berechnet als die quadrierten Koordinaten: cos2 = coord * coord\ncontrib: enthält die Beiträge (in Prozent) der Variablen zu den Hauptkomponenten. Der Beitrag einer Variablen zu einer bestimmten Hauptkomponente ist (in Prozent): (cos2 * 100) / (gesamter cos2 der Komponente).\n\nIm Folgenden bewerten wir die Qualität einer Variable nach den cos2-Werten oder ihren Beitragswerten zu den Hauptkomponenten dargestellt durch die contrib-Werte. Wir nutzen hier jetzt aber erstmal die cos2-Werte, weil sonst hier alles an Abbildungen explodiert.\n\nEin hoher cos2-Wert deutet auf eine gute Darstellung der Variablen auf der Hauptkomponente hin. In diesem Fall ist die Variable nahe am Umfang des Korrelationskreises positioniert.\nEin niedriger cos2-Wert zeigt an, dass die Variable nicht perfekt durch die PC’s repräsentiert ist. In diesem Fall befindet sich die Variable in der Nähe der Kreismitte.\nFür eine bestimmte Variable ist die Summe des cos2 aller Hauptkomponenten gleich eins.\n\nIn der Abbildung 68.6 sehen wir einmal die Zusammenhänge von den cos2-Werten und den jeweiligen Hauptkomponenten. Wir setzen is.corr = FALSE, weil wir keine Korrelation abbiden wollen sondern cos2-Werte.\n\n\nR Code [zeigen / verbergen]\ncorrplot(var_animals$cos2, is.corr = FALSE)\ncorrplot(var_creature$cos2, is.corr = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.6— Zusammenhang von den cos2-Werten und den jeweiligen Hauptkomponenten. [Zum Vergrößern anklicken]\n\n\n\n\nWir sehen bei den Tierdaten, dass die die erste Hauptkomponente Dim.1 die Variablen warm_blooded, vertebrate und etwas weniger threatened und live_in_groups beschreibt. Die zweite Hauptkomponente Dim.2 repräsentiert die Variable hair. Die dritte Hauptkomponente deckt fly ab. Die vierte Hauptkomponente beschreibt dann live_groups etwas stärker als die erste Hauptkomponente. Die fünfte Hauptkomponente können wir fast ignorieren. Bei den Kreaturendaten sehen wir das die erste Hauptkomponente fast alle Variablen repräsentiert. Die zweite Hauptkomponente beschreibt dann noch etwas mass_grams und heart_rate_bpm.\nIn der Abbildung 68.7 sehen wir die gleichen Informationen nochmal als Säulendiagramm dargestellt. Hier ist es eventuell numerisch schöner und besser zu sehen, wie sich die cos2-Werte für die erste und zweite Hauptkomponente verhalten. Du musst hier nämlich entscheiden, wie viele Hauptkomponenten du zusammen betrachten willst. Hier habe ich über axes = 1:2 die ersten beiden Hauptkomponenten gewählt.\n\n\nR Code [zeigen / verbergen]\nfviz_cos2(pca_animals, choice = \"var\", axes = 1:2)\nfviz_cos2(pca_creature, choice = \"var\", axes = 1:2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.7— Zusammenhang von den cos2-Werten und die ersten beiden Hauptkomponenten Dim.1 und Dim.2. [Zum Vergrößern anklicken]\n\n\n\n\nAls nächstes wollen wir uns dann mal die ersten beiden Hauptkomponenten Dim.1 und Dim.2 in einer Abbildung anschauen. In der Abbildung 68.8 sehen wir das Korrelationsdiagramm der Variablen für die ersten beiden Hauptkomponenten. Über die Option axes = kannst du dir auch andere Kombinationen von zwei Hauptkomponenten anschauen. Das Korrelationsdiagramm zeigt die Beziehungen zwischen allen Variablen und kann wie folgt interpretiert werden:\n\nPositiv korrelierte Variablen sind zusammen gruppiert.\nNegativ korrelierte Variablen befinden sich auf gegenüberliegenden Seiten des Ursprungs der Grafik oder auch den gegenüberliegende Quadranten.\nDer Abstand zwischen den Variablen und dem Ursprung misst die Qualität der Variablen im Bezug auf den erklärenden Anteil. Variablen, die vom Ursprung entfernt sind, sind bedeutender als Variablen nahe des Ursprungs.\n\nWenn eine Variable nur durch zwei Hauptkomponenten, also zum Beispiel die Dim.1 und die Dim., perfekt repräsentiert wird, ist die Summe des cos2 von diesen beiden Hauptkomponenten gleich eins. In diesem Fall werden die Variablen auf dem Korrelationskreis positioniert und der Pfeil geht damit vom Ursprung direkt zum Kreis. In Abbildung 68.8 (b) sind die Variablen heart_rate_bpm und mass_grams direkt auf dem Korrelationskreis. Daher sind diese beiden Variablen erklärend für einen Großteil der Varianz in den Daten. Für einige der Variablen sind möglicherweise mehr als 2 Komponenten erforderlich, um die Daten perfekt zu repräsentieren. In diesem Fall werden die Variablen innerhalb des Korrelationskreises positioniert, was wir eher in der Abbildung 68.8 (a) sehen. Variablen nahe des Zentrum haben keine Bedeutung für die beiden Hauptkomponenten. Je nach betrachteten Hauptkomponentenpaar kann es natürlich wieder anders aussehen.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_var(pca_animals, repel = TRUE, axes = 1:2)\nfviz_pca_var(pca_creature, repel = TRUE, axes = 1:2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.8— Korrelationsdiagramm der Variablen. [Zum Vergrößern anklicken]\n\n\n\n\nIm Weiteren können wir diee cos2-Werte verwenden um die Qualität der Darstellung abzuschätzen. Es ist möglich, Variablen nach ihren cos2-Werten zu färben, indem du das Argument col.var = \"cos2\" verwendest und damit einen Farbverlauf erzeugst. Die Option gradient.cols = definiert dabei den Farbverlauf.\nIn der Abbildung 68.9 siehst du nochmal die Einfärbung. Wie du sehen kannst, hat bei den Tierdaten warm_blooded den größten Einfluss auf die Aufteilung und erklärt auch am meisten Varianz der Daten. Die Variablen fly und live_in_groups helfen nicht um die Daten aufzutrennen und die Varianz zu erklären. Bei den Kreaturendaten sehen wir dann ebenfalls das es zwei Variablen gibt, die viel erklären und eine Variable mit einer schlechteren Qualität.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_var(pca_animals, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), \n             repel = TRUE)\n\nfviz_pca_var(pca_creature, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), \n             repel = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.9— Korrelationsdiagramm der Variablen eingefärbt nach den cos2-Werten. [Zum Vergrößern anklicken]\n\n\n\n\nWir können auch mit der kmeans() Funktion auch versuchen über die Koordinaten Gruppen zu bilden. Wir rechnen also auf den Koordinaten der Variablen eine Clusteranalyse. Faktisch könnten wir hier auch andere Clusteralgorithmen nehmen, aber ich nutze hier mal kmeans(). Im Prinzip kannst du den Algorithmus ändern, denn du brauchst später nur einen Faktor mit der Grupenzuordnung.\n\n\nR Code [zeigen / verbergen]\ngrp_animal_var &lt;- kmeans(var_animals$coord, centers = 3, nstart = 25) |&gt; \n  pluck(\"cluster\") |&gt; \n  as_factor()\n\n\nWir machen dann die Gruppenbildung auch für die Kreaturendaten. Hier dann nur zwei Gruppen, denn wir haben ja nur drei Variablen. Da machen dann drei Gruppen keinen Sinn.\n\n\nR Code [zeigen / verbergen]\ngrp_creature_var &lt;- kmeans(var_creature$coord, centers = 2, nstart = 25) |&gt; \n  pluck(\"cluster\") |&gt; \n  as_factor()\n\n\nDann nutzen wir die Gruppen einmal um nach diesen dann unseren Korrelaionsplot einzufärben. Wir sehen jetzt in diesen beiden Beipsielen in der Abbildung 68.10 kein so großen Änderungen oder Überraschungen. Aber je mehr Variablen du hast, desto spannender wird es dann auch.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_var(pca_animals, col.var = grp_animal_var, \n             palette = c(\"#0073C2FF\", \"#EFC000FF\", \"#868686FF\"),\n             legend.title = \"Cluster\")\n\nfviz_pca_var(pca_creature, col.var = grp_creature_var, \n             palette = c(\"#0073C2FF\", \"#EFC000FF\"),\n             legend.title = \"Cluster\")\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.10— Korrelationsdiagramm der Variablen eingefärbt den Gruppen aus dem k-NN Algorithmus zur Clusterbildung. [Zum Vergrößern anklicken]\n\n\n\n\nAbschließend wollen wir uns noch die Frage stellen, wie stark haben den jetzt die einzelnen Variablen zu den ersten beiden Hauptkomponenten beigetragen? Wir können dazu die Funktion fviz_contrib() nutzen. Die rote gestrichelte Linie in der Abbildung 68.11 zeigt den erwarteten durchschnittlichen Beitrag an. Wäre der Beitrag der Variablen bei den Tierdaten gleichmäßig, wäre der erwartete Wert \\(1/n_{var} = 1/6 = 16\\%\\). Eine Variable mit einem Beitrag, der über diesem Grenzwert liegt, sehen wir als wichtig für die betrachteten Hauptkomponenten an.\n\n\nR Code [zeigen / verbergen]\nfviz_contrib(pca_animals, choice = \"var\", axes = 1:2)\nfviz_contrib(pca_creature, choice = \"var\", axes = 1:2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.11— Beitrag der einzelnen Variablen zu den ersten beiden Hauptkomponenten. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n68.5.3 Ebene der Individuen\n\n\n\n\n\n\nget_*_ind() für andere Funktionen aus FactoMineR\n\n\n\nDu kannst einfach das * in get_*_ind() durch den klein geschriebenen Funktionaufruf von MCA, FAMD und MFA ersetzen um dir dann auch die Ergebnisse analog zu der PCA herausgeben zu lassen. Die Interpretation ist ähnlich bis gleich.\n\n\nNachdem wir uns die Informationen von den Variablen und damit die Informationen von den Spalten angeschaut haben, wollen wir uns nochmal die Informationen aus den Zeilen, also den Individuen anschauen. Auch hier können wir ja einfach mal schauen, wie die Individuen untereinander zusammenhängen. Wir arbeiten jetzt also mit den Informationen zu den einzelnen Individuen. Wir erhalten die Informationen über die Funktion get_pca_var().\n\n\nR Code [zeigen / verbergen]\nind_animals &lt;- get_pca_ind(pca_animals)\nind_creature &lt;- get_pca_ind(pca_creature)\nind_creature\n\n\nPrincipal Component Analysis Results for individuals\n ===================================================\n  Name       Description                       \n1 \"$coord\"   \"Coordinates for the individuals\" \n2 \"$cos2\"    \"Cos2 for the individuals\"        \n3 \"$contrib\" \"contributions of the individuals\"\n\n\nNachdem wir die Informationen zu den Individuen extrahiert haben, können wir uns die Koordinaten der einzelnen Individuen, die sich aus der Varianz/Kovarianzmatrix der Individuen ergeben, einmal in der Abbildung 68.12 anschauen. Wir interpretieren die cos2-Werte analog zu den Variablen. Das heißt, cos2-Werte geben an, wie bedeutend ein Individuum für die beiden Hauptkomponenten Dim.1 und Dim.2 ist. Wie sehen bei den Tierdaten, dass der Hering nichts zur Aufspaltung der Daten beiträgt. Die Tiere die weiter Außen liegen, haben mehr Informationen. Bei den Kreaturendaten sehen wir klar, dass der Hamster und der Wal nicht zu den anderen Tieren passen will. Beide Tiere pressen förmlich die anderen Tiere in den unteren linken Quadranten zusammen.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_ind(pca_animals,\n             col.ind = \"cos2\", \n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE) +\n  scale_x_continuous(expand = expansion(add = c(0.5, 1))) +\n  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) \n\nfviz_pca_ind(pca_creature,\n             col.ind = \"cos2\", \n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE) +\n  scale_x_continuous(expand = expansion(add = c(0.5, 1))) +\n  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.12— Streudiagramm der individuellen Beobachtungen für die ersten beiden Hauptkomponenten. [Zum Vergrößern anklicken]\n\n\n\n\nWir können uns dann auch recht schnelle einmal die meisten bedeutenden Individuen für die ersten beiden Hauptkomponenten numerisch in der Abbildung 68.13 ansehen. Achtung, wir haben hier einige Individuen entfernt, die fehlende Werte in den Zeielne hatten. Da hätten wir vorher mal reagieren sollen, aber wir machen hier ja keine Imputation von fehlenden Werten. Die rote gestrichelte Linie zeigt den erwarteten durchschnittlichen Beitrag an. Wäre der Beitrag der Variablen gleichmäßig, wäre der erwartete Wert \\(1/n_{ind}\\). Für die ersten beiden Hauptkomponenten kann ein Individuum mit einem Beitrag, der über diesem Grenzwert liegt, als wichtig angesehen werden.\nAuch hier sehen wir, dass die Fliege und der Tausendfüßler den größten Einfluss haben. Bei den Kreaturendaten ist es noch auffälliger, da liegt die gesamte Information der Daten in dem Wal und dem Hamster. Der Rest der Daten ist dagegen recht homogen. Hier siehst du auch, wie man die Hauptkomponentenanalyse zum Detektieren von Ausreißern nutzen kannst.\n\n\nR Code [zeigen / verbergen]\nfviz_contrib(pca_animals, choice = \"ind\", axes = 1:2)\nfviz_contrib(pca_creature, choice = \"ind\", axes = 1:2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.13— Beitrag der einzelnen Variablen zu den ersten beiden Hauptkomponenten. [Zum Vergrößern anklicken]\n\n\n\n\nWie schon bei den Variablen können wir auch über das Koordinatensystem der Individuen Gruppen bilden. Wir rechnen auch hier eine Clusteranalyse mit der Funktion kmeans(). Wie auch schon vorab, kannst du auch hier dir einen anderen Clusteralgorithmus auswählen um die Gruppen zu bilden. Wir bleiben hier aber bei einem k-NN Algorithmus der uns einen Faktor mit der Gruppenzugehörigkeit wiedergibt.\n\n\nR Code [zeigen / verbergen]\ngrp_animal_ind &lt;- kmeans(ind_animals$coord, centers = 3, nstart = 25) |&gt; \n  pluck(\"cluster\") |&gt; \n  as_factor()\n\n\nDas Ganze dann auch nochmal für den Kreaturendatensatz. Hier können wir dann wiederum mehr als zwei Cluster wählen, da wir ja sehr viele Individuen haben, die wir in Gruppen einteilen können. Die Anzahl an Gruppen ist hier mit k = 4 eher zufällig gewählt.\n\n\nR Code [zeigen / verbergen]\ngrp_creature_ind &lt;- kmeans(ind_creature$coord, centers = 4, nstart = 25) |&gt; \n  pluck(\"cluster\") |&gt; \n  as_factor()\n\n\nIn der Abbildung 68.14 siehst du die Gruppen aus dm k-NN Algorithmus eingefärbt und Ellipsen um die Gruppen gezeichnet. Mit der Option ellipse.type = \"confidence\" kannst du dir auch Ellipsen mit dem Konfidenzbereich anzeigen lassen. Wir bleiben hier aber mal bei dem Standard der Funktion, der auch sonst genutzt wird. Ich habe mich dann noch dazu entschieden den Mittelpunkt der Ellipse mit mean.point = FALSE nicht anzeigen zu lassen. Wir können auch das geom.ind zu text ändern, dann werden nicht die Punkte sondern die Label der Individuen angezeigt.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_ind(pca_animals,\n             geom.ind = \"point\",\n             col.ind = grp_animal_ind, \n             palette = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             addEllipses = TRUE, \n             legend.title = \"Groups\", mean.point = FALSE)\n\n\nfviz_pca_ind(pca_creature,\n             geom.ind = \"point\", \n             col.ind = grp_creature_ind, \n             palette = c(\"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"),\n             addEllipses = TRUE, \n             legend.title = \"Groups\", mean.point = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.14— Diagramm der PCA für die Variablen (Saplten) und den Beobachtungen (Zeilen) der Datenmatrix. [Zum Vergrößern anklicken]\n\n\n\n\nTja, sieht dann etwas wild aus. Aber da musst du dann eben mit der Anzahl der Gruppen aus dem k-NN Algorithmus spielen. Auch siehst du, dass einzelne extreme Beobachtungen dir alles zunichte machen können. Hier müsste man überlegen, ob nicht der Wal und der Hamster bei den Kreaturendaten nicht eins zu viel sind. Jetzt stehen wir vor der Frage, passt das so? Was sind den die einzelnen Punkt für Beobachtungen? Da hilft uns dann die Funktion fviz_pca_biplot() weiter. Nicht alle Methoden der Hauptkomponentenanalyse können auch einen Biplot generieren, aber wenn, dann ist der Biplot sehr nützlich. In der Abbildung 68.15 siehst du den Biplot für die Tierdaten sowie für die Kreaturendaten sowie die Clusterinformationen ergänzt.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_biplot(pca_animals, \n                col.ind = grp_animal_ind, \n                col.var = grp_animal_var,\n                addEllipses = TRUE, \n                palette = \"jco\",\n                label = c(\"var\", \"ind\"),\n                repel = TRUE,\n                legend.title = \"Species\", mean.point = FALSE) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\", \"#009E73\")) \n\nfviz_pca_biplot(pca_creature, \n                col.ind = grp_creature_ind, \n                col.var = grp_creature_var,\n                addEllipses = TRUE, \n                label = c(\"var\", \"ind\"),\n                repel = TRUE,\n                legend.title = \"Species\", mean.point = FALSE) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = c(\"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"))\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Tierdaten animals_df\n\n\n\n\n\n\n\n\n\n\n\n(b) Kreaturendaten std_creature_df\n\n\n\n\n\n\n\nAbbildung 68.15— Biplot für die Individuen und Variablen eingefäerbt nach Clustern. [Zum Vergrößern anklicken]\n\n\n\n\nBei den Tierdaten passe es eigentlich ganz gut mit den Clustern, aber die Inhalte machen teilweise nicht so viel Sinn. Wir haben Tiere zusammen gruppiert, die eigentlich nicht so richtig zusammen passsen. Zwar sind in der einen Gruppe die Insekten aber der Elefant ist zusammen mit dem Wal, dem Delphin und dem Adler sowie der Ente gruppiert. Da reichen anscheinend die Daten und Variablen noch nicht aus um hier eine gute Trennung hinzukriegen. Immerhin passt es auch mit den Säugetieren. Du siehst hier auch gut, wie die Vektoren in die Richtung der passenden Individuen zeigen. So sind die haarigen Individuen dann unten rechts. Das passt ganz gut. Bei den Kreaturendaten siehst du auch schön, wie der Wal die Variable mass_grams nach oben rechst zu sich zieht. Auch die Variable der Lebendauer zieht den Elefanten und den Menschen nach rechts weg.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#multi-dimensional-scaling-mds",
    "href": "stat-modeling-pca.html#multi-dimensional-scaling-mds",
    "title": "68  Multivariate Verfahren",
    "section": "68.6 Multi Dimensional Scaling (MDS)",
    "text": "68.6 Multi Dimensional Scaling (MDS)\nEine besondere Form der Hauptkomponentenanalyse ist das Multidimensional Scaling (abk. MDS). Im Prinzip sind die Mechanismen sehr ähnlich. Der Hauptunterschied ist aber, das wir für die MDS eine Distanzmatrix benötigen. Wir können dafür die Funktion dist() oder as.dist() nehmen, wenn wir schon Distanzen vorliegen haben. Nehmen wir als plakatives Beispiel einmal die Distanzen von europäischen Städten zueinander. Wir haben die Daten in der Exceldatei distance.xlsx vorliegen. Wir lesen die Daten einmal ein und schauen uns die ersten fünf Spalten und die ersten fünf Zeilen des Datensatzes einmal an.\n\n\nR Code [zeigen / verbergen]\ndistance_tbl &lt;- read_excel(\"data/distance.xlsx\")\n\ndistance_tbl[1:5, 1:5]\n\n\n# A tibble: 5 × 5\n  city      Amsterdam Antwerp Athens Barcelona\n  &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n1 Amsterdam         0     160   3082      1639\n2 Antwerp         160       0   2766      1465\n3 Athens         3082    2766      0      3312\n4 Barcelona      1639    1465   3312         0\n5 Berlin          649     723   2552      1899\n\n\nWenn wir jetzt auf diesem Datensatz jetzt ein MDS rechnen wollen, dann müssen wir zum einen alle Spalten mit einem character entfernen. Wir haben dann nur noch einen Datensatz bzw. Datenmatrix mit den Distanzen vorliegen. Dann kann wir das tibble in einen dist-Objekt mit der Funktion as.dist() umwandeln. Die eigentliche Berechnung für das Multidimensional Scaling findet in der Funktion cmdscale() statt. Mit der Option k = 2 legen wir fest, dass wir nur zwei Hauptkomponenten bzw. Dimensionen bestimmen wollen. Wir machen also aus unserem 37x37 großen Datenmatrix durch Multidimensional Scaling eine Reduktion auf zwei Dimensionen bzw. Spalten.\n\n\nR Code [zeigen / verbergen]\nmds &lt;- distance_tbl |&gt;\n  select(-city) |&gt; \n  as.dist() |&gt;          \n  cmdscale(k = 2) |&gt;\n  as_tibble() |&gt; \n  mutate(V1 = -V1,\n         V2 = -V2)\ncolnames(mds) &lt;- c(\"Dim.1\", \"Dim.2\")\n\n\nIn Abbildung 68.16 sehen wir das Ergebnis der Dimensionsreduktion auf zwei Dimensionen. Wir erhalten die Zusammenhänge bzw. Distanzen aus der Datenmatrix in einem Scatterplot. Ein Scatterplot ist ja nichts anders als die Darstellung von zwei Dimensionen. Wie wir sehen können nimmt die Anordnung der Orte in etwa die Positionen von den Orten auf der Landkarte in Europa ein. Natürlich stimmen die Relationen nicht perfekt, aber das Abbild ist schon recht nahe dran. Wir können also auf diese Art und Weise auch Ausreißer bestimmen.\n\n\nR Code [zeigen / verbergen]\nggscatter(mds, x = \"Dim.1\", y = \"Dim.2\", \n          label = distance_tbl$city,\n          size = 1,\n          repel = TRUE)\n\n\n\n\n\n\n\n\nAbbildung 68.16— Scatterplot der zwei Dimensionen nach dem Multidimensional Scaling für den Abstand europäischer Städte.\n\n\n\n\n\nWenn wir keine Distanzmatrix wie im obigen Beispiel zu den Entfernungen der europäischen Städte vorliegen haben, dann können wir uns die Distanzen auch mit der Funktion dist() berechnen lassen. Wir nutzen jetzt mal als Echtdaten die Daten der Gummibärchen. Mal sehen, ob wir hier irgendwelche Gruppen erkennen. Die Hilfeseite der Funktion ?dist zeigt welche mathematischen Distanzmaße wir auf die Daten anwenden können. In unseren Fall berechnen wir die euklidische Distanz zwischen den Beobachtungen. Dann rufen wir über die Funkion cmdsscale das Multidimensional Scaling auf.\n\n\nR Code [zeigen / verbergen]\nmds &lt;- animals_df |&gt;\n  dist(method = \"euclidean\") |&gt;          \n  cmdscale(k = 2) |&gt;\n  as_tibble() |&gt; \n  set_names(c(\"Dim.1\", \"Dim.2\"))\n\n\nDas Ergebnis des Multidimensional Scaling hat keine Bedeutung für uns. Wir können die Zahlen nicht interpretieren. Was wir können ist das Ergebnis in einem Scatterplot wie in Abbildung 68.17 zu visualisieren.\n\n\nR Code [zeigen / verbergen]\nggscatter(mds, x = \"Dim.1\", y = \"Dim.2\", \n          label = rownames(animals_df),\n          size = 1,\n          repel = TRUE)\n\n\n\n\n\n\n\n\nAbbildung 68.17— Scatterplot der zwei Dimensionen nach dem Multidimensional Scaling für den Tierdatensatz.\n\n\n\n\n\nZum einen Spalten sich die Tiere sehr gut auf. Wir sehen hier auch, welche Tiere eher nahe beieinander liegen und welche Tiere eher artfremd sind. Manche Tiere sind dann etwas seltsam, wie zum Beispiel der Adler und der Elefant, die nah beieinander liegen. Aber es gibt auf der anderen Seite auch nicht so viele Vögel in den Daten. Beachte immer, alle Beobachtungen werden auch abgebildet. Es gibt kein, passt dann doch nicht.\nWie schon bei der Hauptkomponentenanalyse können wir uns auch das \\(k\\)-NN Verfahren aus dem Kapitel 77 nutzen um Cluster in den Daten zu finden. Das heißt wir nutzen das maschinelle Lernverfahren \\(k-NN\\) um uns \\(k\\) Cluster bestimmen zu lassen. Dafür nutzen wir die Funktion kmeans() und ziehen uns über die Funktion pluck() die Cluster raus. Daher erhalten wir einen Vektor mit Zahlen, die beschreiben in welchem Cluster die jeweilige \\(i\\)-te Beobachtung ist.\n\n\nR Code [zeigen / verbergen]\n# K-means clustering\nclust &lt;- kmeans(mds, centers = 3) |&gt;\n  pluck(\"cluster\") |&gt; \n  as.factor()\n\n\nWir wollen jetzt unser MDS Ergebnis von den Gummibärchen um eine Spalte für die Clusterergebnisse von \\(k\\)-NN ergänzen.\n\n\nR Code [zeigen / verbergen]\nmds &lt;- mds |&gt;\n  mutate(groups = clust)\n\n\nNun sehen in Abbildung 68.18 die gleiche Abbildung wie oben nur ergänzt um die farbliche Hinterlegung der \\(k=3\\) Clustern aus dem \\(k\\)-NN Algorithmus. Hier hängt es wieder stark von der Anzahl an Clustern ab. Wenn du mal spielst, wirst du sehen, dass bei vier Clustern dann auch der gelbe Großcluster aufgebrochen wird. Es sind eben dann doch recht wenig Tiere von jeder Art um hier eine saubere Zuordnung zu kriegen.\n\n\nR Code [zeigen / verbergen]\nggscatter(mds, x = \"Dim.1\", y = \"Dim.2\", \n          label = rownames(animals_df),\n          color = \"groups\",\n          palette = \"jco\",\n          size = 1, \n          ellipse = TRUE,\n          ellipse.type = \"convex\",\n          repel = TRUE)\n\n\n\n\n\n\n\n\nAbbildung 68.18— Scatterplot der zwei Dimensionen nach dem Multidimensional Scaling für den Tierdatensatz mit den \\(k=3\\) Clustern aus dem \\(k\\)-NN Algorithmus.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#sec-lda",
    "href": "stat-modeling-pca.html#sec-lda",
    "title": "68  Multivariate Verfahren",
    "section": "68.7 Diskriminanzanalyse",
    "text": "68.7 Diskriminanzanalyse\nDie Diskriminanzanalyse (DA) ist eine multivariate Klassifizierungstechnik, die Beobachtungen auf der Grundlage messbarer Merkmale dieser Beobachtungen in zwei oder mehr sich gegenseitig ausschließende Gruppen einteilt. Diese Merkmale nennen wir dann gerne auch Variablen oder aber die Spalten unseres Datensatzes. Die Diskriminanzanalyse unterscheidet sich von der Regressionsanalyse dadurch, dass die abhängige Variable \\(y\\) diskret sein muss. Die Diskriminanzanalyse unterscheidet sich von der Clusteranalyse dadurch, dass die Klassen im Voraus bekannt sein müssen, um das Modell zu erstellen. Faktisch ist es schon alles was du wissen musst. Wir werden jetzt mal schauen, ob wir einen Datensatz, der schon Klassen bzw. Gruppen hat anhand der Diskriminanzanalyse besser verstehen können.\n\n\n\n\n\n\nWeitere Tutorien für die Diskriminanzanalyse\n\n\n\n\n\nWie immer gibt es eine Vielzahl an tollen Tutorien, die die Diskriminanzanalyse gut erklären. Ich habe hier einmal eine Auswahl zusammengestellt und du kannst dich da ja mal vertiefend mit beschäftigen, wenn du willst. Teile der Tutorien findest du vermutlich hier im Kapitel wieder.\n\nEine gute Übersicht als Tutorim Discriminant Analysis Essentials in R\nEinmal das erste Tutorium mit dem Namen Discriminant Analysis in R\nUnd einmal das zweite Tutorium mit dem selben Namen Discriminant Analysis in R\n\n\n\n\nAls Beispiel nutze ich einen Datensatz aus dem R Paket {HDclassif} und zwar den Datensatz wine auch bekannt vom UC Irvine Machine Learning Repository - Wine Dataset. Wie immer von mir leicht im Folgenden modifiziert. Wir haben hier drei Sorten von Wein class vorliegen, die wir anhand von verschiedenen Eigenschaften des Weins beschrieben haben. Welche dieser Eigenschaften hat einen Einfluss auf die Sorte des Weins? Das wollen wir uns jetzt einmal anschauen. Zuerst laden wir einmal die Daten.\n\n\nEine detailierte Auswertung des Datensatzes kann auch bei dem Tutorium Analysis of White Wine Quality Dataset nachvollzogen werden.\n\n\nR Code [zeigen / verbergen]\ndata(wine)\n\n\nWir müssen noch etwas an den Daten rumspielen und die Namen richtig kriegen. Die Namen fehlen leider in dem Datensatz und ich habe mir die nochmal rausgesucht und zusammen kopiert. Dann müssen wir die Spalten noch in saubere Namen umwandeln und die Klassenvariable class in einen Faktor umwandeln.\n\n\nR Code [zeigen / verbergen]\nwine_tbl &lt;- wine |&gt; \n  set_names(c(\"Class\", \"Alcohol\", \"Malic acid\", \"Ash\", \"Alcalinity of ash\", \"Magnesium\", \"Total phenols\",\n              \"Flavanoids\", \"Nonflavanoid phenols\", \"Proanthocyanins\", \"Color intensity\", \"Hue\", \n              \"OD280/OD315 of diluted wines\", \"Proline\")) |&gt; \n  clean_names() |&gt; \n  mutate(class = as_factor(class))\n\n\nDann einmal ein schneller Blick auf die Daten. Wir werden hier die Daten nicht standardisieren, obwohl es sicherlich Sinn macht das zu tun. Aber dann wird das hier alles noch länger als sowieso schon. Du musst dir ja bei jeder Variable überlegen, ob es eine kategorielle Variable ist oder nicht. Wir können die Diskriminanzanalyse aber auch ohne eine Standardisierung oder Normalisierung gut durchführen.\n\n\n\n\nTabelle 68.5— Übersicht.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass\nalcohol\nmalic_acid\nash\nalcalinity_of_ash\nmagnesium\ntotal_phenols\nflavanoids\nnonflavanoid_phenols\nproanthocyanins\ncolor_intensity\nhue\nod280_od315_of_diluted_wines\nproline\n\n\n\n\n1\n14.23\n1.71\n2.43\n15.6\n127\n2.80\n3.06\n0.28\n2.29\n5.64\n1.04\n3.92\n1065\n\n\n1\n13.20\n1.78\n2.14\n11.2\n100\n2.65\n2.76\n0.26\n1.28\n4.38\n1.05\n3.40\n1050\n\n\n1\n13.16\n2.36\n2.67\n18.6\n101\n2.80\n3.24\n0.30\n2.81\n5.68\n1.03\n3.17\n1185\n\n\n1\n14.37\n1.95\n2.50\n16.8\n113\n3.85\n3.49\n0.24\n2.18\n7.80\n0.86\n3.45\n1480\n\n\n1\n13.24\n2.59\n2.87\n21.0\n118\n2.80\n2.69\n0.39\n1.82\n4.32\n1.04\n2.93\n735\n\n\n1\n14.20\n1.76\n2.45\n15.2\n112\n3.27\n3.39\n0.34\n1.97\n6.75\n1.05\n2.85\n1450\n\n\n1\n14.39\n1.87\n2.45\n14.6\n96\n2.50\n2.52\n0.30\n1.98\n5.25\n1.02\n3.58\n1290\n\n\n\n\n\n\n\n\nIn diesem Abschnitt gehe ich auf die volle Breite der Diskriminanzanalyse einmal ein. Zwar nicht in die Tiefe aber dafür in der Breite werde ich die folgenden Methoden der Diskriminanzanalyse vorstellen:\n\nLineare Diskriminanzanalyse (LDA): Verwendet die Linearkombinationen von den Variablen zur Vorhersage der Klasse einer gegebenen Beobachtung. Es wird davon ausgegangen, dass die Variablen (\\(p\\)) normal verteilt sind und die Klassen identische Varianzen oder identische Kovarianzmatrizen haben. Also alle approximativ Varianzhomogen sind.\nQuadratische Diskriminanzanalyse (QDA): ist flexibler als die LDA. Hier gibt es keine Annahme, dass die Kovarianzmatrix der Klassen gleich ist. Wir können also auch mit Varianzheterogenität umgehen.\nMischungsdiskriminanzanalyse (MDA): Wir nehmen an, dass jede Klasse eine Gaußsche Mischung von Unterklassen ist. Das heißt, unsere Daten setzen sich aus verschiedenen Normalverteilungen je Klasse zusammen.\nFlexible Diskriminanzanalyse (FDA): Es werden nichtlineare Kombinationen von Variablen verwendet, wie z. B. Splines oder nicht-lineare Geraden.\nRegulierte Diskriminanzanalyse (RDA): Die Regularisierung oder auch Schrumpfung verbessert die Schätzung der Kovarianzmatrizen in Situationen, in denen die Anzahl der Variablen größer ist als die Anzahl der Stichproben in den Daten. Dies führt zu einer Verbesserung der Diskriminanzanalyse.\n\nWir egehn jetzt alle Methoden einmal durch. Bitte melde dich mal, wenn du in diesem Bereich was machst, dann würde ich mich über eine Diskussion der praktischen Anwendung wirklich freuen.\n\n68.7.1 Lineare Diskriminanzanalyse (LDA)\nBeginnen wir also mit der linearen Diskriminanzanalyse (eng. Linear discriminant analysis). Wir versuchen dabei die vordefinierten Klassen anhand der Variablen in den Spalten durch Linien voneinander zu trennen. In der Abbildung 68.19 sehen wir einmal das Prinzip. Als schwarze Zahlen sind die Sorten der Weine angeben. Die Flächen bilden die Zuordnung der der linearen Diskriminanzanalyse ab. Daher werden die roten Zahlen falsch klassifiziert. Wir nennen den Vorgang linear, da wir lineare Abtrennungen durch Linien durchführen und keine Bögen erlauben.\n\n\n\n\n\n\n\n\nAbbildung 68.19— Darstellung des Partition Plot für zwei Variablen aus dem wine Datensatz. Die roten Zahlen sind die falsch von Algorithmus klassifizierten Weinsorten.\n\n\n\n\n\nWir können die lineare Diskriminanzanalyse mit der Funktion lda() aus dem R Paket {MASS} durchführen. Der lda() Auffruf ist nicht anders als alle anderen Formelaufrufe anderer Funktionen auch.\n\n\nR Code [zeigen / verbergen]\nwine_lda &lt;- lda(class ~ ., data = wine_tbl)\nwine_lda\n\n\nCall:\nlda(class ~ ., data = wine_tbl)\n\nPrior probabilities of groups:\n        1         2         3 \n0.3314607 0.3988764 0.2696629 \n\nGroup means:\n   alcohol malic_acid      ash alcalinity_of_ash magnesium total_phenols\n1 13.74475   2.010678 2.455593          17.03729  106.3390      2.840169\n2 12.27873   1.932676 2.244789          20.23803   94.5493      2.258873\n3 13.15375   3.333750 2.437083          21.41667   99.3125      1.678750\n  flavanoids nonflavanoid_phenols proanthocyanins color_intensity       hue\n1  2.9823729             0.290000        1.899322        5.528305 1.0620339\n2  2.0808451             0.363662        1.630282        3.086620 1.0562817\n3  0.7814583             0.447500        1.153542        7.396250 0.6827083\n  od280_od315_of_diluted_wines   proline\n1                     3.157797 1115.7119\n2                     2.785352  519.5070\n3                     1.683542  629.8958\n\nCoefficients of linear discriminants:\n                                      LD1           LD2\nalcohol                      -0.403399781  0.8717930699\nmalic_acid                    0.165254596  0.3053797325\nash                          -0.369075256  2.3458497486\nalcalinity_of_ash             0.154797889 -0.1463807654\nmagnesium                    -0.002163496 -0.0004627565\ntotal_phenols                 0.618052068 -0.0322128171\nflavanoids                   -1.661191235 -0.4919980543\nnonflavanoid_phenols         -1.495818440 -1.6309537953\nproanthocyanins               0.134092628 -0.3070875776\ncolor_intensity               0.355055710  0.2532306865\nhue                          -0.818036073 -1.5156344987\nod280_od315_of_diluted_wines -1.157559376  0.0511839665\nproline                      -0.002691206  0.0028529846\n\nProportion of trace:\n   LD1    LD2 \n0.6875 0.3125 \n\n\nDie lineare Diskriminanzanalyse ermittelt nun die Gruppenmittelwerte und berechnet für jedes Individuum die Wahrscheinlichkeit, zu den verschiedenen Weinsorten oder besser allgemeiner den Klassen zu gehören. Das Individuum wird dann der Gruppe mit dem höchsten Wahrscheinlichkeitswert zugeordnet. Die Ausgaben von lda() enthalten die folgenden Elemente:\n\nPrior probabilities of groups: der Anteil der Beobachtungen in jeder Gruppe. Zum Beispiel befinden sich 33% der Beobachtungen in der Gruppe mit der Sorte 1.\nGroup means: Die Gruppenschwerpunkt und zeigen damit den Mittelwert jeder Variable in jeder Gruppe.\nCoefficients of linear discriminants: Zeigt die lineare Kombination von Prädiktorvariablen, die zur Bildung der LDA-Entscheidungsregel verwendet werden. Hier ist wichtig, dass die Variablen mit einem hohen absoluten Wert den meisten Anteil haben die Klassen voneinander zu trennen.\nProportions of trace: Beschreibt den Anteil der Varianz zwischen den Klassen, der durch aufeinanderfolgende Diskriminanzfunktionen erklärt wird.\n\nMit der Funktion partimat() können wir uns die Zusammenhänge für einzelne Variablenkombinationen ansehen, vielleicht wird dann einiges klarer. Es empfiehlt sich immer die Variablen zu nehmen, die den größten Betrag in der ersten Diskriminanten (LD1) haben. In unserem Fall sind das dann flavanoids sowie nonflavanoid_phenols und od280_od315_of_diluted_wines die wir uns nochmal paarweise anschauen. Ich kann das leider hier nicht im Skript machen, da leider die entstehende Abbildungen dann leider hier die Ausgabe zerreißen. Das Paket hat eben doch schon ein paar Jahre auf dem Buckel und ist nicht mehr so kompatibel und ich ahbe leider nicht die Zeit es nochmal in ggplot schön zu machen. Die Informationen sind ja alle da.\n\n\nR Code [zeigen / verbergen]\npartimat(class ~ flavanoids + od280_od315_of_diluted_wines + nonflavanoid_phenols, data = wine_tbl, method = \"lda\")\n\n\nIm Weiteren können wir uns auch die Klassen vorhersagen lassen die sich aus dem Modell der lineare Diskriminanzanalyse ergeben würden. Dafür nutzen wir dann die Funktion predict() und stecken einfach nochmal die Daten in die Funktion. Dann müssen wir noch etwas aufräumen, damit wir einen schönen Datensatz wiederbekommen.\n\n\nR Code [zeigen / verbergen]\nwine_lda_pred_tbl &lt;- predict(wine_lda) |&gt; \n  reduce(bind_cols) |&gt; \n  set_names(c(\"class\", \"pred_1\", \"pred_2\", \"pred_3\", \"ld1\", \"ld2\"))\n\n\nWir können jetzt den Datensatz nutzen um einmal zu schauen, ob wir in der Lage waren über die lineare Diskriminanzanalyse unsere Klassen sauber aufzutrennen. Wir stellen auf der \\(x\\)-Achse und der \\(y\\)-Achse dann die Diskriminaten LD1 und LD2 dar. Unsere Klassen sind dann nach der vorhergesagten Klassenzugehörigkeit gelabelt. Wir sehen das Ergebnis dann in der Abbildung 68.20.\n\n\nR Code [zeigen / verbergen]\nwine_lda_pred_tbl |&gt; \n  ggplot(aes(ld1, ld2, label = class, color = class)) +\n  theme_minimal() +\n  geom_text() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 68.20— Ergebnis der linearen Diskriminanzanalyse für die Aufteilung der Weinsorten für beide Diskriminanten.\n\n\n\n\n\nJetzt schauen wir noch nach wie akkurat unsere Einteilung wirklich war. Wie viel Prozent der Klassen aus unserem originalen Datensatz können wir mit dem Modell der linearen Diskriminanzanalyse richtig vorhersagen?\n\n\nR Code [zeigen / verbergen]\nmean(wine_lda_pred_tbl$class == wine_tbl$class)\n\n\n[1] 1\n\n\nPerfekt, wir können alle Sorten richtig zuordnen. Wir haben ein wunderbares Modell gefunden mit dem wir zukünftige Weinsorten in die drei Klassen einordnen können.\n\n\n68.7.2 Quadratische Diskriminanzanalyse (QDA)\nAls nächstes schauen wir kurz auf die quadratische Diskriminanzanalyse (eng. Quadratic discriminant analysis ). Wir gehen hier jetzt nicht nochmal alles im Detail durch. Hier wiederholt sich dann vieles aus der linearen Diskriminanzanalyse.\n\n\nR Code [zeigen / verbergen]\nwine_qda &lt;- qda(class ~ ., data = wine_tbl)\n\n\nWir erhalten auch wieder die Vorhersagen und damit ein Maß für unsere Güte der KLassenzuordnung über die Funktion predict(). Leider ist es so, dass wir nicht die Informationen über die Diskriminanten erhalten. Daher können wir auch keine Abbildung der Prädiktion zeigen.\n\n\nR Code [zeigen / verbergen]\nwine_qda_pred_tbl &lt;- predict(wine_qda) |&gt; \n  reduce(bind_cols) |&gt; \n  set_names(c(\"class\", \"pred_1\", \"pred_2\", \"pred_3\"))\n\n\nDas einzige was hier jetzt erstmal bleibt, ist darauf zu schauen, wie akkurat unsere Vorhersage war. Wie viele von den Sorten sagen wir richtig vorher?\n\n\nR Code [zeigen / verbergen]\nmean(wine_qda_pred_tbl$class == wine_tbl$class)\n\n\n[1] 0.994382\n\n\nHier sind wir dann etwas schlecht als bei der linearen Diskriminanzanalyse.\n\n\n68.7.3 Mischungsdiskriminanzanalyse (MDA)\nFür die Mischungsdiskriminanzanalyse (eng. Mixture discriminant analysis) wechseln wir dann das Paket zu {mda}. Hier können wir uns dann auch wieder die Ergebnisse ausgeben lassen. Wir immer sieht das wieder anders aus, da wir das Paket gewechselt haben.\n\n\nR Code [zeigen / verbergen]\nwine_mda &lt;- mda(class ~ ., data = wine_tbl)\nwine_mda\n\n\nCall:\nmda(formula = class ~ ., data = wine_tbl)\n\nDimension: 8 \n\nPercent Between-Group Variance Explained:\n    v1     v2     v3     v4     v5     v6     v7     v8 \n 52.82  88.80  93.73  96.63  98.35  99.58  99.97 100.00 \n\nDegrees of Freedom (per dimension): 14 \n\nTraining Misclassification Error: 0 ( N = 178 )\n\nDeviance: 0.349 \n\n\nWas wir sehen ist, dass unser Misclassification Error gleich 0 ist. Daher haben wir keine Klasse falsch zugeordnet. Das ist schon mal super. Das werden wir dann auch gleich nochmal sehen, wenn wir die Funktion predict() auf unsere Daten anwenden. Insgesamt werden dann aber acht Dimensionen geschätzt, wir werden uns aber nur die ersten beiden dann anschauen. Daher auch das [, 1:2], was die ersten beiden Spalten aus den variates auswählt.\n\n\nR Code [zeigen / verbergen]\nwine_mda_pred_tbl &lt;- lst(class = predict(wine_mda, type = \"class\"), \n                         posterior = predict(wine_mda, type = \"posterior\"), \n                         variates = predict(wine_mda, type = \"variates\")[, 1:2]) |&gt; \n  reduce(bind_cols) |&gt; \n  set_names(c(\"class\", \"pred_1\", \"pred_2\", \"pred_3\", \"ld1\", \"ld2\"))\n\n\nIn der Abbildung 68.21 sehen wir das Ergebnis der Mischungsdiskriminanzanalyse. Sieht nicht so gut aus, wie die lineare Diskriminanzanalyse, da wir hier mehr Gurppen haben, die sich überlappen. Dennoch scheinen die Sorten sauber getrennt zu werden. Dafür schauen wir uns dann nochmal die Güte der Vorhersage an.\n\n\nR Code [zeigen / verbergen]\nwine_mda_pred_tbl |&gt; \n  ggplot(aes(ld1, ld2, label = class, color = class)) +\n  theme_minimal() +\n  geom_text() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 68.21— Ergebnis der Mischungsdiskriminanzanalyse für die Aufteilung der Weinsorten für beide Diskriminanten.\n\n\n\n\n\nSpannend, wie sehen, dass wir alle Klassen richtig vorhersagen. Zwar ist die Abbildung nicht so klar wie bei der linearen Diskriminanzanalyse, aber denoch kriegen wir alle Klassen sauber vorhersagen.\n\n\nR Code [zeigen / verbergen]\nmean(wine_mda_pred_tbl$class == wine_tbl$class)\n\n\n[1] 1\n\n\nHier gehen wir nicht mehr auf die Fehlermatrix (eng. confusion matrix) ein. Was du schnell erkennst ist, dass du alle Sorten sauber und. richtig vorhersagt. In den Spalten stehen die wahren Sorten und in den Zeilen die vom Modell vorhergesagten Sorten. Wir haben da eine perfekte Übereinstimmung.\n\n\nR Code [zeigen / verbergen]\nwine_mda$confusion\n\n\n         true\npredicted  1  2  3\n        1 59  0  0\n        2  0 71  0\n        3  0  0 48\n\n\nAbbhängig vom Paket ist dann die Fehlermatrix mit enthalten, manachmal musst du dir die auch selber bauen, wenn du die Matrix brauchts.\n\n\n68.7.4 Flexible Diskriminanzanalyse (FDA)\nDie flexible Diskriminanzanalyse (eng. Flexible Discriminant Analysis) basiert auch auf dem R Paket {mda} und somit haben wir ähnliche Aufrufe wie schon in der Mischungsdiskriminanzanalyse. Da wir hier nur zwei Dimensionen vorhersagen, haben wir es gleich einfach bei der Abbildung.\n\n\nR Code [zeigen / verbergen]\nwine_fda &lt;- fda(class ~ ., data = wine_tbl)\n\n\nWir bauen uns dann wieder unseren Vorhersagedatensatz zusammen und wollen dann einmal die Vorhersage visualisieren.\n\n\nR Code [zeigen / verbergen]\nwine_fda_pred_tbl &lt;- lst(class = predict(wine_fda, type = \"class\"), \n                         posterior = predict(wine_fda, type = \"posterior\"), \n                         variates = predict(wine_fda, type = \"variates\")) |&gt; \n  reduce(bind_cols) |&gt; \n  set_names(c(\"class\", \"pred_1\", \"pred_2\", \"pred_3\", \"ld1\", \"ld2\"))\n\n\nIn der Abbildung 68.22 siehst du die Ergebnisse der flexiblen Diskriminanzanalyse. Sieht super aus, wir haben eine perfekte Seperation.\n\n\nR Code [zeigen / verbergen]\nwine_fda_pred_tbl |&gt; \n  ggplot(aes(ld1, ld2, label = class, color = class)) +\n  theme_minimal() +\n  geom_text() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 68.22— Ergebnis der flexiblen Diskriminanzanalyse für die Aufteilung der Weinsorten für beide Diskriminanten.\n\n\n\n\n\nAuch hier einmal geschaut, was die Güte der Vorhersage aussagt. Wir sehen, dass ist dann auch perfekt. War auch zu erwarten nach der Abbildung.\n\n\nR Code [zeigen / verbergen]\nmean(wine_lda_pred_tbl$class == wine_tbl$class)\n\n\n[1] 1\n\n\nAbschließend noch die Fehlermatrix, die wir frei Haus mitgeliefert kriegen.\n\n\nR Code [zeigen / verbergen]\nwine_fda$confusion\n\n\n         true\npredicted  1  2  3\n        1 59  0  0\n        2  0 71  0\n        3  0  0 48\n\n\n\n\n68.7.5 Regulierte Diskriminanzanalyse (RDA)\nZum Abschluss noch die regulierte Diskriminanzanalyse (eng. Regularized discriminant anlysis) aus dem dritten R Paket {klaR}. Ja, wir gehen hier echt durch die Pakete durch und erhalten dann wieder eine andere Ausgabe.\n\n\nR Code [zeigen / verbergen]\nwine_rda &lt;- rda(class ~ ., data = wine_tbl)\nwine_rda\n\n\nCall: \nrda(formula = class ~ ., data = wine_tbl)\n\nRegularization parameters: \n    gamma    lambda \n0.9408989 0.1279423 \n\nPrior probabilities of groups: \n        1         2         3 \n0.3314607 0.3988764 0.2696629 \n\nMisclassification rate: \n       apparent: 26.966 %\ncross-validated: 25.984 %\n\n\nWir sehen vor allem, dass jetzt mal die Vorhersage nicht so super geklappt hat. Wir haben eine Fehlerrate oder Misclassification rate von 28% und damit wird mehr als ein Viertel der Sorten nicht korrekt zugeordnet. Leider haben wir auch hier keine Möglichkeit uns mal etwas anzuschauen. Wir können nur selber nochmal die Vorhersage rechnen und kommen dann vermutlich auf ähnliche Zahlen.\n\n\nR Code [zeigen / verbergen]\nwine_rda_pred_tbl &lt;- predict(wine_rda) |&gt; \n  reduce(bind_cols) |&gt; \n  set_names(c(\"class\", \"pred_1\", \"pred_2\", \"pred_3\"))\n\n\nAm Ende rechnen wir aus, wie viel Prozent wir richtig klassifiziert haben und erreichen grob 71% was ja auch zu erwatzen war. Das ist jetzt so schlecht, dass wir in diesem Fall die regulierte Diskriminanzanalyse nicht nutzen würden.\n\n\nR Code [zeigen / verbergen]\nmean(wine_rda_pred_tbl$class == wine_tbl$class)\n\n\n[1] 0.7303371\n\n\nAm Ende musst du aber schauen, wie deine Daten gut zu welcher Methode passen. Da alle Methoden sehr einfach durchzuführen sind, kannst du auch alle rechnen und schauen welche das beste Ergebnis in deinem Fall liefert.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-pca.html#referenzen",
    "href": "stat-modeling-pca.html#referenzen",
    "title": "68  Multivariate Verfahren",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nKassambara, A. (2017). Practical guide to principal component methods in R: PCA, M (CA), FAMD, MFA, HCPC, factoextra (Bd. 2). Sthda.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>Multivariate Verfahren</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html",
    "href": "stat-modeling-survey.html",
    "title": "69  Fragebogenanalyse",
    "section": "",
    "text": "69.1 Durchführung\nLetzte Änderung am 23. March 2024 um 15:29:38\nDer Fragebogen. Ein kompliziertes Stück in der Gesamtbetrachtung. Zum einen ist es die Auswertung der Fragebögen, die auf verschiedenen Methoden basiert. Viele der Methoden habe ich in den vorherigen Kapiteln vorgestellt. Zum anderen können wir hier auch das Design eines Fragebogens nicht unberücksichtigt lassen. Denn ein schlechter Fragebogen wird uns auch nur schlechte Erkenntnisse bringen. Dank der heutigen Technik ist ja ein Online-Query über Lime Survey | LifeSurvey schnell erstellt. Der Fragebogen muss dann aber dennoch die Forschungsfragen beantworten können. Da fängt dann der komplizierte Teil an sich zu Überlegen, was mache ich jetzt eigentlich mit den ganzen Fragen und möglichen Antworten. Wir auch in anderen Kapiteln bin ich kein Experte für die Erstellung eines Fragebogens geschweige denn der Durchführung der Befragung in einem entsprechenden Labor. Dafür gibt es dann andere Experten, wie im folgenden Kasten für die Angehörigen der Hochschule Osnabrück. Sicherlich gibt es an deiner Einrichtung auch die entsprechenden Stellen. Hier soll es wie immer um einen ersten Überblick über verschiedene Themen und Herausforderungen der Fragebogenanalyse gehen.\nAm Anfang möchte ich noch ein paar Tipps geben, wie die Auswertung leichter von der Hand geht. Ich konzentriere mich hier auf die praktische Auswertung. Natürlich macht es manchmal Sinn von den Regeln abzuweichen, wenn du einen sehr langen Fragebogen hast oder aber eine komplexere Fragestellung beantworten willst. Im Falle einer Abschlussarbeit solltest du aber schauen, das du dir das Leben nicht zu schwer machst. Wir gehen in dem Kapitel nachher noch verschiedene Punkte bei der Auswertung durch, aber es ist natürlich schöner, wenn die Probleme gar nicht erst auftreten können. Hier also eine kurze Sammlung aus anekdotischen Tipps & Tricks beim Fragenbogendesign.\nDas soll es auch schon mit der Einführung und dem allgemeinen Tenor gewesen sein. Ich liefere gleich noch einen Abschnitt für die Durchführung mit Literatur nach. Die technische Umsetzung der Fragen erfolgt hier in der Onlineumfrage LimeSurvey | LifeSurvey und die Auswertung in R. Das hat die Gründe, dass zum einen an der Hochschule Osnabrück das Onlinetool LimeSurvey zu freien Verfügung steht und zum anderen dieses Buch sich hier auf R konzentriert. Fragebogenanalysen sind meistens im Kontext einer Abschlussarbeit sehr viele kleine Analysen, denn jede Frage wird ja häufig separat betrachtet oder mit einer anderen kombiniert. Das geht dann auch in Excel insbesondere, wenn der Fokus auch auf der deskriptiven Statistik und Visualisierung liegt.\nAuch hier endet die Einführung mit einem Kasten für weitere Tutorien rund um das Thema Fragebogenauswertung. Das Thema ist so umfangreich, dass ich es hier nicht in einem Kapitel wirklich tiefgründig erklären kann. Dafür musst du dann nochmal rechts und links weitergucken. Ich habe versucht die Tutorien wieder etwas zu sortieren und die mir am meisten gefallen haben, weiter oben angeordnet. Nicht alle R Pakete machen auch wirklich Sinn, wenn du nur einen einfachen Fragebogen deskriptiv darstellen willst. Im Zweifel gerne mir mal eine Mail schreiben, dann können wir über die Sachlage sprechen.\nIm Folgenden möchte ich dir einmal eine Übersicht über die Literatur zur Erstellung eines Fragebogens geben. Wir immer ist dies hier nur eine grobe Übersicht. Je nachdem wie komplex deine Fragestellung ist, musst du natürlich auch einen komplexeren Fragebogen nutzen und dann wird die Erstellung des Fragebogens um einiges komplizierter und anspruchsvoller. Wenn es gar noch weiter gehen soll in die Richtung Marktforschung mit Teilnehmer:innen in einem Labor in Präsenz, kommen noch andere Anforderungen hinzu. So weit wollen wir hier aber erstmal nicht gehen. Ich stelle dir hier Ideen und Anregungen für die Erstellung eines Fragebogens für eine Abschlussarbeit vor. Ich kann natürlich hier nicht die Arbeiten vollständig zitieren, da musst du dann nochmal selber lesen. Die Literatur ermöglicht deshalb sicherlich noch viel mehr als hier kurz vorgestellt wird. Daher kann ich dir nur empfehlen einmal die Literatur quer zu lesen.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#durchführung",
    "href": "stat-modeling-survey.html#durchführung",
    "title": "69  Fragebogenanalyse",
    "section": "",
    "text": "Wie fang ich’s an?\nBeginnen wir mit einer schon etwas älteren Arbeit von Watson (1998) mit Titel A primer in survey research. Die Arbeit ist zwar schon etwas älter und damit nicht auf dem neusten Stand was die Onlineumfragen angeht, das gab es ja zur der Zeit noch nicht richtig. Dafür liefert die Arbeit aber einen super Einstieg in die Grundlagen von Umfragen und was du beachten solltest. Teilweise ist es dann auch in einer Art Checkliste geschrieben.\nDie Arbeit von Story & Tait (2019) mit dem Titel Survey Research sticht durch die Toolboxen hervor. In der Toolbox for Survey Researchers findest du Tipps & Tricks für dich, wenn du einen Fragebogen erstellst. In der Toolbox for Survey Readers dann die umgedrehte Seite, was muss ich beachten, wenn ich Umfragen lese? Auch toll, da du ja was schreibst, was dann auch gelesen werden soll. Die Arbeit hat noch mehr Tollboxen in denen noch mehr Tipps und Anleitungen gegeben werden. Wenn ich einen Fragebogen in einer Beratung habe, dann gebe ich immer gerne diese Arbeit weiter.\nWenn du dann deine Umfrage gemacht hast kannst du dann bei Gaur et al. (2020) in ihrer Arbeit Reporting Survey Based Studies – a Primer for Authors lesen wie du deine Umfrage publizieren kannst. Die Arbeit beginnt aber schon etwas früher und präsentiert in einer Liste recht aktuelle Tools for survey-based studies und deren Vor- und Nachteile. In dem Algorithm for a survey construct geben die Autoren nochmal eine Handreichung, wie eine Fragebogenstudie bis zur Publikation aufgebaut sein kann.\nSynodinos (2003) gibt in seinem Artikel The “art” of questionnaire construction: some important considerations for manufacturing studies einen sehr detailierten Überblick über die Erstellung eines Fragebogens. Die Arbeit ist interessant, aber auch nur wirklich was für jemanden, der wirklich in die Fragebogenerstellung abtauchen will. Für eine Abschlussarbeit meiner Meinung nach schon zu viel. Ich habe aber die Arbeit gerne einmal quergelesen und die ein oder andere Idee dort mitgenommen. Ich kann mich dann nur folgendem übersetzten Zitat aus seiner Arbeit anschließen.\n\nIn der Tat scheinen einige Forscher die Phase der Datenerhebung zu vernachlässigen und sich nur auf ausgeklügelte statistische Verfahren zu konzentrieren. Es kann eindeutig festgestellt werden, dass keine noch so ausgefeilte statistische Analyse die grundlegenden Unzulänglichkeiten eines schlecht konstruierten Fragebogens korrigieren kann. — Synodinos (2003)\n\nAbschließend möchte ich diese kurze Einleitung hier mit der Arbeit von Brühlmann et al. (2020) mit dem Titel The quality of data collected online: An investigation of careless responding in a crowdsourced sample. Es geht im Prinzip darum, dass die Teilnehmer:innen in einem Onlinefragebogen dann schlampig antworten und irgendwie dann keine Lust mehr haben. Das solltest du beachten, wenn du selber einen Fragebogen baust. Ob du dann deine Analyse so auswerten musst wie die Autoren vorschlagen, würde ich jetzt nicht meinen. Aber habe den Gedanken im Hinterkopf, dass deine Teilnehmer:innen eine Egalhaltung einnehmen könnten während sie den Fragebogen ausfüllen. Das führt uns dann auch gleich zu dem nächsten Thema der Länge eines Fragebogens.\n\n\nWie lang soll es sein?\nHäufig stellt sich auch die Frage, wie lang soll den so ein Fragebogen sein? Du hast so viele Fragen und wenn dann schon mal einer antwortet, dann kann der doch gefälligst dreißig Seiten Fragebogen ausfüllen? Du kannst dann ja später immer noch Fragen rausschmeißen. Ja, aber das machen wir dann meistens doch nicht. Deshalb bleibt das Zitat von Steven King immer aktuell. Du musst deinen Fragebogen so kürzen, dass er deine Fragestellung beantworten kann und nicht mehr.\n\n“Kill your darlings, kill your darlings, even when it breaks your egocentric little scribbler’s heart, kill your darlings.” — Steven King\n\nRolstad et al. (2011) haben in ihrer Arbeit mit dem Titel Response Burden and Questionnaire Length: Is Shorter Better? A Review and Meta-analysis sich sehr viele Zusammenhänge angeschaut. Sie versuchten die Frage zu beantworten, ob ein kurzer Fragebogen wirklich besser ist. Hierbei kam heraus, dass angesichts der schwachen Belege für einen Zusammenhang zwischen der Länge des Fragebogens und dem Beantwortungsaufwand Entscheidungen über die Wahl des Fragebogens am besten auf der Qualität des Inhalts aus der Sicht der Beantwortenden beruhen sollten und nicht auf der Länge an sich.\n\nResponse rates were lower for longer questionnaires, but because the P value for test of homogeneity was P = 0.03, this association should be interpreted with caution because it is impossible to separate the impact of content from length of the questionnaires. — Rolstad et al. (2011)\n\nRoszkowski & Bean (1990) schreiben in ihrer etwas älteren Arbeit mit dem Titel Believe it or not! Longer questionnaires have lower response rates folgendes recht eindeutige Ergebnis.\n\nResponse rate for the short form averaged about 28% higher than for the long form […]. A measure of course satisfaction appearing on both questionnaires showed no significant differences between the long and short form […]. — Roszkowski & Bean (1990)\n\nJa, die Arbeit ist schon etwas älter, aber auch bei Fragebögen steckt dann die Würze in der Kürze. Wenn du deine Fragebögen zu lang machst, dann kann es sein, dass eben deine Teilnehmer:innen keine Lust mehr haben und am Ende nur noch raten oder eben dann den Bogen gar nicht ausfüllen. Und damit kommen wir auch schon zum nächsten Punkt, wie ist denn eigentlich die Rücklaufquote?\n\n\nWieviele antworten mir?\nDu willst ja auch, dass dir Personen auf deinen Fragebogen antworten. Der Fragebogen ist nicht zu lang und du glaubst auch die Interessen der Antwortenden berücksichtigt zu haben. Dein Fragebogen ist damit also keine Qual zu beantworten. P. J. Edwards et al. (2009) hat sich in einer Metanalyse mit dem Titel Methods to increase response to postal and electronic questionnaires einmal verschiedene Möglichkeiten angeschaut, die Antwortraten zu erhöhen. Nicht überraschend konnten durch Geld die Antwortraten verdoppelt werden. Aber es gab noch andere Möglichkeiten. Weitere Punkte, die die Antwortraten verdoppelt haben, waren ein Einschreiben, ein Hinweis auf dem Umschlag - zum Beispiel mit einem Kommentar, der den Teilnehmern suggeriert, dass sie davon profitieren können, wenn sie den Umschlag öffnen oder aber ein interessanteres Thema im Fragebogen. Schau nochmal selber in die Arbeit um dir die weiteren Möglichkeiten anzusehen. P. Edwards et al. (2002) hat schon früher eine Arbeit mit dem Titel Increasing response rates to postal questionnaires: systematic review geschrieben. In der sehr kurzen Arbeit geht er nochmal auf verschiedene Punkte ein. Insgesamt schaut der Artikel auf 40 Strategien die Antwortraten zu erhöhen. Ich glaube, dass da auch für dich was bei sein könnte, was einfach durchzuführen ist.\n\n\nWie soll ich’s bauen?\nDie Likertskala ist die häufigste Art die Antwortmöglichkeiten zu bauen. In dem Artikel The 4,5, and 7 Point Likert Scale erhälst du einen guten Überblick, was die Vorteile und Nachteile von den verschiedenen Anzahlen an Antwortmöglichkeiten sind. Im Prinzip hast du die Wahl zwischen vier Antwortmöglichkeiten, so dass du dann die Teilnehmer zwingst sich für eine Seite zu entscheiden. Oder aber du hast fünf Antwortmöglichkeiten, so dass du eine neutrale Antwortmöglichkeit einfügen kannst. Friedman & Amoo (1999) gibt mit seinem Artikel Ratung the rating scales nochmal einen wunderbaren Überblick über die Porblematik der Auswahl der richtigen Antwortmöglichkeiten im Bezug auf die Likertskala. In dem etwas längeren Artikel Survey Response Scales: How to Choose the Right One for your Questionnaire geht der Autor nochmal auf die verschiedenen möglichen Arten von Antworten neben der Likertskala ein. Neben der Likertskala geht natürlich auch eine “Ja/Nein”-Antwort oder eine numerische Einschätzung als mögliche Antwort. So eine ausführliche Betrachtung sprengt dann eben dieses Kapitel und deshalb schaue da nochmal in die Literatur, wenn du die Antworten für deine Fragen baust. Ich denke, dass die drei Quellen schonmal ein guter Start und Inspiration sind.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#genutzte-r-pakete",
    "href": "stat-modeling-survey.html#genutzte-r-pakete",
    "title": "69  Fragebogenanalyse",
    "section": "69.2 Genutzte R Pakete",
    "text": "69.2 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, gtsummary, janitor, FactoMineR,\n               factoextra, corrplot, wesanderson, naniar,\n               scales, likert, sjPlot, parameters, mfp,\n               correlation, conflicted)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#daten",
    "href": "stat-modeling-survey.html#daten",
    "title": "69  Fragebogenanalyse",
    "section": "69.3 Daten",
    "text": "69.3 Daten\nDer Druck im Markt auf Bauernhöfe ist groß. Neben den bekannten Erlebnishöfen mit Spezialisierungen auf Obst und Gemüse muss sich in den Weiten Brandenburgs, Niedersachsens und Mecklenburg-Vorpommern jeder Hof was Neues einfallen lassen um Gäste zu sich zu locken. Heutzutage reicht es einfach nicht mehr Rentnern auf Elektrofahrrädern überdimensionierte Sahnetorten anzubieten. Die Enkel wollen auch was sehen. Inspiriert von der Serie Tiger King: Großkatzen und ihre Raubtiere gibt es nun immer mehr Höfe, dich sich den einen oder anderen Tiger oder Großkatze in den Hinterhof sperren. Aufgeschreckt durch den Zwischenfall mit der Löwin von Kleinmachnow - oder wie eine Wildsau durchs Dorf getrieben wurde, gab der Verband “Erlebnishöfe mit Niveau e.V.” eine Umfrage mit dem Titel Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen unter den Mitgliedern in Auftrag. Gleichzeitig sollte auch die Zufriedenheit der Verbandsarbeit abgefragt werden und wie die betriebswirtschaftliche Struktur der 843 Betriebe um die Erlebnishöfe im Verband eigentlich so aussieht.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl &lt;- read_excel(\"data/survey-serengeti-tiger-king.xlsx\", na = \"NA\",\n                        sheet = \"results-survey-lime\")\n\n\nIn der Tabelle 69.1 sehen wir einen Auszug aus unseren Ergebnis der Umfrage des Verbandes. Wir haben insgesamt 23 Fragen gestellt und eine Rücklauf von 173 Fragebögen von den Erlebnishöfen erhalten. Das ist eigentlich gar nicht so schlecht, damit haben wir hier eine Rücklaufquote von gut \\(20.5\\%\\) der Fragebögen. Wir werden uns nun an den 23 beispielhaften Fragen verschiedene Herausforderungen anschauen.\n\n\n\n\nTabelle 69.1— Auszug von fünf Fragen aus dem Fragebogen zur Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen. Insgesamt haben 173 Erlebnishöfe den Fragebogen zurückgesendet.\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeschlecht\nalter\nhaben_Sie_tiger\nf1Soziodemografisch\nf2Soziodemografisch\n\n\n\n\nMännlich\nÜber 60 Jahre\nJa\nNebenerwerb\nHolzwirtschaft\n\n\nMännlich\n30-39 Jahre\nJa\nHaupterwerb\nNA\n\n\nMännlich\nÜber 60 Jahre\nJa\nNebenerwerb\nNA\n\n\nMännlich\n40-49 Jahre\nJa\nHaupterwerb\nNA\n\n\n…\n…\n…\n…\n…\n\n\nMännlich\n40-49 Jahre\nNein\nNebenerwerb\nNA\n\n\nMännlich\nÜber 60 Jahre\nNein\nHaupterwerb\nHofladen\n\n\nMännlich\n40-49 Jahre\nNein\nHaupterwerb\nNA\n\n\nMännlich\nÜber 60 Jahre\nNein\nHaupterwerb\nNA\n\n\n\n\n\n\n\n\nWir werden jetzt den Datensatz einmal versuchen auszuwerten. Dabei gehen wir schrittweise verschiedene Analysen durch und schauen, ob wir mit den Fragebogendaten so arbeiten können. Sehr häufig müssen wir nämlich erstmal die Daten so lange bearbeiten, bis die Daten sinnvoll ausgewertet werden können.\nLeider sind die Fragen in den Fragebögen sehr lang. Das macht es schwierig die Fragen sauber als Spaltennamen abzubilden. Wir erhalten zum Beispiel aus dem Online-Query Lime verkürzte Spaltennamen, die sehr wenig aussagen, aber dennoch sehr lang sind. Deshalb empfehle ich immer noch eine zusätzliche Tabelle mit Fragen-ID ques_id, der Lime-ID lime_id sowie der eigentlichen Frage question zu erstellen. Ich mache das meistens dann in einem zusätzlichen Tab in der Exceldatei wie in der folgenden Abbildung gezeigt. In der Exceldatei kannst du dann auch in neuen Tabs die gereinigten oder bearbeiteten Versionen des ursprünglichen Fragebogens ablegen.\n\n\n\n\n\n\nAbbildung 69.1— Nicht alle Änderungen müssen in R durchgeführt werden. Es empfiehlt sich aber die Tabs in Excel zu nutzen um sich neue Versionen des ursprüngliche Lime-Fragebogens anzulegen. So hast du immer das Orginal vorliegen und kannst dann schrittweise nachvollziehen, was du geändert hast.\n\n\n\nIch lade dann einmal den Tab mit den Beschreibungen der Fragen.\n\n\nR Code [zeigen / verbergen]\nshort_question_tbl &lt;- read_excel(\"data/survey-serengeti-tiger-king.xlsx\", sheet = \"question-short\") \n\n\nIn der Tabelle 69.2 siehst du einmal die Fragen in der Langform und die entsprechenden ID’s für die Kurzform hier in R und dann eben auch in Lime. Ich nutze die Kurzform ques_id für die Beschriftungen von Abbildungen, da es sonst sehr schnell sehr unübersichtlich wird. Finale Abbildungen können dann am Ende immer noch entsprechend beschriftet werden. Die lime_id brauche ich um später noch Fragen entfernen zu können und als Verbindung zu den ursprünglichen Daten.\n\n\n\n\nTabelle 69.2— Tabelle der abgekützen Fragen-ID, der ursprüngichen Lime-ID sowie dem vollständigen Fragetext. Auch hier habe ich den Fragetext gekürzt, später kann dann noch der vollständige Text ergänzt werden.\n\n\n\n\n\n\n\n\n\n\n\nques_id\nlime_id\nquestion\n\n\n\n\ng1\ngeschlecht\nWelches Geschlecht haben Sie?\n\n\ng2\nalter\nWie alt sind Sie?\n\n\ng3\nhaben_Sie_tiger\nHalten Sie aktuell Tiger oder andere Großkatzen auf Ihrem Erlebnishof?\n\n\ns1\nf1Soziodemografisch\nIst Ihr Erlebnishof Haupterwerb oder Nebenerwerb?\n\n\ns2\nf2Soziodemografisch\nHaben Sie weitere Erwerbsquellen neben dem Erlebnishof außer Landwirtschaft?\n\n\ns3\nf3Soziodemografisch\nWelche Stellung haben Sie auf dem Erlebnishof inne?\n\n\nv1\nf1Verbandsarbeit\nSoll die Verbandsarbeit in den nächsten Jahren digital in den sozialen Netzwerken ausgeweitet werden?\n\n\nv2\nf2Verbandsarbeit\nLesen Sie quartalsweise den Newsletter auf der Verbandshomepage?\n\n\nv3\nf3Verbandsarbeit\nHalten Sie die Verbandsarbeit für die Verbreitung von Großkatzen im ländlichen Raum für sinnvoll?\n\n\nv4\nf4Verbandsarbeit\nSehen Sie die Haltung von Großkatzen als eine kulturelle Bereicherung?\n\n\nv5\nf5Verbandsarbeit\nSehen Sie die Notwendigkeit von genetisch veränderten Großkatzen zur Steigerung der Attraktivität des Erlebnishofes?\n\n\nf1\nf1Fuetterung\nFüttern Sie täglich Kellog’s Frosties?\n\n\nf2\nf2Fuetterung\nFüttern Sie wöchentlich Batzen?\n\n\nf3\nf3Fuetterung\nFüttern Sie Joghurt?\n\n\nf4\nf4Fuetterung\nFüttern Sie pflanzlich oder gar vegan?\n\n\ni1\nf1Imagearbeit\nWie aktiv sind Sie bei der Lobbyarbeit in den jeweiligen Landeshauptstädten?\n\n\ni2\nf2Imagearbeit\nWie aktiv sind Sie in der positiven Vermarktung des Verbandes in sozialen Netzwerken?\n\n\ni3\nf3Imagearbeit\nWie aktiv sind Sie in der Vermarktung von Tigernachwuchs an Dritte in den sozialen Netzwerken?\n\n\ni4\nf4Imagearbeit\nWie aktiv sind Sie bei der notwendigen Entnahme von Schadwölfen in Ihrem Einflussgebiet?\n\n\nc1\nf5dauer_verletzung\nWie lange schätzen Sie dauert es im Durchschnitt in Tagen bis sich ein Besucher bei Ihnen gefährlich verletzt?\n\n\nc2\nf6einkommen_jahr\nWieviel Einkommen hatten Sie brutto in Tausend EUR im letzten Jahr?\n\n\nc3\nf7gruppengroesse\nWie groß sind ihre Besuchergruppen im Durchschnitt pro Monat?\n\n\nc4\nf8eis_verkauf\nWie viel 100 Liter Eis verkaufen Sie im Durchschnitt pro Monat?",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#preprocessing",
    "href": "stat-modeling-survey.html#preprocessing",
    "title": "69  Fragebogenanalyse",
    "section": "69.4 Preprocessing",
    "text": "69.4 Preprocessing\nWenn wir uns mit Fragebögen beschäftigen, dann werten wir meisten nicht alle Fragen aus. Das macht auch meistens keinen Sinn. Denn wir stellen zwar recht viele Fragen, aber am Ende müssen wir auch schauen, ob alle Fragen sinnvoll beantwortet wurden oder aber ob wir sehr viele Nichtantworten haben. Davon hängt dann auch die weitere Analyse ab. Wir können uns auch überlegen einzelne Fragen zusammenzufassen, da wir feststellen, dass wir dann am Ende doch nicht so eine feingliedrige Aufteilung wollen.\nIm Weiteren müssen wir dann auch unsere Antworten in Zahlen umwandeln. Wir können ja nur mit Zahlen rechnen. Nur so können wir mittlere Noten ausgeben. Die Umwandlung können wir entweder global wie folgt machen, oder aber wir definieren für jede Antwort die Reihenfolge der Antwortmöglichkeiten. Die automatisierte Zuordnung bewirkt dann, dass wir nicht die Antwortmöglichkeiten in der richtigen, logischen Reihenfolge haben, sondern in der alphanumerischen Ordnung. Für einen ersten Überblick über die Ergebnisse des Fragebogens ist das Vorgehen okay. Später werden wir dann natürlich noch die Fragen richtig formatieren. Aber erstmal müssen wir wissen welche Fragen wir überhaupt auswerten wollen.\n\n\nR Code [zeigen / verbergen]\ntiger_fct_tbl &lt;- tiger_tbl |&gt;\n  mutate(across(everything(), as_factor))\n\n\nWenn du gleich die richtige Ordnung ahben willst, dann ist es ein wenig mehr Arbeit. Hier können wir dann über die Funktion ordered() die richtige Ordnung der Antwortmöglichkeiten über die Option levels erreichen. Wir haben hier verschiedene Antwortmöglichkeiten in den verschiedenen Fragen. Daher jetzt einmal die Ordnung der Antworten in logischer Reihenfolge. Mir reicht immer der schnelle Überblick, aber das ist dann ja auch Geschmackssache.\n\n\nR Code [zeigen / verbergen]\nalter_ord &lt;- c(\"18-29 Jahre\", \"30-39 Jahre\", \"40-49 Jahre\", \"50-59 Jahre\", \"Über 60 Jahre\")\nzustimmung_ord &lt;- c(\"trifft voll zu\", \"trifft zu\", \"weder noch\", \"trifft nicht zu\", \"trifft gar nicht zu\")\naktiv_ord &lt;- c(\"sehr aktiv\", \"eher aktiv\", \"weder noch\", \"eher nicht aktiv\", \"gar nicht aktiv\")\n\n\nDu siehst, dass ist eine Menge an Arbeit und zu tippen. Deshalb kann ich dir empfehlen, dass nur bei den Fragen zu machen, die du dann am Ende des Daten Preprocessing auch wirklich nutzen willst. Besonders bei Fragebögen mir sehr vielen Fragen wird es sehr schnell sehr lang. Auf der anderen Seite macht man es dann auch nur einmal. Am Ende wandeln wir dann noch alle Fragen, die wir nicht händisch in einen geordneten Faktor umgewandelt haben, in einen Faktor mit der Funktion mutate_if() um.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl &lt;- tiger_tbl |&gt; \n  mutate(alter = ordered(alter, levels = alter_ord),\n         f1Verbandsarbeit = ordered(f1Verbandsarbeit, levels = zustimmung_ord),\n         f2Verbandsarbeit = ordered(f2Verbandsarbeit, levels = zustimmung_ord),\n         f3Verbandsarbeit   = ordered(f3Verbandsarbeit, levels = zustimmung_ord), \n         f4Verbandsarbeit   = ordered(f4Verbandsarbeit, levels = zustimmung_ord), \n         f5Verbandsarbeit   = ordered(f5Verbandsarbeit, levels = zustimmung_ord),\n         f1Imagearbeit = ordered(f1Imagearbeit, levels = aktiv_ord), \n         f2Imagearbeit = ordered(f2Imagearbeit, levels = aktiv_ord),\n         f3Imagearbeit = ordered(f3Imagearbeit, levels = aktiv_ord),\n         f4Imagearbeit = ordered(f4Imagearbeit, levels = aktiv_ord)) |&gt; \n  mutate_if(is.character, as.factor)\n\n\nMit unserem geordneten Objekt tiger_ord_tbl können wir uns jetzt einen ersten Überblick über die Antworten der Fragen geben lassen. Dann entscheiden wir, ob wir Fragen zusammenfassen oder gar entfernen wollen. Eventuell müssen wir auch Antwortmöglichkeiten zusammenfassen, wenn einige Antworten einfach nicht ausgewählt wurden. Aber das schauen wir uns jetzt einmal in einer Übersicht an.\n\n\n\n\n\n\nAchtung, as.factor() vs. as_factor() macht einen Unterschied!\n\n\n\nWenn du deine Wörter &lt;chr&gt; in Zahlen umwandeln willst, dann musst du ja den Umweg über eine Faktorumwandlung gehen. Hier ist es jetzt mal sehr wichtig, dass du die Funktion as.factor() nutzt. Eigentlich nutze ich immer die Funktion as_factor() aber diese Funktion hat ein Feature, was uns hier bei den Fragebögen auf die Füße fällt. Schauen wir uns die Sachlage einmal in einem Beispiel an. Wir haben folgende drei Antworten und wollen diese einmal in einen Faktor umwandeln.\n\n\nR Code [zeigen / verbergen]\nanswer_vec &lt;- c(\"weder_noch\",  \"eher_zufrieden\", \"sehr_zufrieden\")\n\n\nWenn wir jetzt die Funktion as.factor() nutzen, dann werden unsere Level alphanumerisch sortiert. Das hat den Vorteil, dass jede Frage immer die gleichen Antwortsortierungen erhält. Dadurch ist dann auch gewährleistet, dass in jeder Frage die Antwortmöglichkeiten dann nach der Umwandlung in eine Zahl mit as.numeric() auch wirklich das gleiche Wort bedeutet.\n\n\nR Code [zeigen / verbergen]\nanswer_vec |&gt; \n  as.factor() \n\n\n[1] weder_noch     eher_zufrieden sehr_zufrieden\nLevels: eher_zufrieden sehr_zufrieden weder_noch\n\n\nDie Sortierung in as_factor() wird nach dem Auftreten des Wortes in dem Vektor gemacht. Das heißt, je nach Frage, hat dann eine Frage eine andere Sortierung der Antwortmöglichkeiten. Das ist unglaublich ungünstig, da wir dann ja nach einer Umwandlung der Faktorenlevel in eine Zahl mit as.numeric() nicht mehr die gleichen Antwortmöglichkeiten hinter jeder Zahl haben!\n\n\nR Code [zeigen / verbergen]\nanswer_vec |&gt; \n  as_factor() \n\n\n[1] weder_noch     eher_zufrieden sehr_zufrieden\nLevels: weder_noch eher_zufrieden sehr_zufrieden\n\n\n\n\n\n69.4.1 Univariate Analyse\nEigentlich ist die univariate Analyse ja auch gleich ein Teil der Darstellung des Fragebogens und gehört nicht so richtig zum Preprocessing. Auf der anderen Seite sehen wir in der univariaten Analyse auch das erste Mal alle Fragen und Antworten auf einem Blick in einer Tabelle und können dann entschieden, ob wir eine Frage rausnehmen wollen oder eben nicht. Oder ob unsere Antworten zu den Fragen passen oder es auffällige Antwortmuster gibt. Nach was wollen wir nun als erstes einmal Ausschau halten?\n\nFehlende Werte\n\nGibt es eine Frage, bei der fast keiner geantwortet hat? Haben wir also eigentlich gar keine Information in der Frage enthalten, da die Antworten fast alle NA also fehlend sind?\n\nGleiche Einträge\n\nGibt es Fragen, bei denen alle das Gleiche geantwortet haben? Haben wir also gar keine Varianz in den Fragen? Wenn alle nur eine und dieselbe Antwort geben, dann ist die Aussage der Frage sehr begrenzt. Wir können dann auch keine Gruppenvergleich rechnen, da ja alle immer das gleiche angekreuzt haben.\n\nSehr diverse Antworten\n\nGibt es Fragen, wo die Antworten sehr heterogen sind und sich somit fast nicht sinnvoll zusammenfassen lassen? Das haben wir dann häufig bei Freitextfeldern. Es kann dann sein, dass wir sehr viele verschiedene Antworten erhalten, die wir irgendwie nicht sinnvoll zusammen kriegen.\n\n\nFür die univariate Analyse nutze ich das R Paket {gtsummary} mit der Funktion tbl_summary(). Die Funktion baut uns über alle Spalten in dem Datensatz eine deskriptive Information mit der Anzahl und der Häufigkeit der jeweiligen Antwortkategorie. Das ist super schnell und super effizient. Innerhalb von Sekunden haben wir unsere Fragen einaml in einer Tabelle wiedergeben. Das einzige was ich hier noch angepasst habe ist, dass ich die Fragen als Text dann als Spaltennamen gesetzt ahbe. So haben wir dann die richtigen Fragen in der Tabelle stehen. Sonst brauchen wir die Langform der Fragen ja nicht in den Abbilungen. Hier in der Tabelle finde ich die richtigen Fragen sehr sinnvoll.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  set_names(short_question_tbl$question) |&gt; \n  tbl_summary()\n\n\nIch habe dir jetzt die Ausgabe der Funktion tbl_summary() einmal in dem folgenden Kasten eingeklappt. Sonst sehen wir vor lauter Tabelle nichts mehr und so kannst du hier übersichtlich lesen. Wir sehen, dass die Frage “Haben Sie weitere Erwerbsquellen neben dem Erlebnishof außer Landwirtschaft?” sinnlos war. Zum einen war es Freitext und zum anderen haben wir mit 139 fehlenden Werten kaum Rückmeldungen zu der Frage. In unserem Freitexten sind dann so heterogene Antworten, dass sich hier eine Auswertung nicht sinnvoll durchführen lässt. Auch das Alter hat mit nur drei unter 29 Jährigen eine ungünstige Verteilung. Hier müsste man mal die Antworten zusammenfassen. Wir sehen auch, dass wir eigentlich gar keine Teilnehmerinnen in unserer Umfrage haben. So können wir dann einmal die Fragen durchgehen und dann immer entscheiden, ob wir eine Frage ganz rausnehmen, wie die Frage zu den Erwerbsquellen, oder aber Zusammenfassen müssen.\n\n\n\n\n\n\nUnivariate Ausgabe der Funktion tbl_summary()\n\n\n\n\n\n\n\n\n\nTabelle 69.3— Univariate Analyse der einzelenen Fragen und deren Antwortverteilung. Anhand der Tabelle können fehlende Werte und ungleichmäßig beantwortete Fragen er kannt und dann ausgeschlossen werden.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nN = 1731\n\n\n\n\nWelches Geschlecht haben Sie?\n\n\n\n\n    Männlich\n155 (90%)\n\n\n    Weiblich\n18 (10%)\n\n\nWie alt sind Sie?\n\n\n\n\n    18-29 Jahre\n3 (1.7%)\n\n\n    30-39 Jahre\n22 (13%)\n\n\n    40-49 Jahre\n42 (24%)\n\n\n    50-59 Jahre\n49 (28%)\n\n\n    Über 60 Jahre\n57 (33%)\n\n\nHalten Sie aktuell Tiger oder andere Großkatzen auf Ihrem Erlebnishof?\n\n\n\n\n    Ja\n146 (84%)\n\n\n    Nein\n27 (16%)\n\n\nIst Ihr Erlebnishof Haupterwerb oder Nebenerwerb?\n\n\n\n\n    Haupterwerb\n114 (66%)\n\n\n    Nebenerwerb\n59 (34%)\n\n\nHaben Sie weitere Erwerbsquellen neben dem Erlebnishof außer Landwirtschaft?\n\n\n\n\n    Blumenanbau\n2 (5.9%)\n\n\n    Direktvermarktung\n1 (2.9%)\n\n\n    Ferienhof\n2 (5.9%)\n\n\n    forst\n1 (2.9%)\n\n\n    Forst\n3 (8.8%)\n\n\n    Forst, LN verpachtet\n1 (2.9%)\n\n\n    Forstwirtschaft\n5 (15%)\n\n\n    Forstwirtschaft + Verpachtung\n1 (2.9%)\n\n\n    Grünland 1,5 ha und 3 ha Wald\n1 (2.9%)\n\n\n    Hofladen\n2 (5.9%)\n\n\n    Holzwirtschaft\n1 (2.9%)\n\n\n    Kartoffeln\n2 (5.9%)\n\n\n    Pferde\n2 (5.9%)\n\n\n    Pferdehaltung\n1 (2.9%)\n\n\n    Schafhaltung\n2 (5.9%)\n\n\n    Strohhandel\n1 (2.9%)\n\n\n    Vermietung und Verpachtung\n1 (2.9%)\n\n\n    Wald\n3 (8.8%)\n\n\n    Weihnachtsbäume\n2 (5.9%)\n\n\n    Unknown\n139\n\n\nWelche Stellung haben Sie auf dem Erlebnishof inne?\n\n\n\n\n    Angestellter\n1 (0.6%)\n\n\n    Betriebsleiter\n141 (82%)\n\n\n    Hofnachfolger\n14 (8.1%)\n\n\n    König\n5 (2.9%)\n\n\n    Leitung Feldwirtschaft\n4 (2.3%)\n\n\n    Leitung Tierproduktion\n3 (1.7%)\n\n\n    Sonstiges\n5 (2.9%)\n\n\nSoll die Verbandsarbeit in den nächsten Jahren digital in den sozialen Netzwerken ausgeweitet werden?\n\n\n\n\n    trifft voll zu\n8 (4.7%)\n\n\n    trifft zu\n36 (21%)\n\n\n    weder noch\n45 (26%)\n\n\n    trifft nicht zu\n49 (29%)\n\n\n    trifft gar nicht zu\n32 (19%)\n\n\n    Unknown\n3\n\n\nLesen Sie quartalsweise den Newsletter auf der Verbandshomepage?\n\n\n\n\n    trifft voll zu\n19 (11%)\n\n\n    trifft zu\n50 (29%)\n\n\n    weder noch\n46 (27%)\n\n\n    trifft nicht zu\n32 (19%)\n\n\n    trifft gar nicht zu\n23 (14%)\n\n\n    Unknown\n3\n\n\nHalten Sie die Verbandsarbeit für die Verbreitung von Großkatzen im ländlichen Raum für sinnvoll?\n\n\n\n\n    trifft voll zu\n9 (5.3%)\n\n\n    trifft zu\n97 (57%)\n\n\n    weder noch\n39 (23%)\n\n\n    trifft nicht zu\n19 (11%)\n\n\n    trifft gar nicht zu\n6 (3.5%)\n\n\n    Unknown\n3\n\n\nSehen Sie die Haltung von Großkatzen als eine kulturelle Bereicherung?\n\n\n\n\n    trifft voll zu\n23 (14%)\n\n\n    trifft zu\n79 (46%)\n\n\n    weder noch\n34 (20%)\n\n\n    trifft nicht zu\n26 (15%)\n\n\n    trifft gar nicht zu\n8 (4.7%)\n\n\n    Unknown\n3\n\n\nSehen Sie die Notwendigkeit von genetisch veränderten Großkatzen zur Steigerung der Attraktivität des Erlebnishofes?\n\n\n\n\n    trifft voll zu\n8 (4.7%)\n\n\n    trifft zu\n57 (34%)\n\n\n    weder noch\n50 (29%)\n\n\n    trifft nicht zu\n37 (22%)\n\n\n    trifft gar nicht zu\n18 (11%)\n\n\n    Unknown\n3\n\n\nFüttern Sie täglich Kellog's Frosties?\n\n\n\n\n    Ja\n101 (70%)\n\n\n    Nein\n44 (30%)\n\n\n    Unknown\n28\n\n\nFüttern Sie wöchentlich Batzen?\n\n\n\n\n    Ja\n111 (77%)\n\n\n    Nein\n34 (23%)\n\n\n    Unknown\n28\n\n\nFüttern Sie Joghurt?\n\n\n\n\n    Ja\n63 (43%)\n\n\n    Nein\n82 (57%)\n\n\n    Unknown\n28\n\n\nFüttern Sie pflanzlich oder gar vegan?\n\n\n\n\n    Ja\n40 (28%)\n\n\n    Nein\n105 (72%)\n\n\n    Unknown\n28\n\n\nWie aktiv sind Sie bei der Lobbyarbeit in den jeweiligen Landeshauptstädten?\n\n\n\n\n    sehr aktiv\n4 (2.9%)\n\n\n    eher aktiv\n51 (37%)\n\n\n    weder noch\n60 (44%)\n\n\n    eher nicht aktiv\n20 (15%)\n\n\n    gar nicht aktiv\n2 (1.5%)\n\n\n    Unknown\n36\n\n\nWie aktiv sind Sie in der positiven Vermarktung des Verbandes in sozialen Netzwerken?\n\n\n\n\n    sehr aktiv\n20 (15%)\n\n\n    eher aktiv\n69 (50%)\n\n\n    weder noch\n41 (30%)\n\n\n    eher nicht aktiv\n6 (4.4%)\n\n\n    gar nicht aktiv\n1 (0.7%)\n\n\n    Unknown\n36\n\n\nWie aktiv sind Sie in der Vermarktung von Tigernachwuchs an Dritte in den sozialen Netzwerken?\n\n\n\n\n    sehr aktiv\n2 (1.4%)\n\n\n    eher aktiv\n44 (31%)\n\n\n    weder noch\n66 (47%)\n\n\n    eher nicht aktiv\n24 (17%)\n\n\n    gar nicht aktiv\n5 (3.5%)\n\n\n    Unknown\n32\n\n\nWie aktiv sind Sie bei der notwendigen Entnahme von Schadwölfen in Ihrem Einflussgebiet?\n\n\n\n\n    sehr aktiv\n18 (13%)\n\n\n    eher aktiv\n81 (58%)\n\n\n    weder noch\n33 (24%)\n\n\n    eher nicht aktiv\n7 (5.0%)\n\n\n    gar nicht aktiv\n1 (0.7%)\n\n\n    Unknown\n33\n\n\nWie lange schätzen Sie dauert es im Durchschnitt in Tagen bis sich ein Besucher bei Ihnen gefährlich verletzt?\n75 (26, 131)\n\n\nWieviel Einkommen hatten Sie brutto in Tausend EUR im letzten Jahr?\n769 (395, 1,326)\n\n\nWie groß sind ihre Besuchergruppen im Durchschnitt pro Monat?\n6.0 (4.0, 9.0)\n\n\nWie viel 100 Liter Eis verkaufen Sie im Durchschnitt pro Monat?\n19 (15, 25)\n\n\n\n1 n (%); Median (IQR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n69.4.2 Fehlende Werte\nWarum haben wir fehlende Werte in einem Fragebogen? Wenn wir nicht die Teilnehmer:innen zwingen jede Frage zu beantworten, dann kann es sein, dass einige Fragen nicht beantworten. Warum das so ist, ist eine gute Frage. Wenn die unbeantworteten Fragen gegen Ende auftreten, dann mag es Ermüdung sein. Ab und an übersieht man eventuell auch eine Frage oder aber versteht die Frage nicht. Es gibt also eine Menge Möglichkeiten. In unserem Beispiel treten fehlende Antworten bei der Fütterung auf. Wenn ein Hof keine Tiger hat, dann muss er auch die Tiger nicht füttern. Das macht dann eher einen Block an fehlenden Daten aus. Wir wollen jetzt einmal das R Paket {naniar} nutzen um fehlende Werte zu visualisieren. Etwas dagegen tun, werden wir hier nicht, dazu gibt es dann ein extra Kapitel Imputation von fehlende Werten in diesem Buch.\nIn der Abbildung 69.2 siehst du einmal die fehlenden Werte als schwarzen Balken dargestellt. Die Spalten stellen dabei die Fragen dar und die Prozente hinter den Fragen die Anteile an fehlenden Werten. Teilweise wird hier die letzte Spalte abgeschnitten und wir müssten hier dann besser mit den verkürzten Namen arbeiten. Da ich aber die Abbildungen nur für eine Übersicht für mich selber nutze, kann ich damit leben. Wir sehen einmal als Block die fehlenden Werte für die Fütterung. Das sind all die Teilnehmer:innen, die keine Tiger halten. Dann siehst du noch einige horizontale Linien. Diese Linien sind Teilnehmer, die systematisch keine Fragen beantwortet haben. Sonst haben wir eigentlich keine richtigen auffälligen Muster in den Daten. Die Imagearbeit wurde nur relativ spärlich im Vergleich zur Verbandsarbeit beantwortet.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  vis_miss() \n\n\n\n\n\n\n\n\nAbbildung 69.2— Darstellung der fehlenden Werte in dem Tigerdatensatz. Die fehlenden Werte werden als schwarzer Balken dargstellt. Der Block fehlender Werte bei der Fütterung stellt die Teilnehmer:innen dar, die keine Tiger halten. Horizontale Linien stellen Teilnehmer dar, die systematisch keine Fragen beantwortet haben.\n\n\n\n\n\nHäufig stellt sich dann auch die Frage, wie denn die fehlenden Werte untereinander zusammenhängen. Haben viele nur eine Frage nicht beantwortet oder haben die Teilnehmer dann auch andere Fragen ebenfalls ähnlich nicht beantwortet? Diese Zusammenhänge versucht die Abbildung 69.3 darzustellen. Wir haben einmal für fünfzehn Kombinationen der fehlenden Werte die Anzahlen dargestellt. So sehen wir das wir bei 72 Personen keine Antwort bei der Frage f2Soziodemografisch haben. Sonst finden Sie bei diesen Personen aber keine weiteren fehlenden Werte. Anders sieht es dann bei den nächsten zwanzig Personen aus. Hier haben wir fehlende Werte bei der Frage f2Soziodemografisch und f2Imagearbeit. So können wir dann schauen, ob wir auch dort noch Muster erkennen. Wir sehen auch wieder die Blöcke der Fütterungsfrage. Da haben wir natürlich dann auch immer die vier Fragen zur Fütterung als fehlend.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  gg_miss_upset(nsets = 15)\n\n\n\n\n\n\n\n\nAbbildung 69.3— Darstellung des Zusammenhangs der fehlenden Werte unter den Teilnehmer:innen des Fragebogens. Unter den Balkendiagramm sind die jeweiligen Kombinationen der fehlenden Werte der Fragen für diese Gruppe der Teilnehmer:innen dargestellt.\n\n\n\n\n\nAm Ende werten wir ja viele Fragen erstmal alleine aus. Daher schauen wir uns an, wie die Verteilung der Antworten pro Frage ist. Daher macht es dort noch nicht so viel aus, wenn du fehlende Werte hast. Wenn du dann aber Fragen miteinander in Bezug setzen willst und eventuell die Anteile der Antworten in Beziehung setzen willst, dann macht schon was aus, wie viele fehlende Werte du pro Frage hast. Aber auch hier kommt es dann sehr stark auf den Kontext und die einzelnen Fragen an. Daher kann ich dir hier keine generelle Antwort liefern. Wichtig ist erstmal, dass du das Problem der fehlenden Werte kennst und darstellen kannst.\nJetzt können wir noch ein wenig Zahlen wiedergeben lassen. Wir wollen ja auch wissen, wie viele fehlenden Werte wir dann in den Daten überhaupt haben. Dafür können wir dann die fehlenden Werte über die Funktion n_miss() zählen und durch die gesamte Anzahl an Beobachtungen mit n_complete() teilen. Wir kriegen dann raus, dass wir gut 11.3% fehlende Werte in unserem Datensatz haben.\n\n\nR Code [zeigen / verbergen]\nn_miss(tiger_tbl)/n_complete(tiger_tbl)\n\n\n[1] 0.1126957\n\n\nÜber die Funktion miss_case_summary() kannst du dir dann noch mehr Informationen zu den einzelnen Beobachtungen wiedergeben lassen. Über die Funktion print() kannst du dir dann noch mehr Zeilen als die normalen zehn Zeilen ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  miss_case_summary() |&gt; \n  print(n = 12)\n\n\n# A tibble: 173 × 3\n    case n_miss pct_miss\n   &lt;int&gt;  &lt;int&gt;    &lt;dbl&gt;\n 1    66     11     47.8\n 2   158      9     39.1\n 3   173      9     39.1\n 4    79      8     34.8\n 5   170      8     34.8\n 6    31      7     30.4\n 7   154      7     30.4\n 8   155      7     30.4\n 9   160      7     30.4\n10   147      6     26.1\n11   151      6     26.1\n12   159      6     26.1\n# ℹ 161 more rows\n\n\nSchauen wir uns mal die Personen mit sieben oder mehr fehlenden Werten einmal an. Wir nutzen dazu die Funktion slice(), die es uns erlaubt die Zeilen zu extrahieren, welche für die Beobachtungen stehen.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  slice(c(66, 158, 173, 79, 170, 31, 154, 155, 160))\n\n\n# A tibble: 9 × 23\n  geschlecht alter       haben_Sie_tiger f1Soziodemografisch f2Soziodemografisch\n  &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;               &lt;chr&gt;              \n1 Weiblich   30-39 Jahre Ja              Haupterwerb         &lt;NA&gt;               \n2 Männlich   40-49 Jahre Nein            Nebenerwerb         &lt;NA&gt;               \n3 Männlich   Über 60 Ja… Nein            Haupterwerb         &lt;NA&gt;               \n4 Männlich   Über 60 Ja… Ja              Nebenerwerb         Forst              \n5 Männlich   40-49 Jahre Nein            Nebenerwerb         &lt;NA&gt;               \n6 Männlich   50-59 Jahre Ja              Nebenerwerb         &lt;NA&gt;               \n7 Männlich   Über 60 Ja… Nein            Nebenerwerb         &lt;NA&gt;               \n8 Männlich   40-49 Jahre Nein            Nebenerwerb         Pferde             \n9 Weiblich   40-49 Jahre Nein            Haupterwerb         Wald               \n# ℹ 18 more variables: f3Soziodemografisch &lt;chr&gt;, f1Verbandsarbeit &lt;chr&gt;,\n#   f2Verbandsarbeit &lt;chr&gt;, f3Verbandsarbeit &lt;chr&gt;, f4Verbandsarbeit &lt;chr&gt;,\n#   f5Verbandsarbeit &lt;chr&gt;, f1Fuetterung &lt;chr&gt;, f2Fuetterung &lt;chr&gt;,\n#   f3Fuetterung &lt;chr&gt;, f4Fuetterung &lt;chr&gt;, f1Imagearbeit &lt;chr&gt;,\n#   f2Imagearbeit &lt;chr&gt;, f3Imagearbeit &lt;chr&gt;, f4Imagearbeit &lt;chr&gt;,\n#   f5dauer_verletzung &lt;dbl&gt;, f6einkommen_jahr &lt;dbl&gt;, f7gruppengroesse &lt;dbl&gt;,\n#   f8eis_verkauf &lt;dbl&gt;\n\n\nWir sehen dann einmal die ganzen Personen, die sehr viele fehlenden Werte bei den Antworten haben. Ich möchte jetzt ungern noch mehr Beobachtungen rauschmeißen, die keine Tiger halten. Deshalb bleiben fliegen nur die drei Tigerhalter aus den Daten und der Rest bleibt drin. Das ist jetzt eine bewusste Entscheidung von mir, du musst dann schauen, wie du das in deinen Daten machst. Dann entferne ich einmal die drei Beobachtungen mit slice() aus meinen Daten.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl &lt;- tiger_tbl |&gt; \n  slice(-c(66, 79, 31))\n\n\nDann schauen wir zum Anschluss nochmal, ob wir auch das entfernt haben, was wir entfernen wollten. In der Abbildung 69.4 siehst du nochmal die Visualisierung der fehlenden Werte nachdem wir unsere drei Beobachtungen entfernt haben. Das sieht soweit super aus, denn wir haben jetzt schon ein etwas einheitlicheres Bild vorliegen.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  vis_miss() \n\n\n\n\n\n\n\n\nAbbildung 69.4— Darstellung der fehlenden Werte in dem Tigerdatensatz nachdem wir unsere drei Beobachtungen entfernt haben. Die fehlenden Werte werden als schwarzer Balken dargstellt. Der Block fehlender Werte bei der Fütterung stellt die Teilnehmer:innen dar, die keine Tiger halten. Horizontale Linien stellen Teilnehmer dar, die systematisch keine Fragen beantwortet haben.\n\n\n\n\n\n\n\n\n\n\n\nImputation von fehlenden Werten\n\n\n\nEine Möglichkeit mit fehlenden Werten umzugehen ist die Imputation von fehlende Werten, die ich in einem anderen Kapitel erläutere. Ich wäre aber mit dem Einsatz der Methoden sehr vorsichtig, da diese Methoden teilweise nicht in Veröffentlichungen anerkannt werden. Die Kritik lautet dabei, dass künstliche Daten erstellt werden, die nicht den realen Hintergrund abbilden. Daher ist die Verwendung von einem Imputationsalgorithmus immer gesondert zu diskutieren und zu bewerten.\n\n\n\n\n69.4.3 Korrelation\nWarum Korrelation der Fragen? Nun es kann sein, dass wir Fragen gebaut haben, die eventuell das Gleiche abfragen. Oder aber, dass die Teilnehmer:innen unseres Fragebogen eine Frage genau so beantworten wie eine andere Frage. Das lässt sich bei der Vielzahl an Fragen kaum überblicken. Deshalb schauen wir uns einmal die Korrelation zwischen den Fragen an um zu sehen, ob wir nicht Fragen haben, die das Gleiche aussagen.\nZuerst bauen wir uns einen Datensatz tiger_clean_num_tbl indem alle Spalten nur noch numerisch sind. Wir können die Korrelation nur mit numerischen Spalten rechnen. Wenn du noch Wörter als Antworten in den Spalten stehen hast, dann kannst du über as.factor() erstmal die Antworten in Faktoren umwandeln. Das habe ich hier schon gemacht und nutze daher den Datensatz tiger_fct_tbl. Am Ende setze ich dann noch die Bezeichnung der Fragen auf die Abkürzungen der Fragen, sonst klappt es nicht richtig mit der Darstellung. Dafür sind dann die ursprünglichen Spaltenbezeichungen zu lang.\n\n\nR Code [zeigen / verbergen]\ntiger_clean_num_tbl &lt;- tiger_fct_tbl |&gt; \n  mutate_all(as.numeric) |&gt;  \n  set_names(short_question_tbl$ques_id)\n\n\nWenn du dir nur die Korrelation zwischen den Spalten hier anschaust, dann nutze zuerst die Option use = \"pairwise.complete.obs\". Dann werden nur die Beobachtungen genutzt die in den jeweiligen Spalten, die verglichen werden, vorhanden sind. Ich nutze hier dann auch den Korrelationskoeffizienten nach Pearson. Da wir eigentlich keine normalverteilten Daten in den Antwortmöglichkeiten vorliegen haben, müsste ich eigentlich besser Spearman nutzen, aber Spearman neigt zu Fehlern, wenn die Daten nicht richtig passen. Da ich mir hier aber nur einen groben Überblick verschaffen möchte, kommt es auf Abweichungen in dem Korrelationskoeffizienten nicht an. Auch wenn mein Korrelationskoeffizienten verzerrt ist, wird ein hoher Korrelationskoeffizienten nach Pearson auf eine Korrelation hindeuten. Das ist ja auch nur mein Ziel hier, nämlich ähnliche Fragen zu erkennen. Den berechneten Korrelationskoeffizienten nehme ich dann aber nicht zu ernst. Am Ende nehme ich noch die Frage f2Soziodemografisch aus der Betrachtung, da hier zu viele fehlende Werte vorliegen.\n\n\nR Code [zeigen / verbergen]\ncor_mat &lt;- tiger_clean_num_tbl |&gt; \n  select(-matches(\"Soziodemografisch\")) |&gt; \n  cor(use = \"pairwise.complete.obs\")\n\n\nIch könnte mir jetzt die berechnete Korrelationsmatrix cor_mat einmal in R als Matrix anschauen. Schöner ist es in der Abbildung 69.5 als Korrelationsplot. Trotz der Verwendung des Korrelationskoeffizienten nach Person konnten wir nicht für alle paarweisen Vergleiche der Fragen eine Korrelation berechnen. Wenn es nicht möglich war, dann sehen wir ein Fragezeichen in der Abbildung. Wenn wir eine zeitlang auf die Abbildung schauen, sehen wir, dass wir eigentlich keinen große Korrelation zwischen den Fragen haben. Der größte Wert ist \\(-0.38\\) sowie \\(0.31\\) und damit noch sehr nah an der Null und keiner Korrelation. Ich bin somit mit der Korrelation zufrieden. Wir müssen keine Fragen zusammenfassen oder entfernen, weil die Korrelation zwischen den Fragen zu groß ist und damit die Fragen das Gleiche aussagen.\n\nR Code [zeigen / verbergen]\ncorrplot(cor_mat, method = 'number', \n         col = rev(wes_palette(\"Zissou1\", 8, type = \"continuous\")))\n\ncorrplot.mixed(cor_mat, lower = 'pie', upper = 'ellipse')\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Numerische Werte.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Tortendiagramm und Ellipse\n\n\n\n\n\n\n\nAbbildung 69.5— Visualisierung der Korrelationsmatrix nach Pearson für alle Fragen. Teilweise konnte der Korrelationskoeffizient nicht berechnet werden. Wir haben keine Korrelation zwischen den Fragen vorliegen. Teilweise ist es sher schwer was in den Zahlen zu erkennen, da helfen dann mal wirklich die Tortendiagramme und die Elipsen weiter um die entsprechenden Korrelationen zu finden.\n\n\n\n\n\n69.4.4 Zusammenfassen\nManchmal wollen wir dann doch Fragen zusammenfassen. Irgendwie stellen wir fest, nachdem wir die Antworten gesehen haben, dass wir dann doch irgendwie nicht so eine detaillierte Fragenaufteilung wollen. Dann können wir natürlich auch Fragen zusammenfassen. Eine goldene Regel gibt es dafür nicht, ich zeige aber mal die eine oder andere Möglichkeit. Es kann auch sein, dass wir festgestellt haben, dass einzelne Fragen sehr stark miteinander korrelieren und wir deshalb die Fragen zusammenfasen wollen anstatt eine der Fragen aus der Analyse zu nehmen. Neben dem Fragen zusammenfassen, können wir auch Antwortkategorien zusammenfassen. Wir wollen dann nicht die fünf Antwortmöglichkeiten sondern eben nur drei oder zwei. Dann können wir das auch machen, müssen es nur in unserem Report oder der Abschlussarbeit berichten.\n\n…von einzelnen Fragen\nIm Folgenden habe ich mich dazu entschieden, dass mich die Fütterung dann doch nicht so sehr im Detail interesiert. Ich möchte dann alle Fragen einmal zusammenfassen, die mit der Fütterung zu tun haben. Dafür nutze ich dann den folgenden Code. Die Idee ist sehr simple. Ich addiere die Spalten für Fütterung auf und erhalte die neue Spalte Feutterung. Dann kann ich entscheiden, wie ich mit der Spalte weiter umgehen will. Theoretisch können natürlich noch andere mathematischen Operatoren, wie Subtraktion einer Spalte von der anderen oder das Produkt genutzt werden. Da kommt es dann aber auf das konkrete Beispiel an. Der BMI ist sicherlich die bekanneste Zusammenfassung. Häufig kennen die Teilnehmer:innen ihre Größe und das Gewicht, aber selten den BMI oder wissen die entsprechende Formel.\n\n\nR Code [zeigen / verbergen]\nfeed_tbl &lt;- tiger_fct_tbl |&gt;\n  select(matches(\"Fuetterung\")) |&gt; \n  mutate(across(matches(\"Fuetterung\"), \\(x) as.numeric(x)-1)) |&gt; \n  mutate(Fuetterung = rowSums(across(matches(\"Fuetterung\"))))\n\n\nIn der Tabelle 69.4 siehst du dann einmal das Ergebnis unserer Summenbildung über die Spalten der Fütterung. Wir haben jetzt in der Spalte Fuetterung die Summen der Spalten enthalten. Je größer die Zahl, desto mehr wurde gefüttert. Wenn ich das mal so ganz allgemein formulieren will.\n\n\n\n\nTabelle 69.4— Tabelle der Zusammenfassung der Fragen zur Fütterung unserer Großkatzen als Summe in der Spalte Fuetterung. Ein hoher Wert bedeutet, dass eben viel gefüttert wurde.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFuetterung\nf1Fuetterung\nf2Fuetterung\nf3Fuetterung\nf4Fuetterung\n\n\n\n\n0\n0\n0\n0\n0\n\n\n3\n1\n0\n1\n1\n\n\n1\n1\n0\n0\n0\n\n\n2\n1\n0\n0\n1\n\n\n2\n1\n0\n0\n1\n\n\n1\n0\n0\n0\n1\n\n\n4\n1\n1\n1\n1\n\n\n\n\n\n\n\n\nWir nutzen jetzt einmal die Funktion tabyl() um uns die prozentuale Verteilung der neuen Einträge in der Spalte Futterung anzeigen zu lassen. Ich empfehle immer die Spalte valid_percent vorzuziehen, da wir in dieser Spalte nicht die fehlenden Werte mit reingerechnet haben.\n\n\nR Code [zeigen / verbergen]\nfeed_perc_obj &lt;- feed_tbl |&gt; \n  tabyl(Fuetterung) |&gt; \n  round(2)\n\n\nIn der Tabelle 69.5 sehen wir dann einmal die Übersicht unser Zusammenfassung. Spannenderweise füttern sechs Betriebe ihre Tiger gar nicht. Was ein spannendes Ergebnis ist. Oder aber sie füttern die Tiger nicht nach den entsprechenden Fragen. Das kann natürlich auch Auftreten. Wie wir jetzt die Zusammenfassung weiter interpretieren ist so ein Sache. Das Beispiel ist jetzt etwas konstruiert, aber wir wissen immerhin, dass die meisten Teilnehmer:innen zwei der Fütterungsfragen mit Ja beantwortet haben.\n\n\n\n\nTabelle 69.5— Zusammenfassung der Spalte Fuetterung nach den neuen Einträgen und den entsprechenden prozentualen Auftreten. Die vorzuziehende Spalte valid_percent beschreibt das prozentuale Auftreten ohne die fehlenden Werte in der Spalte.\n\n\n\n\n\n\nFuetterung\nn\npercent\nvalid_percent\n\n\n\n\n0\n6\n0.03\n0.04\n\n\n1\n38\n0.22\n0.26\n\n\n2\n50\n0.29\n0.34\n\n\n3\n39\n0.23\n0.27\n\n\n4\n12\n0.07\n0.08\n\n\nNA\n28\n0.16\nNA\n\n\n\n\n\n\n\n\n\n\n… von Antwortenmöglichkeiten\nManchmal ist es sinnvoll Antwortmöglichkeiten zusammenzulegen. In unserem Fragebogen haben wir zum Beispiel nur drei 18 bis 29 Jährige. Das ist echt wenig. Dann können wir diese drei Personen auch zu den 30 bis 39 Jährigen packen und eine neue Kategorie erschaffen. Dann fassen wir die beiden mittleren Kategorien auch noch zusammen, weil wir es können. Wir nutzen dazu die R Funktion case_when() mit der wir uns dann nach Regeln neue Werte erschaffen können. Hier einmal das Beispiel für das Alter. Ich behalte mir immer die alte Spalte mit in den Daten um im nachhinein nochmal zu schauen, ob auch alles richtig transformiert wurde.\n\n\nR Code [zeigen / verbergen]\nalter_combined_tbl &lt;- tiger_fct_tbl |&gt; \n  select(alter) |&gt; \n  mutate(alter_recode = case_when(alter %in% c(\"Über 60 Jahre\") ~ \"&gt;60 Jahre\",\n                                  alter %in% c(\"40-49 Jahre\", \"50-59 Jahre\") ~ \"40-59 Jahre\",\n                                  alter %in% c(\"18-29 Jahre\", \"30-39 Jahre\") ~ \"&lt;39 Jahre\")) |&gt; \n  mutate(alter_recode = ordered(alter_recode, levels = c(\"&lt;39 Jahre\", \"40-59 Jahre\", \"&gt;60 Jahre\")))\n\n\nDann wollen wir uns nochmal das Ergebnis als eine Tabelle anschauen um zu sehen, ob auch alles in der Transformation geklappt hat. Ziel soll es ja sein Kategorien zu finden, die dann auch wirklich Beobachtungen enthalten. Wenn wir uns also wieder halb leere Kategorien bauen, dann müssen wir nochmal ran.\n\n\nR Code [zeigen / verbergen]\nalter_combined_perc_obj &lt;- alter_combined_tbl |&gt; \n  tabyl(alter_recode) |&gt; \n  mutate_if(is.numeric, round, 2)\n\n\nIn der Tabelle 69.6 siehst du dann das Ergebnis der Zusammenfassung der Antwortkategorien zum Alter. Wir haben zwar in der kleinsten Kategorie immer nur noch 14% der Beobachtungen aber das sind jetzt immerhin 25 Personen und nicht mehr 3 Teilnehmer. Das macht dann schon einen Unterschied mit dem wir dann besser rechnen könnten.\n\n\n\n\nTabelle 69.6— Zusammenfassung der Kategorien der Spalte Alter nach neuen, selbstdefinierten Kriterien. Ziel war es wenig belegte Kategorien zusammenzufassen.\n\n\n\n\n\n\nalter_recode\nn\npercent\n\n\n\n\n&lt;39 Jahre\n25\n0.14\n\n\n40-59 Jahre\n91\n0.53\n\n\n&gt;60 Jahre\n57\n0.33\n\n\n\n\n\n\n\n\nAm Ende ist es natürlich wichtig, das du dann im Methodenteil deiner Arbeit oder Veröffentlichung genau beschreibst, wie du und warum du die Antwortmöglichkeiten zusammengefasst hast. Allgemein spricht nichts dagegen Antworten zusammenzufassen, es sollte nur nicht der Anschein erweckt werden, dass du dir dann am Ende die Ergebnisse zurechtbiegst.\n\n\n\n69.4.5 Flowchart\nDas Flussdiagramm (eng. flowchart) liefert nochmal eien schönen Überblick über das Preprocessing der Daten. Du kannst damit gut zeigen, wie sich die Anzahl der Teilnehmer:innen von der Rekrutierung hin zur eigentlichen Analyse entwickelt hat. Es gibt eine große Anzahl an möglichen Darstellungsformen, wie eine Google Suche nach consort flowchart zeigt. Deshalb gibt es auch nicht die Flowchart für eine Fragebogenanalyse. Lasse dich einfach inspirieren und baue deine Flowchart so, dass jeder einfach sehen kann, wie sich deine Anzahl der Teilnehmer:innen geändert hat. Es kann auch sein, das diene Flowchart nur aus drei Kacheln besteht. Das ist dann auch in Ordnung und trotzdem besser als ein Fließtext.\nIn der Abbildung 69.6 siehst du dann einmal eine beispielhafte Flowchart für unseren Fragebogen zu der Haltung von Großkatzen. Ich habe die Flowchart in PowerPoint gebaut und die PowerPoint Vorlage kannst du gerne selber verändern. Wie du dann so eine Flowchart aufbaust, hängt dann sehr von deinen Daten ab. In dem Kasten der entfernten Fragen, habe ich die gängigen Kriterien einmal aufgeführt. Du musst die nicht alle in der Form durchgehen. Es kann auch sein, dass du aus anderen Gründen Fragen entfernen möchtest, weil die Fragen zum Beispiel dann doch nicht mehr zur Forschunsgfrage passen. Ich habe dann noch unten die bivariaten Vergleiche für die beiden Fragen zur Haltung von Großkatzen und dem Erwerb zugefügt. Das kann man machen, muss man aber nicht. Je nachdem was du noch gemacht hast, kannst gerne noch weitere Kacheln hinzufügen oder aber Arme ergänzen.\n\n\n\n\n\n\nAbbildung 69.6— Beispielhafte Flowchart für unsere Tigerumfrage. Zu Beginn sind 843 Fragebögen gesendet worden von denen dann 173 als Rücklauf vorliegen. Wir haben dann dann noch die Fragen aufgereinigt und die Infromationen ebenfalls in die Flowchart geschriben. Abschließend haben wir noch für zwei Fragen eine bivariate Analyse für alle anderen Fragen durchgeführt.\n\n\n\n\n\n\n\n\n\nGeht das Ganze auch in R?\n\n\n\nNatürlich können wir auch eine Flowchart mit etwas Aufwand in R bauen. Hier gibt es einmal das Tutorium Building a flowchart sowie das R Paket {DiagrammeR} mit dem entsprechenden Tutorium Data-driven flowcharts in R using {DiagrammeR}. Eine Weitere Alternative ist das Tutorium Introducing {ggflowchart} wobei hier die Flowcharts eher sehr simple gehalten sind.\n\n\n\n\n69.4.6 Repräsentative:r Teilnehmer:innen\nWenn ich einen Fragebogen auswerte, dann lasse ich mir gerne eine Tabelle der repräsentativen Teilnehmer rausgeben. Nicht immer funktioniert es, denn wir brauchen natürlich auch einiges an Teilnehmern. Manchmal sind die Anzahlen auch zu gering, dass ich von einem repräsentativen Teilnehmer sprechen würde. Nichtsdestotrotz, ich schaue mir das gerne einmal an. Ich schaue mir dafür die demographischen Fragen einmal an und erstelle mir dann eine Tabelle mit den Eigenschaften der häufigsten Teilnehmern. In unserem Fall möchte ich wissen, ob es Überschneidungen im Geschlecht, dem Alter sowie den Erwerb und der betrieblichen Stellung gibt. Technisch klebe ich die vier Spalten einfach mit str_c() zu einem String zusammen und zähle dann wie oft so ein String dann vorkommt. Dafür nutze ich die Funktion tabyl(), die mir sehr angenehm die Anzahlen und Prozente wiedergibt. Die Funktion reframe() erlaubt es uns dann die Rückgabe von tabyl() in einen Datensatz.\n\n\nR Code [zeigen / verbergen]\nmost_common_participant_tbl &lt;- tiger_tbl |&gt; \n  select(geschlecht, alter, f1Soziodemografisch, f3Soziodemografisch) |&gt; \n  mutate(string = str_c(geschlecht, alter, f1Soziodemografisch, f3Soziodemografisch, sep = \" \")) |&gt; \n  na.omit() |&gt; \n  reframe(janitor::tabyl(string)) |&gt; \n  arrange(desc(n)) |&gt; \n  mutate(percent = percent(percent))\n\n\nIn der Tabelle 69.7 findest du die tabellarische Übersicht über die vier häufigsten Teilnehmer in unserem Fragebogen nach den oben ausgewählten vier demographischen Fragen. Du siehst hier sehr schön welches Problem unsere Teilnehmer haben. Gut 50% der häufigsten Teilnehmer sind männlich und Betriebsleiter. Wir haben nur eine kleine Variation im Erwerb und im Alter. Wobei der Großteil unser Teilnehmer eben dann auch schon alt ist.\n\n\n\n\nTabelle 69.7— Tabellarische Übersicht über die vier häufigsten Teilnehmer in unserem Fragebogen nach vier demographischen Fragen.\n\n\n\n\n\n\n\nAnzahl\n[%]\n\n\n\n\nMännlich 50-59 Jahre Haupterwerb Betriebsleiter\n27\n15.88%\n\n\nMännlich Über 60 Jahre Haupterwerb Betriebsleiter\n24\n14.12%\n\n\nMännlich 40-49 Jahre Haupterwerb Betriebsleiter\n21\n12.35%\n\n\nMännlich Über 60 Jahre Nebenerwerb Betriebsleiter\n19\n11.18%\n\n\n\n\n\n\n\n\nMusst du die Tabelle jetzt angeben? Vermutlich nicht. Aber wir wissen jetzt immerhin, wie sich unsere Population zusammensetzt. Das müssen wir natürlich beachten, wenn wir unsere Rückschlüsse aus dem Fragebogen ziehen. Das erlaubt uns dann auch eine sorgfältigere Diskussion unserer Ergebnisse.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#visualisierung",
    "href": "stat-modeling-survey.html#visualisierung",
    "title": "69  Fragebogenanalyse",
    "section": "69.5 Visualisierung",
    "text": "69.5 Visualisierung\nWie solltest du die Ergebnisse eines Fragebogens darstellen? Damit wir hier nicht immer wieder die Barplots oder Säulendiagramme aus dem Hut ziehen, zeige ich dir hier nochmal andere Möglichkeiten, die sehr ähnlich sind, aber doch anders. Prinzipiell ist es natürlich auch wieder nichts anderes als Säulendiagramme, aber dann doch in schöner. Wichtig ist nur, das du dir bewusst machst, welche Fragen du zusammen zeigen möchtest. Es macht meistens keinen Sinn alle Fragen in einer Abbildung darzustellen oder eben nur eine Frage zu visualisieren. Du willst ja meistens den Zusammenhang zwischen verschiedenen Fragen zeigen. Daher überlege dir, welche Fragen du zusammen in einem Block zeigen möchtest. Die Blöcke kannst du dann thematisch benennen und so dem Leser es einfacher machen deinen Gedankengang in der Auswertung zu folgen.\n\n\n\n\n\n\nAbbildung 69.7— “The reason to avoid pie charts” Quelle: wumo.com\n\n\n\nEine Sache möchte ich dann aber doch noch loswerden und zwar meine tiefe Abneigung gegenüber Tortendiagrammen (eng. pie charts). Gerne kannst du Tortendiagramme in deiner Arbeit verwenden, ich kann dir nur sagen warum ich sie nichts nutzen würde. Neben dem wunderbarer Cartoon von Wulff & Morgenthaler gibt es aber noch andere wissenschaftlichere Gründe, die gegen die Verwendung sprechen. Barnett und Oguoma schreiben in Here’s why you should (almost) never use a pie chart for your data folgendes Fazit dem ich mich anschließen möchte.\n\nWhenever we see pie charts, we think one of two things: their creators don’t know what they’re doing, or they know what they are doing and are deliberately trying to mislead. — Barnett, A. und Oguoma V. (2024)\n\nBesuche gerne die Quelle und schaue dir die Visualisierungen einmal an. Beide zeigen sehr schön in dem Beitrag warum Tortendiagramme sehr verzerrend wirken und häufig nicht das mitteilen was man möchte. Die Beispiel finde ich sehr überzeugend. Es gibt mit Siirtola (2019) auch eine wissenschaftliche Veröffentlichung The Cost of Pie Charts die als Fazit unter anderem folgendes Zitat hat.\n\nThe results show that the pie chart is slower and less accurate than the stacked bar chart, especially when the difference between the elements is small, but the participant find it slightly more pleasant to use. The participants also perceive the stacked bar chart as the most effective visualization. — Siirtola (2019)\n\nAlso klare Empfehlung für gestapelte Balkendiagramme für die Darstellung. Dann wollen wir uns verscheidende Pakete und deren Realisierung von der Darstellung von Likert Daten anschauen. Ich habe mir jetzt drei Pakete rausgesucht, die uns dabei behilflich sein können. Dann schauen wir uns im Folgenden einmal die Darstellung der Likert-Skala in drei R Paketen an.\n\nDem R Paket {likert}, dem auch irgendwie eine gute Tutoriumsseite des Paketes fehlt. Hier hilft dann das Tutorium Survey data I/O with {likert} weiter.\nDem R Paket {ggplot2}, als Selbstbausatz in unserem universalen Visualisierungspaket.\nDem R Paket {sjPlot} als eine weitere Möglichkeit Daten mit dem Fokus aus den Sozialwissenschaften darzustellen.\n\nWir immer kannst du schauen, ob du diese Pakete nutzt willst oder dann doch zu Excel umschwenkst. Prinzipiell lässt sich ja auch alles mit etwas mehr Arbeit in Excel nachbauen. Die Pakete erleichtern einem meiner Meinung nach nur die Darstellung.\n\n69.5.1 … mit {likert}\nIch zeige hier nur einen Ausschnitt mit einer einzigen Abbildung. Wenn du mehr zu dem R Paket {likert} erfahren möchtest, dann nutze das tolle Tutorium Survey data I/O with {likert}. Wenn ich hier das gesamte Tutorium nachkoche ist ja dann auch niemanden geholfen. Was ist also die Idee des R Paketes {likert}? Wir können mir der Funktion likert() Fragen in der selben Likertskala zusammen in einer Abbildung darstellen. Wichtig ist hier, dass das Paket schon etwas älter ist und nur ein Objekt als data.frame() und keine tibble() akzeptiert.\nIn der Abbildung 69.8 siehst du einmal die Darstellung der fünf Fragen zur Verbandsarbeit. Die Funktion likert() sortiert dabei auch nochmal sinnig deine Fragen von dem Anteil trifft zu und trifft voll zu zu den Anteilen von trifft gar nicht zu und trifft nicht zu. Diese Anteile siehst du dann auch nochmal an der rechten und linken Seite in absteigender und aufsteigender Reihenfolge abgebildet. Aus dem Grund kannst du auch nur Fragen mit den gleichen Antwortmöglichkeiten zusammenfassen. In der Mitte findest du dann die weder noch Angaben in Prozent. Eigentlich eine sehr schöne Form der Darstellung der Fragen. Ich musste noch die Legende etwas anpassen und die Beschreibung auf der \\(y\\)-Achse ausblenden.\nDie Darstellungsform, wie das R Paket {likert} die Daten darstellt ist nicht unumstritten, wie das Tutorium The case against diverging stacked bars einmal diskutiert. Dabei wird davon abgeraten die divergierenden, gestapelten Balkendiagramme für die Darstellung von Prozentsätzen zu verwenden. Gestapelte 100%-Balkendiagramme wie in der Abbildung 69.10 sind oft die bessere Option, vor allem, wenn es wichtig ist, den Anteil der äußersten Kategorien zu vergleichen. Daher bauen wir usn in {ggplot} nochmal die Darstellung anders nach.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl |&gt; \n  select(f1Verbandsarbeit:f5Verbandsarbeit) |&gt;\n  mutate_all(fct_rev) |&gt; \n  as.data.frame() |&gt; \n  likert() |&gt; \n  plot() +\n  ylab(\"\") +\n  guides(fill = guide_legend(\"\"))\n\n\n\n\n\n\n\n\nAbbildung 69.8— Darstellung der Antworten zu der Verbandsarbeit auf der Likertskala. Die Fragen sind nach dem Anteil trifft zu und trifft voll zu zu den Anteilen von trifft gar nicht zu und trifft nicht zu auf der rechten bzw. linken Seite der Balkendiagramme sortiert. Die mittlere graue Fläche stellt die weder noch Antworten dar.\n\n\n\n\n\nNeben den Balkendiagrammen können wir uns mit der Option type = \"heat\" in dem plot()-Aufruf auch eine Heatmap der Fragen darstellen lassen. Wir haben dann eine andere Sortierung wie bei den Balkendiagrammen aber die Prozente der Antworthäufigkeiten sind dann nochmal farblich hervorgehoben. Die Sortierung entspricht dann der Reihenfolge der Fragen. Ich finde diese Art der Abbildung nochmal sehr spannend, da wir hier nochmal sehen, wo wir am meisten Antworten haben. So geht in der obigen Abbildung manchmal unter, wie viel dann eine Antwortmöglichkeit pro Frage genannt wurde. Darüber hinaus haben wir dann in den grauen Kästen noch die Durchschnittsnote dargestellt zusammen mit der Streuung.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl |&gt; \n  select(f1Verbandsarbeit:f5Verbandsarbeit) |&gt;\n  mutate_all(fct_rev) |&gt; \n  as.data.frame() |&gt; \n  likert() |&gt;\n  plot(type = \"heat\") \n\n\n\n\n\n\n\n\nAbbildung 69.9— Heatmap der Häufigkeiten der Antworten pro Frage kombiniert mit der durchschnittlichen Note auf der Likertskala in den grauen Kästen.\n\n\n\n\n\n\n\n69.5.2 … mit {ggplot}\nManchmal müssen wir die Daten dann auch anders zusammenfassen oder aber keine standardisierten Antworten vorliegen. Dann hilf natürlich die ganze Abbildung einmal von Grund auf neu zu bauen. Dafür können wir dann {ggplot} nutzen. Im Folgenden wähle ich wieder die Fragen zur Verbandsarbeit und verwandle alle Fragen in eine numerische Variable. Dann baue ich mir für jede Frage eine zusammenfassende Tabelle über tabyl() und zwar über jede Frage mit der Funktion map(). Die Funktion bind_rows() liefert mir dann auch gleich einen Datensatz wieder. Am ende muss ich noch ein wenig an dem Datensatz rumarbeiten und fertig ist unser Objekt für den gestapelten Barplot.\n\n\nR Code [zeigen / verbergen]\ntiger_percent_tbl &lt;- tiger_ord_tbl |&gt; \n  select(f1Verbandsarbeit:f5Verbandsarbeit) |&gt;\n  mutate_all(as.numeric) |&gt; \n  map(tabyl) |&gt; \n  bind_rows(.id = \"id\") |&gt; \n  dplyr::rename(answer = \".x[[i]]\") |&gt; \n  mutate(answer = factor(answer, labels = zustimmung_ord))\n\n\nIn der Abbildung 69.10 siehst du einmal das Ergebnis der Generierung in ggplot(). Wir immer kann man an ganz vielen Schrauben drehen, so dass ich hier noch die Prozente als Prozente habe wiedergeben lassen und auch die Farben etwas angepasst habe. Du kannst im Prinzip ja die Optionen rein und rausnehmen. Dann kannst du schauen, was passiert. Mit hat es natürlich Spaß gemacht die Abbildung nachzubauen, aber das R Paket {likert} liefert hier schneller was ich brauche. Ich habe hier natürlich nichts sortiert und damit bist du dann näher an den originalen Fragen dran. Beides hat dann natürlich Vor- und Nachteile. Dann hatte ich noch Probleme, dass die Prozente natürlich irgendwann in den Flächen verschwinden oder nicht mehr passen, wenn die Belegung zu klein ist. Dabei hilft dann das nächste Paket {sjPlot} aus.\n\n\nR Code [zeigen / verbergen]\ntiger_percent_tbl |&gt; \n  ggplot(aes(x = fct_rev(id), y = valid_percent, fill = answer)) +\n  theme_minimal() +\n  geom_bar(position = \"fill\", stat = \"identity\", color = \"black\", width=0.7) +\n  scale_y_continuous(labels = scales::percent) +\n  geom_text(aes(label = scales::percent(valid_percent)), \n            position = position_stack(vjust = 0.5), size = 2) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = wes_palette(\"Zissou1\", 8, type = \"continuous\")) +\n  labs(x = \"\" , y = \"\") +\n  coord_flip()\n\n\n\n\n\n\n\n\nAbbildung 69.10— Gestapelte Balkendiagramme für die Fragen zur Vereinsarbeit. Die Fragen sind unsortiert nach der Reihenfolge des Auftretens. Teilweise sind die Flächen zu klein für die Darstellung der Prozente.\n\n\n\n\n\n\n\n69.5.3 … mit {sjPlot}\nWir hatten ja eben das Problem, dass die Prozente nicht so richtig in die Kacheln passen plus wir hatten in {ggplot} ja auch nicht die Aufteilung wie in dem R Paket {likert}. Hier gibt es dann das R Paket {sjPlot} mit der Funktion plot_likert(). Das Paket wurde direkt für die Sozialwissenschaften gebaut und hat auch noch andere Funktionen, die eventuell von Interesse sind. Schau da doch einfach mal in die Referenz des Pakets. Wir konzentrieren uns also hier nur auf die eine Funktion. Wichtig ist hier, dass wir eigentlich nur gerade Anzahlen von Likertskalen darstellen können. Wenn wir eine ungerade Anzahl haben, dann müssen wir numerisch über die Option cat.neutral mitteilen, welche Position unsere neutrale Kategorie hat. In unserem Fall haben wir fünf Skalenstufen und deshalb ist unsere neutrale Stufe die dritte Stufe. Wir haben hier wiederum keine interne Sortierung der Fragen. Im Prinzip können wir hier die Zustimmung mit der Ablehnung direkt visuell vergleichen.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl |&gt; \n  select(f1Verbandsarbeit:f5Verbandsarbeit) |&gt; \n  plot_likert(cat.neutral = 3) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nAbbildung 69.11— Drastellung der Likertskala der Antworten zur Verbandsarbeit. Wir haben hier wiederum keine Sortierung in den Fragen. Die Antworten werden nach den positiven und negativen Antwortkategorien sortiert. Die neutrale Kategorie wird links an der Seite dargestellt.\n\n\n\n\n\nUnd weil es so schön ist, dass ganze dann in der Abbildung 69.12 nochmal für die Verbandskommunikation. Hier sieht man dann nochmal den Nachteil der neutralen Kategorie. Teilweise haben wir dann bis zur Hälfte der Teilnehmer:innen keine Angabe gemacht. Dann ist es immer schwierig daraus eine Schlussfolgerung zu ziehen. Ich würde dahwer eher auf neutrale Kategorien verzichten.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl |&gt; \n  select(f1Imagearbeit:f4Imagearbeit) |&gt; \n  plot_likert(cat.neutral = 3) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nAbbildung 69.12— Darstellung der Likertskala der Antworten zur Verbandkommunikation. Wir haben hier wiederum keine Sortierung in den Fragen. Die Antworten werden nach den positiven und negativen Antwortkategorien sortiert. Die neutrale Kategorie wird links an der Seite dargestellt.\n\n\n\n\n\nNeben dem R Paket {sjPlot} gibt es auch die Möglichkeit das R Paket {HH} aus dem Buch Heiberger et al. (2015) zu nutzen. Das Tutorium Plot likert scale data stellt beide R Pakete {sjPlot} sowie {HH} einmal vor. Ich konzentriere mich hier auf das R Paket {sjPlot} mit der Funktion plot_likert(), da mir die Funktion irgendwie leichter von der Hand ging. Auf der anderen Seite reichen dann auch irgendwie drei Implementierungen der gleichen Darstellungsform irgendwie.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#bivariate-analysen",
    "href": "stat-modeling-survey.html#bivariate-analysen",
    "title": "69  Fragebogenanalyse",
    "section": "69.6 Bivariate Analysen",
    "text": "69.6 Bivariate Analysen\nWas sind bivariate Analysen? Eigentlich nichts anderes als Gruppenvergleich zwischen den kategoriellen Fragen oder aber eine Regression zwischen den kontinuierlichen Fragen. Also wir vergleichen zwei Fragen miteinander und wollen wissen, ob es in dem Antwortmuster der einen Fragen einen Unterschied gegeben der anderen Frage gibt. Eigentlich wiederholen wir hier sehr schnell, den \\(\\mathcal{X}^2\\)-Test für zwei kategorielle Variable, den t-Test oder den Wilcoxon-Test für einen Vergleich einer kontinuierlichen Variable nach zwei Gruppen oder aber der linearen Regression, wenn wir zwei kontinuierliche Variablen in Verbindung setzen wollen. Der Wahnsinn einer Fragebogenanalyse ist eigentlich, dass wir natürlich das für jede Fragenkombination machen können und uns dann vor lauert Testen gar nicht mehr wiederfinden. Deshalb kann ich nur Raten sich zu überlegen, was war nochmal meine Fragestellung und welche Fragen will ich jetzt im Bezug zu einer anderen Frage analysieren. Ich werde deshalb auch gar nicht mit der Problematik der Adjustierung für multiple Vergleiche beginnen, aber nur soviel, wenn du nur lange genug testest, wirst du auf jeden Fall was signifikantes finden, auch wenn in Wahrheit gar kein Unterschied zwischen den Fragen vorliegt. Siehe hierzu dann auch die tolle Arbeit von Austin et al. (2006) mit dem Titel Testing multiple statistical hypotheses resulted in spurious associations: a study of astrological signs and health. Leider ist das PDF nicht mehr frei verfügbar, aber der Abstrakt sagt schon alles aus.\n\n69.6.1 Kategorial vs. kategoriale Frage\nWas machen wir, wenn wir zwei Fragen mit Antwortmöglichkeiten mit Likertskalen miteinander verglichen wollen? Wir rechnen einen \\(\\mathcal{X}^2\\)-Test auf verschieden großen Kreuztabellen (eng. cross table). In R ist die einfachste Funktion sich eine Kreuztabelle zu erstellen die Funktion xtabs(). Du erhälst dann für die beiden Fragen die kreuzweisen Häufigkeiten wiedergeben. Wir machen das jetzt einmal für die beiden Spalten haben_Sie_tiger und dem Erwerb in der Spalte f1Soziodemografisch. Damit erhalten wir dann eine klassische 2x2 Kreuztabelle wieder.\n\n\nR Code [zeigen / verbergen]\ncross_tab &lt;- xtabs(~ haben_Sie_tiger + f1Soziodemografisch, data = tiger_ord_tbl)\ncross_tab\n\n\n               f1Soziodemografisch\nhaben_Sie_tiger Haupterwerb Nebenerwerb\n           Ja            96          50\n           Nein          18           9\n\n\nMit einem schnellen Blick sehen wir eine recht gleichmäßige Verteilung der Antworten in der 2x2 Kreuztabelle. Wenn wir wirklich einen Unterschied hätten, dann wären die größeren Anzahlen dann auf einer der Diagonalen und nicht gleichmäßig verteilt. Wir können uns dass dann nochmal als relative Häufigkeiten in der Funktion prop.table() anschauen.\n\n\nR Code [zeigen / verbergen]\nprop.table(cross_tab) |&gt; \n  round(2)\n\n\n               f1Soziodemografisch\nhaben_Sie_tiger Haupterwerb Nebenerwerb\n           Ja          0.55        0.29\n           Nein        0.10        0.05\n\n\nUnd dann kommen wir auch schon zu dem Test mit der Funktion assocstats() aus dem R Paket vcd(). Die drei Koeffizienten am Ende des Ausdrucks sagen alle im Prinzip aus, wie stark die Assoziation zwischen den beiden Fragen ist. Wenn die Zahlen nahe Eins sind, dann haben die Fragen im Antwortmuster viel miteinander zu tun, wenn wir Zahlen nahe Null beobachten, dann haben wir eigentlich keinen Zusammenhang. Das deckt sich dann auch in unserem Beispiel mit dem \\(p\\)-Wert aus dem \\(\\mathcal{X}^2\\)-Test nach Pearson.\n\n\nR Code [zeigen / verbergen]\nvcd::assocstats(cross_tab)\n\n\n                       X^2 df P(&gt; X^2)\nLikelihood Ratio 0.0084818  1  0.92662\nPearson          0.0084562  1  0.92673\n\nPhi-Coefficient   : 0.007 \nContingency Coeff.: 0.007 \nCramer's V        : 0.007 \n\n\nJetzt müsstest du jede Frage für die Frage f1Soziodemografisch testen indem du dann immer wieder neu eine Kreuztablle baust. Das ist natürlich sehr aufwendig. Am Ende zeige ich dir dann nochmal wie es mit dem R Paket {gtsummary} sehr viel schneller geht.\n\n\n69.6.2 Kontinuierlich vs. kategoriale Frage\nWenn du eine kontinuierliche Antwort wie zum Beispiel auf die Frage nach der durchschnittlichen Dauer bis eine schwere Verletzung im Erlebnishof stattfindet mit einer kategoriellen Frage nach der Haltung von Tigern vergleichen willst, dann kannst du entweder den t-Test oder aber den Wilcoxon-Test nutzen. Den t-Test nutzt du, wenn du annimmst das deine kontinuierliche Variable einigermaßen normalverteilt ist. Wenn das nicht der Fall ist, dann nutzt du den Wilcoxon-Test. Das ist hier natürlich stark verkürzt, aber für hier reicht es allemal. In der Abbildung 69.13 siehst du dann einmal die beiden Boxplots für die beiden Gruppen der Tigerhaltung (ja/nein) und dann der Dauer bis zu einer Verletzung. Ich würde mal sagen, dass unsere Verteilungen eher schief sind und nicht sehr normalverteilt Aussehen. Wir haben einige Ausreißer in den Daten und deshalb würde ich hier eher zu dem Wilcoxon-Test raten.\n\n\nR Code [zeigen / verbergen]\nggplot(tiger_ord_tbl, aes(haben_Sie_tiger, f5dauer_verletzung, \n                          fill = haben_Sie_tiger)) +\n  theme_minimal() +\n  geom_boxplot(show.legend = FALSE) +\n  scale_fill_okabeito() \n\n\n\n\n\n\n\n\nAbbildung 69.13— Boxplot der durschnittlichen Dauer bis zu einer schweren Verletzung eines Besuches auf einem Erlebnishof aufgeteilt nach der Haltung von Großkatzen oder eben Tigern.\n\n\n\n\n\nIch rechne dir dann aber in den beiden Tabs dann doch nochmal beide Tests durch. Dann kannst du bei dir in deinen Daten entscheiden welchen Test du nutzen willst. Wenn du später das R Paket {gtsummary} nutzt, dann wird meistens der Wilcoxon-Test für den Vergleich genutzt. Du kannst es aber auch umstellen auf den t-Test, ich belasse es aber meistens bei dem Wilcoxon-Test. Über alle Fragen anzunehmen, dass wir eine Normalverteilung vorliegen haben, ist dann doch eher unwahrscheinlich.\n\nDer t-TestDer Wilcoxon-Test\n\n\nIm Folgenden dann einmal der Code für den einfachen t-Test. Wir sehen dann auch, dass wir keinen signifikanten Unterschied nachweisen können, da unser p-Wert über dem Signifikanzniveau mit \\(\\alpha\\) gleich 5% liegt. Da ich hier nicht mit der Annahme der Normalverteilung an die Daten leben kann, ist das hier nur eine Demonstration.\n\n\nR Code [zeigen / verbergen]\nt.test(f5dauer_verletzung ~ haben_Sie_tiger, tiger_ord_tbl) \n\n\n\n    Welch Two Sample t-test\n\ndata:  f5dauer_verletzung by haben_Sie_tiger\nt = -1.2491, df = 33.501, p-value = 0.2203\nalternative hypothesis: true difference in means between group Ja and group Nein is not equal to 0\n95 percent confidence interval:\n -66.50115  15.88928\nsample estimates:\n  mean in group Ja mean in group Nein \n           92.0274           117.3333 \n\n\n\n\nDann einmal der Code für den Wilcoxon-Test. Wir sehen dann auch hier, dass wir keinen signifikanten Unterschied nachweisen können, da unser p-Wert über dem Signifikanzniveau mit \\(\\alpha\\) gleich 5% liegt. Der t-Test ist etwas verzerrt, da wir vermutlich keine Normalverteilung in den Daten haben. Der p-Wert beim Wilcoxon-Test ist daher erwartungsgemäß niedriger.\n\n\nR Code [zeigen / verbergen]\nwilcox.test(f5dauer_verletzung ~ haben_Sie_tiger, tiger_ord_tbl, \n            conf.int = TRUE)\n\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  f5dauer_verletzung by haben_Sie_tiger\nW = 1528.5, p-value = 0.06447\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n -47.000039   1.999984\nsample estimates:\ndifference in location \n             -23.00003 \n\n\n\n\n\n\n\n69.6.3 Kontinuierlich vs. Kontinuierlich Frage\nAm Ende dann noch den Fall, dass du dir zwei kontinuierliche Fragen anschauen möchtest und wissen willst, ob diese Fragen etwas miteinander zu tun haben. Prinzipiell ist es dann eine simple lineare Regression oder aber nicht lineare Regression je nachdem, ob du an einen linearen Zusammenhang glaubst oder nicht. Wir haben uns ja in dem Abschnitt weiter oben schon die Korrelation angeschaut, wenn du von einem linearen Zusammenhang ausgehst, dann dann kannst du natürlich auch die Korrelation zwischen den kontinuierliche Fragen berechnen.\nDas R Paket {correlation} erlaubt es uns dabei auch relativ flott und einfach die Korrelation zu berechnen. Es gibt eine Menge an Korrelationskoeffizienten, die das Paket berechnen kann. Wir bleiben hier dann bei den Klassiker nach Spearman, wenn keine Normalverteilung vorliegt. In dem folgenden Tabs habe ich dir dann einmal berechnet, wie die Korrelation über alle Fragebögen aussieht und dann einmal getrennt nach der Haltung von Tigern. Ich verzichte hier auch auf eine Adjustierung für multiple Vergleiche. Ich schmeiße dann noch die Teststatistik S raus, dann ist es kompakter. Auch können wir mit dem Paket sehr einfach gute Abbildungen für die Korrelation erstellen, aber das wird dann hier einfach zu viel. Schaue dazu dann einfach in das Kapitel zu Korrelation.\n\nÜber alle FragebögenGruppiert nach Tigerhaltung\n\n\nWenn wir über alle kontinuierlichen Fragen hinweg die Korrelation rechnen wollen, dann können wir die Funktion correlation() aus dem gleichnamigen R Paket nutzen. Ich nutze hier die Methode nach Spearman, aber es gibt eine gewaltige Menge an möglichen Typen von Methoden um die Korrelation zu berechnen. Wir kriegen auch gleich einen Test für die Signifikanz mitgeliefert.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  select(f5dauer_verletzung, f6einkommen_jahr, f7gruppengroesse, f8eis_verkauf) |&gt; \n  correlation(method = \"spearman\", p_adjust = \"none\") |&gt; \n  select(-S)\n\n\nParameter1         |       Parameter2 |   rho |        95% CI |      p\n----------------------------------------------------------------------\nf5dauer_verletzung | f6einkommen_jahr |  0.07 | [-0.09, 0.22] | 0.392 \nf5dauer_verletzung | f7gruppengroesse | -0.11 | [-0.26, 0.05] | 0.173 \nf5dauer_verletzung |    f8eis_verkauf | -0.11 | [-0.26, 0.04] | 0.137 \nf6einkommen_jahr   | f7gruppengroesse | -0.07 | [-0.22, 0.09] | 0.397 \nf6einkommen_jahr   |    f8eis_verkauf |  0.11 | [-0.04, 0.26] | 0.139 \nf7gruppengroesse   |    f8eis_verkauf |  0.16 | [ 0.00, 0.31] | 0.038*\n\nObservations: 170\n\n\n\n\nHäufig wollen wir uns dann die Korrelation von kontinuierlichen Fragen auch noch aufgeteilt nach einer anderen kategoriellen Frage anschauen. In dem Fall nutzen wir einfach die Funktion group_by() um unseren Datensatz einmal nach einer anderen Frage zu gruppieren. Dann berechnen wir wieder die paarweise Korrelation. Auch hier erhalten wir gleich die Signifikanz mitgeliefert.\n\n\nR Code [zeigen / verbergen]\ntiger_tbl |&gt; \n  select(haben_Sie_tiger, f5dauer_verletzung, f6einkommen_jahr, f7gruppengroesse, f8eis_verkauf) |&gt; \n  group_by(haben_Sie_tiger) |&gt; \n  correlation(method = \"spearman\", p_adjust = \"none\") |&gt; \n  select(-S)\n\n\nGroup |         Parameter1 |       Parameter2 |   rho |         95% CI |      p\n-------------------------------------------------------------------------------\nJa    | f5dauer_verletzung | f6einkommen_jahr |  0.09 | [-0.08,  0.26] | 0.284 \nJa    | f5dauer_verletzung | f7gruppengroesse | -0.07 | [-0.23,  0.10] | 0.434 \nJa    | f5dauer_verletzung |    f8eis_verkauf | -0.08 | [-0.25,  0.09] | 0.337 \nJa    |   f6einkommen_jahr | f7gruppengroesse | -0.08 | [-0.25,  0.09] | 0.328 \nJa    |   f6einkommen_jahr |    f8eis_verkauf |  0.03 | [-0.14,  0.20] | 0.712 \nJa    |   f7gruppengroesse |    f8eis_verkauf |  0.15 | [-0.02,  0.31] | 0.081 \nNein  | f5dauer_verletzung | f6einkommen_jahr |  0.13 | [-0.28,  0.49] | 0.533 \nNein  | f5dauer_verletzung | f7gruppengroesse | -0.42 | [-0.70, -0.04] | 0.028*\nNein  | f5dauer_verletzung |    f8eis_verkauf | -0.04 | [-0.42,  0.36] | 0.841 \nNein  |   f6einkommen_jahr | f7gruppengroesse | -0.11 | [-0.48,  0.29] | 0.588 \nNein  |   f6einkommen_jahr |    f8eis_verkauf |  0.24 | [-0.17,  0.57] | 0.234 \nNein  |   f7gruppengroesse |    f8eis_verkauf |  0.06 | [-0.34,  0.44] | 0.754 \n\nObservations: 27-143\n\n\n\n\n\nIch zeige dir hier einmal den Fall für die lineare Regression und die nicht linearen Regression mit einem Polynom. Den Rest müsstest du dann dir nochmal in den entsprechenden Kapiteln anschauen, wenn du hier tiefer einstiegen willst. Meistens ist das nicht nötig und frage dich immer, brauche ich diese Analyse von zwei kontinuierlichen Fragen wirklich oder bin ich hier gerade in einem Kaninchenbau, weil es geht?\n\nLineare RegressionNicht lineare Regression\n\n\nDie lineare Regression ist sehr schnell für zwei Variablen gerechnet. Wir wollen hier einmal sehen, in wie weit ein Zusammenhang zwischen dem Eisverkauf und der Gruppengröße vorliegt. Ich lege hier einmal den Eisverkauf auf die \\(y\\)-Achse und den die Gruppengröße auf die \\(x\\)-Achse. Wenn also die Gruppengröße ansteigt, wie verändert sich dann der Eisverkauf auf dem Hof. Aus der Korrelationsanalyse wissen wir ja schon, dass es hier einen Effekt gibt. Und wir sehen tatsächlich einen kanpp signifikanten Zusammenhang.\n\n\nR Code [zeigen / verbergen]\nlm(f8eis_verkauf ~ f7gruppengroesse, tiger_tbl) |&gt; \n  model_parameters()\n\n\nParameter        | Coefficient |   SE |         95% CI | t(168) |      p\n------------------------------------------------------------------------\n(Intercept)      |       19.55 | 1.24 | [17.09, 22.00] |  15.72 | &lt; .001\nf7gruppengroesse |        0.28 | 0.14 | [ 0.00,  0.55] |   1.98 | 0.049 \n\n\nSchauen wir uns den Zusammenhang nochmal in der Abbildung 69.14 einmal an. Auch hier wäre ich dann eher vorsichtig. Der Anstieg ist eher schwach und durch ein paar Punkte an der rechten Seite getrieben. Wir könnten zwar sagen, dass wir mit jedem Besucher pro Gruppe mehr Eis verkaufen, aber das ist eher von schwacher Validität. Ich wäre hier also vorsichtig von einem echten Zusammenhang zu sprechen.\n\n\nR Code [zeigen / verbergen]\nggplot(tiger_tbl, aes(f7gruppengroesse, f8eis_verkauf)) +\n  theme_minimal() +\n  geom_smooth(method = \"lm\", color = \"#CC79A7\", se = FALSE) +\n  geom_point() \n\n\n\n\n\n\n\n\nAbbildung 69.14— Scatterplot des Eisverkaufs abhängig von der Gruppengröße der Besucher auf einem Erlebnishof. Eine Gerade aus einer linearen Regression wurde ergänzt.\n\n\n\n\n\n\n\nWir können auch eine nicht lineare Regression einmal ausprobieren. Hier hilft dann auch wieder das richtige Kapitel zur nicht linearen Regression weiter. Hier rechne ich dann eine Multivariate Fractional Polynomials (abk. mfp) Regression. Details sind hier nicht so wichtig, die Idee ist jedoch simple. Anstatt selber zu überlegen, wie die nicht lineare Formel für unsere Regression wäre, lassen wir das den Algorithmus mfp() machen.\n\n\nR Code [zeigen / verbergen]\nmfp_fit &lt;- mfp(f8eis_verkauf ~ fp(f7gruppengroesse), tiger_tbl)\n\n\nWir brauchen zum einen das Polynom, hier haben wir gar keins, denn die Funktion mfp() sagt, dass der lineare Zusammenhang am besten wäre.\n\n\nR Code [zeigen / verbergen]\nmfp_fit$formula\n\n\nf8eis_verkauf ~ I((f7gruppengroesse/10)^1)\n&lt;environment: 0x14c5c13a8&gt;\n\n\nGut, dann eben noch die Koeffizienten für unsere Geradengleichung.\n\n\nR Code [zeigen / verbergen]\nmfp_fit$coefficients\n\n\n         Intercept f7gruppengroesse.1 \n         19.545233           2.761718 \n\n\nUnd dann können wir auch schon alles zusammenbauen. Wenn du dir jetzt die Funktion eine Minute länger ansiehst, dann kommt im Prinzip das gleiche wie bei der linearen Regression raus. Wir können die Gleichung auch auflösen, da unser Polynom ja nur 1. Grades ist.\n\\[\nweight \\sim 19.55 + 2.76 \\cdot \\left(\\cfrac{f7gruppengroesse}{10}\\right)^{1}\n\\]\nWir bauen uns dann noch die Geradengleichung diesmal händisch über eine selber erstellte Funktion mit \\(x) nach. Es gibt wie immer verschiedene Möglichkeiten, diese hier ist dann die etwas einfachere.\n\n\nR Code [zeigen / verbergen]\nf7gruppengroesse_func &lt;- \\(x) {19.55 + 2.76 * (x/10)^1}\n\n\nDann können wir uns auch schon den Zusammenhang nochmal in der Abbildung 69.15 anschauen. Es ist der gleiche Zusammenhang wie dann schon in der linearen Regression. Die Funktion mfp() hat kein besseres Polynom gefunden.\n\n\nR Code [zeigen / verbergen]\nggplot(tiger_tbl, aes(f7gruppengroesse, f8eis_verkauf)) +\n  theme_minimal() +\n  geom_function(fun = f7gruppengroesse_func, color = \"#CC79A7\") +\n  geom_point() \n\n\n\n\n\n\n\n\nAbbildung 69.15— Scatterplot des Eisverkaufs abhängig von der Gruppengröße der Besucher auf einem Erlebnishof. Eine Gerade aus einer nicht linearen Regression wurde ergänzt.\n\n\n\n\n\n\n\n\n\n\n69.6.4 Mit tbl_summary()\nWenn du einmal schnell über alle Fragen aus deinem Fragebogen wissen willst, ob es einen Zusammenhang zu einer anderen kategoriellen Frage gibt, dann nutze das R Paket {gtsummary}. Das Paket hat über die Funktion tbl_summary() die Möglichkeit die Ausgabe für eine andere kategorielle Frage aufzuspalten und zu testen. Damit haben wir dann gleich sehr viel weniger Arbeit. Wir machen das jetzt einmal exemplarisch für die Frage Halten Sie aktuell Tiger oder andere Großkatzen auf Ihrem Erlebnishof?.\n\n\nR Code [zeigen / verbergen]\ntiger_ord_tbl |&gt; \n  set_names(short_question_tbl$question) |&gt;\n  tbl_summary(by = \"Halten Sie aktuell Tiger oder andere Großkatzen auf Ihrem Erlebnishof?\") |&gt; \n  add_p()\n\n\nIch habe dir wie immer die Ausgabe einmal zusammengeklappt, damit hier nicht die gesamte Tabelle alles überlappt. Wir sehen, dass wir einige Unterschiede zwischen den Höfen mit und ohne Großkatzen über alle Fragen in den Antwortmustern finden. Beachte immer, dass die Prozente bei den kategoriellen Fragen getestet werden und nicht die absoluten Anzahlen direkt. Auch gibt es keine Richtung des Effekts. Du musst dann selber schauen wo in den Antworten der Unterschied zu finden ist. Kontinuierliche Antworten werden dann entsprechend auch über einen t-Test oder einer ANOVA getestet. Teilweise dann auch über einen Wilcoxon-Test, wenn die Normalverteilung nicht gegeben ist. Daher macht es einem diese Funktion schon sehr einfach die Fragen flott auszuwerten.\n\n\n\n\n\n\nBivariate Analyse mit der Funktion tbl_summary() für die Tigerhaltung\n\n\n\n\n\n\n\n\n\nTabelle 69.8— Bivariate Analyse der einzelenen Fragen und deren Antwortverteilung aufgeteilt nach der Frage zur der Haltung von Tigern. Anhand der Tabelle können fehlende Werte und ungleichmäßig beantwortete Fragen erkannt und dann ausgeschlossen werden.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nJa, N = 1461\nNein, N = 271\np-value2\n\n\n\n\nWelches Geschlecht haben Sie?\n\n\n\n\n0.040\n\n\n    Männlich\n134 (92%)\n21 (78%)\n\n\n\n\n    Weiblich\n12 (8.2%)\n6 (22%)\n\n\n\n\nWie alt sind Sie?\n\n\n\n\n0.2\n\n\n    18-29 Jahre\n3 (2.1%)\n0 (0%)\n\n\n\n\n    30-39 Jahre\n22 (15%)\n0 (0%)\n\n\n\n\n    40-49 Jahre\n34 (23%)\n8 (30%)\n\n\n\n\n    50-59 Jahre\n41 (28%)\n8 (30%)\n\n\n\n\n    Über 60 Jahre\n46 (32%)\n11 (41%)\n\n\n\n\nIst Ihr Erlebnishof Haupterwerb oder Nebenerwerb?\n\n\n\n\n&gt;0.9\n\n\n    Haupterwerb\n96 (66%)\n18 (67%)\n\n\n\n\n    Nebenerwerb\n50 (34%)\n9 (33%)\n\n\n\n\nHaben Sie weitere Erwerbsquellen neben dem Erlebnishof außer Landwirtschaft?\n\n\n\n\n0.8\n\n\n    Blumenanbau\n1 (3.6%)\n1 (17%)\n\n\n\n\n    Direktvermarktung\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Ferienhof\n1 (3.6%)\n1 (17%)\n\n\n\n\n    forst\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Forst\n3 (11%)\n0 (0%)\n\n\n\n\n    Forst, LN verpachtet\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Forstwirtschaft\n5 (18%)\n0 (0%)\n\n\n\n\n    Forstwirtschaft + Verpachtung\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Grünland 1,5 ha und 3 ha Wald\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Hofladen\n1 (3.6%)\n1 (17%)\n\n\n\n\n    Holzwirtschaft\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Kartoffeln\n2 (7.1%)\n0 (0%)\n\n\n\n\n    Pferde\n1 (3.6%)\n1 (17%)\n\n\n\n\n    Pferdehaltung\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Schafhaltung\n2 (7.1%)\n0 (0%)\n\n\n\n\n    Strohhandel\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Vermietung und Verpachtung\n1 (3.6%)\n0 (0%)\n\n\n\n\n    Wald\n2 (7.1%)\n1 (17%)\n\n\n\n\n    Weihnachtsbäume\n1 (3.6%)\n1 (17%)\n\n\n\n\n    Unknown\n118\n21\n\n\n\n\nWelche Stellung haben Sie auf dem Erlebnishof inne?\n\n\n\n\n0.025\n\n\n    Angestellter\n1 (0.7%)\n0 (0%)\n\n\n\n\n    Betriebsleiter\n123 (84%)\n18 (67%)\n\n\n\n\n    Hofnachfolger\n11 (7.5%)\n3 (11%)\n\n\n\n\n    König\n5 (3.4%)\n0 (0%)\n\n\n\n\n    Leitung Feldwirtschaft\n2 (1.4%)\n2 (7.4%)\n\n\n\n\n    Leitung Tierproduktion\n1 (0.7%)\n2 (7.4%)\n\n\n\n\n    Sonstiges\n3 (2.1%)\n2 (7.4%)\n\n\n\n\nSoll die Verbandsarbeit in den nächsten Jahren digital in den sozialen Netzwerken ausgeweitet werden?\n\n\n\n\n0.4\n\n\n    trifft voll zu\n7 (4.9%)\n1 (3.7%)\n\n\n\n\n    trifft zu\n31 (22%)\n5 (19%)\n\n\n\n\n    weder noch\n39 (27%)\n6 (22%)\n\n\n\n\n    trifft nicht zu\n37 (26%)\n12 (44%)\n\n\n\n\n    trifft gar nicht zu\n29 (20%)\n3 (11%)\n\n\n\n\n    Unknown\n3\n0\n\n\n\n\nLesen Sie quartalsweise den Newsletter auf der Verbandshomepage?\n\n\n\n\n&gt;0.9\n\n\n    trifft voll zu\n16 (11%)\n3 (11%)\n\n\n\n\n    trifft zu\n42 (29%)\n8 (30%)\n\n\n\n\n    weder noch\n38 (27%)\n8 (30%)\n\n\n\n\n    trifft nicht zu\n28 (20%)\n4 (15%)\n\n\n\n\n    trifft gar nicht zu\n19 (13%)\n4 (15%)\n\n\n\n\n    Unknown\n3\n0\n\n\n\n\nHalten Sie die Verbandsarbeit für die Verbreitung von Großkatzen im ländlichen Raum für sinnvoll?\n\n\n\n\n0.7\n\n\n    trifft voll zu\n8 (5.6%)\n1 (3.7%)\n\n\n\n\n    trifft zu\n81 (57%)\n16 (59%)\n\n\n\n\n    weder noch\n31 (22%)\n8 (30%)\n\n\n\n\n    trifft nicht zu\n18 (13%)\n1 (3.7%)\n\n\n\n\n    trifft gar nicht zu\n5 (3.5%)\n1 (3.7%)\n\n\n\n\n    Unknown\n3\n0\n\n\n\n\nSehen Sie die Haltung von Großkatzen als eine kulturelle Bereicherung?\n\n\n\n\n0.7\n\n\n    trifft voll zu\n18 (13%)\n5 (19%)\n\n\n\n\n    trifft zu\n66 (46%)\n13 (50%)\n\n\n\n\n    weder noch\n29 (20%)\n5 (19%)\n\n\n\n\n    trifft nicht zu\n23 (16%)\n3 (12%)\n\n\n\n\n    trifft gar nicht zu\n8 (5.6%)\n0 (0%)\n\n\n\n\n    Unknown\n2\n1\n\n\n\n\nSehen Sie die Notwendigkeit von genetisch veränderten Großkatzen zur Steigerung der Attraktivität des Erlebnishofes?\n\n\n\n\n0.8\n\n\n    trifft voll zu\n7 (4.9%)\n1 (3.7%)\n\n\n\n\n    trifft zu\n48 (34%)\n9 (33%)\n\n\n\n\n    weder noch\n41 (29%)\n9 (33%)\n\n\n\n\n    trifft nicht zu\n33 (23%)\n4 (15%)\n\n\n\n\n    trifft gar nicht zu\n14 (9.8%)\n4 (15%)\n\n\n\n\n    Unknown\n3\n0\n\n\n\n\nFüttern Sie täglich Kellog's Frosties?\n\n\n\n\n&gt;0.9\n\n\n    Ja\n101 (70%)\n0 (NA%)\n\n\n\n\n    Nein\n44 (30%)\n0 (NA%)\n\n\n\n\n    Unknown\n1\n27\n\n\n\n\nFüttern Sie wöchentlich Batzen?\n\n\n\n\n&gt;0.9\n\n\n    Ja\n111 (77%)\n0 (NA%)\n\n\n\n\n    Nein\n34 (23%)\n0 (NA%)\n\n\n\n\n    Unknown\n1\n27\n\n\n\n\nFüttern Sie Joghurt?\n\n\n\n\n&gt;0.9\n\n\n    Ja\n63 (43%)\n0 (NA%)\n\n\n\n\n    Nein\n82 (57%)\n0 (NA%)\n\n\n\n\n    Unknown\n1\n27\n\n\n\n\nFüttern Sie pflanzlich oder gar vegan?\n\n\n\n\n&gt;0.9\n\n\n    Ja\n40 (28%)\n0 (NA%)\n\n\n\n\n    Nein\n105 (72%)\n0 (NA%)\n\n\n\n\n    Unknown\n1\n27\n\n\n\n\nWie aktiv sind Sie bei der Lobbyarbeit in den jeweiligen Landeshauptstädten?\n\n\n\n\n0.2\n\n\n    sehr aktiv\n2 (1.7%)\n2 (9.5%)\n\n\n\n\n    eher aktiv\n44 (38%)\n7 (33%)\n\n\n\n\n    weder noch\n49 (42%)\n11 (52%)\n\n\n\n\n    eher nicht aktiv\n19 (16%)\n1 (4.8%)\n\n\n\n\n    gar nicht aktiv\n2 (1.7%)\n0 (0%)\n\n\n\n\n    Unknown\n30\n6\n\n\n\n\nWie aktiv sind Sie in der positiven Vermarktung des Verbandes in sozialen Netzwerken?\n\n\n\n\n0.7\n\n\n    sehr aktiv\n16 (13%)\n4 (22%)\n\n\n\n\n    eher aktiv\n60 (50%)\n9 (50%)\n\n\n\n\n    weder noch\n37 (31%)\n4 (22%)\n\n\n\n\n    eher nicht aktiv\n5 (4.2%)\n1 (5.6%)\n\n\n\n\n    gar nicht aktiv\n1 (0.8%)\n0 (0%)\n\n\n\n\n    Unknown\n27\n9\n\n\n\n\nWie aktiv sind Sie in der Vermarktung von Tigernachwuchs an Dritte in den sozialen Netzwerken?\n\n\n\n\n0.033\n\n\n    sehr aktiv\n1 (0.8%)\n1 (4.5%)\n\n\n\n\n    eher aktiv\n34 (29%)\n10 (45%)\n\n\n\n\n    weder noch\n56 (47%)\n10 (45%)\n\n\n\n\n    eher nicht aktiv\n24 (20%)\n0 (0%)\n\n\n\n\n    gar nicht aktiv\n4 (3.4%)\n1 (4.5%)\n\n\n\n\n    Unknown\n27\n5\n\n\n\n\nWie aktiv sind Sie bei der notwendigen Entnahme von Schadwölfen in Ihrem Einflussgebiet?\n\n\n\n\n0.3\n\n\n    sehr aktiv\n15 (13%)\n3 (14%)\n\n\n\n\n    eher aktiv\n69 (58%)\n12 (55%)\n\n\n\n\n    weder noch\n27 (23%)\n6 (27%)\n\n\n\n\n    eher nicht aktiv\n7 (5.9%)\n0 (0%)\n\n\n\n\n    gar nicht aktiv\n0 (0%)\n1 (4.5%)\n\n\n\n\n    Unknown\n28\n5\n\n\n\n\nWie lange schätzen Sie dauert es im Durchschnitt in Tagen bis sich ein Besucher bei Ihnen gefährlich verletzt?\n70 (24, 131)\n91 (54, 129)\n0.064\n\n\nWieviel Einkommen hatten Sie brutto in Tausend EUR im letzten Jahr?\n787 (469, 1,336)\n511 (142, 1,104)\n0.034\n\n\nWie groß sind ihre Besuchergruppen im Durchschnitt pro Monat?\n6.0 (4.0, 9.8)\n5.0 (4.0, 8.0)\n0.3\n\n\nWie viel 100 Liter Eis verkaufen Sie im Durchschnitt pro Monat?\n20 (16, 26)\n15 (13, 16)\n&lt;0.001\n\n\n\n1 n (%); Median (IQR)\n\n\n2 Fisher’s exact test; Pearson’s Chi-squared test; Wilcoxon rank sum test",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#multivariate-analysen",
    "href": "stat-modeling-survey.html#multivariate-analysen",
    "title": "69  Fragebogenanalyse",
    "section": "69.7 Multivariate Analysen",
    "text": "69.7 Multivariate Analysen\nKommen wir am Ende noch zu den multivariate Verfahren. Also eigentlich etwas, was in den meisten Abschlussarbeiten dann nicht mehr gemacht wird. Auch hier gebe ich dann keine Übersicht über die Methoden und was alles geht, sondern konzentriere mich auf die Hauptkomponentenanalyse oder auch PCA genannt. Wenn du mehr lesen willst, dann besuche einfach das entsprechende Kapitel hier in dem Buch zu den multivariate Verfahren. Die Idee ist eigentlich ganz simple, wir wollen uns alle Fragen und alle Antworten gemeinsame anschauen und herausfinden, ob es eine Korrelation zwischen den Fragen oder den Teilnehmern gibt. Wir betrachten dabei nicht einzelne Fragen sondern die gesamte Fragenmatrix. Diese Korrelation zwischen allen Fragen simultan wollen wir dann einmal visualisieren. Auch hier stellt sich natürlich die Frage, ob es so sinnvoll ist wirklich alles in die PCA zu schmeißen. Vermutlich ist eine thematische Auswahl über select() besser. Hier machen wir aber einmal alles zusammen.\nWir brauchen auf jeden Fall nur numerische Daten. Daher wandele ich meinen Faktordatensatz tiger_fct_tbl einmal in einen numerischen Datensatz um indem ich jede Spalte auf numerisch setze. Dann möchte ich noch die Kurznamen der Fragen haben, da ich sonst nichts mehr in den Abbildungen erkenne.\n\n\nR Code [zeigen / verbergen]\ntiger_num_tbl &lt;- tiger_fct_tbl |&gt; \n  mutate_all(as.numeric) |&gt; \n  set_names(short_question_tbl$ques_id)\n\n\nIch lasse dann einmal die Funktion PCA() auf den Daten laufen. Das wichtige ist hier noch, dass ich gerne die Antworten alle über die Option scale.unit skalieren möchte. Damit haben dann alle Antworten den gleichen numerischen Bereich. Das ist natürlich eine künstliche Maßnahme, die aber die PCA verbessert. Dann schaue ich mi nur die ersten beiden Hauptkomponenten mit der Option ncp = 2 an.\n\n\nR Code [zeigen / verbergen]\npca_tiger &lt;- PCA(tiger_num_tbl, scale.unit = TRUE, \n                 ncp = 2, graph = FALSE)\n\n\nIn der Abbildung 69.16 schaue ich mir einmal die Effekt der Fragen, also der Spalten, an. Die ersten beiden Dimensionen der Hauptkomponentenanalyse werden dargestellt. Leider erklären beide Hautkomponenten nur sehr wenig der Varianz, so dass die Aussagekraft der Hauptkomponentenanalyse schwach ist. Daher möchte ich wissen, ob irgendwelche Fragen ähnliche Korrelationen zusammen haben. Je größer der cos2-Wert ist, desto mehr Einfluss auf die erklärte Varianz haben die Variablen. Fragen die in unterschedliche Richtungen zeigen, haben ein gegensätzliches Antwortmuster.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_var(pca_tiger, col.var = \"cos2\",\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), \n             repel = TRUE)\n\n\n\n\n\n\n\n\nAbbildung 69.16— Betrachtung der einzelnen Fragen zueinander. Die ersten beiden Dimensionen der Hauptkomponentenanalyse werden dargestellt. Leider erklären beide Hauptkomponenten nur sehr wenig der Varianz, so dass die Aussagekraft der Hauptkomponentenanalyse schwach ist.\n\n\n\n\n\nIn der Abbildung 69.17 schauen wir einmal auf die Individuen, also den Zeilen, gegeben der Fragen. Auch hier sehen wir, dass wir eigentlich keine großen Auffäligkeiten haben. Eventulle zwei der Teilnehmer:innen in der Zeile 131 und 172 könnten wir nochmal anschauen.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_ind(pca_tiger,\n             col.ind = \"cos2\", \n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE) +\n  scale_x_continuous(expand = expansion(add = c(0.5, 1))) +\n  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) \n\n\n\n\n\n\n\n\nAbbildung 69.17— Betrachtung der einzelnen Individuen zueinander. Die ersten beiden Dimensionen der Hauptkomponentenanalyse werden dargestellt. Leider erklären beide Hauptkomponenten nur sehr wenig der Varianz, so dass die Aussagekraft der Hauptkomponentenanalyse schwach ist.\n\n\n\n\n\nMit slice() könnten wir uns jetzt die Zeilen für die Individuen 131 und 172 einmal anschauen. Oder wir gehen dann in den Exceldatensatz und schauen in die entsprechenden Zeilen. Aber Achtung, in Excel zählt die Überschrift immer als eine Zeile. Daher musst du dann in Excel in die Zeile 132 und 173 für die entsprechenden Einträge schauen. Ich habe das mal gemacht und ich finde keine Besonderheiten, die jetzt einen Ausschluss rechtfertigen würden. Aber nochmal, die Hauptkomponenten erklären auch nur sehr wenig der Varianz, daher ist die Aussagekraft eben vage.\nAbschließend können wir nochmal schauen, ob wir Cluster in unseren Daten wiederfinden. Ich nutze dazu den kmeans()-Algorithmus und möchte mal sehen, ob ich auf den Individuen etwas finden kann.\n\n\nR Code [zeigen / verbergen]\nind_tiger &lt;- get_pca_ind(pca_tiger)\ngrp_tiger_ind &lt;- kmeans(ind_tiger$coord, centers = 2, nstart = 25) %&gt;% \n  pluck(\"cluster\") %&gt;% \n  as_factor()\n\n\nAbschließend siehst du dann einmal die beiden Cluster mit centers = 2 auf der PCA der Individuen. Ich habe dann die Individuen nach der Haltung der Tiger gelabelt. Wie du siehst, sehen wir zwar zwei Cluster, die sich auch recht stark überlappen, und auch nicht die Tigerhaltung widerspiegeln. Wir schon oben gesagt, die Hauptkomponenten erklären zu wenig der Varianz um hier etwas sinniges zu finden.\n\n\nR Code [zeigen / verbergen]\nfviz_pca_ind(pca_tiger,\n             geom.ind = \"point\", \n             col.ind = grp_tiger_ind, \n             palette = c(\"#0072B2\", \"#CC79A7\"),\n             addEllipses = TRUE, \n             legend.title = \"Groups\", mean.point = FALSE) +\n  geom_label(aes(label = tiger_num_tbl$s1))\n\n\n\n\n\n\n\n\nAbbildung 69.18— Clusteranalyse mit dem \\(k\\)-means Algorithmus auf dem gesamten Fragebogen. Die Teilnehmer sind nach der Haltung der Tiger gelabelt. Es findet sich jedoch kein Zusammenhang zwischen den gefunden Clustern und der Tigerhaltung.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "stat-modeling-survey.html#referenzen",
    "href": "stat-modeling-survey.html#referenzen",
    "title": "69  Fragebogenanalyse",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nAustin, P. C., Mamdani, M. M., Juurlink, D. N., & Hux, J. E. (2006). Testing multiple statistical hypotheses resulted in spurious associations: a study of astrological signs and health. Journal of clinical epidemiology, 59(9), 964–969.\n\n\nBrühlmann, F., Petralito, S., Aeschbach, L. F., & Opwis, K. (2020). The quality of data collected online: An investigation of careless responding in a crowdsourced sample. Methods in Psychology, 2, 100022.\n\n\nEdwards, P. J., Roberts, I., Clarke, M. J., DiGuiseppi, C., Wentz, R., Kwan, I., Cooper, R., Felix, L. M., & Pratap, S. (2009). Methods to increase response to postal and electronic questionnaires. Cochrane database of systematic reviews, 3.\n\n\nEdwards, P., Roberts, I., Clarke, M., DiGuiseppi, C., Pratap, S., Wentz, R., & Kwan, I. (2002). Increasing response rates to postal questionnaires: systematic review. Bmj, 324(7347), 1183.\n\n\nFriedman, H. H., & Amoo, T. (1999). Rating the rating scales. Friedman, Hershey H. and Amoo, Taiwo (1999).\" Rating the Rating Scales.\" Journal of Marketing Management, Winter, 114–123.\n\n\nGaur, P. S., Zimba, O., Agarwal, V., & Gupta, L. (2020). Reporting survey based studies—a primer for authors. J Korean Med Sci, 35(45), e398.\n\n\nHeiberger, R. M., Heiberger, R. M., & Burt Holland, B. H. (2015). Statistical Analysis and Data Display An Intermediate Course with Examples in R. Springer.\n\n\nRolstad, S., Adler, J., & Rydén, A. (2011). Response burden and questionnaire length: is shorter better? A review and meta-analysis. Value in Health, 14(8), 1101–1108.\n\n\nRoszkowski, M. J., & Bean, A. G. (1990). Believe it or not! Longer questionnaires have lower response rates. Journal of Business and Psychology, 4, 495–509.\n\n\nSiirtola, H. (2019). The cost of pie charts. 2019 23rd International Conference Information Visualisation (IV), 151–156.\n\n\nStory, D. A., & Tait, A. R. (2019). Survey research. Anesthesiology, 130(2), 192–202.\n\n\nSynodinos, N. E. (2003). The „art“ of questionnaire construction: some important considerations for manufacturing studies. Integrated manufacturing systems, 14(3), 221–237.\n\n\nWatson, S. C. (1998). A primer in survey research. The Journal of Continuing Higher Education, 46(1), 31–40.",
    "crumbs": [
      "Statistisches Modellieren",
      "<span class='chapter-number'>69</span>  <span class='chapter-title'>Fragebogenanalyse</span>"
    ]
  },
  {
    "objectID": "time-space-preface.html",
    "href": "time-space-preface.html",
    "title": "Zeitliche und räumliche Analysen",
    "section": "",
    "text": "Analyse von (pseudo) Zeitreihen\nLetzte Änderung am 20. November 2023 um 09:47:13\nIm Folgenden wollen wir uns einmal zwei etwas besondere Arten der statistischen Modellierung anschauen. Zum einen betrachten wir Zeitreihen (eng. time series) und zum anderen räumliche Daten (eng. spatial data). Beiden Arten von Daten ist gemein, dass wir eine etwas spezielle Korrelationstruktur und damit auch Varianzstruktur zwischen den Beobachtungen vorliegen haben. Zwei aufeinander folgende Jahre oder nebeneinander liegende Orte sind nun mal mehr korreliert als weiter entfernte Jahre oder Orte. Deshalb müssen wir hier etwas mehr modellieren, als wir es bei anderen Datentypen tuen würden. Die Methoden sind dir dann teilweise auch schon aus anderen Kapiteln bekannt. Wenn es der Sache dient, werde ich nochmal kurz auf die Methoden eingehen, sonst eben auf die passenden Kapitel verlinken. Sonst doppelt und dreifach sich hier alles, was dann auch weniger Sinn macht.\nIn dem folgenden Kapitel zu Zeitreihen (eng. time series) wollen wir uns mit dem verstreichen der Zeit beschäftigen. Was ja auch irgendwie zu erwarten war. Wir haben ganz einfach auf der \\(x\\)-Achse einer potenziellen Visualisierung die Zeit dargestellt. Wir wollen dann analysieren, ob es über den zeitlichen Verlauf einen Trend gibt oder wir ein gutes Modell für den Verlauf der Beobachtungen anpassen können. Hierbei unterscheide ich einmal zwischen einer “pseudo” Zeitreihenanalyse und der “standard” Zeitreihenanalyse, wie sie klassisch und statistisch verstanden wird. Nur weil wir einen Zeitraum auf der \\(x\\)-Achse darstellen, haben wir nicht unbedingt eine klassische Zeitreihe vorliegen. Deshalb schaue ich mir erstmal Fälle an, die wirken wir eine Zeitreihe aber im klassischen Sinne keine sind. Im nächsten Kapitel schauen wir uns dann “echte” Zeitreihen an und analysieren die Daten dann mit den entsprechenden R Paketen.\nPrinzipiell ist ist die Analyse von Zeitreihen nicht so kompliziert, aber es gibt immer wieder Verwirrungen mit anderen Analysen, die auch eine Zeit messen. Wenn du die Zeit bis zu einem Ereignis misst, dann bist du bei den Ereigniszeitanalysen richtig aufgehoben. Dann willst du auf jeden Fall nicht eine Zeitreihe analysieren. Es kann auch sein, dass du nur bestimmte Zeitpunkte vorliegen hast, an denen du immer wieder verschiedenen Beobachtungen in Gruppen misst. Das wäre dann eher ein Experiment mit Messwiederholung (eng. repeated measurement) und dort würden wir dann ein gemischtes Modell rechnen. Du merkst schon, so einfach ist es manchmal nicht zu erkennen, welche Analyse den nun passen würde. Wenn du noch mehr über die Analyse von Zeitreihen lesen willst, dann kann ich dir folgende Literatur empfehlen. Robert et al. (2006) liefert eine gute Übersicht über die Anwendung in R, ist aber schon etwas älter. Das Gleiche gilt dann auch für das Buch von Chan & Cryer (2008) und Cowpertwait & Metcalfe (2009). Dennoch bilden alle drei Bücher die Grundlagen der Analysen von Zeitreihen super ab. Für eine Abschlussarbeit sollten die Quellen also allemal reichen.",
    "crumbs": [
      "Zeitliche und räumliche Analysen"
    ]
  },
  {
    "objectID": "time-space-preface.html#analyse-von-pseudo-zeitreihen",
    "href": "time-space-preface.html#analyse-von-pseudo-zeitreihen",
    "title": "Zeitliche und räumliche Analysen",
    "section": "",
    "text": "Welche Zeitanalyse soll es denn nun sein?\n\n\n\nWenn du dir unsicher bist, was denn nun sein soll, dann komm doch einfach bei mir in der statistischen Beratung vorbei. Dafür musst du mir nur eine Mail schreiben und du erhälst dann einen Termin für ein Onlineberatung.",
    "crumbs": [
      "Zeitliche und räumliche Analysen"
    ]
  },
  {
    "objectID": "time-space-preface.html#analyse-von-räumliche-daten",
    "href": "time-space-preface.html#analyse-von-räumliche-daten",
    "title": "Zeitliche und räumliche Analysen",
    "section": "Analyse von räumliche Daten",
    "text": "Analyse von räumliche Daten\nMein Feld, das hat drei Ecken. Drei Ecken hat mein Feld. In dem folgenden Kapitel zu räumlichen Daten (eng. spatial data) wollen wir uns mit dem großen Feld von geologischen Daten beschäftigen. Wir haben also nicht nur Messwerte von Pflanzen oder Tieren, sondern wissen auch wo wir auf der Fläche diese Pflanzen oder Tiere beobachtet wurden. Da vermutlich räumlich nahe stehende Beobachtungen ähnlicher auf Umgebungsbedingungen reagieren als weit entfernte, müssen wir hier unsere Modelle anpassen. Wir berücksichtigen also die Positionen von Beobachtungen in unseren Modellen. Hier gibt es dann natürlich einiges an statistischen Modellen, so dass wir hier auch wieder nur eine Auswahl treffen. Manchmal reicht dann aber auch eine tolle Abbildung, auch hier kann dir dann im folgenden Kapitel geholfen werden. Auch hier ein kurzer Literaturabriss, später dann mehr. Wir haben einmal die Anwendung von der Analyse von räumlichen Daten von Bivand et al. (2008). Ein sehr ausführliches Buch, was auch einigermaßen aktuell ist, ist die Arbeit von Plant (2018). Wenn du also tiefer in das Feld einsteigen willst, dann ist das Buch von Plant (2018) das richtige Buch für die Anwendung in den Agarwissenschaften.",
    "crumbs": [
      "Zeitliche und räumliche Analysen"
    ]
  },
  {
    "objectID": "time-space-preface.html#das-r-paket-plotly",
    "href": "time-space-preface.html#das-r-paket-plotly",
    "title": "Zeitliche und räumliche Analysen",
    "section": "Das R Paket plotly",
    "text": "Das R Paket plotly\nFür die Analyse von Zeitreihen und räumlichen Daten bietet sich im besonderen das R Paket plotly an. Nicht, dass es sich bei plotly um eine Analyse im Sinne eines statistischen Test handelt. Wir haben mit plotly aber die Möglichkeit unsere Daten sehr gut zu visualisieren, wie in ggplot, aber wir können uns auch einzelne Punkte in den Abbildungen anzeigen lassen. Mit der Funktion ggplotly() können wir sogar statische Abbildungen in ggplot in eine plotly Abbildung umwandeln. Mehr dazu dann in den folgenden Kapiteln sowie natürlich auf der Hilfeseite Plotly R Open Source Graphing Library.",
    "crumbs": [
      "Zeitliche und räumliche Analysen"
    ]
  },
  {
    "objectID": "time-space-preface.html#referenzen",
    "href": "time-space-preface.html#referenzen",
    "title": "Zeitliche und räumliche Analysen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nBivand, R. S., Pebesma, E. J., Gómez-Rubio, V., & Pebesma, E. J. (2008). Applied spatial data analysis with R (Bd. 747248717). Springer.\n\n\nChan, K.-S., & Cryer, J. D. (2008). Time series analysis with applications in R. Springer.\n\n\nCowpertwait, P. S., & Metcalfe, A. V. (2009). Introductory time series with R. Springer Science & Business Media.\n\n\nPlant, R. E. (2018). Spatial data analysis in ecology and agriculture using R. cRc Press.\n\n\nRobert, H. et al. (2006). Time Series Analysis and Its Applications With R Examples Second Edition. Springer.",
    "crumbs": [
      "Zeitliche und räumliche Analysen"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html",
    "href": "time-space-pseudo-time-series.html",
    "title": "70  Pseudo Zeitreihen",
    "section": "",
    "text": "70.1 Genutzte R Pakete\nLetzte Änderung am 04. July 2025 um 10:46:09\nIn diesem Kapitel wollen wir uns mit “pseudo” Zeitreihen beschäftigen. Wenn dich “echte” Zeitreihen interessieren, dann schaue bitte einmal in das nächste Kapitel Zeitreihen (eng. time series). Wenn dir jetzt unklar ist, was da der Unterschied zwischen einer pseudo und echten Zeitreihe sein soll, dann versuche ich dir gleich einmal die Sachlage zu erklären. Zuerst haben wir in beiden Fällen ganz einfach auf der \\(x\\)-Achse einer potenziellen Visualisierung die Zeit dargestellt. Wir wollen dann Auswerten, ob es über den zeitlichen Verlauf einen Trend gibt oder wir ein gutes Modell für den Verlauf der Beobachtungen anpassen können. Dabei haben wir dann aber meistens nicht einen super simplen Verlauf, sondern Spitzen oder Täler in den Daten, so dass wir hier die Daten entsprechend glätten (eng. to smooth) müssen. Soweit ist die Sachlage in beiden Fällen die gleiche.\nWarum jetzt aber “pseudo” Zeitreihen? Da es bei der Analyse von Zeitreihen konkrete Anforderungen an die Daten gibt, damit es sich um eine “echte” Zeitreihe im statistischen Sinne handelt. Du kannst Daten haben, die einer Zeitreihe ähneln aber sich nicht mit den statistischen Verfahren einer Zeitreihenanalyse auswerten lassen. Meistens sind die Zeitreihen zu kurz und zeigen keinen zyklischen Verlauf. Daher hast du einfach zu wenig Datenpunkte um diese Zeitreihe als eine Zeitreihe zu analysieren. Wenn du nur die Temperatur im Frühjahr und Sommer misst, dann fehlt dir der Zyklus über Herbst und Winter plus du müsstest die Temperaturen über mehre Jahre messen. Um diese “pseudo” Zeitreihen mit dennoch sinnvollen Fragestellungen soll es in diesem Kapitel gehen. Deshalb schau dir einfach mal die Beispiele hier an. Du wirst dann sehen, ob die Daten eher zu den “pseudo” Zeitreihen passen oder aber zu der klassischen Zeitreihenanalyse im nächsten Kapitel.\nAuf der anderen Seite reicht vielleicht auch eine aussagekräftige Visualisierung um “pseudo” Zeitreihen sinnvoll darzustellen. Daher schauen wir uns in diesem Kapitel dann auch verschiedene Möglichkeiten an eine pseudo Zeitreihe einmal zu visualisieren. Auch kann es Sinn machen das R Paket {plotly} zu nutzen um eine interaktive Grafik zu erschaffen, wenn sehr viele Zeitpunkte vorliegen. Durch {plotly} haben wir dann die Möglichkeit auch in einer Grafik Werte abzulesen und zwischen verschiedenen Verläufen zu vergleichen. Dementsprechend sehe die Visualisierung auch als eine Möglichkeit deine Zeitreihe auszuwerten und zu präsentieren, wenn die Zeitreihe eben nicht den klassischen Anforderungen genügt. Mehr findest du auch auf der Seite von R Coder - Evolution charts.\nWenn es um Zeitreihen geht, dann ist die Formatierung der Spalte mit dem Datum eigentlich so ziemlich das aufwendigste. In dem Kapitel Zeit und Datum findest du dann nochmal mehr Informationen dazu. Achte bitte darauf, dass du eine einheitlich formatierte Datumsspalte hast, die sich nicht im Laufe der Zeilen ändert. Wenn das der Fall ist, dann musst du meist händisch nochmal die Daten anpassen und das ist meistens sehr aufwendig.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, janitor, see, readxl,\n               lubridate, plotly, zoo, timetk, conflicted)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(magrittr::set_names)\nconflicts_prefer(dplyr::slice)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#daten",
    "href": "time-space-pseudo-time-series.html#daten",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.2 Daten",
    "text": "70.2 Daten\nDen ersten Datensatz, den wir uns anschauen wollen, ist in einer CSH-Datei abgespeichert, die ich schon in Excel exportiert habe. Eine CSH-Datei ist ein Datenformat aus Adobe Photoshop und eigentlich nichts anders als eine Information über eine Bilddatei. Wir haben aber hier nicht Pixel oder aber ein Foto vorliegen, sondern das Bild wurde schon in einen numerischen Wert pro Bild weiter verarbeitet. Das hier so ausgedachte Experiment war ein Dronenüberflug über eine Wiese und einem Feld in Uelzen. Dabei wurden Fotos gemacht und es sollten verschiedene Grünlandwerte aus den Fotos berechnet werden. Wir haben aber den Überflug nicht an einem einzigen Tag gemacht, sondern gleich an mehreren über das Jahr verteilt. Das ist jetzt auch dann gleich unsere Zeitreihe. Jetzt können wir uns Fragen, ob es einen Unterschied zwischen den Messwerten der beiden Dronenüberflüge gibt. Wir lesen wie immer erstmal die Daten ein.\n\n\nR Code [zeigen / verbergen]\ncsh_tbl &lt;- read_excel(\"data/csh_data.xlsx\") |&gt; \n  clean_names() |&gt; \n  mutate_if(is.numeric, round, 2) |&gt; \n  mutate(day_num = as.numeric(as.factor(day)))\n\n\nIn der Tabelle 70.1 siehst du einen Ausschnitt aus den 926 Überflügen. Hier wurden die Daten natürlich schon zusammengefasst. Aus jedem Bild wurde dann ein Wert für zum Beispiel kg_tm_ha berechnet. Hier interessiert uns aber nicht die Berechnungsart. Wir wollen jetzt gleich mit den Daten weiterarbeiten. Wie immer ist das Beispiel so semi logisch, hier geht es aber auch eher um die Anwendung der Methoden.\n\n\n\n\nTabelle 70.1— Auszug aus den Daten der CSH-Datei von Dronenüberflügen über eine Wiese und einem Feld in Uelzen. Die Daten sind abgeändert von den Orginaldaten.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparzelle\nday\ng_tm_plot\nkg_tm_ha\nnetto_csh_cm\ntm_gehlt\nday_num\n\n\n\n\nWiese\n428\n15.2\n1148.47\n7.8\n0.22\n1\n\n\nWiese\n428\n11.4\n813.57\n8\n0.21\n1\n\n\nWiese\n428\n24.7\n1771.79\n9.3\n0.21\n1\n\n\nWiese\n428\n20.9\n1520.52\n8\n0.23\n1\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\nUelzen\n920\n42.7\n3104.49\n3.6\n0.2\n30\n\n\nUelzen\n920\n31.9\n2455.84\n1.8\n0.26\n30\n\n\nUelzen\n920\n47\n3396.17\n3.4\n0.24\n30\n\n\nUelzen\n920\n30.2\n2201.32\n2.5\n0.27\n30\n\n\n\n\n\n\n\n\nIm nächsten Datensatz schauen wir uns einmal die Daten von vier Loggern an. Hier haben wir mehr oder minder einfach jeweils einen Temperaturlogger an den jeweiligen Seiten unseres Folientunnels geworfen und dann nochmal einen Logger einfach so auf das Feld gelegt. In den Folientunneln haben wir dann Salat hochgezogen. Wir betrachten jetzt hier nur das Freiland, sonst wird es einfach zu viel an Daten.\n\n\nR Code [zeigen / verbergen]\nsalad_tbl &lt;- read_excel(\"data/temperatur_salad.xlsx\") |&gt; \n  clean_names() |&gt; \n  mutate_if(is.numeric, round, 2) |&gt; \n  select(datum, uhrzeit, matches(\"freiland\"))\n\n\nIn der Tabelle 70.2 siehst du einmal die 2447 automatisch erfassten Messungen der Temperatur pro Tag und dann Stunde. Hier müssen wir dann einmal schauen, wie wir die Daten dann sinnvoll zusammenfassen. Es sind wirklich viele Datenpunkte. Aber gut wir schauen uns die Daten erstmal an und entscheiden dann später weiter. Wir sehen aber schon, dass wir die Daten nochmal bearbeiten müssen, denn irgendwas stimmt mit der Uhrzeitspalte und dem Datum nicht. Dazu dann aber gleich mehr im Abschnitt zum Datumsformat.\n\n\n\n\nTabelle 70.2— Auszug aus den Daten zur auromatischen Erfassung von Klimadaten im Feld für Kopfsalat.\n\n\n\n\n\n\n\n\n\n\n\n\n\ndatum\nuhrzeit\nfreiland_messw\nfreiland_min\nfreiland_max\n\n\n\n\n2023-04-11\n1899-12-31 13:30:00\n21.9\n21.9\n21.9\n\n\n2023-04-11\n1899-12-31 14:00:00\n18.8\n18.8\n22.5\n\n\n2023-04-11\n1899-12-31 14:30:00\n14.6\n13.8\n18.8\n\n\n2023-04-11\n1899-12-31 15:00:00\n13.2\n13.2\n15.6\n\n\n…\n…\n…\n…\n…\n\n\n2023-06-01\n1899-12-31 11:00:00\nNA\nNA\nNA\n\n\n2023-06-01\n1899-12-31 11:30:00\nNA\nNA\nNA\n\n\n2023-06-01\n1899-12-31 12:00:00\nNA\nNA\nNA\n\n\n2023-06-01\n1899-12-31 12:30:00\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nAm Ende wollen wir uns dann nochmal Daten einer Wetterstation in Hagebüchen an. Auch hier haben wir wieder sehr viele Daten vorliegen und wir müssen uns überlegen, welche der Daten wir nutzen wollen. Aus Gründen der Machbarkeit wähle ich die Spalte temp_boden_durch und solar_mv aus, die wir uns dann später anschauen wollen. Sonst wird mir das zu groß und unübersichtlich.\n\n\nR Code [zeigen / verbergen]\nstation_tbl &lt;- read_excel(\"data/Wetterstation_Hagebuechen.xlsx\") |&gt; \n  clean_names() |&gt; \n  select(datum_uhrzeit, temp_boden_durch, solar_mv) |&gt; \n  mutate_if(is.numeric, round, 2)\n\n\nAuch hier haben wir in der Tabelle 70.3 gut 4163 einzelne Messungen vorliegen. Das ist dann auch unserer größter Datensatz von Klimadaten. Wir werden die Daten dann aber sehr anschaulich einmal in einer Übersicht darstellen.\n\n\n\n\nTabelle 70.3— Auszug aus den Daten zur Wetterstation in Hagebüchen.\n\n\n\n\n\n\ndatum_uhrzeit\ntemp_boden_durch\nsolar_mv\n\n\n\n\n2022-09-21 18:00:00\n12.9\n6978\n\n\n2022-09-21 17:00:00\n15.2\n10223\n\n\n2022-09-21 16:00:00\n15.6\n10343\n\n\n2022-09-21 15:00:00\n15.7\n10348\n\n\n…\n…\n…\n\n\n2022-04-01 11:00:00\n-1.3\n9854\n\n\n2022-04-01 10:00:00\n-1.1\n9892\n\n\n2022-04-01 09:00:00\n-1.3\n6983\n\n\n2022-04-01 08:00:00\n-1.3\n4083\n\n\n\n\n\n\n\n\nDamit hätten wir uns eine Reihe von landwirtschaftlichen Datensätzen angeschaut. Sicherlich gibt es noch mehr, aber diese Auswahl erlaubt es uns gleich einmal die häufigsten Fragen rund um Zeitreihen in den Agrarwissenschaften einmal anzuschauen. Bitte beachte, dass es natürlich noch andere Formen von Zeitreihen und damit Datensätzen gibt. Deshalb gleich noch ein Datensatz, der künstlich ist und damit eine eher perfekte Zeitreihe repräsentiert. In dem folgenden Kasten findest du darüber hinaus nochmal eine Anregung zu Klimadaten aus deiner Region.\n\n\n\n\n\n\nMehr Wetter- und Klimadaten aus deiner Region\n\n\n\nDu kannst gerne die entgeltfreien Informationen auf der DWD-Website nutzen um mehr Informationen zu dem Klima und deiner Region zu erhalten. Wir finden dort auf der Seite die Klimadaten für Deutschland und natürlich auch die Daten für Münster/Osnabrück. Sie dazu auch Isoplethendiagramm für Münster & Osnabrück im Skript zu beispielhaften Anwendung. Ich habe mir dort flux die Tageswerte runtergeladen und noch ein wenig den Header der txt-Datei angepasst. Du findest die Datei day_values_osnabrueck.txt wie immer auf meiner GitHub Seite. Du musst dir für andere Orte die Daten nur entsprechend zusammenbauen. Am Ende brauchen wir noch die Informationen zu den Tages- und Monatswerten damit wir auch verstehen, was wir uns da von der DWD runtergeladen haben.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#sec-time-data-format",
    "href": "time-space-pseudo-time-series.html#sec-time-data-format",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.3 Das Datumsformat",
    "text": "70.3 Das Datumsformat\nWenn wir von Zeitreihen sprechen dann sprechen wir auch von dem Datumsformat. Eine Zeitreihe ohne eine richtig formatierte Datumsspalte macht ja auch überhaupt keinen Sinn. Es ist eigentlich immer einer ewige Qual Daten in das richtige Zeitformat zu kriegen. Deshalb hier vorab einmal die folgende Abbildung, die nochmal die Wirrnisse des Datumsformat gut aufzeigt.\n\n\n\n\n\n\n\nQuelle: https://xkcd.com/\n\n\nWichtig ist, dass wir das richtige Datumsformat haben. Siehe bitte dazu auch das Kapitel Zeit und Datum. Das einzig richtige Datumsformat ist und bleibt eben Jahr-Monat-Tag. Häufig ist eben dann doch anders, so dass wir uns etwas strecken müssen um unser Format in das richtige Format zu überführen. Bitte beachte aber, dass du auf jeden Fall einheitlich dein Datum einträgst. Am besten auch immer zusammen mit dem Jahr, dass macht vieles einfacher. Wie immer gibt es auch noch das Tutorium zu Date Formats in R und natürlich das R Paket {lubridate} mit dem Einstieg Do more with dates and times in R.\nWir werden uns jetzt einmal am Beispiel die Transformation der Datumsformate in den jeweiligen Daten anschauen. Je nach Datensatz müssen wir da mehr oder weniger machen. Auch hier, wenn du weniger Arbeit möchtest, dann achte auf eine einheitliche Form der Datumsangabe\n\n\n\n\n\n\nKonvertierung von verschiedenen Datumsformaten in R\n\n\n\nDas R Paket {timetk} liefert dankenswerterweise Funktionen für die Konvertierung von verschiedenen Zeitformaten in R. Deshalb schaue einmal in die Hilfeseite Time Series Class Conversion – Between ts, xts, zoo, and tbl und dann dort speziell der Abschnitt Conversion Methods. Leider ist Zeit in R wirklich relativ.\n\n\n\n70.3.1 Die CSH-Daten\nDas Datum in den CSH-Daten leidet unter zwei Besonderheiten. Zum einen fehlt das Jahr und zum anderen die Null vor der Zahl. Wir haben nämlich für den 28. April die Datumsangabe 428 in der Spalte day. Das hat zur Folge, dass Excel die Spalte als Zahl erkennt und keine vorangestellten Nullen erlaubt. Wir brauchen aber einen String und den Monat als zweistellig mit 04 für den Monat April. Deshalb nutzen wir die Funktion str_pad() um eine 0 an die linke Seite zu kleben, wenn der Wert in der Spalte kleiner als vier Zeichen lang ist. Somit würde der 1. Oktober mit 1001 so bleiben, aber der 1. September mit 901 zu 0901. Dann nutzen wir die Funktion as.Date() um aus unserem Sting dann ein Datum zu machen. Das Format ist hier dann %m%d und somit Monat und Tag ohne ein Trennzeichen.\n\n\nR Code [zeigen / verbergen]\ncsh_tbl &lt;- csh_tbl |&gt; \n  mutate(day = as.Date(str_pad(day, 4, pad = \"0\", side = \"left\"), format = \"%m%d\"))\n\n\nUnd dann erhalten wir auch schon folgenden Datensatz mit dem korrekten Datumsformat mit dem wir dann weiterarbeiten werden.\n\n\nR Code [zeigen / verbergen]\ncsh_tbl |&gt; \n  head(4)\n\n\n# A tibble: 4 × 7\n  parzelle day        g_tm_plot kg_tm_ha netto_csh_cm tm_gehlt day_num\n  &lt;chr&gt;    &lt;date&gt;         &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 Wiese    2025-04-28      15.2    1148.          7.8     0.22       1\n2 Wiese    2025-04-28      11.4     814.          8       0.21       1\n3 Wiese    2025-04-28      24.7    1772.          9.3     0.21       1\n4 Wiese    2025-04-28      20.9    1521.          8       0.23       1\n\n\nWie du siehst, wird dann automatisch das aktuelle Jahr gesetzt. Das heißt, da ich dieses Text hier im Jahr 2025 schreibe, erscheint natürlich auch eine 2025 vor dem Monat und Tag. Hier musst du dann schauen, ob das Jahr wirklich von Interesse ist oder du es dann später nochmal anpasst. Wir lassen jetzt erstmal alles so stehen. Es ist immer einfacher das Datum dann sauber in Excel zu setzen, als sich dann hier nochmal einen Abzubrechen, denn du bist ja keine Informatiker der eine generelle Lösung sucht sondern hast ja nur einen Datensatz vorliegen. Das wäre jedenfalls mein Tipp um es schneller hinzukriegen.\n\n\n70.3.2 Die Salatdaten\nBei den Salatdaten haben wir ein anderes Problem vorliegen. Wir haben einmal eine Datumsspalte und dann noch eine Spalte mit der Uhrzeit. Da wir aber keine reine Uhrzeitspalte haben können, wurde noch das Datum 1899-12-31 als default ergänzt. Das macht natürlich so überhaupt keinen Sinn. Deshalb müssen wir dann einmal die Uhrzeit als korrektes Uhrzeit-Format umwandeln und dann die Spalte datum in ein Datum-Format. Dann können wir die beiden Spalten addieren und schon haben wir eine Datumsspalte mit der entsprechenden Uhrzeit.\n\n\nR Code [zeigen / verbergen]\nsalad_datetime_tbl &lt;- salad_tbl |&gt; \n  mutate(uhrzeit = format(uhrzeit, format = \"%H:%M:%S\"),\n         datum = format(datum, format = \"%Y-%m-%d\"),\n         datum = ymd(datum) + hms(uhrzeit)) |&gt; \n  select(-uhrzeit) \n\n\nIm Folgenden siehst du einmal das Ergebnis unserer Umfaormung. Wir haben jetzt eine Spalte mit dem Datum und der Uhrzeit vorliegen, so wir das auch wollen und dann auch abbilden können.\n\n\nR Code [zeigen / verbergen]\nsalad_datetime_tbl |&gt; \n  head(4)\n\n\n# A tibble: 4 × 4\n  datum               freiland_messw freiland_min freiland_max\n  &lt;dttm&gt;                       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 2023-04-11 13:30:00           21.9         21.9         21.9\n2 2023-04-11 14:00:00           18.8         18.8         22.5\n3 2023-04-11 14:30:00           14.6         13.8         18.8\n4 2023-04-11 15:00:00           13.2         13.2         15.6\n\n\nDa wir später noch für die Visualisierung die einzelnen Spalten freiland_messw bis freiland_max einmal darstellen wollen, bauen wir uns nochmal mit pivot_longer() einen entsprechenden Datensatz, der uns diese Art der Visualiserung dann auch möglich macht.\n\n\nR Code [zeigen / verbergen]\nsalad_long_tbl &lt;- salad_datetime_tbl |&gt; \n  pivot_longer(freiland_messw:last_col(),\n               names_sep = \"_\",\n               names_to = c(\"location\", \"type\"),\n               values_to = \"temp\") \n\n\nWie du nun siehst, haben wir nur noch eine Spalte temp mit unseren Messwerten der Temperatur. Der Rest an Informationen ist dann alles in anderen Spalten untergebracht. Mit diesem Datensatz können wir dann auch in {ggplot} gut arbeiten.\n\n\nR Code [zeigen / verbergen]\nsalad_long_tbl |&gt; \n  head(4)\n\n\n# A tibble: 4 × 4\n  datum               location type   temp\n  &lt;dttm&gt;              &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n1 2023-04-11 13:30:00 freiland messw  21.9\n2 2023-04-11 13:30:00 freiland min    21.9\n3 2023-04-11 13:30:00 freiland max    21.9\n4 2023-04-11 14:00:00 freiland messw  18.8\n\n\nWie du aber auch schon hier siehst sind die Werte für den Messwert, den Minimalwert und den Maximalwert faktisch identisch. Diese geringe Abweichung werden wir dann auch nur schwerlich schön in einer Abbildung zeigen können. Ich würde dann die Min/Max-Werte rausschmeißen und mich nur auf die Messwerte in diesem Fall konzentrieren.\n\n\n70.3.3 Die Wetterstationsdaten\nZu guter Letzt noch die Daten zu der Wetterstation. Hier haben wir das Problem, dass wir dann aus der Spalte mit den Informationen zu dem Datum und der Zeit noch einzelne Informationen extrahieren wollen. Wir wollen die Stunde oder den Tag haben. Dafür nutzen wir nun Funktionen wie day() oder month() aus dem R Paket {lubridate} um uns diese Informationen zu extrahieren. Wir können uns so auch die Uhrzeit wieder zusammenbauen, indem wir die Stunde, Minute und dann die Sekunden herausziehen.\n\n\nR Code [zeigen / verbergen]\nstation_tbl &lt;- station_tbl |&gt; \n  mutate(datum_uhrzeit = as_datetime(datum_uhrzeit),\n         month = month(datum_uhrzeit),\n         day = day(datum_uhrzeit),\n         hour = hour(datum_uhrzeit),\n         minute = minute(datum_uhrzeit),\n         second = second(datum_uhrzeit),\n         format_hour = paste(hour, minute, second, sep = \":\"))\n\n\nDamit haben wir auch den letzten Datensatz so umgebaut, dass wir eine Spalte haben in der das Datum sauber kodiert ist. Sonst macht ja eine Zeitreihe keinen Sinn, wenn die Zeit nicht stimmt. Damit können wir uns dann auch der Visualisierung der Wetterstationsdaten zuwenden.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#visualisierung",
    "href": "time-space-pseudo-time-series.html#visualisierung",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.4 Visualisierung",
    "text": "70.4 Visualisierung\nWie auch bei anderen Analysen ist die Visualisierung von Zeitreihen das Wichtigste. Da wir im Besonderen bei Zeitreihen eben meistens keine Verläufe nur in den reinen Daten sehen können. Wir haben einfach zu viele Datenpunkte vorliegen. Meistens hilft uns dann auch eine Darstellung aller Datenpunkte auch nicht weiter, so dass wir uns entscheiden eine Glättung (eng. smoother) durchzuführen, damit wir überhaupt etwas sehen. Daher gehen wir hier einmal verschiedene Probleme an den Datensätzen durch. Vorab stelle ich dann aber nochmal das R Paket {plotly} vor, was es ermöglicht semi-interaktive Abbildungen zu erstellen. Wir haben mit {plotly} die Möglichkeit direkt Werte für die Punkte abzulesen. Das können wir mit einer fixen Abbildung in {ggplot} nicht. Mehr findest du auch auf der Seite von R Coder - Evolution charts.\n\n70.4.1 Das R Paket {plotly}\nDas R Paket {plotly} erlaubt interaktive Abbildungen zu erstellen. Zwar ist die Interaktivität nicht so ausgeprägt wie bei einer R Shiny App, aber wir haben hier auf jeden Fall die Möglichkeit in die Abbildung hineinzuzoomen oder aber Werte direkt aus der Abbildung abzulesen. Die beiden Möglichkeiten sind insbesondere bei sehr langen Zeitreihen oder aber bei vielen verschiedenen Zeitreihen in einer Abbildung super hilfreich. Wie bauen wir uns nun eine Abbildung in {plotly}? Ich nutze dafür die Funktion ggplotly(), die aus einer {ggplot} Abbildung dann ganz einfach eine {plotly} Abbildung baut. Du musst natürlich schauen, dass die {ggplot} Abbildung nicht zu komplex wird. Nicht alles was in {ggplot} möglich ist, lässt sich dann Eins zu Eins dann in {plotly} reproduzieren. Auf jeden Fall hilft wie immer die Hilfeseite {plotly} R Open Source Graphing Library sowie im besonderen dann die Seite Getting Started with {plotly} in {ggplot2}. Im Folgenden werde ich einzelne Abbildungen in {plotly} umwandeln und dann einmal erklären, was du so machen kannst. Aber eigentlich ist eine {plotly} Abbildung selbsterklärend, klicke einfach mal auf der Abbildung 70.9 zu dem Salat herum.\n\n\n70.4.2 Die CSH Daten\nDie CSH-Daten stellen ja die Messung eines Dronenüberflugs von zwei Parzellen einmal in Uelzen und einer Kontrollparzelle dar. In der Abbildung 70.7 (a) siehst du einmal die beobachteten g_tm_plot-Werte für jeden der Messtage getrennt nach Parzelle aufgetragen. Hier sieht man auf den ersten Blick keine Unterschied. Deshalb hilft es immer einmal eine geglättete Funktion durch die Punkte zu legen. Wir nutzen dazu die Funktion geom_smooth() und erhalten die Abbildung 70.7 (b). Hier sehen wir schon, dass es einen Unterschied zwischen den beiden Parzellen gibt. Wir sind also nicht an den einzelnen Punkten interessiert sondern eigentlich an der Differenz zwischen den beiden Geraden. Wir wollen also die Fläche zwischen den beiden Linien berechnen und so feststellen wie groß der Unterschied zwischen den Messungen an den beiden Parzellen ist.\n\n\nR Code [zeigen / verbergen]\ncsh_tbl |&gt; \n  ggplot(aes(day, g_tm_plot, color = parzelle)) +\n  theme_minimal() +\n  geom_point() +\n  scale_color_okabeito() \n\ncsh_tbl |&gt; \n  ggplot(aes(day, g_tm_plot, color = parzelle)) +\n  theme_minimal() +\n  geom_point() +\n  stat_smooth(se = FALSE) +\n  scale_color_okabeito() \n\n\n\n\n\n\n\n\n\n\n\n\n(a) Darstellung der Beobachtungen\n\n\n\n\n\n\n\n\n\n\n\n(b) Mit stat_smooth-Funktion\n\n\n\n\n\n\n\nAbbildung 70.7— Datensatz der g_tm_plot-Werte in Abhängigkeit von dem Tag der Messung für die beiden Parzellen einmal in Uelzen und der Kontrollwiese. Ein Unterschied lsäät sich nur durch die Anpassung der beiden Linien durch die Punkte erkennen.\n\n\n\n\nIn dem nächsten Abschnitt wollen wir dann einmal die Fläche zwischen den Linien bestimmen und schauen, ob wir hier wirklich einen Unterschied vorliegen haben. Wenn du mehr Linien oder Gruppen hast, dann musst du dann immer die Fläche zwischen zwei Linien berechnen bist du alle Kombinationen durch hast.\n\n\n70.4.3 Die Salat Daten\nDie Salatdaten schauen wir uns jetzt einmal in der Abbildung 70.8 als statische Abbildungen in {ggplot} an. Besonders in der Abbildung 70.8 (a) siehtst du dann wegen den geringen Unterschieden der Temperaturen fast nichts auf der Abbildung. Dafür hilft es dann auch in der Abbildung 70.8 (b) einmal die Temperaturen aufzuteilen. Jetzt haben wir alle Temperaturen einmal als Vergleich vorliegen. Aber auch hier können wir schlecht die Werte an einem Datum ablesen und direkt vergleichen. Hier hilft dann gleich {plotly} weiter.\n\n\nR Code [zeigen / verbergen]\np_loc &lt;- salad_long_tbl |&gt; \n  ggplot(aes(datum, temp, color = type)) +\n  theme_minimal() +\n  scale_color_okabeito() +\n  geom_line() +\n  facet_wrap(~ location) +\n  theme(legend.position = \"none\")\np_loc\n\np_type &lt;- salad_long_tbl |&gt; \n  ggplot(aes(datum, temp, color = type)) +\n  theme_minimal() +\n  scale_color_okabeito() +\n  geom_line() +\n  facet_wrap(~ type, ncol = 1) +\n  theme(legend.position = \"none\")\np_type\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Alle drei Temperaturen in einer Abbildung.\n\n\n\n\n\n\n\n\n\n\n\n(b) Die Temperaturen in drei separaten Abbildungen.\n\n\n\n\n\n\n\nAbbildung 70.8— Verlauf der Temperaturen auf dem Freilandfeld für Kopfsalat. Es wurden die minimalen, maximalen und ein durchschnittlicher Temperaturwert gemessen. Die Werte leiegn alle sehr nahe beieinander, so dass eine gute Darstellung mit einem statischen {ggplot} sehr schwer ist.\n\n\n\n\nIn der Abbildung 70.9 siehst du einmal die Version der ersten Abbildung in {plotly} dargestellt. Auf den ersten Blick ist alles gleich und auch wenn du die Abbildung ausdruckst oder in Word einfügst, wirst du nichts großartig anders machen können. Als Webseite oder im RStudio geht dann mehr. Du kannst jetzt mit der Maus über die Abbildung gleiten und dann werden dir die Werte an dem jeweiligen Punkt angezeigt. Das tolle ist, dass wir mit der Funktion ggplotly() viele Abbildungen aus {ggplot} direkt als {plotly} Abbildung wiedergeben lassen können. Wie immer gilt auch hier, dass die Hilfeseite Getting Started with {plotly} in ggplot2 einem enorm weiterhilft.\n\n\nR Code [zeigen / verbergen]\nggplotly(p_loc)\n\n\n\n\n\n\n\n\nAbbildung 70.9— Die Darstellung der Temperaturverläufe in {plotly}. Einzelne Werte können jetzt angezeigt werden und somit auch verglichen werden. Besonders der Button Compare data on hover ist hier sehr nützlich.\n\n\n\n\nIn der Abbildung 70.10 siehst du nochmal den Button Compare data on hover in Aktion. Du kannst dann direkt die drei Punkte miteinander vergleichen auch wenn die Punkte in der Abbildung schlecht auseinander zu halten sind. Wir können uns dann damit die Werte auf der \\(y\\)-Achse für jeden Zeitpunkt anzeigen lassen. Das “Hovern” über die Werte macht die visuelle Auswertung sehr viel einfacher als eine statische Abbildung.\n\n\n\n\n\n\nAbbildung 70.10— Wenn du oben rechts auf die beiden doppelten Pfeile klickst, dann aktivierst du Compare on hover, was dir ermöglicht direkt die Werte von \\(y\\) and einem Zeitpunkt zu vergleichen.\n\n\n\n\n\n70.4.4 Die Wetterstationsdaten\nDie Wetterstationsdaten können wir uns natürlich aucb so anschauen wie die Daten aus den Loggern bei den Salatdaten. Das habe ich dann auch einmal in der Abbildung 70.11 gemacht. Wir sehen in der Abbildung den Temperaturverlauf von April bis Ende Oktober. Das Problem ist auch wieder hier, dass wir einzelne Werte für ein Datum sehr schlecht ablesen können. Auch hier hilft dann {plotly} weiter, da können wir dann schön die Werte ablesen. Das Ziel ist es hier aber nicht eine einfache Scatterabbildung zu bauen sondern gleich nochmal ein 2D Konturplot. Aber fangen wir erstmal mit der Übersicht an.\n\n\nR Code [zeigen / verbergen]\np &lt;- station_tbl |&gt; \n  ggplot(aes(datum_uhrzeit, temp_boden_durch)) +\n  theme_minimal() +\n  geom_line() \np\n\n\n\n\n\n\n\n\nAbbildung 70.11— Verlauf der durchschnittlichen Temperatur an der Wetterstation von April bis Ende September.\n\n\n\n\n\nDann können wir natürlich auch wieder unsere statische Abbildung einmal in {plotly} umwandeln und uns die einzelnen Werte anschauen. Wir haben hier aber eher weniger Informationen, da der lineare Ablauf doch recht schwer über die Monate zu vergleichen ist. Viel besser wären da die Tage für jeden Monat nebeneinander. Oder aber wir schauen uns einmal die Temperatur für jeden Tag an. Wir haben ja auch die Uhrzeiten vorliegen.\n\n\nR Code [zeigen / verbergen]\nggplotly(p)\n\n\n\n\n\n\n\n\nAbbildung 70.12— Die Darstellung der durchschnittlichen Temperatur der Wetterstation in {plotly}. Einzelne Werte können jetzt angezeigt werden und somit auch verglichen werden.\n\n\n\n\nWir können uns jetzt in Abbildung 70.13 die drei Konturplots ansehen. Wichtig ist natürlich hier, dass wir vorher die Tage und den Monat aus dem Datum extrahiert haben. Jetzt geht es aber los mit dem Bauen der Konturplots. Wir mussten noch das Spektrum der Farben einmal drehen, damit es auch mit den Temperaturfarben passt und wir haben noch ein paar Hilfslinien mit eingezeichnet. Sie dazu auch meine Auswertung zum Isoplethendiagramm für Münster & Osnabrück im Skript zu beispielhaften Anwendung als ein anderes Beispiel mit DWD Daten. Wenn du die Daten aus deiner Region runterlädst, kannst du dir auch ähnliche Abbildungen bauen.\nIm Folgenden spiele ich mit den Funktionen geom_contour_filled() und geom_contour() rum um zum einen die Flächen und dann die Ränder des Isoplethendiagramms zu erhalten. Die Färbung ergibt sich dann aus der Funktion scale_fill_brewer(). Da wir hier exakt dreizehn Farben zu Verfügung haben, habe ich dann auch entschieden dreizehn Konturen zu zeichnen. Sonst musst du mehr Farben definieren, damit du auch mehr Flächen einfärben kannst. Teilweise musst du hier etwas mit den Optionen spielen, bis du bei deinen Daten dann eine gute Einteilung der Farben gefunden hast. Hier helfen dir dann die Optionen binwidth und bins weiter. Darüber hinaus habe ich mich auch entschieden hier mit einem Template in {ggplot} zu arbeiten, damit ich nicht so viel Code produziere. Ich baue mir im Prinzip einmal einen leeren Plot ohne die Funktion aes(). Die Definition was auf die \\(x\\)-Achse kommt und was auf die \\(y\\)-Achse mache ich dann später.\n\n\nR Code [zeigen / verbergen]\np &lt;- ggplot(station_tbl) +\n  theme_minimal() +\n  geom_contour_filled(bins = 13) +\n  scale_fill_brewer(palette = \"Spectral\", direction = -1) +\n  scale_x_continuous(breaks = 1:12) +\n  geom_vline(xintercept = 4:9, alpha = 0.9, linetype = 2) +\n  geom_hline(yintercept = c(4, 8, 12, 16, 20, 24), \n             alpha = 0.9, linetype = 2) +\n  labs(x = \"Monat\", y = \"Stunde\", fill = \"Temperatur [°C]\")\n\n\nWir können mit dem Operator %+% zu einem bestehenden {ggplot} neue Daten hinzufügen. Dann können wir auch wie gewohnt neue Optionen anpassen. Deshalb dann einmal das Template zusammen mit der Temperatur als Kontur aufgeteilt nach Monat und Stunde sowie Monat und Tag. Dann habe ich mir noch die Leistung der Sonne über den Monat und der Stunde anzeigen lassen. Je nach Fragestellung kommt es dann eben auf die Abbildung drauf an. Bei Zeitreihen haben wir mit dem Konturplot noch eine weitere Möglichkeit Daten spannend und aufschlussreich darzustellen.\n\n\nR Code [zeigen / verbergen]\np %+%\n  aes(month, hour, z = temp_boden_durch) +\n  geom_contour(binwidth = 2, color = \"black\") +\n  scale_y_continuous(limits = c(1, 24), breaks = c(4, 8, 12, 16, 20, 24)) +\n  labs(x = \"Monat\", y = \"Stunde\", fill = \"Temperatur [°C]\")\n\np %+%\n  aes(month, day, z = temp_boden_durch) +\n  geom_contour(binwidth = 2, color = \"black\") +\n  scale_y_continuous(limits = c(1, 30), breaks = c(5, 10, 15, 10, 25, 30)) +\n  labs(x = \"Monat\", y = \"Tag\", fill = \"Temperatur [°C]\")\n\np %+%\n  aes(month, hour, z = solar_mv) +\n  scale_y_continuous(limits = c(1, 24), breaks = c(4, 8, 12, 16, 20, 24)) +\n  labs(x = \"Monat\", y = \"Stunde\", fill = \"Solar [MV]\")\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Durchschnittstemperaturen der Wetterstation über den Tag.\n\n\n\n\n\n\n\n\n\n\n\n(b) Durchschnittstemperaturen der Wetterstation über den Monat.\n\n\n\n\n\n\n\n\n\n\n\n(c) Solare Leistung über den Tag.\n\n\n\n\n\n\n\nAbbildung 70.13— Konturplot der verschiedenen Temperaturen der Wetterstation in Hagebüchen in den Monaten April bis Mitte September. Die Temperaturen wurden jede Stunde einmal erfasst. Dargestellt sind die Durchschnittstemperaturen.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#sec-time-roll-mean",
    "href": "time-space-pseudo-time-series.html#sec-time-roll-mean",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.5 Einfache Glättungen",
    "text": "70.5 Einfache Glättungen\nBis jetzt haben wir uns die Visualisierung von Zeitreihen angeschaut. Häufig reicht die Visualisierung auch aus, wenn es um die Darstellung von Temperaturverläufen in einer Abschlussarbeit geht. Darüber hinaus wollen wir dann aber doch irgendwie eine statistische Analyse auf der Zeitreihe rechnen. Deshalb habe ich hier mal angefangen Beispiele zu Auswertungen von “pseudo” Zeitreihen zu sammeln und vorzustellen. Hauptsächlich nehme ich natürlich die drei Datensätze von weiter oben im Kapitel. Da die drei Datensätze zwar echte Daten aus dem agrarwissenschaftlichen Kontext repräsentieren, genügen die Datensätze dann doch nicht immer einer klassischen Zeitreihenanalyse.\nFangen wir also einmal mit eine einfachen Glättung an. Wir schauen uns hier als erstes die Standardvariante in R an. Ich zeige dir verschiedene Beispiele für die Glättung von Zeitreihen durch Mittelwert, Median oder aber auch der Summe. Du könntest auch stat_smooth() aus {ggplot} verwenden, aber hier zeige ich dir noch ein paar differenzierte Möglichkeiten. Das heißt, wir nehmen hier die einfachen Funktionen, die in R implementiert sind und rechnen damit eine Zeitreihenanalyse. Damit haben wir dann einige Nachteile, da wir uns die Funktionen dann eventuell nochmal aus Paketen zusammensuchen müssen. Dafür ist es aber schön kleinteilig und du kannst die Analysen Schritt für Schritt durchführen. Wenn dir das zu kleinteilig oder aber veraltet ist, dann schaue gleich weiter unten in den Abschnitten zu den R Paketen {tktime} und {modeltime} nach. Beide Pakete sind die Antwort auf eine Analyse von Zeitreihen im {tidyverse}.\n\n\n\n\n\n\nKonvertierung von verschiedenen Datumsformaten in R\n\n\n\nDas R Paket {timetk} liefert dankenswerterweise Funktionen für die Konvertierung von verschiedenen Zeitformaten in R. Deshalb schaue einmal in die Hilfeseite Time Series Class Conversion – Between ts, xts, zoo, and tbl und dann dort speziell der Abschnitt Conversion Methods. Leider ist Zeit in R wirklich relativ.\n\n\nLeider ist das Zeitformat ts etwas quälend. Dennoch basieren viele Tutorien auf diesem Format, deshalb hier auch einmal die Erklärung dafür. Es ist aber auch verständlich, denn das Format ist sozusagen der eingebaute Standard in R. Standard heißt hier aber nicht toll, sondern eher veraltet aus den 90zigern. Dann gibt es mit dem R Paket {zoo} noch ein Palette an nützlichen Funktionen, wenn du nicht so viel machen willst. Mit so viel meine ich, dass du eher an einem rollenden Mittelwert oder aber der rollenden Summe interessiert bist. Dann macht das R Paket {zoo} sehr viel Sinn. Einen Überblick liefert hier auch das Tutorium Reading Time Series Data.\nWenn wir viele Datenpunkte über die Zeit messen, dann hilft es manchmal die Spitzen und Täler aus den Daten durch eine rollende statistische Maßzahl zusammenzufassen. Das R Paket {zoo} hat die Funktion rollmean() sowie rollmax() und rollsum(). Es gibt aber noch eine Reihe weiterer Funktionen. Du musst hier einfach mal die Hilfeseite ?rollmean() für mehr Informationen aufrufen. Mit den Funktionen können wir für ein Zeitintervall \\(k\\) den Mittelwert bzw. der anderen Maßzahlen berechnen. In unserem Fall habe ich einmal das rollende Monatsintervall genommen. Du kannst aber auch andere Zeiten für \\(k\\) einsetzen und überlegen welcher Wert besser zu deinen Daten passt. Hier einmal die Berechnung für das rollende Mittel, das rollende Maximum und die rollende Summe. In allen drei Fällen nutzen wir die Funktion split() und map() um effizient unseren Code auszuführen.\n\nrollmean()rollmax()rollsum()\n\n\n\n\nR Code [zeigen / verbergen]\nroll_mean_tbl &lt;- salad_long_tbl |&gt; \n  split(~type) |&gt; \n  map(~zoo(.x$temp, .x$datum)) |&gt; \n  map(~rollmean(.x, k = 29)) |&gt; \n  map(tk_tbl) |&gt; \n  bind_rows(.id = \"type\")\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nroll_max_tbl &lt;- salad_long_tbl |&gt; \n  split(~type) |&gt; \n  map(~zoo(.x$temp, .x$datum)) |&gt; \n  map(~rollmax(.x, k = 29)) |&gt; \n  map(tk_tbl) |&gt; \n  bind_rows(.id = \"type\")\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nroll_sum_tbl &lt;- salad_long_tbl |&gt; \n  split(~type) |&gt; \n  map(~zoo(.x$temp, .x$datum)) |&gt; \n  map(~rollsum(.x, k = 29)) |&gt; \n  map(tk_tbl) |&gt; \n  bind_rows(.id = \"type\")\n\n\n\n\n\nIn der Abbildung 70.14 siehst du einmal das Ergebnis der drei rollenden Maßzahlen. Im Folgenden habe ich zuerst das Template p_temp erstellt und dann über den Operator %+% die Datensätze zum rollenden Mittelwert, zu dem rollenden Maximum und der rollenden Summe ersetzt. Die rollende Summe habe ich noch auf der \\(\\log\\)-transformierten \\(y\\)-Achse dargestellt.\n\n\nR Code [zeigen / verbergen]\np_temp &lt;- ggplot() +\n  aes(index, value, color = type) +\n  theme_minimal() +\n  geom_point2() +\n  stat_smooth(se = FALSE) +\n  labs(x = \"Datum\", y = \"Rollende statistische Maßzahl\", \n       color = \"Type\") +\n  scale_color_okabeito() \n\n\nWir sehen in der folgenden Abbildung, dass sich die Messtypen dann doch nicht so stark in durch die rollenden Maßzahlen unterscheiden. Wir haben ja schon in der Orginalabbildung das Problem gehabt, dass sich die Werte sehr stark ähneln. Das scheint auch über 29 Tage der Fall zu ein. Was man besser sieht, ist das wellenförmige Ansteigen der Temperatur über die gemessene Zeit. Wir hatten also immer mal wieder etwas kältere Phasen, die von wärmeren Phasen abgelöst wurden.\n\n\nR Code [zeigen / verbergen]\np_temp %+%\n  roll_mean_tbl +\n  ylim(0, 40)\n\np_temp  %+%\n  roll_max_tbl +\n  ylim(0, 40)\n\np_temp  %+%\n  roll_sum_tbl +\n  scale_y_log10()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Rollender Mittelwert.\n\n\n\n\n\n\n\n\n\n\n\n(b) Rollendes Maximum.\n\n\n\n\n\n\n\n\n\n\n\n(c) Rollende Summe\n\n\n\n\n\n\n\nAbbildung 70.14— Darstellung der rollenden Mittelwerte, maximalen Werte sowie aufsummierten Werte über 29 Tage. Die aufsummierten Werte sind auf logarithmischen Skala dargestellt. Gegenüber der orginalen Abbildung sehen wir schon etwas mehr Ordnung. Die drei Arten der Messung unterscheiden sich aber weiterhin kaum.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#sec-time-two-compare",
    "href": "time-space-pseudo-time-series.html#sec-time-two-compare",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.6 Vergleich von Zeitreihen",
    "text": "70.6 Vergleich von Zeitreihen\nUnsere Dronenüberflugdaten sind etwas besondere Daten, wenn wir uns Zeitreihen anschauen. Wir haben zwar auch einen zeitlichen Verlauf auf der \\(x\\)-Achse, aber der Zeitrahmen ist mit unter einem Jahr zu klein um einen zyklischen Verlauf zu beobachten. Wir wollen hier auch etwas anderes erreichen. Uns interessieren die einzelnen Beobachtungen nicht, wir wollen die angepasste Graden durch die Punktewolken vergleichen. In der Abbildung 70.15 siehst du nochmal die angepassten Kurven ohne die einzelnen Messpunkte. Eigentlich rechnen wir hier einen Gruppenvergleich über die Zeit. Spannende Sache, die wollen wir uns dann mal genauer ansehen. Wir werden hier aber keinen statistischen Test rechnen, sondern nur ausrechnen in wie weit sich die beiden Parzellen numerisch im Ertrag unterscheiden.\n\n\nR Code [zeigen / verbergen]\ncsh_tbl |&gt; \n  ggplot(aes(day, g_tm_plot, color = parzelle)) +\n  theme_minimal() +\n  geom_point(alpha = 0.4) +\n  stat_smooth(se = FALSE) +\n  scale_color_okabeito() \n\n\n\n\n\n\n\n\nAbbildung 70.15— Die Graserträge für die beiden Parzellen Uelzen und Wiese von Mai bis Ende September. Wir sind an der Fläche zwischen den beiden Graden interessiert.\n\n\n\n\n\nGibt es also einen Unterschied zwischen den beiden Parzellen \\(Uelzen\\) und \\(Wiese\\) im Bezug auf den Ertrag? Dafür müssen wir die Differenz der Graden an jedem Punkt berechnen. Oder anders formuliert, wir wollen die Fläche zwischen den beiden Kurven berechnen. Um die Fläche zu berechnen, brauchen wir die Koordinaten, die die Kurven beschreiben. Wir machen uns es hier aber etwas einfacher und berechnen die Kurven nochmal separat mit der Funktion gam() aus dem R Paket {mgcv}. In beiden Tabs sehen wir dann jeweils die Modellanpassungen für die beiden Parzellen in Uelzen und auf der Wiese.\n\ngam() auf Uelzengam() auf Wiese\n\n\nWenn du ein GAM rechnest, dann musst du auf jeden Fall, die Variable, die auf der \\(x\\)-Achse ist nochmal in ein s() packen, damit hier auch ein Spline bzw. eine Glättung mit der Variable gerechnet wird.\n\n\nR Code [zeigen / verbergen]\ngam_uelzen_fit &lt;- csh_tbl |&gt; \n  filter(parzelle == \"Uelzen\") |&gt; \n  gam(g_tm_plot ~ s(day_num), data = _)\ngam_uelzen_fit\n\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ng_tm_plot ~ s(day_num)\n\nEstimated degrees of freedom:\n8.56  total = 9.56 \n\nGCV score: 311.7048     \n\n\nDas Ergebnis ist relativ nichts sagend für uns, wir nutzen jetzt gleich den Fit um die Fläche unter der Kurve zu berechnen. Der GCV score ist in etwa ein AIC-Wert. Damit sind Modelle mit kleineren GCV-Werten zu bevorzugen.\n\n\nWenn du ein GAM rechnest, dann musst du auf jeden Fall, die Variable, die auf der \\(x\\)-Achse ist nochmal in ein s() packen, damit hier auch ein Spline bzw. eine Glättung mit der Variable gerechnet wird.\n\n\nR Code [zeigen / verbergen]\ngam_wiese_fit &lt;- csh_tbl |&gt; \n  filter(parzelle == \"Wiese\") |&gt; \n  gam(g_tm_plot ~ s(day_num), data = _)\ngam_wiese_fit\n\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ng_tm_plot ~ s(day_num)\n\nEstimated degrees of freedom:\n8.61  total = 9.61 \n\nGCV score: 190.3596     \n\n\nDas Ergebnis ist relativ nichts sagend für uns, wir nutzen jetzt gleich den Fit um die Fläche unter der Kurve zu berechnen. Der GCV score ist in etwa ein AIC-Wert. Damit sind Modelle mit kleineren GCV-Werten zu bevorzugen.\n\n\n\nDann können wir schon über die Funktion integrate() die Fläche unter der Kurve (eng. area under the curve, abk. AUC) berechnen. Dafür brauchen wir dann einmal die Funktion der Kurve, die wir uns mit predict() generieren. Dann wollen wir noch den ersten bis zum letzten Zeitpunkt integrieren. Da wir dann einunddreißig Messzeitpunkte haben, integrieren wir von Eins bis Einunddreißig. Ich mache dann beides einmal in den folgenden Tabs. Hier musst du manchmal etwas frickeln, bist du die Anzahl deiner Messtage weißt. Ich muss ja immer schauen, denn ich habe das Experiment ja nicht gemacht.\n\nAUC für UelzenAUC für Wiese\n\n\n\n\nR Code [zeigen / verbergen]\nf_uelzen_gam &lt;- function(x) predict(gam_uelzen_fit, tibble(day_num = x))\nintegrate(f_uelzen_gam, 1, 31)  \n\n\n1297.45 with absolute error &lt; 0.076\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nf_wiese_gam &lt;- function(x) predict(gam_wiese_fit, tibble(day_num = x))\nintegrate(f_wiese_gam, 1, 31)  \n\n\n1182.063 with absolute error &lt; 0.11\n\n\n\n\n\nAm Ende haben wir dann die Fläche unter der Kurve für die Parzelle in Uelzen mit \\(1297\\) und die Fläche der Parzelle der Wiese mit \\(1182\\). Damit unterscheiden sich die beiden Parzellen um einen Ertrag von \\(115\\). Wir können eine einzelne Zahl nicht statistisch Testen, daher steht die Zahl so erstmal im Raum. Ob das jetzt viel oder wenig Ertrag ist, muss du selber entscheiden. Im folgenden Kasten zeige ich nochmal, wie du mit Messwiederholungen dann doch noch eine statistische Aussage über zwei Gruppen erhalten kannst.\n\n\n\n\n\n\nAnwendungsbeispiel: Vergleich von Zeitreihen mit Wiederholungen\n\n\n\nWir hatten uns eben gerade zwar ein Beispiel für den Vergleich zweier Zeitreihen angeschaut, aber hatten wir dort keine Wiederholungen, die wir zuordnen konnten. Wenn wir mit Pflanzen arbeiten, dann können wir das Wachstum über die Zeit bei jeder einzelnen Pflanze messen. Dann können wir aber auch den Verlauf des Wachstums für jede Pflanze darstellen. Damit haben wir dann auch noch eine andere Möglichkeit die Daten zu analysieren. Dazu nutzen wir jetzt ein Beispiel mit Baumwolle. Wir haben zwei Typen von Baumwole vorliegen. Einmal die Standardsorte ctrl sowie eine neue genetisch veränderte Sorte genetic. Wir haben das Wachstum an zwölf Pflanzen P1 bis P12 an insgesamt achtzehn Terminen gemessen. Wir haben die Daten in einem Wide-Format vorliegen und bauen uns deshalb mit der Funktion pivot_longer() einen Long-Format. Vorher müssen wir noch das Datum in Messtage umwandeln, damit wir besser mit den Werten rechnen können. Für die Darstellung nutzen wir dann die ursprünglcihe Datumsspalte.\n\n\nR Code [zeigen / verbergen]\ncotton_time_tbl &lt;- read_excel(\"data/timeseries_cotton.xlsx\", sheet = \"diameter\") |&gt; \n  group_by(trt) |&gt; \n  mutate(day_measured = 1:n()) |&gt; \n  pivot_longer(cols = P1:P12,\n               names_to = \"plant_id\",\n               names_pattern = \".(\\\\d+)\",\n               names_transform = as.numeric,\n               values_to = \"height\") |&gt; \n  ungroup()\n\n\nIn der Abbildung 70.16 siehst du einmal die Daten der Wuchshöhe der zwölf Baumwollpflanzen pro Sorte über die achtzehn Messtermine visualisiert. Die beiden Baumwolllinien sind jeweils farbig markiert, die einzelnen Linien entsprechen den jeweils zwölf Pflanzen pro Linie. Wir müssen hier etwas mit der Funktion new_scale_color() arbeiten, damit wir dann wieder einen neuen Farbgradienten einführen können. Die Linien sind mit der loess()-Funktion durch die Punkte geschätzt. Wir speichern die Abbildung auch einmal in dem Objekt p1, da wir gleich noch die Abbildung mit der Auswertung der Flächen unter den Kurven zusammenbringen wollen.\n\n\nR Code [zeigen / verbergen]\np1 &lt;- ggplot() +\n  aes(date, height, group = plant_id) +\n  theme_minimal() +\n  geom_smooth(data = filter(cotton_time_tbl, trt == \"ctrl\"),\n              aes(color = plant_id),\n              method = \"loess\", se = FALSE) +\n  scale_color_gradientn(colors = c('#99000d', '#fee5d9'), guide=\"none\") +\n  new_scale_color() +\n  geom_smooth(data = filter(cotton_time_tbl, trt == \"genetic\"), \n              aes(color = plant_id),\n              method = \"loess\", se = FALSE) +\n  scale_color_gradientn(colors = c('#084594', '#4292c6'), guide=\"none\") +\n  new_scale_color() +\n  geom_point(data = cotton_time_tbl, aes(color = trt)) +\n  scale_color_manual(values = c('#99000d', '#084594')) +\n  theme(legend.position = \"top\") +\n  labs(color = \"Baumwolllinie\", x = \"\", y = \"Wuchshöhe in [cm]\")\np1  \n\n\n\n\n\n\n\n\nAbbildung 70.16— Wuchshöhe der zwölf Baumwollpflanzen pro Sorte über die achtzehn Messtermine. Die beiden Baumwolllinien sind jeweils farbig markiert, die einzelnen Linien entsprechen den jeweils zwölf Pflanzen pro Linie.\n\n\n\n\n\nJetzt stellt sich die Frage, ob sich das Wachstum über die Zeit in den beiden Linien unterscheidet. Dafür müssen wir die Fläche unter der Kurve für jede Pflanze berechnen. Dann können wir die Flächen vergleichen. Wenn das Wachstum gleich wäre, dann wären auch die Flächen gleich. Ich habe mir dafür die Funktion get_area() gebaut, die intern die Funktion loess() angepasst für diesen Datensatz aufruft. Dann brauche die noch die Funktion die integriert werden soll, die brauche ich mir mit der Funktion predict(). Abschließend muss ich noch der Funktion integrate() mitteilen von welchem \\(x\\)-Wert ich integrieren will. Ich entscheide mich hier von der ersten Messung bis zur letzten Messung am achtzehnten Tag zu integrieren.\n\n\nR Code [zeigen / verbergen]\nget_area &lt;- function(tbl) {\n  fit &lt;- loess(height ~ day_measured, tbl)\n  f &lt;- function(x) predict(fit, newdata = x)\n  integrate(f, 1, 18)$value  \n}\n\n\nStatt mit der Funktion loess() lassen sich die Kurven auch mit der Funktion gam() aus dem R Paket {mgcv} bauen. Ich nutze hier loess(), da die Funktion einfach zu nutzen ist und für die Genauigkeit hier ausreicht. Wenn du die Funktion gam() nutzt, dann musst die Funktion predict() anpassen, da bei gam() nur Datensätze als newdata akzeptiert werden.\nNachdem ich mir die nun Funktion gebaut habe, kann ich dann für jede Kombination aus Linie und Pflanze einmal die Fläche unter der Kurve auc (eng. area under the curve) berechnen. Ich nutze dazu die Funktionen nest() und map() um mir die Sache einfacher zu machen. Ich könnte auch mit filter() mir alle Subgruppen rausfiltern und am Ende zusammenbauen. Aber so geht es eben schneller.\n\n\nR Code [zeigen / verbergen]\nauc_cotton_tbl &lt;- cotton_time_tbl |&gt; \n  group_by(trt, plant_id) |&gt; \n  nest() |&gt; \n  mutate(auc = map(data, ~get_area(.x))) |&gt; \n  unnest(auc) \n\n\nDann kann ich auch schon einen t-Test für den Vergleich der zwölf Flächen unter der Kurve für die Kontrolllinie und der neuen genetischen Linie rechnen. Prinzipiell ginge hier auch ein nicht-parametrischer Test, aber die Daten sehen einigermaßen normalverteilt aus, wie du gleich in den Boxplots in der Abbildung 70.17 sehen wirst.\n\n\nR Code [zeigen / verbergen]\nt.test(auc ~ trt, data = auc_cotton_tbl)\n\n\n\n    Welch Two Sample t-test\n\ndata:  auc by trt\nt = 2.5392, df = 21.985, p-value = 0.0187\nalternative hypothesis: true difference in means between group ctrl and group genetic is not equal to 0\n95 percent confidence interval:\n 0.3128222 3.1016126\nsample estimates:\n   mean in group ctrl mean in group genetic \n             15.91998              14.21277 \n\n\nWir haben also einen signifikanten \\(p\\)-Wert für den Verglich der Flächen unter der Kurve für die beiden Linien. Ich baue mir jetzt einmal den Boxplot in Abbildung 70.17 und speichere mir den Plot auch gleich in ein Objekt p2. Ich werde dann die beiden Abbildungen p1 und p2 gleich einmal zusammenbringen. Vieles von dem Code dient nur die Abbildung schöner zu machen.\n\n\nR Code [zeigen / verbergen]\np2 &lt;- auc_cotton_tbl |&gt; \n  ggplot(aes(trt, auc, fill = trt)) +\n  theme_minimal() +\n  geom_boxplot(alpha = 0.8)  +\n  scale_fill_manual(values = c('#99000d', '#084594')) +\n  theme(legend.position = \"none\") +\n  labs(y = \"Fläche unter der Kurve\", x = \"\") +\n  annotate(\"text\", x = 1.5, y = 19, label = \"p = 0.019\") +\n  scale_y_continuous(position = \"right\")\np2\n\n\n\n\n\n\n\n\nAbbildung 70.17— Boxplot der Fläche unter der Kurve für die beiden Baumwolllinien. Die Achsenbeschriftung ist auf der rechten Seite, da die Abbildung gleich mit den zeitlichen Verläufen zusammengebracht wird.\n\n\n\n\n\nDann können wir auch die beiden Abbildungen p1 und p2 mit dem R Paket {patchwork} zusammenbringen und eine Annotation mit den Buchstaben A und B ergänzen. Dann mache ich den Boxplot noch über die Funktion plot_layout() sehr viel schmaler, als den zeitlichen Verlauf. Eigentlich brauchen wir dann nur die Abbildung 70.18 veröffentlichen, die Abbildung bringt ja alles zusammen. Anscheinend gibt es einen Unterschied zwischen den beiden Linien. Überraschenderweise ist unsere neue genetische Linie signifikant kleiner. Oder andersherum, die Linie ist kleiner, ob das gewollt ist war oder nicht, kann ich dir nicht beantworten.\n\n\n\n\n\n\n\n\nAbbildung 70.18— (A) Wuchshöhe der zwölf Baumwollpflanzen pro Sorte über die achtzehn Messtermine. Die beiden Baumwolllinien sind jeweils farbig markiert, die einzelnen Linien entsprechen den jeweils zwölf Pflanzen pro Linie. Die Kurven wurden über eine loess-Funktion geschätzt. (B) Boxplot der Fläche unter der Kurve für die beiden Baumwolllinien. Der \\(p\\)-Wert stammt aus einem Welch t-Test.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-pseudo-time-series.html#wie-weiter",
    "href": "time-space-pseudo-time-series.html#wie-weiter",
    "title": "70  Pseudo Zeitreihen",
    "section": "70.7 Wie weiter?",
    "text": "70.7 Wie weiter?\nUnd wie jetzt weiter? Was ist wenn du eine Vorhersage machen willst? Ja in dem Fall können wir dann im nächsten Kapitel einmal schauen, wie wir eine klassische Zeitreihenanalyse rechnen. Wir brauchen aber auf jeden Fall eine lange Beobachtungsdauer mit vielen Zeitpunkten. Aber das schaue dir am besten einmal im nächsten Kapitel an.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>70</span>  <span class='chapter-title'>Pseudo Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-time-series.html",
    "href": "time-space-time-series.html",
    "title": "71  Zeitreihen",
    "section": "",
    "text": "71.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 18:28:54\nIn diesem Kapitel wollen wir uns mit Zeitreihen (eng. time series) beschäftigen. Was ja auch irgendwie zu erwarten war, denn so heißt ja auch das Kapitel hier. Im Gegensatz zu dem vorherigen Kapitel, wollen wir uns hier aber mit den “echten” Zeitreihen beschäftigen. Mit echten Zeitreihen meine ich Zeitreihen, die im statistischen Sinne eine Reihe von Zeiten sind. Wir haben somit auf der \\(x\\)-Achse einer potenziellen Visualisierung die Zeit dargestellt. Wir können aber auch nur eine Reihe von zeitlichen Abständen vorliegen haben. Wir wollen dann auswerten, ob es über den zeitlichen Verlauf einen Trend gibt oder wir ein gutes Modell für den Verlauf der Beobachtungen anpassen können. Ziel ist es dabei den zukünftigen Verlauf vorherzusagen. Es geht hier also weniger um statistisches Testen als um eine Modell für eine Vorhersage. Also wir suchen ein Modell für den zukünftigen Verlauf eines Messwertes oder aber zeitlichen Abständen.\nIn der Abbildung 71.1 sehen wir eine typische Zeitreihe, die in der klassischen Analyse von Zeitreihen erwartet wird. Mit erwartet wird meine ich, dass wir hier einen Messwert über eine längere Zeit beobachten und wir dabei eine zyklische Abfolge der Messwerte über die Zeit sehen. Die Idee der Zeitreihenanalyse ist unn den weiteren Verlauf der Zeitreihe in der Zukunft vorherzusagen. Wie würden die Messwerte für die zukünftigen Zeitpunkte aussehen? Was können wir erwarten? Diese Fragen wollen wir in diesem Kapitel einmal näher betrachten.\nWas bei anderen Themen gilt, gilt natürlich auch für Zeitreihen. Für die Analyse von Zeitreihen wurden und werden ganze Bücher geschrieben. Damit kann ich in diesem Übersichtskapitel nicht dienen. Aber das ist ja auch hier nicht das Ziel. So tiefgreifend kann ich hier nicht die Zusammenhänge darstellen. Aber vermutlich so ausreichend dargestellt, dass du dann in anderen Büchern weiterlesen kannst. Was sollst du also lesen, wenn du mehr wissen willst als hier in dem Kapitel steht? Ich würde dir Forecasting: Principles and Practice als erstes Buch empfehlen. Du hast hier sogar YouTube Videos für die wichtigsten Inhalte. Dann würde ich den Kurs STAT 510: Applied Time Series Analysis als umfangreichen, theoretischen Hintergrund empfehlen. Du findest dort auch teilweise R Code etwas in den Skript vergraben. Wenn du noch mehr lesen willst, dann kann ich dir folgende Literatur empfehlen. Robert et al. (2006) liefert eine gute Übersicht über die Anwendung in R, ist aber schon etwas älter. Das Gleiche gilt dann auch für das Buch von Chan & Cryer (2008) und Cowpertwait & Metcalfe (2009). Dennoch bilden alle drei Bücher die Grundlagen der Analysen von Zeitreihen super ab. Für eine Abschlussarbeit sollten die Quellen also allemal reichen.\nEs gibt reichlich R Pakete, die ich teilweise tiefer vorstellen werden. Mit den R Paketen {tktime}, {fable} und {modeltime} gibt es neben den built-in Paketen einiges zur Auswahl. Ich werde hier aber auch alle drei Pakete einmal vorstellen und diskutieren. Mehr geht natürlich immer deshalb kann ich dir da noch die Übersicht auf dem Big Book of R – Time Series Analysis and Forecasting empfehlen. Dort findest du dann noch mehr frei verfügbare Literatur und auch das ein oder andere R Paket, was genau in der entsprechenden Literatur genutzt und besprochen wird.\nWenn es um Zeitreihen geht, dann ist die Formatierung der Spalte mit dem Datum eigentlich so ziemlich das aufwendigste. Achte bitte darauf, dass du eine einheitlich formatierte Datumsspalte hast, die sich nicht im Laufe der Zeilen ändert. Wenn das der Fall ist, dann musst du meist händisch nochmal die Daten anpassen und das ist meistens sehr aufwendig. Das R Paket {timetk} liefert dankenswerterweise Funktionen für die Konvertierung von verschiedenen Zeitformaten in R. Deshalb schaue einmal in die Hilfeseite Time Series Class Conversion – Between ts, xts, zoo, and tbl und dann dort speziell der Abschnitt Conversion Methods. Leider ist Zeit in R wirklich relativ.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, janitor, see, readxl,\n               xgboost, tidymodels, modeltime, forecast,\n               lubridate, plotly, zoo, timetk, xts,\n               corrplot, GGally, conflicted)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(magrittr::set_names)\nconflicts_prefer(plyr::mutate)\nconflicts_prefer(dplyr::slice)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>71</span>  <span class='chapter-title'>Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-time-series.html#daten-visualisierung",
    "href": "time-space-time-series.html#daten-visualisierung",
    "title": "71  Zeitreihen",
    "section": "71.2 Daten & Visualisierung",
    "text": "71.2 Daten & Visualisierung\nIn diesem Abschnitt wollen wir uns einmal ein paar “echte” Zeitreihen anschauen, die den Anforderungen der klassischen Zeitreihenanalyse an eine Zeitreihe genügen. Du kennst ja schon aus dem vorherigen Kapitel die Möglichkeiten der Visualisierung, deshalb packe ich hier auch gleich zu den Daten die entsprechenden Abbildungen. Dann wird dir der Zusammenhang auch schneller bewusst. Wenn die Daten nochmal wegen dem Datum formatiert werden mussten, dann habe ich das auch gleich hier in einem Abwasch erledigt. Wenn da noch Fragen sind, dann schaue gerne nochmal in das vorherige Kapitel, da findest du dann noch mehr Beispiele. Hier soll es mehr um die Verläufe und die Vorhersage gehen.\n\n\n\n\n\n\nInspirationen von The R Graph Gallery\n\n\n\nWenn du noch Inspirationen suchst, wie du deine Zeitreihe noch schöner darstellen könntest, dann besuche doch The R Graph Gallery - Time Series. Dort findest du verschiedene Darstellungen einer Zeitreihe mit {ggplot}. Ich finde den Lollipop-Chart im Kontext einer Zeitreihe sehr spannend. Aber lass dich einfach mal inspirieren.\n\n\nFangen wir also mit dem ersten Datensatz an. Im Sommer 1987 maßen die Ranger des Yellowstone-Nationalparks die Zeit zwischen den Ausbrüchen des Old Faithful Geysirs. Dieser Geysir ist für seine relativ regelmäßigen Ausbrüche bekannt, aber wie du dir vorstellen kannst, ist der Geysir keine Uhr. Ein Ziel bei der Erfassung der Zeiten war es, eine Möglichkeit zu finden, den Zeitpunkt des nächsten Ausbruchs vorherzusagen, um den Touristen, die auf einen Ausbruch warten, die Wartezeit zu erleichtern. Wir haben also eine Zeitreihe in Minuten aus dem Yellowstone-Nationalpark vorliegen. Die Daten in Minuten für \\(n=107\\) fast aufeinanderfolgende Wartezeiten lauten dann wie folgt.\n\n\nR Code [zeigen / verbergen]\nerupt &lt;- c(78, 74, 68, 76, 80, 84, 50, 93, 55, 76, 58, 74, 75, 80, 56, 80, 69, 57,\n           90, 42, 91, 51, 79, 53, 82, 51, 76, 82, 84, 53, 86, 51, 85, 45, 88, 51,\n           80, 49, 82, 75, 73, 67, 68, 86, 72, 75, 75, 66, 84, 70, 79, 60, 86, 71,\n           67, 81, 76, 83, 76, 55, 73, 56, 83, 57, 71, 72, 77, 55, 75, 73, 70, 83,\n           50, 95, 51, 82, 54, 83, 51, 80, 78, 81, 53, 89, 44, 78, 61, 73, 75, 73,\n           76, 55, 86, 48, 77, 73, 70, 88, 75, 83, 61, 78, 61, 81, 51, 80, 79)\n\n\nWir haben hier also eine echte Zeitreihe vorliegen. Wir haben die zeitlichen Abstände zwischen zwei Ausbrüchen. Das ist dann auch die einfachste mögliche Zeitreihe. Dennoch können wir dann an diesem Beispiel sehr viel erklären und uns die gängigen Konzepte der klassischen Zeitreihenanalyse veranschaulichen. In der Abbildung 71.2 siehst du dann nochmal den Verlauf der Eruptionen über die Zeit. Dir kommt die Abbildung sicherlich aus der Einleitung des Kapitels bekannt vor. Dort habe ich die Abbildung einmal für ein generelles Beispiel genutzt, hier ist dann der richtige Kontext.\n\n\n\n\n\n\n\n\nAbbildung 71.2— Dauer zwischen zwei Eruptionen des Old Faithful Geysirs. Eine klare zyklische Zeitreihe lässt sich aus der Abbildung ableiten.\n\n\n\n\n\nAls nächstes Datenbeispiel möchte ich den schon fast ikonischen Anstieg an \\(CO_2\\) in der Atmosphäre einmal betrachten. Ich habe die Daten von dem Global Monitoring Laboratory heruntergeladen. Du kannst dir auch gern einmal die Daten für \\(CH_4\\) \\(N_2O\\) und \\(SF_6\\) anschauen. Auch hier liegen Verläufe vor, die du dann einmal visualisieren und vorhersagen kannst. Wenn du noch mehr Beispiele von echten Daten haben möchtest, dann besuch doch die Webseite Our World in Data.\nIch muss mich hier etwas strecken um die Daten richtig sauber einzulesen. Zum einen nutze ich die \\(CO_2\\) Daten für die Monate und dann einmal für die Tage. Als erste habe ich das Problem, dass ich erstmal einiges an zeilen überspringen muss, bis die echten Daten kommen. Leider hat das Datumsformat auch eine echt schlimme Kodierung in den Daten. Daher nutze ich die Funktion parse_date_time() um mir ein Datum wiedergeben zu lassen. Vorher muss ich die Monate noch so umbauen, dass die Monate immer zwei Zeichen lang sind. Leider braucht as.Date() immer einen Tag, was bei den monatlichen Daten nicht gegeben ist. In den folgenden Analysen nutze ich dann beide Datensätz um mal zu schauen, wie deatiliert die Informationen vorliegen müssen. Reicht ein Wert pro Monat oder aber macht es ein Wert pro Tag besser?\n\n\nR Code [zeigen / verbergen]\nco2_monthly_tbl &lt;- read_csv(\"data/co2_mm_mlo.csv\", skip = 40) |&gt; \n  mutate(month = str_pad(month, 2, pad = \"0\", side = \"left\"),\n         date = parse_date_time(str_c(year, month), \"ym\"))\n\nco2_daily_tbl &lt;- read_csv(\"data/co2_daily_mlo.csv\", skip = 32, col_names = FALSE) |&gt; \n  set_names(c(\"year\", \"month\", \"day\", \"decimal date\", \"average\")) |&gt; \n  mutate(month = str_pad(month, 2, pad = \"0\", side = \"left\"),\n         date = parse_date_time(str_c(year, month, day), \"ymd\"))\n\n\nIn der Abbildung 71.3 siehst du einmal die Verläufe des \\(CO_2\\) Anstiegs in der Atmosphäre. Beachte hier, dass die beiden Zeitreihen unterschiedlich lang sind. Die monatlichen Daten beginnen in den 1960ziger Jahren wobei wir die Daten für die täglichen Messungen erst ab den späten 70zigern vorliegen haben. Ich habe hier jetzt einmal die Funktion plot_time_series() aus dem R Paket {timetk} genutzt. Es gibt natürlich auch noch andere Möglichkeiten, aber ich mag die interaktive Funktion, die du sonst über den Umweg über {plotly} nutzen müsstest. Aber da gibt es dann in dem vorherigen Kapitel genug Beispiele für. Mehr findest du auch auf der Seite von R Coder - Evolution charts.\n\nR Code [zeigen / verbergen]\nco2_monthly_tbl |&gt; \n    plot_time_series(date, average, .interactive = TRUE) \nco2_daily_tbl |&gt; \n    plot_time_series(date, average, .interactive = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Gemittelt über den Monat.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Gemittelt über den Tag.\n\n\n\n\n\n\n\nAbbildung 71.3— Verlauf des \\(CO_2\\) Anstiegs in der Atmosphäre. Hier einmal die Darstellung mit der Funktion plot_time_series() aus dem R Paket {timetk}. Die beiden Datensätze haben aber nicht die gleiche Zeitspanne beobachtet.\n\n\n\nEinen weiteren Datensatz, den wir uns anschauen wollen, ist ein Datensatz zu der Milchleistung von Kühen stammt aus dem Tutorium Analysing Time Series Data – Modelling, Forecasting and Data Formatting in R. Wir haben hier ein idealisierten Datensatz vorliegen, so dass wir uns nicht mit dem Datumsformat quälen müssen. Der Datensatz wurde auch für die Analysen künstlich erstellt. Daher ist die Milchleistung auch nicht als echt anzusehen. Wir haben es hier im Prinzip mit simulierten Daten zu tun.\n\n\nR Code [zeigen / verbergen]\nmilk_tbl &lt;- read_csv(\"data/monthly_milk.csv\") \n\n\nIn der Tabelle 71.1 siehst du nochmal einen Auszug aus den Milchdaten. An jedem Tag haben wir die Milchleistung für eine Kuh aufgetragen. Ich würde hier davon ausgehen, dass es sich um die mittlere Leistung handelt. In Wirklichkeit sind die Daten vermutlich etwas komplizierter und wir haben nicht nur eine Leistungsbewertung pro Tag für eine Kuh. Aber für diese Übersicht soll es reichen.\n\n\n\n\nTabelle 71.1— Auszug aus den Daten zu der Milchleistung von Kühen.\n\n\n\n\n\n\nmonth\nmilk_prod_per_cow_kg\n\n\n\n\n1962-01-01\n265.05\n\n\n1962-02-01\n252.45\n\n\n1962-03-01\n288\n\n\n1962-04-01\n295.2\n\n\n…\n…\n\n\n1975-09-01\n367.65\n\n\n1975-10-01\n372.15\n\n\n1975-11-01\n358.65\n\n\n1975-12-01\n379.35\n\n\n\n\n\n\n\n\nUm die Milchdaten in der Abbildung 71.4 darzustellen nutzen wir die Funktion plot_time_series() aus dem R Paket {timetk}. Eigentlich ist es ein Zusammenschluss von {ggplot} und {plotly}. Wenn du die Option .interactive = TRUE wie ich setzt, dann bekommst du einen semi-interaktiven Plot durch {plotly} wiedergegeben. Mehr Informationen erhälst du dann auf der Hilfeseite von timetk zu Visualizing Time Series. Wie immer wenn du so generische Funktionen nutzt, musst du schauen, ob dir die Abbildung so gefällt. Du verlierst hier etwas Flexibilität und erhälst dafür aber schneller deine Abbildungen.\nWir erkennen ganz gut, dass wir hier einen Effekt der Saison oder aber der Jahreszeit haben. Wir haben zyklische Peaks der Milchleistung über das Jahr verteilt. Gegen Ende unserer Zeitreihe sehen wir aber eine Art Plateau der Milchleistung. In der folgenden Analyse wollen wir einmal schauen, ob wir die zukünftige Milchleistung anhand der bisherigen Daten vorhersagen können.\n\n\nR Code [zeigen / verbergen]\nmilk_tbl |&gt;\n  plot_time_series(month, milk_prod_per_cow_kg, .interactive = TRUE)\n\n\n\n\n\n\n\n\nAbbildung 71.4— Die Darstellung der Milchdaten durch das R Paket {timetk} und der Funktion plot_time_series(), die durch die Option .interactive = TRUE intern dann {plotly} aufruft.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>71</span>  <span class='chapter-title'>Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-time-series.html#analysen-von-zeitreihen",
    "href": "time-space-time-series.html#analysen-von-zeitreihen",
    "title": "71  Zeitreihen",
    "section": "71.3 Analysen von Zeitreihen",
    "text": "71.3 Analysen von Zeitreihen\nBis jetzt haben wir uns in dem vorherigen Kapitel die Visualisierung von Zeitreihen angeschaut. Häufig reicht die Visualisierung auch aus, wenn es um die Darstellung von Temperaturverläufen in einer Abschlussarbeit geht. Wir gehen jetzt aber einen Schritt weiter und wollen unsere Zeitreihe einmal statistisch Analysieren. Die Zeitreihenanalyse oder auch Zeitreihenprognose ist die Verwendung eines Modells zur Vorhersage künftiger Werte auf der Grundlage zuvor beobachteter Werte. Für dich bedeutet dies, dass Prognosen darüber erstellt werden, wie sich solche Zeitreihen in der Zukunft entwickeln werden. Wie in vielen anderen Tutorien auch, werde ich mir hier mal das häufigste Modell mit dem ARIMA Modell anschauen. Das ARIMA Modell ist eine Kombination aus der Auto-Regression (AR) und gleitendem Durchschnitt (MA). Neben dem ARIMA Modell gibt es noch weitere Möglichkeiten eine Zeitreihe zu analysieren. Ich gehe zwar auf einige Aspekte ein, aber eine bessere Übersicht als Michael Clark in seinem Artikel Exploring Time - Multiple avenues to time-series analysis schaffe ich hier nicht. Es gibt dann auch zu viele R Pakete aus denen du wählen könntest.\n\n71.3.1 Definitionen und Überblick\nIn dem folgenden Abschnitt möchte ich gerne einmal einen Überblick über die wichtigsten Begriffe in der Analyse von Zeitreihen geben. Jetzt geht es also los mit der “richtigen” Zeitreihenanalyse. Teilweise sind es etwas speziellere Begriffe, so dass ich hier erstmal etwas zu den Begriffen schreibe und dann die einzelnen Begriffe nochmal tiefer erkläre. Als vertiefenden Einstieg kann ich hier auch das Buch Forecasting: principles and practice von Hyndman & Athanasopoulos (2018) empfehlen. Das Buch ist dann gleichzeitig als eine Webseite hinterlegt. Darüber hinaus gibt es dann noch passende erklärende Videos dazu.\n\nStationarität (eng. stationarity)\n\nEine gängige Annahme bei vielen Zeitreihenverfahren ist, dass die Daten stationär sind. Das klingt etwas seltsam, denn eigentlich soll sich doch was über die Zeit verändern. Wie kann dann eine Vorbedingung an Zeitreihen sein, dass Zeitreihen stationär sind? Ein stationärer Prozess hat die Eigenschaft, dass sich der Mittelwert, die Varianz und die Autokorrelationsstruktur im Laufe der Zeit nicht ändern. Wir sprechen hier also von statistischen Eigenschaften über den Zeitverlauf. Solange die Zeitreihe nicht stationär ist, können wir kein Zeitreihenmodell erstellen. Insbesondere sind AR oder MA nicht auf nicht-stationäre Reihen anwendbar. Es gibt drei grundlegende Kriterien, damit eine Reihe als stationäre Reihe eingestuft wird:\n\n\n\nDer Mittelwert der Reihe darf keine Funktion der Zeit sein, sondern muss konstant sein. Zeitpunkte in der Zukunft haben keine größeren mittleren Werte.\nDie Varianz der Reihe sollte keine Funktion der Zeit sein. Diese Eigenschaft wird als Homoskedastizität bezeichnet. Die Varianz steigt nicht mit der Zeit an und damit ist die Varianz homogen über die Zeitpunkte.\nDie Kovarianz des \\(i\\)-ten Messwerts und des (\\(i + m\\))-ten Messwert sollte keine Funktion der Zeit sein. Die Zeitpunkte untereinander zeigen nur eine eingeschränkte Korrelation. Das heißt, dass unsere Zeitpunkte zwar korreliert sein dürfen, aber der Effekt darf nicht zu stark sein.\n\nEs gibt verschiedene Methoden um aus Daten, die keine stationären Daten sind, einen stationären Datensatz zu erschaffen. Wir transformieren also unsere Daten so, dass es dann stationäre Daten werden. Für die spätere Darstellung können wir dann die Daten wieder zurücktransformieren.\n\nLag (deu. Zeitverzögerung)\n\nMit Lag (deu. Zeitverzögerung, abk. p) ist im Wesentlichen eine Verzögerung gemeint. Das Konzept des Lag ist zentral für das Verständnis der Zeitreihenanalyse. Betrachte dafür eine Folge von Zeitpunkten. Bei einem Lag von 1 vergleichst du die Zeitreihe \\(t\\) mit einer verzögerten Zeitreihe \\(t-1\\). Du verschiebst die Zeitreihe um einen Zeitpunkt, bevor du die Zeitreihe mit sich selbst vergleichst. So gehst du dann für gesamte Länge der Zeitreihe vor. Machen wir einmal ein Beispiel. Wir haben eine Autokorrelationsfunktion für das Lag 1 vorliegen. Wenn wir also eine Zeitreihe \\(t\\) haben und das Lag 1 berechnen wollen, dann entfernen wir den letzten Zeitpunkt und haben eine \\(t-1\\) gelaggte Zeitreihe. Wenn du das Lag 2 berechnest, dann entfernst du die letzten beiden Zeitpunkte aus den Daten. Wir schreiben anstatt des Lag 1 auch gerne \\(p(1)\\). Das Lag 2 wäre dann durch \\(p(2)\\) dargestellt. Mehr zu Lags mit Beispielen kannst du unter Time Series as Features finden.\n\nDifferenz\n\nDie Differenz (abk. d) zwischen zwei Zeitpunkten in einer Zeitreihe wird auch häufig benötigt um einen stationäre Zeitreihe zu erreichen. Dabei wird häufig auch von der Ordnung (eng. order) der Differenz gesprochen. Die Ordnung gibt aber nur an, die wievielte Differenz wir berechnet haben. Klingt wild, ist aber nichts anders als immer wieder die Differenz zwischen zwei Zahlen zu berechnen. Die Differenz 1. Ordnung \\(d(1)\\) zwischen den Zahlen \\(y = {2, 6, 7, 5}\\) ist \\(d(1) = {4, 1, 2}\\). Die Differenz 2. Ordnung \\(d(2)\\) ist dann nur noch die Differenz in der 1. Ordnung und damit \\(d(2) = {3, 1}\\).\n\nAutokorrelation\n\nWenn wir die Zeitreihen \\(t_1\\) und \\(t_2\\) vorliegen haben, so zeigt die normale Korrelation \\(\\rho(t_1, t_2)\\), wie sehr sich die zwei Zeitreihen ähneln. Die Autokorrelation hingegen beschreibt, wie ähnlich die Zeitreihe \\(t_1\\) oder \\(t_2\\) sich selbst ist. Damit beschreibt die Autokorrelation die inhärente Ähnlichkeit einer Zeitreihe \\(t\\). Anhand der Werte der Autokorrelationsfunktion können wir erkennen, wie stark sie mit sich selbst korreliert. Dafür nutzen wir ein sogenanntes Lag (deu. Verzögerung) um aus einer Zeitreihe \\(t\\) eine zweite Zeitreihe zu bauen. Bei jeder Zeitreihe ist die Korrelation bei einem Lag von 0 perfekt, da man dieselben Werte miteinander vergleicht. Wenn du nun eine Zeitreihe verschiebst, wirst du feststellen, dass die Korrelationswerte zwischen den Lags abnehmen. Wenn die Zeitreihe aus völlig zufälligen Werten besteht, gibt es nur eine Korrelation bei Lag gleich 0, aber keine Korrelation überall sonst. Bei den meisten Zeitreihen ist dies nicht der Fall, da die Werte im Laufe der Zeit abnehmen und somit eine gewisse Korrelation bei niedrigen Lag-Werten besteht. Damit kann die Autokorrelationsfunktion die Frequenzkomponenten einer Zeitreihe aufzeigen.\n\nAR Modell\n\nDas AR-Modell (autoregressive model) setzt den aktuellen Wert der Reihe in Beziehung zu ihren vergangenen Werten. Es geht davon aus, dass die Vergangenheitswerte in einem linearen Verhältnis zum aktuellen Wert stehen. Deshalb brauchen wir auch eine Art stationären Zeitverlauf.\n\nMA Modell\n\nDas MA-Modell (moving average model) setzt den aktuellen Wert der Reihe mit dem weißen Rauschen oder den Fehlertermen der Vergangenheit in Beziehung. Es erfasst die Schocks oder unerwarteten Ereignisse der Vergangenheit, die sich noch immer auf die Reihe auswirken. Wir betrachten hier also hier den Fehler aus einer Regression und nicht die tatsächlichen Werte.\n\nARIMA Modell\n\nWenn wir die beiden Modelle AR und MA kombinieren erhalten wir das ARIMA Modell (abk. autoregressive integrated moving average, deu. autoregressiver gleitender Durchschnitt). Das ARIMA Modell ist dabei eine Erweiterung schon existierender Modelle und wird sehr häufig für die Analyse von Zeitreihen genutzt. Als wichtigste Anwendung gilt die kurzfristige Vorhersage. Das ARIMA Modell besitzt einen autoregressiven Teil (AR-Modell) und einen gleitenden Mittelwertbeitrag (MA-Modell). Das ARIMA Modell erfordern eigentlich stationäre Zeitreihen. Eine stationäre Zeitreihe bedeutet, dass sich die Randbedingungen einer Zeitreihe nicht verändern. Die zugrunde liegende Verteilungsfunktion der gemessenen Werte über die Zeitreihe muss zeitlich konstant sein. Das heißt konkret, dass die Mittelwerte und die Varianz zu jeder Zeit gleich sind. Gewisse Trends lassen sich durch ein ARIMA Modell herausfiltern.\n\nExponential smoothing\n\nAlternative zu ARIMA Modell gibt es noch das Exponential smoothing (abk. ets) was wir uns hier aber nicht mehr tiefer anschauen. Später nehmen wir das Exponential smoothing nochmal mit in den Modellvergleich gehen aber nicht auf die Theorie dahin ein.\n\nCross Correlation Functions and Lagged Regressions\n\nCross Correlation Functions and Lagged Regressions beschreibt die Korrelation zwischen verschiedenen Zeitreihen. Dabei vergleichen wir aber nicht die Zeitreihen an einem Zeitpunkt, sondern wollen wissen ob die eine Zeitreihe eine verschobene Zeitreihe der anderen ist. Auch hier gehe ich vorerst nicht auf die Analyse ein.\n\n\n\n\n71.3.2 Grundlagen der Modellierung von Zeitreihen\nIm Folgenden wollen wir einmal die Grundlagen der Zeitreihenanalyse verstehen. Wir brauchen nämlich als erstes stationäre Daten, wenn wir mit einem ARIMA-Modell unsere Daten analysieren wollen. Dann arbeiten wir uns zu der Autokorrelation bzw. dem autoregressiven Prozess (abk. AR-Prozess) vor. Wir brauchen die Idee des Lag und der Differenz um eine Autokorrelation und daraus dann auch einen AR-Prozess ableiten zu können. Zum Verständnis des Lag nutzen wir einmal unsere Daten für die Ausbrüchen des Old Faithful Geysirs im Yellowstone-Nationalpark.\nFangen wir also mit dem Beispiel für ein Lag an. Was ist nun also ein Lag? Ein Lag ist einfach nur eine Verschiebung der Daten um einen Wert. Wir schauen uns also für das Lag 1 die Werte ohne den letzten Wert an. Bei dem Lag 2 löschen wir die ersten letzten beiden Werte. Und dann ist schon fast klar was wir bei dem Lag 3 machen, wir löschen die letzten drei Werte. Wenn wir dann dennoch die paarweise Korrelation berechnen, dann berechnen wir nicht die Korrelation mit sich selber, das wäre bei Lag 0, sondern eben die Korrelation mit sich selbst verschoben um den Lag. Deshalb nennt sich das dann auch Autokorrelation der Zeitreihe.\nDann berechnen wir einmal mit der Funktion lag aus dem R Paket {dplyr} die Lags 1, 2, und 3. Alle Lags packen wir dann mit den originalen Daten zusammen in einen Datensatz und haben somit auch gleich einen Vergleich.\n\n\nR Code [zeigen / verbergen]\nerupt_tbl &lt;- tibble(erupt, \n                    erupt_p1 = dplyr::lag(erupt, 1),\n                    erupt_p2 = dplyr::lag(erupt, 2),\n                    erupt_p3 = dplyr::lag(erupt, 3))\nerupt_tbl\n\n\n# A tibble: 107 × 4\n   erupt erupt_p1 erupt_p2 erupt_p3\n   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1    78       NA       NA       NA\n 2    74       78       NA       NA\n 3    68       74       78       NA\n 4    76       68       74       78\n 5    80       76       68       74\n 6    84       80       76       68\n 7    50       84       80       76\n 8    93       50       84       80\n 9    55       93       50       84\n10    76       55       93       50\n# ℹ 97 more rows\n\n\nWie du siehst, haben wir immer eine Verschiebung um einen Wert dadurch, dass wir die letzten Werte entfernen. Daher können wir jetzt trotzdem eine lineare Regression auf die verschiedenen Lags und den originalen Daten rechnen. Dabei fliegen natürlich alle Zeilen aus den Datensatz wo wir einen fehlenden Wert haben, aber das ist ja dann auch gewünscht. In den folgenden Tabs kannst du einmal sehen, wie ich für verschiedene Lags die lineare Regression gerechnet habe. Nichts anderes ist dann auch ein AR-Modell. Wir berechnen über die lineare Regression die Korrelation für jedes Lag zu den originalen Daten.\n\nLag 1 oder \\(p(1)\\)Lag 2 oder \\(p(2)\\)Lag 3 oder \\(p(3)\\)\n\n\n\n\nR Code [zeigen / verbergen]\nlm(erupt_p1 ~ erupt, erupt_tbl) |&gt; \n  coef()\n\n\n(Intercept)       erupt \n119.4877108  -0.6846253 \n\n\n\n\n\n\nR Code [zeigen / verbergen]\nlm(erupt_p2 ~ erupt, erupt_tbl) |&gt; \n  coef()\n\n\n(Intercept)       erupt \n 31.8097211   0.5504338 \n\n\n\n\n\n\nR Code [zeigen / verbergen]\nlm(erupt_p3 ~ erupt, erupt_tbl) |&gt; \n  coef()\n\n\n(Intercept)       erupt \n101.2796080  -0.4264714 \n\n\n\n\n\nIn der Abbildung 71.5 siehst du nochmal die verschobenen Daten auf der \\(y\\)-Achse und die originalen Daten auf der \\(x\\)-Achse. Durch die Verschiebung ändert sich immer die Punktewolke und damit dann auch die Regression sowie die berechnete Korrelation als Vorzeichen der Steigung der Geraden. Die Idee ist eben, einen Zyklus in den Eruptionen zu finden. Wenn wir also immer kurz/lang Wartezeiten hätten, dann würde sich auch immer die Korrelation ändern, wenn wir um einen Wert verschieben. Das trifft natürlich nur zu, wenn es eben der Rhythmus um einen Zeitpunkt verschoben ist. Häufig ist aber nicht ein Zeitpunkt sondern eben zwei oder mehr. Das müssen wir dann durch eine Modellierung herausfinden.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) p(1) vs. Orginal Eruptionszeiten.\n\n\n\n\n\n\n\n\n\n\n\n(b) p(2) vs. Orginal Eruptionszeiten.\n\n\n\n\n\n\n\n\n\n\n\n(c) p(3) vs. Orginal Eruptionszeiten.\n\n\n\n\n\n\n\nAbbildung 71.5— Dastellung der orginalen Eruptionszeiten des Old Faithful Geysirs sowie die entsprechenden Daten für die Lag 1 bis 3. Die Regressiongleichung wurde für alle Zusammenhänge ergänzt.\n\n\n\n\nBevor wir aber mit der Modellierung von Zeitreihen beginnen, hier nochmal die vollständige Korrelationsmatrix für alle Lags \\(p\\) und den originalen Daten. Ich habe den Zusammenhang einmal in der Abbildung 71.6 dargestellt. Wenn du mehr über die Visualisierung der Korrelation erfahren möchtest, dann besuche das Kapitel zur Korrelation. Hier sehen wir dann gut, wie mit jedem Schritt im Lag die Korrelation im Vorzeichen flippt. Ein Zeichen, dass wir es hier mit einer zyklischen Zeitreihe zu tun haben und wir etwas in den Daten entdecken könnten.\n\n\n\n\n\n\n\n\nAbbildung 71.6— Korrelation zwischen den originalen Daten und den Lags, auch als \\(p\\) bezeichnet. Im unteren Bereich des Korrelationsplot sind die Scatterplost mit der Regressionsgraden eingezeichnet. Im oberen Bereich finden sich die berechneten Korrelationskoeffizienten \\(\\rho\\) für die paarweisen Vergleiche.\n\n\n\n\n\nDas war jetzt die händische Darstellung. Wir können uns die Autokorrelation auch über eine Zeitreihe anschauen. Wir nutzen hier die etwas primitive Funktion acf(), da nur die “alten” Funktionen nur mit einem Vektor von Zeiten klar kommen. Eigentlich brauchen wir ja zu jedem Wert ein Datum. Das haben wir hier aber nicht, deshalb müssen wir hier zu der alten Implementierung greifen.\n\n\nR Code [zeigen / verbergen]\nerupt_ts &lt;- tk_ts(erupt)\n\n\nIn der Abbildung Abbildung 71.7 (a) sehen wir die Autokorrelation zwischen den Orginaldaten des Geysirs und den entsprechenden Korrelationen zu den Lags 1 bis 5. Wenn du nochmal weiter oben schaust, dann haben wir für die Korrelationen von den Orginaldaten zu den entsprechenden Lags folgende Korrelationen berechnet. Wir hatten eine Korrelation von \\(\\rho = -0.68\\) zu Lag 1, eine Korrelation von \\(\\rho = 0.55\\) zu Lag 2 und ein \\(\\rho = -0.43\\) zum Lag 3 beobachtet. Die Korrelationen findest du dann als Striche auch in der Abbildung wieder.\nNun ist es aber so, dass natürlich die Lags untereinander auch korreliert sind. Diese Korrelation untereinander wollen wir dann einmal raus rechnen, so dass wir nur die partielle Korrelation haben, die zu den jeweiligen Lags gehört. Dabei entsteht natürlich eine Ordnung. Das Lag 1 wird vermutlich die meiste Korrelation erklären und dann folgen die anderen Lags. Deshalb nennen wir diese Art der Korrelation auch partial Autokorrelation (deu. partielle). Du siehst die Anteile der partiellen Korrelation zu den jeweiligen Lags dann in der Abbildung 71.7 (b). Wir werden dann später bei {tktime} eine bessere Art und Weise sehen die Abbildungen zu erstellen. Zum Verstehen sind die Abbildungen gut, aber schön sind die Abbildungen nicht.\n\n\nR Code [zeigen / verbergen]\nerupt_ts |&gt; \n  acf(main = \"Correlogram\", lag.max = 5, \n      ylim = c(-1, 1), xlim = c(1, 5))\n\nerupt_ts |&gt; \n  pacf(main = \"Partial Correlogram\", lag.max = 5, \n       ylim = c(-1, 1))\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Correlogram.\n\n\n\n\n\n\n\n\n\n\n\n(b) Partial Correlogram.\n\n\n\n\n\n\n\nAbbildung 71.7— Korrelationsabbildungen mit der Option lag.max = 5. Daher werden nur die ersten fünf Lags betrachtet. Die Abbildungen dienen der Veranschaulichung vom Lag. Für eine Veröffentlichung bitte die Funktionen aus {tktime} verwenden. Beim Correlogram ist das Lag 0 entfernt, da die Korrelation mit sich selbst immer 1 ist.\n\n\n\n\nAls zweites schauen wir uns die Differenz einer Zeitreihe an um einen stationäre Zeitreihe zu erhalten. Wir berechnen hierbei die Differenz der Zeitpunkte untereinander. Das klingt jetzt wieder komplizierter als es eigentlich ist. Wir können die Berechnung der Differenzen einmal in den folgenden Tabs durchführen. Die Differenz höher Ordnung ist dann einfach die Differenz der vorherigen Differenz.\n\nOrginalDifferenz 1Differenz 2Differenz 3\n\n\n\n\nR Code [zeigen / verbergen]\nerupt[1:10]\n\n\n [1] 78 74 68 76 80 84 50 93 55 76\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ndiff(erupt[1:10], differences = 1)\n\n\n[1]  -4  -6   8   4   4 -34  43 -38  21\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ndiff(erupt[1:10], differences = 2)\n\n\n[1]  -2  14  -4   0 -38  77 -81  59\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ndiff(erupt[1:10], differences = 3)\n\n\n[1]   16  -18    4  -38  115 -158  140\n\n\n\n\n\nDann können wir einmal die Differenzen für die Ausbrüche des Old Faithful Geysirs im Yellowstone-Nationalpark berechnen. Ich beschränke mich hier einmal auf die ersten drei Differenzen. Auch dafür können wir dann die Funktion diff() nutzen und müssen immer nur noch ein NA am Anfang hinzufügen damit die Vektoren die gleiche Länge behalten. Bei jeder Differenzenbildung verlieren wir ja einen Wert aus dem Vektor.\n\n\nR Code [zeigen / verbergen]\ndiff_tbl &lt;- tibble(erupt,\n                   erupt_d1 = c(NA, diff(erupt, 1)),\n                   erupt_d2 = c(NA, NA, diff(erupt, 2)),\n                   erupt_d3 = c(NA, NA, NA, diff(erupt, 3)))\n\n\nIn der Abbildung 71.8 siehst du einmal die verschiedenen Differenzen und deren Korrelationen abgebildet. Wir erreichen dann mit einer Differenz \\(d(3)\\) schon eine fast stationäre Zeitreihe.\n\n\n\n\n\n\n\n\nAbbildung 71.8— Korrelation zwischen den originalen Daten und den Lags. Im unteren Bereich des Korrelationsplot sind die Scatterplost mit der Regressionsgraden eingezeichnet. Im oberen Bereich finden sich die berechneten Korrelationskoeffizienten \\(\\rho\\) für die paarweisen Vergleiche. Wir erreichen immer stationärere Daten.\n\n\n\n\n\nDann wenden wir die Differenzen auch einmal auf unsere Klimadaten sowie unserer Milchleistung einmal an. Wir nutzen dann hier die Funktion plot_time_series() aus dem R Paket {timetk}. Die Funktion ist super einfach zu nutzen uns liefert auch die Ergebnisse, die wir wollen. Darüber hinaus können wir dann auch direkt {plotly} aktivieren. Wie wir dann in der Abbildung 71.9 sehen, kommen wir mir der Differenz \\(d(1)\\) schon sehr nah an einen stationären verlauf der Zeitreihe ran. Später müssen wir das dann nicht händisch machen, es gibt Funktionen, die für uns das beste Lag und die optimale Differenz bestimmen. Dafür nutzen wir zum Beispiel dann die Funktion auto.arima(), die uns dann die optimale Ordung für das Lag und die Differenz wiedergibt.\n\n\nR Code [zeigen / verbergen]\nco2_monthly_tbl |&gt; \n  mutate(diff = c(NA, diff(average, 1))) |&gt; \n  plot_time_series(date, diff, .interactive = TRUE) \nmilk_tbl |&gt; \n  mutate(diff = c(NA, diff(milk_prod_per_cow_kg, 1))) |&gt; \n  plot_time_series(month, diff, .interactive = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) CO\\(_2\\) Daten.\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Milch Daten.\n\n\n\n\n\n\n\nAbbildung 71.9— Stationäre Abbildungen der CO\\(_2\\)-Daten sowie der Milchdaten nach der Differenzbildung mit \\(d(1)\\). Wir sehen, dass wir einen stationären Verlauf erreichen.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>71</span>  <span class='chapter-title'>Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-time-series.html#vorhersagen-von-zeitreihen",
    "href": "time-space-time-series.html#vorhersagen-von-zeitreihen",
    "title": "71  Zeitreihen",
    "section": "71.4 Vorhersagen von Zeitreihen",
    "text": "71.4 Vorhersagen von Zeitreihen\nImmer wenn ich mit Zeitreihen anfange, muss ich mich erinnern, dass die Algorithmen immer einer Vorhersage treffen wollen. Das heißt, wir wollen wissen wie sich eine Zeitreihe gegeben der vorherigen Ereignisse in der Zukunft verändern wird. Wir haben eine weitreichende Auswahl an R Paketen und jedes löst das Problem der Vorhersage von Zeitreihen etwas anders. Damit ich hier nicht endlos immer das Gleiche darstelle, konzentriere ich mich einmal auf die Standardimplementierung mit auto.arima() sowie dem R Paket {modeltime}. Am Ende sei hier nochmal auf die Übersicht von Michael Clark in seinem Artikel Exploring Time - Multiple avenues to time-series analysis verwiesen. Wir halten uns aber an seine folgende Empfehlung.\n\n“I would also recommend {modeltime} as starting point for implementing a variety of model approaches for time series data with R. It was still pretty new when this was first written, but has many new features and capabilities, and could do some version of the models shown here.”\n\nIch verweise aber gerne nochmal in dem folgenden Kasten auf die anderen Möglichkeiten in R eine Zeitreihe auszuwerten. Eventuell ist etwas dabei, was für sich besser passt. Man kann sich hier sehr schnell in den Möglichkeiten verlieren.\n\n\n\n\n\n\nWeitere R Paket zur Vorhersage von Zeitreihen\n\n\n\nFolgende R Pakete lösen ebenfalls das Problem einer Vorhersage über die Zeit. Wir immer, ist es meistens eine andere Implementierung. Ob die Implementierung besser ist, hängt dann von vielen Faktoren ab.\n\nDas R Paket {timetk} ist von den gleichen Machern wie das hier vorgestellte R Paket {modeltime}. Ich kann das Pakt empfehlen und es gibt auch keinen Grund es nicht zu nutzen. Ich halte aber {modeltime} für das aktuellere Paket.\nDas R Paket {fable} und das R Paket {feasts} ist die Implementierung des Onlinebuches Forecasting: Principles and Practice. Dementsprechend empfiehlt sich auch diese Pakete zu nutzen, wenn du dich tiefer mit den dortigen Quellen beschäftigst.\nR Paket {tstibble} ist nochmal eine andere Art Zeit in R darzustellen. Ich habe mich ehrlich gesagt nicht weiter mit dem R Paket beschäftigt. Das R Paket {feasts} baut aber auf {tstibble}, so dass ich das Paket hier noch erwähnen wollte.\n\n\n\n\n71.4.1 mit {ts}\nEigentlich ist {ts} kein eigens Paket sondern die built-in Lösung von R, aber ich möchte hier dann doch {ts} als Paket schreiben, damit hier mehr Ordnung drin ist. Wenn wir eine Vorhersage auf einem zeitlichen Verlauf rechnen wollen, dann brauchen wir als aller erstes einen Datensatz, der auch eine echte Zeitreihe über mehrere zeitliche Zyklen enthält. Das ist dann meistens die Herausforderung so eine Zeitreihe in einer Abschlussarbeit zu erzeugen. In ein paar Monaten einen zyklischen Verlauf zu finden ist schon eine echte Leistung. Deshalb nehmen wir hier als Beispiel einmal unsere künstlichen Daten zur Milchleistung von Kühen. Wie du in der obigen Abbildung 71.4 klar erkennen kannst, haben wir hier Zyklen über die einzelnen Jahre hinweg. Es liegt ein stetiger, zyklischer Anstieg der Milchleistung über die beobachteten Jahre vor. Wir wollen jetzt den Verlauf modellieren und einen zukünftigen Verlauf vorhersagen. Oder andersherum, wie die zukünftigen Zyklen aussehen könnten.\nIn diesem Beispiel nutzen wir das R Paket {zoo} und die Funktion ts() für die Standardimplemetierung von Zeitreihen in R. Das hat immer ein paar Nachteile, da wir hier die veralteten Speicherformen für eine Zeitreihe nutzen. Auf der anderen Seite sind viele Tutorien im Internet noch genau auf diese Funktionen ausgerichtet. Hier seien dann die beiden Tutorien Time Series - ARMA Models in R und Time Series Analysis with auto.arima() in R als Anlaufpunkt empfohlen. Deshalb auch hier einmal die Erklärung der etwas älteren Funktionen. Später schauen wir dann auch die neuere Implementierung in dem R Paket {modeltime} einmal an.\nWir wandeln also erstmal unsere Milchdaten mit der Funktion tk_ts() in ein ts-Zeitobjekt um. Dafür müssen wir angeben von wann bis wann die Jahre laufen und wie viele Beobachtungen jedes Jahr hat. Glücklicherweise müssen nicht alle Jahre gefüllt werden und die Funktion erlaubt auch einen anderen Startmonat als Jan. Wir haben nämlich bei den CO\\(_2\\)-Daten den März als Startdatum, deshalb müssen wir den Start etwas anpassen. Wie du gleich siehst, dann haben wir eine Art Matrix als Ausgabe.\n\nMilchdaten als ts()CO\\(_2\\)-Daten als ts()\n\n\nIm Folgenden also einmal die Milchdaten als ein ts-Objekt. Wichtig ist hier zu wissen, wie oft den nun ein Wert gemessen wurde. Problematisch wird es, wenn wir Nesswiederholungen vorliegen haben, dann können wir hier nicht weiterarbeiten.\n\n\nR Code [zeigen / verbergen]\nmilk_ts &lt;- milk_tbl %$%\n  tk_ts(milk_prod_per_cow_kg, start = 1962, end = 1975, frequency = 12)\nmilk_ts\n\n\n        Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct\n1962 265.05 252.45 288.00 295.20 327.15 313.65 288.00 269.55 255.60 259.65\n1963 270.00 254.70 293.85 302.85 333.90 322.20 297.00 277.65 262.35 264.15\n1964 282.60 278.10 309.60 317.25 346.50 331.20 305.10 287.55 271.80 274.95\n1965 296.10 279.90 319.05 324.90 351.90 340.20 315.90 293.85 276.75 279.45\n1966 304.65 285.75 331.20 339.75 364.95 359.10 330.75 313.65 297.45 300.15\n1967 320.85 300.15 342.90 352.80 376.65 367.65 345.15 324.90 306.45 309.15\n1968 322.65 313.20 348.75 358.20 386.10 371.70 352.35 333.00 315.45 317.70\n1969 330.30 310.50 353.25 362.25 391.95 380.25 360.45 343.80 326.25 325.35\n1970 337.50 318.15 363.15 370.80 398.70 386.55 368.55 352.35 333.00 336.15\n1971 361.80 340.20 387.00 395.10 423.90 410.85 391.05 375.30 355.50 360.00\n1972 371.70 359.55 400.50 405.00 432.45 420.75 402.30 384.75 364.05 364.50\n1973 369.45 347.85 397.35 404.10 430.65 415.80 396.45 376.65 352.80 355.95\n1974 372.60 350.10 400.05 405.90 436.05 426.15 408.60 390.15 366.75 365.40\n1975 375.30                                                               \n        Nov    Dec\n1962 248.85 261.90\n1963 254.25 269.10\n1964 267.30 285.30\n1965 270.90 285.75\n1966 290.25 309.60\n1967 297.00 314.10\n1968 304.65 319.95\n1969 310.50 330.30\n1970 319.95 337.95\n1971 343.35 360.00\n1972 344.70 362.25\n1973 342.00 360.90\n1974 347.85 365.85\n1975              \n\n\nWir erhalten eine Matrix mit den 12 Monaten als Spalten und in den Zeilen die jeweiligen Jahr. Wenn du nicht im Januar startest, wie bei den CO\\(_2\\)-Daten, dann musst du das explizit angeben.\n\n\nDie CO\\(_2\\)-Daten starten nicht im Januar sondern im März, so dass wir hier nochmal den Startpunkt ändern müssen. Ich zeige dir hier nicht die Ausgabe, weil die Matrix entschieden zu groß ist. Immerhin sind es ja fünfundsechzig Zeilen für die gesamte Zeitspanne.\n\n\nR Code [zeigen / verbergen]\nco2_monthly_ts &lt;- co2_monthly_tbl  %$%\n  tk_ts(average, start = c(1958, 3), end = 2023, frequency = 12)\n\n\n\n\n\nEin ARIMA Modell setzt sich aus, wie oben schon vorgestellt, aus drei Komponenten wie folgt zusammen. Du kennst die Modelle und Konzepte schon aus der Einleitung dieses Abschnitts.\n\nDem verwendeten Lag \\(p\\) der Zeitreihe (eng. autoregressiv model oder AR-Modell), die wir für die Berechnung der Autokorrelation der Zeitreihe nutzen.\nDer verwendeten Differenz \\(d\\), mit der wir unsere Zeitreihe anpassen.\nDer laufenden Durchschnitt \\(q\\) (eng. moving average model oder MA-Modell). Dies ist im Wesentlichen die Größe der “Fenster”-Funktion über die Zeitreihendaten. Ein MA-Prozess ist eine lineare Kombination von Fehlern aus der Vergangenheit oder eben das Modellieren des Rauschens.\n\nNeben diesen Komponenten gibt es auch noch die saisonalen Komponenten, aber das überstiegt hier das Kapitel bei weitem. Insbesondere sei dir hier nochmal die Hilfe unter Tips to using auto_arima() empfohlen. Auf alle Details gehe ich dann hier nicht ein.\nIn den folgenden beiden Tabs findest du einmal die Korrelationsabbildungen für die Milchdaten wir auch die CO\\(_2\\)-Daten. Beachte bitte, dass die \\(x\\)-Achse etwas ungünstig formatiert ist. Die Lags werden nicht als ganzzahlig angezeigt sondern als seltsame Kommazahlen. Bitte schau dir auch die Funktion plot_acf_diagnostics() in der Abbildung 71.16 an, die Funktion ist um Welten besser. Auch hilft hier die Hilfeseite von {timetk} mit Plotting Seasonality and Correlation. Ja, die neueren Pakete können dann wirklich mehr. Insbesondere da wir hort dann auch das Paket {ploty} nutzen.\n\nKorrelationsabbildungen der MilchdatenKorrelationsabbildungen der CO\\(_2\\)-Daten\n\n\n\n\nR Code [zeigen / verbergen]\nmilk_ts |&gt; \n  acf(main = 'Correlogram')\n\nmilk_ts |&gt; \n  pacf(main = 'Partial Correlogram' )\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Correlogram.\n\n\n\n\n\n\n\n\n\n\n\n(b) Partial Correlogram.\n\n\n\n\n\n\n\nAbbildung 71.10— Korrelationsabbildungen der Lags über die Zeit für die Milchdaten. Wir sehen eine klaren zyklischen Verlauf, die sich über die Zeit ausdehnt. Das macht ja auch Sinn, den die Milchleistung wird auch von den Jahreszeiten abhängen. Bitte bachte, dass Lag 1.0 nicht das erste Lag beschreibt. Bei der partiziellen Korrelation beobachten wir, dass wir ebenfalls einen kurvigen Verlauf vorliegen haben.\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nco2_monthly_ts |&gt; \n  acf(main = 'Correlogram')\n\nco2_monthly_ts |&gt; \n  pacf(main = 'Partial Correlogram' )\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Correlogram.\n\n\n\n\n\n\n\n\n\n\n\n(b) Partial Correlogram.\n\n\n\n\n\n\n\nAbbildung 71.11— Korrelationsabbildungen der Lags über die Zeit für die CO\\(_2\\)-Daten. Wir sehen, dass die Korrelation der Werte über die Zeit langsam abnimmt. Bitte bachte, dass Lag 1.0 nicht das erste Lag beschreibt. Dabei ist der erste Wert des Lag immer am stärksten mit seinem Nachbarn korreliert.\n\n\n\n\n\n\n\nMit der Funktion decompose() können wir uns anschauen, wie die Zeitreihe aufgebaut ist. Gibt es einen Trend? Haben wir einen saisonalen Effekt über die Zeit? Und wie sieht dann unser Rauschen aus, wenn wir den Trend und den saisonalen Effekt rausgerechnet haben?\n\n\nR Code [zeigen / verbergen]\ndecomp_milk_obj &lt;- decompose(milk_ts)\ndecomp_co2_obj &lt;- decompose(co2_monthly_ts)\n\n\nWir wollen uns dann in den beiden Tabs dann einmal die Dekomposition der Zeitreihen anschauen. Wir werden die Ergebnisse jetzt nicht tiefer nutzen. Wir könnten an der Dekomposition unser armia()-Modell optimieren, aber wir sind hier gleich faul und nutzen einen automatischen Algorithmus.\n\nDekomposition der MilchdatenDekomposition der CO\\(_2\\)-Daten\n\n\n\n\nR Code [zeigen / verbergen]\nplot(decomp_milk_obj)\n\n\n\n\n\n\n\n\nAbbildung 71.12— Dekomposition der Zeitreihen der Milchdaten in dn Trend, den saisonalen Effekt sowie das Rauschen was übrig bleibt. Wir sehen einen klaren Trend in der Milchleitsung mit einem zyklischen Effekt über die Jahre.\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nplot(decomp_co2_obj)\n\n\n\n\n\n\n\n\nAbbildung 71.13— Dekomposition der Zeitreihen der CO\\(_2\\)-Daten in dn Trend, den saisonalen Effekt sowie das Rauschen was übrig bleibt. Wir sehen einen klaren Trend in des CO\\(_2\\) Gehaltes mit einem zyklischen Effekt über die Jahre.\n\n\n\n\n\n\n\n\nDann können wir auch schon mit der Funktion auto.arima() unser Modell für die Vorhersage der Zeitreihen rechnen. Ich verweise hier nochmal auf das Tutorium Tips to using auto_arima(), wenn du tiefer in die Modellinterpretation einsteigen willst. Wir nutzen gleich einmal das Modell um dann unsere Prognose zu rechnen.\n\nPrognose der Milchdaten mit auto.arima()Prognose der CO\\(_2\\)-Daten mit auto.arima()\n\n\n\n\nR Code [zeigen / verbergen]\nmilk_arima_obj &lt;- auto.arima(milk_ts)\nmilk_arima_obj\n\n\nSeries: milk_ts \nARIMA(2,0,1)(2,1,1)[12] with drift \n\nCoefficients:\n         ar1     ar2      ma1     sar1     sar2     sma1   drift\n      0.7957  0.1309  -0.0896  -0.1313  -0.1141  -0.4901  0.7465\ns.e.  0.3089  0.2774   0.3015   0.1681   0.1197   0.1563  0.1173\n\nsigma^2 = 11:  log likelihood = -379.43\nAIC=774.86   AICc=775.92   BIC=798.67\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nco2_arima_obj &lt;- auto.arima(co2_monthly_ts)\nco2_arima_obj\n\n\nSeries: co2_monthly_ts \nARIMA(1,1,1)(2,1,2)[12] \n\nCoefficients:\n         ar1      ma1     sar1     sar2     sma1     sma2\n      0.2177  -0.5819  -0.3161  -0.0161  -0.5462  -0.2731\ns.e.  0.0883   0.0740   1.6095   0.0421   1.6094   1.3910\n\nsigma^2 = 0.1001:  log likelihood = -204.22\nAIC=422.43   AICc=422.58   BIC=454.92\n\n\n\n\n\nDie Funktion forecast() erlaubt uns über einen Zeitraum die folgenden Verläufe einer Zeitreihe aus einem ARIMA-Modell vorherzusagen. Ich habe mich hier einmal für zwei Jahre also 24 Monate entschieden. Tendenziell ist natürlich anzuraten nicht so weit in die Zukunft vorherzusagen, aber prinzipiell ist es technisch möglich. Aber Achtung, manchmal macht das Ergebnis biologisch keinen Sinn mehr. Irgendwann ist die Milchleistung von Kühen auch mal gedeckelt und mehr geht dann einfach nicht mehr.\n\n\nR Code [zeigen / verbergen]\nmilk_mdl &lt;- forecast(milk_arima_obj, 24)\nco2_mdl &lt;- forecast(co2_arima_obj, 24)\n\n\nIn den Folgenden beiden Tabs siehst du dann einmal die Vorhersagen der weiteren zeitlichen Verläufen für die Milchleistung und den CO\\(_2\\) Gehalt in der Luft. Wir nutzen hier die Funktion auto_plot() die es uns direkt erlaubt eine Abbildung zu erstellen. Wir immer kannst du das Objekt natürlich auch mit str() zerlegen und dann deine eigene ggplot()-Abbildung bauen.\n\nVorhersage der MilchdatenVorhersage der CO\\(_2\\)-Daten\n\n\n\n\nR Code [zeigen / verbergen]\nautoplot(milk_mdl) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 71.14— Vorhersage der Milchleistung der Kühe für die nächsten zwei Jahre zusammen mit einem Fehlerbereich.\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nautoplot(co2_mdl) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 71.15— Vorhersage der CO\\(_2\\)-Daten für die nächsten zwei Jahre zusammen mit einem Fehlerbereich.\n\n\n\n\n\n\n\n\n\n\n71.4.2 mit {modeltime}\nAm Ende hier nochmal eine Möglichkeit sehr effizient Zeitreihen mit dem R Paket {modeltime} zu modellieren und eine Vorhersage für zukünftige Verläufe zu machen. Ich empfehle hier die Hilfeseite Getting Started with {modeltime}. Auf der Seite erfährst du dann die Grundlagen für die Anwendung von dem R Paket {modeltime}. Hier kannst du dann tief in den Kaninchenbau reingehen. Wir machen hier nur die einfache Vorhersage ohne viel Schnickschnack. Neben dem R Paket {modeltime} findest du im Ökosystem {modeltime} noch andere spannende R Pakete, die dir weitere und vertiefende Modellierungen zur Vorhersage erlauben. Wenn dir die Begriffe zu der Vorhersage und der Klassifikation etwas komisch vorkommen, dann kannst du in dem Kapitel Grundlagen der Klassifikation reinschauen und nachlesen wo du dann noch Lücken hast. Ich gehe hier dann nicht mehr so tief auf die einzelnen Punkte ein, sondern führe hier eher grob durch den Code.\nWir konzentrieren uns hier jetzt nur auf die Milchdaten. Wenn du willst, kannst du den folgenden Code auch einfach für die CO\\(_2\\)-Daten anpassen und durchführen. Da wir auch eine lineare Regression auf den Daten durchführen wollen, muss ich nochmal das Datum in eine numerische Variable sowie einen Faktor für den Monat aufteilen. Aber ja, du kannst den ganzen Kram auch hier nur mit einer linearen Regression lösen, was auch irgendwie spannend ist, denn so ein lineares Modell ist auch wirklich ein einfaches Modell.\n\n\nR Code [zeigen / verbergen]\nmilk_tbl &lt;- milk_tbl |&gt; \n  mutate(month_fac = factor(month(month, label = TRUE), ordered = FALSE),\n         month_num = as.numeric(month)) \nmilk_tbl |&gt; print(n = 7)\n\n\n# A tibble: 168 × 4\n  month      milk_prod_per_cow_kg month_fac month_num\n  &lt;date&gt;                    &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt;\n1 1962-01-01                 265. Jan           -2922\n2 1962-02-01                 252. Feb           -2891\n3 1962-03-01                 288  Mar           -2863\n4 1962-04-01                 295. Apr           -2832\n5 1962-05-01                 327. May           -2802\n6 1962-06-01                 314. Jun           -2771\n7 1962-07-01                 288  Jul           -2741\n# ℹ 161 more rows\n\n\nIn der Abbildung 71.16 siehst du die so viel besseren Korrelationsabbildungen der Lags für die Milchdaten. Wir sehen hier erstmal die richtige Bezeichnung auf der \\(x\\)-Achse und habe auch einen sehr weiten Verlauf. Dank {plotly} können wir dann auch die Werte in der Abbildung ablesen und einen Schluss daraus ziehen. Dementsprechend ist diese Art der Abbildung auf jeden Fall den anderen vorzuziehen. Hier ist das Paket {timetk} wirklich super gemacht.\n\n\nR Code [zeigen / verbergen]\nmilk_tbl |&gt; \n  plot_acf_diagnostics(month, milk_prod_per_cow_kg)\n\n\n\n\n\n\n\n\nAbbildung 71.16— Korrelationsabbildungen der Lags über die Zeit für die Milchdaten in {plotly}. Wir sehen eine klaren zyklischen Verlauf, die sich über die Zeit ausdehnt. Das macht ja auch Sinn, den die Milchleistung wird auch von den Jahreszeiten abhängen. Bei der partiziellen Korrelation beobachten wir, dass wir ebenfalls einen kurvigen Verlauf vorliegen haben, aber der Effekt sich auf die ersten Lags beschränkt.\n\n\n\n\nWenn wir jetzt eine Vorhersage rechnen wollen, dann müssen wir eigentlich unsere Daten in einen Trainings- und Testdatensatz aufteilen. Das machen wir hier mit der Funktion initial_time_split() die uns einen Trainings- und Testdatensatz baut. Wir wollen dann hier 90% der Daten in den Trainingsdaten haben und 10% in den Testdaten.\n\n\nR Code [zeigen / verbergen]\nsplits &lt;- initial_time_split(milk_tbl, prop = 0.9)\n\n\nIm Folgenden bauen wir uns dann einmal drei Modelle. Zum einen das auto.arima() Modell und lassen darauf unsere Trainsgdaten modellieren.\n\n\nR Code [zeigen / verbergen]\nmodel_fit_arima_no_boost &lt;- arima_reg() |&gt;\n    set_engine(engine = \"auto_arima\") |&gt;\n    fit(milk_prod_per_cow_kg ~ month, data = training(splits))\n\n\nDamm nutzen wir noch ein anderes Modell mit exponential smoothing auf das wir hier nicht tiefer eingehen wollen.\n\n\nR Code [zeigen / verbergen]\nmodel_fit_ets &lt;- exp_smoothing() |&gt;\n    set_engine(engine = \"ets\") |&gt;\n    fit(milk_prod_per_cow_kg ~ month, data = training(splits))\n\n\nAbschließen nutze ich noch ein lineares Modell und modelliere den Trend mit month_num und den Effekt der Saison mit month_fac. Schauen wir mal wie gut das Modell so ist.\n\n\nR Code [zeigen / verbergen]\nmodel_fit_lm &lt;- linear_reg() |&gt;\n    set_engine(\"lm\") |&gt;\n    fit(milk_prod_per_cow_kg ~ month_num + month_fac,\n        data = training(splits))\n\n\nDann packe ich alle Modelle einmal in einen Datensatz zusammen.\n\n\nR Code [zeigen / verbergen]\nmodels_tbl &lt;- modeltime_table(\n    model_fit_arima_no_boost,\n    model_fit_ets,\n    model_fit_lm\n)\n\n\nIch nutze nun die Funktion modeltime_calibrate() um auf die Modelle aus den Trainingsdaten einmal die Testdaten anzuwenden.\n\n\nR Code [zeigen / verbergen]\ncalibration_tbl &lt;- models_tbl |&gt;\n    modeltime_calibrate(new_data = testing(splits))\n\n\nAbschließend können wir uns in der Abbildung 71.17 einmal die Vorhersage aus den drei Modellen anschauen. Wir stellen mit erstaune fest, dass die lineare Regression gar nicht so schlecht abschneidet. Hier hilft dann vor allem einmal das Reinzoomen mit {plotly} sehr um sich die Unterschiede nochmal genauer anzuschauen. Am Ende packe ich noch meine Legende unter die Abbildung, damit die Abbildung nicht so gestaucht wird.\n\n\nR Code [zeigen / verbergen]\ncalibration_tbl |&gt;\n    modeltime_forecast(\n        new_data = testing(splits),\n        actual_data = milk_tbl\n    ) |&gt;\n    plot_modeltime_forecast(\n      .legend_max_width = 25, \n      .interactive = TRUE) |&gt;\n  plotly::layout(legend = list(orientation = \"h\",   \n                               xanchor = \"center\",  \n                               x = 0.5)) \n\n\n\n\n\n\n\n\nAbbildung 71.17— Vorhersageplot der drei Modelle für die Milchdaten dargestellt mit {plotly}.\n\n\n\n\nDann können wir uns in der Tabelle 71.2 nochmal die Gütezahlen ausgeben lassen, die wir aus der Klassifikation schon kennen. Ich habe dir dann gleich nochmal die Übersetzungen der Maßzahlen unter die Tabelle gepackt. Am Ende können wir uns hier verschiedene Maßzahlen anschauen und entscheiden welches Modell das beste Modell ist. Ich finde hier am spannendsten, dass unsere einfache lineare Regression gar nicht mal so schlecht abgeschnitten hat und ähnlich gute Fehlerwerte und ein Bestimmtheitsmaß hat, wie die anderen beiden Modelle, die um einiges komplizierter sind.\n\n\nR Code [zeigen / verbergen]\ncalibration_tbl |&gt;\n    modeltime_accuracy() |&gt;\n    table_modeltime_accuracy(\n      .interactive = FALSE\n    )\n\n\n\n\nTabelle 71.2— Gütezahlen für die Vorhersage der Testdaten auf den Modellen der Trainiungsdaten. Verschiedene Maßzahlen wie Fehler und das Bestimmtheitsmaß erlauben eine Bewertung der Modelle.\n\n\n\n\n\n\n\n\n\nAccuracy Table\n\n\n.model_id\n.model_desc\n.type\nmae\nmape\nmase\nsmape\nrmse\nrsq\n\n\n\n\n1\nARIMA(2,0,1)(2,1,1)[12] WITH DRIFT\nTest\n12.03\n3.13\n0.68\n3.08\n13.02\n0.97\n\n\n2\nETS(A,A,A)\nTest\n11.72\n3.06\n0.67\n3.01\n12.59\n0.96\n\n\n3\nLM\nTest\n15.51\n4.06\n0.88\n3.97\n16.30\n0.96\n\n\n\n\n\n\n\n\n\n\nHier nochmal die Übersetzung der Maßzahlen und die Links zu den Hilfeseiten der entsprechenden Funktionen. Fehler sollten immer klein sein und somit ist ein kleiner Fehler bei einem Modell ein gutes Zeichen. Deshalb ist zum Beispiel das ETS Modell in unserem Fall zu bevorzugen, denn das Modell hat den geringsten Fehler über alle Fehlerarten.\n\nMAE - Mean absolute error, mae()\nMAPE - Mean absolute percentage error, mape()\nMASE - Mean absolute scaled error, mase()\nSMAPE - Symmetric mean absolute percentage error, smape()\nRMSE - Root mean squared error, rmse()\nRSQ - R-squared, rsq()\n\nWar es das schon? Nein, natürlich nicht. Das R Paket {modeltime} liefert noch mehr Modelle um deine Zeitreihe zu modellieren. Ebenso haben wir kein Refit durchgeführt, also die neuen Daten nochmal genutzt um das Modell noch besser zu machen. Darüber hinaus gibt es noch mehr Diagnosemöglichkeiten und Darstellungsformen. Aber das sprengt hier den Rahmen und ich entscheide mal, dass dieses Kapitel jetzt gut genug ist.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>71</span>  <span class='chapter-title'>Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-time-series.html#referenzen",
    "href": "time-space-time-series.html#referenzen",
    "title": "71  Zeitreihen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nChan, K.-S., & Cryer, J. D. (2008). Time series analysis with applications in R. Springer.\n\n\nCowpertwait, P. S., & Metcalfe, A. V. (2009). Introductory time series with R. Springer Science & Business Media.\n\n\nHyndman, R. J., & Athanasopoulos, G. (2018). Forecasting: principles and practice. OTexts.\n\n\nRobert, H. et al. (2006). Time Series Analysis and Its Applications With R Examples Second Edition. Springer.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>71</span>  <span class='chapter-title'>Zeitreihen</span>"
    ]
  },
  {
    "objectID": "time-space-spatial-data.html",
    "href": "time-space-spatial-data.html",
    "title": "72  Räumliche Daten",
    "section": "",
    "text": "72.1 Genutzte R Pakete\nLetzte Änderung am 12. April 2025 um 20:41:30\nIn diesem Kapitel wollen wir uns mit räumlichen Daten (eng. spatial data) beschäftigen. Räumliche Daten sind dabei eng mit dem Geographic Information System (abk. GIS) verbunden. Wenn wir also räumliche Daten analysieren wollen, dann analysieren wir dann auch häufig GIS Daten.\nAuch hier gilt, dass es sich hier nur um ein Kapitel zur Übersicht handelt. Die Analyse von räumlichen Daten füllt ganze Bücher und deshalb hier auch eine kleine Literaturschau. Mit Bivand et al. (2008) und als PDF unter Applied Spatial Data — Analysis with R hast du die Möglichkeit einmal ein umfangreiches Buch zur Analyse von räumlichen Daten zu lesen. Ich finde das Buch von Plant (2018) etwas umfangreicher, aber es gibt das Buch nur als Auszug auf Google Books unter Spatial Data Analysis in Ecology and Agriculture Using R auf Google Books. Ein etwas kürzeres Buch von findest du von Guy Lansley and James Cheshire (2016) als PDF unter An Introduction to Spatial Data Analysis and Visualisation in R. Alle drei Bücher liefern einen umfangreichen Überblick über die Analyse von räumlichen Daten in R.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, \n               conflicted)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>72</span>  <span class='chapter-title'>Räumliche Daten</span>"
    ]
  },
  {
    "objectID": "time-space-spatial-data.html#daten",
    "href": "time-space-spatial-data.html#daten",
    "title": "72  Räumliche Daten",
    "section": "72.2 Daten",
    "text": "72.2 Daten\nWenn wir bei räumlichen Daten von Daten sprechen, dann kommen wir an GIS-Daten nicht vorbei. Wenn du nicht weißt, was das geographic information system (abk. GIS) ist, dann empfehle ich als Einstieg What is GIS. Traditionelle GIS-Software wie ArCGIS und QGIS sind fantastische Programme, die eine grafische Benutzeroberfläche verwenden, um auf ihre Funktionen zugreifen zu können. Siehe auch A Crash Course in Geographic Information Systems (GIS) using R.\nWenn es um Daten geht, dann gibt es natürlich eine Reihe von möglichen Quellen. Wenn es sehr viele Daten seinen sollen, die meistens einen örtlichen Bezug haben, dann empfehle ich die Webseite Our World in Data. Dort gibt es so viele räumliche Daten, da eigentlich alles dort als räumlich dargestellt wird. es ist ja schließlich auch unsere Welt als Daten. Dann gibt es noch die Quelle Free GIS Data Sources: Best Global Raster and Vector Datasets. Hier findest du dann auch nochmal Inspiration für mögliche Datensätze für diene Fragestellung.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>72</span>  <span class='chapter-title'>Räumliche Daten</span>"
    ]
  },
  {
    "objectID": "time-space-spatial-data.html#visualisierung",
    "href": "time-space-spatial-data.html#visualisierung",
    "title": "72  Räumliche Daten",
    "section": "72.3 Visualisierung",
    "text": "72.3 Visualisierung\n\n\n\n\n\n\nInspirationen von The R Graph Gallery\n\n\n\nWenn du noch Inspirationen suchst, wie du deine räumlichen Daten noch schöner darstellen könntest, dann besuche doch The R Graph Gallery - Spatial. Dort findest du verschiedene Darstellungen von räumlichen Daten mit {ggplot}. Lasse dich einfach mal inspirieren.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>72</span>  <span class='chapter-title'>Räumliche Daten</span>"
    ]
  },
  {
    "objectID": "time-space-spatial-data.html#modellierung",
    "href": "time-space-spatial-data.html#modellierung",
    "title": "72  Räumliche Daten",
    "section": "72.4 Modellierung",
    "text": "72.4 Modellierung\nR Paket {ggspatial}\nR Paket {rspatial}\nR Paket {spatstat.random}\nR Paket {spatstat}\nR Paket {tidyterra}",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>72</span>  <span class='chapter-title'>Räumliche Daten</span>"
    ]
  },
  {
    "objectID": "time-space-spatial-data.html#referenzen",
    "href": "time-space-spatial-data.html#referenzen",
    "title": "72  Räumliche Daten",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nBivand, R. S., Pebesma, E. J., Gómez-Rubio, V., & Pebesma, E. J. (2008). Applied spatial data analysis with R (Bd. 747248717). Springer.\n\n\nPlant, R. E. (2018). Spatial data analysis in ecology and agriculture using R. cRc Press.",
    "crumbs": [
      "Zeitliche und räumliche Analysen",
      "<span class='chapter-number'>72</span>  <span class='chapter-title'>Räumliche Daten</span>"
    ]
  },
  {
    "objectID": "classification-preface.html",
    "href": "classification-preface.html",
    "title": "Klassifikation oder maschinelles Lernen",
    "section": "",
    "text": "Ausgewählte Algorithmen\nLetzte Änderung am 28. September 2023 um 14:04:25\nIn diesem Abschnitt und den folgenden Kapiteln wollen wir uns mit der Klassifikation beschäftigen. Was heißt Klassifikation? Wir wollen eine Vorhersage rechnen. Wir haben eine Spalte \\(y\\) vorliegen in der wir Klassen stehen haben. Mit Klassen meine ich gesunde oder kranke Patienten. Oder aber eben gesunde oder kranke Ferkel. Meistens wollen wir also einen \\(0/1\\) Wert vorhersagen. Wir brauchen dafür keine \\(0/1\\) Einträge in unserer \\(y\\) Spalte, schon aber einen binären Eintrag. Also zum Beispiel nur Männer und Frauen. Oder aber der Befall mit Blattläusen oder kein Befall mit Blattläusen. Theoretisch gehen auch mehr als zwei Klassen (eng. multiclass) aber das ist eher die Ausnahme als die Regel.\nNachdem wir also wissen, dass wir Werte in einer Spalte vorhersagen wollen, können wir uns verschiedene Algorithmen einmal anschauen. Ich kann Mueller & Massaron (2021) als einen Einstieg ins maschinelle Lernen empfehlen.\nWas fehlt noch? Sicherlich fehlen noch andere Algorithmen. Aber das ist auch nicht der Sinn dieses Abschnitts eine umfassende Übersicht über alle Algorithmen des maschinellen Lernens zu geben. Wir wollen uns aber hier auf die großen und meist angewandten Algorithmen beschränken. Vielleicht ergänze ich dann nochmal ein Kapitel, wenn ich einen spannenden Algorithmus entdecke.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen"
    ]
  },
  {
    "objectID": "classification-preface.html#ausgewählte-algorithmen",
    "href": "classification-preface.html#ausgewählte-algorithmen",
    "title": "Klassifikation oder maschinelles Lernen",
    "section": "",
    "text": "In dem 77  k nearest neighbor schauen wir uns den \\(k\\)-NN Algorithmus einmal an. In diesem Algorithmus werden neue Beoabchtungen anhand der nächstliegenden Nachbarn klassifiziert.\nIn dem 78  Decision trees betrachten wir Entscheidungsbäume. Wir lassen also immer einen Entscheidungsbaum mit zwei Zweigen wachsen und nutzen diese Entscheidungsbäume für die Vorhersage.\nIn dem 79  Support vector machines werden wir uns mit der Support Vector Machine beschäftigen. Wir werden hier aber nur auf die Anwendung eingehen und ein sehr anschauliches Beispiel für die Funktionsweise nutzen.\nIn dem 80  Neural networks betrachten wir dann neuronale Netzwerke. Damit ist dann auch Deep learning gemeint und somit der letzte Stand des maschinellen Lernens.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen"
    ]
  },
  {
    "objectID": "classification-preface.html#referenzen",
    "href": "classification-preface.html#referenzen",
    "title": "Klassifikation oder maschinelles Lernen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nMueller, J. P., & Massaron, L. (2021). Machine learning for dummies. John Wiley & Sons.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen"
    ]
  },
  {
    "objectID": "classification-basic.html",
    "href": "classification-basic.html",
    "title": "73  Grundlagen der Klassifikation",
    "section": "",
    "text": "73.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 21:44:07\nDieses Kapitel dient als Einführung in die Klassifikation mit maschinellen Lernmethoden. Leider müssen wir wieder einiges an Worten lernen, damit wir überhaupt mit den Methoden anfangen können. Vieles dreht sich um die Aufbereitung der Daten, damit wir dann auch mit den Modellen anfangen können zu arbeiten. Ja ich meine wirklich Arbeiten, denn wir werden eher einen Prozess durchführen. Selten rechnet man einmal ein Modell und ist zufrieden. Meistens müssen wir noch die Modelle tunen um mehr aus den Modellen rauszuholen. Wir wollen bessere Vorhersagen mit einem kleineren Fehler erreichen. Das ganze können wir dann aber nicht in einem Schritt machen, sondern brauchen viele Schritte nacheinander. Damit müssen wir auch mir R umgehen können sonst ist der Prozess nicht mehr abzubilden.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, conflicted)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#daten",
    "href": "classification-basic.html#daten",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.2 Daten",
    "text": "73.2 Daten\nIn dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt. Wir wählen auch nur ein kleines Subset aus den Daten aus, da wir in diesem Kapitel nur Funktion demonstrieren und nicht die Ergebnisse interpretieren.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt; \n  mutate(pig_id = 1:n(),\n         infected = as_factor(infected)) |&gt; \n  select(pig_id, infected, age:crp) |&gt; \n  select(pig_id, infected, everything())  \n\n\nIn Tabelle 77.1 siehst du nochmal einen Auschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.\n\n\n\n\nTabelle 73.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\npig_id\ninfected\nage\nsex\nlocation\nactivity\ncrp\n\n\n\n\n1\n1\n61\nmale\nnortheast\n15.31\n22.38\n\n\n2\n1\n53\nmale\nnorthwest\n13.01\n18.64\n\n\n3\n0\n66\nfemale\nnortheast\n11.31\n18.76\n\n\n4\n1\n59\nfemale\nnorth\n13.33\n19.37\n\n\n5\n1\n63\nmale\nnorthwest\n14.71\n21.57\n\n\n6\n1\n55\nmale\nnorthwest\n15.81\n21.45\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n407\n1\n54\nfemale\nnorth\n11.82\n21.5\n\n\n408\n0\n56\nmale\nwest\n13.91\n20.8\n\n\n409\n1\n57\nmale\nnorthwest\n12.49\n21.95\n\n\n410\n1\n61\nmale\nnorthwest\n15.26\n23.1\n\n\n411\n0\n59\nfemale\nnorth\n13.13\n20.23\n\n\n412\n1\n63\nfemale\nnorth\n10.01\n19.89\n\n\n\n\n\n\n\n\nGehen wir jetzt mal die Wörter und Begrifflichkeiten, die wir für das maschinelle Lernen später brauchen einmal durch.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#what-he-says",
    "href": "classification-basic.html#what-he-says",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.3 What he say’s?",
    "text": "73.3 What he say’s?\nIn diesem Teil des Skriptes werden wir wieder mit einer Menge neuer Begriffe konfrontiert. Deshalb steht hier auch eine Menge an neuen Worten drin. Leider ist es aber auch so, dass wir bekanntes neu bezeichnen. Wir tauchen jetzt ab in die Community der Klassifizierer und die haben dann eben die ein oder andere Sache neu benannt.\n\n\nKurze Referenz zu What he says?\nDie gute nachticht zuerst, wir haben ein relativ festes Vokabular. Das heißt, wir springen nicht so sehr zwischen den Begrifflichkeiten wie wir es in den anderen Teilen des Skriptes gemacht haben. Du kennst die Modellbezeichnungen wie folgt.\n\\[\ny \\sim x\n\\]\nmit\n\n\\(y\\), als Outcome oder Endpunkt.\n\\(x\\), als Covariate oder Einflussvariable.\n\nDas bauen wir jetzt um. Wir nennen in dem Bereich des maschinellen Lernen jetzt das \\(y\\) und das \\(x\\) wie folgt.\n\n\\(y\\) ist unser label, dafür gibt es kein deutsches Wort.\n\\(x\\) sind unsere features und mehrere Features bilden den feature space, dafür gibt es jeweils auch kein deutsches Wort.\n\nLabel meint also das \\(y\\) oder Outcome. Feature beschreibt das \\(x\\) oder die Einflussvariablen.\nIm folgenden Text werde ich also immer vom Label schreiben und dann damit das \\(y\\) links von dem ~ in der Modellgleichung meinen. Wenn ich dann von den Features schreibe, meine ich alle \\(x\\)-Variablen rechts von dem ~ in der Modellgleichung. Ja, daran muss du dich dann gewöhnen. Es ist wieder ein anderer sprachlicher Akzent in einem anderen Gebiet der Statistik.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#klassifikation-vs.-regression",
    "href": "classification-basic.html#klassifikation-vs.-regression",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.4 Klassifikation vs. Regression",
    "text": "73.4 Klassifikation vs. Regression\nWenn mich etwas aus der Bahn geworfen hat, dann waren es die Terme classification und regression im Kontext des maschinellen Lernens. Wenn ich von classification schreibe, dann wollen wir ein kategoriales Label vorhersagen. Das bedeutet wir haben ein \\(y\\) vorliegen, was nur aus Klassen bzw. Kategorien besteht. Im Zweifel haben wir dann ein Label mit \\(0/1\\) einträgen. Wenn mehr Klassen vorliegen, wird auch gerne von multiclass Klassifikation gesprochen.\nDazu steht im Kontrast der Term regression. In dem Kontext vom maschinellen Lernen meint regression die Vorhersage eines numerischen Labels. Das heißt, wir wollen die Körpergröße der Studierenden vorhersagen und nutzen dazu einen regression Klassifikator. Das ist am Anfang immer etwas verwirrend. Wir unterschieden hier nur die Typen der Label, sonst nichts. Wir fassen also wie folgt zusammen.\n\nclassification, wir haben ein Label bzw. \\(y\\) mit Kategorien. Nehmen wir einmal unser Ferkelbeispiel. In unserer Spalte infected sind die Ferkel infiziert \\((1)\\) oder nicht-infiziert daher gesund \\((0)\\). Du wählst dann den Modus set_mode(\"classification\").\nregression, wir haben ein Label bzw. \\(y\\) mit kontinuierlichen Werten. Unsere Ferkel haben ein Gewicht in \\(kg\\) und daher nehmen wir die Spalte weight. Du wählst dann den Modus set_mode(\"regression\").\n\nWir brauchen die Begriffe, da wir später in den Algorithmen spezifizieren müssen, welcher Typ die Klassifikation sein soll.\n\n\n\n\n\n\nWo ist die Regression?\n\n\n\nWir werden uns in diesen und den folgenden Kapiteln hauptsächlich mit der Klassifikation beschäftigen. Wenn du eine Regression rechnen willst, also ein kontinuierliches Label vorliegen hast, dann musst du bei dem Modellvergleich andere Maßzahlen nehmen und auch eine ROC Kurve passt dann nicht mehr. Du findest dann hier bei den Metric types unter dem Abschnitt numeric Maßzahlen für die Güte der Regression in der Prädiktion.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#supervised-vs.-unsupervised",
    "href": "classification-basic.html#supervised-vs.-unsupervised",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.5 Supervised vs. unsupervised",
    "text": "73.5 Supervised vs. unsupervised\nDer Unterschied zwischen einer suprvised Lernmethode oder Algorithmus ist, dass das Label bekannt ist. Das heißt, dass wir in unseren Daten eine \\(y\\) Spalte haben an der wir unser Modell dann trainieren können. Das Modell weiß also an was es sich optimieren soll. In Tabelle 73.2 sehen wir einen kleinen Datensatz in einem supervised Setting. Wir haben ein \\(y\\) in den Daten und können an diesem Label unser Modell optimieren. Oft sagen wir auch, dass wir gelabelte Daten vorliegen haben. Daher haben wir eine Spalte, die unser LAbel mit \\(0/1\\) enthält.\nSupervised heißt, dass die Daten ein Label haben und damit eine \\(y\\) Spalte haben. Wir sagen, dass die Daten gelabelt sind. Unsupervised heißt, dass wir ungelabelte Daten vorliegen haben. In dem Fall von semi-supervised Daten, haben wir Beobachtungen mit Label und ohne Label\n\n\n\nTabelle 73.2— Beispieldatensatz für supervised learning. Unsere Daten haben eine Spalte \\(y\\), die wir als Label in unserem Modell nutzen können. Wir haben gelabelte Daten vorliegen.\n\n\n\n\n\n\\(y\\)\n\\(x_1\\)\n\\(x_2\\)\n\\(x_3\\)\n\n\n\n\n1\n0.2\n1.3\n1.2\n\n\n0\n0.1\n0.8\n0.6\n\n\n1\n0.3\n2.3\n0.9\n\n\n1\n0.2\n9.1\n1.1\n\n\n\n\n\n\nIn der Tabelle 73.3 sehen wir als Beispiel einen Datensatz ohne eine Spalte, die wir als Label nutzen können. Nazürlich haben wir in echt dann keine freie Spalte. Ich habe das einmal so gebaut, damit du den Unterschied besser erkennen kannst. Beim unsuoervised Lernen muss der Algorithmus sich das Label selber bauen. Wir müssen meist vorgeben, wie viele Gruppen wir im Label erwarten würden. Dann können wir den Algorithmus starten.\n\n\n\nTabelle 73.3— Beispieldatensatz für unsupervised learning. Unsere Daten haben keine Spalte \\(y\\), die wir als Label in unserem Modell nutzen können. Wir haben ungelabelte Daten vorliegen.\n\n\n\n\n\n\n\\(x_1\\)\n\\(x_2\\)\n\\(x_3\\)\n\n\n\n\n\\(\\phantom{0}\\)\n0.2\n1.3\n1.2\n\n\n\n0.1\n0.8\n0.6\n\n\n\n0.3\n2.3\n0.9\n\n\n\n0.2\n9.1\n1.1\n\n\n\n\n\n\nDann gibt es natürlich auch den Fall, dass wir ein paar Beobachtungen mit einem Eintrag haben und wiederum andere Beobachtungen ohne eine Eintragung. Dann sprechen wir von einem semi-supervised learning. Im Prinzip ist es ein Mischmasch aus supervised learning und dem unsupervised learning. Es gibt hier aber keine genaue Grenze wie viele gelabelete Beobachtungen zu ungelabelten Beobachtungen da sein müssen.\nWir haben sehr oft eine superised Setting in unseren Daten vorliegen. Aber wie immer, du wirst vielleicht auch Cluster bilden wollen und dann ist das unsupervised Lernen eine Methode, die du gut nutzen kannst. Am Ende müssen jeder Beobachtung ein Label zugeordnet werden. Wer das dann macht, ist wiederum die Frage.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#bias-vs.-varianz",
    "href": "classification-basic.html#bias-vs.-varianz",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.6 Bias vs. Varianz",
    "text": "73.6 Bias vs. Varianz\nIm Bereich des maschinellen Lernens sprechen wir oft von einem Bias/Varianz Trade-off. Das heißt, wir haben zum einen eine Verzerrung (eng. Bias) in unserem Auswahlprozess des anzuwendenden Algorithmus. Zum anderen ist unser Algorithmus nur bedingt genau, das heißt wir haben auch eine Varianz die durch den Algorithmus hervorgerufen wird. Hierbei musst du dich etwas von dem Begriff Varianz im Sinne der deskriptiven Statistik lösen. Die Varianz beschreibt hier die Variabilität in der Vorhersage. Wir meinen hier schon eine Art Abweichung, aber das Wort Varianz mag hier etwas verwirrend sein. In Abbildung 73.1 sehen wir nochmal den Zusammenhang zwischen dem Bias und der Varianz.\n\n\n\n\n\n\nAbbildung 73.1— Der Bias ist eine menschliche Komponente des Modells. Wir wählen das Modell aus und bringen damit eine mögliche Verzerrung in die Auswertung. Die Varianz wird vom Modell selber verursacht und beschreibt den Zusammenhang zwischen dem Traings- und Testdaten.\n\n\n\nWir können daher wie folgt den Bias und die Varianz beschreiben. Wichtig ist hier nochmal, dass wir uns hier die Worte etwas anders benutzen, als wir es in der klassischen Statistik tun würden.\n\nBias: Der Bias (deu. Verzerrung) unseres Modells hat mit den Annahmen zu tun, die wir über die Daten machen. Und damit auch wie gut das Modell zu den Daten passt, auf denen das Modell trainiert wird. Ein Modell mit einem hohen Bias passt nicht gut zu den Trainingsdaten, hat eine begrenzte Flexibilität oder ist extrem einfach für die vorliegenden Daten. Wenn ein Modell zu simpel ist, führt es häufig zu einem hohen Trainingsfehler. Das Label der Traingsdaten wird daher nicht gut wiedergegeben.\nVarianz: Die Varianz unseres Modells sagt aus, wie das Modell seine Vorhersageergebnisse in Abhängigkeit von den Traingsdaten variiert. Ein Modell mit hoher Varianz kann sich gut an die Trainingsdaten anpassen und hat daher Probleme bei der Verallgemeinerung auf die ungesehene Testdaten, was zu einem hohen Testfehler führt.\n\nDer Bias zeigt uns, wie gut unser Modell der Realität entspricht. Die Varianz sagt uns, wie gut unser Modell auf die Trainingsdaten abgestimmt ist.\nIn Abbildung 73.2 shen wir den Zusammenhang zwischen Bias und Varianz an einer Dartscheibe dargestellt. Wenn wir eine hohe Varianz und einen hohen Bias haben, dann treffen wir großflächig daneben. Wenn sich der Bias verringert, dann treffen wir mit einer großen Streuung in die Mitte. Eine geringe Varianz und ein hoher Bias lässt uns präsize in daneben treffen. Erst mit einem niedrigen Bias und einer niedrigen Varianz treffen wir in die Mitte der Dartscheibe.\n\n\n\n\n\n\nAbbildung 73.2— Abstrakte Darstellung des Bias vs. Varianz Trade-off anhand einer Dartscheibe.\n\n\n\nDer gesamte Fehler unseres Modells setzt sich dann wie folgt aus dem Bias und der Varianz zusammen. Wir können den Bias kontrollieren in dem wir verschiedene Algorithmen auf unsere Daten testen und überlegen, welcher Algorithmus am besten passt. Die Varianz können wir dadurch verringern, dass wir unsere Modelle tunen und daher mit verschiedenen Parametern laufen lassen. Am Ende haben wir aber immer einen Restfehler \\(\\epsilon\\), den wir nicht reduzieren können. Unser Modell wird niemals perfekt zu generalisieren sein. Wenn \\(\\epsilon\\) gegen Null laufen sollte, spricht es eher für ein Auswendiglernen des Modells als für eine gute Generalisierung.\n\\[\nerror = variance + bias + \\epsilon\n\\]\nIn der Abbildung 73.3 sehen wir den Zusammenhang zwischen Bias und Varianz nochmal in einer Abbildung im Zusammenhang mit der Modellkomplxität gezeigt. Je größer die Modellkomplexität wird, desto geringer wird der Bias. Dafür wird das Modell aber überangepasst und die Varianz des Modells steigt. Daher gibt es ein Optimum des total errors bei dem der Bias und Varianz jeweils Minimal sind.\n\n\n\n\n\n\nAbbildung 73.3— Zusammenhang zwischen der Modellkomplexität, dem Bias und der Varainz. Es gibt ein Optimum des total errors.\n\n\n\nJetzt wollen wir uns den Zusammenhang zwischen Bias und Varianz nochmal an der Bilderkennung veranschaulichen. Wir nutzen dafür die Bilderkennung um Meerschweinchen und Schafe auf Bildern zu erkennen. In der Abbildung 73.4 sehen wir mich in einem Krokodilkostüm. Unser erstes Modell 1 klassifiziert mich als Meerschweinchen. Wir haben also ein sehr hohes Bias vorliegen. Ich bin kein Meerschweinchen.\n\n\n\n\n\n\nAbbildung 73.4— Unser erstes Modell hat ein hohes Bias. Daher klassifiziert mich das Modell 1 als ein Meerschweinchen, obwohl ich ein Krokodil bin.\n\n\n\nIn der Abbildung 73.5 (a) sehen wir ein durch Model 2 korrekt klassifiziertes Meerschweinchen. Nun hat dieses Modell 2 aber eine zu hohe Varianz. Die hohe Varianz in dem Modell 2 sehen wir in der Abbildung 73.5 (b). Das Meerschweinchen wird nicht als Meerschweinchen von Modell 2 erkannt, da es keine krausen Haare und eine andere Fellfarbe hat. Wir sind also auch mit diesem Modell 2 nicht zufrieden. Nur exakt die gleichen Meerschweinchen zu klassifizieren ist uns nicht genug.\n\n\n\n\n\n\n\n\n\n\n\n(a) In unserem Trainingsdatensatz hat unser Modell 2 eine hohe Varianz. Das Modell 2 findet zwar das Meerschweinchen im Bild, aber hat Probleme auf dem folgenden Testdaten.\n\n\n\n\n\n\n\n\n\n\n\n(b) In unseren Testdaten zu dem trainierten Modell 2 kann das Meerschweinchen im Bild nicht erkannt werden. Das Modell 2 hat eine zu hohe Varianz.\n\n\n\n\n\n\n\nAbbildung 73.5— Unser zweites Modell hat eine hohe Varianz. Es erkennt zwar perfekt eine Meerschweinchenart, muss aber bei einer anderen Art passen.\n\n\n\nIn der Abbildung 73.5 (b) sehen wir nun unser Modell 3 mit einem niedrigen Bias und einer niedrigen Varianz. Das Modell 3 kann Schafe in einer Herde als Schafe klassifizieren. Aber auch hier sehen wir gewisse Grenzen. Das Schaf welches den Kopf senkt, wird nicht von dem Modell 3 als ein Schaf erkannt. Das kann vorkommen, wenn in dem Traingsdaten so ein Schaf nicht als Bild vorlag. Häufig brauchen wir sehr viele gute Daten. Mit guten Daten, meine ich nicht immer die gleichen Beobachtungen oder Bilder sondern eine gute Bandbreite aller möglichen Gegebenheiten.\n\n\n\n\n\n\nAbbildung 73.6— Unser letztes Modell 3 hat eine niedrige Varianz und ist in der Lage die Schafe auch als Schafe zu entdecken. Ein Schaf senkt den Kopf und schon kann unser Modell 3 das Schaf nicht mehr finden.\n\n\n\nWir sehen also, das Thema Bias und Varianz beschäftigt uns bei der Auswahl des richtigen Modells und bei der Festlegung der Modellkomplexität. Du kannst dir merken, dass ein komplexeres Modell auf den Trainingsdaten meistens bessere Ergebnisse liefert und dann auf den Testdaten schlechtere. Ein komplexes Modell ist meist überangepasst (eng. overfitted).",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#problem-der-fehlenden-werte",
    "href": "classification-basic.html#problem-der-fehlenden-werte",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.7 Problem der fehlenden Werte",
    "text": "73.7 Problem der fehlenden Werte\n\n\n\n\n\n\nMehr zu fehlenden Werten\n\n\n\nIn dem Kapitel 75 erfährst du, wie du mit den fehlenden Werten im maschinellen Lernen umgehst. Wir werden dort aber nicht alle Details wiederholen. In dem Kapitel 50 erfährst du dann mehr über die Hintergründe und die Verfahren zum Imputieren von fehlenden Werten.\n\n\nEin wichtiger Punkt ist bei der Nutzung von maschinellen Lernen, dass wir keine fehlenden Beobachtungen in den Daten haben dürfen. Es darf kein einzelner Wert fehlen. Dann funktionieren die Algorithmen nicht und wir erhalten eine Fehlermeldung. Deshalb ist es die erste Statistikerpflicht darauf zu achten, dass wir nicht so viele fehlenden Werte in den Daten haben. Das ist natürlich nur begrenzt möglich. Wenn wir auf die Gummibärchendaten schauen, dann wurden die Daten ja von mir mit Erhoben. Dennoch haben wir viele fehlende Daten mit drin, da natürlich Studierende immer was eingetragen haben. Wenn du wissen willst, wie du mit fehlenden Werten umgehst, dann schaue einmal dazu das Kapitel 50 an. Wir gehen hier nicht nochmal auf alle Verfahren ein, werden aber die Verfahren zur Imputation von fehlenden Werten dann am Beispiel der Gummibärchendaten anwenden. Müssen wir ja auch, sonst könnten wir auch die Daten nicht für maschinelle Lernverfahren nutzen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#normalisierung",
    "href": "classification-basic.html#normalisierung",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.8 Normalisierung",
    "text": "73.8 Normalisierung\n\n\n\n\n\n\nMehr zur Normalisierung\n\n\n\nIn dem Kapitel 75 erfährst du, wie du die Normalisierung von Daten im maschinellen Lernen anwendest. In dem Kapitel 20 kannst du dann mehr über die Hintergründe und die Verfahren zur Normalisierung nachlesen. Wir wenden in hier nur die Verfahren an, gehen aber nicht auf die Details weiter ein.\n\n\nUnter Normalisierung der Daten fassen wir eigentlich ein preprocessing der Daten zusammen. Wir haben ja unsere Daten in einer ursprünglichen Form vorliegen. Häufig ist diese Form nicht geeignet um einen maschinellen Lernalgorithmus auf diese ursprüngliche Form der Daten anzuwenden. Deshalb müssen wir die Daten vorher einmal anpassen und in eine geleiche Form über alle Variablen bringen. Was meine ich so kryptisch damit? Schauen wir uns einmal in der Tabelle 73.4 ein Beispiel für zu normalisierende Daten an.\n\n\n\nTabelle 73.4— Beispieldatensatz für einen Datensatz der normiert werden muss. Die einzelnen Spalten haben sehr unterschiedliche Wertebereiche eingetragen.\n\n\n\n\n\n\\(y\\)\n\\(x_1\\)\n\\(x_2\\)\n\\(x_3\\)\n\n\n\n\n1\n0.2\n1430\n23.54\n\n\n0\n0.1\n1096\n18.78\n\n\n1\n0.4\n2903\n16.89\n\n\n1\n0.2\n7861\n12.98\n\n\n\n\n\n\nWarum müssen diese Daten normalisiert werden? Wir haben mit \\(x_1\\) eine Variable vorliegen, die im Iterval \\([0;1]\\) liegt. Die Variable \\(x_2\\) liegt in einem zehntausendfach größeren Wertebereich. Die Werte der Variable \\(x_3\\) ist auch im Vergleich immer noch hundertfach im Wertebereich unterschiedlich. Dieser großen Unterschiede im Wertebereich führen zu Fehlern bei Modellieren. Wir können hierzu das Kapitel 20 betrachten. Dort werden gängige Transformationen einmal erklärt. Wir gehen hier nicht nochmal auf alle Verfahren ein, sondern konzentrieren uns auf die häufigsten Anwendungen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-basic.html#das-rezept-mit-recipe",
    "href": "classification-basic.html#das-rezept-mit-recipe",
    "title": "73  Grundlagen der Klassifikation",
    "section": "73.9 Das Rezept mit recipe()",
    "text": "73.9 Das Rezept mit recipe()\nWenn wir jetzt in den folgenden Kapiteln mit den maschinellen Lernverfahren arbeiten werden, nutzen wir das R Paket {recipes} um uns mit der Funktion recipe() ein Rezept der Klassifikation zu erstellen. Warum brauchen wir das? Wir werden sehen, dass wir auf verschiedene Datensätze immer wieder die gleichen Algorithmen anwenden. Auch wollen wir eine Reihe von Vorverarbeitungsschritten (eng. preprocessing steps) auf unsere Daten anwenden. Dann ist es einfacher, wenn wir alles an einem Ort abgelegt haben. Am Ende haben wir auch verschiedene Spalten in unseren Daten. Meistens eine Spalte mit dem Label und dann sehr viele Spalten für unsere Features oder Prediktoren. Vielleicht noch eine Spalte für die ID der Beobachtungen. Das macht alles sehr unübersichtlich. Deshalb nutzen wir recipes um mehr Ordnung in unsere Klassifikation zu bekommen.\n\n\nDu findest hier die Introduction to recipes und dann eine Idee wie recipes funktionieren mit Preprocess your data with recipes.\nWir gehen nun folgende vier Schritte für die Erstellung eines Modellfits mit dem R Paket {recipe} einmal durch. Am Ende haben wir dann unsere Klassifikation durchgeführt. Vorher haben wir aber unseren Algorithmus und damit unser Modell definiert und auch festgelegt, was in den Daten noch angepasst und transformiert werden soll. Alles zusammen bringen wir dann in ein workflow Objekt in dem alles, was wir mit den Daten machen wollen, gespeichert ist.\n\nErstellen des Modells (logreg_mod),\nein Vorverarbeitungsrezept (eng. preprocessing) für unseren Datensatz pig_tbl erstellen (pig_rec),\ndas Modell und das Rezept in einem Wokflow bündeln (pig_wflow), und\nunseren Workflow mit einem einzigen Aufruf von fit() trainieren.\n\nEs geht los in dem wir als erstes unser Modell definieren. Wir wollen hier aus einfachen Gründen eine logistische Regression rechnen. Dafür nutzen wir die Funktion logistic_reg() um eben eine logistische Regression zu rechnen. Es gibt aber eine große Anzahl an möglichen Implementierungen bzw. engine in R. Wir wählen hier die Implementierung des glm mit der Funktion set_engine(\"glm\"). Faktisch haben wir hier also die Funktion glm(..., family = binomial) definiert. Nur ohne die Daten und die Formel.\n\n\nDu findest auf Fitting and predicting with parsnip eine große Auswahl an implementierten Algorithmen.\n\n\nR Code [zeigen / verbergen]\nlogreg_mod &lt;- logistic_reg() |&gt; \n  set_engine(\"glm\")\n\n\nNachdem wir den Algorithmus für unser Modell definiert haben, wollen wir natürlich noch festlegen, was jetzt gerechnet werden soll. Unser Modell definieren wir in der Funktion recipe(). Hier haben wir definiert, was in das Modell soll. Links steht das Outcome und rechts nur ein .. Damit haben wir alle anderen Spalten als Einflussvariablen ausgewählt. Das stimmt aber nur halb. Den in dem Rezept können wir auch Rollen für unsere Variablen definieren. Mit der Funktion update_role() definieren wir die Variable pig_id als \"ID\". In der Klassifikation wird jetzt diese Variable nicht mehr berücksichtigt. Dann können wir noch Variablen transfomationen definieren. Wir wollen hier eine Dummykodierung für alle nominalen Prädiktoren, daher Faktoren, durchführen. Und wir wollen alle Variablen entfernen, in denen wir nur einen Eintrag haben oder eben eine Varianz von Null.\n\n\nR Code [zeigen / verbergen]\npig_rec &lt;- recipe(infected ~ ., data = pig_tbl) |&gt; \n  update_role(pig_id, new_role = \"ID\")  |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_zv(all_predictors())\n\npig_rec\n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 5\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Zero variance filter on: all_predictors()\n\n\nWir du siehst wird hier noch nichts gerechnet. Es gilt jetzt zu definieren was wir tun wollen. Damit wir das Rezept einfach immer wieder auf neue Daten anwenden können. Die Rollen der Variablen kannst du dir auch über die Funktion summary() wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nsummary(pig_rec)\n\n\n# A tibble: 7 × 4\n  variable type      role      source  \n  &lt;chr&gt;    &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n1 pig_id   &lt;chr [2]&gt; ID        original\n2 age      &lt;chr [2]&gt; predictor original\n3 sex      &lt;chr [3]&gt; predictor original\n4 location &lt;chr [3]&gt; predictor original\n5 activity &lt;chr [2]&gt; predictor original\n6 crp      &lt;chr [2]&gt; predictor original\n7 infected &lt;chr [3]&gt; outcome   original\n\n\nDu siehst, dass die Variable pig_id eine ID ist und die Variable infected das Outcome darstellt. Der Rest sind die Prädiktoren mit ihren jeweiligen Typen. Wir können über die Hilfsfunktionen all_predictor() oder all_nominal_predictor() eben nur bestimmte Spalten für eine Transformation auswählen.\nIm nächsten Schritt bringen wir das Modell logreg_mod und das Rezept pig_rec mit den Informationen über die Variablen und die notwendigen Transformationsschritte in einem workflow() zusammen. In diesem workflow() sind alle wichtigen Information drin und wir können den Workflow mit immer wieder neuen Subsets von unseren ursprünglichen Daten füttern.\n\n\nR Code [zeigen / verbergen]\npig_wflow &lt;- workflow() |&gt; \n  add_model(logreg_mod) |&gt; \n  add_recipe(pig_rec)\n\npig_wflow\n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n\n\nNun heißt es noch den Wirkflow mit echten Daten zu füttern. Wir rechnen also erst jetzt mit echten Daten. Vorher aber wir nur gesagt, was wir machen wollen. Erst die Funktion fit() rechnet das Modell auf den Daten mit den Regeln in dem Rezept. Wir nehmen hier wieder unsere ursprünglichen Daten, aber du könntest hier auch den Traingsdatensatz nehmen.\n\n\nR Code [zeigen / verbergen]\npig_fit &lt;- pig_wflow |&gt; \n  fit(data = pig_tbl)\n\npig_fit\n\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n       (Intercept)                 age            activity                 crp  \n         -19.46706             0.01100             0.06647             0.96804  \n          sex_male  location_northeast  location_northwest       location_west  \n          -0.51320             0.01848            -0.51613            -0.26807  \n\nDegrees of Freedom: 411 Total (i.e. Null);  404 Residual\nNull Deviance:      522.6 \nResidual Deviance: 402.3    AIC: 418.3\n\n\nWir erhalten den klassischen Fit einer logististischen Regression wieder, wenn wir die Funktion extract_fit_parsnip() verwenden. Die Funktion gibt uns dann alle Informationen wieder. Dann können wir uns über die Funktion tidy() auch eine aufgeräumte Wiedergabe erstellen lassen.\n\n\nR Code [zeigen / verbergen]\npig_fit |&gt; \n  extract_fit_parsnip() |&gt; \n  tidy() |&gt; \n  mutate(across(where(is.numeric), round, 2),\n         p.value = pvalue(p.value))\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(where(is.numeric), round, 2)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n# A tibble: 8 × 5\n  term               estimate std.error statistic p.value\n  &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 (Intercept)          -19.5       3.02     -6.45 &lt;0.001 \n2 age                    0.01      0.03      0.4  0.690  \n3 activity               0.07      0.09      0.72 0.470  \n4 crp                    0.97      0.11      8.8  &lt;0.001 \n5 sex_male              -0.51      0.32     -1.61 0.110  \n6 location_northeast     0.02      0.36      0.05 0.960  \n7 location_northwest    -0.52      0.32     -1.6  0.110  \n8 location_west         -0.27      0.36     -0.75 0.460  \n\n\nUnd was ist jetzt mit der Prädiktion? Dafür können wir entweder die Funktion predict() nutzen oder aber die Funktion augment(). Mir persönlich gefällt die Funktion augment() besser, da ich hier mehr Informationen zu den vorhergesagten Werten erhalte. Ich wähle mir dann die Spalte infected aus und alle Spalten, die ein .pred beinhalten. Dann runde ich noch auf die zweite Kommastelle.\n\n\nR Code [zeigen / verbergen]\naugment(pig_fit, new_data = pig_tbl) |&gt; \n  select(infected, matches(\".pred\")) |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\n\n# A tibble: 412 × 4\n   infected .pred_class .pred_0 .pred_1\n   &lt;fct&gt;    &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 1        1              0.03    0.97\n 2 1        0              0.73    0.27\n 3 0        1              0.45    0.55\n 4 1        1              0.31    0.69\n 5 1        1              0.11    0.89\n 6 1        1              0.13    0.87\n 7 1        0              0.6     0.4 \n 8 0        0              0.66    0.34\n 9 1        1              0.05    0.95\n10 1        1              0.21    0.79\n# ℹ 402 more rows\n\n\nDamit hätten wir einmal das Prinzip des Rezeptes für die Klassifikation in R durchgeführt. Dir wird das Rezept in den nächsten Kapiteln wieder über den Weg laufen. Für die Anwendung gibt es eigentlich keine schönere Art die Klassifikation sauber durchzuführen. Wir erhalten gute Ergebnisse und wissen auch was wir getan haben.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>73</span>  <span class='chapter-title'>Grundlagen der Klassifikation</span>"
    ]
  },
  {
    "objectID": "classification-data.html",
    "href": "classification-data.html",
    "title": "74  Data splitting",
    "section": "",
    "text": "74.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 21:46:15\nEin Kapitel nur über Daten? Haben wir nicht schon ein Kapitel über Daten und deren Verteilung? Hier soll es aber nicht um Daten und deren Verteilungen gehen. In diesem Kapitel beschäftigen wir uns mit der Idee der Trainings-, Test- und Validierungsdaten. Wir brauchen alle drei Arten von Daten um zum einen auf den Trainingsdaten unsere Modelle zu trainieren und dann am Ende auf den Testdaten unsere Klassifikation zu überprüfen. Dazwischen nutzen wir unsere Validierungsdaten für die Optimierung oder das Tuning des Modells. Der erste Schritt ist aber immer sich einen Traingsdaten und einen Testdatensatz zu erschaffen. Wie wir das machen, wollen wir uns hier in diesem Kapitel einmal von vielen Seiten annähern. Wir nutzen im ganzen Kapitel das R Paket {resample}. Es gibt sicherlich noch andere Möglichkeiten sich die Daten zu teilen, aber das R Paket {resample} hat einige Vorteile, da das Paket auch im Universium der {tidymodels} angesiedelt ist.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, conflicted)\nconflicts_prefer(magrittr::extract)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#daten",
    "href": "classification-data.html#daten",
    "title": "74  Data splitting",
    "section": "74.2 Daten",
    "text": "74.2 Daten\nIn dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt. Auch brauchen wir nicht alle Spalten, da wir hier um die Zeilen und damit die Beobachtungen geht.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt; \n  mutate(pig_id = 1:n()) |&gt; \n  select(pig_id, infected, age:crp) |&gt; \n  select(pig_id, infected, everything())  \n\n\nIn Tabelle 77.1 siehst du nochmal einen Auschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.\n\n\n\n\nTabelle 74.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\npig_id\ninfected\nage\nsex\nlocation\nactivity\ncrp\n\n\n\n\n1\n1\n61\nmale\nnortheast\n15.31\n22.38\n\n\n2\n1\n53\nmale\nnorthwest\n13.01\n18.64\n\n\n3\n0\n66\nfemale\nnortheast\n11.31\n18.76\n\n\n4\n1\n59\nfemale\nnorth\n13.33\n19.37\n\n\n5\n1\n63\nmale\nnorthwest\n14.71\n21.57\n\n\n6\n1\n55\nmale\nnorthwest\n15.81\n21.45\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n407\n1\n54\nfemale\nnorth\n11.82\n21.5\n\n\n408\n0\n56\nmale\nwest\n13.91\n20.8\n\n\n409\n1\n57\nmale\nnorthwest\n12.49\n21.95\n\n\n410\n1\n61\nmale\nnorthwest\n15.26\n23.1\n\n\n411\n0\n59\nfemale\nnorth\n13.13\n20.23\n\n\n412\n1\n63\nfemale\nnorth\n10.01\n19.89\n\n\n\n\n\n\n\n\nGehen wir jetzt mal die verschiedenen Datensätze und Begrifflichkeiten, die wir für das maschinelle Lernen später brauchen, einmal durch.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#trainingsdatensatz-und-testdatensatz",
    "href": "classification-data.html#trainingsdatensatz-und-testdatensatz",
    "title": "74  Data splitting",
    "section": "74.3 Trainingsdatensatz und Testdatensatz",
    "text": "74.3 Trainingsdatensatz und Testdatensatz\nUm zu beginnen, teilen wir unseren einen Datensatz in zwei: einen Trainingssatz und einen Testsatz. Die meisten Zeilen und damit Beobachtungen des Originaldatensatzes werden im Trainingssatz sein. Wir nutzen die Trainingsdaten zum Anpassen des Modells. Wir trainieren das Modell auf den Daten des Trainingsdatensatzes. Wir messen dann das Modell auf den Testdatensatz. Warum machen wir das? Wenn wir auf dem Trainingsdatensatz auch die Modelgüte testen würden, dann könnten wir eine Überanpassung (eg. overfitting) auf die Trainingsdaten beobachten. Das Modell ist so gut an die spezifischen Trainingsdaten angepasst, dass es mit neuen Daten schwer umgehen kann.\n\n\nDas R Paket {resample} stellt die Common Resampling Patterns nochmal da. Auch findest unter Resampling for Evaluating Performance noch eine Menge mehr Ideen für das Resampling.\nZu diesem Zweck können wir das R Paket {rsample} verwenden. Wir nutzen dann die Funktion initial_split() um die Daten in einen Trainingsdatensatz und einen Testdatensatz aufzuteilen. Dann müssen wir noch den Trainingsdatensatz und den Testdatensatz einmal getrennt in einem Objekt abspeichern.\n\n\nR Code [zeigen / verbergen]\npig_split &lt;- initial_split(pig_tbl, prop = 3/4)\n\npig_split\n\n\n&lt;Training/Testing/Total&gt;\n&lt;309/103/412&gt;\n\n\nWie wir sehen, sehen wir gar nichts. Das ist auch so gewollt. Da wir im maschinellen Lernen gerne mal mit Datensätzen mit mehreren tausend Zeilen arbeiten würde es wenig helfen, wenn wir gleich alles auf der R Console ausgegeben kriegen. Die Information wie viel wir in den jeweiligen Gruppen haben, hilft schön genug.\n\n\nR Code [zeigen / verbergen]\ntrain_pig_tbl &lt;- training(pig_split)\ntest_pig_tbl &lt;- testing(pig_split)\n\n\nNun haben wir die beiden Datensätze jeweils separat und können auf dem Trainingsdatensatz die jeweiligen Algorithmen bzw. Modelle trainieren.\nEs ist schön, wenn wir Funktionen wie initial_split(), die für uns die Arbeit machen. Wir haben dann aber auch sehr schnell das Gefühl mit einer Black Box zu arbeiten. Man weiß gar nicht, was da eigentlich passiert ist. Deshalb hier nochmal der Code, den ich dann auch immer zur Demonstration nutze. Wenn wir eine ID Spalte haben, dann können wir auch über die Funktion sample_frac() und dem Anteil der ausgewählten Beobachtungen und der Funktion anti_join(), die Trainings- und Testdaten erstellen.\n\n\nR Code [zeigen / verbergen]\npig_train_tbl &lt;- pig_tbl |&gt; sample_frac(0.75)\npig_test_tbl &lt;- anti_join(pig_tbl,\n                          pig_train_tbl, by = 'pig_id')\n\n\nWir können dann auch überprüfen, ob wir die gleichen Anteile von den infizierten Ferkeln in den jeweiligen Datensätzen haben. Wir berechnen dafür einfach die relativen Anteile. Ein wenig komplizierter als nötig, aber hier geht es jetzt um die Veranschaulichung.\n\n\nR Code [zeigen / verbergen]\ntable(pig_train_tbl$infected)/sum(table(pig_train_tbl$infected))\n\n\n\n        0         1 \n0.3398058 0.6601942 \n\n\nR Code [zeigen / verbergen]\ntable(pig_test_tbl$infected)/sum(table(pig_test_tbl$infected))\n\n\n\n        0         1 \n0.3009709 0.6990291 \n\n\nDu kannst die Generierung häufiger wiederholen und du wirst sehen, dass wir es mit einem Zufallsprozess zu tun haben. Mal sind die Anteile ähnlicher mal eher nicht. Das ist dann auch der Grund warum wir unsere Modelle tunen müssen und Modelle häufig wiederholt rechnen und die Ergebnisse dann zusammenfassen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#validierungsdatensatz",
    "href": "classification-data.html#validierungsdatensatz",
    "title": "74  Data splitting",
    "section": "74.4 Validierungsdatensatz",
    "text": "74.4 Validierungsdatensatz\nDie finalen Modelle sollten nur einmal anhand ihres Testdatensatzes evaluieren werden. Das Überpfrüfen auf dem Testdatensatz geschieht nachdem die Optimierung und das Training der Modelle vollständig abgeschlossen ist. Was natürlich für uns nicht so schön ist, wir wollen ja auch zwischendurch mal schauen, ob wir auf dem richtigen Weg mit dem Training sind. Wir solle es auch sonst mit dem Tuning funktionieren? Deshalb ist möglich, zusätzliche Datensätze aus dem Trainingsprozess herauszuhalten, die zur mehrmaligen Evaluierung von Modellen verwendet werden können. Das machen wir dann solange bis wir bereit sind anhand des endgültigen Testsatzes zu evaluieren.\nDiese zusätzlichen, aufgeteilten Datensätze werden oft als Validierungssätze bezeichnet und können in über die Funktion validation_split() erstellt werden.\n\n\nR Code [zeigen / verbergen]\nval_pig_lst &lt;- validation_split(pig_tbl, prop = 0.8)\n\n\nWarning: `validation_split()` was deprecated in rsample 1.2.0.\nℹ Please use `initial_validation_split()` instead.\n\n\nR Code [zeigen / verbergen]\nval_pig_lst\n\n\n# Validation Set Split (0.8/0.2)  \n# A tibble: 1 × 2\n  splits           id        \n  &lt;list&gt;           &lt;chr&gt;     \n1 &lt;split [329/83]&gt; validation\n\n\nIn diesem Fall lassen wir den Validierungsdatensatz einmal so in der Liste stehen. Es ist faktisch wider ein Split der Daten, nur das wir jetzt auf diesem Datensatz unser Modell während des Tunings testen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#kreuzvalidierung",
    "href": "classification-data.html#kreuzvalidierung",
    "title": "74  Data splitting",
    "section": "74.5 Kreuzvalidierung",
    "text": "74.5 Kreuzvalidierung\nBei der Abstimmung von Hyperparametern und der Modellanpassung ist es oft nützlich, das Modell anhand von mehr als nur einem einzigen Validierungssatz zu bewerten, um eine stabilere Schätzung der Modellleistung zu erhalten. Wir meinen hier mit Hyperparametern die Optionen, die ein Algorithmus hat um diesen Algorithmus zu optimieren. Aus diesem Grund verwenden Modellierer häufig ein Verfahren, das als Kreuzvalidierung bekannt ist und bei dem die Daten mehrfach in Analyse- und Valisierungsdaten aufgeteilt werden.\nDie vielleicht häufigste Methode der Kreuzvalidierung ist die \\(V\\)-fache Kreuzvalidierung. Bei dieser auch als \\(k\\)-fold cross-validation bezeichneten Methode werden \\(V\\) neue Stichproben bzw. Datensätze erstellt, indem die Daten in \\(V\\) Gruppen (auch folds genannt) von ungefähr gleicher Größe aufgeteilt werden. Der Analysesatz jeder erneuten Stichprobe besteht aus \\(V-1\\) Gruppen, wobei die verbleibende Gruppe als Validierungsdatensatz verwendet wird. Insgesamt führen wir dadurch dann den Algorithmus \\(V\\)-mal durch. Auf diese Weise wird jede Beobachtung in Daten in genau einem Beurteilungssatz verwendet.\nIn R können wir dafür die Funktion vfold_cv() nutzen. Im Folgenden einmal Split für \\(V = 5\\). Wir führen also eine \\(5\\)-fache Kreuzvalidierung durch.\n\n\nR Code [zeigen / verbergen]\nvfold_cv(pig_tbl, v = 3)\n\n\n#  3-fold cross-validation \n# A tibble: 3 × 2\n  splits            id   \n  &lt;list&gt;            &lt;chr&gt;\n1 &lt;split [274/138]&gt; Fold1\n2 &lt;split [275/137]&gt; Fold2\n3 &lt;split [275/137]&gt; Fold3\n\n\nAls ein Nachteil wird oft angesehen, dass die Kreuzvalidierung eine hohe Varianz in den Daten verursacht. Dagegen hilft dann die wiederholte Kreuzvalidierung (eng. repeated cross-validation). Wir bauen in jede Kreuzvalidierung nochmal eine oder mehr Wiederholungen ein. In unserem Fall dann drei Wiederholungen je Kreuzvalidierung \\(V\\).\n\n\nR Code [zeigen / verbergen]\nvfold_cv(pig_tbl, v = 3, repeats = 2)\n\n\n#  3-fold cross-validation repeated 2 times \n# A tibble: 6 × 3\n  splits            id      id2  \n  &lt;list&gt;            &lt;chr&gt;   &lt;chr&gt;\n1 &lt;split [274/138]&gt; Repeat1 Fold1\n2 &lt;split [275/137]&gt; Repeat1 Fold2\n3 &lt;split [275/137]&gt; Repeat1 Fold3\n4 &lt;split [274/138]&gt; Repeat2 Fold1\n5 &lt;split [275/137]&gt; Repeat2 Fold2\n6 &lt;split [275/137]&gt; Repeat2 Fold3\n\n\nWir sehen das der Split ungefähr immer gleich groß ist. Manchmal haben wir durch die Trennung eine Beobachtung mehr in dem Analysedatensatz mit \\(n = 329\\) oder \\(n = 330\\) Beobachtungen. Dementsprechend hat der Validierungsdatensatz einmal \\(n = 82\\) und einmal \\(n = 83\\) Beobachtungen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#monte-carlo-kreuzvalidierung",
    "href": "classification-data.html#monte-carlo-kreuzvalidierung",
    "title": "74  Data splitting",
    "section": "74.6 Monte-Carlo Kreuzvalidierung",
    "text": "74.6 Monte-Carlo Kreuzvalidierung\nWir haben als eine Alternative zur V-fachen Kreuzvalidierung die Monte-Carlo-Kreuzvalidierung vorliegen. Während bei der V-fachen Kreuzvalidierung jede Beobachtung in den Daten einem - und zwar genau einem - Validierungsdatensatz zugewiesen wird, wird bei der Monte-Carlo-Kreuzvalidierung für jeden Validierungsdatensatz eine zufällige Teilmenge der Daten ausgewählt, d. h. jede Beobachtung kann in 0, 1 oder vielen Validierungsdatensätzen verwendet werden. Der Analysesatz besteht dann aus allen Beobachtungen, die nicht ausgewählt wurden. Da jeder Validierungsdatensatz unabhängig ausgewählt wird, können wir diesen Vorgang so oft wie gewünscht wiederholen. Das stimt natürlich nur bedingt, denn irgendwann haben wir auch bei perfekter Permutation dann Wiederholungen der Datensätze.\nDie Funktion mc_cv() liefert uns dann die Datensätze für die Monte-Carlo Kreuzvalidierung. Wir geben dabei an, wieviel der Daten in den jeweiligen Datensatz hinein permutiert werden soll.\n\n\nR Code [zeigen / verbergen]\nmc_cv(pig_tbl, prop = 0.6, times = 3)\n\n\n# Monte Carlo cross-validation (0.6/0.4) with 3 resamples  \n# A tibble: 3 × 2\n  splits            id       \n  &lt;list&gt;            &lt;chr&gt;    \n1 &lt;split [247/165]&gt; Resample1\n2 &lt;split [247/165]&gt; Resample2\n3 &lt;split [247/165]&gt; Resample3",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#bootstraping",
    "href": "classification-data.html#bootstraping",
    "title": "74  Data splitting",
    "section": "74.7 Bootstraping",
    "text": "74.7 Bootstraping\nDie letzte Stichprobengenierungsmethode ist der Bootstrap. Eine Bootstrap Stichprobe ist eine Stichprobe des Datensatzes mit der gleichen Größe wie der Datensatz. Nur werden die Bootstrap Stichproben mit Ersetzung gezogen, so dass eine einzelne Beobachtung mehrfach in die Stichprobe aufgenommen werden können. Der Validierungsdatensatz besteht dann aus allen Beobachtungen, die nicht für den Analysesatz ausgewählt wurden. Im Allgemeinen führt das Bootstrap-Resampling zu pessimistischen Schätzungen der Modellgenauigkeit.\nWir können die Funktion bootstraps() für die Generierung der Bootstrap Stichprobe nutzen.\n\n\nR Code [zeigen / verbergen]\npig_boot_tbl &lt;- pig_tbl |&gt; \n  extract(1:10, 1:5)\n\npig_boot &lt;- bootstraps(pig_boot_tbl, times = 3)\n\n\nNun haben wir auch die Möglichkeit uns die einzelnen Bootstraps Stichproben mit pluck() rauszuziehen. Hier sehen wir auch, dass einzelne Beobachtungen doppelt in der Bootstrap Stich probe vorkommen.\n\n\nR Code [zeigen / verbergen]\npluck(pig_boot, \"splits\", 1) |&gt; \n  as_tibble() \n\n\n# A tibble: 10 × 5\n   pig_id infected   age sex    location \n    &lt;int&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n 1      7        1    49 male   west     \n 2     10        1    57 male   northwest\n 3      5        1    63 male   northwest\n 4      3        0    66 female northeast\n 5      8        0    53 male   northwest\n 6      2        1    53 male   northwest\n 7      3        0    66 female northeast\n 8      8        0    53 male   northwest\n 9      3        0    66 female northeast\n10      3        0    66 female northeast",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-data.html#weitere-valdierungen",
    "href": "classification-data.html#weitere-valdierungen",
    "title": "74  Data splitting",
    "section": "74.8 Weitere Valdierungen",
    "text": "74.8 Weitere Valdierungen\nNeben den hier vorgestellten Varianten gibt es noch weitere Möglichkeiten in dem R Paket {rsample} sich Stichprobendatensätze zu generieren. Wir gehen jetzt hier nicht mehr im Detail auf die verschiedenen Möglichkeiten ein. Dafür dann einfach die Links auf die {rsample} Hilfeseite nutzen.\n\nStratifiziertes Resampling nutzen wir, wenn wir eine Gruppe in den Daten haben, die nicht gleichmäßig über die Daten verteilt ist. Das heißt, wir haben ein nicht balanciertes Design. Kann plakativ wäre das der Fall, wenn wir fast nur Frauen oder Männer in unseren Daten vorliegen hätten. Hier kann es dann passieren, dass wir zufällig Datensätze ziehen, die nur Frauen oder nur Männer beinhalten. Das wollen wir natürlich verhindern.\nGruppiertes Resampling nutzen wir, wenn wir korrelierte Beobachtungen haben. Oft sind einige Beobachtungen in deinen Daten ähnlicher als es der Zufall vermuten ließe, z. B. weil sie wiederholte Messungen desselben Probanden darstellen oder alle an einem einzigen Ort gesammelt wurden. Dann müssen wir eventuell auch hierfür das Resampling anpassen.\nZeitpunkt basiertes Resampling sind in dem Sinne eine Besonderheit, da wir natürlich berücksichtigen müssen, wann eine Beobachtung im zeitlichen Verlauf gemacht wurde. Hier hat die Zeit einen Einfluss auf das Resampling.\n\nAm Ende musst du entscheiden, welche der Resamplingmethoden für dich am besten geeignet ist. Wir müssen eben einen Trainingsdatensatz und einen Testdatensatz haben. Die Validierungsdaten dienen dann zum Tuning deiner Modelle. Nicht immer nutzen wir auch Validierungsdatensätze. In dem einfachsten Anwendungsfall nutzt du immer wieder deine Traingsdaten mit unterschiedlichen Einstellungen in deinem Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>74</span>  <span class='chapter-title'>Data splitting</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html",
    "href": "classification-pre-processing.html",
    "title": "75  Data preprocessing",
    "section": "",
    "text": "75.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 21:57:33\nDie Vorverarbeitung von Daten (eng. preprocessing) für die Klassifikation grundlegend. Wir können nicht auf unseren Daten so wir wie die Daten erhoben haben eine Klassifikation rechnen. Dafür sind die Algorithmen der Klassifikation weder ausgelegt noch gedacht. Zum anderen wollen wir ja gar keine Aussagen über mögliche Effekte von den Einflussvariablen auf das Outcome treffen. Uns ist vollkommen egal, ob eine Variable signifikant ist. Wir wollen nur wissen, ob eine Variable wichtig für die Vorhersage von unserem Label \\(y\\) ist.\nDu findest auf der Referenzseite von recipes eine große Auswahl an Vorverarbeitungsschritten. Ich kann dir hier nur eine Auswahl präsentieren und konzentriere mich auf die häufigste genutzen Algorithmen. Du solltest aber für deinen Anwendungsfall auf jeden Fall nochmal selber schauen, ob du was passenderes findest.\nEinige Vorverarbeitungsschritte kannst du auch in den vorherigen Kapiteln nachlesen. Im Kapitel zur Transformation von Daten oder zur Imputation von fehlenden Werten findest du noch tiefer greifende Informationen zu den Themen. In diesem Kapitel zeige ich nur, wie du die Verfahren anwendest und gehe nochmal eher oberflächlich auf mögliche Probleme ein.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, \n               janitor,\n               conflicted)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#daten",
    "href": "classification-pre-processing.html#daten",
    "title": "75  Data preprocessing",
    "section": "75.2 Daten",
    "text": "75.2 Daten\nIn dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt. Wir wählen auch nur ein kleines Subset aus den Daten aus, da wir in diesem Kapitel nur Funktion demonstrieren und nicht die Ergebnisse interpretieren.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt; \n  mutate(pig_id = 1:n()) |&gt; \n  select(pig_id, infected, age, crp, sex, frailty) |&gt; \n  select(pig_id, infected, everything())  \n\n\nIn Tabelle 77.1 siehst du nochmal einen Ausschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.\n\n\n\n\nTabelle 75.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\npig_id\ninfected\nage\ncrp\nsex\nfrailty\n\n\n\n\n1\n1\n61\n22.38\nmale\nrobust\n\n\n2\n1\n53\n18.64\nmale\nrobust\n\n\n3\n0\n66\n18.76\nfemale\nrobust\n\n\n4\n1\n59\n19.37\nfemale\nrobust\n\n\n5\n1\n63\n21.57\nmale\nrobust\n\n\n6\n1\n55\n21.45\nmale\nrobust\n\n\n…\n…\n…\n…\n…\n…\n\n\n407\n1\n54\n21.5\nfemale\npre-frail\n\n\n408\n0\n56\n20.8\nmale\nfrail\n\n\n409\n1\n57\n21.95\nmale\npre-frail\n\n\n410\n1\n61\n23.1\nmale\nrobust\n\n\n411\n0\n59\n20.23\nfemale\nrobust\n\n\n412\n1\n63\n19.89\nfemale\nrobust\n\n\n\n\n\n\n\n\nGehen wir jetzt mal die Preprocessing Schritte, die wir für das maschinelle Lernen später brauchen einmal durch. Am Ende des Kapitels schauen wir uns dann die Anwendung nochmal im Ganzen auf den Gummibärchendaten einmal an.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#das-rezept-mit-recipe",
    "href": "classification-pre-processing.html#das-rezept-mit-recipe",
    "title": "75  Data preprocessing",
    "section": "75.3 Das Rezept mit recipe()",
    "text": "75.3 Das Rezept mit recipe()\nIn dem Einführungskapitel zur Klassifikation haben wir uns ja mit dem Rezept und dem Workflow schon mal beschäftigt. Hier möchte ich dann nochmal etwas mehr auf das Rezept eingehen und zeigen, wie das Rezept für Daten dann mit den Daten zusammenkommt. Wir bauen uns wie immer mit der Funktion recipe() das Datenrezept in R zusammen. Ich empfehle grundsätzlich vorab einen select() Schritt durchzuführen und nur die Variablen in den Daten zu behalten, die wir wirklich brauchen. Dann können wir auch mit dem . einfach alle Spalten ohne das Outcome als Prädiktoren definieren.\n\n\nR Code [zeigen / verbergen]\npig_rec &lt;- recipe(infected ~ ., data = pig_tbl) |&gt; \n  update_role(pig_id, new_role = \"ID\")\n\npig_rec |&gt; summary()\n\n\n# A tibble: 6 × 4\n  variable type      role      source  \n  &lt;chr&gt;    &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n1 pig_id   &lt;chr [2]&gt; ID        original\n2 age      &lt;chr [2]&gt; predictor original\n3 crp      &lt;chr [2]&gt; predictor original\n4 sex      &lt;chr [3]&gt; predictor original\n5 frailty  &lt;chr [3]&gt; predictor original\n6 infected &lt;chr [2]&gt; outcome   original\n\n\nNachdem wir dann unser Rezept definiert haben, können wir auch noch Rollen vergeben. Die Rollen sind nützlich, wenn wir später auf bestimmten Variablen etwas rechnen wollen oder eben nicht. Wir können die Rollen selber definieren und diese Rollen dann auch über die Funktion has_role() ein- oder ausschließen. Neben dieser Möglichkeit gezielt Variablen nach der Rolle anzusprechen, können wir auch alle Prädiktoren oder alle Outcomes auswählen.\nWir haben Funktionen, die die Rolle der Variablen festlegen:\n\nall_predictors() wendet den Schritt nur auf die Prädiktorvariablen an, daher auf die Features.\nall_outcomes() wendet den Schritt nur auf die Outcome-Variable(n) an, daher auf die Label.\n\nUn wir haben Funktionen, die den Typ der Variablen angeben:\n\nall_nominal() wendet den Schritt auf alle Variablen an, die nominal (kategorisch) sind.\nall_numeric() wendet den Schritt auf alle Variablen an, die numerisch sind.\n\nUnd natürlich deren Kombination wie all_nominal_predictors() oder all_numeric_predictors(), die dann eben auf die Prädiktoren, die nominal also Faktoren oder Gruppen repräsentieren oder eben numerischen Variablen, angewendet werden. Du wirst die Anwendung gleich später in den Rezeptschritten sehen, da macht die Sache dann sehr viel mehr Sinn.\nNun ist es aber auch so, dass es bei dem Rezept auf die Reihenfolge der einzelnen Schritte ankommt. Die Reihenfolge der Zutaten und damit der Rezeptschritte sind ja auch beim Kuchenbacken sehr wichtig! Da das Rezept wirklich in der Reihenfolge durchgeführt wird, wie du die einzelnen Schritte angibst, empfiehlt sich folgende Reihenfolge. Du musst natürlich nicht jeden dieser Schritte auch immer durchführen.\n\n\nBitte die Hinweise zur Ordnung der Schritte eines Rezeptes beachten: Ordering of steps\n\nEntfernen von Beobachtungen mit einem fehlenden Eintrag für das Label.\nImputation von fehlenden Werten in den Daten.\nIndividuelle Transformationen auf einzelnen Spalten.\nUmwandeln von einzelnen numerischen Variablen in eine diskrete Variable.\nErstellung der Dummyvariablen für jede diskrete Variable.\nEventuell Berücksichtigung der Interaktion zwischen Variablen.\nTransformation der numerischen Variablen mit zum Beispiel der Standarisierung oder Normalisierung.\nMultivariate Transformationen über alle Spalten hinweg wie zum Beispiel PCA.\n\nAm Ende wollen wir dann natürlich auch die Daten wiederhaben. Das heißt, wir bauen ja das Rezept auf einem Datensatz. Wenn wir dann das fertige Rezept in die Funktion prep() pipen können wir über die Funktion juice() den ursprünglichen jetzt aber transformierten Datensatz wieder erhalten. Wenn wir das Rezept auf einen neuen Datensatz anwenden wollen, dann nutzen wir die Funktion bake(). Mit einem neuen Datensatz meine ich natürlich einen Split in Training- und Testdaten von dem ursprünglichen Datensatz. In dem neuen Datensatz müssen natürlich alle Spaltennamen auch enthalten sein, sonst macht die Sache recht wenig Sinn.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#fehlende-werte-im-y",
    "href": "classification-pre-processing.html#fehlende-werte-im-y",
    "title": "75  Data preprocessing",
    "section": "75.4 Fehlende Werte im \\(Y\\)",
    "text": "75.4 Fehlende Werte im \\(Y\\)\nWenn wir mit maschinellen Lernverfahren rechnen, dann dürfen wir im Outcome \\(Y\\) oder dem Label keine fehlenden Werte vorliegen haben. Das Outcome ist in dem Sinne hielig, dass wir hier keine Werte imputieren. Wir müssen daher alle Zeilen und damit Beobachtungen aus den Daten entfernen in denen ein NA im Outcome vorliegt. Wir können dazu die Funktion drop_na() nutzen. Wir können in der Funktion spezifizieren, dass nur für eine Spalte die NA entfernt werden sollen. In unserem Beispiel für die Ferkeldaten wäre es dann die Spalte infected.\n\n\nR Code [zeigen / verbergen]\ndrop_na(infected)\n\n\nAktuell haben wir ja keine fehlenden Werte in der Spalte vorliegen, so dass wir die Funktion hier nicht benötigen. In dem Beispiel zu den Gummibärchendaten wollen wir das Geschlecht vorhersagen und hier haben wir dann fehlende Werte im Outcome. Mit der Funktion drop_na(gender) entfernen wir dann alle Beobachtungen aus den Daten mit einem fehlenden Eintrag für das Geschlecht.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-dummy",
    "href": "classification-pre-processing.html#sec-preprocess-dummy",
    "title": "75  Data preprocessing",
    "section": "75.5 Dummycodierung von \\(X\\)",
    "text": "75.5 Dummycodierung von \\(X\\)\nWir werden immer häufiger davon sprechen, dass wir alle kategorialen Daten in Dummies überführen müssen. Das heißt, wir dürfen keine Faktoren mehr in unseren Daten haben. Wir wandeln daher alle Variablen, die ein Faktor sind, in Dummyspalten um. Die Idee von der Dummyspalte ist die gleiche wie bei der multiplen Regression. Da ich aber nicht davon ausgehe, dass du dir alles hier durchgelesen hast, kommt hier die kurze Einführung zur Dummycodierung.\n\n\nMehr Information zu Create Traditional Dummy Variables\nDie Dummycodierung wird nur auf den Features durchgeführt. Dabei werden nur Spalten erschaffen, die \\(0/1\\), für Level vorhanden oder Level nicht vorhanden, beinhalten. Wir werden also nur alle \\(x\\) in Dummies umwandeln, die einem Faktor entsprechen. Dafür nutzen wir dann später eine Funktion, hier machen wir das einmal zu Veranschaulichung per Hand. In Tabelle 75.2 haben wir einen kleinen Ausschnitt unser Schweinedaten gegeben. Wir wollen zuerst die Spalte sex in eine Dummycodierung umwandeln.\n\n\n\nTabelle 75.2— Beispieldatensatz für die Dummycodierung. Wir wollen die Spalten sex und frailty als Dummyspalten haben.\n\n\n\n\n\ninfected\nage\nsex\nfrailty\n\n\n\n\n1\n24\nmale\nrobust\n\n\n0\n36\nmale\npre-frail\n\n\n0\n21\nfemale\nfrail\n\n\n1\n34\nfemale\nrobust\n\n\n1\n27\nmale\nfrail\n\n\n\n\n\n\nIn der Tabelle 75.3 sehen wir das Ergebnis für die Dummycodierung der Spalte sex in die Dummyspalte sex_male. Wir haben in der Dummyspalte nur noch die Information, ob das Ferkel mänlich ist oder nicht. Wenn wir eine Eins in der Spalte finden, dann ist das Ferkel männlich. Wenn wir eine Null vorfinden, dann ist das Ferkel nicht männlich also weiblich. Das Nicht müssen wir uns dann immer merken.\n\n\n\nTabelle 75.3— Ergebnis der Dummycodierung der Spalte sex zu der Spalte sex_male.\n\n\n\n\n\ninfected\nage\nsex_male\n\n\n\n\n1\n24\n1\n\n\n0\n36\n1\n\n\n0\n21\n0\n\n\n1\n34\n0\n\n\n1\n27\n1\n\n\n\n\n\n\nIn der Tabelle 75.4 betrachten wir einen komplexeren Fall. Wenn wir eine Spalte vorliegen haben mit mehr als zwei Leveln, wie zum Beispiel die Spalte frailty, dann erhalten wir zwei Spalten wieder. Die Spalte frailty_robust beschreibt das Vorhandensein des Levels robust und die Spalte frailty_pre-frail das Vorhandensein des Levels pre-frail. Und was ist mit dem Level frail? Das Level wir durch das Nichtvorhandensein von robust und dem Nichtvorhandensein von pre-frail abgebildet. Beinhalten beide Spalten die Null, so ist das Ferkel frail.\n\n\n\nTabelle 75.4— Ergebnis der Dummycodierung für eine Spalte mit mehr als zwei Leveln.\n\n\n\n\n\ninfected\nage\nfrailty_robust\nfrailty_pre-frail\n\n\n\n\n1\n24\n1\n0\n\n\n0\n36\n0\n1\n\n\n0\n21\n0\n0\n\n\n1\n34\n1\n0\n\n\n1\n27\n0\n0\n\n\n\n\n\n\nWenn wir einen Faktor mit \\(l\\) Leveln haben, erhalten wir immer \\(l-1\\) Spalten nach der Dummycodierung wieder.\nWir nutzen dann die Funktion step_dummy() um eine Dummaycodierung für alle nominalen Prädiktoren spezifiziert durch all_nominal_predictors() durchzuführen. Das tolle ist hier, dass wir durch die Helferfunktionen immer genau sagen können welche Typen von Spalten bearbeitet werden sollen.\n\n\nR Code [zeigen / verbergen]\npig_dummy_rec &lt;- pig_rec |&gt; \n  step_dummy(all_nominal_predictors()) \n\npig_dummy_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Dummy variables from: all_nominal_predictors()\n\n\nWenn wir das Rezept fertig haben, dann können wir uns die Daten einmal anschauen. Durch die Funktion prep() initialisieren wir das Rezept und mit der Funktion juice() teilen wir mit, dass wir das Rezept gleich auf die Trainingsdaten mit denen wir das Rezept gebaut haben, anweden wollen.\n\n\nR Code [zeigen / verbergen]\npig_dummy_rec |&gt;\n  prep() |&gt;\n  juice() \n\n\n# A tibble: 412 × 7\n   pig_id   age   crp infected sex_male frailty_pre.frail frailty_robust\n    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n 1      1    61  22.4        1        1                 0              1\n 2      2    53  18.6        1        1                 0              1\n 3      3    66  18.8        0        0                 0              1\n 4      4    59  19.4        1        0                 0              1\n 5      5    63  21.6        1        1                 0              1\n 6      6    55  21.4        1        1                 0              1\n 7      7    49  19.0        1        1                 1              0\n 8      8    53  19.0        0        1                 0              1\n 9      9    58  21.9        1        0                 0              1\n10     10    57  21.0        1        1                 0              1\n# ℹ 402 more rows\n\n\nDie Dummycodierung verwandelt alle nominalen Spalten in mehrere \\(0/1\\) Spalten um. Das ermöglicht den Algorithmen auch mit nominalen Spalten eine Vorhersage zu machen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-zv",
    "href": "classification-pre-processing.html#sec-preprocess-zv",
    "title": "75  Data preprocessing",
    "section": "75.6 Zero Variance Spalten",
    "text": "75.6 Zero Variance Spalten\nEin häufiges Problem ist, dass wir manchmal Spalten in unseren Daten haben in denen nur ein Eintrag steht. Das heißt wir haben überall die gleiche Zahl oder eben das gelche Wort stehen. Das tritt häufiger auf, wenn wir uns riesige Datenmengen von extern herunterladen. Manchmal haben wir so viele Spalten, dass wir die Daten gr nicht richtig überblicken. Oder aber, wir haben nach einer Transformation nur noch die gleiche Zahl. Dagegen können wir filtern.\n\n\nMehr Information zu Zero Variance Filter und Near-Zero Variance Filter\nWir haben die Auswahl zwischen step_zv(), die Funktion entfernt Spalten mit einer Vaianz von Null. Das mag seltener vorkommen, als eine sehr kleine Varianz. Hier hilft die Funktion step_nzv(). Wir können beide Funktionen auf alle Arten von Prädiktoren anwenden, nur eben nicht gleichzeitig.\n\n\nR Code [zeigen / verbergen]\npig_zero_rec &lt;- pig_rec |&gt; \n  step_zv(all_predictors()) |&gt; \n  step_nzv(all_predictors())\n\npig_zero_rec\n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Zero variance filter on: all_predictors()\n\n\n• Sparse, unbalanced variable filter on: all_predictors()\n\n\nDa wir in unseren Daten mit den infizierten Ferkeln jetzt keine Spalten mit einer sehr kleinen Varianz haben, passiert auch nichts, wenn wir die Funktion auf unsere Daten anwenden würden. Demensprechend sparen wir uns an dieser Stelle auch die Datengenerierung.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-standard",
    "href": "classification-pre-processing.html#sec-preprocess-standard",
    "title": "75  Data preprocessing",
    "section": "75.7 Standardisieren \\(\\mathcal{N}(0,1)\\)",
    "text": "75.7 Standardisieren \\(\\mathcal{N}(0,1)\\)\nIn dem Kapitel zu der Transformation von Daten haben wir ja schon von der Standardisierung gelesen und uns mit den gängigen Funktion beschäftigt. Deshalb hier nur kurz die Schritte und Funktionen, die wir mit den Rezepten machen können. Zum einen können wir nur die Daten mit der Funktion step_scale() skalieren, dass heißt auf eine Standardabweichung von 1 bringen. Oder aber zum anderen nutzen wir die Funktion scale_center() um die Daten alle auf einen Mittelwert von 0 zu schieben. Manchmal wollen wir nur den einen Schritt getrennt von dem anderen Schritt durchführen. Beide Schritte können wir dann einfach auf allen numerischen Prädiktoren durchführen.\n\n\nMehr Information zu Scaling Numeric Data sowie Centering Numeric Data und Center and Scale Numeric Data\n\n\nR Code [zeigen / verbergen]\npig_scale_center_rec &lt;- pig_rec |&gt; \n  step_center(all_numeric_predictors()) |&gt; \n  step_scale(all_numeric_predictors()) \n\npig_scale_center_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Centering for: all_numeric_predictors()\n\n\n• Scaling for: all_numeric_predictors()\n\n\nWenn wir aber auf eine getrennte Durchführung keine Lust haben, gibt es auch die etwas schief benannte Funktion step_normalize(), die beide Schritte kombiniert und uns damit die Daten auf eine Standardnormalverteilung transformiert. Ich persönlich nutze dann meist die zweite Variante, dann hat man alles in einem Schritt zusammen. Das hängt aber sehr vom Anwendungsfall ab und du musst dann schauen, was besser für dich und deine Daten dann passt.\n\n\nR Code [zeigen / verbergen]\npig_scale_center_rec &lt;- pig_rec |&gt; \n  step_normalize(all_numeric_predictors()) \n\npig_scale_center_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Centering and scaling for: all_numeric_predictors()\n\n\nJetzt können wir noch die Daten generieren und sehen, dass wir alle numerischen Spalten in eine Standardnormalverteilung transformiert haben. Wir runden hier nochmal alle numerischen Variablen, damit wir nicht so einen breiten Datensatz erhalten. Das hat jetzt aber eher was mit der Ausgabe hier auf der Webseite zu tun. Wir müssen nicht runden um die Daten dann zu verwenden.\n\n\nR Code [zeigen / verbergen]\npig_scale_center_rec |&gt;\n  prep() |&gt;\n  juice() |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\n\n# A tibble: 412 × 6\n   pig_id   age   crp sex    frailty   infected\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;        &lt;dbl&gt;\n 1      1  0.22  1.62 male   robust           1\n 2      2 -1.55 -0.99 male   robust           1\n 3      3  1.32 -0.91 female robust           0\n 4      4 -0.23 -0.48 female robust           1\n 5      5  0.66  1.05 male   robust           1\n 6      6 -1.11  0.97 male   robust           1\n 7      7 -2.44 -0.76 male   pre-frail        1\n 8      8 -1.55 -0.76 male   robust           0\n 9      9 -0.45  1.27 female robust           1\n10     10 -0.67  0.62 male   robust           1\n# ℹ 402 more rows",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-normal",
    "href": "classification-pre-processing.html#sec-preprocess-normal",
    "title": "75  Data preprocessing",
    "section": "75.8 Normalisieren \\([0; 1]\\)",
    "text": "75.8 Normalisieren \\([0; 1]\\)\nAuch bei der Normalisierung möchte ich wieder auf das Kapitel zum Transformation von Daten verweisen. In dem tidymodels Universum heißt dann das Normalisieren, also die Daten auf eine Spannweite zwischen 0 und 1 bringen, dann eben step_range(). Das ist natürlich dann schön generalisiert. Wir könnten uns auch andere Spannweiten überlegen, aber hier nehmen wir natürlich immer den Klassiker auf eine Spannweite \\([0; 1]\\). Unsere Daten liegen dann nach der Normalisierung mit der Funktion step_range() zwischen 0 und 1. Wir können die Normalisierung natürlich nur auf numerischen Variablen durchführen.\n\n\nMehr Information zu Scaling Numeric Data to a Specific Range\n\n\nR Code [zeigen / verbergen]\npig_range_rec &lt;- pig_rec |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1) \n\npig_range_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Range scaling to [0,1] for: all_numeric_predictors()\n\n\nAuch hier können wir dann die Daten generieren und uns einmal anschauen. Im Gegensatz zu der Standardisierung treten jetzt in unseren Spalten keine negativen Werte mehr auf. Wir runden hier ebenfalls nochmal alle numerischen Variablen, damit wir nicht so einen breiten Datensatz erhalten. Das hat jetzt aber eher was mit der Ausgabe hier auf der Webseite zu tun. Wir müssen nicht runden um die Daten dann zu verwenden.\n\n\nR Code [zeigen / verbergen]\npig_range_rec |&gt;\n  prep() |&gt;\n  juice() |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\n\n# A tibble: 412 × 6\n   pig_id   age   crp sex    frailty   infected\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;        &lt;dbl&gt;\n 1      1  0.52  0.82 male   robust           1\n 2      2  0.17  0.34 male   robust           1\n 3      3  0.74  0.36 female robust           0\n 4      4  0.43  0.44 female robust           1\n 5      5  0.61  0.72 male   robust           1\n 6      6  0.26  0.7  male   robust           1\n 7      7  0     0.39 male   pre-frail        1\n 8      8  0.17  0.39 male   robust           0\n 9      9  0.39  0.76 female robust           1\n10     10  0.35  0.64 male   robust           1\n# ℹ 402 more rows",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-impute",
    "href": "classification-pre-processing.html#sec-preprocess-impute",
    "title": "75  Data preprocessing",
    "section": "75.9 Imputieren von fehlenden Werten",
    "text": "75.9 Imputieren von fehlenden Werten\nIn dem Kapitel zur Imputation von fehlenden Werten haben wir uns mit verschiedenen Methoden zur Imputation von fehlenden Werten beschäftigt. Auch gibt es verschiedene Rezepte um die Imputation durchzuführen. Wir haben also wieder die Qual der Wahl welchen Algorithmus wir nutzen wollen. Da wir wieder zwischen numerischen und nominalen Variablen unterscheiden müssen, haben wir immer zwei Imputationsschritte. Ich mache es mir hier sehr leicht und wähle die mean Imputation für die numerischen Variablen aus und die mode Imputation für die nominalen Variablen. Das sind natürlich die beiden simpelsten Imputation die gehen. Ich würde dir empfehlen nochmal die Alternativen anzuschauen und vorab auf jeden Fall nochmal dir die fehlenden Daten zu visualisieren. Es macht auch hier keinen Sinn nicht vorhandene Spalten mit künstlichen Daten zu füllen.\n\n\nMehr Information zu Step Functions - Imputation\nDa wir es uns in diesem Schritt sehr einfach machen, nutzen wir die Funktionen step_impute_mean() auf allen numerischen Variablen und die Funktion step_impute_mode() auf alle nominalen Variablen. Es geht wie immer natürlich besser, das heißt auch komplexerer. Hier ist es auch wieder schwierig zu sagen, welche Methode die beste Methode zur Imputation von fehlenden Werten ist. Hier hilft es dann nichts, du musst dir die imputierten Daten anschauen.\n\n\nR Code [zeigen / verbergen]\npig_imp_rec &lt;- pig_rec |&gt; \n  step_impute_mean(all_numeric_predictors()) |&gt; \n  step_impute_mode(all_nominal_predictors())\n\npig_imp_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Mean imputation for: all_numeric_predictors()\n\n\n• Mode imputation for: all_nominal_predictors()\n\n\nDann können wir uns auch schon die Daten generieren. Wir sehen, dass wir keine fehlenden Werte mehr in unseren Daten vorliegen haben. Wie immer können wir uns die gerundeten Daten dann einmal anschauen.\n\n\nR Code [zeigen / verbergen]\npig_imp_rec  |&gt;\n  prep() |&gt;\n  juice() |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\n\n# A tibble: 412 × 6\n   pig_id   age   crp sex    frailty   infected\n    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;        &lt;dbl&gt;\n 1      1    61  22.4 male   robust           1\n 2      2    53  18.6 male   robust           1\n 3      3    66  18.8 female robust           0\n 4      4    59  19.4 female robust           1\n 5      5    63  21.6 male   robust           1\n 6      6    55  21.4 male   robust           1\n 7      7    49  19.0 male   pre-frail        1\n 8      8    53  19.0 male   robust           0\n 9      9    58  21.9 female robust           1\n10     10    57  21.0 male   robust           1\n# ℹ 402 more rows\n\n\nDie Imputationrezepte bieten sich natürlich auch für die ganz normale Statistik an. Du kannst ja dann mit den imputierten Daten rechnen was du möchtest. Wir nutzen die Daten hier ja nur im Kontext der Klassifikation. Es gingt natürlich auch die Daten für die lineare Regression zu nutzen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-discrete",
    "href": "classification-pre-processing.html#sec-preprocess-discrete",
    "title": "75  Data preprocessing",
    "section": "75.10 Kategorisierung",
    "text": "75.10 Kategorisierung\nManchmal wollen wir nicht mit numerischen Variablen arbeiten sondern uns nominale Variablen erschaffen. Das sollten wir eigentlich nicht so häufig tun, denn die numerischen Variablen haben meist mehr Informationen als nominale Variablen. Wir müssen dann ja unsere nominalen Daten dann wieder in Dummies umkodieren. Das sind dann zwei zusätzliche Schritte. Aber wie immer in der Datenanalyse, es gibt Fälle in denen es Sinn macht und wir eben keine numerischen Variablen haben wollen. Dann können wir eben die Funktion step_discretize() nutzen um verschiedene Gruppen oder bins (eng. Dosen) zu bilden. Das R Paket {embed} bietet noch eine Vielzahl an weiteren Funktionen für die Erstellung von kategorialen Variablen.\nEs kann natürlich sinnvoll sein aus einer numerischen Outcomevariablen eine binäre Outcomevariable zu erzeugen. Dann können wir wieder eine Klassifikation rechnen. Aber auch hier musst du überlegen, ob das binäre Outcome dann dem numerischen Outcome inhaltlich entspricht. Wir können natürlich aus dem numerischen Lichteinfall die binäre Variable wenig/viel Licht transformieren. Dann muss die neue binäre Variable aber auch zur Fragestellung passen. Oder aus Noten auf der Likert-Skala nur zwei Noten mit schlecht/gut erschaffen.\n\n\nMehr Information zu Step Functions - Discretization\nWir wollen jetzt die Spalten age und crp in mindestens drei gleich große Gruppen aufspalten. Wenn wir mehr Gruppen brauchen, dann werden es mehr Gruppen werden. Das wichtige ist hier, dass wir gleich große Gruppen haben wollen.\n\n\nR Code [zeigen / verbergen]\npig_discrete_rec &lt;- pig_rec |&gt;\n  step_discretize(crp, age, min_unique = 3)\n\npig_discrete_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Discretize numeric variables from: crp and age\n\n\nUnd dann können wir uns auch schon die Daten generieren. Wir immer gibt es noch andere Möglichkeiten um aus einer numerischen Spalte eine nominale Spalte zu generieren. Du musst dann abgleichen, welche Variante dir am besten passt.\n\n\nR Code [zeigen / verbergen]\npig_discrete_tbl &lt;- pig_discrete_rec  |&gt;\n  prep() |&gt;\n  juice() \n\n\nWarning: Note that the options `prefix` and `labels` will be applied to all\nvariables.\n\n\nWir sehen, dass wir dann jeweils vier bins erhalten mit gut 25% Beobachtungen in jedem bin. Wir können dann mit der neuen Variable weiterrechnen und zum Beispiel diese neue nominale Variable dann in eine Dummykodierung umwandeln. Hier siehst du, dass du gewisse Schritte in einem Rezept in der richtigen Reihenfolge durchführen musst.\n\n\nR Code [zeigen / verbergen]\npig_discrete_tbl |&gt; pull(crp) |&gt; tabyl()\n\n\n pull(pig_discrete_tbl, crp)   n   percent\n                        bin1 104 0.2524272\n                        bin2 102 0.2475728\n                        bin3 103 0.2500000\n                        bin4 103 0.2500000\n\n\nR Code [zeigen / verbergen]\npig_discrete_tbl |&gt; pull(age) |&gt; tabyl()\n\n\n pull(pig_discrete_tbl, age)   n   percent\n                        bin1 122 0.2961165\n                        bin2 103 0.2500000\n                        bin3  99 0.2402913\n                        bin4  88 0.2135922",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#sec-preprocess-corr",
    "href": "classification-pre-processing.html#sec-preprocess-corr",
    "title": "75  Data preprocessing",
    "section": "75.11 Korrelation zwischen Variablen",
    "text": "75.11 Korrelation zwischen Variablen\nAls einer der letzten Schritte für die Aufreinigung der Daten schauen wir uns die Korrelation an. Du kannst dir die Korrelation im Kapitel Kapitel 47 nochmal näher anlesen. Wie schon bei der Imputation kann ich nur davon abraten einfach so den Filter auf die Daten anzuwenden. Es ist besser sich die numerischen Variablen einmal zu visualisieren und die Korrelation einmal zu berechnen. Das blinde Filtern von Variablen macht auf jeden Fall keinen Sinn!\n\n\nMehr Information zu High Correlation Filter\nIn der Klassifikation müssen wir schauen, dass wir keine numerischen Variablen haben, die im Prinzip das gleiche Aussagen also hoch miteinander korreliert sind. Die Variablen müssen wir dann entfernen. Oder besser eine von den beiden Variablen. Wir können den Schritt mit der Funktion step_corr() durchführen und einen Threshold für die Entfernung von numerischen Variablen festlegen. Wir nehmen hier ein \\(\\rho = 0.5\\). Nochmal, das ist nicht sehr gut blind Vairablen zu entfernen. Schaue dir vorher einen paarweisen Korrelationsplot an und entscheide dann, ob du und welche Variablen du entfernen möchtest.\n\n\nR Code [zeigen / verbergen]\npig_corr_rec &lt;- pig_rec |&gt; \n  step_corr(all_numeric_predictors(), threshold = 0.5)\n\npig_corr_rec \n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Correlation filter on: all_numeric_predictors()\n\n\nDann können wir auch schon die Daten generieren. In unserem Fall wurde keine Variable entfernt. Die Korrelation untereinander ist nicht so groß. Wir runden hier wieder, damit sich die Tabelle nicht so in die Breite auf der Webseite entwickelt.\n\n\nR Code [zeigen / verbergen]\npig_corr_tbl &lt;- pig_corr_rec  |&gt;\n  prep() |&gt;\n  juice() |&gt; \n  mutate(across(where(is.numeric), round, 2))",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-pre-processing.html#beispiel-gummibärchendaten",
    "href": "classification-pre-processing.html#beispiel-gummibärchendaten",
    "title": "75  Data preprocessing",
    "section": "75.12 Beispiel Gummibärchendaten",
    "text": "75.12 Beispiel Gummibärchendaten\nSchauen wir uns ein Rezept einmal in einem Rutsch auf den Gummibärchendaten einmal an. Wir müssen natürlich erstmal alle nominalen Variablen auch als solche umwandeln. Wir erschaffen also die passenden Faktoren für das Geschlecht und den Lieblingsgeschmack. Dann erschaffen wir noch eine ID für die Studierenden. Am Ende wählen wir noch ein paar Spalten aus, damit wir nicht alle Variablen vorliegen haben. Sonst wird der endgültige Datensatz sehr breit. Wir entfernen dann noch alle Beobachtungen aus den Daten, die einen fehlenden Wert bei dem Geschlecht haben. Das machen wir immer für die Variable, die dann unser Outcome sein soll.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\") |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked),\n         student_id = 1:n()) |&gt; \n  select(student_id, gender, most_liked, age, semester, height) |&gt;  \n  drop_na(gender)\n\n\nIn Tabelle 75.5 sehen wir dann die Daten nochmal vor dem Preprocessing dargestellt. Wir sind nicht an den ursprünglichen Daten interessiert, da wir nur die Spalte gender vorhersagen wollen. Wir wollen hier keine Effekt schätzen oder aber Signifikanzen berechnen. Unsere Features dienen nur der Vorhersage des Labels. Wie die Features zahlenmäßig beschaffen sind, ist uns egal.\n\n\n\n\nTabelle 75.5— Auszug aus dem Daten zu den Gummibärchendaten.\n\n\n\n\n\n\nstudent_id\ngender\nmost_liked\nage\nsemester\nheight\n\n\n\n\n1\nm\nlightred\n35\n10\n193\n\n\n2\nw\nyellow\n21\n6\n159\n\n\n3\nw\nwhite\n21\n6\n159\n\n\n4\nw\nwhite\n36\n10\n180\n\n\n5\nm\nwhite\n22\n3\n180\n\n\n7\nm\ngreen\n22\n3\n180\n\n\n…\n…\n…\n…\n…\n…\n\n\n936\nm\ndarkred\n23\n2\n196\n\n\n937\nw\nyellow\n24\n2\n168\n\n\n938\nm\ngreen\n24\n8\n178\n\n\n939\nw\nlightred\n23\n8\n180\n\n\n940\nm\ndarkred\n25\n2\n202\n\n\n941\nw\ndarkred\n23\n2\n172\n\n\n\n\n\n\n\n\nWir erschaffen uns nun das Rezept in dem wie definieren, dass das gender unser Label ist und der Rest der Vairablen unsere Features. Da wir noch die Spalte student_id haben, geben wir dieser Spalte noch die Rolle ID. Wir können dann in den Rezeptschritten dann immer diese Rolle ID aus dem Prozess der Transformation ausschließen.\n\n\nR Code [zeigen / verbergen]\ngummi_rec &lt;- recipe(gender ~ ., data = gummi_tbl) |&gt; \n  update_role(student_id, new_role = \"ID\")\n\ngummi_rec |&gt; summary()\n\n\n# A tibble: 6 × 4\n  variable   type      role      source  \n  &lt;chr&gt;      &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n1 student_id &lt;chr [2]&gt; ID        original\n2 most_liked &lt;chr [3]&gt; predictor original\n3 age        &lt;chr [2]&gt; predictor original\n4 semester   &lt;chr [2]&gt; predictor original\n5 height     &lt;chr [2]&gt; predictor original\n6 gender     &lt;chr [3]&gt; outcome   original\n\n\nUnd dann haben wir hier alle Schritte einmal zusammen in einem Block. Wir imputieren die fehlenden Werte für die numerischen und nominalen Variablen getrennt. Dann verwandeln wir das Semester in mindestens vier Gruppen. Im nächsten Schritt werden dann alle numerischen Variablen auf eine Spannweite von \\([0;1]\\) gebracht. Wir erschaffen dann noch die Dummies für die nominalen Daten. Am Ende wollen wir dann alle Variablen mit fast keiner Varianz entfernen. Wir wollen dann immer die Spalte ID aus den Schritten ausschließen. Wir machen das mit der Funktion has_role() und dem - vor der Funktion. Damit schließen wir die Rolle ID aus dem Transformationsschritt aus.\n\n\nR Code [zeigen / verbergen]\ngummi_full_rec &lt;- gummi_rec |&gt; \n  step_impute_mean(all_numeric_predictors(), -has_role(\"ID\")) |&gt; \n  step_impute_bag(all_nominal_predictors(), -has_role(\"ID\")) |&gt; \n  step_discretize(semester, num_breaks = 3, min_unique = 4) |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1, -has_role(\"ID\")) |&gt; \n  step_dummy(all_nominal_predictors(), -has_role(\"ID\")) |&gt; \n  step_nzv(all_predictors(), -has_role(\"ID\"))\n\ngummi_full_rec\n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\nID:        1\n\n\n\n\n\n── Operations \n\n\n• Mean imputation for: all_numeric_predictors() and -has_role(\"ID\")\n\n\n• Bagged tree imputation for: all_nominal_predictors() and -has_role(\"ID\")\n\n\n• Discretize numeric variables from: semester\n\n\n• Range scaling to [0,1] for: all_numeric_predictors() and -has_role(\"ID\")\n\n\n• Dummy variables from: all_nominal_predictors() and -has_role(\"ID\")\n\n\n• Sparse, unbalanced variable filter on: all_predictors() and -has_role(\"ID\")\n\n\nDann können wir wieder unsere Daten generieren. Ich runde hier wieder, da wir schnell sehr viele Kommastellen produzieren. In der Anwendung machen wir das natürlich dann nicht.\n\n\nR Code [zeigen / verbergen]\ngummi_class_tbl &lt;- gummi_full_rec |&gt;\n  prep() |&gt;\n  juice() |&gt; \n  mutate(across(where(is.numeric), round, 2)) \n\n\nIn der Tabelle 75.6 können wir uns die transformierten Daten einmal anschauen. Wir sehen das zum einen die Variable student_id nicht transformiert wurde. Alle numerischen Spalten sind auf einer Spannweite zwischen 0 und 1. Das Geschlecht wurde nicht transformiert, da wir das Geschlecht ja als Outcome festgelegt haben. Dann kommen die Dummykodierungen für die nominalen Spalten des Lieblingsgeschmack und des Semesters.\n\n\n\n\nTabelle 75.6— Der transformierte Gummibärchendatensatz nach der Anwendung des Rezepts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstudent_id\nage\nheight\ngender\nmost_liked_white\nmost_liked_green\nmost_liked_darkred\nmost_liked_none\nsemester_bin2\nsemester_bin3\n\n\n\n\n1\n0.48\n0.79\nm\n0\n0\n0\n0\n0\n1\n\n\n2\n0.2\n0.21\nw\n0\n0\n0\n0\n0\n1\n\n\n3\n0.2\n0.21\nw\n1\n0\n0\n0\n0\n1\n\n\n4\n0.5\n0.57\nw\n1\n0\n0\n0\n0\n1\n\n\n5\n0.22\n0.57\nm\n1\n0\n0\n0\n0\n1\n\n\n6\n0.22\n0.57\nm\n0\n1\n0\n0\n0\n1\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n849\n0.24\n0.84\nm\n0\n0\n1\n0\n1\n0\n\n\n850\n0.26\n0.36\nw\n0\n0\n0\n0\n1\n0\n\n\n851\n0.26\n0.53\nm\n0\n1\n0\n0\n0\n1\n\n\n852\n0.24\n0.57\nw\n0\n0\n0\n0\n0\n1\n\n\n853\n0.28\n0.95\nm\n0\n0\n1\n0\n1\n0\n\n\n854\n0.24\n0.43\nw\n0\n0\n1\n0\n1\n0\n\n\n\n\n\n\n\n\nBis hierher haben wir jetzt die Rezepte nur genutzt um uns die Daten aufzuarbeiten. Das ist eigentlich nur ein Schritt in der Klassifikation. Mit der Funktion workflow() können wir dann Rezepte mit Algorithmen verbinden. Dann nutzen wir die Funktion fit() um verschiedene Daten auf den Workflow anzuwenden. Das musst du aber nicht tun. Du kannst die Rezepte hier auch verwenden um deine Daten einfach aufzuarbeiten und dann eben doch ganz normale Statistik drauf zu rechnen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>75</span>  <span class='chapter-title'>Data preprocessing</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html",
    "href": "classification-model-compare.html",
    "title": "76  Vergleich von Algorithmen",
    "section": "",
    "text": "76.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 21:50:09\nIn diesem Kapitel wollen wir drei ausgewählte Algorithmen miteinander vergleichen. Ich habe hier den \\(k\\)-NN Algorithmus, den Random Forest Algorithmus und den xgboost Algorithmus ausgewählt. Das ist eigentlich eine relativ willkürliche Auswahl. Aber dann haben wir drei Modelle, die wir mit statistischen Maßzahlen vergleichen können. Ich rechne die Algorithmen hier relativ flott durch, wenn du mehr über die Algorithmen wissen willst, schau bitte dann in die entsprechenden Kapitel. Hier fallen also viele Dinge einfach so aus dem Himmel. Mir geht es aber auch am Ende darum, einmal die drei Algorithmen zu vergleichen.\nHäufig stellt sich natürlich die Frage, welche der statistischen Maßzahlen soll ich denn nun nehmen? Wie immer ist die Antwort, kommt drauf an. Ich würde dir empfehlen, die ROC Kurve für die Klassifikation zu nehmen. Dann wird auch häufig die Accuarcy berichtet. Danach wird es dann schon schwammiger und es kommt dann auch darauf an an wen du berichtest. Schreibst du also deine Abschlussarbeit, dann musst du dich mit deinen Betreuern abstimmen. Bei einer wissenschaftlichen Veröffentlichung würde ich in den anderen Veröffentlichungen des Journals schauen, was dort im Rahmen des maschinellen Lernens für Gütekriterien veröffentlicht werden. In diesem Kapitel gehen wir jedenfalls eine Menge Maßzahlen für die Klassifikation einmal durch.\nFür viele der Maßzahlen gibt es auf Wikipedia zur Konfusionamtrix weitreichende Erklärungen. Ich werde mich hier kurz halten und die Werte anhand eines Beispiels nochmal herleiten. Wenn du dann mehr zu den einzelnen Gütekriterien wissen willst, musst du nochmal extern nachlesen.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, \n               janitor, xgboost, ranger, kknn,\n               see, conflicted)\nconflicts_prefer(magrittr::set_names)\n##\nset.seed(20234534)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#daten",
    "href": "classification-model-compare.html#daten",
    "title": "76  Vergleich von Algorithmen",
    "section": "76.2 Daten",
    "text": "76.2 Daten\nIn diesem Kapitel wolle wir uns aber mal auf einen echten Datensatz anschauen und sehen wie sich drei Algorithmen auf diesem Daten so schlagen. Welcher Algorithmus ist am besten für die Klassifikation geeignet? Wir nutzen daher hier einmal als echten Datensatz den Gummibärchendatensatz. Als unser Label nehmen wir das Geschlecht gender. Dabei wollen wir dann die weiblichen Studierenden vorhersagen. Im Weiteren nehmen wir als Prädiktoren die Spalten most_liked, age, semester, und height mit in unsere Analysedaten.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\") |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked)) |&gt; \n  select(gender, most_liked, age, semester, height) |&gt; \n  drop_na(gender)\n\n\nWir dürfen keine fehlenden Werte in den Daten haben. Wir können für die Prädiktoren später die fehlenden Werte imputieren. Aber wir können keine Labels imputieren. Daher entfernen wir alle Beobachtungen, die ein NA in der Variable gender haben. Wir haben dann insgesamt \\(n = 854\\) Beobachtungen vorliegen. In Tabelle 80.3 sehen wir nochmal die Auswahl des Datensatzes in gekürzter Form.\n\n\n\n\nTabelle 76.1— Auszug aus dem Daten zu den Gummibärchendaten.\n\n\n\n\n\n\ngender\nmost_liked\nage\nsemester\nheight\n\n\n\n\nm\nlightred\n35\n10\n193\n\n\nw\nyellow\n21\n6\n159\n\n\nw\nwhite\n21\n6\n159\n\n\nw\nwhite\n36\n10\n180\n\n\nm\nwhite\n22\n3\n180\n\n\nm\ngreen\n22\n3\n180\n\n\n…\n…\n…\n…\n…\n\n\nm\ndarkred\n23\n2\n196\n\n\nw\nyellow\n24\n2\n168\n\n\nm\ngreen\n24\n8\n178\n\n\nw\nlightred\n23\n8\n180\n\n\nm\ndarkred\n25\n2\n202\n\n\nw\ndarkred\n23\n2\n172\n\n\n\n\n\n\n\n\nUnsere Fragestellung ist damit, können wir anhand unserer Prädiktoren männliche von weiblichen Studierenden unterscheiden und damit auch klassifizieren? Wir splitten dafür unsere Daten in einer 3 zu 4 Verhältnis in einen Traingsdatensatz sowie einen Testdatensatz auf. Da wir aktuell nicht so viele Beobachtungen in dem Gummibärchendatensatz haben, möchte ich mindestens 100 Beobachtungen in den Testdaten. Deshalb kommt mir der 3:4 Split sehr entgegen.\n\n\nR Code [zeigen / verbergen]\ngummi_data_split &lt;- initial_split(gummi_tbl, prop = 3/4)\n\n\nWir speichern uns jetzt den Trainings- und Testdatensatz jeweils separat ab. Die weiteren Modellschritte laufen alle auf dem Traingsdatensatz, wie nutzen dann erst ganz zum Schluß einmal den Testdatensatz um zu schauen, wie gut unsere trainiertes Modell auf den neuen Testdaten funktioniert.\n\n\nR Code [zeigen / verbergen]\ngummi_train_data &lt;- training(gummi_data_split)\ngummi_test_data  &lt;- testing(gummi_data_split)\n\n\nNachdem wir die Daten vorbereitet haben, müssen wir noch das Rezept mit den Vorverabreitungsschritten definieren. Wir schreiben, dass wir das Geschlecht gender als unser Label haben wollen. Daneben nehmen wir alle anderen Spalten als Prädiktoren mit in unser Modell, das machen wir dann mit dem . Symbol. Da wir noch fehlende Werte in unseren Prädiktoren haben, imputieren wir noch die numerischen Variablen mit der Mittelwertsimputation und die nominalen fehlenden Werte mit Entscheidungsbäumen. Dann müssen wir noch alle numerischen Variablen normalisieren und alle nominalen Variablen dummykodieren. Am Ende werde ich nochmal alle Variablen entfernen, sollte die Varianz in einer Variable nahe der Null sein.\n\n\nR Code [zeigen / verbergen]\ngummi_rec &lt;- recipe(gender ~ ., data = gummi_train_data) |&gt; \n  step_impute_mean(all_numeric_predictors()) |&gt; \n  step_impute_bag(all_nominal_predictors()) |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_nzv(all_predictors())\n\ngummi_rec |&gt; summary()\n\n\n# A tibble: 5 × 4\n  variable   type      role      source  \n  &lt;chr&gt;      &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n1 most_liked &lt;chr [3]&gt; predictor original\n2 age        &lt;chr [2]&gt; predictor original\n3 semester   &lt;chr [2]&gt; predictor original\n4 height     &lt;chr [2]&gt; predictor original\n5 gender     &lt;chr [3]&gt; outcome   original\n\n\nIm Folgenden vergleichen wir einmal drei Algorithmen miteinander. Daher halten wir den Code für die Durchführung sehr kurz.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#k-nn-algorithm",
    "href": "classification-model-compare.html#k-nn-algorithm",
    "title": "76  Vergleich von Algorithmen",
    "section": "76.3 \\(k\\)-NN Algorithm",
    "text": "76.3 \\(k\\)-NN Algorithm\n\n\n\n\n\n\nHuch, der Code ist aber sehr kurz…\n\n\n\nIn diesem Teil halte ich den R Code sehr kurz, wenn du mehr über den \\(k\\)-NN Algorithmus wissen willst, schaue bitte in Kapitel 77.\n\n\nFür den \\(k\\)-NN Algorithmus nutzen wir \\(k=11\\) Nachbarn. Mehr brauchen wir hier nicht angeben.\n\n\nR Code [zeigen / verbergen]\nknn_mod &lt;- nearest_neighbor(neighbors = 11) |&gt; \n  set_engine(\"kknn\") |&gt; \n  set_mode(\"classification\") \n\n\nDann nehmen wir das Modell für den \\(k\\)-NN Algorithmus und verbinden das Modell mit dem Rezept für die Gummibärchendaten in einem Workflow.\n\n\nR Code [zeigen / verbergen]\nknn_wflow &lt;- workflow() |&gt; \n  add_model(knn_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nNun können wir auch schon den Fit des Modells rechnen und in einem Rutsch den Fit auch gleich auf die Testdaten anwenden.\n\n\nR Code [zeigen / verbergen]\nknn_aug &lt;- knn_wflow |&gt; \n  parsnip::fit(gummi_train_data) |&gt; \n   augment(gummi_test_data)\n\n\nMehr wollen wir hier auch nicht. Wir brauchen nur die Prädiktion, da wir hier ja nur das Konzept der Modellvergleiche einmal durchgehen wollen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#random-forest",
    "href": "classification-model-compare.html#random-forest",
    "title": "76  Vergleich von Algorithmen",
    "section": "76.4 Random Forest",
    "text": "76.4 Random Forest\n\n\n\n\n\n\nHuch, der Code ist aber sehr kurz…\n\n\n\nIn diesem Teil halte ich den R Code sehr kurz, wenn du mehr über den Random Forest Algorithmus wissen willst, schaue bitte in Kapitel 78.4.\n\n\nFür den Random Forest Algorithmus nutzen wir drei Variablen je Baum (mtry = 3), mindestens zehn Beobachtungen je Knoten (min_n = 10) sowie eintausend gewachsene Bäume in unserem Wald (trees = 1000). Mehr brauchen wir hier nicht angeben.\n\n\nR Code [zeigen / verbergen]\nranger_mod &lt;- rand_forest(mtry = 3, min_n = 10, trees = 1000) |&gt; \n  set_engine(\"ranger\") |&gt; \n  set_mode(\"classification\")\n\n\nDann nehmen wir das Modell für den Random Forest Algorithmus und verbinden das Modell mit dem Rezept für die Gummibärchendaten in einem Workflow.\n\n\nR Code [zeigen / verbergen]\nranger_wflow &lt;- workflow() |&gt; \n  add_model(ranger_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nNun können wir auch schon den Fit des Modells rechnen und in einem Rutsch den Fit auch gleich auf die Testdaten anwenden.\n\n\nR Code [zeigen / verbergen]\nranger_aug &lt;- ranger_wflow |&gt; \n  parsnip::fit(gummi_train_data) |&gt; \n  augment(gummi_test_data ) \n\n\nMehr wollen wir hier auch nicht von dem Random Forest Algorithmus. Wir brauchen nur die Prädiktion, da wir hier ja nur das Konzept der Modellvergleiche einmal durchgehen wollen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#xgboost",
    "href": "classification-model-compare.html#xgboost",
    "title": "76  Vergleich von Algorithmen",
    "section": "76.5 xgboost",
    "text": "76.5 xgboost\n\n\n\n\n\n\nHuch, der Code ist aber sehr kurz…\n\n\n\nIn diesem Teil halte ich den R Code sehr kurz, wenn du mehr über den xgboost Algorithmus wissen willst, schaue bitte in Kapitel 78.5.\n\n\nFür den xgboost Algorithmus nutzen wir drei Variablen je Baum (mtry = 3), mindestens zehn Beobachtungen je Knoten (min_n = 10) sowie eintausend gewachsene Bäume in unserem Wald (trees = 1000). Mehr brauchen wir hier nicht angeben.\n\n\nR Code [zeigen / verbergen]\nxgboost_mod &lt;- boost_tree(mtry = 3, min_n = 10, trees = 1000) |&gt; \n  set_engine(\"xgboost\") |&gt; \n  set_mode(\"classification\")\n\n\nDann nehmen wir das Modell für den xgboost Algorithmus und verbinden das Modell mit dem Rezept für die Gummibärchendaten in einem Workflow.\n\n\nR Code [zeigen / verbergen]\nxgboost_wflow &lt;- workflow() |&gt; \n  add_model(xgboost_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nNun können wir auch schon den Fit des Modells rechnen und in einem Rutsch den Fit auch gleich auf die Testdaten anwenden.\n\n\nR Code [zeigen / verbergen]\nxgboost_aug &lt;- xgboost_wflow |&gt; \n  parsnip::fit(gummi_train_data) |&gt; \n  augment(gummi_test_data ) \n\n\nDas war jetzt der dritte und letzte Algorithmus. Wir brauchen auch hier nur die Prädiktion, da wir hier ja nur das Konzept der Modellvergleiche einmal durchgehen wollen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#sec-class-model-compare",
    "href": "classification-model-compare.html#sec-class-model-compare",
    "title": "76  Vergleich von Algorithmen",
    "section": "76.6 Vergleich der Modelle",
    "text": "76.6 Vergleich der Modelle\nIn der folgenden Liste haben wir einmal alle vorhergesagten Werte der drei Algorithmen zusammengefügt. Wir können jetzt auf der Liste aug_lst mit der Funktion map() aus dem R Paket {purrr} schnell rechnen. Anstatt für jedes der Objekte in der Liste einzeln den Code anzugeben, können wir den Code über die Funktion map() bündeln.\n\n\nR Code [zeigen / verbergen]\naug_lst &lt;- lst(knn = knn_aug,\n               rf = ranger_aug,\n               xgboost = xgboost_aug)\n\n\nIm folgenden Schritt berechnen wir für alle Algorithmen die Konfusionsmatrix als eine 2x2 Tabelle. Wir schauen uns gleich einmal die Konfusionsmatrix nur für den xgboost Algorithmus an. Auf der Konfusionsmatrix können wir viele Gütekriterien für die Klassifikation berechnen.\n\n\nR Code [zeigen / verbergen]\nconf_mat_lst &lt;- aug_lst |&gt; \n  map(~conf_mat(.x, gender, .pred_class))\n\n\nUnd diese große Anzahl an Gütekriterien berechnen wir dann auch gleich. Die Funktion summary() gibt uns die Gütekriterien für alle Algorithmen wieder. Wir müssen dann noch etwas aufräumen und die Wiedergaben dann passend zusammenfassen, so dass wir eine schöne Tabelle wiedergegeben kriegen. So das sind jetzt aber ganz schön viele Maßzahlen.\n\n\nR Code [zeigen / verbergen]\nconf_mat_lst |&gt; \n  map(summary) |&gt; \n  map(~select(.x, .metric, .estimate)) |&gt; \n  reduce(left_join, by = \".metric\") |&gt; \n  set_names(c(\"metric\", \"knn\", \"rf\", \"xboost\")) |&gt; \n  mutate(across(where(is.numeric), round, 3))\n\n\n# A tibble: 13 × 4\n   metric                 knn    rf xboost\n   &lt;chr&gt;                &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 accuracy             0.78  0.794  0.78 \n 2 kap                  0.562 0.589  0.562\n 3 sens                 0.748 0.775  0.739\n 4 spec                 0.816 0.816  0.825\n 5 ppv                  0.814 0.819  0.82 \n 6 npv                  0.75  0.771  0.746\n 7 mcc                  0.564 0.59   0.565\n 8 j_index              0.563 0.59   0.564\n 9 bal_accuracy         0.782 0.795  0.782\n10 detection_prevalence 0.477 0.491  0.467\n11 precision            0.814 0.819  0.82 \n12 recall               0.748 0.775  0.739\n13 f_meas               0.779 0.796  0.777\n\n\nUm jetzt zu verstehen, wie scih diese Maßzahl jetzt alle berechnen ziehen wir uns einmal die Konfusionsmatrix für den xgboost Algorithmus aus dem Objekt conf_mat_lst raus. Wir sehen, dass wir die meisten Männer und Frauen richtig klassifiziert haben. Neben dieser Information, brauchen wir noch die Informationen der Randsummen.\n\n\nR Code [zeigen / verbergen]\npluck(conf_mat_lst, \"xgboost\")\n\n\n          Truth\nPrediction  m  w\n         m 82 18\n         w 29 85\n\n\nWir können berechnen, dass wir in den Testdaten (Truth) dann 58 Männer vorliegen haben sowie 61 Frauen. In den vorhergesagten Daten (Prediction) haben wir dann 63 Männer und 56 Frauen. Die beiden Zahlen brauchen wir noch und daher ergänzen wir diese Zahlen dann auch in der Tabelle 76.2 (b).\n\n\n\nTabelle 76.2— Die theoretische Konfusionsmatrix sowie die ausgefüllte Konfusionmatrix nach dem xgboost Algorithmus.\n\n\n\n\n\n\n\n(a) Die Konfusionsmatrix als eine 2x2 Tabelle oder Vierfeldertafel\n\n\n\n\n\n\n\nTruth\n\n\n\n\n\n\\(Positiv\\)\n\\(Negativ\\) (0)\n\n\n\n\n\\((PP)\\) (1)\n\\((PN)\\) (0)\n\n\nPrädiktion\n\\(Positiv\\) (1)\n\\(TP\\)\n\\(FP\\)\n\n\n\n\\((P)\\) (1)\n\n\n\n\n\n\\(Negativ\\) (0)\n\\(FN\\)\n\\(TN\\)\n\n\n\n\\((N)\\) (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Die Konfusionsmatrix für den xgboost Algorithmus.\n\n\n\n\n\n\n\nTruth\n\n\n\n\n\n\\(Positiv\\) (m)\n\\(Negativ\\) (w)\n\n\n\n\n\\((PP = 58)\\) (m)\n\\((PN = 61)\\) (w)\n\n\nPrädiktion\n\\(Positiv\\) (m)\n\\(51\\)\n\\(12\\)\n\n\n\n\\((P = 63)\\) (m)\n\n\n\n\n\n\\(Negativ\\) (w)\n\\(7\\)\n\\(49\\)\n\n\n\n\\((N = 56)\\) (w)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWir können auch noch ganz viel mehr Beurteilungskriterien für die Klassifikation in einer Konfusionmatrix berechnen lassen. Wir wollen jetzt aber nur die dreizehn Beurteilungskriterien, die wir von der Funktion summary() berechnet kriegen, einmal durchgehen. Die Frage was du jetzt von den Maßzahlen alles berichten sollst, hängt wiederum davon ab, wenn du die Maßzahlen berichten willst. Die Accuarcy und die ROC Kurven sind sicherlich die wichtigsten Maßzahlen. Der Rest geht eher in die optionale Richtung.\n\nAccuarcy\n\nDie accuracy (deu. Genauigkeit, nicht verwendet) ist der Anteil der Label, die richtig vorhergesagt werden. Das Problem bei der Verwendung der Genauigkeit als Hauptgütekriterium besteht darin, dass sie bei einem starken Klassenungleichgewicht nicht gut funktioniert.\n\nKappa\n\nDas kap beschreibt Kappa und damit ein ähnliches Maß wie die accuracy. Dabei wird aber Kappa durch die accuarcy normalisiert, die allein durch Zufall zu erwarten wäre. Damit ist Kappa sehr nützlich, wenn eine oder mehrere Klassen große Häufigkeitsverteilungen haben.\n\nSensitivität\n\nDie sens beschreibt die Sensitivität oder die true positive rate (TPR). Eine Methode die erkrankte Personen sehr zuverlässig als krank (1) erkennt hat eine hohe Sensitivität. Das heißt, sie übersieht kaum erkrankte (1) Personen.\n\n\n\\[\n\\mbox{Sensitivität} = \\mbox{sens} = \\cfrac{TP}{TP + FN} = \\cfrac{51}{51 + 7} = 0.879\n\\]\n\nSpezifität\n\nDie spec beschreibt die Spezifität oder die true negative rate (TNR). Eine Methode die gesunde Personen zuverlässig als gesund (0) einstuft, hat eine hohe Spezifität. Das heißt, die Methode liefert in der Regel nur bei Erkrankten ein positives Ergebnis.\n\n\n\\[\n\\mbox{Spezifität} = \\mbox{spec} = \\cfrac{TN}{TN + FP} = \\cfrac{49}{49 + 12} = 0.803\n\\]\n\nPositiver prädiktiver Wert\n\nDer ppv beschreibt den positiven prädiktiven Wert (eng. positive predictive value).\n\n\n\\[\n\\mbox{Positiver prädiktiver Wert} = \\mbox{ppv} = \\cfrac{TP}{PP} = \\cfrac{51}{63} = 0.81\n\\]\n\nNegativer prädiktiver Wert\n\nDer npv beschreibt den negativen prädiktiven Wert (eng. negative predictive value).\n\n\n\\[\n\\mbox{Negativer prädiktiver Wert} = \\mbox{npv} = \\cfrac{TN}{PN} = \\cfrac{49}{56} = 0.875\n\\]\n\nMatthews Korrelationskoeffizienten\n\nDas mcc beschreibt den Matthews Korrelationskoeffizienten (eng. Matthews correlation coefficient). Der Matthews-Korrelationskoeffizient (MCC) ist ein zuverlässiger statistischer Wert, der nur dann einen hohen Wert hat, wenn die Vorhersage in allen vier Kategorien der Konfusionsmatrix (richtig positiv, falsch negativ, richtig negativ und falsch positiv) gute Ergebnisse erzielt. Wir berechnen den Wert hier jetzt nicht, da die Formel insgesamt acht zusammengesetzte Terme aus der Konfusionsmatrix beinhaltet. Für die Berechnung einmal beim Matthews correlation coefficient nachlesen oder aber auch Chicco & Jurman (2020) berücksichtigen.\n\nYouden-J-Statistik\n\nDer j_index beschreibt die Youden-J-Statistik und ist definiert als \\(J = sens + spec - 1\\). Wenn wir also eine hohe Sensitivität und eine hohe Spezifität haben dann nähert sich \\(J\\) der Eins an.\n\n\n\\[\n\\mbox{Youden-J} = \\mbox{j index} = sens + spec - 1 = 0.879 + 0.803 - 1  = 0.682\n\\]\n\nBalancierte Accuarcy\n\nDie bal_accuracy beschreibt die balancierte accuarcy und wird hier in der Funktion als der Durchschnitt von Sensitivität und Spezifität berechnet. Leider hat die balancierte Accuarcy mit der Accuarcy wie oben beschrieben weniger zu tun.\n\n\n\\[\n\\mbox{Balanced accuracy} = \\cfrac{TPR + TNR}{2} = \\cfrac{0.879 + 0.803}{2} = 0.841\n\\]\n\nEntdeckungsprävalenz\n\nDie detection_prevalence Die Entdeckungsprävalenz (eng. detection prevalence) ist definiert als die Anzahl der vorhergesagten positiven Ereignisse (sowohl richtig als auch falsch positiv) geteilt durch die Gesamtzahl der Vorhersagen.\n\n\n\\[\n\\mbox{Entdeckungsprävalenz} = \\cfrac{TP + FP}{TP + FP + FN + TN} = \\cfrac{51 + 12}{51 + 12 + 7 + 49} = 0.529\n\\]\n\nPrecision und Recall\n\nDie precision Bei der binären Klassifizierung ist die precision der positiv prädiktive Wert. Damit ist die precision die Anzahl der richtig positiven Ergebnisse geteilt durch die Anzahl aller positiven Ergebnisse, einschließlich derer, die nicht richtig erkannt wurden.\n\n\n\n\n\n\n\n\nAbbildung 76.1— Visualisierung der Berechung der Precision und des Recalls anhand von einem Venndiagramm.\n\n\n\nPräzision hilft, wenn die Kosten für falsch positive Ergebnisse hoch sind. Nehmen wir einmal an wir wollen Hautkrebs erkennen. Wenn wir ein Modell mit sehr geringer Präzision haben, teilen wir vielen Patienten mit, dass sie ein Melanom haben, und dies schließt einige Fehldiagnosen ein. Es stehen viele zusätzliche Tests und Stress für die Patienten auf dem Spiel. Wenn die Fehlalarme zu hoch sind, lernen diejenigen, die die Ergebnisse überwachen, sie zu ignorieren, nachdem sie mit Fehlalarmen bombardiert wurden.\n\\[\n\\mbox{Precision} = \\mbox{Positiver prädiktiver Wert}  = \\cfrac{TP}{PP} = \\cfrac{51}{63} = 0.81\n\\]\nDer recall Bei der binären Klassifizierung ist der recall die Sensitivität. Damit ist der recall die Anzahl der tatsächlich positiven Ergebnisse geteilt durch die Anzahl aller Ergebnisse, die als positiv hätten identifiziert werden müssen.\nDer Recall hilft, wenn die Kosten für falsch negative Ergebnisse hoch sind. Was ist, wenn wir einfallende Atomraketen erkennen müssen? Ein falsches Negativ hat verheerende Folgen. Versteh es falsch und wir alle sterben. Wenn falsche Negative häufig sind, wirst du von dem getroffen, was du vermeiden möchten. Ein falsch Negatives ist, wenn du sich entscheidest, das Geräusch eines Zweigs zu ignorieren, der in einem dunklen Wald bricht, und du dann von einem Bären gefressen wirst. Ein falsch Positives Ereignis wäre dann, dass du die ganze Nacht schlaflos in deinem Zelt in kaltem Schweiß aufbleibst und jedem Durcheinander im Wald zuhörst, nur um am nächsten Morgen zu erkennen, dass diese Geräusche von einem Waschbären gemacht wurden. Auch kein Spaß.\n\\[\n\\mbox{Recall} = \\mbox{Sensitivität} = \\cfrac{TP}{TP + FN} = \\cfrac{51}{51 + 7} = 0.879\n\\]\n\nF\\(_1\\) Score\n\nDie f_meas beschreibt den F\\(_1\\) Score und damit das harmonische Mittel aus Precision und Recall. Der höchstmögliche Wert eines F\\(_1\\) Scores ist 1, was perfekte Präzision und Recall bedeutet, und der niedrigstmögliche Wert ist 0, wenn sowohl Präzision als auch Recall null sind. Das heißt, ein guter F1-Score bedeutet, dass du niedrige Fehlalarme und niedrige Falschnegative hast, sodass du echte Ereignisse oder Bedrohungen korrekt identifizieren und nicht durch Fehlalarme gestört wirst.\n\n\n\\[\nF_1 = \\cfrac{2 \\cdot TP}{2 \\cdot TP + FP + FN} = \\cfrac{2 \\cdot 51}{2 \\cdot 51 + 12 + 7} = 0.843\n\\]\n\nROC & Precision recall Kurven\n\nWenn wir von der Visualisierung von Klassifikationsergebnissen sprechen, dann kommen wir an der ROC Kurve und der PR Kurve nicht vorbei. Beide Kurven lassen sich ziemlich zügig erstellen. Wir kennen ja schon die Funktion roc_curve() für die ROC Kurve.\n\n\nIn dem Kapitel 40 erfährst du mehr darüber was eine ROC Kurve ist und wie du die ROC Kurve interpretieren kannst.\n\n\nR Code [zeigen / verbergen]\nroc_tbl &lt;- aug_lst |&gt; \n  map(~roc_curve(.x, gender, .pred_w, event_level = \"second\")) |&gt; \n  bind_rows(.id = \"model\")\n\n\nDie PR Kurve, für die Darstellung der Precision und des Recalls können wir dann die Funktion pr_curve() nutzen. Im Gegesatz zu der ROC Kurve wollen wir das die PR Kurve erstmal waagerecht verlauft und am Ende senkrecht nach unten fällt. Die Spitzen und Zacken in der Kurve sind normal und hat mit der Berechnung der beiden Werte zu tun. Wir wollen aber auch hier eine möglichst große Fläche unter der Kurve haben.\n\n\nR Code [zeigen / verbergen]\npr_tbl &lt;- aug_lst |&gt; \n  map(~pr_curve(.x, gender, .pred_w, event_level = \"second\")) |&gt; \n  bind_rows(.id = \"model\")\n\n\nIn der Abbildung 76.2 sind die ROC Kurven und die PR Kurven für die drei Algorithmen nochmal dargestellt. Zum einen sehen wir, dass wir nicht das beste Modell haben. Alle Modelle laufen übereinander und sind sich recht ähnlich. Das Bild wiederholt sich dann auch bei der PR Kurve wie bei der ROC Kurve. Dennoch sind die Algorithmen einigermaßen gut, denn wir haben ja weder eine Kreuzvalidierung noch ein Tuning durchgeführt. Wir bewerten die Modelle als gut, da die Flächen unter der Kurve relativ groß sind. Wenn es ein Modell gibt, was im Verhältnis zu den anderen Modellen abfällt, dann ist es das \\(k\\)-NN Modell. Das \\(k\\)-NN Modell hat einen starken Abfall zu Beginn der PR-Kurve.\n\n\nR Code [zeigen / verbergen]\nroc_tbl |&gt; \n  ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) + \n  theme_minimal() +\n  geom_path() +\n  geom_abline(lty = 3) + \n  scale_color_okabeito()\n\npr_tbl |&gt; \n  ggplot(aes(x = recall, y = precision, col = model)) + \n  theme_minimal() +\n  geom_path() +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Receiver operator curve.\n\n\n\n\n\n\n\n\n\n\n\n(b) Precision recall curve.\n\n\n\n\n\n\n\nAbbildung 76.2— Darstellung der Vorhersagegüte der drei Modelle k-NN, ranger und xgboost.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-model-compare.html#referenzen",
    "href": "classification-model-compare.html#referenzen",
    "title": "76  Vergleich von Algorithmen",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nChicco, D., & Jurman, G. (2020). The advantages of the Matthews correlation coefficient (MCC) over F1 score and accuracy in binary classification evaluation. BMC genomics, 21(1), 1–13.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>76</span>  <span class='chapter-title'>Vergleich von Algorithmen</span>"
    ]
  },
  {
    "objectID": "classification-knn.html",
    "href": "classification-knn.html",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "",
    "text": "77.1 Genutzte R Pakete\nLetzte Änderung am 20. May 2024 um 07:15:03\nWas macht der \\(k\\) nächste Nachbarn Algorithmus (eng. k nearest neighbor, abk. k-NN), wenn wir ihn verwenden? Der Algorithmus ist ein sehr einfacher Algorithmus, der auf den Abständen zu den benachbarten Beobachtungen basiert. Wir wollen also für eine neue Beobachtung den Infektionsstatus vorhersagen. Um diese Vorhersage zu bewerkstelligen nutzen wir die \\(k\\)-nächsten Nachbarn zu dieser neuen Beobachtung. Wenn die Mehrzahl der \\(k\\)-nächsten Nachbarn den Infektionsstatus \\(krank\\) hat, dann vergeben wir auch der neuen Beobachtung den Infektionsstatus \\(krank\\). Wenn dies nicht der Fall ist, dann erhält die neue Beobachtung den Infektionsstatus \\(gesund\\). Wir werden uns hier wieder den Fall der binären Klassifikation anschauen. Wenn wir natürlich mehrere Klassen in einem Label haben, dann geht es ähnlich. Wir schauen uns prinzipiell die \\(k\\) Nachbarn einer neuen Beobachtung an und entscheiden dann nach der Mehrheit der Klassen in diesen \\(k\\) Nachbarn für den Status der neuen Beobachtung.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, see,\n               caret, kknn, MachineShop, readxl, conflicted)\n##\nset.seed(2025429)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#daten",
    "href": "classification-knn.html#daten",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.2 Daten",
    "text": "77.2 Daten\nIn dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt.\n\n\nR Code [zeigen / verbergen]\npig_tbl &lt;- read_excel(\"data/infected_pigs.xlsx\") |&gt; \n  mutate(pig_id = 1:n(),\n         infected = as_factor(infected)) |&gt; \n  select(pig_id, infected, everything())  \n\n\nIn Tabelle 77.1 siehst du nochmal einen Auschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.\n\n\n\n\nTabelle 77.1— Auszug aus dem Daten zu den kranken Ferkeln.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npig_id\ninfected\nage\nsex\nlocation\nactivity\ncrp\nfrailty\nbloodpressure\nweight\ncreatinin\n\n\n\n\n1\n1\n61\nmale\nnortheast\n15.31\n22.38\nrobust\n62.24\n19.05\n4.44\n\n\n2\n1\n53\nmale\nnorthwest\n13.01\n18.64\nrobust\n54.21\n17.68\n3.87\n\n\n3\n0\n66\nfemale\nnortheast\n11.31\n18.76\nrobust\n57.94\n16.76\n3.01\n\n\n4\n1\n59\nfemale\nnorth\n13.33\n19.37\nrobust\n56.15\n19.05\n4.35\n\n\n5\n1\n63\nmale\nnorthwest\n14.71\n21.57\nrobust\n55.38\n18.44\n5.27\n\n\n6\n1\n55\nmale\nnorthwest\n15.81\n21.45\nrobust\n60.29\n18.42\n4.78\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n407\n1\n54\nfemale\nnorth\n11.82\n21.5\npre-frail\n55.32\n19.75\n3.92\n\n\n408\n0\n56\nmale\nwest\n13.91\n20.8\nfrail\n58.37\n17.28\n7.44\n\n\n409\n1\n57\nmale\nnorthwest\n12.49\n21.95\npre-frail\n56.66\n16.86\n2.44\n\n\n410\n1\n61\nmale\nnorthwest\n15.26\n23.1\nrobust\n57.18\n15.55\n3.08\n\n\n411\n0\n59\nfemale\nnorth\n13.13\n20.23\nrobust\n56.64\n18.6\n3.41\n\n\n412\n1\n63\nfemale\nnorth\n10.01\n19.89\nrobust\n57.46\n18.6\n4.2\n\n\n\n\n\n\n\n\nGehen wir jetzt mal die Wörter und Begrifflichkeiten, die wir für das maschinelle Lernen mit dem \\(k\\)-NN Algorithmus später brauchen einmal durch.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#k-nn-theoretisch",
    "href": "classification-knn.html#k-nn-theoretisch",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.3 \\(k\\)-NN theoretisch",
    "text": "77.3 \\(k\\)-NN theoretisch\nIm Folgenden betrachten wir uns den \\(k\\)-NN Algorithmus einmal ganz simpel. Dafür nutzen wir die Abbildung 77.1 als Startpunkt. Wir haben dort 11 Beobachtungen im Trainingsdatensatz dargestellt. Wir finden in dem Trainingsdatensatz acht infizierte Personen soiwe drei gesunde Personen. Darüber hinaus eine neue rote Beobachtung. Gegeben den Traingsdaten, welchen Status wollen wir der neuen roten Beobachtung geben?\n\n\n\n\n\n\nAbbildung 77.1— Darstellung von 11 Beobachtungen aus dem Traingsdatensatz und einer neuen roten Beobachtung aus den Testdaten. Die schwarzen Kugeln stellen kranke Personen und die grünen die gesunde Personen dar.\n\n\n\nIn der Abbildung 77.2 sehen wir die Klassifizierung nach \\(k = 1\\). Wir nehmen daher die \\(k = 1\\) nächsten Beobachtungen und bestimmen daran den neuen Status der roten Beobachtung. Wenn wir nur die eine nächste Beobachtung als Nachbarn betrachten, so setzen wir den Status unser neuen Beobachtung auf grün und daher gesund.\n\n\n\n\n\n\nAbbildung 77.2— Wir nehmen mit \\(k=1\\) nur die nächste Beobachtung zu unserer neuen Beobachtung hinzu und bestimmen die neue Beobachtung als grün.\n\n\n\nNun können wir das Spiel weiterspielen und wählen in der Abbildung 77.3 die \\(k = 2\\) nächsten Nachbarn zu unser neuen Beobachtung aus. Wir erhalten jetzt ein Unentschieden. Wir haben eine schwarze Beobachtung und eine grüne Beobachtung als \\(k=2\\) nächste Nachbarn. Wir können hier keine Entscheidung treffen. Eine gerade Anzahl an nächsten Nachbarn ist prinzipiell nicht anzuraten. Ich empfehle immer eine ungerade Anzhl. Auch wenn es natürlich auch für eine gerade Anzahl eine algorithmische Lösung gibt. Das ist aber weit über die Anwendung hinaus und geht in die Tiefe des Algorithmus, die wir hier nicht behandeln wollen.\n\n\n\n\n\n\nAbbildung 77.3— Mit \\(k = 2\\) nächste Nachbarn haben wir ein Patt vorliegen. Wir können uns nicht entscheiden, ob wir die neue Beobachtung als grün oder schwarz klassifizieren.\n\n\n\nIn der Abbildung 77.4 sehen wir, dass wir jetzt \\(k = 3\\) Nachbarn betrachten. Damit haben wir auf jeden Fall wieder eine Entscheidung. Wenn auch hier nur sehr knapp, da wir ja zwei schwarze und einen grünen Nachbarn haben. Wir klassifizieren dennoch die neue Beobachtung als schwarz.\n\n\n\n\n\n\nAbbildung 77.4— Die Klassifizierung mit \\(k = 3\\) nächsten Nachbarn. Wir erhalten hier eine , wenn auch knappe, Entscheidung für den schwarzen Status und damit krank.\n\n\n\nSoweit so gut. Und wie entscheide ich jetzt was weit weg ist? Wenn wir uns mit dem \\(k\\)-NN Algorithmus näher beschäftigen würden, dann werden wir feststellen, dass es eine Vielzahl an Abstandsmaßen gibt. Wir du dir vorstellen kannst, kann man die Entfernung zwischen zwei Punkten als den absoluten Abstand messen. Oder aber als den quadratischen Abstand. Es wäre auch möglich einen gewichteten Abstand einzuführen, so dass nähere Beobachtungen einen größeren Einfluss auf die Vorhersage haben als weiter entfernte Beobachtungen. Dann würden wir auch das Problem von geraden \\(k\\) Anzahlen lösen. Du musst dann leider in den jeweiligen R Paketen schauen, welche Optionen es dort geben mag. Wir werden uns hier auf eins der R Pakete mit {kknn} konzentrieren.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#klassifikation",
    "href": "classification-knn.html#klassifikation",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.4 Klassifikation",
    "text": "77.4 Klassifikation\nSchauen wir uns als erstes eine simple Klassifikation mit dem \\(k\\)-NN Algorithmus an. Wir brauchen dafür erstmal einen Trainings- und Testdatensatz. Wir trainieren dann den \\(k\\)-NN Algorithmus auf den Trainingsdaten. Wenn wir dann mit dem Modell zufrieden sind, schauen wir, ob unserer Modell auch auf den Trainingsdaten funktioniert. Wir trennen daher die Daten mit \\(3/4\\) Trainingsdaten und \\(1/4\\) Testdaten auf. Wir nutzen dazu die Funktion initial_split(). Es gibt auch andere Möglichkeiten sich den Split in Trainings- und Testdatensatz zu erstellen, aber so geht es relativ einfach und schnell. Im Kapitel 74 kannst du dir auch noch eine Alternative anschauen.\n\n\nR Code [zeigen / verbergen]\npig_data_split &lt;- initial_split(pig_tbl, prop = 3/4)\n\n\nJetzt haben wir in dem Objekt pig_data_split die beiden Datensätze vorliegen. Wir ziehen uns nun die Trainingsdaten und die Testdaten in zwei neue Objekten heraus. Wir werden jetzt im weiteren Verlauf nur die Trainingsdaten nutzen. Die Testdaten nur einmal ganz am Ende, wenn wir die ROC-Kurven darstellen.\n\n\nR Code [zeigen / verbergen]\npig_train_data &lt;- training(pig_data_split)\npig_test_data  &lt;- testing(pig_data_split)\n\n\nWir brauchen wieder unser Rezept, in dem wir definieren, was an Schritten im Preproessing durchgeführt werden soll. Zuerst definieren wir unser Modell in der Funktion recipe(). Wir haben als unser Label die Variable infected, also ob ein Ferkel infiziert ist oder eben nicht. Wir nehmen dann die restlichen Variablen als Features mit ins Modell.\nNachdem wir dann das Rezept haben, wollen wir noch alle numerischen Prädiktoren, also die Features, auf die Spannweite von \\([0;1]\\) bringen. Dann werden noch alle nominalen Variablen in Dummies kodiert. Abschließend entfernen wir dann noch eventuelle Variablen, die kaum noch eine Varianz vorliegen haben. Das soll es für diese Anwendung des \\(k\\)-NN Algorithmus hier erstmal reichen.\n\n\nR Code [zeigen / verbergen]\npig_rec &lt;- recipe(infected ~ age + sex + location + activity + crp + \n                   frailty + bloodpressure + weight + creatinin,\n                  data = pig_train_data) |&gt; \n step_range(all_numeric_predictors(), min = 0, max = 1) |&gt; \n step_dummy(all_nominal_predictors()) |&gt; \n step_nzv(all_predictors())\n\n\nJetzt kommen wir zu dem Modell. Wir wollen den \\(k\\)-NN Algorithmus rechnen und nutzen deshalb die Funktion nearest_neighbor(). Wir wollen dann neighbors = 11 in dem Algorithmus nutzen. In der Funktion heißt dann das \\(k\\) eben neighbors. Ist zwar nicht schön, aber das kennen wir ja schon alles von anderen Funktionen. Dann nutzen wir die kknn Engine und wollen eine Klassifikation rechnen. Wir rechnen eine Klassifikation, da wir als Outcome die Variable infected vorliegen haben und diese Variable binär ist.\n\n\nR Code [zeigen / verbergen]\nknn_mod &lt;- nearest_neighbor(neighbors = 11) |&gt; \n  set_engine(\"kknn\") |&gt; \n  set_mode(\"classification\") \n\n\nDann haben wir also unser Modell definiert. Auch haben wir dann auch das Rezept, was wir ausführen wollen. Wir kombinieren jetzt das Modell zusammen mit dem Rezept in einen Workflow durch die Funktion workflow(). Bis jetzt haben wir noch nichts gerechnet. Das Rechnen kommt jetzt im nächsten Schritt.\n\n\nR Code [zeigen / verbergen]\npig_wflow &lt;- workflow() |&gt; \n  add_model(knn_mod) |&gt; \n  add_recipe(pig_rec)\n\n\nWir wollen jetzt den Workflow auf den Trainingsdaten ausführen. Dazu nutzen wir die Funktion fit(). Da es leider sehr viele R Pakete gibt, die die Funktion fit() implementiert haben, lege ich mit parsnip::fit() definitiv fest, dass wir die fit() Funktion aus dem R Paket {parsnip} nutzen wollen.\n\n\nR Code [zeigen / verbergen]\npig_fit &lt;- pig_wflow |&gt; \n  parsnip::fit(pig_train_data)\n\n\nJetzt haben wir den Fit des Modells vorliegen. Mit dem Modell werden wir jetzt schauen, wie gut wir das Outcome infected in den Testdaten vorhersagen können. Wir nutzen dazu die Funktion augment(). Die Funktion verbindet den Testdatensatz mit den Information aus der Vorhersage. Wie immer brauchen wir nicht alles, was wir wiedergegeben kriegen. Daher wählen wir nur die Spalte infected, da stehen ja unsere wahren Werte für den Infektionsstatus drin und die Vorhersagen aus dem Modell. Die Vorhersagen des Modells haben alle ein pred im Namen, also können wir die Funktion matches() nutzen um diese Spalten auszuwählen.\n\n\nR Code [zeigen / verbergen]\npig_aug &lt;- augment(pig_fit, pig_test_data ) |&gt; \n  select(infected, matches(\"pred\"))\n\npig_aug\n\n\n# A tibble: 103 × 4\n   infected .pred_class .pred_0 .pred_1\n   &lt;fct&gt;    &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 1        1             0.310   0.690\n 2 1        1             0.324   0.676\n 3 0        0             0.639   0.361\n 4 1        1             0.235   0.765\n 5 1        1             0.414   0.586\n 6 1        1             0.111   0.889\n 7 1        1             0       1    \n 8 0        1             0.208   0.792\n 9 0        0             0.567   0.433\n10 1        0             0.521   0.479\n# ℹ 93 more rows\n\n\nWir erhalten also den Infektionsstatus der Testdaten, den vorhergesagte Infektionsstatus aus dem \\(k\\)-NN Algorithmus, die Wahrscheinlichkeit für einen Infektionsstatus von 0 und die die Wahrscheinlichkeit für einen Infektionsstatus von 1. Damit haben wir alles zusammen um die ROC Kurven zu zeichnen. Dafür müssen wir die truth Spalte angeben und nennen in welcher Spalte die Wahrscheinlichkeit für die truth stehen. Wir definieren auch das event_level als second. Wenn die ROC Kurve auf der falschen Seite der Diagonalen ist, dann liegt es an dem falschen event_level. Die falsche Seite ist unterhalb der Diagonalen. Wenn die ROC also gespiegelt ist, dann versuche einmal event_level = \"first\" und erstelle die ROC Kurve neu.\n\n\nR Code [zeigen / verbergen]\npig_aug |&gt; \n  roc_curve(truth = infected, .pred_1, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 77.5— ROC Kurve für den kknn Algorithmus.\n\n\n\n\n\nLeider sieht die ROC Kurve nicht sehr gut aus. Eine sehr gute Vorhersage hat eine ROC Kurve die senkrecht ansteigt und dann waagerecht nach rechts verläuft. Die Fläche zwischen der Kurve und der Diagonalen sollte so große wie möglich sein.\nWenn wir jezt noch wissen wollen, wie groß die Fläche unter der Kurve ist (eng. area under the curve, abk. AUC) können wir die Funktion roc_auc() nutzen. Auch hier müssen wir das event_level richtig definieren. Wir kopieren hier den Code einfach rüber.\n\n\nR Code [zeigen / verbergen]\npig_aug |&gt; \n  yardstick::roc_auc(truth = infected, .pred_1, event_level = \"second\")\n\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 roc_auc binary         0.673\n\n\nWie wir oben schon in der ROC Kurve gesehen haben ist ein Wert von \\(0.673\\) für die AUC auch nicht sehr gut. Wir liegen unter \\(0.7\\) und damit wären wir mit dem Modell nicht zufrieden. Wir müssten hier nochmal den \\(k\\)-NN Algorithmus tunen.\nAuch können wir uns die Genauigkeit (eng. accuary) berechnen lassen. Die Accuary beschreibt wie viel Prozent des Infektionsstatus wir richtig vorhergesagt haben. Wenn wir eine Accuary von 1 haben, dann haben wir alle Label korrekt vorhergesagt. Die Spalte infected enthält die gleichen Werte wie die Spalte .pred_class aus der Funktion augment(). Wenn wir eine Accuary von 0 vorliegen haben, dann konnten wir kein Label richtig vorhersagen.\n\n\nR Code [zeigen / verbergen]\npig_aug |&gt; \n  yardstick::accuracy(truth = infected, .pred_class)\n\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.680\n\n\nWir auch die AUC ist auch die Accuary nicht besonders gut. Wir können nur ca. \\(68\\%\\) der Label richtig vorhersagen. Damit haben wir nur jeden dritten Infektionsstatus richtig vorhergesagt. Die Accuary ist dann eben auch nicht gut, wie wir es schon dann oben bei der ROC Kurve gesehen haben. Wenigstens passen dann die wichtigsten Beurteilungskriterien inhaltlich zusammen.\nWir können auch ganz viele Beurteilungskriterien für die Klassifikation in einer Confusion matrix berechnen lassen. Dabei ist wichtig, das wir hier eine binäre Klassifikation vorliegen haben. Unser Infektionsstatus hat eben nur zwei Ausprägungen. Die Ferkel sind entweder krank oder gesund. Wir können die Funktion conf_mat() nutzen um uns die 2x2 Tabelle erstellen zu lassen.\n\n\nR Code [zeigen / verbergen]\npig_cm &lt;- pig_aug |&gt; \n  conf_mat(infected, .pred_class)\n\npig_cm\n\n\n          Truth\nPrediction  0  1\n         0 10 11\n         1 22 60\n\n\nWenn wir dann die Funktion summary() nutzen, dann erhalten wir insgesamt dreizehn Beurteilungskriterien für die Klassifikation. Wir gehen jetzt nicht auf alle Kriterien ein, das sprengt hier den Rahmen. Wir schauen uns die Kriterien dann in dem Kapitel 76.6 nochmal teilweise an. Wie immer musst du nicht alle Kriterien angeben sondern nur die Kriterien, die der Fragestellung dienen.\n\n\nR Code [zeigen / verbergen]\npig_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary         0.680\n 2 kap                  binary         0.174\n 3 sens                 binary         0.312\n 4 spec                 binary         0.845\n 5 ppv                  binary         0.476\n 6 npv                  binary         0.732\n 7 mcc                  binary         0.181\n 8 j_index              binary         0.158\n 9 bal_accuracy         binary         0.579\n10 detection_prevalence binary         0.204\n11 precision            binary         0.476\n12 recall               binary         0.312\n13 f_meas               binary         0.377\n\n\nWie immer können wir uns eine 2x2 Tabelle auch mit einem Mosaicplot visualisieren. Das machen wir dann auch mit der Funktion autoplot(). Wir können natürlich auch die ggplot Funktionen nutzen, aber wir nutzen hier ja die Visualisierung nur um unsere Klassifikation zu überprüfen. Dann reicht auch die schnellere Variante.\n\n\nR Code [zeigen / verbergen]\nautoplot(pig_cm, type = \"mosaic\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\nAbbildung 77.6— Mosaicplot der Konfusionsmatrix für den kknn Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#resampling",
    "href": "classification-knn.html#resampling",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.5 Resampling",
    "text": "77.5 Resampling\nWir können den \\(k\\)-NN Algorithmus nicht nur auf dem Trainingsdaten anwenden sondern auch auf Validierungsdaten optimieren. Dabei sind die Validierungsdaten wiederum aufgeteilte Trainingsdaten. Wir nutzen die Funktion vfold_cv() um uns zehn Kreuzvalidierungsdatensätze zu erschaffen. Meistens rechnen wir eine 10-fache Kreuzvalidierung. Die 10-fache Kreuzvalidierung ist eigentlich der Standard im Bereich der Kreuzvaldidierung.\n\n\nR Code [zeigen / verbergen]\nfolds &lt;- vfold_cv(pig_train_data, v = 10)\nfolds\n\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits           id    \n   &lt;list&gt;           &lt;chr&gt; \n 1 &lt;split [278/31]&gt; Fold01\n 2 &lt;split [278/31]&gt; Fold02\n 3 &lt;split [278/31]&gt; Fold03\n 4 &lt;split [278/31]&gt; Fold04\n 5 &lt;split [278/31]&gt; Fold05\n 6 &lt;split [278/31]&gt; Fold06\n 7 &lt;split [278/31]&gt; Fold07\n 8 &lt;split [278/31]&gt; Fold08\n 9 &lt;split [278/31]&gt; Fold09\n10 &lt;split [279/30]&gt; Fold10\n\n\nDank der Funktion fit_resample() können wir einen Workflow nicht nur auf einen Datensatz wie mit der Funktion fit() anwenden, sondern auf ein ganzes Set an Validierungsdaten. Die Funktion fit_resample() rechnet jetzt auf jenden der zehn Validierungsdatensätze einen \\(k\\)-NN Algorithmus wie im Workflow beschreiben.\n\n\nR Code [zeigen / verbergen]\npig_cv_fit &lt;- pig_wflow |&gt; \n  fit_resamples(folds)\n\n\nNachdem wir die zehn Validierungsdatensätze durchgerechnet haben, müssen wir noch die Informationen aus jedem der zehn Validierungsdatensätze einsammeln. Das macht die Funktion collect_metrics() für uns.\n\n\nR Code [zeigen / verbergen]\ncollect_metrics(pig_cv_fit)\n\n\n# A tibble: 3 × 6\n  .metric     .estimator  mean     n std_err .config             \n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary     0.718    10  0.0220 Preprocessor1_Model1\n2 brier_class binary     0.203    10  0.0108 Preprocessor1_Model1\n3 roc_auc     binary     0.700    10  0.0357 Preprocessor1_Model1\n\n\nWir sehen, dass wir eine Accuarcy von \\(0.718\\) erreichen und eine AUC von \\(0.7\\). Damit sind wir ein bisschen besser als in unserem einfachen Lauf auf nur den Trainingsdaten. Die eigentliche Stärke der Kreuzvalidierung kommt aber erst mit dem Tuning zu tage. Hier nutzen wir dann die Kreuzvalidierung um die Parameter des \\(k\\)-NN Algorithmus zu optimieren.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#tuning",
    "href": "classification-knn.html#tuning",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.6 Tuning",
    "text": "77.6 Tuning\nWas heißt Tuning? Wie bei einem Auto können wir an verschiedenen Stellschrauben bei einem mathematischen Algorithmus schrauben. Welche Schrauben und Teile das sind, hängt dann wieder vom Algorithmus ab. Im Falle des \\(k\\)-NN Algorithmus können wir an folgenden Parametern drehen und jeweils schauen, was dann mit unserer Vorhersage passiert.\n\nneighbors, eine einzelne Zahl für die Anzahl der zu berücksichtigenden Nachbarn (oft \\(k\\) genannt). Für kknn wird ein Wert von 5 verwendet, wenn keine Anzahl angegeben ist.\nweight_func ein Wort für den Typ der Kernel-Funktion, die zur Gewichtung der Abstände zwischen den Beobachtungen verwendet wird.\ndist_power, eine einzelne Zahl für den Parameter, der bei der Berechnung der Minkowski-Distanz verwendet wird. Wir nutzen also die dist_power nicht bei jedem Tuningschritt, da nicht jede Gewichtsfunktion eine dist_power braucht.\n\nNun ist es so, dass wir natürlich nicht händisch alle möglichen Kombinationen von der Anzahl der Nachbarn, der Distanzfunktion und der Gewichtung der Distanz berechnen wollen. Das sind ziemlich viele Kombinationen und wir kommen dann vermutlich schnell durcheinander. Deshalb gibt es die Funktion tune() aus dem R Paket {tune}, die uns einen Prozess anbietet, das Tuning automatisiert durchzuführen.\nAls erstes müssen wir uns ein Objekt bauen, das aussieht wie ein ganz normales Modell in der Klassifikation. Aber wir ergänzen jetzt noch hinter jeder zu tunenden Option noch die Funktion tune(). Das sind die Parameter des Algorithmus, die wir später tunen wollen.\n\n\nR Code [zeigen / verbergen]\ntune_spec &lt;- nearest_neighbor(neighbors = tune(),\n                              weight_func = tune(), \n                              dist_power = tune()) |&gt; \n  set_engine(\"kknn\") |&gt; \n  set_mode(\"classification\") \n\ntune_spec\n\n\nK-Nearest Neighbor Model Specification (classification)\n\nMain Arguments:\n  neighbors = tune()\n  weight_func = tune()\n  dist_power = tune()\n\nComputational engine: kknn \n\n\nJetzt bauen wir uns den Workflow indem wir statt unserem Modell, die Tuninganweisung in den Workflow reinnehmen. Echt simpel und straightforward. Das Rezept bleibt ja das Gleiche.\n\n\nR Code [zeigen / verbergen]\npig_tune_wflow &lt;- workflow() |&gt; \n  add_model(tune_spec) |&gt; \n  add_recipe(pig_rec)\n\n\nJetzt müssen wir noch alle Kombinationen aus den drei Parametern neighbors, weight_func und dist_power ermitteln. Das macht die Funktion grid_regular(). Es gibt da noch andere Funktionen in dem R Paket {tune}, aber ich konzentriere mich hier auf die einfachste. Jetzt müssen wir noch die Anzahl an Kombinationen festlegen. Ich möchte für jeden Parameter fünf Werte tunen. Daher nutze ich hier die Option levels = 5 auch damit hier die Ausführung nicht so lange läuft. Fange am besten mit levels = 5 an und schaue, wie lange das zusammen mit der Kreuzvalidierung dann dauert. Dann kannst du die Levels noch hochschrauben. Beachte aber, dass mehr Level nur mehr Zwischenschritte bedeutet. Jede Option hat eine Spannweite range, die du dann anpassen musst, wenn du höhere Werte haben willst. In unserem Fall ist die default Anzahl an neighbors auf 1 bis 10 gesetzt. Mehr Level würden nur mehr Zwischenschritte bedeuten. Deshalb habe ich die Spannweite auf 1 bis 20 Nachbarn gesetzt. Jetzt wählt die Funktion fünf Zwischenschritte (levels = 5) zwischen ein und zwanzig aus (range = c(1, 20)).\n\n\nR Code [zeigen / verbergen]\npig_grid &lt;- grid_regular(neighbors(range = c(1, 20)),\n                         weight_func(),\n                         dist_power(),\n                         levels = 5)\n\n\nDas Tuning nur auf dem Trainingsdatensatz durchzuführen ist nicht so eine gute Idee. Deshalb nutzen wir hier auch die Kreuzvalidierung. Eigentlich ist eine 10-fache Kreuzvalidierung mit \\(v=10\\) besser. Das dauert mir dann aber hier im Skript viel zu lange. Deshalb habe ich hier nur \\(v=5\\) gewählt. Wenn du das Tuning rechnest, nimmst du natürlich eine 10-fach Kreuzvalidierung.\n\n\nR Code [zeigen / verbergen]\npig_folds &lt;- vfold_cv(pig_train_data, v = 5)\n\n\nNun bringen wir den Workflow zusammen mit dem Tuninggrid und unseren Sets der Kreuzvaidierung. Daher pipen wir den Workflow in die Funktion tune_grid(). Als Optionen brauchen wir die Kreuzvaldierungsdatensätze und das Tuninggrid. Wenn du control_grid(verbose = TRUE) wählst, dann erhälst du eine Ausgabe wie weit das Tuning gerade ist. Achtung!, das Tuning dauert seine Zeit. Im Falle des \\(k\\)-NN Algorithmus dauert das Tuning zwar nicht so lange, aber immer noch ein paar Minuten. Du kannst das Ergebnis des Tunings auch in der Datei pig_knn_tune_res.rds finden.\n\n\nR Code [zeigen / verbergen]\npig_tune_res &lt;- pig_tune_wflow |&gt; \n   tune_grid(resamples = pig_folds,\n             grid = pig_grid,\n             control = control_grid(verbose = FALSE))\n\n\nDamit du nicht das Tuning durchlaufen lassen musst, habe ich das Tuning in die Datei pig_knn_tune_res.rds abgespeichert und du kannst dann über die Funktion read_rds() wieder einlesen. Dann kannst du den R Code hier wieder weiter ausführen.\n\n\nR Code [zeigen / verbergen]\npig_tune_res &lt;- read_rds(\"data/pig_knn_tune_res.rds\")\n\n\nNachdem das Tuning durchgelaufen ist, können wir uns über die Funktion collect_metrics(), die Ergebnisse des Tunings für jede Kombination der drei Parameter neighbors, weight_func und dist_power wiedergeben lassen. Diese Ausgabe ist super unübersichtlich. Deshalb einmal die Abbildung der mittleren Accuarcy und der mittleren AUC-Werte über alle Kreuzvalidierungen.\n\n\nR Code [zeigen / verbergen]\npig_tune_res |&gt;\n  collect_metrics() |&gt;\n  mutate(weight_func = as_factor(weight_func),\n         dist_power = as_factor(dist_power)) |&gt;\n  ggplot(aes(neighbors, mean, color = weight_func, linetype = dist_power)) +\n  theme_minimal() +\n  geom_line(alpha = 0.6) +\n  geom_point() +\n  facet_wrap(~ .metric, scales = \"free\", nrow = 2) +\n  scale_x_log10(labels = scales::label_number()) +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 77.7— Tuning Kurven für den kknn Algorithmus.\n\n\n\n\n\nDamit wir nicht händisch uns die beste Kombination raussuchen müssen, können wir die Funktion show_best() nutzen.\n\n\nR Code [zeigen / verbergen]\npig_tune_res |&gt;\n  show_best()\n\n\nWarning in show_best(pig_tune_res): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 9\n  neighbors weight_func dist_power .metric .estimator  mean     n std_err\n      &lt;int&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n1        20 rectangular       1.5  roc_auc binary     0.720     5  0.0140\n2        20 rectangular       1.75 roc_auc binary     0.719     5  0.0179\n3        20 rectangular       2    roc_auc binary     0.712     5  0.0167\n4        20 rectangular       1    roc_auc binary     0.706     5  0.0126\n5        20 rectangular       1.25 roc_auc binary     0.700     5  0.0132\n# ℹ 1 more variable: .config &lt;chr&gt;\n\n\nDas war die Funktion show_best() aber wir können uns auch die gleich die besten Parameter nach der Accuracy raus ziehen. Das Rausziehen der besten Parameter macht für uns die Funktion select_best().\n\n\nR Code [zeigen / verbergen]\nbest_knn &lt;- pig_tune_res |&gt;\n  select_best()\n\n\nWarning in select_best(pig_tune_res): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\nR Code [zeigen / verbergen]\nbest_knn\n\n\n# A tibble: 1 × 4\n  neighbors weight_func dist_power .config               \n      &lt;int&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                 \n1        20 rectangular        1.5 Preprocessor1_Model065\n\n\nWir sehen, dass wir neighbors = 15 wählen sollten. Dann müssen wir als Gewichtungsfunktion rectangular nutzen. Die Gewichtung der Distanz wäre dann 1.25. Müssen wir jetzt die Zahlen wieder in ein Modell eingeben? Nein, müssen wir nicht. Mit der Funktion finalize_workflow() können wir dann die besten Parameter aus unserem Tuning gleich mit dem Workflow kombinieren. Dann haben wir unseren finalen, getunten Workflow. Du siehst dann auch in der Ausgabe, dass die neuen Parameter in dem \\(k\\)-NN Algorithmus übernommen wurden\n\n\nR Code [zeigen / verbergen]\nfinal_pig_wf &lt;- pig_tune_wflow |&gt; \n  finalize_workflow(best_knn)\n\nfinal_pig_wf \n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_range()\n• step_dummy()\n• step_nzv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nK-Nearest Neighbor Model Specification (classification)\n\nMain Arguments:\n  neighbors = 20\n  weight_func = rectangular\n  dist_power = 1.5\n\nComputational engine: kknn \n\n\nJetzt bleibt uns nur noch der letzte Fit übrig. Wir wollen unseren finalen, getunten Workflow auf die Testdaten anwenden. Dafür gibt es dann auch die passende Funktion. Das macht für uns die Funktion last_fit(), die sich dann die Informationen für die Trainings- und Testdaten aus unserem Datensplit von ganz am Anfang extrahiert.\n\n\nR Code [zeigen / verbergen]\nfinal_fit &lt;- final_pig_wf |&gt;\n  last_fit(pig_data_split) \n\n\nDa wir immer noch eine Kreuzvaldierung rechnen, müssen wir dann natürlich wieder alle Informationen über alle Kreuzvaldierungsdatensätze einsammeln. Dann erhalten wir unsere beiden Gütekriterien für die Klassifikation der Infektion von Ferkeln nach dem \\(k\\)-NN Algorithmus. So super sind die Zahlen nicht. Eine Accuracy von 73% bedeutet das wir nur knapp drei von vier Ferkeln richtig klassifizieren. Die AUC ist auch nicht berauschend, wir bringen also eine Menge Label durcheinander. Wir klassifizieren also gesunde Ferkeln als krank und umgekehrt.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_metrics()\n\n\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary         0.709 Preprocessor1_Model1\n2 roc_auc     binary         0.686 Preprocessor1_Model1\n3 brier_class binary         0.193 Preprocessor1_Model1\n\n\nDann bleibt uns nur noch die ROC Kurve zu visualisieren. Da wir wieder etwas faul sind, nutzen wir die Funktion autoplot(). Als Alternative geht natürlich auch das R Paket {pROC}, was eine Menge mehr Funktionen und Möglichkeiten bietet.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_predictions() |&gt; \n  roc_curve(infected, .pred_1, event_level = \"second\") |&gt; \n  autoplot() +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 77.8— ROC Kurve für den kknn Algorithmus nach der Kreuvalidierung und dem Tuning.\n\n\n\n\n\nEine gute ROC Kurve würde senkrecht nach oben gehen und dann waagrecht nach rechts. Dann hätten wir eine AUC von 1 und eine perfekte Separation der beiden Label durch unseren Algorithmus. Unser Algorithmus würde jedes Ferkel in dem Testdatensatz korrekt dem Infektionsstatus krank und gesund zuweisen. Da wir eine ROC Kurve hier vorliegen haben, die sehr nahe an der Diagonalen ist, haben wir sehr viele falsch vorhergesagte Ferkel in unseren Testdaten. Ferkel die gesund sind, werden als krank klassifiziert uns umgekehrt.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-knn.html#kmeans-clustering",
    "href": "classification-knn.html#kmeans-clustering",
    "title": "77  \\(k\\) nearest neighbor",
    "section": "77.7 kmeans Clustering",
    "text": "77.7 kmeans Clustering\nNeben der Klassifikation können wir den \\(k\\)-NN Algorithmus auch nutzen um Gruppen in den Daten zu finden. Die Idee ist recht einfach. Wir geben \\(k\\) Cluster vor und der Algorithmus versucht nun die Daten nach einer gegebenen Distanzfunktion so zu ordnen, dass sich \\(k\\) Cluster bilden. Je nach der Nähe der Beobachtungen zueinander lassen sich dann mehr oder minder klar abgegrenzte Cluster bilden. Das Problem an der Sache ist die Definition von \\(k\\) für die Anzahl der zu bildenden Cluster. Wir müssen nämlich selber festlegen, wie viele Cluster wir erwarten würden und der Algorithmus dann finden wird. Wenn wir \\(k = 3\\) der Funktion kmeans mitgeben, dann findet die Funktion drei Cluster. Auch wenn zwei mehr Sinn gemacht hätten. Daher müssen wir immer selber ausprobieren und uns die Daten visualisieren, ob das mit den Clustern so passt.\nFür Clusterbildung können wir nur numerische Variablen verwenden. Daher müssen wir hier über die Funktion step_dummy alle nominalen Variablen wie Faktoren in eine \\(0/1\\)-Kodierung umwandeln. Das ist eine Einschränkung des kmeans Algorithmus. Wir bauen uns also als erstes ein simples Rezept für unsere Ferkeldaten.\n\n\nR Code [zeigen / verbergen]\npig_kmeans_rec &lt;- recipe(infected ~ age + sex + location + activity + crp + \n                           frailty + bloodpressure + weight + creatinin,\n                         data = pig_train_data) |&gt; \n  step_dummy(all_nominal_predictors()) \n\n\nDann müssen wir noch unser Rezept auf Daten anwenden. Da wir hier die gleichen Daten nutzen wollen, auf denen wir auch das Rezept definiert haben, nutzen wir die Funktion juice(). Sonst müssten wir in der Funktion bake() einen neuen Datensatz definieren.\n\n\nR Code [zeigen / verbergen]\npig_dummy_tbl &lt;- pig_kmeans_rec |&gt; \n  prep() |&gt; \n  juice()\n\n\nNachdem wir jetzt einen Datensatz mit nur numerischen Variablen vorliegen haben, können wir die Funktion kmeans() ausführen. Wir wollen dabei aber drei Cluster bilden, das machen wir mit der Option centers = 3.\n\n\nR Code [zeigen / verbergen]\nkmeans_obj &lt;- kmeans(pig_dummy_tbl, centers = 3)\n\n\nJetzt ziehen wir uns aus dem Objekt kmeans_obj noch die Cluster raus und kombinieren die Information welche Beobachtung in welchen Cluster fällt mit den ursprünglichen Daten. Damit sind wir dann hier schon fertig. Häufig wird die Funktion kmeans in der Detektion von Ausreißern zusammen mit dem Multidimensional Scaling verwendet.\n\n\nR Code [zeigen / verbergen]\npig_dummy_tbl |&gt; \n  bind_cols(cluster = pluck(kmeans_obj, \"cluster\")) |&gt; \n  select(cluster, everything())\n\n\n# A tibble: 309 × 14\n   cluster   age activity   crp bloodpressure weight creatinin infected sex_male\n     &lt;int&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt;\n 1       1    57     12.0  19.2          53.8   17.4      2.9  0               1\n 2       1    56     12.0  19.5          56.3   19.4      3.89 0               0\n 3       1    54     14.6  20.2          55.2   19.3      5.3  1               1\n 4       1    55     13.8  20.3          51.9   18.4      6.44 1               1\n 5       1    51     12.3  19.5          55.7   20.0      3.12 1               0\n 6       2    68     14.6  20.6          57.4   17.4      6.22 1               0\n 7       2    61     12.0  21.0          53.3   19.5      4.57 1               1\n 8       3    56     14.7  22.0          61.4   21.9      3.35 1               0\n 9       3    60     10.8  21.8          59.0   18.0      4.85 1               0\n10       1    56     14.4  19.6          55.8   17.2      5.13 0               1\n# ℹ 299 more rows\n# ℹ 5 more variables: location_northeast &lt;dbl&gt;, location_northwest &lt;dbl&gt;,\n#   location_west &lt;dbl&gt;, frailty_pre.frail &lt;dbl&gt;, frailty_robust &lt;dbl&gt;\n\n\nDas R Paket {embed} bietet noch eine Vielzahl an weiteren Funktionen für die Erstellung von kategorialen Variablen. Bier musst du schauen, ob die Funktionen dann univariat sind und daher immer nur eine Variable nutzen oder aber multivariat und daher mehrere Spalten simultan. Der Vorteil von kmeans ist ja, das der Algorithmus mehrere numerische Spalten für die Clusterbildung nutzen kann.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>77</span>  <span class='chapter-title'>$k$ nearest neighbor</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html",
    "href": "classification-randomforest.html",
    "title": "78  Decision trees",
    "section": "",
    "text": "78.1 Genutzte R Pakete\nLetzte Änderung am 20. May 2024 um 07:24:10\nIn diesem Kapitel wollen wir uns mit Entscheidungsbäumen (eng. decision trees) beschäftigen. Wie oft gibt es auch bei der Anwendung von Entscheidungsbäumen eine Menge Varianten. Wir wollen uns in diesem Kapitel eine erste Übersicht geben und du kannst dann ja schauen, welche Varianten es noch von den Entscheidungsbäumen gibt. Wichtig ist zu wissen, unsere Bäume spalten sich immer nur in zwei Äste auf.\nAlle drei Algorithmen gehen wir jetzt einmal durch. Dabei können wir bei einem Entscheidunsgbaum noch recht gut nachvollziehen, was dort eigentlich passiert. Bei mehreren Bäumen zusammen, können wir nur noch schematisch nachvollziehen was die einzelnen Schritte in der Modellbildung sind.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, \n               janitor, vip, rpart.plot, see,\n               xgboost, Ckmeans.1d.dp, conflicted)\n##\nset.seed(2025429)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html#daten",
    "href": "classification-randomforest.html#daten",
    "title": "78  Decision trees",
    "section": "78.2 Daten",
    "text": "78.2 Daten\nBei dem vorherigen Beispielen haben wir immer unseren Datensatz zu den infizierten Ferkeln genutzt. In diesem Kapitel wolle wir uns aber mal auf einen echten Datensatz anschauen. Wir nutzen daher einmal den Gummibärchendatensatz. Als unser Label und daher als unser Outcome nehmen wir das Geschlecht gender. Dabei wollen wir dann die weiblichen Studierenden vorhersagen. Im Weiteren nehmen wir nur die Spalte Geschlecht sowie als Prädiktoren die Spalten most_liked, age, semester, und height.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\") |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked)) |&gt; \n  select(gender, most_liked, age, semester, height) |&gt; \n  drop_na(gender)\n\n\nWir dürfen keine fehlenden Werte in den Daten haben. Wir können für die Prädiktoren später die fehlenden Werte imputieren. Aber wir können keine Labels imputieren. Daher entfernen wir alle Beobachtungen, die ein NA in der Variable gender haben. Wir haben dann insgesamt \\(n = 854\\) Beobachtungen vorliegen. In Tabelle 78.1 sehen wir nochmal die Auswahl des Datensatzes in gekürzter Form.\n\n\n\n\nTabelle 78.1— Auszug aus dem Daten zu den Gummibärchendaten.\n\n\n\n\n\n\ngender\nmost_liked\nage\nsemester\nheight\n\n\n\n\nm\nlightred\n35\n10\n193\n\n\nw\nyellow\n21\n6\n159\n\n\nw\nwhite\n21\n6\n159\n\n\nw\nwhite\n36\n10\n180\n\n\nm\nwhite\n22\n3\n180\n\n\nm\ngreen\n22\n3\n180\n\n\n…\n…\n…\n…\n…\n\n\nm\ndarkred\n23\n2\n196\n\n\nw\nyellow\n24\n2\n168\n\n\nm\ngreen\n24\n8\n178\n\n\nw\nlightred\n23\n8\n180\n\n\nm\ndarkred\n25\n2\n202\n\n\nw\ndarkred\n23\n2\n172\n\n\n\n\n\n\n\n\nUnsere Fragestellung ist damit, können wir anhand unserer Prädiktoren männliche von weiblichen Studierenden unterscheiden und damit auch klassifizieren? Um die Klassifikation mit Entscheidungsbäumen rechnen zu können brauchen wir wie bei allen anderen Algorithmen auch einen Trainings- und Testdatensatz. Wir splitten dafür unsere Daten in einer 3 zu 4 Verhältnis in einen Traingsdatensatz sowie einen Testdatensatz auf. Der Traingsdatensatz ist dabei immer der größere Datensatz. Da wir aktuell nicht so viele Beobachtungen in dem Gummibärchendatensatz haben, möchte ich mindestens 100 Beobachtungen in den Testdaten. Deshalb kommt mir der 3:4 Split sehr entgegen.\nIm maschinellen Lernen sind alle Datensätze, die weniger als tausend Beobachtungen vorliegen haben, klein.\n\n\nR Code [zeigen / verbergen]\ngummi_data_split &lt;- initial_split(gummi_tbl, prop = 3/4)\n\n\nWir speichern uns jetzt den Trainings- und Testdatensatz jeweils separat ab. Die weiteren Modellschritte laufen alle auf dem Traingsdatensatz, wie nutzen dann erst ganz zum Schluss einmal den Testdatensatz um zu schauen, wie gut unsere trainiertes Modell auf den neuen Testdaten funktioniert.\n\n\nR Code [zeigen / verbergen]\ngummi_train_data &lt;- training(gummi_data_split)\ngummi_test_data  &lt;- testing(gummi_data_split)\n\n\nNachdem wir die Daten vorbereitet haben, müssen wir noch das Rezept mit den Vorverabreitungsschritten definieren. Wir schreiben, dass wir das Geschlecht gender als unser Label haben wollen. Daneben nehmen wir alle anderen Spalten als Prädiktoren mit in unser Modell, das machen wir dann mit dem . Symbol. Da wir noch fehlende Werte in unseren Prädiktoren haben, imputieren wir noch die numerischen Variablen mit der Mittelwertsimputation und die nominalen fehlenden Werte mit Entscheidungsbäumen. Es gibt wie immer noch andere Imputationsmöglichkeiten, ich habe mich jetzt aus praktischen Gründen für dies beiden Verfahren entschieden. Ich überspringe hier auch die Diagnose der Imputation, also ob das jetzt eine gute und sinnvolle Imputation der fehlenden Werte war oder nicht. Die Diagnoseschritte müsstest du im Anwendungsfall nochmal im Kapitel zur Imputation nachlesen und anwenden. Dann müssen wir noch alle numerischen Variablen normalisieren und alle nominalen Variablen dummykodieren. Am Ende werde ich nochmal alle Variablen entfernen, sollte die Varianz in einer Variable nahe der Null sein.\n\n\nR Code [zeigen / verbergen]\ngummi_rec &lt;- recipe(gender ~ ., data = gummi_train_data) |&gt; \n  step_impute_mean(all_numeric_predictors()) |&gt; \n  step_impute_bag(all_nominal_predictors()) |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_nzv(all_predictors())\n\ngummi_rec\n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\n\n\n\n\n\n── Operations \n\n\n• Mean imputation for: all_numeric_predictors()\n\n\n• Bagged tree imputation for: all_nominal_predictors()\n\n\n• Range scaling to [0,1] for: all_numeric_predictors()\n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Sparse, unbalanced variable filter on: all_predictors()\n\n\nAlles in allem haben wir ein sehr kleines Modell. Wir haben ja nur ein Outcome und vier Prädiktoren. Trotzdem sollte dieser Datensatz reichen um zu erklären wie Entscheidungsbäume funktionieren.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html#sec-rpart",
    "href": "classification-randomforest.html#sec-rpart",
    "title": "78  Decision trees",
    "section": "78.3 Entscheidungsbaum mit Rpart",
    "text": "78.3 Entscheidungsbaum mit Rpart\nWie funktioniert nun ein Entscheidungsbaum? Ein Entscheidungsbaum besteht aus Knoten (eng. nodes) und Ästen (eng. edge). Dabei hat immer ein Knoten zwei Äste. Die Beobachtungen in einem Knoten fallen nach einer Entscheidungsregel anhand eines Prädiktors in entlang zweier Äste in zwei separate Knoten. So können wir unsere \\(n = 854\\) zum Beispiel anhand des Alters in zwei Gruppen aufteilen. Wir legen willkürlich die Altersgrenze bei 22 fest.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl |&gt; \n  mutate(grp = if_else(age &gt;= 22, 1, 0)) |&gt; \n  pull(grp) |&gt; \n  tabyl()\n\n\n pull(mutate(gummi_tbl, grp = if_else(age &gt;= 22, 1, 0)), grp)   n     percent\n                                                            0 362 0.423887588\n                                                            1 489 0.572599532\n                                                           NA   3 0.003512881\n valid_percent\n     0.4253819\n     0.5746181\n            NA\n\n\nWir erhalten mit diesem Split zwei Gruppen mit je \\(n_0 = 207\\) und \\(n_1 = 259\\) Beobachtungen. Wir haben jetzt diesen Split willkürlich gewählt. In dem Algorithmus für die Entscheidungsbäume wird dieser Schritt intern optimiert, so dass wir den besten Wert für den Alterssplit finden, der uns möglichst reine Knoten im Bezug auf das Label liefert. Wir wollen ja am Ende einen Algorithmus trainieren, der uns die Geschlechter bestmöglich auftrennt, so dass wir eine neue Beobachtung bestmöglich vorhersagen können. Wenn keine Aufteilungen in einem Knoten mehr möglich sind, dann nennen wir diesen Knoten einen Terminalknoten.\nIn Abbildung 78.5 sehen wir ein Beispiel für zwei numerische Prädiktoren \\(X_1\\) und \\(X_2\\). Auf der linken Seite ist das Koordinatensystem mit dreizehn Beobachtungen dargestellt. Von den dreizehn Beobachtungen sind zehn Fälle (eng. cases) und drei Kontrollen (eng. control). Wir wollen uns jetzt an dem Koordinatensystem die Idee der Splits für ein Baumwachstum veranschaulichen. Auf der rechten Seite sehen wir nämlich den ersten Knoten des Entscheidungsbaums (eng. root node) in dem sich alle Beobachtungen befinden. Wir wollen jetzt die Beobachtungen anhand der Prädiktoren \\(X_1\\) und \\(X_2\\) so aufspalten, dass für möglichst reine Knoten erhalten. Wir stoppen auch im Splitting wenn wir weniger oder gleich vier Beobachtungen nach einem Split in einem Knoten erhalten.\n\n\n\n\n\n\nAbbildung 78.1— Darstellung des Anwachsen des Entscheidungsbaumes. Links sind die beiden Prädiktoren \\(X_1\\) und \\(X_2\\) als Koordinatensysten dargestellt. Die Punkte stllen die Beobachtungen mit den jeweiligen Label weiß und schwarz dar. Rechts ist der Knoten \\(t_1\\) dargestellt, der alle Beobachtungen beinhaltet..\n\n\n\nIn Abbildung 78.6 sehen wir den ersten Split des Prädiktors \\(X_1\\) anhand des Wertes \\(c_1\\). Wir erhalten nach dem Split die zwei neuen Knoten \\(t_2\\) und \\(t_3\\). Wir haben den Split so gewählt, dass wir einen reinen Knoten \\(t_3\\) erhalten. Da der Knoten \\(t_3\\) jetzt nur noch Fälle enthaält, wird dieser Knoten zu einem Terminalknoten und es finden keine weiteren Aufspaltungen mehr statt. Wir machen jetzt also mit dem Knoten \\(t_2\\) weiter.\n\n\n\n\n\n\nAbbildung 78.2— Darstellung des ersten Splits anhand des Prädiktors \\(X_1\\). Wir wählen den Wert \\(c_1\\) für den Split so, dass wir möglichst reine Knoten produzieren. Wir erhalten zwei neue Knoten \\(t_2\\) und \\(t_3\\). Der Knoten \\(t_3\\) ist maximal rein und wird daher zu einem Terminalknoten.\n\n\n\nIn Abbildung 78.8 sehen wir den Split durch den Prädiktor \\(X_2\\) nach dem Wert \\(c_2\\). Wir erhalten wieder zwei neue Knotenn \\(t_4\\) und \\(t_5\\). Der Knoten \\(t_4\\) wird nach unseren Regeln wieder zu einem Terminalknoten. Wir haben nur Fälle in dem Knoten \\(t_4\\) vorliegen. Wir stoppen auch bei dem Knoten \\(t_5\\) unsere weitere Aufteilung, da wir hier vier oder weniger Beobachtungen vorliegen haben. Damit sind wir mit dem Split zu einem Ende gekommen.\n\n\n\n\n\n\nAbbildung 78.3— Darstellung des zweiten Splits anhand des Prädiktors \\(X_2\\). Wir wählen wiederum den Wert \\(c_2\\) für den Split so, dass wir möglichst reine Knoten erhalten. So erhalten wir zwei neue Knoten \\(t_4\\) und \\(t_5\\). Da nun \\(t_4\\) ebenfalls ein reiner Knoten ist, wird der Knoten \\(t_4\\) ebenfalls zu einem Terminalknoten. Wir stoppen hier das Wachstum, da mir eine mindest Anzahl von vier Beobachtungen in den Knoten erreicht haben.\n\n\n\nIn Abbildung 78.12 sehen wir jetzt eine neue Beobachtung ? die mit gegebenen Werten für \\(X_1\\) und \\(X_2\\) in den terminalen Knoten \\(t_5\\) fällt. Wir zählen dort die Fälle und erhalten eine Klassenzugehörigkeitswahrscheinlichkeit von 25%. Daher würden wir sagen, dass die neue Beobchtung eine Kontrolle ist. Es handelt sich damit um eine weiße Beoabchtung.\n\n\n\n\n\n\nAbbildung 78.4— Darstellung der Vorhersage einer neuen Beobachtung mit Werten für die Prädiktoren \\(X_1\\) und \\(X_2\\). Unsere neue Beobachtung ? fällt in den Terminalknoten \\(t_5\\). Dort zählen wir die schwarzen Kreise. Wir stellen fest, dass die neue Beobachtung mit 25% Wahrscheinlichkeit ein Fall und damit schwarz ist. Daher ist die neue Beobachtung weiß.\n\n\n\nDamit haben wir einmal den simplen Fall mit zwei numerischen Prädiktoren durchgespielt. Auch haben wir wenige Beobachtungen und sind schnell zu reinen Knoten gekommen. Wenn wir jetzt natürlich sehr viel mehr Beobachtungen haben oder sehr viele Prädiktoren dann wird die Sache sehr schnell sehr rechenintensiv. Dafür haben wir dann eben R.\nWenn wir in R einen Entscheidungsbaum rechnen wollen, dann nutzen wir die Funktion decision_tree() wir wollen nur eine maximale Tiefe von 5 Knoten haben und/oder mindestens 10 Beobachtungen in einem Knoten. Je nachdem welche Bedingung wir eher erreichen. Ebenfalls können wir das Wachstum mit dem Parameter cost_complexity kontrollieren. Sollte sich das Modell nicht um mindestens 0.001 verbessern, dann werden wir den nächsten Knoten nicht anlegen. Wir wählen als Engine den Algorithmus rpart, da wir uns diese Art von Algorithmus gut mit dem R Paket {rpart.plot} visualisieren können.\n\n\nR Code [zeigen / verbergen]\nrpart_mod &lt;- decision_tree(tree_depth = 5, min_n = 10, cost_complexity = 0.001) |&gt; \n  set_engine(\"rpart\") |&gt; \n  set_mode(\"classification\")\n\n\nJetzt kommt wieder das Modell zusammen mit dem Rezept. Wir speichern wieder beides in einen Workflow.\n\n\nR Code [zeigen / verbergen]\nrpart_wflow &lt;- workflow() |&gt; \n  add_model(rpart_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nDen Workflow können wir dann mit dem Traingsdatensatz einmal durchlaufen lassen und uns das gefittete Modell wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nrpart_fit &lt;- rpart_wflow |&gt; \n  parsnip::fit(gummi_train_data)\n\n\nNachdem wir das trainierte Modell vorliegen haben, nutzen wir die Funktion augment() um das Modell auf die Testdaten anzuwenden.\n\n\nR Code [zeigen / verbergen]\nrpart_aug &lt;- augment(rpart_fit, gummi_test_data ) \n\n\nJetzt geht es los und wir schauen uns einmal an, wie gut die Klassifizierung mit dem Modell funktioniert hat. Als erstes bauen wir uns einmal die Konfusionsmatrix um zu sehen wie gut die beiden Geschlechter in dem Testdatensatz vorhergesagt wurden.\n\n\nR Code [zeigen / verbergen]\nrpart_cm &lt;- rpart_aug |&gt; \n  conf_mat(gender, .pred_class)\n\nrpart_cm\n\n\n          Truth\nPrediction  m  w\n         m 78 16\n         w 23 97\n\n\nDas freut einen doch. Das sieht ziemlich gut aus. Wir haben auf der Diagonalen fast alle Beoabchtungen und nur sehr wenige falsche Vorhersagen auf der Nichtdiagonalen. Jetzt können wir uns noch eine ganze Reihe an anderen Gütekriterien für den Vergleich von Modellen ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\nrpart_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary         0.818\n 2 kap                  binary         0.633\n 3 sens                 binary         0.772\n 4 spec                 binary         0.858\n 5 ppv                  binary         0.830\n 6 npv                  binary         0.808\n 7 mcc                  binary         0.634\n 8 j_index              binary         0.631\n 9 bal_accuracy         binary         0.815\n10 detection_prevalence binary         0.439\n11 precision            binary         0.830\n12 recall               binary         0.772\n13 f_meas               binary         0.8  \n\n\nWir besprechen hier nicht alle, du kannst dann gerne nochmal in dem Kapitel über die Modellvergleiche nachlesen, was die ganze Gütekriterien alles bedeuten. Wenn wir uns auf die Accuarcy konzentrieren, erhalten wir einen guten Wert von 83% richtig klassifizierter Geschlechter. Das ist für echte Daten ohne Tuning und Kreuzvaldierung schon ein echt guter Wert.\nNun schauen wir uns noch schnell die ROC Kurve an und sehen, dass die Kurve schon weit von der Diagonalen entfernt ist. Wir sehen eine gute ROC Kurve. Die AUC sollte auch recht groß sein.\n\n\nR Code [zeigen / verbergen]\nrpart_aug |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 78.5— ROC Kurve für den Entscheidungsbaum mit dem rpart Algorithmus.\n\n\n\n\n\nEs gibt viele Möglichkeiten sich einen Entscheidungsbaum anzuschauen. Wir nutzen hier das R Paket {rpart.plot} und die gleichnamige Funktion rpart.plot(). Die vielen Möglichkeiten der Darstellung und der Optionen findest in der Vignette Plotting rpart trees with the rpart.plot package.. Wir gehen hier einmal auf die Variante extra = 101 ein. Es gibt insgesamt elf verschiedene Arten plus eben noch die Möglichkeit 100 zu einer der elf genannten Varianten hinzufügen, um auch den Prozentsatz der Beobachtungen im Knoten anzuzeigen. Zum Beispiel zeigt extra = 101 die Anzahl und den Prozentsatz der Beobachtungen in dem Knoten an.\n\n\nR Code [zeigen / verbergen]\nrpart_fit |&gt;\n  extract_fit_engine() |&gt;\n  rpart.plot(roundint = FALSE, extra = 101)\n\n\n\n\n\n\n\n\nAbbildung 78.6— Visualisierung des finalen rpart Entscheidungsbaums.\n\n\n\n\n\nIn Abbildung 78.6 sehen wir den finalen Entscheidungsbaum. Wir sehen, dass wir nicht weiter als fünf Splits nach unten gewandert sind. Das hatten wir ja auch mit dem Parameter tree_depth so eingestellt. Jetzt sehen wir aber auch, dass wir mit dem Preprocessing auch eine Grube graben können. Wir haben in unserem ersten Knoten 189 Männer und 165 Frauen. Daher hat der Knoten nach Mehrheitsentscheidung den Status m. Jetzt spalten wir den Knoten nach der Körpergröße von \\(0.48\\) in zwei Gruppen. Was soll jetzt \\(0.48\\) heißen? Keine Ahnung. Wir haben die Daten normalisiert. Wenn du hier die Werte für die Splits interpretieren willst, dann musst du auf den Orginaldaten rechnen. Nach dem Split sehen wir zwei Knoten, in denen zum einen die Männer domiern und zum anderen die Frauen. Wir splitten wieder nach der Körpergröße und erhalten immer reinere Knoten in den fast nur noch Männer oder Frauen sind.\nSchaue dir auch die anderen Arten der Visualisierung in rpart.plot an und entscheide, ob dir die anderen Varianten bessere Informationen liefern, die zu deiner wissenschaftlichen Fragestellung passen.\nAn der Stelle trifft dann immer die Klassifikation auf die Interpretation. Du kannst nicht das Modell im Nachgang wieder entnormalisieren. Das geht nicht. Wenn du auf den Orginaldaten rechnest, dann wirst du ein anderes Modell erhalten. Das Modell mag besser oder schlechter sein, auf jeden Fall anders. Wie so oft hängt es von der wissenschaftlichen Fragestellung ab.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html#sec-rf",
    "href": "classification-randomforest.html#sec-rf",
    "title": "78  Decision trees",
    "section": "78.4 Random Forest mit ranger",
    "text": "78.4 Random Forest mit ranger\nBis jetzt haben wir einen Entscheidungsbaum wachsen lassen. Was wäre, wenn wir statt einen Baum mehrere Bäume wachsen lassen. Wir lassen einen ganzen Wald (eng. forest) entstehen. Nun macht es wenig Sinn, immer den gleichen Baum auf immer den selben Daten wachsen zu lassen. Daher wählen wir zufällig eine Anzahl an Zeilen und Spalten aus bevor wir einen Baum in unserem Wald wachsen lassen. Dabei bringen wir zwei den Zufall in die Generierung eines Baums mit ein.\n\nDurch die zufällige Auswahl der Beobachtungen mit Zurücklegen. Wir haben also einzelne Zeilen und damit Beobachtungen mehrfach in den Daten.\nDurch die zufällige Auswahl eines Sets an Variablen. Wir nutzen nicht immer alle Variablen in unserem Modell sondern nur ein Set an Spalten.\n\nIm maschinellen Lernen nennen wir diese Methode Bagging. Das Wort Bagging steht für bootstrap aggregating und ist eine Methode, um Vorhersagen aus verschiedenen Modellen zu kombinieren. In unserem Fall sind es die verschiedenen Entscheidungsböume. Dabei müssen alle Modelle mit dem gleichen Algorithmus laufen, können aber auf verschiedenen Datensätzen oder aber Variablensätzen zugreifen. Häufig haben die Modelle eine hohe Varianz in der Vorhersage und wir nutzen dann Bagging um die Modelle miteinander zu kombinieren und dadurch die Varianz zu verringern. Die Ergebnisse der Modelle werden dann im einfachsten Fall gemittelt. Das Ergebnis jeder Modellvorhersage geht mit gleichem Gewicht in die Vorhersage ein. Wir haben auch noch andere Möglichkeiten, aber du kannst dir Vorstellen wir rechnen verschiedene Modelle \\(j\\)-mal und bilden dann ein finales Modell in dem wir alle \\(j\\)-Modelle zusammenfassen. Wie wir die Zusammenfassung rechnen, ist dann immer wieder von Fall zu Fall unterschiedlich. Wir erhalten am Ende einen Ensemble Klassifizierer, da ja ein Ensemble von Modellen zusammengefasst wird. In dem Fall von den Entscheidungsbäumen ist das Ensemble ein Wald an Bäumen.\n\n\n\n\n\n\nParallele CPU Nutzung\n\n\n\n\n\nWenn wir wirklich viele Bäume wachsen lassen wollen, dann bietet sich die parallele Berechnung an. Das können wir über das R Paket {parallel} realisieren. Wir detektieren erstmal wie viele Kerne wir auf dem Rechner zu Verfügung haben.\n\n\nR Code [zeigen / verbergen]\ncores &lt;- parallel::detectCores()\ncores\n\n\n[1] 8\n\n\nWenn wir das gemacht haben, dann können wir in set_engine(\"ranger\", num.threads = cores) auswählen, dass die Berechnung parallel verlaufen soll. Besonders auf Großrechnern macht die parallele Berechnung am meisten Sinn.\n\n\n\nAuch hier ist es so, dass es verschiedene Algorithmen für den Random Forest gibt. Wir nehmen hier dann den ranger Algorithmus. Du kannst wie immer schauen, welche Algorithmen es noch gibt und auch wiederum verschiedene Algorithmen ausprobieren. In jedem Baum sollen drei Prädiktoren (mtry = 3) und einer Anzahl von mindestens zehn Beobachtungen je Knoten (min_n = 10) und wir wollen insgesamt eintausend Bäume wachsen lassen (trees = 1000). Darüber hinaus wollen wir uns auch die Variable Importance wiedergeben lassen. Die Variable Importance beschreibt, wie gut ein Prädiktor über alle Bäume des Waldes, in der Lage war Splits in möglichst reine Knoten durchzuführen. Ein Prädiktor mit einer hohen Variable Importance, ist also besonders geeignet für gute Splits mit hoher Reinheit.\n\n\nR Code [zeigen / verbergen]\nranger_mod &lt;- rand_forest(mtry = 3, min_n = 10, trees = 1000) |&gt; \n  set_engine(\"ranger\", importance = \"impurity\") |&gt; \n  set_mode(\"classification\")\n\n\nNun bauen wir uns wieder unseren Workflow indem wir das Modell mit dem Rezept für die Gummidatensatz verbinden. Das tolle ist jetzt, dass wir hier wieder des Rezept vom Anfang verwenden können. Wir müssen also nicht das Rezept neu definieren. Wir bauen uns also einfach nur einen neuen Workflow.\n\n\nR Code [zeigen / verbergen]\nranger_wflow &lt;- workflow() |&gt; \n  add_model(ranger_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nWenn wir den Workflow haben, dann können wir wieder mit der Funktion fit() unser Modell anpassen.\n\n\nR Code [zeigen / verbergen]\nranger_fit &lt;- ranger_wflow |&gt; \n  parsnip::fit(gummi_train_data)\n\n\nIn der Abbildung 78.7 sehen wir dann die Variable Importance sortiert für alle Prädiktoren. Ganz wichtig, die Variable Importance ist nicht numerisch zu interpretieren und auch nicht über verschiedene Datensäze hinweg. Wir können nur die Variable Importance von einem Datensatz anschauen und dort sehen welche Variablen den meisten Einfluss haben. Wir sehen also, dass die Körpergröße eine sehr große Wichtigkeit hat um die Männer von den Frauen in den Gummibärchendaten zu trennen. Das macht auch Sinn. Frauen und Männer sind nun mal unterschiedlich groß. Nicht mehr so wichtig ist das Alter und das Semester. Beide Prädiktoren haben einen ehr geringeren Einfluss auf die Aufteilung der beiden Geschlechter. Der Lieblingsgeschmack tut bei der Einteilung in Männer und Frauen nichts zur Sache.\n\n\nR Code [zeigen / verbergen]\nranger_fit |&gt; \n  extract_fit_parsnip() |&gt; \n  vip(num_features = 20) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nAbbildung 78.7— Visualisierung der Variable Importance aus unseren ranger Algorithmus.\n\n\n\n\n\nNach unserem kleinen Ausflug zu der Variable Importance können wir jetzt wieder unser Modell auf den Testdatensatz anwenden und schauen, wie gut der Random Forest unsere Geschlechter vorhersagen kann.\n\n\nR Code [zeigen / verbergen]\nranger_aug &lt;- augment(ranger_fit, gummi_test_data ) \n\n\nNun schauen wir uns an wie gut die Klassifizierung mit dem ranger Modell funktioniert hat. Als erstes bauen wir uns einmal die Konfusionsmatrix um zu sehen wie gut die beiden Geschlechter in dem Testdatensatz vorhergesagt wurden.\n\n\nR Code [zeigen / verbergen]\nranger_cm &lt;- ranger_aug |&gt; \n  conf_mat(gender, .pred_class)\n\nranger_cm\n\n\n          Truth\nPrediction  m  w\n         m 81 19\n         w 20 94\n\n\nJa, das sieht ähnlich gut aus wie der rpart Algorithmus. Wir haben eine gute Aufspaltung nach dem Geschlechtern. Viele der Beobachtungen liegen auf der Diagonalen und nur wenige Beobachtungen wurden falsch klassifiziert. Jetzt können wir uns noch eine ganze Reihe an anderen Gütekriterien für den Vergleich von Modellen ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\nranger_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary         0.818\n 2 kap                  binary         0.634\n 3 sens                 binary         0.802\n 4 spec                 binary         0.832\n 5 ppv                  binary         0.81 \n 6 npv                  binary         0.825\n 7 mcc                  binary         0.634\n 8 j_index              binary         0.634\n 9 bal_accuracy         binary         0.817\n10 detection_prevalence binary         0.467\n11 precision            binary         0.81 \n12 recall               binary         0.802\n13 f_meas               binary         0.806\n\n\nWir besprechen wie beim rpart Algorithmus nicht alle Kriterien, du kannst dann gerne nochmal in dem Kapitel über die Modellvergleiche nachlesen, was die ganze Gütekriterien alles bedeuten. Wenn wir uns auf die Accuarcy konzentrieren, erhalten wir einen guten Wert von 84% richtig klassifizierter Geschlechter. Das ist für echte Daten ohne Tuning und Kreuzvaldierung schon ein echt guter Wert.\nNun schauen wir uns noch schnell die ROC Kurve an und sehen, dass die Kurve schon weit von der Diagonalen entfernt ist. Wir sehen eine gute ROC Kurve. Die AUC sollte auch recht groß sein. Damit sind wir mit dem Random Forest Algorithmus soweit durch und wir schauen uns jetzt einen etwas komplexeren xgboost Algorithmus an.\n\n\nR Code [zeigen / verbergen]\nranger_aug |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 78.8— ROC Kurve für den Random Forest mit dem ranger Algorithmus.\n\n\n\n\n\n\n\n\n\n\n\nKann ich auch eine Kreuzvalidierung und Tuning für Random Forest durchführen?\n\n\n\nJa, kannst du. Wenn du nur eine Kreuzvalidierung durchführen willst, findest du alles im Kapitel 77 für den \\(k\\)-NN Algorithmus. Du musst dort nur den Workflow ändern und schon kannst du alles auch auf den Random Forest Algorithmus anwenden. Wir nutzen gleich die Kreuzvalidierung in Kombination mit dem Tuning vom xgboost Algorithmus.\nWenn du also den Random Forest Algorithmus auch tunen willst, dann schaue einfach weiter unten nochmal bei dem Tuning des xgboost Algorithmus rein. Es ändert sich kaum was für die Auwahl der Tuning Parameter vom Random Forest Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html#sec-xgboost",
    "href": "classification-randomforest.html#sec-xgboost",
    "title": "78  Decision trees",
    "section": "78.5 Gradient boosting mit xgboost",
    "text": "78.5 Gradient boosting mit xgboost\nAls letztes Beispiel für Entscheidungsbäume schauen wir uns das Boosting an. Auch hier haben wir es wieder mit einem Wald an Entscheidungsbäumen zu tun, die wir auch wieder zusammenfassen wollen. Wir verlassen uns also nicht auf die Klassifikation von einem Baum, sondern nehmen die Informationen von vielen Bäumen zusammen. Was ist jetzt der Unterschied zu einem Random Forest? Bei einem Random Forest bauen wir uns im Prinzip hunderte einzelne Bäume und trainieren darauf den Algorithmus. Am Ende fassen wir dann alle Bäume für die Vorhersage zusammen. Beim Boosting nutzen wir die Information des ersten Baumes für das Wachstum des zweiten Baumes und so weiter. Das Boosting verkettet also die Informationen der einzelnen Bäume zu einem kontinuierlichen Lernen. Daher sind Bossting Algorithmen meist sehr gute Klassifizierer.\nWir unterscheiden beim Boosting grob in zwei Kategorien. Zum einen gibt es das adaptive Boosting und das gradient Boosting. Beim adaptiven Boosting erhalten die Beobachtungen über die verschiedenen Klassifizierungsschritte unterschiedliche Gewichte für ihre Bedeutung. In Abbildung 78.9 sehen wir ein Beispiel für den adaboost Algorithmus. Wir haben einen ursprünglichen Datensatz mit blauen und roten Beobachtungen. Wir wollen nun diese Beobachtungen voneinander trennen und damit einen Klassifizierer bauen. Wir fangen mit einem simplen Entscheidungsbaum an, der nur einen Split durchführt. Jetzt haben wir zwei falsch klassifizierte blaue Beobachtungen und eine falsche rote Beobachtung. Nun erhöhen wir das Gewicht dieser drei Beobachtungen. Der nächste Klassifizierer soll nun insbesondere auf diese drei Beobachtungen achten. Wir erhalten daher einen anderen Split und damit zwei blaue Beobachtungen die nicht richtig klassifiziert wurden. Wir erhöhen wieder das Gewicht der beiden falsch klassifizierten blauen Beobachtungen. Der dritte Klassifizierer schafft es jetzt die beiden blauen Beobachtungen gut von den roten Beobachtungen zu trennen. Wir stoppen jetzt hier und bringen alle Klassifiziererregeln, also wo der Split liegen soll, in einen Klassifizierer zusammen.\n\n\n\n\n\n\nAbbildung 78.9— Darstellung von adaptive Boosting an drei Klassifizieren, die nacheinander auf die neu gewichteten Daten angewendet werden. Am Ende werden alle drei Klassifizierer dann in einen Klassifizierer kombiniert.\n\n\n\nIn der Abbildung 78.10 sehen wir die Idee des gradient Boosting einmal dargestellt. Die Idee ist recht simple. Wir wollen wieder nacheinander einen Klassifizierer auf schon klassifizierte Daten anwenden. Wir wollen also das unser zweiter Klassifizierer von dem ersten Klassifizier lernt. Wie machen wir das? Indem wir im ersten Schritt unsere Daten klassifizieren. Wir machen das mit einem Entscheidungsbaum, der mehrere Splits durchführt, die wir dann zu einer eckigen Graden zusammenfassen. Dann haben wir aber einen Fehler als Abstand zu den Splits oder eben zu der Graden. Diese Abstände übertragen wir dann in einen neuen Datensatz auf dem wir dann den nächsten Entscheidungsbaum wachsen lassen. Wir reduzieren also den Fehler des ersten Klassifizierers durch den zweiten Klassifizierer. Dann übertragen wir den Fehler des zweiten Klassifizierers in einen neuen Datensatz und lassen den dritten Klassifizierer den Fehler weiter reduzieren. Am Ende kombinieren wir alle drei Klassifizierer in ein Modell. Durch das gradient Boosting erhalten wir ziemlich gute Entscheidungsbäume, die in der Lage sind sehr schnell und effizient eine Vorhersage zu treffen.\n\n\n\n\n\n\nAbbildung 78.10— Darstellung von gradient Boosting an drei Klassifizieren, die nacheinander auf die Fehler des vorherigen Klassifizierers angewendet werden. Beachte die Nulllinie bei dem Klassifizierer zwei und drei.\n\n\n\nNach dieser theoretischen Einführung wollen wir uns einmal mit der Implementierung beschäftigen. Wir nutzen hier einmal die bekannten Parameter aus dem Random Forest Algorithmus um unseren xgboost Algorithmus zu trainieren. Wie wir gleich noch im Tuning sehen werden, hatr der xgboost Algorithmus noch mehr Parameter an denen du schrauben kannst. In jedem Baum sollen drei Prädiktoren (mtry = 3) und einer Anzahl von mindestens zehn Beobachtungen je Knoten (min_n = 10) und wir wollen insgesamt eintausend Bäume wachsen lassen (trees = 1000).\n\n\nR Code [zeigen / verbergen]\nxgboost_mod &lt;- boost_tree(mtry = 3, min_n = 10, trees = 1000) |&gt; \n  set_engine(\"xgboost\") |&gt; \n  set_mode(\"classification\")\n\n\nNun bauen wir uns wieder unseren Workflow indem wir das Modell mit dem Rezept für die Gummidatensatz verbinden. Das tolle ist jetzt, dass wir hier wieder des Rezept vom Anfang verwenden können. Wir müssen also nicht das Rezept neu definieren. Wir bauen uns also einfach nur einen neuen Workflow.\n\n\nR Code [zeigen / verbergen]\nxgboost_wflow &lt;- workflow() |&gt; \n  add_model(xgboost_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nWenn wir den Workflow haben, dann können wir wieder mit der Funktion fit() unser Modell anpassen. Es ist eine wahre Freude. Ich mache das ja jetzt auch schon hier eine Weile im Skript und es ist echt super, wie gut das funktioniert.\n\n\nR Code [zeigen / verbergen]\nxgboost_fit &lt;- xgboost_wflow |&gt; \n  parsnip::fit(gummi_train_data)\n\n\nWie auch beim Random Forest Algorithmus können wir uns beim xgboost Algorithmus die Variable Importance wiedergeben lassen. Die Wichtigkeit der Variablen wird in xgboost anhand von drei verschiedenen Wichtigkeiten für eine Variable berechnet. Hier unterscheidet sich dann der Algorithmus xgboost von dem Random Forest Algorithmen. Achtung, wir können nicht einfach die Variable Importance von einem Random Forest Algorithmus mit der eines xgboost Algorithmus vergleichen. Wir kriegen hier andere Werte zurück, die wir dann auch anders interpretieren können.\n\nGain ist der relative Beitrag der entsprechenden Variable zum entgültigen Modell. Wir addieren dafür den Beitrag der Variable für die Splits für jeden Baum auf. Eine höhere Punktzahl deutet darauf hin, dass die Variable für die Vorhersage des Baums wichtiger ist. Die Variable war in der Lage die Klassen gut voneinander zu trennen.\nCover ist die relative Beobachtung, die mit einem Prädiktor verbunden ist. Also der Anteil der Beobachtungen, die mit dieser Variable zusammenhängen. Nehmen wir an Merkmal \\(X_1\\) wird dazu verwendet, um einen Terminalknoten für 10 Beobachtungen in einem Baum zu erschaffen. Im in einem weiteren Baum ist es ein Terminalkonten mit 20 Beobachtungen. Damit haben wir 30 absolute Beobachtungen, die mit Merkmal \\(X_1\\) verbunden sind. Die relative Beobachtung ist dann 30 geteilt durch die Summe aller absoluten Beobachtungen für alle Merkmale.\nHäufigkeit bezieht sich auf die relative Häufigkeit, mit der eine Variable in den zusammengestellten Bäumen vorkommt. Nehmen wir an Merkmal \\(X_1\\) kommt in Baum A in einem Split und in Baum B in zwei Splits vor. Die absolute Häufigkeit von Merkmal \\(X_1\\) ist 3 und die relative Häufigkeit ist dann 3 durch die Summe aller absoluten Vorkommen für alle Merkmale.\n\nSchauen wir uns also einmal die Kriterien der Variable Importance für unsere Gummibärchendaten einmal an. Gehen wir mal die Parameter gain, cover und frequency einmal für unsere Körpergröße durch. Zuerst hat die Körpergröße den höchsten Wert in gain mit \\(0.84\\). Da wir das Gain auf 1 skaliert haben, macht die Körpergröße 84% des gesamten Gain in dem Modell aus. Daher wissen wir, dass die Körpergröße einen überaus bedeutenden Anteil an der Vorhersage des Geschlechts hat. Im Weiteren sehen wir an dem Parameter cover, dass in 34% der Beobachtungen ein Split mit der Körpergröße vorausgeht. Das heißt, 34% der Beobachtungen wurden anhand der Körpergröße aufgeteilt. Da wir nicht wissen wie viele Splits es ingesamt gab, muss man dieses Wert immer etwas vorsichtig bewerten. Die frequency teilt uns mit, dass in 33% der der Splits auch die Körpergröße vor kam. Wir sehen, die Körpergröße ist wichtig für die Vorhersage des Geschlechts. Wenn Variablen fehlen, dann haben diese keinen Einfluss auf die Klassifikation gehabt.\n\n\nR Code [zeigen / verbergen]\nxg_imp &lt;- xgboost_fit |&gt; \nextract_fit_parsnip() %$% \n  xgboost::xgb.importance(model = fit) |&gt; \n  mutate(across(where(is.numeric), round, 2))\n\nxg_imp\n\n\n              Feature  Gain Cover Frequency\n               &lt;char&gt; &lt;num&gt; &lt;num&gt;     &lt;num&gt;\n1:             height  0.82  0.34      0.35\n2:                age  0.09  0.29      0.30\n3:           semester  0.06  0.19      0.18\n4: most_liked_darkred  0.02  0.13      0.12\n5:   most_liked_green  0.01  0.05      0.04\n\n\nIn der Abbildung 78.11 sehen wir dann die Variable Importance sortiert für alle Prädiktoren und eingeteilt in Cluster. Die Funktion xgb.ggplot.importance() versucht ähnlich bedeutende Prädiktoren in gleiche Cluster zuzuordnen.\n\n\nR Code [zeigen / verbergen]\nxg_imp |&gt; \n  xgb.ggplot.importance() +\n  theme_minimal() +\n  scale_fill_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 78.11— Visualisierung der Variable Importance aus unseren xgboost Algorithmus. Wir sehen, dass sich grob drei Gruppen für Bedeutung der Variablen für die Klassifikation gebildet haben.\n\n\n\n\n\nNach unserem kleinen Ausflug zu der Variable Importance können wir jetzt wieder unser xgboost Modell auf den Testdatensatz anwenden und schauen, wie gut das gradient Boosting unsere Geschlechter vorhersagen kann.\n\n\nR Code [zeigen / verbergen]\nxgboost_aug &lt;- augment(xgboost_fit, gummi_test_data ) \n\n\nNun schauen wir uns an wie gut die Klassifizierung mit dem xgboost Modell funktioniert hat. Als erstes bauen wir uns einmal die Konfusionsmatrix um zu sehen wie gut die beiden Geschlechter in dem Testdatensatz vorhergesagt wurden.\n\n\nR Code [zeigen / verbergen]\nxgboost_cm &lt;- xgboost_aug |&gt; \n  conf_mat(gender, .pred_class)\n\nxgboost_cm\n\n\n          Truth\nPrediction  m  w\n         m 80 16\n         w 21 97\n\n\nJa, das sieht ähnlich gut aus wie der Random Forest Algorithmus. Wir haben eine gute Aufspaltung nach dem Geschlechtern. Viele der Beobachtungen liegen auf der Diagonalen und nur wenige Beobachtungen wurden falsch klassifiziert. Jetzt können wir uns noch eine ganze Reihe an anderen Gütekriterien für den Vergleich von Modellen ausgeben lassen.\n\n\nR Code [zeigen / verbergen]\nxgboost_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary         0.827\n 2 kap                  binary         0.652\n 3 sens                 binary         0.792\n 4 spec                 binary         0.858\n 5 ppv                  binary         0.833\n 6 npv                  binary         0.822\n 7 mcc                  binary         0.653\n 8 j_index              binary         0.650\n 9 bal_accuracy         binary         0.825\n10 detection_prevalence binary         0.449\n11 precision            binary         0.833\n12 recall               binary         0.792\n13 f_meas               binary         0.812\n\n\nWier vorher schon besprechen wir nicht alle Kriterien, du kannst dann gerne nochmal in dem Kapitel über die Modellvergleiche nachlesen, was die ganze Gütekriterien alles bedeuten. Wenn wir uns auf die Accuarcy konzentrieren, erhalten wir einen guten Wert von 86% richtig klassifizierter Geschlechter. Besonders die Sensitivität ist mit 92% sehr gut. Die Sensitivität gibt ja an, wie zuverlässig unser xgboost Algorithmus erkennt, ob man eine Frau ist. Die Spezifität ist etwas niedriger, also die Fähigkeit die Männer auch als Männer zu erkennen. Das ist für echte Daten ohne Tuning und Kreuzvaldierung schon ein echt sehr guter Wert. Da sind wir noch besser als beim Random Forest.\nNun schauen wir uns noch schnell die ROC Kurve an und sehen, dass die Kurve schon weit von der Diagonalen entfernt ist. Wir sehen eine gute ROC Kurve. Die AUC sollte auch recht groß sein. In den folgenden Schritten wollen wir einmal den xgboost Algorithmus tunen und schauen, ob wir noch bessere Ergebnisse für die Klassifikation mit anderen Parametern für den Algorithmus hin bekommen.\n\n\nR Code [zeigen / verbergen]\nxgboost_aug |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 78.12— ROC Kurve für den Entscheidungsbaum mit dem xgboost Algorithmus.\n\n\n\n\n\n\n\n\n\n\n\nKann ich auch eine Kreuzvalidierung für xgboost durchführen?\n\n\n\nJa, kannst du. Wenn du nur eine Kreuzvalidierung durchführen willst, findest du alles im Kapitel 77 für den \\(k\\)-NN Algorithmus. Du musst dort nur den Workflow ändern und schon kannst du alles auch auf den xgboost Algorithmus anwenden. Wir nutzen gleich die Kreuzvalidierung in Kombination mit dem Tuning vom xgboost Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-randomforest.html#tuning",
    "href": "classification-randomforest.html#tuning",
    "title": "78  Decision trees",
    "section": "78.6 Tuning",
    "text": "78.6 Tuning\nWas heißt Tuning? Wie bei einem Auto können wir an verschiedenen Stellschrauben bei einem mathematischen Algorithmus schrauben. Welche Schrauben und Teile das sind, hängt dann wieder vom Algorithmus ab. Im Falle des xgboost Algorithmus können wir an folgenden Parametern drehen und jeweils schauen, was dann mit unserer Vorhersage passiert. Insgesamt hat der xgboost Algorithmus acht Tuningparameter, wir wählen jetzt für uns hier drei aus. Ich nehme hier auch nur drei Parameter, da sich dann drei Parameter noch sehr gut visuell darstellen lassen. In der Anwendung wäre dann natürlich besser alle Parameter zu tunen, aber das dauert dann auch lange.\n\nmtry, zufällig ausgewählte Anzahl an Variablen für jeden Baum. Das heißt, für jeden Baum werden von unseren Variablen die Anzahl mtry zufällig ausgewählt und auf diesem kleineren Datensatz der Baum erstellt.\nmin_n, kleinste Knotengröße, die noch akzeptiert wird. Wenn ein Knoten unter min_n fällt, dann endet hier das Wachstum des Baumes.\ntrees, Anzahl der Bäume die in einem xgboost Algorithmus erstellt werden.\n\nNun ist es so, dass wir natürlich nicht händisch alle möglichen Kombinationen von der Anzahl der ausgewählten Variablen pro Baum, der kleinsten Knotengröße und der Anzahl der Bäume berechnen wollen. Das sind ziemlich viele Kombinationen und wir kommen dann vermutlich schnell durcheinander. Deshalb gibt es die Funktion tune() aus dem R Paket {tune}, die uns einen Prozess anbietet, das Tuning automatisiert durchzuführen.\nAls erstes müssen wir uns ein Objekt bauen, das aussieht wie ein ganz normales Modell in der Klassifikation. Aber wir ergänzen jetzt noch hinter jeder zu tunenden Option noch die Funktion tune(). Das sind die Parameter des Algorithmus, die wir später tunen wollen.\n\n\nR Code [zeigen / verbergen]\ntune_spec &lt;-  boost_tree(mtry = tune(), \n                         min_n = tune(), \n                         trees = tune()) |&gt; \n  set_engine(\"xgboost\") |&gt; \n  set_mode(\"classification\")\n\ntune_spec\n\n\nBoosted Tree Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = tune()\n  min_n = tune()\n\nComputational engine: xgboost \n\n\nJetzt bauen wir uns den Workflow indem wir statt unserem Modell, die Tuninganweisung in den Workflow reinnehmen. Echt simpel und straightforward. Das Rezept bleibt ja das Gleiche.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_wflow &lt;- workflow() |&gt; \n  add_model(tune_spec) |&gt; \n  add_recipe(gummi_rec)\n\n\nJetzt müssen wir noch alle Kombinationen aus den drei Parametern mtry, min_n und trees ermitteln. Das macht die Funktion grid_regular(). Es gibt da noch andere Funktionen in dem R Paket {tune}, aber ich konzentriere mich hier auf die einfachste. Jetzt müssen wir noch die Anzahl an Kombinationen festlegen. Ich möchte für jeden Parameter fünf Werte tunen. Daher nutze ich hier die Option levels = 5 auch damit hier die Ausführung nicht so lange läuft. Fange am besten mit levels = 5 an und schaue, wie lange das zusammen mit der Kreuzvalidierung dann dauert. Dann kannst du die Levels noch hochschrauben. Beachte aber, dass mehr Level nur mehr Zwischenschritte bedeutet. Jede Option hat eine Spannweite range, die du dann anpassen musst, wenn du höhere Werte haben willst. Mehr Level würden nur mehr Zwischenschritte bedeuten. In unserem Fall weiß zum Beispiel die Funktion mtry() nicht, wie viele Variablen in dem Datensatz sind. Wir müssen also die range für die Anzahl an ausgewählten Variablen selber setzen. Ich wähle daher eine Variable bis vier Variablen.\n\n\nR Code [zeigen / verbergen]\ngummi_grid &lt;- grid_regular(mtry(range = c(1, 4)),\n                           trees(),\n                           min_n(),\n                           levels = 5)\n\n\nDas Tuning nur auf dem Trainingsdatensatz durchzuführen ist nicht so eine gute Idee. Deshalb nutzen wir hier auch die Kreuzvalidierung. Eigentlich ist eine 10-fache Kreuzvalidierung mit \\(v=10\\) besser. Das dauert mir dann aber hier im Skript viel zu lange. Deshalb habe ich hier nur \\(v=5\\) gewählt. Wenn du das Tuning rechnest, nimmst du natürlich eine 10-fach Kreuzvalidierung.\n\n\nR Code [zeigen / verbergen]\ngummi_folds &lt;- vfold_cv(gummi_train_data, v = 5)\n\n\nNun bringen wir den Workflow zusammen mit dem Tuninggrid und unseren Sets der Kreuzvaidierung. Daher pipen wir den Workflow in die Funktion tune_grid(). Als Optionen brauchen wir die Kreuzvaldierungsdatensätze und das Tuninggrid. Wenn du control_grid(verbose = TRUE) wählst, dann erhälst du eine Ausgabe wie weit das Tuning gerade ist. Achtung!, das Tuning dauert seine Zeit. Im Falle des xgboost Algorithmus dauert das Tuning zwar nicht so lange, aber immer noch ein paar Minuten. Wenn du dann alle acht Parameter des xgboost Algorithmustunen wollen würdest, dann würde die Berechnung sehr viel länger dauern. Du kannst das Ergebnis des simpleren Tunings auch in der Datei gummi_xgboost_tune_res.rds finden.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res &lt;- gummi_tune_wflow |&gt; \n   tune_grid(resamples = gummi_folds,\n             grid = gummi_grid,\n             control = control_grid(verbose = FALSE))\n\n\nDamit du nicht das Tuning durchlaufen lassen musst, habe ich das Tuning in die Datei gummi_xgboost_tune_res.rds abgespeichert und du kannst dann über die Funktion read_rds() wieder einlesen. Dann kannst du den R Code hier wieder weiter ausführen.\nNachdem das Tuning durchgelaufen ist, können wir uns über die Funktion collect_metrics(), die Ergebnisse des Tunings für jede Kombination der drei Parameter mtry, min_n und trees wiedergeben lassen. Diese Ausgabe ist super unübersichtlich. Ich habe mich ja am Anfange des Abschnitts auch für drei Tuningparameter entschieden, da sich dann diese drei Parameter noch gut visualisieren lassen. Deshalb einmal die Abbildung der mittleren Accuarcy und der mittleren AUC-Werte über alle Kreuzvalidierungen.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res |&gt;\n  collect_metrics() |&gt;\n  mutate(trees = as_factor(trees),\n         min_n = as_factor(min_n)) |&gt;\n  ggplot(aes(mtry, mean, color = min_n, linetype = trees)) +\n  theme_minimal() +\n  geom_line(alpha = 0.6) +\n  geom_point() +\n  facet_wrap(~ .metric, scales = \"free\", nrow = 2) +\n  scale_x_log10(labels = scales::label_number()) +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 78.13— Tuning Kurven für den xgboost Algorithmus.\n\n\n\n\n\nDamit wir nicht händisch uns die beste Kombination raussuchen müssen, können wir die Funktion show_best() nutzen.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res |&gt;\n  show_best()\n\n\nWarning in show_best(gummi_tune_res): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 9\n   mtry trees min_n .metric .estimator  mean     n std_err .config              \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1     4   500    11 roc_auc binary     0.891     5 0.00637 Preprocessor1_Model0…\n2     2  2000    11 roc_auc binary     0.890     5 0.00963 Preprocessor1_Model0…\n3     4  1500    11 roc_auc binary     0.890     5 0.00626 Preprocessor1_Model0…\n4     4  1000    11 roc_auc binary     0.890     5 0.00631 Preprocessor1_Model0…\n5     2   500    11 roc_auc binary     0.890     5 0.00912 Preprocessor1_Model0…\n\n\nDas war die Funktion show_best() aber wir können uns auch die gleich die besten Parameter nach der Accuracy raus ziehen. Das Rausziehen der besten Parameter macht für uns die Funktion select_best().\n\n\nR Code [zeigen / verbergen]\nbest_xgboost &lt;- gummi_tune_res |&gt;\n  select_best()\n\n\nWarning in select_best(gummi_tune_res): No value of `metric` was given;\n\"roc_auc\" will be used.\n\n\nR Code [zeigen / verbergen]\nbest_xgboost\n\n\n# A tibble: 1 × 4\n   mtry trees min_n .config               \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;                 \n1     4   500    11 Preprocessor1_Model082\n\n\nWir sehen, dass wir mtry = 3 wählen sollten. Dann müssen wir als Anzahl der Bäume trees = 1000 nutzen. Die minimale Anzahl an Beobachtungen pro Knoten ist dann 11. Müssen wir jetzt die Zahlen wieder in ein Modell eingeben? Nein, müssen wir nicht. Mit der Funktion finalize_workflow() können wir dann die besten Parameter aus unserem Tuning gleich mit dem Workflow kombinieren. Dann haben wir unseren finalen, getunten Workflow. Du siehst dann auch in der Ausgabe, dass die neuen Parameter in dem xgboost Algorithmus übernommen wurden.\n\n\nR Code [zeigen / verbergen]\nfinal_gummi_wf &lt;- gummi_tune_wflow |&gt; \n  finalize_workflow(best_xgboost)\n\nfinal_gummi_wf \n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: boost_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n5 Recipe Steps\n\n• step_impute_mean()\n• step_impute_bag()\n• step_range()\n• step_dummy()\n• step_nzv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nBoosted Tree Model Specification (classification)\n\nMain Arguments:\n  mtry = 4\n  trees = 500\n  min_n = 11\n\nComputational engine: xgboost \n\n\nJetzt bleibt uns nur noch der letzte Fit übrig. Wir wollen unseren finalen, getunten Workflow auf die Testdaten anwenden. Dafür gibt es dann auch die passende Funktion. Das macht für uns die Funktion last_fit(), die sich dann die Informationen für die Trainings- und Testdaten aus unserem Datensplit von ganz am Anfang extrahiert.\n\n\nR Code [zeigen / verbergen]\nfinal_fit &lt;- final_gummi_wf |&gt;\n  last_fit(gummi_data_split) \n\n\nDa wir immer noch eine Kreuzvaldierung rechnen, müssen wir dann natürlich wieder alle Informationen über alle Kreuzvaldierungsdatensätze einsammeln. Dann erhalten wir unsere beiden Gütekriterien für die Klassifikation des Geschlechts unser Studierenden nach dem xgboost Algorithmus. Die Zahlen sind schon gut für echte Daten. Eine Accuracy von 84% bedeutet das wir über acht von zehn Studierenden richtig klassifizieren. Die AUC ist auch schon fast hervorragend, wir bringen kaum Label durcheinander.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_metrics()\n\n\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary         0.827 Preprocessor1_Model1\n2 roc_auc     binary         0.906 Preprocessor1_Model1\n3 brier_class binary         0.125 Preprocessor1_Model1\n\n\nDann bleibt uns nur noch die ROC Kurve zu visualisieren. Da wir wieder etwas faul sind, nutzen wir die Funktion autoplot(). Als Alternative geht natürlich auch das R Paket {pROC}, was eine Menge mehr Funktionen und Möglichkeiten bietet.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_predictions() |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 78.14— ROC Kurve für den Entscheidungsbaum mit dem xgboost Algorithmus nach der Kreuvalidierung und dem Tuning.\n\n\n\n\n\nEine gute ROC Kurve würde senkrecht nach oben gehen und dann waagrecht nach rechts. Dann hätten wir eine AUC von 1 und eine perfekte Separation der beiden Label durch unseren Algorithmus. Unser Algorithmus würde jedem weiblichen Studierenden in dem Testdatensatz korrekt dem Geschlecht w zuweisen. Da wir eine ROC Kurve hier vorliegen haben, die sehr weit weg von der Diagonalen ist, haben wir sehr viele richtig vorhergesagte Studierende in unseren Testdaten. Unser Modell funktioniert um das Geschlecht von Studierenden anhand unserer Gummibärchendaten vorherzusagen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>78</span>  <span class='chapter-title'>Decision trees</span>"
    ]
  },
  {
    "objectID": "classification-svm.html",
    "href": "classification-svm.html",
    "title": "79  Support vector machines",
    "section": "",
    "text": "79.1 Genutzte R Pakete\nLetzte Änderung am 23. March 2024 um 21:39:15\nWenn wir von Support Vector Machines (deu. Stützvektormethode, abk. SVM) schreiben, dann schreiben wir auch von einem heutzutage eher selteneren genutzten Algorithmus. Das hat weniger mit den Fähigkeiten des Algorithmus zu tun, als mit der Entscheidung, welche Art von SVM Algorithmus wir nutzen wollen. Daher gibt es wie immer sehr viel theoretische Literatur, aber sehr wenig praktische Anwendung. Der SVM Algorithmus liefert zwar eine Vorhersage, kann aber nicht mit einer Variablen Importance aufwarten. Auch kann der SVM nicht einen Cluster bilden. Am Ende ist der SVM Algorithmus also nur eine Möglichkeit eine gute Vorhersage zu machen. Eigentlich das was wir wollen, aber andere Algorithmen können dann immer noch einen Tick mehr.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, \n               janitor, see, conflicted)\nconflicts_prefer(magrittr::set_names)\n##\nset.seed(2025429)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>79</span>  <span class='chapter-title'>Support vector machines</span>"
    ]
  },
  {
    "objectID": "classification-svm.html#daten",
    "href": "classification-svm.html#daten",
    "title": "79  Support vector machines",
    "section": "79.2 Daten",
    "text": "79.2 Daten\nIn diesem Kapitel wollen wir uns auch auf einen echten Datensatz konzentrieren. Wir nutzen daher einmal den Gummibärchendatensatz. Als unser Label und daher als unser Outcome nehmen wir das Geschlecht gender. Dabei wollen wir dann die weiblichen Studierenden vorhersagen. Im Weiteren nehmen wir nur die Spalte Geschlecht sowie als Prädiktoren die Spalten most_liked, age, semester, und height.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\") |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked)) |&gt; \n  select(gender, most_liked, age, semester, height) |&gt; \n  drop_na(gender)\n\n\nWir dürfen keine fehlenden Werte in den Daten haben. Wir können für die Prädiktoren später die fehlenden Werte imputieren. Aber wir können keine Labels imputieren. Daher entfernen wir alle Beobachtungen, die ein NA in der Variable gender haben. Wir haben dann insgesamt \\(n = 854\\) Beobachtungen vorliegen. In Tabelle 75.5 sehen wir nochmal die Auswahl des Datensatzes in gekürzter Form.\n\n\n\n\nTabelle 79.1— Auszug aus dem Daten zu den Gummibärchendaten.\n\n\n\n\n\n\ngender\nmost_liked\nage\nsemester\nheight\n\n\n\n\nm\nlightred\n35\n10\n193\n\n\nw\nyellow\n21\n6\n159\n\n\nw\nwhite\n21\n6\n159\n\n\nw\nwhite\n36\n10\n180\n\n\nm\nwhite\n22\n3\n180\n\n\nm\ngreen\n22\n3\n180\n\n\n…\n…\n…\n…\n…\n\n\nm\ndarkred\n23\n2\n196\n\n\nw\nyellow\n24\n2\n168\n\n\nm\ngreen\n24\n8\n178\n\n\nw\nlightred\n23\n8\n180\n\n\nm\ndarkred\n25\n2\n202\n\n\nw\ndarkred\n23\n2\n172\n\n\n\n\n\n\n\n\nUnsere Fragestellung ist damit, können wir anhand unserer Prädiktoren männliche von weiblichen Studierenden unterscheiden und damit auch klassifizieren? Um die Klassifikation mit Entscheidungsbäumen rechnen zu können brauchen wir wie bei allen anderen Algorithmen auch einen Trainings- und Testdatensatz. Wir splitten dafür unsere Daten in einer 3 zu 4 Verhältnis in einen Traingsdatensatz sowie einen Testdatensatz auf.\nIm maschinellen Lernen sind alle Datensätze, die weniger als tausend Beobachtungen vorliegen haben, klein.\n\n\nR Code [zeigen / verbergen]\ngummi_data_split &lt;- initial_split(gummi_tbl, prop = 3/4)\n\n\nWir speichern uns jetzt den Trainings- und Testdatensatz jeweils separat ab. Die weiteren Modellschritte laufen alle auf dem Traingsdatensatz, wie nutzen dann erst ganz zum Schluß einmal den Testdatensatz um zu schauen, wie gut unsere trainiertes Modell auf den neuen Testdaten funktioniert.\n\n\nR Code [zeigen / verbergen]\ngummi_train_data &lt;- training(gummi_data_split)\ngummi_test_data  &lt;- testing(gummi_data_split)\n\n\nNachdem wir die Daten vorbereitet haben, müssen wir noch das Rezept mit den Vorverabreitungsschritten definieren. Wir schreiben, dass wir das Geschlecht gender als unser Label haben wollen. Daneben nehmen wir alle anderen Spalten als Prädiktoren mit in unser Modell, das machen wir dann mit dem . Symbol. Da wir noch fehlende Werte in unseren Prädiktoren haben, imputieren wir noch die numerischen Variablen mit der Mittelwertsimputation und die nominalen fehlenden Werte mit Entscheidungsbäumen. Dann müssen wir noch alle numerischen Variablen normalisieren und alle nominalen Variablen dummykodieren. Am Ende werde ich nochmal alle Variablen entfernen, sollte die Varianz in einer Variable nahe der Null sein.\n\n\nR Code [zeigen / verbergen]\ngummi_rec &lt;- recipe(gender ~ ., data = gummi_train_data) |&gt; \n  step_impute_mean(all_numeric_predictors()) |&gt; \n  step_impute_bag(all_nominal_predictors()) |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_nzv(all_predictors())\n\ngummi_rec\n\n\n\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n\n\n\n── Inputs \n\n\nNumber of variables by role\n\n\noutcome:   1\npredictor: 4\n\n\n\n\n\n── Operations \n\n\n• Mean imputation for: all_numeric_predictors()\n\n\n• Bagged tree imputation for: all_nominal_predictors()\n\n\n• Range scaling to [0,1] for: all_numeric_predictors()\n\n\n• Dummy variables from: all_nominal_predictors()\n\n\n• Sparse, unbalanced variable filter on: all_predictors()\n\n\nAlles in allem haben wir ein sehr kleines Modell. Wir haben ja nur ein Outcome und vier Prädiktoren.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>79</span>  <span class='chapter-title'>Support vector machines</span>"
    ]
  },
  {
    "objectID": "classification-svm.html#theoretischer-hintergrund",
    "href": "classification-svm.html#theoretischer-hintergrund",
    "title": "79  Support vector machines",
    "section": "79.3 Theoretischer Hintergrund",
    "text": "79.3 Theoretischer Hintergrund\nDer theoretische Hintergrund zu dem SVM Algorithmus ist sehr mathematisch. So mathematisch, dass wir hier daraus keinen tieferen Nutzen mehr ziehen. Hier geht es ja um die Anwendung des SVM Algorithmus und nicht um das tiefere mathematische Verständnis. Wie immer gibt es sehr viele Möglichkeiten sich tiefer mit der Mathematik hinter dem SVM Algorithmus zu beschäftigen. Hier wollen wir das nicht.\n\n\nEs gibt wir immer ein schönes (mathematisches) Tutorial zu den Support vector machines. Von dort ist auch das Beispiel mit den farbigen Kugeln entnommen.\nDaher wollen wir mal den SVM Algorithmus etwas anders verstehen. Wir nutzen wieder die Idee, dass wir farbige Punkte oder Bälle voneinander trennen wollen. Im Prinzip kannst du dir die Bälle in der Abbildung 79.1 genau so vorstellen. Wir haben dort sieben gesunde Personen als blaue Kugeln und vier kranke Personen als rote Kugeln, die wir trennen wollen.\n\n\n\n\n\n\nAbbildung 79.1— Darstellung von 11 Beobachtungen aus dem Traingsdatensatz. Die blauen Kugeln stellen die Personen und die rote die kranken Personen dar.\n\n\n\nIn Abbildung 79.2 zeichnen wir eine Gerade, die die Patienten gut voneinander trennt. Auf der einen Seite der Geraden sind die sieben gesunden Patienten und auf der anderen Seite der Geraden die vier kranken Personen.\n\n\n\n\n\n\nAbbildung 79.2— Darstellung von 11 Beobachtungen aus dem Traingsdatensatz. Wir trennen die gesunden Patienten von den kranken Patienten mit einer Geraden.\n\n\n\nNun kommt zu unserem Trainingsdatensatz ein Schwall neuer Patienten hinzu und wir ergänzen die Beobachtungen in der Abbildung 79.3. Wir haben immer noch unsere ursprüngliche Gerade, aber diese Gerade trennt die neuen Beobachtungen nicht mehr gut auf. Ein kranker Patient ist auf der falschen Seite der Geraden. Es gibt wahrscheinlich einen besseren Platz, um die Gerade jetzt zu platzieren.\n\n\n\n\n\n\nAbbildung 79.3— Darstellung von elf gesunden Beobachtungen und acht kranken Beobachtungen aus dem neuen, angewachsenen Traingsdatensatz. Die Gerade trennt die Beobachtugen nur noch ungünstig.\n\n\n\nIn der Abbildung 79.4 sehen wir die Vorgegehensweise des SVM Algorithmus. Der SVM Algorithmus versucht die Gerade an der bestmöglichen Stelle zu platzieren, indem der Algorithmus auf beiden Seiten der Geraden einen möglichst großen Abstand einhalten.\n\n\n\n\n\n\nAbbildung 79.4— Visualisierung des SVM Algorithmus an den ursprünglichen elf Beobachtungen.\n\n\n\nWenn wir jetzt in der Abbildung 79.5 wieder zu unserem angewachsenen Trainingsdaten zurückkehren, sehen wir, dass unsere Klassifikation der gesunden und kranken Beobachtungen gut funktioniert. Der SVM Algorithmus hat durch den optimierten Abstand der Geraden einen optimalen Klassifikator gefunden.\n\n\n\n\n\n\nAbbildung 79.5— Darstellung von elf gesunden Beobachtungen und acht kranken Beobachtungen aus dem neuen, angewachsenen Traingsdatensatz mit der SVM optimierten Geraden.\n\n\n\nNun gibt es aber neben der Geraden noch einen anderen Trick, den wir mit dem SVM Algorithmus durchführen können. Schauen wir uns dazu einmal die Abbildung 79.6 an. Wir sehen in dem neuen Trainingsdatensatz fünf gesunde und fünf kranke Beobachtungen. nur sind diese Beobachtungen nicht mehr so verteilt, dass wir die Beobachtungen mit einer Geraden trennen könnten. Hier kommt jetzt der Kerneltrick des SVM Algorithmus zu tragen.\n\n\n\n\n\n\nAbbildung 79.6— Darstellung von zehn Beobachtungen aus einem weiteren Traingsdatensatz. Die blauen Kugeln stellen die fünf gesunden Personen und die rote die fünf kranken Personen dar.\n\n\n\nWir können mit keiner Geraden der Welt die Punkte voneinander trennen. Jetzt nutzen wir den Kerneltrick in Abbildung 79.7 um unsere 2-D Abbildung in eine 3-D Abbildung umzuwandeln. Jetzt können wir mit einer Ebene die Patienten voneinander trennen. Wir bringen also unsere Beobachtungen durch eine Transformation in eine andere Dimension und können in dieser Dimension die Beobachtungen mit einer Ebene trennen.\n\n\n\n\n\n\nAbbildung 79.7— Umwandlung des Input Space in einen beliebigen Feature Space durch den Kernel \\(\\Phi\\).\n\n\n\nWenn wir dann die Ebene wieder zurücktransfomieren erhalten wir eine kurvige Linie, die unsere Beobachtungen in Abbildung 79.8 voneinander trennt.\n\n\n\n\n\n\nAbbildung 79.8— Rücktransformation der Ebene aus dem Feature Space in den Input Space. Wir haben dann eine Schlangenlinie, die die Beobachtungen voneinander trennt.\n\n\n\nDas war jetzt eine sehr bildliche Darstellung des SVM Algorithmus. Aber im Prinzip ist das die Idee. Wir machen den Kernel Trick nur matematisch komplizierter und auch die Rücktransformation ist nicht simpel. Das müssen wir aber auch nicht selber für uns machen, denn dafür haben wir ja einen Computer. Das eigentliche Problem ist die Wahl des korrekten Kernels. Und das ist eigentlich auch die Qual der Wahl. Wir müssen vorab festlegen, welcher Kernel es sein soll. Und da geht dann das Tuning los.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>79</span>  <span class='chapter-title'>Support vector machines</span>"
    ]
  },
  {
    "objectID": "classification-svm.html#svm-algorithm",
    "href": "classification-svm.html#svm-algorithm",
    "title": "79  Support vector machines",
    "section": "79.4 SVM Algorithm",
    "text": "79.4 SVM Algorithm\nLeider ist es nicht so, dass wir eine SVM Funktion haben. Wir haben insgesamt drei Funktionen. Jede dieser Funktionen entspricht einem Kernel und muss getrennt voneinander einem Tuning unterzogen werden. Wir haben folgende Funktionen mit den entsprechenden Kernels zu Verfügung.\n\nsvm_linear heißt, wir nehmen einen linearen Zusammenhang an. Wir können die Beobachtungen mit einer einfachen Gerade voneinander trennen.\nsvm_poly heißt, wir nehmen ein Polynom eines bestimmten Gerades und glauben, dass wir mit diesem Kernel die Beobachtungen voneinander trennen können.\nsvm_rbf_mod heißt, wir haben einen radialen Kernel und hoffen, dass wir mit einer radialen Funktion die Beobachtungen trennen können.\n\nUnd damit geht das Leid eigentlich schon los. Wir können gar nicht wissen, welcher der drei SVM Algorithmen am besten auf unsere Daten passt. Also müssen wir alle drei einemal anwenden. Dann müssten wir eigentlich auch alle drei Algorithmen einem Tuning unterziehen. Du siehst, es wird viel Arbeit. Wir lassen hier das Tuning weg und ich zeige dir, wie du mit der Funktion map() dir etwas Arbeit ersparen kannst.\nAls erstes wollen wir den linearen Kernel einmal definieren. Wir haben hier zwei Parameter die wir einem Tuning unterziehen könnten.\n\n\nR Code [zeigen / verbergen]\nsvm_lin_mod &lt;- svm_linear(cost = 1, margin = 0.1) |&gt; \n  set_engine(\"kernlab\") |&gt; \n  set_mode(\"classification\") \n\n\nAls zweites schauen wir uns den polynominale Kernel an und setzen einmal den Grade des Polynomes auf drei. Einfach mal so aus dem Bauch raus um zu zeigen, was dann so passieren kann.\n\n\nR Code [zeigen / verbergen]\nsvm_poly_mod &lt;- svm_poly(cost = 1, margin = 0.1, degree = 3) |&gt; \n  set_engine(\"kernlab\") |&gt; \n  set_mode(\"classification\") \n\n\nAls letztes schauen wir uns noch den radialen Kernel einmal an. Auch hier haben wir nur zwei Tuningparameter zu Verfügung.\n\n\nR Code [zeigen / verbergen]\nsvm_rbf_mod &lt;- svm_rbf(cost = 1, margin = 0.1) |&gt; \n  set_engine(\"kernlab\") |&gt; \n  set_mode(\"classification\") \n\n\nJetzt machen wir alles in einem Schritt. Was wir vorher in mehreren Schritten gemaht haben, machen wir jetzt auf einer Liste lst() in der die Modelle der drei Kernel definiert sind. Wir nutzen die Funktion map() um auf dieser Liste die Workflows mit dem Rezept der Gummibärchen zu initialisieren. Dann Pipen wir die Workflows weiter in die fit() Funktion und wollen dann danach auch gleich die Vorhersage auf dem Testdatensatz rechnen. Danach wählen wir dann auf allen Listen noch gender und die Vorhersagen als die pred-Spalten aus.\n\n\nR Code [zeigen / verbergen]\nsvm_aug_lst &lt;- lst(svm_lin_mod,\n                   svm_poly_mod,\n                   svm_rbf_mod) |&gt; \n  map(~workflow(gummi_rec, .x)) |&gt; \n  map(~fit(.x, gummi_train_data)) |&gt; \n  map(~augment(.x, gummi_test_data)) |&gt; \n  map(~select(.x, gender, matches(\"pred\")))\n\n\n Setting default kernel parameters  \n\n\nR Code [zeigen / verbergen]\nsvm_aug_lst\n\n\n$svm_lin_mod\n# A tibble: 214 × 4\n   gender .pred_class .pred_m .pred_w\n   &lt;fct&gt;  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 m      m            0.989   0.0105\n 2 w      w            0.0347  0.965 \n 3 m      w            0.162   0.838 \n 4 m      m            0.811   0.189 \n 5 w      w            0.0659  0.934 \n 6 m      m            0.818   0.182 \n 7 m      m            0.781   0.219 \n 8 w      w            0.0350  0.965 \n 9 m      m            0.675   0.325 \n10 m      w            0.374   0.626 \n# ℹ 204 more rows\n\n$svm_poly_mod\n# A tibble: 214 × 4\n   gender .pred_class .pred_m .pred_w\n   &lt;fct&gt;  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 m      m             0.993 0.00667\n 2 w      w             0.462 0.538  \n 3 m      w             0.474 0.526  \n 4 m      m             0.645 0.355  \n 5 w      w             0.362 0.638  \n 6 m      m             0.665 0.335  \n 7 m      m             0.567 0.433  \n 8 w      w             0.467 0.533  \n 9 m      m             0.592 0.408  \n10 m      w             0.486 0.514  \n# ℹ 204 more rows\n\n$svm_rbf_mod\n# A tibble: 214 × 4\n   gender .pred_class .pred_m .pred_w\n   &lt;fct&gt;  &lt;fct&gt;         &lt;dbl&gt;   &lt;dbl&gt;\n 1 m      m            0.776   0.224 \n 2 w      w            0.0367  0.963 \n 3 m      w            0.117   0.883 \n 4 m      m            0.937   0.0631\n 5 w      w            0.0466  0.953 \n 6 m      m            0.907   0.0927\n 7 m      m            0.847   0.153 \n 8 w      w            0.0451  0.955 \n 9 m      m            0.756   0.244 \n10 m      w            0.311   0.689 \n# ℹ 204 more rows\n\n\nJetzt haben wir also alles als eine Liste vorliegen. Das macht uns dann die weitere Darstellung einfach. Wenn du einen Listeneintrag haben willst, dann kannst du auch mit der Funktion pluck() dir einen Eintrag nach dem Namen herausziehen. Wenn du den Listeneintrag $svm_rbf_mod willst, dann nutze pluck(svn_aug_lst, \"svm_rbf_mod\").\n\n\n\n\n\n\nKann ich auch eine Kreuzvalidierung und Tuning für die Support Vector Machines durchführen?\n\n\n\nJa, kannst du. Wenn du nur eine Kreuzvalidierung durchführen willst, findest du alles im Kapitel 77 für den \\(k\\)-NN Algorithmus. Du musst dort nur den Workflow ändern und schon kannst du alles auch auf den Support Vector Machine Algorithmus anwenden. Wenn du den Support Vector Machine Algorithmus auch tunen willst, dann schaue einfach nochmal im Kapitel 78.5 zum Tuning von xgboost rein.\n\n\nJetzt lassen wir uns auf der Liste der Vorhersagen nochmal für alle Kernel der SVM Algorithmen die Konfusionsmatrizen ausgeben.\n\n\nR Code [zeigen / verbergen]\nsvm_cm &lt;- svm_aug_lst |&gt;\n  map(~conf_mat(.x, gender, .pred_class))\nsvm_cm\n\n\n$svm_lin_mod\n          Truth\nPrediction  m  w\n         m 83 14\n         w 18 99\n\n$svm_poly_mod\n          Truth\nPrediction  m  w\n         m 87 32\n         w 14 81\n\n$svm_rbf_mod\n          Truth\nPrediction  m  w\n         m 84 23\n         w 17 90\n\n\nDas sieht doch recht gut aus. Nur unser Polynomerkernel hat anscheinend Probleme die Geschlechter gut voneinander aufzutrennen. Du siehst, hier muss eben auch ein Tuning her. Selber den Grad des Polynoms zu treffen das passt ist sehr schwer oder eigentlich nur mit Glück hinzukriegen.\nIm folgenden Schritt müssen wir uns etwas strecken. Ich will nämlich die summary() Funktion auf die Konfusionsmatrizen anwenden und dann die drei Ausgaben in einem Datensatz zusammenführen. Wir haben dann die Metriknamen als eine Spalte und dann die drei Spalten für die Zahlenwerte der drei Methoden.\n\n\nR Code [zeigen / verbergen]\nsvm_cm |&gt; \n  map(summary)  |&gt; \n  map(~select(.x, .metric, .estimate)) |&gt; \n  reduce(left_join, by = \".metric\") |&gt; \n  set_names(c(\"metric\", \"linear\", \"poly\", \"radial\")) |&gt; \n  mutate(across(where(is.numeric), round, 3))\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(where(is.numeric), round, 3)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n# A tibble: 13 × 4\n   metric               linear  poly radial\n   &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 accuracy              0.85  0.785  0.813\n 2 kap                   0.699 0.573  0.626\n 3 sens                  0.822 0.861  0.832\n 4 spec                  0.876 0.717  0.796\n 5 ppv                   0.856 0.731  0.785\n 6 npv                   0.846 0.853  0.841\n 7 mcc                   0.7   0.581  0.627\n 8 j_index               0.698 0.578  0.628\n 9 bal_accuracy          0.849 0.789  0.814\n10 detection_prevalence  0.453 0.556  0.5  \n11 precision             0.856 0.731  0.785\n12 recall                0.822 0.861  0.832\n13 f_meas                0.838 0.791  0.808\n\n\nWenn wir wieder auf unsere Accuracy als unser primäres Gütemaß schauen, dann sehen wir, dass wir hier ohne Tuning mit dem linearen Kernel am besten fahren würden. Auch sind die anderen Werte meistens für den linearen Kernel am besten. Daher würde ich mich hier für den linearen Kernel entscheiden. Die Frage wäre natürlich, ob die anderen Kernel mit einem Tuning nicht besser wären. Aber diese Frage lassen wir mal offen im Raum stehen.\nSchauen wir uns in einem letzten Schritt noch die ROC Kurven für die drei Kernels an. Dafür müssen wir einen Datensatz aus der Liste bilden nachdem wir die Sensitivität und Spezifität für die drei Kernels in der Listenform berechnet haben. Wir können dafür die Funktion bind_rows() nutzen.\n\n\nR Code [zeigen / verbergen]\nroc_tbl &lt;- svm_aug_lst |&gt; \n  map(~roc_curve(.x, gender, .pred_w, event_level = \"second\")) |&gt; \n  bind_rows(.id = \"model\")\n\n\nIn Abbildung 79.9 sehen wir die drei ROC Kurven für die drei Kernels. Wie zu erwarten war, ist der lineare Kernel der beste Kernel. Das hatten wir ja schon oben in der Zusammenfassung der Konfusionsmatrix gesehen. Auch hier zeigt sich sehr schön, wie schlecht dann unser polynominaler Kernel ist. Das war jetzt hier zur Demonstration, aber dennoch zeigt es wie wichtig ein gutes Tuning ist.\n\n\nR Code [zeigen / verbergen]\nroc_tbl |&gt; \n  ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) + \n  theme_minimal() +\n  geom_path() +\n  geom_abline(lty = 3) + \n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 79.9— Darstellung der Vorhersagegüte der drei Modelle linear, polynomial und radial.\n\n\n\n\n\nDamit wären wir auch schon am Ende des Kapitels über den SVM Algorithmus. Wie du schon merkst, müssen wir viel rechnen, wenn wir mit den SVM Kerneln was Vorhersagen wollen. Wenn wir den richtigen Kernel gefunden haben, dann können wir auch eine gute Vorhersage erreichen. Nun müssen auch diesen Kernel erstmal algorithmisch finden, dass heißt also viele Kernels ausprobieren. Und am Ende ist natürlich die Implementierung hier im genutzten R Paket {parsnip} nicht die Weisheit letzter Schluss. Es gibt noch sehr viel mehr R Pakete, die sich mit SVM Algorithmen beschäftigen. Aber das wäre dann eine Literatursuche für dich. Vorerst endet das Kapitel jetzt hier.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>79</span>  <span class='chapter-title'>Support vector machines</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html",
    "href": "classification-neural-networks.html",
    "title": "80  Neural networks",
    "section": "",
    "text": "80.1 Genutzte R Pakete\nLetzte Änderung am 20. May 2024 um 07:56:30\nSo, das war ein ganz schönes Brett, TensorFlow bzw. Keras auf dem Rechner zu installieren. Es gibt zwar einen Quick start um Tensorflow zu installieren aber dann hatte ich das schöne Problem der GPU auf dem macOS mit M1 Chip. Die Lösung für die Local GPU hat mich auf dem macOS einen Tag Nerven gekostet. Das mag dann auf einem Windows Rechner anders sein bzw. andere Probleme verursachen. Schlussendlich ist die Nutzung von neural networks auf keinen Laptops vielleicht auch nicht so die beste Idee. Wir würden die Algorithmen eher auf Hochleistungsrechner durchführen und dann vermutlich eine Linuxdistribution verwenden. Dennoch werde ich hier einmal Tensorflow in R vorstellen. Die Pakete für die Integration von dem eigenständigen Algorithmus Tensorflow gibt es und wenn es dann mal installiert ist, funktioniert auch alles super. Da Tensorflow in Phyton programmiert ist, muss auch Phyton auf dem Rechner installiert sein. Du siehst also, es ist einiges einzurichten, damit wir Deep learning betreiben können. Hier möchte ich dann auch gerne auf Mueller & Massaron (2019) verweisen, der zu dem Thema Deep learning einen guten Einstieg liefert. Denn wir machen hier eigentlich kein Deep learning, denn unsere neuronalen Netzwerke werden nicht viele Schichten haben, dass würde hier mein kleiner Rechner auch gar nicht schaffen.\nNeben TensorFlow / Keras zeige ich auch nochmal die Anwendung der etwas veralteten R Pakete {neuralnet} und {nnet}. Wie immer musst du selber entscheiden, was du brauchst. Der Vorteil des Paketes {nnet} ist, dass wir das Paket zum einen mit Rezepten und Tuning gut nutzen können. Zum anderen brauchen wir aber nicht diesen Installationsmarathon wie bei TensorFlow / Keras. Ich präsnetiere hier einfach die Auswahl und du schaust dann was passt.\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, tidymodels, magrittr, \n               janitor, keras, tensorflow, see,\n               neuralnet, NeuralNetTools,\n               OneR, readxl, \n               conflicted)\n##\nset.seed(2025429)\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronale-netzwerke-theoretisch",
    "href": "classification-neural-networks.html#neuronale-netzwerke-theoretisch",
    "title": "80  Neural networks",
    "section": "80.2 Neuronale Netzwerke theoretisch",
    "text": "80.2 Neuronale Netzwerke theoretisch\nNeuronale Netze ordnen Inputs den Outputs zu. Wir haben also Eingaben und erhalten eine Ausgabe zurück. Neuronale Netze finden Korrelationen. Neuronale Netzwerke sin auch als “universeller Approximator” bekannt, weil dad Netzwerk lernen kann, eine unbekannte Funktion \\(f(x) = y\\) zwischen einer beliebigen Eingabe \\(x\\) und einer beliebigen Ausgabe \\(y\\) zu approximieren. Dabei gilt die Vorraussetzung, dass \\(x\\) und \\(y\\) in einem Zusammenhang durch Korrelation oder Kausalität stehen. Während des Lernprozesses findet ein neuronales Netz das richtige \\(f()\\) oder die richtige Art der Umwandlung von \\(x\\) in \\(y\\), sei es \\(f(x) = 3x + 12\\) oder \\(g(f(x)) = 9x - 0.1\\). Wie du sehen kannst, gibt es auch bei dem neuralen Netzwerk eigentlich um ein Modell. Und unser Modell ist nicht anders, als eine multiple lineare Regresion in der klassischen Statistik.\nDeep Learning ist der Name, den wir für gestapelte neuronale Netze verwenden und damit meinen wir Netze, die aus mehreren Schichten bestehen. Die einzelnen Schichten bestehen aus Knotenpunkten. Ein Knoten ist einfach ein Ort, an dem Berechnungen stattfinden, frei nach dem Vorbild eines Neurons im menschlichen Gehirn, das feuert, wenn es auf ausreichende Reize trifft. Ein Knoten kombiniert Eingaben aus den Daten mit einer Reihe von Koeffizienten oder Gewichten, die diese Eingaben entweder verstärken oder abschwächen. Somit geben dann die Knoten den Eingaben eine Bedeutung im Hinblick auf die Aufgabe die der Algorithmus zu lernen versucht. Häufig ist dies die Aufgabe die Eingabe zu finden die am hilfreichsten die Daten fehlerfrei klassifiziert? Diese Eingangsgewichtungen werden summiert, und die Summe wird dann durch die so genannte Aktivierungsfunktion eines Knotens geleitet, um zu bestimmen, ob und in welchem Ausmaß dieses Signal weiter durch das Netzwerk geleitet werden soll. Am Ende kann nur ein weitergeleitetes Signal das Endergebnis als einen Klassifizierungsvorgang beeinflussen. Wenn das Signal durch das Neuron durchläuft, ist dieses Neuron “aktiviert” worden.\nIn Abbildung 80.5 ist ein Diagramm dargestellt, dass einen Knoten darstellt. Wir haben immer ein Inputlayer in dem wir hier drei Inputneuronen \\(x_1\\), \\(x_2\\) und \\(x_3\\) finden. Das sind auch unsere Variablen in den Daten, die wir in das Modell stecken. Ganz oben finden wir noch als blaues Neuron ein Biasneuron dargestellt. Du kannst dir das Biasneuron wie den Intercept in der linearen Regresion vorstellen. Jedes der Neuronen hat ein Gewicht \\(w_0\\) bis \\(w_3\\). Diese Gewichte werden durch eine Netzinputfunktion in der Form \\(w_0 + w_1 x_1 + w_2x_3\\) aufsummiert und dann an eine Aktivierungsfunktion weitergeleitet. Die Aktivierungsfunktion entscheidet hierbei, ob das Neuron aktiv wird und damit dann auch die Gewichte weiterleitet oder eben inaktiv wird. Es gibt viele Aktivierungsfunktionen, die alle unterschiedliche Eigenschaften haben. Im Folgenden sind einmal die wichtigisten Aktivierungsfunktionen beschrieben.\n\nDie lineare Aktivierungsfunktion skaliert eine Eingabe einfach um einen Faktor, was bedeutet, dass es eine lineare Beziehung zwischen den Eingaben und der Ausgabe gibt.\nSigmoid-Aktivierungsfunktion ist “S”-förmig. Sie kann der Ausgabe Nichtlinearität hinzufügen und gibt einen binären Wert von 0 oder 1 zurück.\nDie Tanh-Aktivierungsfunktion ist eine Erweiterung der sigmoidalen Aktivierungsfunktion. Daher kann Tanh verwendet werden, um der Ausgabe Nichtlinearität hinzuzufügen. Die Ausgabe liegt im Bereich von -1 bis 1. Die Tanh-Funktion verschiebt das Ergebnis der sigmoiden Aktivierungsfunktion.\nDie Rektifizierte lineare Einheits-Aktivierungsfunktion (RELU) ist eine der am häufigsten verwendeten Aktivierungsfunktionen. RELU wird bevorzugt in den Hidden Layer verwendet. Das Konzept ist linear vom Nullpunkt ausgehend. Die RELU fügt der Ausgabe auch Nichtlinearität hinzu. Allerdings kann das Ergebnis von 0 bis unendlich reichen.\nDie Softmax-Aktivierungsfunktion ist eine Erweiterung der Sigmoid-Aktivierungsfunktion. Die Softmax-Funktion fügt der Ausgabe eine Nichtlinearität hinzu. Sie wird jedoch hauptsächlich für Klassifizierungen verwendet, bei denen mehrere Klassen von Ergebnissen berechnet werden können. Wir haben dann einen Multiclass-Fall vorliegen.\n\nIm Prinzip ist eine Aktivierungsfunktion nichts anderes als die Link Funktion in der multiplen linearen Regression. Aber das geht dann hier zu weit. Häufig wird dann die Netzinputfunktion und die Aktivierungsfunktion in einem Knotenpunkt dargestellt.\n\n\nMehr über Aktivierungsfunktionen kannst du im Tutorium Neural Networks In a Nutshell erfahren.\n\n\n\n\n\n\nAbbildung 80.1— Darstellung von drei Inputneuronen \\(x_1, x_2, x_3\\), einem Biasneuron \\(1\\) mit den jeweiligen weitergeleiteten Gewichten \\(w_1, w_2, w_3\\) und \\(w_0\\). Die Summierungsfunktion sowie die Aktivierungsfunktion werden meist in einen gemeinsamen Knoten dargestellt. Hier sind beide Formen einmal abgebildet. Wenn das Neuron aktiviert ist, gibt es die Summe als Output weiter.\n\n\n\nIn der Abbildung 80.2 sehen wir dann ein ganze Netz an Neuronen. Wir haben ein Inputlayer und mehrere Hiddenlayer die am Ende dann in ein Outputlayer enden. Meistens wollen wir eine binäre Klassifikation rechnen, so dass am Ende dann zwi Outputknoten stehen. Die Hiddenlayer können unterschiedlich viele Knoten enthalten und meistens gibt es auch mehrere Abstufungen. Das heißt wir fnagen mit mehreren Knoten pro Hiddenlayer an und reduzieren dann die Anzahl der Knoten pro Hiddenlayer über die Breite des neuronalen Netzwerkes.\n\n\n\n\n\n\nAbbildung 80.2— Darstellung von drei Inputneuronen \\(x_1, x_2, x_3\\) ohne ein Biasneuron. Die drei Inputbeurnen leiten ihre Gewichte an die Hidden Layer Neoronen weiter. In jedem diesem Neuron findet eine Summiierung in eine eventuelle Aktivierung statt. Aktivierte Neuronen leiten die Summation als Gewichte dann an weitere Hidden Layer Neuronen weiter. Am Ende findet eine Entscheidung in den Outputneuronen statt.\n\n\n\nSpannenderweise sind viele Dinge in einem neuronalen Netzwerk nichts anderes als eine intelligente Hintereinanderschaltung von multiple linearen Regressionen Deshalb gibt es in der Tabelle 80.1 auch einmal eine Übersicht der Begriffe in dem Sprachraum der neuronalen Netze und der klassischen logistischen Regression. Wir sehen hier einiges an gleichen Konzepten.\n\n\n\nTabelle 80.1— Welche Begriff in dem Sprachraum der neuronalen Netze lässt sich zu welchem Begriff in der logistischen Regression zuordnen?\n\n\n\n\n\n\n\n\n\n\nNeural network\nLogistic regression (eng.)\nLogistische Regression (deu.)\n\n\n\n\nActivation function\nLink function\nLink Funktion\n\n\nWeights\nCoefficients / Slope\nKoeffizienten / Steigung\n\n\nBias\nIntercept\nIntercept\n\n\nVariance\nResiduals\nFehler / Residuen\n\n\nLearning\nFitting\nModellieren\n\n\n\n\n\n\n\n\nWhat is the role of the bias in neural networks?\nWenn ein neuronales Netz auf dem Trainingssatz trainiert wird, wird es mit einer Reihe von Gewichten initialisiert. Diese Gewichte werden dann während der Trainingsperiode optimiert und die optimalen Gewichte werden erzeugt. Das ist ein wichtiger Punkt. Wir erzeugen zufällig die Gewichte am Anfang und lassen uns dann die Gewichte mehr oder minder zufällig weiteroptimieren. Sonst würden ja bei jedem Knoten die gleichen Zahlen rauskommen. Wir optimieren aber nicht nur einmal sondern meistens mehrfach. Das heißt wir lassen das neuronale Netzwerk mehrfach wachsen und optimieren bei jedem Wachstum die Gewicte so, dass der Fehler geringer wird.\nDie Epoche (eng. epoch) ist einer der Eingabeparameter des Algorithmus. Stelle dir die Epoche als eine Schleife vor. Die Schleife bestimmt, wie oft ein Lernalgorithmus die Gewichte aktualisiert. Wenn der Wert der Epoche 1 ist, bedeutet dies, dass das neuronale Netz einmal läuft um die Gewichte zu aktualisieren. Wenn die Epoche einen Wert von 5 hat, wird das neuronale Netzwerk fünfmal aktualisiert. Hier ist der Unterschied zu den Entscheidungsbäumen auffällig. Entscheidungsbäume werden in einem Random Forest gemittelt. Die Epochen eines neuronalen Netzwerkes hängen aber miteinander zusammen.\nEin neuronales Netz ist eine korrigierende Rückkopplungsschleife, die Gewichte belohnt, die seine korrekten Vermutungen unterstützen, und Gewichte bestraft, die es zu Fehlern verleiten.\nDamit wir wissen, ob unser Netzwerk über die Epochen besser wird, brauchen wir eine Verlustfunktion (eng. loss function). Die Verlustfunktion wird auch als Kostenfunktion (eng. cost function) bezeichnet. Sie errechnet den Fehler. Um genau zu sein, ist die Kostenfunktion der Durchschnitt der Verlustfunktionen. Dies ist die Funktion, die der Optimierungsalgorithmus zu minimieren versucht. Es gibt eine große Anzahl von Verlustfunktionen, wie den mittleren quadratischen Fehler oder die binäre Kreuzentropie.\nDie Verlustfunktion sagt dem neuronalen Netz im Wesentlichen, welche Maßnahmen es ergreifen muss, um die Accuracy zu verbessern. Diese Information wird dann verwendet, um genaueren Gewichte zu erzeugen. Danach kann dann das neuronale Netz kann die Daten erneut weiterverarbeiten.\nAm Rande möchte ich noch die Begriffe Forward Propagation und Back Propagation erwähnen. Beide Begriffe beschreiben, wie das Lernen innerhalb eines neuronalen Netzwerk abläuft. Klassisch ist die Forward Propagation. Dabei reicht ein Knoten die Informationen an den nächsten Knoten weiter. Das Lernen erfolgt vorwärts. Die andere Möglichkeit ist, das Netzwerk wachsen zu lassen und dann rückwärts die Gewichte der Knoten zu verbessern. Wir haben dann eine Back Propagation vorliegen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronales-netz-anschaulicher",
    "href": "classification-neural-networks.html#neuronales-netz-anschaulicher",
    "title": "80  Neural networks",
    "section": "80.3 Neuronales Netz anschaulicher",
    "text": "80.3 Neuronales Netz anschaulicher\nIn unserem folgenden Beispiel ist Rotkäppchen das neuronale Netz. Rotkäppchen hat folgende Informationen zu drei möglichen Outcomes vorliegen. Rotkäppchen weiß also, dass es im Wald oder im Haus drei Personen treffen kann. Entweder trifft sie die Großmutter, den großen, bösen Wolf oder den Holzfäller. Gott sei Dank kennt Rotkäppchen die Eigenschaften der drei Charaktere und kann daran sich folgende Matrix aufbauen. Wir lesen die Tabelle wie folgt, wir haben die Spalte grosse_ohren und wir haben drei Werte mit der Spalte assoziiert. Wir wissen aber nicht welche Zeile welcher Charakter ist. Wir wollen die Zuordnung einmal mit dem neuronalen Netzwerk durchführen.\n\n\nR Code [zeigen / verbergen]\nlittle_red_tbl &lt;- tibble(grosse_ohren = c(1, 0, 1), \n                         grosse_augen = c(1, 1, 0),\n                         grosse_zaehne = c(1, 0, 0) , \n                         freundlich = c(0, 1, 1), \n                         faltig = c(0, 1, 0), \n                         gutaussehend = c(0, 0, 1),\n                         renn_weg = c(1, 0, 0), \n                         schrei = c(1, 0, 0), \n                         ruf_holzfaeller = c(1, 0, 0), \n                         plaudere = c(0, 1, 1), \n                         geh_hin = c(0, 1, 0), \n                         biete_essen = c(0, 1, 1), \n                         rettung = c(0, 0, 1))\n\n\nIn der Tabelle 80.2 sehen wir die Daten nbochmal in das Input Layer und das Output Layer aufgespaltet. Die Frage ist, was soll Rotkäppchen tun, wenn die die Eigenschaften des Input Layers beobachtet? Wir wollen jetzt anhand eines neuronalen Netzes die Input Layer dem Output Layer zuordnen.\n\n\n\nTabelle 80.2— Die beiden Datensätze für das neuronale Netzwerk. Wie lässt sich der Input sinnvoll mit dem Output verbinden? Wir geben dafür drei Hidden Layers vor, die dann die Charaktere Wolf, Goßmutter und den Holzfäller repräsentieren.\n\n\n\n\n\n\n\n(a) Daten des Input Layers.\n\n\n\n\n\ngrosse_ohren\n1\n0\n1\n\n\ngrosse_augen\n1\n1\n0\n\n\ngrosse_zaehne\n1\n0\n0\n\n\nfreundlich\n0\n1\n1\n\n\nfaltig\n0\n1\n0\n\n\ngutaussehend\n0\n0\n1\n\n\n\n\n\n\n\n\n\n\n\n(b) Daten des Output Layers.\n\n\n\n\n\nrenn_weg\n1\n0\n0\n\n\nschrei\n1\n0\n0\n\n\nruf_holzfaeller\n1\n0\n0\n\n\nplaudere\n0\n1\n1\n\n\ngeh_hin\n0\n1\n0\n\n\nbiete_essen\n0\n1\n1\n\n\nrettung\n0\n0\n1\n\n\n\n\n\n\n\n\n\n\n\nIm Folgenden siehst du einmal den Code für das simple neuronale Netzwerk. Wir haben die Spalten des Input Layer durch das ~ von den Spalten des Output Layers getrennt. Darüber hinaus wollen wir noch drei Hidden Layer Knoten haben. Jeweils einen Knoten für jeden unserer drei Charaktere.\n\n\nR Code [zeigen / verbergen]\nneuralnetwork &lt;- neuralnet(renn_weg + schrei + ruf_holzfaeller + plaudere + \n                             geh_hin + biete_essen + rettung ~ \n                             grosse_ohren + grosse_augen + grosse_zaehne + \n                             freundlich + faltig + gutaussehend,\n                           data = little_red_tbl, hidden = 3, \n                           exclude = c(1, 8, 15, 22, 26, 30, 34, 38, 42, 46), \n                           lifesign = \"none\", linear.output = FALSE)\n\n\nIn Abbildung 80.3 sehen wir das neuronale Netzwerk einmal abgebildet. Da wir uns so ein simples Beispiel ausgedacht haben, können wir das Beispiel hier auch einmal visualisieren. Wir sehen hier nochmal auf der linken Seite das Input Layer und auf der rechten Seite das Output Layer. Die schwarzen, dicken Linien stellen die bedeutenden Gewichte dar. Wir sehen also, dass grosse_ohren, grosse_augen und grosse_zaehne mit dem Hidden Layer H3 verbunden sind. Von dem Hidden Layer H3 gehen dann die Linien zu renn_weg, schrei und ruf_holzfaeller. Wir sehen daran, dass das neuronale Netzwerk in H3 den großen, bösen Wolf erkannt hat. Da wir jetzt sehen, dass H1 hauptsächlich faltig ist, können wir hier auf die Repräsentation der Großmutter schließen. Ebenso ist H2 gutaussehend, so dass wir hierauf die Repräsenrtation des Holzfällers schließen können. Die Zuordnungen des Output Layers passen dementsprechend dann auch.\n\n\nR Code [zeigen / verbergen]\nplotnet(neuralnetwork, bias = FALSE, pad_x = 0.73)\n\n\n\n\n\n\n\n\nAbbildung 80.3— Visualisierung des neuronalen Netzwerkes mit drei vorgebenen Hidden Layers. Die Hidden Layers repräsentieren in diesem Beispiel die Characktere Wolf, Großmutter und den Holzfäller.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronales-netz-mathematischer",
    "href": "classification-neural-networks.html#neuronales-netz-mathematischer",
    "title": "80  Neural networks",
    "section": "80.4 Neuronales Netz mathematischer",
    "text": "80.4 Neuronales Netz mathematischer\nDas folgende etwas mathematische Beispiel ist von Kubat (2017), pp. 65-73, entnommen. Ich habe das Beispiel dann für R adaptiert, so dass wir hier auch R Code zum ausprobieren haben. Bevor wir damit anfangen, hier nochmal auf einfache Weise erklärt, was beim Lernen mit einem neuronalen Netzwerk geschieht.\nEingaben werden als Inputs in das Netz eingegeben. Die Koeffizienten bzw. Gewichte ordnen diese Eingabe einer Reihe von Vermutungen zu, die das Netz am Ende anstellt. Hierbei erfolgt die Zuornung mehr oder minder zufällig. Wir beginnen ja auch mit einem Satz an zufällig ausgewählten Gewichten, die wir dann innerhalb des neuronalen Netzwerks optimieren wollen.\n\\[\nEingabe * Gewichtung = Vermutung\n\\]\n\n\n\\[\ninput * weight = guess\n\\]\nDie gewichtete Eingabe führt zu einer Vermutung darüber, was die Eingabe ist. Das neuronale Netz vergleicht dann seine Vermutung mit einer Wahrheit über die Daten und berechnet daraus einen Fehler. Wir wissen, dass wir zehn kranke und acht gesunde Ferkel in dem Datensatz haben, wie viele kann das neuronale Netzwerk anhand der Gewichte und dem Input richtig zuordnen oder eben falsch zuordnen?\n\\[\nWahrheit - Vermutung = Fehler\n\\]\n\n\n\\[\ntruth - guess = error\n\\]\nDie Differenz zwischen der Schätzung des neuronalen Netzes und der Wahrheit ist der Fehler. Das Netzwerk misst diesen Fehler und minimiert den Fehler über das Modell, indem es die Gewichte in dem Maße anpasst, wie sie zum Fehler beigetragen haben.\n\\[\nFehler * Beitrag\\; des\\; Gewichts\\; zum\\; Fehler = Anpassung\n\\]\n\n\n\\[\nerror * weight's\\; contribution\\; to\\; error = adjustment\n\\]\nDie drei obigen Formeln beschreiben die drei Hauptfunktionen neuronaler Netze: Bewertung der Eingaben, Berechnung des Verlusts und Aktualisierung des Modells, um den dreistufigen Prozess von vorne zu beginnen. Ein neuronales Netz ist eine korrigierende Rückkopplungsschleife, die Gewichte belohnt, die seine korrekten Vermutungen unterstützen, und Gewichte bestraft, die es zu Fehlern verleiten.\n\n\nDas Buch An Introduction to Machine Learning kannst du dir an der HS Osnabrück als PDF über die Hochschule runterladen.\nBetrachten wir also einmal ein simples Datenbeispiel von vier Beobachtungen mit jeweils einem \\(x_1\\) und einem \\(x_2\\) Wert als Prädiktor. Der Wert den \\(x_1\\) oder \\(x_2\\) annehmen können sind binär. Wir haben also für unsere beiden Prädiktoren nur \\(0/1\\) Werte vorliegen. Unser Label \\(y\\) ist ebenfalls binär. Entweder ist die betreffende Beobachtung erkrankt oder eben nicht. In unserem Beispiel sind die ersten beiden Beobachtungen nicht erkrankt und die letzten beiden Beobachtungen sind erkrankt. Schauen wir uns den Datensatz einmal an.\n\n\nR Code [zeigen / verbergen]\ndata_tbl &lt;- tibble(y = c(0, 0, 1, 1),\n                   x_1 = c(0, 1, 0, 1),\n                   x_2 = c(0, 0, 1, 1))\ndata_tbl\n\n\n# A tibble: 4 × 3\n      y   x_1   x_2\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0     0     0\n2     0     1     0\n3     1     0     1\n4     1     1     1\n\n\nFaktisch wollen wir jetzt eine Grade durch die Punkte legen, so dass wir die gesunden von den kranken Beobachtungen trennen können. Praktisch machen wir das mit einer linearen Funktion \\(h(x)\\), die uns anhand von \\(x_1\\) und \\(x_2\\) eine Aussagen über den Status von \\(y\\) ermöglicht. Wir erhalten zuerst einen numerischen Wert, den wir dann noch mit einer Regel in eine \\(0/1\\) Entscheidung umwandeln müssen.\n\\[\nh(x) \\sim w_0 + w_1 \\cdot x_1 + w_2 \\cdot x_2\n\\]\nNun können wir die Formel nochmal kompakter schreiben.\n\\[\nh(x) \\sim \\sum_{i = 0}^{n=2} w_i x_i\n\\]\nWir drücken im Folgenden damit aus, das wir auch die Gewichte \\(w_i\\) mit den einzelnen \\(x_i\\) multiplizieren und anschließend aufsummieren. Anhand der aufsummierten Zahl aus \\(h(x)\\) können wir dann eine Entscheidung für \\(0/1\\) treffen. In unserem Beispiel entscheiden wir uns dazu, das wir \\(y=0\\) annehmen wenn \\(h(x) &lt; 0\\) ist oder aber \\(y=1\\) annehmen, wenn \\(h(x) \\geq 0\\) ist. Wir können das einmal formal aufschreiben.\n\\[\nh(x)=\n\\begin{cases}\n    1,& \\text{wenn } h(x)\\geq 0\\\\\n    0,              & \\text{ansonsten}\n\\end{cases}\n\\]\nNichts anders ist dann auch unser Neuron, was die Entscheidungen trifft. Wir haben vier verschiedene \\(x_1\\) und \\(x_2\\) Kombinationen und gewichten diese beiden \\(x\\) dann noch einem Gewichtsvektor. Wenn wir dann als aufsummiertes Ergebnis eine Zahl größer als \\(0\\) erhalten, dann gibt unser Neuron als Klassifikationsergebnis ein \\(1\\) wieder.\n\n\nR Code [zeigen / verbergen]\nneuron &lt;- function(input, weights) {ifelse(input %*% weights &gt; 0, 1, 0)}\n\n\nWir brauchen also zum einen die Inputmatrix. Die bauen wir uns einmal mit der Funktion model.matrix(). Dann haben wir drei Spalten für jedes Gewicht \\(w\\). Dann brauchen wir noch die drei Gewichte \\(w_0\\), \\(w_1\\) und \\(w_2\\). Nichts anders als der Intercept und die Steigung in einem linearen Modell.\n\n\nR Code [zeigen / verbergen]\ninput &lt;- data_tbl %$%\n  model.matrix(~ x_1 + x_2)\ninput\n\n\n  (Intercept) x_1 x_2\n1           1   0   0\n2           1   1   0\n3           1   0   1\n4           1   1   1\nattr(,\"assign\")\n[1] 0 1 2\n\n\nWir wählen zufällig drei Gewichte aus, die wir dann in unser Modell geben. Die Gwichte werden dann innerhalb des neuronalen Netzwerks dann optimiert. Die Wahl der passenden Gewichte ist dann noch eine Frage für sich, aber hier haben wir diese drei Werte ausgewählt.\n\n\nR Code [zeigen / verbergen]\nweights &lt;- c(0.1, 0.3, 0.4)\n\n\nDann brauchen wir noch ein \\(\\eta\\), dass beschreibt, um wie viel wir die Gewichte pro Runde der Optimierung verändern wollen. Wir wählen hier einen Wert von \\(0.2\\). Je kleiner der Wert, desto länger braucht das neuronale Netzwerk um ein Optimum zu finden. Pro Schritt können ja die Gewichte nur wenig geändertw werden. Ist das \\(\\eta\\) zu groß dann sind die Änderungen der Gewichte auch groß und es kann sein, dass das neuronale Netzwerk gar keine optimalen Gewichte findet. Die Auflösung ist einfach nicht gering genug.\n\n\nR Code [zeigen / verbergen]\neta &lt;- 0.2\n\n\nJetzt laufen wir einmal durch vier Epochen. In jeder Epoche werden wir unser Gewicht dann wieder optimieren und dann mit den optimierten Gewichten weiter rechnen. Wir lassen uns aber in jeder Schleife einmal die Gewichte ausgeben.\n\n\nR Code [zeigen / verbergen]\nfor(i in 1:4){\n  adjust &lt;- (data_tbl$y[i] - neuron(weights, input[i,])) * input[i,]\n  weights &lt;- weights + eta * adjust\n  cat(\"Adjust: \", adjust, \"\\n\")  \n  cat(\"Weights: \", weights, \"\\n\")\n}\n\n\nAdjust:  -1 0 0 \nWeights:  -0.1 0.3 0.4 \nAdjust:  -1 -1 0 \nWeights:  -0.3 0.1 0.4 \nAdjust:  0 0 0 \nWeights:  -0.3 0.1 0.4 \nAdjust:  0 0 0 \nWeights:  -0.3 0.1 0.4 \n\n\nDie Gewichte ändern sich in jedem Schritt um den Wert von \\(0.2\\). Mehr geht auch nicht, denn wir geben mit \\(\\eta\\) vor, um wieviel sich die Gewichte erhöhen oder erniedrigen können. Im ersten Schritt reduzieren wir das erste Gewicht um den Wert von \\(\\eta\\). Im zweiten Schritt reduzieren wir erneut das erste Gewicht und darüber hinaus auch noch das zweite Gewicht. Wir sind dann schon am Optimum, denn wir erhalten keine weiteren Anpassungen mehr. Vermutlich können wir schon am zweiten Schritt das Outcome perfekt auftrennen.\nSchauen wir einmal was passiert, wenn wir unser input mit den Gewichten aus unserem simplen Algorithmus multiplizieren.\n\n\nR Code [zeigen / verbergen]\ninput %*% c(-0.3, 0.1, 0.4)\n\n\n  [,1]\n1 -0.3\n2 -0.2\n3  0.1\n4  0.2\n\n\nUnsere ersten zwei Beobachtungen erhalten einen negativen Wert und unsere letzten beiden Beobachtungen einen positiven Wert. Nach unserer Regeln werden Zahlen kleiner als Null zu \\(0\\) und Zahlen größer als Null zu \\(1\\). Da wir die Regel auch in dem Neuron abgespeichert haben, können wir uns einmal das Outcome mit den Input und den berechnete Gewichten wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nneuron(input, weights = c(-0.3, 0.1, 0.4))\n\n\n  [,1]\n1    0\n2    0\n3    1\n4    1\n\n\nWir erhalten eine perfekte Übereinstimmung von der Vorhersage mit unseren Trainingsdaten. Der Algorithmus ist in der Lage mit der Regel in dem Neuron und den berechneten Gewichten unser Outcome korrekt mit den Trainingsdaten vorherzusagen.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#daten",
    "href": "classification-neural-networks.html#daten",
    "title": "80  Neural networks",
    "section": "80.5 Daten",
    "text": "80.5 Daten\nIn Folgenden wollen wir uns aber mal auf einen echten Datensatz konzentrieren. Wir nutzen daher einmal den Gummibärchendatensatz. Als unser Label und daher als unser Outcome nehmen wir das Geschlecht gender. Dabei wollen wir dann die weiblichen Studierenden vorhersagen. Im Weiteren nehmen wir nur die Spalte Geschlecht sowie als Prädiktoren die Spalten most_liked, age, semester, und height.\n\n\nR Code [zeigen / verbergen]\ngummi_tbl &lt;- read_excel(\"data/gummibears.xlsx\") |&gt; \n  mutate(gender = as_factor(gender),\n         most_liked = as_factor(most_liked)) |&gt; \n  select(gender, most_liked, age, semester, height) |&gt; \n  drop_na(gender)\n\n\nWir dürfen keine fehlenden Werte in den Daten haben. Wir können für die Prädiktoren später die fehlenden Werte imputieren. Aber wir können keine Labels imputieren. Daher entfernen wir alle Beobachtungen, die ein NA in der Variable gender haben. Wir haben dann insgesamt \\(n = 854\\) Beobachtungen vorliegen. In Tabelle 75.5 sehen wir nochmal die Auswahl des Datensatzes in gekürzter Form.\n\n\n\n\nTabelle 80.3— Auszug aus dem Daten zu den Gummibärchendaten.\n\n\n\n\n\n\ngender\nmost_liked\nage\nsemester\nheight\n\n\n\n\nm\nlightred\n35\n10\n193\n\n\nw\nyellow\n21\n6\n159\n\n\nw\nwhite\n21\n6\n159\n\n\nw\nwhite\n36\n10\n180\n\n\nm\nwhite\n22\n3\n180\n\n\nm\ngreen\n22\n3\n180\n\n\n…\n…\n…\n…\n…\n\n\nm\ndarkred\n23\n2\n196\n\n\nw\nyellow\n24\n2\n168\n\n\nm\ngreen\n24\n8\n178\n\n\nw\nlightred\n23\n8\n180\n\n\nm\ndarkred\n25\n2\n202\n\n\nw\ndarkred\n23\n2\n172\n\n\n\n\n\n\n\n\nUnsere Fragestellung ist damit, können wir anhand unserer Prädiktoren männliche von weiblichen Studierenden unterscheiden und damit auch klassifizieren? Um die Klassifikation mit Entscheidungsbäumen rechnen zu können brauchen wir wie bei allen anderen Algorithmen auch einen Trainings- und Testdatensatz. Wir splitten dafür unsere Daten in einer 3 zu 4 Verhältnis in einen Traingsdatensatz sowie einen Testdatensatz auf. Der Traingsdatensatz ist dabei immer der größere Datensatz. Da wir aktuell nicht so viele Beobachtungen in dem Gummibärchendatensatz haben, möchte ich mindestens 100 Beobachtungen in den Testdaten. Deshalb kommt mir der 3:4 Split sehr entgegen.\n\n\nR Code [zeigen / verbergen]\ngummi_data_split &lt;- initial_split(gummi_tbl, prop = 3/4)\n\n\nWir speichern uns jetzt den Trainings- und Testdatensatz jeweils separat ab. Die weiteren Modellschritte laufen alle auf dem Traingsdatensatz, wie nutzen dann erst ganz zum Schluss einmal den Testdatensatz um zu schauen, wie gut unsere trainiertes Modell auf den neuen Testdaten funktioniert.\n\n\nR Code [zeigen / verbergen]\ngummi_train_data &lt;- training(gummi_data_split)\ngummi_test_data  &lt;- testing(gummi_data_split)\n\n\nNachdem wir die Daten vorbereitet haben, müssen wir noch das Rezept mit den Vorverabreitungsschritten definieren. Wir schreiben, dass wir das Geschlecht gender als unser Label haben wollen. Daneben nehmen wir alle anderen Spalten als Prädiktoren mit in unser Modell, das machen wir dann mit dem . Symbol. Da wir noch fehlende Werte in unseren Prädiktoren haben, imputieren wir noch die numerischen Variablen mit der Mittelwertsimputation und die nominalen fehlenden Werte mit Entscheidungsbäumen. Dann müssen wir noch alle numerischen Variablen normalisieren und alle nominalen Variablen dummykodieren. Am Ende werde ich nochmal alle Variablen entfernen, sollte die Varianz in einer Variable nahe der Null sein.\n\n\nR Code [zeigen / verbergen]\ngummi_rec &lt;- recipe(gender ~ ., data = gummi_train_data) |&gt; \n  step_impute_mean(all_numeric_predictors()) |&gt; \n  step_impute_bag(all_nominal_predictors()) |&gt; \n  step_range(all_numeric_predictors(), min = 0, max = 1) |&gt; \n  step_dummy(all_nominal_predictors()) |&gt; \n  step_nzv(all_predictors())\n\ngummi_rec |&gt; summary()\n\n\n# A tibble: 5 × 4\n  variable   type      role      source  \n  &lt;chr&gt;      &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n1 most_liked &lt;chr [3]&gt; predictor original\n2 age        &lt;chr [2]&gt; predictor original\n3 semester   &lt;chr [2]&gt; predictor original\n4 height     &lt;chr [2]&gt; predictor original\n5 gender     &lt;chr [3]&gt; outcome   original\n\n\nAlles in allem haben wir ein sehr kleines Modell. Wir haben ja nur ein Outcome und vier Prädiktoren. Trotzdem sollte dieser Datensatz reichen um zu erklären wie Keras oder Tensorflow funktionieren. Am Ende muss man sich aber auch ehrlich machen und sagen, dass ein Datensatz mit unter tausend Beobachtungen eigentlich keinen großen Sinn für ein neuronales Netz macht. Deshalb ist das hier eher eine Demonstration des Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronale-netze-mit-neuralnet",
    "href": "classification-neural-networks.html#neuronale-netze-mit-neuralnet",
    "title": "80  Neural networks",
    "section": "80.6 Neuronale Netze mit neuralnet",
    "text": "80.6 Neuronale Netze mit neuralnet\nNeuronale Netze mit den R Paketen {neuralnet} und dem R Paket {nnet} sind mehr oder minder veraltet (eng. outdated). Wir können das Paket {neuralnet} nicht über die {parsnip} Umgebung nutzen. Deshalb hier einmal zu Fuß mit all den Komplikationen, die das so mit sich bringt. Auf der anderen Seite liefert das Paket {neuralnet} auch gute Ergebnisse mit wenig rechenlaufzeit. Da musst du dann einmal abwägen, was du in deiner Arbei so brauchst.\nDas die Funktion neuralnet() nicht mit den Workflow kann, müssen wir uns erstmal wieder den Traingsdatendatz und den Testdatensatz aus unserem Rezept extrahieren. Den Traingsdatensatz können wir uns über die Funktion juice() einmal aus dem Rezept ziehen.\n\n\nR Code [zeigen / verbergen]\ngummi_train_tbl &lt;- gummi_rec |&gt; \n  prep() |&gt; \n  juice()\n\n\nDen Testdatensatz müssen wir mit dem Rezept einmal backen. Dann müssen wir noch die Spalte gender in eine numerische Spalte umwandeln. Sonst klappt das später nicht mit der Prädiktion und der Konfusionsmatrix.\n\n\nR Code [zeigen / verbergen]\ngummi_test_tbl &lt;- gummi_rec |&gt; \n  prep() |&gt; \n  bake(gummi_test_data) |&gt; \n  mutate(gender = as_factor(ifelse(gender == \"m\", 0, 1)))\n\n\nDann können wir auch schon die Funktion neuralnet auf unsere Daten anwenden. Wir wollen fünfmal über die Traingsdaten iterieren (rep = 5). Später heißt dieses Iterieren dann auch epoch. Dann müssen wir noch den Threshold für den Fehler festlegen, der gerade noch so akzeptabel ist und wo das Wachstum endet. Je kleiner, desto länger dauer der Prozess. Mit einem threshold = 0.2 sind wir aber schon sehr weit oben, sonst ist der Wert bei \\(0.01\\). Hier musst ein wenig selber mit den Parametern spielen. Eine Tuningmöglichkeit oder eine Kreuzvalidierung musst du dir dann selber programmieren. Wir nehmen dann fünf Hiddenlayers mit jeweils fünf Knoten pro Hiddenlayer.\n\n\nR Code [zeigen / verbergen]\nneuralnet_fit &lt;- neuralnet(gender ~., data = gummi_train_tbl, rep = 5, threshold = 0.2,\n                           hidden = c(5, 5), lifesign = \"minimal\")\n\n\nhidden: 5, 5    thresh: 0.2    rep: 1/5    steps:     953   error: 72.77094 time: 0.27 secs\nhidden: 5, 5    thresh: 0.2    rep: 2/5    steps:    1434   error: 72.12108 time: 0.35 secs\nhidden: 5, 5    thresh: 0.2    rep: 3/5    steps:    2981   error: 67.68285 time: 0.76 secs\nhidden: 5, 5    thresh: 0.2    rep: 4/5    steps:    3539   error: 63.62414 time: 0.83 secs\nhidden: 5, 5    thresh: 0.2    rep: 5/5    steps:     967   error: 72.39746 time: 0.21 secs\n\n\nWenn wir das Modell haben, dann können wir uns hier ganz einfach mal das beste neuronale Netzwerk anschauen. Also die Wiederholung mit dem kleinsten Fehler. In Abbildung Abbildung 80.4 sehen wir das Netzwerk einmal dargestellt. Die blauen Knoten stellen die Biasknoten dar. Die Zahlen an den Kanten stellen dann die Gewichte dar, die von dem jeweiligen Knoten weitergegeben werden. Die Interpretation des Netzwerks ist so schwer, es ist eben nur eine visuelle Darstellung. Da so eine Abbildung etwas schwer zu interpretieren ist, erlaubt ein neurales Interpretationsdiagramm mehr Einblicke. Die schwarzen Kanten haben einen höheren Einfluss als die grauen Kanten. Die exakte Interpretation der Knoten und der Kanten ist aber dennoch schwierig.\n\n\nR Code [zeigen / verbergen]\nplot(neuralnet_fit, rep = \"best\")\n\nplotnet(neuralnet_fit, rep = \"best\", bias = FALSE, pad_x = 0.59)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Neuronales Netzwerk mit den Gewichten und dem Bias als numerische Representation.\n\n\n\n\n\n\n\n\n\n\n\n(b) Neurales Interpretationsdiagramm für ein neurales Netzwerk.\n\n\n\n\n\n\n\nAbbildung 80.4— Abbildung des neuronalen Netzwerks mit dem kleinsten Fehler.\n\n\n\n\nAm Ende machen wir das Ganze ja nicht um etwas interpretieren zu können, sondern um eine Vorhersage zu treffen. Das machen wir mit der Funktion predict(). Jetzt wird es wieder nervig. Wir müssen usn merken, dass unser Faktor zwei Level hat mit 0 und 1 wobei die m = 0 und w = 1 ist. Als wäre das nicht schon nervig genug, haben wir dann in der Ausgabe von predict() nur eine Matrix mit zwei Spalten. Wir brauchen die zweite Spalte, da wir das Geschlecht w vorhersagen wollen.\n\n\nR Code [zeigen / verbergen]\nneuralnet_pred &lt;- predict(neuralnet_fit, gummi_test_tbl) |&gt; \n  round(2)\n\n\nKurzer Check, ob wir auch alles richtig gemacht haben.\n\n\nR Code [zeigen / verbergen]\nrange(neuralnet_pred[,1])\n\n\n[1] -0.21  1.11\n\n\nR Code [zeigen / verbergen]\nrange(neuralnet_pred[,2])\n\n\n[1] -0.12  1.13\n\n\nUnd wir stellen fest, dass hier irgendwas mit unserer Wahrscheinlichkeit für die Klassenzugehörigkeit nicht stimmt. Wir haben negative Werte und Werte über Eins. Das macht für eine Wahrscheinlichkeit keinen Sinn.\n\n\n\n\n\n\nStopp!\n\n\n\nJetzt müssen wir hier erstmal anhalten, denn wir erhalten sinnlose Wahrscheinlichkeiten zurück. Ich würde hier erstmal das Modell überprüfen und die Daten anpassen. Jedenfalls geht es so nicht weiter…\n\n\nIch zeige aber noch wie du dir die Konfusionsmatrix berechnest. Da musst du dich wieder strecken um alles in die Funktion conf_mat() richtig rein zu kriegen. Aber Vorsicht, erst wenn du die Wahrscheinlichkeiten hingekriegt hast, dann kannst du mit der Konfusionsmatrix weitermachen.\n\n\nR Code [zeigen / verbergen]\nneuralnet_cm &lt;- conf_mat(data = data.frame(.pred_class = as.factor(round(neuralnet_pred[,2])),\n                                           gender = as.factor(pull(gummi_test_tbl, gender))), \n                         gender, .pred_class)\n\n\nDann können wir uns die Konfusionsmatrix auch einmal wiedergeben lassen. Ich wäre hier sehr vorsichtig, was die Werte angeht. Wir haben gerade komische Wahrscheinlichkeiten wiedergegeben bekommen. Daher würde ich der Sache hier nicht trauen und nochmal an der Funktion neuralnet() mit anderen Parametern herumprobieren. Man sieht, es hat auch einen Grund warum manche Funktionen nicht in der parsnip Umgebung implementiert sind.\n\n\nR Code [zeigen / verbergen]\nneuralnet_cm |&gt; \n  summary |&gt; \n  mutate_if(is.numeric, round, 2)\n\n\nHier ist also wirklich Vorsicht geboten, wenn wir uns die Ergebnisse anschauen. Die Ergebnisse sind zwar nicht so schlecht, aber wir vertrauen da nicht dem Algorithmus, wenn wir ungültige Wahrscheinlichkeiten erhalten.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronale-netze-mit-nnet",
    "href": "classification-neural-networks.html#neuronale-netze-mit-nnet",
    "title": "80  Neural networks",
    "section": "80.7 Neuronale Netze mit nnet",
    "text": "80.7 Neuronale Netze mit nnet\nWir können aber das R Paket {nnet} mit unserer bekannten Rezeptumgebung nutzen und uns damit das Leben einfacher machen. Das macht auch in diesem Fall sehr viel mehr Sinn, da wir ja nur komische Wahrscheinlichkeiten der Klassenzugehörigkeit aus der Funktion neuralnet() wiederbekommen. Also das ganze einmal ohne wildes Installieren von Tensorflow / Keras. Ein simples neurales Netzwerk in R mit der Engine aus nnet.\nIn unserem Beispiel lassen wir einhundert Replikationen laufen (epoch = 100) und wählen auch hier mal fünf Hidden Layers (hidden_units = 5). Dann wollen wir natürlich eine Klassifikation rechnen.\n\n\nR Code [zeigen / verbergen]\nnnet_mod &lt;- mlp(epochs = 100, hidden_units = 5) |&gt; \n  set_engine(\"nnet\") |&gt; \n  set_mode(\"classification\")\n\n\nWir bringen wieder unser Modell mit dem Rezept des Gummibärchendatensatzes zusammen und können dann den Workflow abspeicherb.\n\n\nR Code [zeigen / verbergen]\nnnet_wflow &lt;- workflow() |&gt; \n  add_model(nnet_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nWie immer starten wir dann den Workflow mit der Funktion fit() und erhalten das nnet Modell zurück.\n\n\nR Code [zeigen / verbergen]\nnnet_fit &lt;- nnet_wflow |&gt; \n  parsnip::fit(gummi_train_data)\n\n\nJetzt müssen wir nur noch mit der Funktion augment uns die Vorhersagen mit dem Testdatensatz wiedergeben lassen.\n\n\nR Code [zeigen / verbergen]\nnnet_aug &lt;- augment(nnet_fit, gummi_test_data ) \n\n\nDa wir hier etwas vorsichtig geworden sind, nochmal schnell schauen, ob unsere Wahrscheinlichkeiten der Klassenzugehörigkeit auch wirklich eine Wahrscheinlichkeit ist.\n\n\nR Code [zeigen / verbergen]\npluck(nnet_aug, \".pred_w\") |&gt; range()\n\n\n[1] 0.2689414 0.7310586\n\n\nJa, das passt soweit und wir können uns dann die Konfusionsmatrix berechnen lassen. Die Ergebnisse sind jetzt nicht so berauschend, aber auf der anderen Seite richtiger als in der Funktion neuralnet().\n\n\nR Code [zeigen / verbergen]\nnnet_cm &lt;- nnet_aug |&gt; \n  conf_mat(gender, .pred_class)\n\nnnet_cm\n\n\n          Truth\nPrediction  m  w\n         m 83 11\n         w 21 99\n\n\nDann schauen wir uns nochmal die ganzen anderen Gütekriterien aus der Konfusionsmatrix einmal an.\n\n\nR Code [zeigen / verbergen]\nnnet_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary         0.850\n 2 kap                  binary         0.700\n 3 sens                 binary         0.798\n 4 spec                 binary         0.9  \n 5 ppv                  binary         0.883\n 6 npv                  binary         0.825\n 7 mcc                  binary         0.703\n 8 j_index              binary         0.698\n 9 bal_accuracy         binary         0.849\n10 detection_prevalence binary         0.439\n11 precision            binary         0.883\n12 recall               binary         0.798\n13 f_meas               binary         0.838\n\n\nDie Ergebnisse sind höchstens okay. Die Accuracy ist nicht sehr hoch und auch der Rest der Werte ist eher mittelmäßig. Das Ganze sehen wir dann in Abbildung 80.5 auch nochmal entsprechend in der ROC Kurve visualisiert. Die ROC Kurve sieht nur mittelmäßig aus. Wir müssten hier auf jeden Fall nochmal über Kreuzvalidierung und Tuning nachdenken. Ohne Kreuzvalidierung und Tuning würde ich das Modell nicht anwenden.\n\n\nR Code [zeigen / verbergen]\nnnet_aug |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 80.5— ROC Kurve für den nnet Algorithmus.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#neuronale-netze-mit-keras-tensorflow",
    "href": "classification-neural-networks.html#neuronale-netze-mit-keras-tensorflow",
    "title": "80  Neural networks",
    "section": "80.8 Neuronale Netze mit Keras / Tensorflow",
    "text": "80.8 Neuronale Netze mit Keras / Tensorflow\nJetzt kommen wir zum dicksten Brett. Was wir hier machen ist eigentlich nur ein schwacher Abglanz was Tensorflow eigentlich kann. Über den Algorithmus werden ganze Bücher geschrieben und die Anwendung auf einem Laptop oder Standrechner ist eigentlich dem Algorithmus nicht würdig. Wir werden hier auch nicht alles aus dem Algorithmus raus holen. Das geht auch gar nicht. Wenn du dich tiefer mit der Materie beschäftigen willst, dann ist dies hier ein guter Startpunkt. Wenn du Probleme hast Tensorflow zum Laufen zu kriegen, dann kannst du auch für die einfache Anwendung nnet nutzen. Mit ein wenig Tuning sollten da auch gute Ergebnisse bei herauskommen.\n\n\nWenn du richtig Tensorflow mit R nutzen willst, dann gibt es hier noch das umfangreiche Tutorium für Tensorflow with R. Insbesondere die Nutzung von lime um die Black Box des neuronalen Netzwerks zu erklären wird hier nochmal gezeigt.\nDie Funktion mlp() erlaubt uns als Engine keras zu verweden und damit ein neurales Netzwerk mit dem Tensorflow Algorithmus zu rechnen. Mehr brauchen wir an dieser Stelle erstaml nicht tun. Wir werden hier erstmal keine Tuning Parameter angeben. Später im Kapitel werden wir dann noch ein Tuning für den Algorithmus rechnen.\n\n\nR Code [zeigen / verbergen]\nkeras_mod &lt;- mlp() |&gt; \n  set_engine(\"keras\") |&gt; \n  set_mode(\"classification\")\n\n\nJetzt bringen wir noch das Rezept des Gummibärchendatensatzes mit dem Modell in einem Workflow zusammen.\n\n\nR Code [zeigen / verbergen]\nkeras_wflow &lt;- workflow() |&gt; \n  add_model(keras_mod) |&gt; \n  add_recipe(gummi_rec)\n\n\nJetzt können mit mit der Funktion fit() das Modell rechnen. Wenn du Keras und Tensorflow nicht installiert hast, dann wird jetzt meist eine automatische Installation starten. Oder aber du hast dir vorher schon Tensorflow und Keras installiert. Schaue dazu gerne einmal den Quick start um Tensorflow zu installieren an.\n\n\nEpoch 1/20\n17/17 - 4s - loss: 0.6937 - 4s/epoch - 250ms/step\nEpoch 2/20\n17/17 - 0s - loss: 0.6930 - 84ms/epoch - 5ms/step\nEpoch 3/20\n17/17 - 0s - loss: 0.6926 - 67ms/epoch - 4ms/step\nEpoch 4/20\n17/17 - 0s - loss: 0.6921 - 66ms/epoch - 4ms/step\nEpoch 5/20\n17/17 - 0s - loss: 0.6917 - 69ms/epoch - 4ms/step\nEpoch 6/20\n17/17 - 0s - loss: 0.6913 - 67ms/epoch - 4ms/step\nEpoch 7/20\n17/17 - 0s - loss: 0.6908 - 66ms/epoch - 4ms/step\nEpoch 8/20\n17/17 - 0s - loss: 0.6905 - 65ms/epoch - 4ms/step\nEpoch 9/20\n17/17 - 0s - loss: 0.6900 - 66ms/epoch - 4ms/step\nEpoch 10/20\n17/17 - 0s - loss: 0.6896 - 65ms/epoch - 4ms/step\nEpoch 11/20\n17/17 - 0s - loss: 0.6892 - 65ms/epoch - 4ms/step\nEpoch 12/20\n17/17 - 0s - loss: 0.6887 - 66ms/epoch - 4ms/step\nEpoch 13/20\n17/17 - 0s - loss: 0.6883 - 65ms/epoch - 4ms/step\nEpoch 14/20\n17/17 - 0s - loss: 0.6878 - 67ms/epoch - 4ms/step\nEpoch 15/20\n17/17 - 0s - loss: 0.6873 - 66ms/epoch - 4ms/step\nEpoch 16/20\n17/17 - 0s - loss: 0.6868 - 65ms/epoch - 4ms/step\nEpoch 17/20\n17/17 - 0s - loss: 0.6864 - 65ms/epoch - 4ms/step\nEpoch 18/20\n17/17 - 0s - loss: 0.6859 - 65ms/epoch - 4ms/step\nEpoch 19/20\n17/17 - 0s - loss: 0.6853 - 65ms/epoch - 4ms/step\nEpoch 20/20\n17/17 - 0s - loss: 0.6847 - 65ms/epoch - 4ms/step\n\n\n6/6 - 0s - 75ms/epoch - 13ms/step\n6/6 - 0s - 17ms/epoch - 3ms/step\n\n\n\n\nR Code [zeigen / verbergen]\nkeras_fit &lt;- keras_wflow |&gt; \n  parsnip::fit(gummi_train_data)\n\n\nWenn der Algorithmus durchgelaufen ist, was schon ein paar Sekunden dauern kann, dann können wir danach das Modell nutzen um unser Geschlecht vorherzusagen.\n\n\nR Code [zeigen / verbergen]\nkeras_aug &lt;- augment(keras_fit, gummi_test_data) \n\n\nWir lassen uns dann wieder die Konfusionsmatrix wiedergeben. Wir sehen, dass wir sehr mies dran sind. Wir haben eine nahezu zufällige Einteilung der Geschlechter durch die Vorhersage.\n\n\nR Code [zeigen / verbergen]\nkeras_cm &lt;- keras_aug |&gt; \n  conf_mat(gender, .pred_class)\n\nkeras_cm\n\n\n          Truth\nPrediction  m  w\n         m 82 92\n         w  0  1\n\n\nWas schon in der Konfusionsmatrix ziemlich mies aussah, wird natürlich auch so in der Zusammenfassung wiedergegeben.\n\n\nR Code [zeigen / verbergen]\nkeras_cm |&gt; summary()\n\n\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   &lt;chr&gt;                &lt;chr&gt;          &lt;dbl&gt;\n 1 accuracy             binary        0.474 \n 2 kap                  binary        0.0101\n 3 sens                 binary        1     \n 4 spec                 binary        0.0108\n 5 ppv                  binary        0.471 \n 6 npv                  binary        1     \n 7 mcc                  binary        0.0712\n 8 j_index              binary        0.0108\n 9 bal_accuracy         binary        0.505 \n10 detection_prevalence binary        0.994 \n11 precision            binary        0.471 \n12 recall               binary        1     \n13 f_meas               binary        0.641 \n\n\nWas sehen wir? Wir sehen, dass unsere Accuracy mit unter 50% schon mehr schlecht ist. Die Zuordnung der Geschlechter wird vom Algorithmus rein zufällig durchgeführt. Wir können daher nicht von einem guten Algorithmus sprechen. In Abbildung 80.6 sehen wir die gewollt schlechte ROC Kurve aus einem keras Algorithmus ohne Tuning. Warum war die nochmal gewollt schlecht? Ich will hier einmal zeigen, dass ein neuronales Netz aus dem Tensorflow Algorithmus meistens ohne ein Tuning sehr schlecht ist. Das kann sich aber durch ein Tuning sehr schnell drehen.\n\n\nR Code [zeigen / verbergen]\nkeras_aug |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 80.6— ROC Kurve für den keras Algorithmus.\n\n\n\n\n\n\n\n\n\n\n\nKann ich auch eine Kreuzvalidierung für Keras / Tensorflow durchführen?\n\n\n\nJa, kannst du. Wenn du nur eine Kreuzvalidierung durchführen willst, findest du alles im Kapitel 77 für den \\(k\\)-NN Algorithmus. Du musst dort nur den Workflow ändern und schon kannst du alles auch auf Keras / Tensorflow Algorithmus anwenden.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#tuning",
    "href": "classification-neural-networks.html#tuning",
    "title": "80  Neural networks",
    "section": "80.9 Tuning",
    "text": "80.9 Tuning\nWas heißt Tuning? Wie bei einem Auto können wir an verschiedenen Stellschrauben bei einem mathematischen Algorithmus schrauben. Welche Schrauben und Teile das sind, hängt dann wieder vom Algorithmus ab. Im Falle des xgboost Algorithmus können wir an folgenden Parametern drehen und jeweils schauen, was dann mit unserer Vorhersage passiert. Insgesamt hat der keras Algorithmus fünf Tuningparameter, wir wählen jetzt für uns hier drei aus. Ich nehme hier auch nur drei Parameter, da sich dann drei Parameter noch sehr gut visuell darstellen lassen. In der Anwendung wäre dann natürlich besser alle Parameter zu tunen, aber das dauert dann auch lange.\n\nhidden_units, Anzahl der Ebenen (eng. layer) in dem neuronalen Netzwerk. Wie viele Ebenen soll unser Netzwerk haben? Oder auch wie deep soll das Netzwerk gebaut werden?\npenalty, ein Wert für die Regulierung des neuronalen Netzwerk.\nepochs, bezieht sich auf einen Zyklus durch die Layer für den gesamten Trainingsdatensatz. Wie oft rechnen wir den Trainingsdatensatz und trainieren unser Netzwerk?\n\nNun ist es so, dass wir natürlich nicht händisch alle möglichen Kombinationen von der Anzahl der ausgewählten Variablen pro Baum, der kleinsten Knotengröße und der Anzahl der Bäume berechnen wollen. Das sind ziemlich viele Kombinationen und wir kommen dann vermutlich schnell durcheinander. Deshalb gibt es die Funktion tune() aus dem R Paket {tune}, die uns einen Prozess anbietet, das Tuning automatisiert durchzuführen.\nDa ich nicht ewig warten wollte, habe ich noch das parallele Rechnern aktiviert, in dem ich mir die Anzahl an Rechenkernen minus eins wiedergeben habe lassen.\n\n\nR Code [zeigen / verbergen]\ncores &lt;- parallel::detectCores() - 1\n\n\nAls erstes müssen wir uns ein Objekt bauen, das aussieht wie ein ganz normales Modell in der Klassifikation. Aber wir ergänzen jetzt noch hinter jeder zu tunenden Option noch die Funktion tune(). Das sind die Parameter des Algorithmus, die wir später tunen wollen.\n\n\nR Code [zeigen / verbergen]\ntune_spec &lt;- mlp(hidden_units = tune(),\n                 penalty = tune(), \n                 epochs = tune()) |&gt; \n  set_engine(\"keras\", num.threads = cores) |&gt; \n  set_mode(\"classification\") \n\ntune_spec\n\n\nSingle Layer Neural Network Model Specification (classification)\n\nMain Arguments:\n  hidden_units = tune()\n  penalty = tune()\n  epochs = tune()\n\nEngine-Specific Arguments:\n  num.threads = cores\n\nComputational engine: keras \n\n\nJetzt bauen wir uns den Workflow indem wir statt unserem Modell, die Tuninganweisung in den Workflow reinnehmen. Echt simpel und straightforward. Das Rezept bleibt ja das Gleiche.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_wflow &lt;- workflow() |&gt; \n  add_model(tune_spec) |&gt; \n  add_recipe(gummi_rec)\n\n\nJetzt müssen wir noch alle Kombinationen aus den drei Parametern hidden_units, penalty und epochs ermitteln. Das macht die Funktion grid_regular(). Es gibt da noch andere Funktionen in dem R Paket {tune}, aber ich konzentriere mich hier auf die einfachste. Jetzt müssen wir noch die Anzahl an Kombinationen festlegen. Ich möchte für jeden Parameter fünf Werte tunen. Daher nutze ich hier die Option levels = 5 auch damit hier die Ausführung nicht so lange läuft. Fange am besten mit levels = 5 an und schaue, wie lange das zusammen mit der Kreuzvalidierung dann dauert. Dann kannst du die Levels noch hochschrauben. Beachte aber, dass mehr Level nur mehr Zwischenschritte bedeutet. Jede Option hat eine Spannweite range, die du dann anpassen musst, wenn du höhere Werte haben willst. Mehr Level würden nur mehr Zwischenschritte bedeuten.\n\n\nR Code [zeigen / verbergen]\ngummi_grid &lt;- grid_regular(hidden_units(range = c(1, 100)),\n                           penalty(),\n                           epochs(range = c(10, 200)),\n                           levels = 5)\n\n\nDas Tuning nur auf dem Trainingsdatensatz durchzuführen ist nicht so eine gute Idee. Deshalb nutzen wir hier auch die Kreuzvalidierung. Eigentlich ist eine 10-fache Kreuzvalidierung mit \\(v=10\\) besser. Das dauert mir dann aber hier im Skript viel zu lange. Deshalb habe ich hier nur \\(v=5\\) gewählt. Wenn du das Tuning rechnest, nimmst du natürlich eine 10-fach Kreuzvalidierung.\n\n\nR Code [zeigen / verbergen]\ngummi_folds &lt;- vfold_cv(gummi_train_data, v = 5)\n\n\nNun bringen wir den Workflow zusammen mit dem Tuninggrid und unseren Sets der Kreuzvaidierung. Daher pipen wir den Workflow in die Funktion tune_grid(). Als Optionen brauchen wir die Kreuzvaldierungsdatensätze und das Tuninggrid. Wenn du control_grid(verbose = TRUE) wählst, dann erhälst du eine Ausgabe wie weit das Tuning gerade ist. Achtung!, das Tuning dauert seine Zeit. Im Falle des keras Algorithmus dauert das Tuning extrem lange, aber immer noch nur ein paar Stunden. Wenn du dann alle fünf Parameter des keras Algorithmustunen wollen würdest, dann würde die Berechnung Tage dauern. Deshalb ist ein Großerechner mit mehreren Kernen unabdingbar für die Nutzung von deep learning Du kannst das Ergebnis des simpleren Tunings auch in der Datei gummi_xgboost_tune_res.rds finden.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res &lt;- gummi_tune_wflow |&gt; \n   tune_grid(resamples = gummi_folds,\n             grid = gummi_grid,\n             control = control_grid(verbose = FALSE))\n\n\nDamit du nicht das Tuning durchlaufen lassen musst, habe ich das Tuning in die Datei gummi_xgboost_tune_res.rds abgespeichert und du kannst dann über die Funktion read_rds() wieder einlesen. Dann kannst du den R Code hier wieder weiter ausführen.\nNachdem das Tuning durchgelaufen ist, können wir uns über die Funktion collect_metrics(), die Ergebnisse des Tunings für jede Kombination der drei Parameter hidden_units, penalty und epochs wiedergeben lassen. Diese Ausgabe ist super unübersichtlich. Ich habe mich ja am Anfange des Abschnitts auch für drei Tuningparameter entschieden, da sich dann diese drei Parameter noch gut visualisieren lassen. Deshalb einmal die Abbildung der mittleren Accuarcy und der mittleren AUC-Werte über alle Kreuzvalidierungen.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res |&gt;\n  collect_metrics() |&gt;\n  mutate(hidden_units = as_factor(hidden_units),\n         penalty = as_factor(penalty)) |&gt;\n  ggplot(aes(epochs, mean, color = hidden_units, linetype = penalty)) +\n  theme_minimal() +\n  geom_line(alpha = 0.6) +\n  geom_point() +\n  facet_wrap(~ .metric, scales = \"free\", nrow = 2) +\n  scale_x_log10(labels = scales::label_number()) +\n  scale_color_okabeito()\n\n\n\n\n\n\n\n\nAbbildung 80.7— Tuning Kurven für den keras Algorithmus.\n\n\n\n\n\nDamit wir nicht händisch uns die beste Kombination raussuchen müssen, können wir die Funktion show_best() nutzen.\n\n\nR Code [zeigen / verbergen]\ngummi_tune_res |&gt;\n  show_best()\n\n\nWarning in show_best(gummi_tune_res): No value of `metric` was given; \"roc_auc\"\nwill be used.\n\n\n# A tibble: 5 × 9\n  hidden_units     penalty epochs .metric .estimator  mean     n std_err .config\n         &lt;int&gt;       &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;  \n1           75    1   e- 5    200 roc_auc binary     0.899     5  0.0156 Prepro…\n2          100    1   e- 5    200 roc_auc binary     0.898     5  0.0137 Prepro…\n3           50    1   e- 5    200 roc_auc binary     0.897     5  0.0144 Prepro…\n4           50    1   e-10    200 roc_auc binary     0.897     5  0.0149 Prepro…\n5          100    3.16e- 8    200 roc_auc binary     0.896     5  0.0152 Prepro…\n\n\nDas war die Funktion show_best() aber wir können uns auch die gleich die besten Parameter nach der Accuracy raus ziehen. Das Rausziehen der besten Parameter macht für uns die Funktion select_best().\n\n\nR Code [zeigen / verbergen]\nbest_keras &lt;- gummi_tune_res |&gt;\n  select_best()\n\n\nWarning in select_best(gummi_tune_res): No value of `metric` was given;\n\"roc_auc\" will be used.\n\n\nR Code [zeigen / verbergen]\nbest_keras\n\n\n# A tibble: 1 × 4\n  hidden_units penalty epochs .config               \n         &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;                 \n1           75 0.00001    200 Preprocessor1_Model114\n\n\nWir sehen, dass wir hidden_units = 75 wählen sollten. Dann müssen wir als Penalty penalty = 0.0000000001 nutzen. Die Anzahl an Durchläufen pro Training ist dann epochs = 200. Müssen wir jetzt die Zahlen wieder in ein Modell eingeben? Nein, müssen wir nicht. Mit der Funktion finalize_workflow() können wir dann die besten Parameter aus unserem Tuning gleich mit dem Workflow kombinieren. Dann haben wir unseren finalen, getunten Workflow. Du siehst dann auch in der Ausgabe, dass die neuen Parameter in dem keras Algorithmus übernommen wurden\n\n\nR Code [zeigen / verbergen]\nfinal_gummi_wf &lt;- gummi_tune_wflow |&gt; \n  finalize_workflow(best_keras)\n\nfinal_gummi_wf \n\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: mlp()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n5 Recipe Steps\n\n• step_impute_mean()\n• step_impute_bag()\n• step_range()\n• step_dummy()\n• step_nzv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nSingle Layer Neural Network Model Specification (classification)\n\nMain Arguments:\n  hidden_units = 75\n  penalty = 1e-05\n  epochs = 200\n\nEngine-Specific Arguments:\n  num.threads = cores\n\nComputational engine: keras \n\n\nJetzt bleibt uns nur noch der letzte Fit übrig. Wir wollen unseren finalen, getunten Workflow auf die Testdaten anwenden. Dafür gibt es dann auch die passende Funktion. Das macht für uns die Funktion last_fit(), die sich dann die Informationen für die Trainings- und Testdaten aus unserem Datensplit von ganz am Anfang extrahiert.\n\n\nR Code [zeigen / verbergen]\nfinal_fit &lt;- final_gummi_wf |&gt;\n  last_fit(gummi_data_split) \n\n\n6/6 - 1s - 509ms/epoch - 85ms/step\n6/6 - 0s - 18ms/epoch - 3ms/step\n\n\nDa wir immer noch eine Kreuzvaldierung rechnen, müssen wir dann natürlich wieder alle Informationen über alle Kreuzvaldierungsdatensätze einsammeln. Dann erhalten wir unsere beiden Gütekriterien für die Klassifikation des Geschlechts unser Studierenden nach dem keras Algorithmus. Die Zahlen sind schon gut für echte Daten. Eine Accuracy von 81% bedeutet das wir über acht von zehn Studierenden richtig klassifizieren. Die AUC ist auch schon fast hervorragend, wir bringen kaum Label durcheinander.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_metrics()\n\n\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy binary         0.806 Preprocessor1_Model1\n2 roc_auc  binary         0.910 Preprocessor1_Model1\n\n\nDann bleibt uns nur noch die ROC Kurve zu visualisieren. Da wir wieder etwas faul sind, nutzen wir die Funktion autoplot(). Als Alternative geht natürlich auch das R Paket {pROC}, was eine Menge mehr Funktionen und Möglichkeiten bietet.\n\n\nR Code [zeigen / verbergen]\nfinal_fit |&gt;\n  collect_predictions() |&gt; \n  roc_curve(gender, .pred_w, event_level = \"second\") |&gt; \n  autoplot()\n\n\n\n\n\n\n\n\nAbbildung 80.8— ROC Kurve für den keras Algorithmus nach der Kreuvalidierung und dem Tuning.\n\n\n\n\n\nDa wir eine ROC Kurve hier vorliegen haben, die sehr weit weg von der Diagonalen ist, haben wir sehr viele richtig vorhergesagte Studierende in unseren Testdaten. Unser Modell funktioniert um das Geschlecht von Studierenden anhand unserer Gummibärchendaten vorherzusagen. Besonders bei den neuronalen Netzwerken sieht man, wenn du die ROC Kurven vor und nach dem Tuning vergleichst, wie wichtig das Tuning ist. Dabei haben wir hier nur die abgespeckte Variante genutzt, da mein Rechner nicht länger laufen sollte.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "classification-neural-networks.html#referenzen",
    "href": "classification-neural-networks.html#referenzen",
    "title": "80  Neural networks",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nKubat, M. (2017). An introduction to machine learning (Bd. 2). Springer.\n\n\nMueller, J. P., & Massaron, L. (2019). Deep Learning for dummies. John Wiley & Sons.",
    "crumbs": [
      "Klassifikation oder maschinelles Lernen",
      "<span class='chapter-number'>80</span>  <span class='chapter-title'>Neural networks</span>"
    ]
  },
  {
    "objectID": "abspann.html",
    "href": "abspann.html",
    "title": "Abspann",
    "section": "",
    "text": "Letzte Änderung am 29. July 2025 um 08:58:45\nVor 3 Jahren begann alles mit einem leeren, weißen Blatt.1 Ich fing an aufzuschreiben, was mir alles einfiel und in ein Buch Bio Data Science gehören sollte. Am Ende war ich etwas schockiert – echt eine Menge an Begriffen und Methoden. Teilweise hatte ich nur die Oberbegriffe benannt, die sich dann später als ein Kaleidoskop an Unterthemen herausstellen. Also machte ich mich ans Werk wie Beppo, der Straßenkehrer, immer schön eine Sache nach der nächsten. Und so wuchs fast unmerklich dieses Werk hier an. Am Ende bin ich recht froh so weit gekommen zu sein. Sicherlich fehlt noch das ein oder andere Thema, aber soweit bin ich erstmal zufrieden. Jedenfalls so zufrieden, dass ich diesen Abspann schreiben kann. Ich habe mir einen 5-Jahresplan gemacht. Der Plan besagt, dass ich dann Mitte 2027, nach gut 5 Jahren schreiben hier, etwas näher an “fertig” bin.\nBis jetzt ist es aber schon ein wunderbarer Erfolg.\nOder um es mit den Worten von James Clear zu sagen…\nMit dem Jahreswechsel 2024/2025 habe ich mich mehr mit der Verzahnung der Kapitel hier mit meinen YouTube-Videos beschäftigt. Es war und ist dann doch mehr Aufwand als gedacht die Kapitel nochmal “einzusprechen”. Häufig musste ich dann doch noch eine Menge an der Struktur des Kapitels ändern. Hätte ich so nicht gedacht. Ich habe dabei dann zig Kapitel neu geschrieben und überarbeitet. Sicherlich sind die Post-hoc und ANOVA Kapitel die größten Änderungen gewesen, aber auch die vollständige Überarbeitung der nichtparametrischen Tests war eine Menge Arbeit. Aber es waren ja auch mit die ersten Kapitel, die ich im Sommer 2022 geschrieben habe. So ist es hier ein ewiger Kreislauf mit einem Zurückkommen zu Kapiteln, die ich schon etwas vergessen hatte. Ein spanndender Kreislauf am Ende.\nDann ging es dann auch schon Mitte 2025 los mit dem kontinuierlichen \\(x\\) nachdem ich dann die faktoriellen Experimente für’s erste dann doch fertig geschrieben hatte. Hier kommt dann die Modellierung in R und alles was es noch so um die Regression gibt. Eine ziemliche Menge und mal schauen wie lange mich dann das Thema noch umtreibt.\nWas noch offen ist und vermutlich noch meiner Aufmerksamkeit bedarf, ist die bayesianische Statistik. Aktuell habe ich nur Bruckstücke von Ideen, wie ich das komplexe Thema aufarbeiten kann, aber da habe ich ja jetzt noch etwas Zeit mich mit zu beschäftigen.\nEine andere große Baustelle und auch ein Teil, den ich noch schreiben möchte2, ist der Bereich genetische Analysen in der Bioinformatik. Wann ich dazu kommen werde, steht dann aber noch in den signifikanten Sternen… Aber dieses Thema wird dann das Skript Bioinformatik werden. Genetische Analyse passen hier definitiv nicht mehr rein. Ich werde aber wirklich eine Zeit brauchen…\nWas es definitiv nicht geben wird sind quantitative Methoden der Sozialwissenschaftlichen. Das ist weder mein Bereich noch mein Interesse. Da gibt es sicherlich andere Lehrende, die sich mit diesem Thema hervorragend auseinander gesetzt haben.\nWenn dir also noch was fehlt, dann schreibe mir doch eine Mail, dann schaue ich, dass ich das Thema in den nächsten Monaten ergänze – ich bin wirklich nicht sehr schnell gerade. Einfach fühlen sich hier die Seiten dann nämlich doch nicht. So Ende ich vorerst mal mit dem Zitat von Richard Feynman über das Lernen und Lehren.\nIch hoffe du hast ähnlich viel gelernt wie ich, als ich das hier alles geschrieben habe. Möge dir das Buch Bio Data Science von Nutzen sein.\nFür mich ist es mit diesem Buch wahrlich eine andere Reise.",
    "crumbs": [
      "Abspann"
    ]
  },
  {
    "objectID": "abspann.html#footnotes",
    "href": "abspann.html#footnotes",
    "title": "Abspann",
    "section": "",
    "text": "Mein Ziel ist es übrigens nach 3 Jahren fertig zu sein… mal gucken, ob ich dann Mitte 2025 “fertig” bin. Was immer das auch heißen mag. [Nachtrag, Mitte 2025] Nein, ich bin nicht fertig. Aktuell glaube ich auch nicht, dass ich im nächsten Jahr fertig werde… ich brauche ein 5 Jahresplan.↩︎\nOder vielleicht auch nicht… Die Frage ist immer, wer braucht es? Und wird es in meiner Lehre von nutzen sein?↩︎",
    "crumbs": [
      "Abspann"
    ]
  },
  {
    "objectID": "app-spielecke.html",
    "href": "app-spielecke.html",
    "title": "81  Spielecke",
    "section": "",
    "text": "Mixed data\nLetzte Änderung am 14. June 2025 um 19:27:27\nDieses Kapitel ist meine Spielecke, wo ich Ideen und sonst so Zeug sammele, was mir über den Weg läuft und ich noch nicht so richtig weiter im Skript eingeordnet habe. Deshalb hat das hier auch keine Struktur, da mir die Gedanken eben auch noch wirr durch den Kopf geistern.\nR Code [zeigen / verbergen]\npacman::p_load(ggshadow)\n\no2_tbl &lt;- read_excel(\"data/sauerstoffmangel.xlsx\") |&gt; \n  pivot_longer(cols = t0_height:last_col(),\n               values_to = \"height\",\n               names_to = c(\"time\", \"outcome\"),\n               names_sep = \"_\") |&gt; \n  mutate(light = as_factor(light),\n         water_level = as_factor(water_level),\n         time_fct = as_factor(time),\n         time_num = as.numeric(time_fct) - 1) |&gt; \n  select(id, light, water_level, time_fct, time_num, height)\nR Code [zeigen / verbergen]\nggplot(o2_tbl, aes(time_num, height, linetype = light, color = water_level)) +\n  theme_minimal() +\n  stat_summary(aes(group = light), func = \"mean\", geom = \"line\",\n               size = 4, show.legend = FALSE, alpha = 0.2) +\n  stat_summary(aes(group = water_level), func = \"mean\", geom = \"line\",\n               size = 4, show.legend = FALSE, alpha = 0.2) +\n  stat_summary(func = \"mean\", geom = \"line\", linewidth = 2) \n\n\n\n\n\n\n\n\nAbbildung 81.1— Boxplot des Fruchtwachstums von fünfzehn Tomatensorten über zehn Wochen unter Trockenstress.\nR Code [zeigen / verbergen]\ntomato_tbl &lt;- read_excel(\"data/repeated_tomato.xlsx\") |&gt; \n  clean_names() |&gt; \n  mutate(variety = relevel(as_factor(variety), ref = \"control\"),\n         time_fct = as_factor(time))\nR Code [zeigen / verbergen]\nggplot(tomato_tbl, \n       aes(time_fct, diameter, fill = variety)) +\n  theme_minimal() +\n  geom_boxplot(outlier.size = 0.5) +\n  theme(legend.position = \"top\") +\n  scale_fill_metro() +\n  labs(x = \"Zeitpunkte der Messung\", y = \"Mittleres Fruchtdurchmesser [cm]\",\n       color = \"Sorte\")\n\n\n\n\n\n\n\n\nAbbildung 81.2— Boxplot des Fruchtwachstums von fünfzehn Tomatensorten über zehn Wochen unter Trockenstress.\nR Code [zeigen / verbergen]\nggrepel_tbl &lt;- tomato_tbl |&gt; \n  group_by(time, variety) |&gt; \n  summarise(mean = mean(diameter, na.rm = TRUE)) |&gt; \n  filter(time %in% c(11))\n\nggplot(tomato_tbl, \n       aes(time, diameter, color = variety, \n           group = variety)) +\n  theme_minimal() +\n  ## geom_point2(position = position_dodge(0.5)) +\n  stat_summary(fun = \"mean\", geom = \"line\") +\n  stat_summary(fun = \"mean\", geom = \"point\", size = 1) +\n  ## stat_summary(fun = \"median\", geom = \"line\", linetype = 2) +\n  scale_color_metro() +\n  theme(legend.position = \"top\") +\n  scale_x_continuous(breaks = 2:11, expand = expansion(mult = c(0.1, .1))) +\n  labs(x = \"Zeitpunkte der Messung\", y = \"Mittleres Fruchtdurchmesser [cm]\",\n       color = \"Sorte\") +\n  geom_text_repel(data = ggrepel_tbl, aes(x = 11, y = mean, label = variety), show.legend = FALSE,\n                  nudge_x = 0.5, hjust = \"left\", size = 3, segment.color = \"gray80\")\n\n\n\n\n\n\n\n\nAbbildung 81.3— Das Fruchtwachstum von fünfzehn Tomatensorten über zehn Wochen unter Trockenstress.",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#concordance-correlation-coefficient-ccc",
    "href": "app-spielecke.html#concordance-correlation-coefficient-ccc",
    "title": "81  Spielecke",
    "section": "Concordance Correlation Coefficient (CCC)",
    "text": "Concordance Correlation Coefficient (CCC)\nKann auch in technische Gleichheit mit rein\n\n\nR Code [zeigen / verbergen]\nnirs_wide_tbl &lt;- read_excel(\"data/nirs_qs_data.xlsx\") |&gt; \n  clean_names()\n\nnirs_long_tbl &lt;- nirs_wide_tbl |&gt; \n  pivot_longer(cols = jd_ts:last_col(),\n               values_to = \"values\",\n               names_to = c(\"method\", \"type\"),\n               names_sep = \"_\") |&gt; \n  mutate(gulleart = as_factor(gulleart),\n         method = as_factor(method),\n         type = as_factor(type))\n\n\nWarning: Expected 2 pieces. Additional pieces discarded in 3 rows [3, 8, 13].\n\n\nTechnical note: Validation and comparison of 2 commercially available activity loggers\nUser’s guide to correlation coefficients\nConcordance correlation coefficient calculation in R",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#sql-als-dbplyr",
    "href": "app-spielecke.html#sql-als-dbplyr",
    "title": "81  Spielecke",
    "section": "81.1 SQL als {dbplyr}?",
    "text": "81.1 SQL als {dbplyr}?\nDas R Paket {dbplyr} Database Queries With R\n\n\n\n\n\n\nAnwendungsbeispiel: Klinische Studien und das weibliche Geschlecht\n\n\n\nIn dem Buch Eve: How the Female Body Drove 200 Million Years of Human Evolution von Miksanek (2023)",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#tabset",
    "href": "app-spielecke.html#tabset",
    "title": "81  Spielecke",
    "section": "Tabset",
    "text": "Tabset\n\nTheoretischHändischR {base}Excel",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#links",
    "href": "app-spielecke.html#links",
    "title": "81  Spielecke",
    "section": "Links",
    "text": "Links\nStatistische Funktionen (Referenz) in Excel\nDyson Sphere\nCancer Paradox\nR Library Contrast Coding Systems for categorical variables\n\n\nR Code [zeigen / verbergen]\nanage_tbl &lt;- read_delim(\"data/anage_data.txt\", delim = \"\\t\")\n\n\n\n\nR Code [zeigen / verbergen]\ndie_risk_tbl &lt;- tibble(age = c(25, 60, 80, 100, 108),\n                       risk = c(0.1, 1, 6, 16, 50))\n\nfit_nls &lt;- nls(risk ~ b0 + I(b1^(age)), data = die_risk_tbl, \n           start = c(b0 = 1, b1 = 1))\n\nhand_func &lt;- \\(x) {-5 + 1.037^(x * 0.97)}\n\nggplot(die_risk_tbl, aes(age, risk)) +\n  theme_minimal() +\n  geom_point() +\n  geom_line(aes(y = predict(fit_nls)), size = 1, color = \"#CC79A7\") +\n  geom_function(fun = hand_func, color = \"#009E73\", size = 1,\n                xlim = c(25, 110)) \n\n\n\n\n\n\n\n\n\nArea under the curve larger than 1?\nWhy We Die: And How We Live: The New Science of Ageing and Longevity\nHere’s Waldo: Computing the optimal search strategy for finding Waldo\nWaldbrände und Dürren: Wie Korkeichen in Portugal den Klimawandel stoppen sollen\nStock assessment models overstate sustainability of the world’s fisheries and Modelling seasonal data with GAMs\nKarnickelsterben nun auch in Bremen\nJagd in Niedersachsen\nEin Kind meiner Zeit Galenus von Pergamon - Leben und Werk\nI Will Fucking Piledrive You If You Mention AI Again\nPlötzlich sah ich den entscheidenden Graphen\n\nAmoc sind riesige Wasserzirkulationen im Ozean, zu denen auch der Golfstrom gehört. Sie sorgen dafür, dass wir in Europa mildes Klima haben. Wenn dieses System zusammenbricht, würde es in den Niederlanden oder Deutschland etwa zehn bis zwanzig Grad kälter werden.\n\nAtmospheric Response to a Collapse of the North Atlantic\nAtlantic meridional overturning circulation\nThe 2,500-Year-Old History of Adults Blaming the Younger Generation\nGoals Gone Wild: The Systematic Side Effects of Over-Prescribing Goal Setting",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#paper-ideen",
    "href": "app-spielecke.html#paper-ideen",
    "title": "81  Spielecke",
    "section": "Paper Ideen",
    "text": "Paper Ideen\nBeide Paper dann mit den jeweiligen FAOSTAT Suchen verbinden.\nFood and agriculture data\nMit dem R Paket {FAOSTAT} und der Vignette FAOSTAT: Download Data from the FAOSTAT Database\nEsoteric beliefs and CAM impact SARS-CoV-2 immunization drivers, uptake and pediatric immunization views in Germany\nTierpaper\n\nArginine Nutrition in Neonatal Pigs\nFiber effects in nutrition and gut health in pigs\nPhosphorus nutrition of growing pigs\nImplications of sorghum in broiler chicken nutrition\nProposed bursa of fabricius weight to body weight ratio standard in commercial broilers\nGrowth, efficiency, and yield of commercial broilers from 1957, 1978, and 2005\n\nPflanzenpaper\n\nHoverfly pollination enhances yield and fruit quality in mango under protected cultivation\nPlant Growth, Yield, and Fruit Size Improvements in ‘Alicia’ Papaya Multiplied by Grafting\nGrowth, yield, plant quality and nutrition of basil (Ocimum basilicum L.) under soilless agricultural systems\nGrowing Hardier Crops for Better Health: Salinity Tolerance and the Nutritional Value of Broccoli\nInfluence of Light Intensity and Spectrum on Duckweed Growth and Proteins in a Small-Scale, Re-Circulating Indoor Vertical Farm",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#zitate",
    "href": "app-spielecke.html#zitate",
    "title": "81  Spielecke",
    "section": "Zitate",
    "text": "Zitate\nCopycat\n\n“” —\n\n\n\n“The days can be easy if the years are consistent. You can write a book or get in shape or code a piece of software in 30 minutes per day. But the key is you can’t miss a bunch of days.” — James Clear\n\n\n“Find what you love and let it kill you.” — Charles Bukowski\n\n\n“In einer Klasse lernt der Lehrer am meisten…” — anonym\n\n\n“My God, it’s full of stars.” — 2001, A Space Odessey\n\n\n“Der Sinn des Lebens besteht darin, deine Gabe zu finden. Der Zweck des Lebens ist, sie zu verschenken.” — Pablo Picasso\n\n\n“If you are allowed one wish for your child, seriously consider wishing him or her optimism. Optimists are normally cheerful and happy, and therefore popular; they are resilient in adapting to failures and hardships, their chances of clinical depression are reduced, their immune system is stronger, they take better care of their health, they feel healthier than others and are in fact likely to live longer. Optimistic individuals play a disproportionate role in shaping our lives. Their decisions make a difference; they are the inventors, the entrepreneurs, the political and military leaders – not average people. They got to where they are by seeking challenges and taking risks. They are talented and they have been lucky, almost certainly luckier than they acknowledge… the people who have the greatest influence on the lives of others are likely to be optimistic and overconfident, and to take more risks than they realize.” — Daniel Kahneman, Thinking, Fast and Slow\n\n\n“Above all, do not lose your desire to walk: every day I walk myself into a state of well-being and walk away from every illness; I have walked myself into my best thoughts, and I know of no thought so burdensome that one cannot walk away from it. Even if one were to walk for one’s health and it were constantly one station ahead—I would still say: Walk! Besides, it is also apparent that in walking one constantly gets as close to well-being as possible, even if one does not quite reach it—but by sitting still, and the more one sits still, the closer one comes to feeling ill. Health and salvation can be found only in motion… if one just keeps on walking, everything will be all right.” — Soren Kierkegaard\n\n\n“Numerical quantities focus on expected values, graphical summaries on unexpected values.” — John Tukey\n\n\n“Nobody belongs anywhere, nobody exists on purpose, everybody’s going to die.” — Rick and Morty\n\n\n“To celebrate the noun do the verb.” — Ryan Holiyday\n\n\n“The formulation of a problem is often more essential than its solution, which may be merely a matter of mathematical or experimental skill. To raise new questions, new possibilities, to regard old problems from a new angle requires creative imagination and marks real advances in science” — Albert Einstein\n\n\n“The whole world is a very narrow bridge and the main thing is to have no fear at all.” — Kol Ha’Olam Kulo\n\n\n“The graveyard is full of ‘irreplaceable’ and important people.” — Charles De Gaulle and others\n\n\n“20 years from now, the only people who will remember that you worked late are your kids.” — David Clarke on r/antiwork\n\n\n“You have to finish things — that’s what you learn from, you learn by finishing things.” — Neil Gaiman in Advice to Aspiring Writers\n\n\n“Je größer die Insel des Wissens, desto größer der Strand der Verzweiflung.” — unbekannt\n\n\n“Leben heißt leiden, überleben heißt, im Leiden einen Sinn finden.” — Friedrich Nietzsche\n\n\n“Wachstum ist nicht alles, das ist wahr. Aber ohne Wachstum ist alles nichts.” — Angela Merkel\n\n\n“Competition is for losers!” — Peter Thiel\n\n\n“Das Pferd frisst keinen Gurkensalat” — Philipp Reis erster 1981 telefonisch übertragende Satz\n\n\n“One glance at a book and you hear the voice of another person perhaps someone dead for thousands of years. Across the millennia the author is speaking clearly and silently inside your head, directly to YOU.” — Carl Sagan\n\n\n“If you feel safe in the area that you’re working in, you’re not working in the right area. Always go a little further into the water than you feel you’re capable of being in. Go a little bit out of your depth, and when you don’t feel that your feet are quite touching the bottom, you’re just about in the right place to do something exciting.” – David Bowie\n\n\n“(1) Alles was es schon gab, als Du geboren wurdest, ist normal und gewöhnlich. Diese Dinge werden als natürlich wahrgenommen und halten die Welt am Laufen. (2) Alles was zwischen Deinem 16ten und 36ten Lebensjahr erfunden wird ist neu, aufregend und revoltionär. Und vermutlich kannst Du in dem Bereich sogar Karriere machen. (3) Alles was nach dem 36ten Lebensjahr erfunden wird ist gegen die natürliche Ordnung der Dinge.” — Douglas Adams, Per Anhalter durch die Galaxis\n\n\n“Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.” — Brian Kernighan, professor at Princeton University.\n\n\n“The three stages of career development are: 1. I want to be in the meeting; 2. I want to run the meeting; 3. I want to avoid meetings.” — Jay Ferro\n\n\n“Freude ist ein Akt des Trotzes. Mit Freude gewinnen wir, auch wenn wir verlieren. Gut gelebt zu haben ist alles was uns bleibt, denn sterben müssen wir alle.” — Jaghatai Khan, The Lost and the Damned\n\n\n“Freude ist ein Akt des Trotzes. Durch sie gewinnen wir, auch wenn wir verlieren. Denn sterben müssen wir alle und ein schönes Leben ist alles was uns bleibt.” — Jaghatai Khan, The Lost and the Damned\n\n\n“[Alice Munro] habe sich, erzählte sie einmal, die Sätze ihrer Erzählungen jeweils beim Kartoffelschälen ausgedacht und diese, während die Kartoffeln kochten, zwischendurch im Wohnzimmer notiert.” — Alice Munro & Die Kunst des Nebenbeischreibens\n\n\n“Gott würfelt nicht!” — Albert Einstein",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#korrelation",
    "href": "app-spielecke.html#korrelation",
    "title": "81  Spielecke",
    "section": "Korrelation",
    "text": "Korrelation\nHow does Polychoric Correlation Work? (aka Ordinal-to-Ordinal correlation)\nAn Alternative to the Correlation Coefficient That Works For Numeric and Categorical Variables",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#pakete-die-ich-mal-anschauen-will",
    "href": "app-spielecke.html#pakete-die-ich-mal-anschauen-will",
    "title": "81  Spielecke",
    "section": "Pakete, die ich mal anschauen will…",
    "text": "Pakete, die ich mal anschauen will…\nR Paket {collapse}\nR Paket {ggdist}\nDas R Paket {visibly} auf An Introduction to Visibly\nR Paket {innsight}\n{snakecase}\n{visdat}\nMake an R Cheat Sheet\n{vroom}\n{gt}",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#learning-text",
    "href": "app-spielecke.html#learning-text",
    "title": "81  Spielecke",
    "section": "Learning text",
    "text": "Learning text\nWachsamkeit und Konzentration kann ein Mensch nur für 90 Minuten halten. Selbst dann ist Aufmerksamkeit ein Flackern von höherer und niedrigerer Intensität. Danach muss der Mensch 1-2 Stunden lang wirklich ruhen, bevor er wieder sehr hart arbeiten & lernen kann.\nFolgende Dinge, die innerhalb von 4 Stunden nach diesen 90-minütigen Lerneinheiten durchgeführt werden, beschleunigen das Lernen.\n\nKurzes Nickerchen\nNichtschlafende tiefe Ruhe (NSDR)\nYoga Nidra\nFormen der Meditation, die nicht viel fokussierte Konzentration erfordern,\n\nFolgende Dinge helfen während der Lernphase das Lernen zu verstärken und zu festigen. Der Hippocampus wiederholt während dieser Zeit die Informationen mit 20-facher Geschwindigkeit und beschleunigt das Lernen und das Behalten der neu gelernten Informationen.\n\nMache ab und zu 10 Sekunden Pause vom Lernen, in denen du absolut nichts tust\nMache den Kopf frei (Lückeneffekt/Mikropausen),\nInkrementelles Lernen. Du kannst das Lernen in kleine, konzentrierte Einheiten aufteilen.\nStelle dir einen Timer für 3 Minuten ein, schalte das Telefon aus und verbringe die 3 Minuten damit, eine Sache intensiv zu lernen, auch wenn es sich anfühlt, als würde es aktuell nichts bringen.\nWenn du das wiederholt tust, können diese kleinen Schritte des Lernens zu einer übergroßen Menge des Lernens insgesamt führen.\n\nHow to Learn Anything You Want | Andrew Huberman",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#weitere-datenquellen",
    "href": "app-spielecke.html#weitere-datenquellen",
    "title": "81  Spielecke",
    "section": "Weitere Datenquellen",
    "text": "Weitere Datenquellen\nFood and agriculture data\nMit dem R Paket {FAOSTAT} und der Vignette FAOSTAT: Download Data from the FAOSTAT Database\nMit dem R Paket {owidR} haben wir auch eine Möglichkeit direkt auf die Datenbank von Our World in Data zuzugreifen.\n\n\nR Code [zeigen / verbergen]\nlibrary(owidR)\nfoo &lt;- owid_search(\"annual\") \nowid(\"annual-co2-emissions-by-region\")\nowid(foo[3])\n\n\nEine wunderbare Sammlung von Datensätzen aus dem Bereich der Agarwissenschaften liefert das R Paket {agridat}. Über die Hilfeseite agridat: Agricultural Datasets findest du dann einmal einen gesamten Überblick und auch die Informationen über einige ausgewählte Datensätze aus Dutzenden von Datensätzen. Alle Datensätze der wichtigen Bücher zu dem experimentellen Designs sind dort eigentlich enthalten und einmal kuratiert.\nHier noch der Link zu agridat - Datensätze mit Abbildungen in {desplot}. Du musst dann auf die jeweiligen Datensätze in der Liste klicken und dann kommst du zu dem Datensatz mit mehr Details sowie meistens auch einer Abbildung in desplot.",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#marginal-effects",
    "href": "app-spielecke.html#marginal-effects",
    "title": "81  Spielecke",
    "section": "Marginal effects",
    "text": "Marginal effects\nMarginal Effects Zoo\nR Paket {marginaleffects}\nMarginal and conditional effects for GLMMs with {marginaleffects}\nMarginalia: A guide to figuring out what the heck marginal effects, marginal slopes, average marginal effects, marginal effects at the mean, and all these other marginal things are",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#latent-class-analysis",
    "href": "app-spielecke.html#latent-class-analysis",
    "title": "81  Spielecke",
    "section": "Latent Class Analysis",
    "text": "Latent Class Analysis\nWie immer gibt es eine Reihe von Tutorien auf denen dieser Abschnitt aufbaut. Zum einen wirf einfach mal einen Blick in das Tutorium Latent Class Analysis Using R. Eine leider etwas veraltete Übersicht über mögliche R Pakete liefert Ways to do Latent Class Analysis in R. Ich habe da immer mal quer geschaut und mich dann für die Pakete hier entschieden. Es gibt sicherlich noch andere Möglichkeiten eine latent class analysis zu rechnen.\nWenn du mehr über latent class analysis erfahren möchtest, dann kann ich dir nur das LCA Frequently Asked Questions (FAQ) empfehlen. Das FAQ ist sehr umfangreich und beschäftigt sich mit allen wichtigen Punkten. Wir wollen uns ja mit dem R Paket poLCA beschäftigen. Hier gibt es zwei Tutorien. Einmal gibt es das Tutorium Example for a latent class analysis with the poLCA-package in R und das Tutroium Latent Class Analysis. Und natürlich die Litertur von Linzer & Lewis (2011) mit der entsprechenden Veröffentlichung poLCA: An R Package for Polytomous Variable Latent Class Analysis\nGrundsätzlich basiert die latent class analysis nicht auf Distanzen sondern versucht über eine Modellierung der Klassenzugehörigkeitswahrscheinlichkeit getrennte Gruppen zu bilden. Wir wollen also \\(k\\) Klassen haben und im idealen Fall können wir durch unsere Variablen in dem Datensatz jeweils mit einer 100% Wahrscheinlichkeit einer der drei Klassen zuordnen. Was dann diese \\(k\\) Klassen aussagen, müssen wir dann selber anhand der zugewiesenen Variablen aus unseren Daten interpretieren.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, janitor, conflicted)\n\nanimals_tbl &lt;- read_excel(\"data/cluster_animal.xlsx\", sheet = 1) |&gt; \n  clean_names() \n\n\n\n\nR Code [zeigen / verbergen]\npacman::p_load(poLCA)\n\npoLCA(cbind(warm_blooded, fly, vertebrate, threatened, live_in_groups) ~ 1,\n      nclass = 3,\n      data = animals_tbl,\n      nrep = 1,\n      na.rm = FALSE,\n      graphs = TRUE,\n      maxiter = 100000\n)\n\n\nHier hängen wir dann an der Interpretation. Da müssen wir nochmal tiefer schauen.",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#structural-equation-modeling",
    "href": "app-spielecke.html#structural-equation-modeling",
    "title": "81  Spielecke",
    "section": "Structural Equation Modeling",
    "text": "Structural Equation Modeling\nVan Lissa et al. (2023) tidySEM\nStructural Equation Modeling\nIntroduction to structural equation modeling (sem) in r with lavaan\nIntro to structural equation modeling\nSchöne Diagramme Structural Equation Models",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#links-quellen",
    "href": "app-spielecke.html#links-quellen",
    "title": "81  Spielecke",
    "section": "Links & Quellen",
    "text": "Links & Quellen\nLarge language models, explained with a minimum of math and jargon\nData Science\n\nReal World Data Liu & Panagiotakos (2022)\nWarum Data Science Hariri et al. (2019)\nParadigmenwechsel?",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "app-spielecke.html#referenzen",
    "href": "app-spielecke.html#referenzen",
    "title": "81  Spielecke",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nHariri, R. H., Fredericks, E. M., & Bowers, K. M. (2019). Uncertainty in big data analytics: survey, opportunities, and challenges. Journal of Big Data, 6(1), 1–16.\n\n\nLinzer, D. A., & Lewis, J. B. (2011). poLCA: An R package for polytomous variable latent class analysis. Journal of statistical software, 42, 1–29.\n\n\nLiu, F., & Panagiotakos, D. (2022). Real-world data: a brief review of the methods, applications, challenges and opportunities. BMC Medical Research Methodology, 22(1), 287.\n\n\nMiksanek, T. (2023). Eve: How the Female Body Drove 200 Million Years of Human Evolution. Booklist, 120(1), 8–9.\n\n\nVan Lissa, C. J., Villarreal, M. G., & Anadria, D. (2023). Best Practices in Latent Class Analysis using the Open-Source R-Package tidySEM.",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>81</span>  <span class='chapter-title'>Spielecke</span>"
    ]
  },
  {
    "objectID": "construction-zone.html",
    "href": "construction-zone.html",
    "title": "82  Baustelle",
    "section": "",
    "text": "82.1 Genutzte R Pakete\nLetzte Änderung am 09. July 2025 um 11:10:44\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, gtsummary, marginaleffects, emmeans, scales,\n               ggpmisc, readxl, conflicted)\nconflicts_prefer(dplyr::mutate)\nconflicts_prefer(dplyr::summarize)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(ggplot2::annotate)\ncb_pal &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \n            \"#009E73\", \"#F0E442\", \"#F5C710\", \n            \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n## \nnice_number &lt;- label_number(style_negative = \"minus\", accuracy = 0.01)\nnice_p &lt;- label_pvalue(prefix = c(\"p &lt; \", \"p = \", \"p &gt; \"))\nfind_intercept &lt;- function(x1, y1, slope) {\n  intercept &lt;- slope * (-x1) + y1\n  return(intercept)\n}\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#daten",
    "href": "construction-zone.html#daten",
    "title": "82  Baustelle",
    "section": "82.2 Daten",
    "text": "82.2 Daten\n\n\nR Code [zeigen / verbergen]\nflea_model_tbl &lt;- read_excel(\"data/fleas_model_data.xlsx\") |&gt; \n  mutate(feeding = as_factor(feeding),\n         stage = as_factor(stage),\n         bonitur = as.numeric(bonitur),\n         infected = factor(infected, labels = c(\"healthy\", \"infected\"))) |&gt; \n  select(feeding, stage, jump_length, weight, hatched, count_leg,  bonitur, infected)",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#hypothesen",
    "href": "construction-zone.html#hypothesen",
    "title": "82  Baustelle",
    "section": "82.3 Hypothesen",
    "text": "82.3 Hypothesen\n\\[\nZ=\\frac{h(\\hat{\\theta})-H_0}{\\sqrt{\\hat{V}[h(\\hat{\\theta})]}}\n\\]\n\n\nR Code [zeigen / verbergen]\nfeeding_fit = lm(jump_length ~ 0 + feeding, data = flea_model_tbl)\ncoef(feeding_fit)\n\n\nfeedingsugar_water       feedingblood     feedingketchup \n          63.08062           75.43938           65.71313 \n\n\n\n\nR Code [zeigen / verbergen]\nsummary(feeding_fit) |&gt; coef()\n\n\n                   Estimate Std. Error  t value     Pr(&gt;|t|)\nfeedingsugar_water 63.08062   4.791469 13.16519 4.878067e-17\nfeedingblood       75.43938   4.791469 15.74452 6.366735e-20\nfeedingketchup     65.71313   4.791469 13.71461 1.109930e-17\n\n\n\\[\nZ = \\cfrac{\\hat{\\beta_1}-H_0}{\\sqrt{\\widehat{V}[\\beta_1]}} = \\cfrac{75.43938 - 0}{4.791469} = 15.74\n\\]\n\n\nR Code [zeigen / verbergen]\n2*pt(15.74452, df = 45, lower.tail = FALSE)\n\n\n[1] 6.366696e-20\n\n\n\n\nR Code [zeigen / verbergen]\nfeeding_fit &lt;-  lm(jump_length ~ feeding * stage, data = flea_model_tbl)\ncoef(feeding_fit)\n\n\n                 (Intercept)                 feedingblood \n                    68.89000                     13.18500 \n              feedingketchup                stagejuvenile \n                    12.24625                    -11.61875 \n  feedingblood:stagejuvenile feedingketchup:stagejuvenile \n                    -1.65250                    -19.22750",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#prädiktion",
    "href": "construction-zone.html#prädiktion",
    "title": "82  Baustelle",
    "section": "82.4 Prädiktion",
    "text": "82.4 Prädiktion\n\n\nR Code [zeigen / verbergen]\nsimple_tbl &lt;- flea_model_tbl |&gt; \n  filter(stage == \"adult\")\nsimple_fit &lt;- lm(jump_length ~ feeding, simple_tbl)\ncoef(simple_fit)\n\n\n   (Intercept)   feedingblood feedingketchup \n      68.89000       13.18500       12.24625 \n\n\n\n\nR Code [zeigen / verbergen]\npredictions(simple_fit)\n\n\n\n Estimate Std. Error     z Pr(&gt;|z|)     S 2.5 % 97.5 %\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     68.9       6.99  9.86   &lt;0.001  73.7  55.2   82.6\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     82.1       6.99 11.74   &lt;0.001 103.4  68.4   95.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n     81.1       6.99 11.61   &lt;0.001 101.1  67.4   94.8\n\nType: response\n\n\nR Code [zeigen / verbergen]\navg_predictions(simple_fit)\n\n\n\n Estimate Std. Error    z Pr(&gt;|z|)     S 2.5 % 97.5 %\n     77.4       4.04 19.2   &lt;0.001 269.8  69.5   85.3\n\nType: response\n\n\n\n\nR Code [zeigen / verbergen]\nplot_predictions(simple_fit, by = \"feeding\")\n\n\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nsimple_2_tbl &lt;- flea_model_tbl |&gt; \n  filter(stage == \"adult\")\nsimple_2_fit &lt;- lm(jump_length ~ weight*feeding, simple_2_tbl)\ncoef(simple_2_fit)\n\n\n          (Intercept)                weight          feedingblood \n           53.9050671             0.8849805             3.4948660 \n       feedingketchup   weight:feedingblood weight:feedingketchup \n           10.7610352             1.0294849             0.4498506 \n\n\n\n\nR Code [zeigen / verbergen]\nsimple_2_fit |&gt; broom::augment()\npredictions(simple_2_fit)\navg_predictions(simple_2_fit, by = \"feeding\")\n\ntibble(weight = simple_2_tbl$weight,\n       jump_length = simple_2_tbl$jump_length, \n       feeding = simple_2_tbl$feeding,\n       estimate = predictions(simple_2_fit)$estimate) |&gt; \n  ggplot(aes(weight, estimate, shape = feeding)) +\n  geom_point(aes(weight, jump_length), color = \"blue\") +\n  geom_point(color = \"red\") +\n  geom_line(aes(y = predict(simple_2_fit))) +\n  geom_hline(yintercept = avg_predictions(simple_2_fit, by = \"feeding\")$estimate)\n\n\n\n\nR Code [zeigen / verbergen]\nplot_predictions(simple_2_fit, by = c(\"weight\", \"feeding\"))",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#counterfactual",
    "href": "construction-zone.html#counterfactual",
    "title": "82  Baustelle",
    "section": "82.5 Counterfactual",
    "text": "82.5 Counterfactual\n\n\nR Code [zeigen / verbergen]\navg_comparisons(feeding_fit,\n    by = \"stage\",\n    variables = list(\"feeding\" = \"pairwise\"),\n    vcov = \"HC3\")\n\n\n\n              Contrast    stage Estimate Std. Error       z Pr(&gt;|z|)   S  2.5 %\n blood - sugar_water   adult      13.185       7.79  1.6934   0.0904 3.5  -2.08\n ketchup - blood       adult      -0.939      12.29 -0.0764   0.9391 0.1 -25.03\n ketchup - sugar_water adult      12.246      11.10  1.1029   0.2701 1.9  -9.52\n blood - sugar_water   juvenile   11.532       7.86  1.4679   0.1421 2.8  -3.87\n ketchup - blood       juvenile  -18.514       7.53 -2.4579   0.0140 6.2 -33.28\n ketchup - sugar_water juvenile   -6.981       3.89 -1.7946   0.0727 3.8 -14.61\n 97.5 %\n 28.445\n 23.149\n 34.010\n 26.931\n -3.751\n  0.643\n\nTerm: feeding\nType: response",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#weitere-r-pakete",
    "href": "construction-zone.html#weitere-r-pakete",
    "title": "82  Baustelle",
    "section": "82.6 Weitere R Pakete",
    "text": "82.6 Weitere R Pakete\nDas R Paket {modelbased}",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#marginal-effects-models",
    "href": "construction-zone.html#marginal-effects-models",
    "title": "82  Baustelle",
    "section": "82.7 Marginal effects models",
    "text": "82.7 Marginal effects models\n\n82.7.1 Kontrafaktische Vergleiche\nKontrafaktische Vergleiche (eng. counterfactual)\n\n\n\n\n\n\nAbbildung 82.2— foo. Modifiziert nach Heiss (2022)\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq &lt;- lm(jump_length ~ weight*I(weight^2)*feeding + count_leg,\n                   data = flea_model_tbl)\ntidy(model_grp_sq)\n\n\n# A tibble: 13 × 5\n   term                                estimate std.error statistic p.value\n   &lt;chr&gt;                                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 (Intercept)                        49.9        36.5      1.37      0.180\n 2 weight                              1.10       11.7      0.0939    0.926\n 3 I(weight^2)                         0.0620      0.950    0.0653    0.948\n 4 feedingblood                      -13.2        92.9     -0.142     0.888\n 5 feedingketchup                     -7.04       68.1     -0.103     0.918\n 6 count_leg                          -0.00280     0.0113  -0.248     0.806\n 7 weight:I(weight^2)                 -0.00306     0.0223  -0.137     0.891\n 8 weight:feedingblood                 7.05       27.8      0.254     0.801\n 9 weight:feedingketchup               0.527      20.7      0.0255    0.980\n10 I(weight^2):feedingblood           -0.565       2.30    -0.245     0.808\n11 I(weight^2):feedingketchup          0.0551      1.80     0.0305    0.976\n12 weight:I(weight^2):feedingblood     0.0143      0.0536   0.267     0.791\n13 weight:I(weight^2):feedingketchup   0.000125    0.0468   0.00268   0.998\n\n\n\n\nR Code [zeigen / verbergen]\ncfct_data &lt;- datagrid(model = model_grp_sq,\n                      weight = c(5, 15),\n                      grid_type = \"counterfactual\")\n\n\n\n\nR Code [zeigen / verbergen]\nnrow(flea_model_tbl)\n\n\n[1] 48\n\n\nR Code [zeigen / verbergen]\nnrow(cfct_data)\n\n\n[1] 96\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_cfct &lt;- model_grp_sq |&gt; \n  slopes(datagrid(weight = c(5, 15),\n                  grid_type = \"counterfactual\"),\n         variables = \"weight\")\n\nrbind(head(mfx_cfct), tail(mfx_cfct))\n\n\n\n Estimate Std. Error     z Pr(&gt;|z|)   S 2.5 % 97.5 %\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     1.49       4.01 0.372    0.710 0.5 -6.37   9.35\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n     3.16       2.20 1.436    0.151 2.7 -1.15   7.46\n\nTerm: weight\nType: response\nComparison: dY/dX\n\n\n\n\nR Code [zeigen / verbergen]\nmfx_cfct |&gt; \n  group_by(weight) |&gt; \n  summarize(avg_slope = mean(estimate))\n\n\n# A tibble: 2 × 2\n  weight avg_slope\n   &lt;dbl&gt;     &lt;dbl&gt;\n1      5      2.68\n2     15      1.57\n\n\n\n\nR Code [zeigen / verbergen]\nmodel_grp_sq |&gt; \n  avg_slopes(newdata = datagrid(weight = c(5, 20),\n                                grid_type = \"counterfactual\"),\n             variables = \"weight\",\n             by = c(\"weight\", \"feeding\"))\n\n\n\n weight     feeding Estimate Std. Error       z Pr(&gt;|z|)   S  2.5 % 97.5 %\n      5 sugar_water    1.490       4.01  0.3716    0.710 0.5  -6.37   9.35\n      5 blood          3.965       7.99  0.4959    0.620 0.7 -11.70  19.63\n      5 ketchup        2.578       5.16  0.4991    0.618 0.7  -7.54  12.70\n     20 sugar_water   -0.097       2.13 -0.0456    0.964 0.1  -4.26   4.07\n     20 blood          1.532       1.68  0.9136    0.361 1.5  -1.75   4.82\n     20 ketchup        2.784       5.72  0.4870    0.626 0.7  -8.42  13.99\n\nTerm: weight\nType: response\nComparison: dY/dX",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#analyse-von-zeitreihen",
    "href": "construction-zone.html#analyse-von-zeitreihen",
    "title": "82  Baustelle",
    "section": "82.8 Analyse von Zeitreihen",
    "text": "82.8 Analyse von Zeitreihen\nHier nochmal {mgcv} und {gamm4}\nIntroduction to Generalized Additive Mixed Models\ns() und Interaktion mit s(x_1, by = f_1)",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#links",
    "href": "construction-zone.html#links",
    "title": "82  Baustelle",
    "section": "82.9 Links",
    "text": "82.9 Links\n\nMixed\nMixed II\nMarginal and conditional effects for GLMMs with {marginaleffects} | Andrew Heiss – Andrew Heiss\nR Paket {gapminder}\nGapminder\nLists are my secret weapon for reporting stats with knitr - Higher Order Functions\nVisualizing {dplyr}’s mutate(), summarize(), group_by(), and ungroup() with animations | Andrew Heiss – Andrew Heiss",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "construction-zone.html#referenzen",
    "href": "construction-zone.html#referenzen",
    "title": "82  Baustelle",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nHeiss, A. (2022, Mai 20). Marginalia: A Guide to Figuring Out What the Heck Marginal Effects, Marginal Slopes, Average Marginal Effects, Marginal Effects at the Mean, and All These Other Marginal Things Are. https://doi.org/10.59350/40xaj-4e562",
    "crumbs": [
      "Abspann",
      "<span class='chapter-number'>82</span>  <span class='chapter-title'>Baustelle</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html",
    "href": "stat-modeling-basic.html",
    "title": "45  Multiple lineare Regression",
    "section": "",
    "text": "45.1 Allgemeiner Hintergrund\nLetzte Änderung am 06. August 2025 um 13:42:41\nIn diesem Kapitel geht es um die multiple lineare Regression. Der große Unterschied zu der simplen linearen Regression ist, dass wir in der multiplen Regression mehr als eine Einflussvariable vorliegen haben. Damit wird unser Modell um einiges komplexer. Hier gibt es jetzt gewisse Überschneidungen mit den Marginal effect models, die im Prinzip die Erweiterung der multiplen Regression sind. Wir können mit den Marginal effect models eben dann doch etwas anders lineare und nicht linare Regressionen interpretieren. Damit kannst du in dem Kapitel dann mehr über eine alternative Art der Interpretation von multiplen Modellen lernen. Ebenso gehe nicht hier so stark auf das Modellieren in R ein. Hier kannst du dann in dem entsprechenden Kapitel auch nochmal mehr lesen. Hier zeige ich dann die Basisanwendungen. Am Ende habe ich mich auch entschieden hier nur einen normalverteilten Messwert zu betrachten. Sonst wird es einfach viel zu komplex, wenn wir hier noch andere Verteilungen berücksichtigen. Dazu dann mehr in den entsprechenden Kapiteln zur statistischen Modellierung.\nWenn wir über die multiple lineare Regression sprechen, dann sprechen wir immer über mehr als eine Einflussvariable. Dadurch können wir den Fall haben, dass wir nicht nur eine Kovariate sondern mehrere Kovariaten in einem Modell vorliegen haben. Zum Beispiel wollen wir wissen, ob die Sprungweite von dem Gewicht der Flöhe oder der Anzahl an Beinhaaren abhängt. Wir haben hier also mehrere kontinuierliche Einflussvariablen vorliegen. Ebenso können wir den Fall haben, dass uns nur kategoriale Einflussvariablen interessieren. Hat die Ernährungsform oder aber der Entwicklungsstand einen Einfluss auf die Sprungweite der Flöhe. Klassischerweise wären wir hier zwar auf dem ANOVA Pfad eines faktoriellen Experiments, aber wir können natürlich die Koeffzienten eines mehfaktoriellen Modells in der Form einer multiplen Regression interpretieren. Wenn wir dann keinen normalverteilten Messwert haben, dann bietet sich natürlich dennoch die multiple Regression als eine Analyseform an. Abschließend können wir natürlich auch kombinierte Modelle vorliegen haben. Wir haben also in unseren multiple Modell nicht nur Kovariaten oder Faktoren sondern eben eine Mischung aus beiden Formen. Das führt dann zu einer noch komplexeren Interpretation. Alle Fälle wollen wir uns hier in diesem Kapitel einmal an einem normalverteilten Messwert anschauen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#allgemeiner-hintergrund",
    "href": "stat-modeling-basic.html#allgemeiner-hintergrund",
    "title": "45  Multiple lineare Regression",
    "section": "",
    "text": "“This idea of ‘holding everything constant’ though can be tricky to wrap your head around.” — Andrew Heiss\n\n\n\nSprachlicher Hintergrund\n\n“In statistics courses taught by statisticians we don’t use independent variable because we use independent on to mean stochastic independence. Instead we say predictor or covariate (either). And, similarly, we don’t say”dependent variable” either. We say response.” — User berf auf r/AskStatistics\n\nWenn wir uns mit dem statistischen Modellieren beschäftigen wollen, dann brauchen wir auch Worte um über das Thema reden zu können. Statistik wird in vielen Bereichen der Wissenschaft verwendet und in jedem Bereich nennen wir dann auch Dinge anders, die eigentlich gleich sind. Daher werde ich mir es hier herausnehmen und auch die Dinge so benennen, wie ich sie für didaktisch sinnvoll finde. Wir wollen hier was verstehen und lernen, somit brauchen wir auch eine klare Sprache.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Jeder nennt in der Statistik sein Y und X wie er möchte. Da ich hier nicht nur von Y und X schreiben will, führe ich eben die Worte ein, die ich nutzen will. Damit sind die Worte dann auch richtig, da der Kontext definiert ist. Andere mögen es dann anders machen. Ich mache es eben dann so. Danke.” — Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.\n\n\n\n\nIn dem folgenden Kasten erkläre ich nochmal den Gebrauch meiner Begriffe im statistischen Testen. Es ist wichtig, dass wir hier uns klar verstehen. Zum einen ist es angenehmer auch mal ein Wort für ein Symbol zu schreiben. Auf der anderen Seite möchte ich aber auch, dass du dann das Wort richtig einem Konzept im statistischen Modellieren zuordnen kannst. Deshalb einmal hier meine persönliche und didaktische Zusammenstellung meiner Wort im statistischen Modellieren. Du kannst dann immer zu dem Kasten zurückgehen, wenn wir mal ein Wort nicht mehr ganz klar ist. Die fetten Begriffe sind die üblichen in den folgenden Kapiteln. Die anderen Worte werden immer mal wieder in der Literatur genutzt.\n\n\n\n\n\n\nWorte und Bedeutungen im statistischen Modellieren\n\n\n\n\n“Die Grenzen meiner Sprache bedeuten die Grenzen meiner Welt.” — Ludwig Wittgenstein\n\nHier kommt einmal die Tabelle mit den wichtigsten Begriffen im statistischen Modellieren und wie ich die Worte benutzen werde. Damit wir uns verstehen und du was lernen kannst. In anderen Büchern und Quellen findest du teilweise die Worte in einem anderen Sinnzusammenhang. Das ist gut so dort. Bei mir ist es anders.\n\n\n\nTabelle 45.1— Zusammenfassende Tabelle des Sprachgebrauchs in meinem statistischen Modellieren. Die fett hervorgehobenen Bezeichnungen werden hier genutzt. (LHS = left hand side, RHS = right hand side)\n\n\n\n\n\n\n\n\n\n\n\n\nSymbol\nDeutsch\nEnglisch\n\n\n\n\nLHS\n\\(Y\\) / \\(y\\)\nMesswert / Endpunkt / Outcome / Abhängige Variable\nresponse / outcome / endpoint / dependent variable\n\n\nRHS\n\\(X\\) / \\(x\\)\nEinflussvariable / Erklärende Variable / Fester Effekt / Unabhängige Variable\nrisk factor / explanatory / fixed effect / independent variable\n\n\nRHS\n\\(Z\\) / \\(z\\)\nZufälliger Effekt\nrandom effect\n\n\n\\(X\\) ist kontinuierlich\n\\(c_1\\)\nKovariate 1\ncovariate 1\n\n\n\\(X\\) ist kategorial\n\\(f_A\\)\nFaktor \\(A\\) mit Level \\(A.1\\) bis \\(A.j\\)\nfactor \\(A\\) with levels \\(A.1\\) to \\(A.j\\)\n\n\n\n\n\n\nAm Ende möchte ich nochmal darauf hinweisen, dass wirklich häufig von der abhängigen Variable (eng. dependent variable) als Messwert und unabhängigen Variablen (eng. independent variable) für die Einflussvariablen gesprochen wird. Aus meiner Erfahrung bringt die Begriffe jeder ununterbrochen durcheinander. Deshalb einfach nicht diese Worte nutzen.\n\n\n\n\n\n\nAbbildung 45.1— Am Ende läuft es dann doch auf sowas raus…\n\n\n\n\n\n\n\nWie multiple Einflussvariablen interpretieren?\nWie schon im Zitat am Anfang erwähnt, heißt die Regel, dass wir jeden Koeffizienten unseres Modell nur in soweit interpretieren können, wenn sich die anderen Einflussvariablen nicht ändern. Das klingt jetzt kryptisch und macht eigentlich nur Sinn, wenn man schon alles verstanden hat. Deshalb hier einmal die Analogie mit Schaltern und Schieberegelern. Wir können eine kategoriale Variable oder Faktor durch die Level durchschalten. Daher können wir uns den Effekt von weiblichen oder männlichen Flöhen anschauen. Es gibt aber nur diese beiden Möglichkeiten. Entweder steht der Schalter auf männlichen Floh oder aber auf weiblichen Floh. Etwas anderes ist es wenn wir uns eine Kovariate vorliegen haben. Eine kontinuierliche Einflussvariable können wir beliebig einstellen. Wir können das Gewicht eines Flohs eben hin und herschieben um einen Wert zu haben.\n\n\n\n\n\n\nAbbildung 45.2— Unterschied zwischen einer kategorialen Variable und einer kontinuierlichen Variable in einem statistischen Modell visualisiert als Schalter und Schieberegler. Übersetzt nach Heiss (2022)\n\n\n\nIn einer multiplen Regression kombinieren wir nun alles miteinander. Wir haben eben eine Art Mischpult vorliegen. Auf unserem Mischpult finden wir eben Schalter und Schieberegler. Wir haben dann auch in unserem Modell Faktoren und Kovariaten vorliegen. Dann können wir auch Schalter auf verschiedene Positionen setzen und die Regler verschieden einstellen.\n\n\n\n\n\n\nAbbildung 45.3— Kombination verschiedener kategorialer Variablen und kontinuierlichen Variablen in einem statistischen Modell visualisiert als Mischpult. Übersetzt nach Heiss (2022)\n\n\n\nWorher kommt nun die Interpretation, dass wir eine Einflussvaribale nur interpretieren können, wenn wir den Rest der Einflussvariablen konstant halten? Wenn wir an dem Schieberegler des Gewichts der Flöhe drehen, dann müssen die anderen Schalter und Regler still stehen. Wir interpretieren dann eben das sich änderende Gewicht, für weibliche Flöhe unter der Ernährung mit Ketchup. Wir können nicht global das gesmate Modell interpretieren. Einen Ausweg bieten die Marginal effect models, aber diese werden wir in diesem Kapitel nur am Rande behandeln. Dafür ist das Thema zu komplex. Daher behalte ich Kopf, wenn wir später einzelne Einflussvariablen betrachten, dann tuen wir das immer im Kontext fixierter anderer Einflussvariablen.\n\n\nEine Frage der Einheit!\nDie Einheit von den Messwerten oder auch Kovariaten hat einen nicht zu unterschätzenden Einfluss auf die Interpretation der Koeffizienten oder eben der Effekt einer multiplen linearen Modellierung. Da wir ja mehrere Einflussvariablen vorliegen haben bist du schnell dabei die Koeffizienten der Steigung untereinander zu vergleichen. Dann kommt man schnell zu einem Schluss der eventuell nicht wahr ist. Ich zeige dir hier einmal in der folgenden Abbildung den Fall, wo wir visuell die gleiche Steigung in den Daten vorliegen haben. Was sich aber in den beiden Abbildungen fundamental unterscheidet ist die Einheit der Kovariate.\n\n\n\n\n\n\nAbbildung 45.4— Der Zusammenhang von Hohlstrunk Boniturnote und Kopfgewicht sowie Strunkdurchmesser. In dem Beispiel ist gut der Zusammenhang zwischen der Steigung und der Einheit der Kovariate zu erkennen.\n\n\n\nIn der linken Abbildung ist der Koeffizient der Steigung des Kopfgewichts \\(0.021\\) mehr mittlere Boniturnote pro Gramm Kopfgewicht. Das wirkt sehr klein. Im Gegensatz ist der Koeffizient der Steigung des Strunkdurchmessers \\(5.15\\) mehr mittlere Boniturnoten pro Zentimeter Strunkdurchmesser. Es wirkt als hätte der Strunkdurchmesser einen viel größeren Effekt als das Gewicht auf die Boniturnoten. Das ist aber ein Trugschluss, wie wir dann gleich nochmal sehen werden. Ich zeige dir den Zusammenhang hier nochmal in der Tabelle.\n\n\n\nTabelle 45.2— Vergleich vom Kopfgewicht und dem Strunkdurchmesser nach Gradengleichung, Bestimmtheitsmaß und dem Faktor der Steigung für Strunkdurchmesser.\n\n\n\n\n\n\n\n\n\n\n\nKopfgewicht [g]\nStrunkdurchmesser [cm]\n\n\n\n\nGradengleichung\n\\(y = 0.021 \\cdot x - 8.42\\)\n\\(y = 5.15 \\cdot x - 16.65\\)\n\n\nBestimmtheitsmaß\n\\(R^2 = 0.74\\)\n\\(R^2 = 0.93\\)\n\n\nFaktor Steigung\n\\(\\times1\\)\n\\(\\times 245.24\\)\n\n\n\n\n\n\nWir würden jetzt meinen, dass der Effekt des Strunkdurchmessers 245mal größer ist als der des Kopfgewichts. Das ist aber ein Trugschluss! Wir haben die Einheiten nicht beachtet. Die Spannweite bei dem Kopfgewicht geht von etwas über 450 Gramm bis fast 750 Gramm. Daher ist die Steigerung um eine Einheit nur eine kleine Menge mehr an Boniturnote. Bei dem Strunkdurchmesser haben wir als kleinsten Wert 3.5cm und als höchsten Wert 5cm für die Grade. Erhöhen wir den Strunkdurchmesser um 1 Zentimeter durchlaufen wir fast die gesamte Spannweite. Wenn du für den Vergleich eine einheitslose Steigung brauchst, dann schaue nochmal in dem Kapitel zur Korrelation vorbei oder weiter unten in dem entsprechenden Abschnitt zur Einheit.\n\n\nWie verschiedene Modelle darstellen?\nHäufig stellt sich dann die Frage, wie so multiple Regressionsmodelle dargestellt werden können. Daher hier gleich einmal vorweg ein Beispiel für eine Darstellung einer multiplen linearen Regression in einer wissenschaftlichen Arbeit. In der Arbeit Energy expenditure and obesity across the economic spectrum von McGrosky et al. (2025) wird die multiple lineare Regression genutzt um den Zusammenhang von Energieaufnahme und dem Energieverbauch in veschiedenen Entwicklungsstufen von Ländern zu modellieren. Dabei kommt eigentlich ein recht spannendes Ergebnis heraus, wenn ich das einmal sehr kanpp zitieren darf. Es kommt eben mehr auf die Energieaufnahme als auf den Verbrauch an. Oder anders herum, wenn du abnehmen willst achte auf dein Essen und nicht so sehr auf deine Bewegung.\n\n“Our analyses suggest that increased energy intake has been roughly 10 times more important than declining total energy expenditure (TEE) in driving the modern obesity crisis.” — McGrosky et al. (2025)\n\nIn der folgenden Tabelle siehst du dann eimal das multiple lineare Modell mit dem prozentualen Körperfettanteil als Messwert. Es wurden dann acht verschiedene multiple Modelle gerechnet und in jedem Modell wurden andere Einflussvariablen aufgenommen. In der vorletzten Zeile findest du dann noch das Bestimmtheitsmaß \\(R^2\\), was dir angibt wie gut das Modell funktioniert hat. Hier wollen wir eigentlich einen Wert gegen Eins sehen, aber in Beobachtungsdaten wie hier, ist eine höhere Zahl erstmal eine bessere Zahl.\n\n\n\n\n\n\n\nLineare Modelle für den Einfluss des Anteils ultraverarbeiteter Lebensmittel in der Ernährung (Anteil an der gesamten Kalorienaufnahme, %UPF) und des Fleischkonsums (kg pro Kopf) auf den Körperfettanteil. Signifikante Effekte (*p&lt;0,05, **p&lt;0,01, ***p&lt;0,001) in Fettdruck, negative Effekte in Blau. Quelle: McGrosky et al. (2025)\n\n\nWas sagt uns jetzt die Tabelle aus? Zuerst einmal rechnen wir hier acht Modelle in den Spalten der Tabelle, die wir dann untereinander vergleichen. Wir nehmen verschiedene Einflussvariablen mit in das Modell, die alle in den Zeilen stehen. Teilweise ist das bei kategorialen Variablen wie dem Geschlecht die Gruppe angegeben. Wie interpretieren wir nun diese Tabelle? Hier einmal ein Auszug zu dem Einfluss des Fleischkonsum (eng. per capita meat consumption) in den letzten drei Spalten auf den Messwert Körperfetrprozent.\n\n“[…], per capita meat consumption, another dietary change associated with development, was not significantly associated with fat percentage when added to models including percent ultraprocessed foods (UPF) [i.e., industrial formulations of five or more ingredients (29)]” — McGrosky et al. (2025)\n\nWas lesen wir hier? Wenn wir den Fleischkonsum zusammen mit den hochverarbeiteten Lebensmittel mit ins Modell nehmen, dann wird der Fleichkonsum nicht signifikant. Dies ist eine Art eine multiple lineare Regression zu rechnen und die Einflussvariablen untereinander zu vergleichen. Mehr dazu dann in den folgenden Abschnitten und den entsprechenden Kapiteln zur statistischen Modellierung.\n\n\n\n\n\n\nDefintion von hochverarbeiteten Lebensmittel (eng. ultraprocessed foods)\n\n\n\nWir können in der Abrbeit von Gibney (2019) nocheinmal nachlesen, was die aktuelle Definition eines hochverarbeiteten Lebensmittel (eng. ultraprocessed foods) ist. Das ist ja immer wieder ein Streitpunkt, der aktuell ja auch noch offen ist. Wir halten uns einmal an die folgende Definition.\n\n“Industrial formulations typically with 5 or more and usually many ingredients. Besides salt, sugar, oils, and fats, ingredients of ultra-processed foods include food substances not commonly used in culinary preparations, such as hydrolyzed protein, modified starches, and hydrogenated or interesterified oils, and additives whose purpose is to imitate sensorial qualities of unprocessed or minimally processed foods and their culinary preparations or to disguise undesirable qualities of the final product, such as colorants, flavorings, nonsugar sweeteners, emulsifiers, humectants, sequestrants, and firming, bulking, de-foaming, anticaking, and glazing agents.” — Gibney (2019)\n\n\n\nIn diesem Kapitel findest du dann noch am Ende einige Abschnitte zu Dingen von Interesse. Wenn wir nämlich über den Effekt sprechen, dann müssen wir auch nochmal über die Einheiten von den Einflussvariablen sprechen. Wenn diese sehr unterschiedliche sind, dann kann das zu Problemen führen. Auch können Einflussvariablen mit sehr großen numerischen Werten ein Problem in der Interpretation sein. Dann schauen wir nochmal auf die Korrelation der Einflussvariablen. Eigentlich sollten ja alle Einflussvariablen untereinander unabhängig sein. Dann wollen wir nochmal schauen, wie wir den verschiedene multiple Modelle untereinander vergleichen können um das beste multiple Modell zu finden.\nJetzt kommen wir aber nochmal zu dem theoretischen Hintergrund. Wir wollen hier nochmal gleich verstehen, wie die multiplen Modelle aufgebaut sind und wie die Modelle in R dargestellt werden. Wenn du dich mit dem allgemeinen Hintergrund zufrieden gibst, dann kannst du auch gerne direkt in die Beispiele und deren Auswertung springen. Oder eben dann nochmal später zurückkommen, wenn der Bedarf besteht.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#theoretischer-hintergrund",
    "href": "stat-modeling-basic.html#theoretischer-hintergrund",
    "title": "45  Multiple lineare Regression",
    "section": "45.2 Theoretischer Hintergrund",
    "text": "45.2 Theoretischer Hintergrund\nIn dem theoretischen Hintergrund der multiplen Modelle bleibe ich etwas oberflächlich und gehe nicht auf die mathematischen Hintergründe tiefer ein. Das lohnt hier auch nicht weiter. In den Anwendungen habe ich dann immer noch die theoretische Berechnung in R ergänzt, die dir dann nochmal zeigt, wie in R intern die Modelle gerechnet werden. Ganz allgemein kann ich das Buch von Kéry (2010) wärmstens empfehlen. Dort habe ich viel über die Modelle und die Berechnungen gelernt. In dem Zusammenhang kann ich auch noch Dormann (2013) empfehlen, wenn es um die Maximum Likelihood Methode geht, die dort gut beschrieben ist. Ich gebe hier dann die Zusammenfassung wieder.\nBeginnen wir nochmal mit dem klassischen statistischen Modell in der folgenden Abbildung. Wir haben Daten vorliegen, die wir in ein Modell und einen Fehler zerlegen wollen. Das liest sich sehr allgemein, in der Praxis haben wir auf der linken Seite den beobachteten Messwert Y stehen und auf der linken Seite das Modell aus dem der erklärte Anteil am Y rauskommt. Die Differenz zu den beobachteten Messwerten ist dann der Fehler. Somit ist unser Modell die Kombination aus dem Messwert und unseren Einflussvariablen. Was die Einflussvariablen an dem Messwert nicht erklären können wandert in den Fehler. Somit wollen wir einen geringen Fehler in unserer Modellierung.\n\n\n\n\n\n\n\n\nAbbildung 45.5— Der Zusammenhang von Daten, dem statistischen Modell und dem Fehler. Das Modell versucht durch ein statistisches Modell \\(f(x)\\) den Zusammenhang zwischen den Einflussvariablen dem Messwert zu erklären. Den Anteil des unerklärten Messwert geht in den Fehlerterm. [Zum Vergrößern anklicken]\n\n\n\n\n\nErinnern wir uns nochmal an das simple und multiple lineares Modell. Die beiden Modelle entscheiden sich durch die Anzahl an Einflussvariablen. In der folgenden Abbildung siehst du nochmal das simple lineare Modell. Wir haben hier eine Einflussvariable X. Dann kommen noch die Koeffizienten \\(\\beta_0\\) für den Intercept und der Koeffizient \\(\\beta_1\\) für die Steigung der eine Einflussvariable hinzu. Alles was wir nicht durch die Grae erklären können, wandert dann in die Residuen oder Fehler \\(\\epsilon\\). Eine klassische Gradengleichung mit einer Einflussvariable.\n\n\n\n\n\n\n\n\nAbbildung 45.6— Formelschreibweise der simplen linearen Regression beinhaltend die Koeffizienten \\(\\beta_0\\) für den y-Achsenabschnitt sowie \\(\\beta_1\\) für die Steigung der Graden für eine Einflussvariable \\(x_1\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]\n\n\n\n\n\nIn diesem Kapitel erweitern wir das simple lineare Modell um mehr Einflussvariablen. Dann erhalten wir ein multiples lineares Modell wie in der folgenden Abbildung. Meistens haben wir dann mehr als zwei Einflussvariablen sondern eben \\(p\\) Stück. Jede dieser Einflussvariablen hat dann eine eigene Stigung. Wir haben dann aber immer noch nur einen Intercept vorliegen. Auch haben wir dann am Ende nur einen Wert für die Residuen oder Fehler. Die Einflussvariablen können eine beliebige Kombination an Kovariten und Faktoren sein.\n\n\n\n\n\n\n\n\nAbbildung 45.7— Formelschreibweise der multiplen linearen Regression beinhaltend die Koeffizienten \\(\\beta_0\\) für den y-Achsenabschnitt sowie \\(\\beta_1\\) bis \\(\\beta_p\\) für die partielle Steigung der Graden für jede Einflussvariable \\(x_1\\) bis \\(x_p\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]\n\n\n\n\n\nJetzt können wir uns nochmal die Formelschreibweise in R anschauen. Wir brauchen hier natürlich nicht die Koeffizienten zu benennen, denn wir wollen die Werte für die Steigung und den Intercept ja durch die multiple Regression bestimmen. Wir schreiben dann auf die linke Seite der Tilde ~ unseren Messwert und auf die rechte Seite dann die Einflussvariablen durch ein Plus + miteinander verbunden. Wir lernen dann im Kapitel zum Modellieren in R noch andere Möglichkeiten in der Formelschreibweise in R. Häufig reichen die Grundlagen aber aus.\n\n\n\n\n\n\n\n\nAbbildung 45.8— Statistische Modellschreibweise in R mit dem Messwert auf der linken Seite und den Einflussvariablen auf der rechten Seite der Tilde. Die Platzhalter \\(Y\\) und \\(X\\) werden durch die Spaltennamen im Datensatz ersetzt. [Zum Vergrößern anklicken]\n\n\n\n\n\nJetzt könnte man meinen, so kompliziert ist es ja dann doch nicht. Dafür musst du aber noch wissen, dass wir nicht nur eine Art von Messwert vorliegen haben. Jeder Messwert auf der linken Seite der Tilde folgt einer Verteilung. Zwar sind die Arten der Verteilungen in etwa begrenz, aber wir haben doch einige vorliegen. Daher müssen wir abhängig von der Verteilunsgfamilie noch die Regression ändern. In der folgenden Abbildung habe ich dir einmal den Zusammenhang der schrecklich netten Verteilunsgfamilie zusammengefasst. Wir müssen eben entscheiden, welcher Verteilungsfamilie unser Messwert angehört und dann eben schauen, wie unsere Einflussvariablen beschaffen sind. Daraus ergibt sich dann die Interpretation des statistischen Modells. Mehr dazu dann in den folgenden Abschnitten und den entsprechenden Kapiteln zur statistischen Modellierung.\n\n\n\n\n\n\n\n\nAbbildung 45.9— Erweiterte Darstellung der statistischen Modellierung. Die Messwerte \\(Y\\) folgen einer Verteilung. Die Einflussvariablen liegen kontinuierlich als Kovariaten oder aber kategorial als Faktoren vor. [Zum Vergrößern anklicken]\n\n\n\n\n\nDamit sind wir hier für das erste auch durch mit der theoretischen Betrachtung. Ich habe dann bei dem kausalen Modellen immer noch einen Tab ergänzt in dem ich mehr auf die Hinetrgründe eingehe. Wir wollen hier aber nichts händsich rechnen, so dass ich mich auf die praktsiche Umsetzung in R konzentriere. Teilweise gibt es dann wieder Überschneidungen mit der ANOVA oder anderen Kapiteln, aber das ist dann eben auch so gewollt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWenn du jetzt denkst ‘Hä? Was soll denn mehrdimensional bedeuten?’, dann besuche doch einmal die fantastische Seite Explained Visually | Ordinary Least Squares Regression um selber zu erfahren, was eine multiple lineare Regression macht. Auf der Seite findest du interaktive Abbildungen, die dir das Konzept der linearen Regression sehr anschaulich nachvollziehen lassen.\n\n\n\n\n\n\n\n\n\n\nWeitere Tutorien für die multiple lineare Regression\n\n\n\nWir immer geht natürlich mehr als ich hier Vorstellen kann. Du findest im Folgenden Tutorien, die mich hier in dem Kapitel inspiriert haben. Ich habe mich ja in diesem Kapitel auf die Durchführbarkeit in R und die allgemeine Verständlichkeit konzentriert.\n\nWir funktioniert nun so eine lineare Regression und was sind den jetzt eigentlich die Koeffizienten \\(\\beta_0\\) und \\(\\beta_1\\) eigentlich? Hier gibt es die fantastische Seite Explained Visually | Ordinary Least Squares Regression, die dir nochmal erlaubt selbe mit Punkten in einem Scatterplot zu spielen und zu sehen wie sich dann die Regressionsgleichung ändert.\nDas Buch Tidy Modeling with R gibt nochmal einen tieferen Einblick in das Modellieren in R. Wir immer, es ist ein Vorschlag aber kein Muss.\nDas R Paket {jtools} gibt nochmal Möglichkeiten sich schnönere summary() Ausgaben erstellen zu lassen.\nDas R Paket {modelsummary} ist perfekt dafür geeignet nochmal verschiedene Modelle miteinander zu vergleichen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#genutzte-r-pakete",
    "href": "stat-modeling-basic.html#genutzte-r-pakete",
    "title": "45  Multiple lineare Regression",
    "section": "45.3 Genutzte R Pakete",
    "text": "45.3 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom, correlation, jtools,\n               see, performance, car, parameters, modelsummary,\n               ggpmisc, tinytable, conflicted)\nconflicts_prefer(magrittr::set_names)\nconflicts_prefer(ggplot2::annotate)\ncbbPalette &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \n                \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#daten",
    "href": "stat-modeling-basic.html#daten",
    "title": "45  Multiple lineare Regression",
    "section": "45.4 Daten",
    "text": "45.4 Daten\nIn diesem Kapitel schauen wir uns zwei Datensätze an. Zum einen den Datensatz zu den Sprungweiten von Flöhen und anderen Messwerten. Eigentlich ein faktorielles Experiment mit zwei Faktoren und einiges an spannenden Kovariaten. An diesem Datensatz können wir dann die verschiedenen multiplen Regressionen einmal nachvollziehen. Als zweiten Datensatz habe ich Schlangen mitgebracht. Der Datensatz ist super klein und auch sehr künstlich, da wir uns hier nur die theoretischen Berechnungen in R anschauen wollen. Da brauche ich nicht viel und da habe ich diesen Datensatz dann genutzt.\n\nModellierung von Flöhen\n\n\n\n\n\n\nAbbildung 45.10— In unseren Daten zu der Modellierung der Flöhe schauen wir auf verschiedene Ernährungsformen sowie Entwicklungsstadien und fragen uns, ob sich die Sprungweiten und andere Messwerte unterscheiden.\n\n\n\nDer folgende Datensatz zu den Sprungweiten und anderen Messwerten von juvenilen und adulten Flöhen ist von mir so gebaut, dass wir hier usn einige Aspekte der multiplen Regression gut anschauen können. Als Hauptfaktor haben wir hier drei verschiedene Ernährungsformen vorliegen und betrachten als zweiten Faktor eben den Entwicklungsstand der Flöhe. Dazu kommen dann noch eine ganze Reihe von Einflussvariablen wie das Gewicht und Laborwerte. Insgesamt also ein sehr großer Datensatz. Wir schauen uns dann aber immer nur einzelene Kombinationen von Einflussvariablen an. Als meinen Messwert nehme ich dann immer die Sprungweite als einen normalverteilten Messwert.\n\n\nR Code [zeigen / verbergen]\nflea_model_tbl &lt;- read_excel(\"data/fleas_model_data.xlsx\") |&gt; \n  mutate(feeding = as_factor(feeding),\n         stage = as_factor(stage),\n         bonitur = as.numeric(bonitur),\n         infected = as_factor(infected))\n\n\nDa der Datensatz so groß ist, schaue ich mir hier nicht alle möglichen Abbildungen an sondern gebe dir hier einmal einen Auszug aus der Tabelle wieder. Wie du siehst haben wir einiges an Möglichkeiten mit den Daten. Wir haben hier verschiedene Einflussvariablen sowie verschiedene Messwerte vorliegen.\n\n\n\n\nTabelle 45.3— Tabelle der Modelldaten zu den Sprungweiten und den Ernährungsformen von juvenilen und adulten Flöhen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.id\nfeeding\nstage\nweight\nhatched\nK\nMg\nCRP\nHb\nBSG\njump_length\ncount_leg\ncount_leg_left\ncount_leg_right\nbonitur\ninfected\nM\n\n\n\n\n1\nsugar_water\nadult\n16.42\n516.41\n33.67\n17.8\n9.74\n108.18\n50.31\n7.72\n63\n64\n62\n4\n1\n3971.61\n\n\n2\nsugar_water\nadult\n12.62\n363.5\n41.93\n17.54\n8.22\n112.81\n47.63\n5.62\n55\n56\n54\n1\n0\n2064.13\n\n\n3\nsugar_water\nadult\n15.57\n303.01\n39.41\n17.11\n7.55\n96.17\n47.42\n7.34\n112\n112\n111\n2\n0\n1763.43\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n46\nketchup\njuvenile\n7.18\n429.18\n32.45\n19.53\n15.67\n81.7\n15.6\n8.33\n423\n420\n425\n4\n1\n20623.49\n\n\n47\nketchup\njuvenile\n6.6\n629.58\n28.84\n21.37\n15.27\n80.79\n19.44\n10.44\n548\n548\n547\n5\n1\n25149.36\n\n\n48\nketchup\njuvenile\n4.19\n192.66\n26.61\n20.06\n13.95\n80.32\n16.07\n13.02\n869\n872\n866\n5\n0\n21972.23\n\n\n\n\n\n\n\n\nIn den folgenden Abschnitten nehem ich dann immer wieder einzelne Einflussvariablen und kombiniere diese miteinander in ein statistsiches Modell. Dabei nehme ich als Messwert immer die Sprungweite der Flöhe. Mehr Informationen findest du dann im Kapitel zu von der Modellierung der Flöhe. Dort sind dann auch die Einheiten und übersichtliche Abbildungen zu finden.\n\n\nTheoretischer Datensatz\n\n\n\n\n\n\n\nIn unseren theoretischen Datensatz schauen wir uns die Körperlängen von verschiedenen Schlangen mit unterschiedlichen Einflussvariablen an. Wir schauen uns die Körperfarbe sowie die Regionen der Messung an.\n\n\nAbschließend kommen wir noch zu einem theoretischen Datensatz dem ich Kéry (2010) entlehnt habe. Ich möchte nochmal zeigen, wie R intern mit der Modellmatrix die Berechnungen durchführt. Das hat mich interessiert und deshalb habe ich es einmal für mein Verständnis aufgeschrieben. Wenn es dich auch interessiert, dann kannst du in den entsprechenden Tabs weiter unten einmal nachschauen. Hier also erstmal ein sehr simpler theoretischer Datensatz zu Körperlängen von Schlangen. Wir müssen hier dann noch die Faktoren einmal umwandeln, damit wir auch später die Modellmatrix sauber vorliegen haben. Deshalb hier die explizite Benennung der Level der Faktoren in dem Datensatz.\n\n\nR Code [zeigen / verbergen]\nsnake_tbl &lt;- read_xlsx(\"data/regression_data.xlsx\", sheet = \"theory_mult\") |&gt; \n  mutate(region = factor(region, levels = c(\"west\", \"nord\")),\n         color = factor(color, levels = c(\"schwarz\", \"rot\", \"blau\")))\n\n\nIn der folgenden Tabelle ist der Datensatz snake_tbl nochmal dargestellt. Wir haben die Schlangenlänge svl als Messwert sowie das Gewicht der Schlangen mass sowie den Durchmesser der Schlange \\(diameter\\) als kontinuierliche Einflussvariable, die Sammelregion region und die Farbe der Schlangen color und als kategoriale Einflussvariablen mit unterschiedlichen Anzahlen an Gruppen. Die Region region ist also ein Faktor mit zwei Leveln und die Schlangenfarbe color ein Faktor mit drei Leveln. Ich nutze den Datensatz also einmal als einen Spieldatensatz um die Modellierung theoretisch besser nachvollziehen zu können.\n\n\n\n\nTabelle 45.4— Datensatz zu den Körperlängen als Messwert von acht Schlangen mit verschiedenen Einflussvariablen. Die Einflussvariablen haben verschiedene Eigenschaften und müssen daher unterschiedliche modelliert werden.\n\n\n\n\n\n\nsvl\nmass\ndiameter\nregion\ncolor\n\n\n\n\n40\n6\n9\nwest\nschwarz\n\n\n45\n8\n3\nwest\nschwarz\n\n\n39\n5\n6\nwest\nrot\n\n\n51\n7\n7\nnord\nrot\n\n\n52\n9\n5\nnord\nrot\n\n\n57\n11\n4\nnord\nblau\n\n\n58\n12\n10\nnord\nblau\n\n\n49\n10\n11\nnord\nblau\n\n\n\n\n\n\n\n\nDamit haben wir dann auch die beiden Datensätze zusammen. Im Folgenden gehe ich dann einmal auf das kausale Modell sowie das prädktive Modell ein. Hier nimmt das kausale Modell mehr Platz ein, da wir eigentlich in der multiplen Regression mehr an dem Zusammenhang interessiert sind. Die Prädiktion ist aber immer mehr im Vormarsch und es kommt hier wirklich auf deine Fragestellung an. Es kann sogar sein, dass du mit vorgesagten Werten mehr Informationen aus deinen Daten ziehen kannst, als mit einem kausalen Modell.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#kausales-modell",
    "href": "stat-modeling-basic.html#kausales-modell",
    "title": "45  Multiple lineare Regression",
    "section": "45.5 Kausales Modell",
    "text": "45.5 Kausales Modell\nWas ist das kausale Modell? Wir wollen wissen, welchen Einfluss die Einflussvariablen auf den Messwert haben. Das ist jetzt erstmal einleuchtend. Wir bauen uns ein Modell und wollen wissen, ob es einen kausalen Zusammenhang zwischen einzelnen Kovariaten oder Faktoren und einem Messwert gibt. Dabei müssen nicht alle Kovariaten und alle Faktoren einen signifikanten Einfluss haben. Es geht hier eher um eine Art vor und zurück. Wir probieren verschiedene Modell aus und wollen das beste Modell finden. Dafür müssen wir abr verstehen, was die Interpretation der einzelnen Modell ist. Daher schauen wir uns jetzt einmal rein kovariate Modelle, reine faktorielle Modelle und Kombinationen davon an.\n\n45.5.1 Mehrkovariates Modell\nBeginnen wir mit einem mehrkovariaten Modell. Im Gegensatz zu einem einkovaraten Modell in der simplen linearen Regression haben wir jetzt nicht mehr nur eine Kovariate sondern mindestens zwei Kovariaten im Modell. Für die Interpretation nutzen wir hier nur ein zweikovariates Modell inhaltlich lässt sich das Modell aber auch auf mehr als zwei Kovariaten erweitern. In der folgenden Abbildung siehst du einmal das Modell dargestellt. Wir haben einen Messwert auf der linken Seite und zwei Kovariaten auf der rechten Seite. Wir wollen jetzt wissen, wie die beiden Kovariaten den Messwert erklären.\n\n\n\n\n\n\n\n\nAbbildung 45.11— Schemantisches multiples Modell mit einem Messwert \\(Y\\) und zwei kontinuierlichen Einflussvariablen als Kovariate \\(c_1\\) und Kovariate \\(c_2\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\nDie Grundidee ist in der folgenen Abbildung einmal dargestellt. Du kennst dich ja schon mit der simplen linearen Regression aus. In dem mehrkovariaten Fall haben wir nun im zweikovariaten Fall einen Scatterplit in drei Dimensionen vorliegen. Je mehr Kovariaten desto hoöher wird die Dimension. Ich kann aber nicht einen vier dimensionalen Scatterplot darstellen, daher hier die Einschränkung auf zwei Kovariaten. Wie du siehst zeichnen wir jetzt nicht eine Grade im eigentlichen Sinne sondern eine Ebene durch die Punkte hindurch. Dennoch wird der quadratische Abstand zu den Punkten eben über diese Ebene minimiert. Wir erhalten somit auch nur für jede einzelne Beobachtung einen Wert für die Residuen wieder.\n\n\n\n\n\n\nAbbildung 45.12— Ein 3D Scatterplot von zwei Kovariaten und einem Messwert Y in drei Dimensionen. Statt eine Grade wird ein Ebene (eng. regression plane) durch die Punkte im dreidimensionalen Raum gelegt. Die Residuen sind die Abweichungen der Beobachtungen zu den Werten auf der Ebene. Modifiziert nach https://stackoverflow.com/users/8770170/frans-rodenburg\n\n\n\nDie Darstellung einer multiplen linearen Regression ist vollkommen unüblich. Wir zeigen eigentlich nicht die Daten als Visualisierung sondern müssen uns dann mit statistischen Maßzahlen helfen, wenn wir wissen wollen, ob unsere Regression gelungen ist. Deshalb auch im Folgenden einmal die praktische Anwendung in R und wie wir die zweikovariate Regression interpretieren.\n\nPraktisch in RTheoretisch in RSimulation\n\n\nDann rechnen wir einmal eine zweikovariate Analyse in R. Dafür brauchen wir einmal einen normalverteilten Messwert. Das ist nicht notwendig, aber für die Interpretation gleich viel einfacher. Dann nehmen wir noch die zwei Kovariten des Flohgewichts und der mitleren Anzahl an Beinhaaren mit ins Modell. Damit haben wir also ein klassisches kovariates Modell.\n\n\nR Code [zeigen / verbergen]\ncov2_fit &lt;- lm(jump_length ~ weight + count_leg, data = flea_model_tbl) \n\n\nDann können wir uns auch schon die drei Koeffizienten für den Intercept und die Steigungen für die beiden Kovariaten wiedergeben lassen. Da wir das Modell so rechnen, dass wir beide Kovariaten mit ins Modell nehmen, haben wir hier natürlich auch jeweils für die anderen Kovariate den Effekt adjustiert. Will heißen, wir schauen uns den Effekt des Gewichts bereinigt um den Effekt der Beinhaare auf die Sprungweiten an. Und eben umgekehrt dann auch.\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)      weight   count_leg \n       5.27        0.16        0.01 \n\n\nJetzt müssen wir bei den Koeffizienten aufpassen. Ohne die Einheit, würde man denken, dass der Effekt der mittleren Beinzahl auf die Sprungweite klein wäre. Aber wir haben hier die Steigung pro Änderung der Einheit um Eins in den Einflussvariablen. Die Beinhaare haben aber eine Spannweite von 9 bis 1351! Das ist eine ganz andere Änderung als beim Gewicht mit einer Spannweite von 2.71mg bis 25.73mg. Deshalb brauchen wir auch hier dann die zusammenfassende Ausgabe um einmal die Signifikanz bewerten zu können.\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ weight + count_leg, data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.4935 -1.2840 -0.3103  0.8261  4.9542 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.2670345  0.6391923   8.240 1.55e-10 ***\nweight      0.1585790  0.0490369   3.234  0.00229 ** \ncount_leg   0.0098363  0.0008793  11.186 1.38e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.779 on 45 degrees of freedom\nMultiple R-squared:  0.7357,    Adjusted R-squared:  0.724 \nF-statistic: 62.63 on 2 and 45 DF,  p-value: 9.931e-14\n\n\nDie Zusammenfassugn ist manchmal etwas schwer zu lesen, deshalb habe ich dir einmal die Ausgabe im Folgenden annotiert. Hier siehst du dann auch sehr schön, dass die mittlere Anzahl an Haaren auf den Beinen auch signifikant ist. Ansonsten sieht unser Modell recht gut aus. die Resdiuen sind einigermaßen normalverteilt und auch das Bestimmtheitsmaß ist relativ hoch. Der Fehler der Residuen könnte mit 17.78 etwas kleiner sein. Am Ende passt das Modell.\n\n\n\n\n\n\n\n\nAbbildung 45.13— Annotierte Ausgabe der Funktion summary() aus einer linearen Modellanpassung mit der Funktion lm(). Die Ausgabe der Funktion teilt sich grob in drei informative Bereiche: Informationen zu den Residuen, Informationen zu den Koeffizienten und Informationen zu der Modelgüte. [Zum Vergrößern anklicken]\n\n\n\n\n\nWas sagt jetzt noch diese seltsame ANOVA aus? Wir scheinen hier ja noch eine ANOVA am Ende zu rechnen. Das ist hier jetzt nicht die einfaktorielle ANOVA, die wir aus den simplen linearen Regressionen kennen, sondern beinhaltet einen Modellvergleich. Welche Modelle vergleichen wir aber nun? In diesem Fall einmal das Nullmodell und das volle Modell, welches wir gerechnet haben. Was soll der Name Nullmodell bedeuten? Wir haben in diesem Modell nichts weiter außer dem Intercept. Hier einmal das Nullmodel gerechnet.\n\n\nR Code [zeigen / verbergen]\nlm(jump_length ~ 1, data = flea_model_tbl)\n\n\n\nCall:\nlm(formula = jump_length ~ 1, data = flea_model_tbl)\n\nCoefficients:\n(Intercept)  \n      9.316  \n\n\nWir erhalten also einmal den globalen Mittelwert über alle Sprungweiten wiedergeben. Jetzt können wir mit der ANOVA auch einen MOdellvergleich rechnen. Wir wollen wissen, ob sich unser volles zweifaktorielles Modell von dem Modell nur mit dem Intercept unterscheidet. Da sehen wir wieder den p-Wert wie wir ihn auch oben in der Ausgabe haben.\n\n\nR Code [zeigen / verbergen]\nanova(lm(jump_length ~ 1, data = flea_model_tbl),\n      lm(jump_length ~ weight + count_leg, data = flea_model_tbl))\n\n\nAnalysis of Variance Table\n\nModel 1: jump_length ~ 1\nModel 2: jump_length ~ weight + count_leg\n  Res.Df    RSS Df Sum of Sq      F    Pr(&gt;F)    \n1     47 538.83                                  \n2     45 142.41  2    396.42 62.632 9.931e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nBrauchen wir den Vergleich? Meistens nicht. Denn wir können ja direkt schauen, ob sich die Koeffizienten sigifkant von Nhull unterscheiden. Dann brauchen wir auch nur sehr selten den Vergleich zu dem Nullmodell. Das Nullmodell beinhaltet eigentlich nie eine Information, die wir wirklich brauchen. Daher ist es eher ein Artefakt der Programmierung aus den Anfangstagen. Wir können es, also packen wir es mit in die Ausgabe rein.\nDie folgende Abbildung dient hier nur der Anschauung. Wir publizieren eigentlich nicht eine Visualisierung in drei Dimensionen. Wie du hier schon siehst, ist die Darstellung durch die unterschiedlich Minima- und Maximawerte des Gewichts und der Anzahl an Beinhaaren sehr verdreht. Häufig sieht dann die Abbildung in drei Dimensionen nur gut aus, wenn alle drei Achsen die gleichen Spannweiten an Werten haben. Daher dient die Abbildung eher nochmal zum Verständnis der Berechnungen der Residuen aus der Ebene der Regression.\n\n\n\n\n\n\n\nEin 3D Scatterplot von den zwei Kovariaten Gewicht der Flöhe in [mg] sowie der mittleren Anzahl an Beinhaaren und der Sprungweite in drei Dimensionen. Statt eine Grade wird ein Ebene (eng. regression plane) durch die Punkte im dreidimensionalen Raum gelegt. Die Residuen sind die Abweichungen der Beobachtungen zu den Werten auf der Ebene.\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ mass + diameter, data = snake_tbl) |&gt; as_tibble() \n\n\n# A tibble: 8 × 3\n  `(Intercept)`  mass diameter\n          &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1             1     6        9\n2             1     8        3\n3             1     5        6\n4             1     7        7\n5             1     9        5\n6             1    11        4\n7             1    12       10\n8             1    10       11\n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  50 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 & 6 & 9 \\\\\n  1 & 8 & 3 \\\\\n  1 & 5 & 6 \\\\\n  1 & 7 & 7 \\\\\n  1 & 9 & 5 \\\\\n  1 & 11& 4 \\\\\n  1 & 12& 10 \\\\\n  1 & 10& 11 \\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta_{mass} \\\\\n  \\beta_{diameter} \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\ncov2_fit &lt;- lm(svl ~ mass + diameter, data = snake_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; coef() |&gt; round(2)\n\n\n(Intercept)        mass    diameter \n      28.27        2.67       -0.30 \n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n-1.56 -3.71 -0.80  6.17  1.22  0.58  0.73 -2.63 \n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  28.27 & 6 \\cdot 2.67 & 9 \\cdot -0.30 \\\\\n  28.27 & 8 \\cdot 2.67 & 3 \\cdot -0.30 \\\\\n  28.27 & 5 \\cdot 2.67 & 6 \\cdot -0.30 \\\\\n  28.27 & 7 \\cdot 2.67 & 7 \\cdot -0.30 \\\\\n  28.27 & 9 \\cdot 2.67 & 5 \\cdot -0.30 \\\\\n  28.27 & 11 \\cdot 2.67 & 4 \\cdot -0.30 \\\\\n  28.27 & 12 \\cdot 2.67 & 10 \\cdot -0.30 \\\\\n  28.27 & 10 \\cdot 2.67 & 11 \\cdot -0.30 \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  -1.56 \\\\\n  -3.71 \\\\\n  -0.80 \\\\\n  +6.17 \\\\\n  +1.22 \\\\\n  +0.58 \\\\\n  +0.73 \\\\\n  -2.63 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\nc(28.27 +  6*2.67 + 9*(-0.30) - 1.56,\n  28.27 +  8*2.67 + 3*(-0.30) - 3.71,\n  28.27 +  5*2.67 + 6*(-0.30) - 0.80,\n  28.27 +  7*2.67 + 7*(-0.30) + 6.17,\n  28.27 +  9*2.67 + 5*(-0.30) + 1.22,\n  28.27 + 11*2.67 + 4*(-0.30) + 0.58,\n  28.27 + 12*2.67 + 10*(-0.30) + 0.73,\n  28.27 + 10*2.67 + 11*(-0.30) - 2.63) |&gt; round()\n\n\n[1] 40 45 39 51 52 57 58 49\n\n\n\n\nR Code [zeigen / verbergen]\nsnake_tbl |&gt; pull(svl)\n\n\n[1] 40 45 39 51 52 57 58 49\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_tbl &lt;- tibble(c_1 = rnorm(10, 0, 1),\n                   c_2 = rnorm(10, 0, 1),\n                   y = 2 + \n                       1 * c_1 + \n                       2 * c_2 + \n                           rnorm(10, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + c_2, cov2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1         c_2 \n          2           1           2 \n\n\n\n\n\n\n\n45.5.2 Mehrfaktorielles Modell\nBetrachten wir nun ein mehrfaktorielles Modell. Hier sei aber gleich gesagt, dass wir eigentlich in einem mherfaktoriellen Modell an den Vergleichen der Level in den Faktoren interessiert sind. Wir wollen also eigentlich einen paarweisen Vergleich über die Gruppen rechnen. Damit sind wir dann auf dem ANOVA Pfad mit der ANOVA und den Post-hoc Tests. Wir schauen uns hier also erstmal die Koeffizienten des Modells an, sehr häufig nutzen wir diese Koeffizienten dann aber nicht. Das hat den Grund, dass der Referenzwert ja der Interecept im Modell ist und wir wenig an dem Vergleich zu dem Intercept interessiert sind. Dazu dann aber gleich mehr. Hier dann erstmal das zweifaktorielle Modell mit dem Interaktionsterm. Zu der Interaktion kannst du im Kapitel zur ANOVA mehr erfahren.\n\n\n\n\n\n\n\n\nAbbildung 45.14— Schemantisches multiples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln sowie einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln und deren Interaktion \\(f_A \\times f_B\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\nIm Folgenden wollen wir also einmal ein multiples Modell rechnen und die Koeffizienten für die einzelnen Faktoren ermitteln. Dabei hat es dann eine Auswirkung wie viele Level ein Faktor hat und wie wir das Modell bauen. Wir machen hier gleich das volle Modell mit Interaktion. Ohne die Interaktion lassen sich dann die Koeffizienten etwas leichter zu interpretieren. Am Ende ist es dann doch die ANOVA, die wir eigentlich wollen. Hier also bitte nicht verwirren lassen, es kommt immer auf die wissenschaftliche Fragestellung an.\n\nPraktisch in RTheoretisch in RSimulation\n\n\nBeginnen wir wieder mit dem zweifaktoriellen Modell. Wir nehmen hier beide Faktoren mit ins Modell und wollen auch den Interaktionsterm mit modellieren. Wenn wir den Interaktionsterm weglassen, dann können wir die Koeffizienten des Modells etwas leichter interpretieren. Wenn also unsere Interaktion nicht signifikant ist, dann kannst du die Interaktion auch aus dem Modell entfernen und so es etwas einfacher machen.\n\n\nR Code [zeigen / verbergen]\nfac2_fit &lt;- lm(jump_length ~ feeding + stage + stage:feeding, data = flea_model_tbl) \n\n\nJetzt erhalten wir die Koeffizienten des Modells mit einem Intercept und der Steigung zu den einzelnen Gruppenmittelwerten. Oder anders ausgedrückt, die Differenz der Gruppenmittelwerte zum Intercept. Dazu dann noch die Koeffizienten der Interaktion. Hier sehen wir noch nicht, ob die Koeffizienten der Interaktion signifikant sind.\n\n\nR Code [zeigen / verbergen]\nfac2_fit |&gt; \n  coef() |&gt; round(2)\n\n\n                 (Intercept)                 feedingblood \n                        7.90                         2.07 \n              feedingketchup                stagejuvenile \n                        1.32                        -1.80 \n  feedingblood:stagejuvenile feedingketchup:stagejuvenile \n                        3.43                         3.70 \n\n\nJetzt müssen wir uns einmal die Zusammenfassung des Modells wiedergeben lassen, damit wir abschätzen können, ob unsere Koeffizienten signifikant sind. Auch erhalten wir die statistischen Maßzahlen für die Modelgüte wiedergegeben. Unser Interaktion ist für beide Koeffizienten nicht signifikant, daher könnten wir die Interaktion auch aus dem Modell nehmen.\n\n\nR Code [zeigen / verbergen]\nfac2_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ feeding + stage + stage:feeding, data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.5288 -1.6616 -0.3906  1.0962 10.9900 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                     7.895      1.048   7.537 2.51e-09 ***\nfeedingblood                    2.074      1.481   1.400   0.1689    \nfeedingketchup                  1.316      1.481   0.888   0.3793    \nstagejuvenile                  -1.795      1.481  -1.212   0.2324    \nfeedingblood:stagejuvenile      3.426      2.095   1.635   0.1094    \nfeedingketchup:stagejuvenile    3.703      2.095   1.767   0.0845 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.963 on 42 degrees of freedom\nMultiple R-squared:  0.3157,    Adjusted R-squared:  0.2343 \nF-statistic: 3.876 on 5 and 42 DF,  p-value: 0.005603\n\n\nDann habe ich dir in der folgenden Abbildung nochmal die Ausgabe der Zusammenfassung annotiert. Der spannendeste Teil ist eigentlich, was der Intercept repräsentiert. Der Intercept ist nämlich das lokale Gruppenmittel der Behandlung Zuckerwasser für die adulten Flöhe. Dann haben wir die einzlenen statistischen Tests, ob sich die Koeffizienten von Null unterscheiden. Somit eigentlich die Frage, ob die lokalen Mittelwerte der Gruppen sich vom Intercept unterscheiden.\n\n\n\n\n\n\n\n\nAbbildung 45.15— Annotierte Ausgabe der Funktion summary() aus einer linearen Modellanpassung mit der Funktion lm(). Die Ausgabe der Funktion teilt sich grob in drei informative Bereiche: Informationen zu den Residuen, Informationen zu den Koeffizienten und Informationen zu der Modelgüte. Die Erklärung der Schätzer (eng. estimate) kann in der folgenden Tabelle nachvollzogen werden. [Zum Vergrößern anklicken]\n\n\n\n\n\nDas Ganze mag etwas kryptisch sein, aber das Ziel ist es eigentlich die Mittelwerte der Faktorkombinationen abzubilden. In der folgenden Tabelle habe ich dir einmal gezeigt, wie wir von den Koeffizienten auf die Mittelwerte der Sprungweiten in den einzelnen Gruppen der Faktorkombinationen kommen. Jetzt siehst du auch, dass die Koeffizienten nur einen sehr kleinen Teil der Unterschiede in den Sprungweiten beschreiben. Daher nutzen wir dann lieber Post-hoc Tests um alle paarweisen Mittelwertsvergleiche rechnen zu können.\n\n\n\n\nTabelle 45.5— Zusammensetzung der Mittelwerte der Sprungweiten \\(\\bar{Y}\\) für jede Faktorkombination aus der Ernährungsart und dem Entwicklungsstand aus den Koeffizienten des zweifaktoriellen Modells.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(f_{feeding}\\)\n\\(f_{stage}\\)\n\\(\\bar{Y}\\)\n\\(\\boldsymbol{\\beta_{0}}\\)\n\\(\\boldsymbol{\\beta_{blood}}\\)\n\\(\\boldsymbol{\\beta_{ketchup}}\\)\n\\(\\boldsymbol{\\beta_{juvenile}}\\)\n\\(\\boldsymbol{\\beta_{blood \\times juvenile}}\\)\n\\(\\boldsymbol{\\beta_{ketchup \\times juvenile}}\\)\n\n\n\n\nsugar\nadult\n78.90\n78.98\n\n\n\n\n\n\n\nsugar\njuvenile\n61.03\n78.98\n\n\n-17.94\n\n\n\n\nblood\nadult\n99.71\n78.98\n20.73\n\n\n\n\n\n\nblood\njuvenile\n116.03\n78.98\n20.73\n\n-17.94\n34.26\n\n\n\nketchup\nadult\n92.15\n78.98\n\n13.17\n\n\n\n\n\nketchup\njuvenile\n111.24\n78.98\n\n13.17\n-17.94\n\n37.03\n\n\n\n\n\n\n\n\nDann wird dir alles wahrscheinlich klarer, wenn wir uns nochmal die Abbildung zu dem zweifaktoriellen Versuch anschauen. Wir haben hier unsere y-Achse mit dem Intercept direkt durch den lokalen Gruppenmittelwert der adulten Flöhe, die Zuckerwasser trinken. Dann kannst du die jeweiligen Abweichungen aus der obigen Tabelle der Mittelwerte in der Abbildung nachvollziehen.\n\n\n\n\n\n\n\n\nAbbildung 45.16— Darstellung der Gruppenmittelwerte der Sprungweiten für alle Faktorkombinationen aus dem zweifaktoriellen Modell zur Ernährung und Entwicklungsstand von Flöhen. Der Intercept liegt auf dem lokalen Mittelwert der adulten Flöhe, die Zuckerwasser trinken. Die Koeffizienten des zweifaktoriellen Modells beschreiben die Abweichungen zu dem Intercept. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nAus Gründen der Einfachheit lassen wir einmal die Interaktion weg.\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ color + region, data = snake_tbl) |&gt; as_tibble() \n\n\n# A tibble: 8 × 4\n  `(Intercept)` colorrot colorblau regionnord\n          &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1             1        0         0          0\n2             1        0         0          0\n3             1        1         0          0\n4             1        1         0          1\n5             1        1         0          1\n6             1        0         1          1\n7             1        0         1          1\n8             1        0         1          1\n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  50 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 & 0 & 0 & 0 \\\\\n  1 & 0 & 0 & 0 \\\\\n  1 & 1 & 0 & 0 \\\\\n  1 & 1 & 0 & 1 \\\\\n  1 & 1 & 0 & 1 \\\\\n  1 & 0 & 1 & 1 \\\\\n  1 & 0 & 1 & 1 \\\\\n  1 & 0 & 1 & 1 \\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta^{color}_{rot} \\\\\n  \\beta^{color}_{blau} \\\\\n  \\beta^{region}_{nord} \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\nfac2_fit &lt;- lm(svl ~ color + region, data = snake_tbl)\n\n\n\n\nR Code [zeigen / verbergen]\nfac2_fit |&gt; coef() |&gt; round(2)\n\n\n(Intercept)    colorrot   colorblau  regionnord \n      42.50       -3.50       -0.33       12.50 \n\n\n\n\nR Code [zeigen / verbergen]\nfac2_fit |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n-2.50  2.50  0.00 -0.50  0.50  2.33  3.33 -5.67 \n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  42.50 & 0 \\cdot -3.50 & 0 \\cdot -0.33 & 0 \\cdot 12.50 \\\\\n  42.50 & 0 \\cdot -3.50 & 0 \\cdot -0.33 & 0 \\cdot 12.50 \\\\\n  42.50 & 1 \\cdot -3.50 & 0 \\cdot -0.33 & 0 \\cdot 12.50 \\\\\n  42.50 & 1 \\cdot -3.50 & 0 \\cdot -0.33 & 1 \\cdot 12.50 \\\\\n  42.50 & 1 \\cdot -3.50 & 0 \\cdot -0.33 & 1 \\cdot 12.50 \\\\\n  42.50 & 0 \\cdot -3.50 & 1 \\cdot -0.33 & 1 \\cdot 12.50 \\\\\n  42.50 & 0 \\cdot -3.50 & 1 \\cdot -0.33 & 1 \\cdot 12.50 \\\\\n  42.50 & 0 \\cdot -3.50 & 1 \\cdot -0.33 & 1 \\cdot 12.50 \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  -2.50 \\\\\n  +2.50 \\\\\n  0.00 \\\\\n  -0.50 \\\\\n  +0.50 \\\\\n  +2.33 \\\\\n  +3.33 \\\\\n  -5.67 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\nc(42.50 +  0*(-3.50) + 0*(-0.33) + 0*12.50 - 2.50,\n  42.50 +  0*(-3.50) + 0*(-0.33) + 0*12.50 + 2.50,\n  42.50 +  1*(-3.50) + 0*(-0.33) + 0*12.50 + 0.00,\n  42.50 +  1*(-3.50) + 0*(-0.33) + 1*12.50 - 0.50,\n  42.50 +  1*(-3.50) + 0*(-0.33) + 1*12.50 + 0.50,\n  42.50 +  0*(-3.50) + 1*(-0.33) + 1*12.50 + 2.33,\n  42.50 +  0*(-3.50) + 1*(-0.33) + 1*12.50 + 3.33,\n  42.50 +  0*(-3.50) + 1*(-0.33) + 1*12.50 - 5.67) |&gt; round()\n\n\n[1] 40 45 39 51 52 57 58 49\n\n\n\n\nR Code [zeigen / verbergen]\nsnake_tbl |&gt; pull(svl)\n\n\n[1] 40 45 39 51 52 57 58 49\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfac2_tbl &lt;- tibble(f_a = rep(gl(3, 5), 2),\n                   f_b = gl(2, 15),\n                   y = 2 + \n                       2 * as.numeric(f_a) + \n                       3 * as.numeric(f_b) + \n                       2 * as.numeric(f_a) * as.numeric(f_b) +\n                           rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a + f_b + f_a:f_b, fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a2        f_a3        f_b2   f_a2:f_b2   f_a3:f_b2 \n          9           4           8           5           2           4 \n\n\n\n\n\n\n\n45.5.3 Kombinierte Modelle\nKommen wir jetzt zu dem wirklich spannenden Teil. Wir kombinieren Kovariaten zusammen mit Faktoren in einem Modell. Zum einen haben wir hier jetzt eine klassische ANCOVA vorliegen, wenn wir an den Faktoren als Haupteffekt interessiert sind. Wenn es eher um die Kovariaten geht, dann ist eben eine klassische Regression. Hier kommt es dann auf die wissenschaftliche Fragestellung an. Wollen wir wissen wie sich die Kovariate in den Faktoren ändert oder wollen wir die Faktoren für eine Kovariate adjustieren? Das kannst nur du beantworten.\n\nWas passiert wenn wir eine Kovariate und einen Faktor kombinieren?\n\nWenn wir eine Kovariate mit einem Faktor kombinieren, dann kippen wir den Intercept der Graden um die Steigung der Kovariate. Die Level der Faktoren liegen dann auf den Mittelwerten der Kovariaten für das entsprechende Level des Faktors. Wenn wir dann noch eine Interaktion hinzunehmen, dann erlauben wir jedem Level des Faktors eine eigene Steigung der Kovariaten.\n\n\nDas erstmal die sehr allgemeine Beschreibung. mehr dazu dann gleich in der Durchführung in R. Ich hoffe, dass dann das ein oder andere nochmal klarer wird. Wir wollen uns insgesamt drei Typen von multiplen Regressionen anschauen. Einmal das kombinierte Modell mit einem Faktor und einer Kovariate. Dann das gleiche Modell nur mit einm Faktor mehr. Am Ende dann noch das zweikovariate und zweifaktorielle Modell. Weiter unten diskutiere ich dann noch die Modellauswahl, wenn du dich fragst, wie viel der Einflussvariablen sollen denn jetzt in ein Modell.\n\n\\(f_A + c_1\\)\nHier rechnen wir eigentlich eine klassische einfaktorielle ANCOVA (eng. analysis of covariance)\n\n\n\n\n\n\n\n\nAbbildung 45.17— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln sowie einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\nPraktisch in RTheoretisch in RSimulation\n\n\n\nOhne Interaktion\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_fit &lt;- lm(jump_length ~ feeding + K, data = flea_model_tbl) \n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_fit |&gt; \n  coef() |&gt; round(2)\n\n\n   (Intercept)   feedingblood feedingketchup              K \n          5.84           3.93           3.46           0.03 \n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ feeding + K, data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.9913 -1.7193 -0.5809  0.8643 11.5642 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     5.84351    1.73425   3.369 0.001575 ** \nfeedingblood    3.93158    1.08618   3.620 0.000758 ***\nfeedingketchup  3.46334    1.14089   3.036 0.004022 ** \nK               0.03425    0.04633   0.739 0.463687    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.022 on 44 degrees of freedom\nMultiple R-squared:  0.2543,    Adjusted R-squared:  0.2035 \nF-statistic: 5.002 on 3 and 44 DF,  p-value: 0.004523\n\n\n\n\nR Code [zeigen / verbergen]\nflea_model_tbl |&gt; \n  group_by(feeding) |&gt; \n  summarise(mean(jump_length),\n            mean(K))\n\n\n# A tibble: 3 × 3\n  feeding     `mean(jump_length)` `mean(K)`\n  &lt;fct&gt;                     &lt;dbl&gt;     &lt;dbl&gt;\n1 sugar_water                7.00      33.7\n2 blood                     10.8       29.5\n3 ketchup                   10.2       25.1\n\n\n\n\n\n\nTabelle 45.6— Zusammensetzung der Mittelwerte der Sprungweiten \\(\\bar{Y}\\) für jede Faktorkombination aus der Ernährungsart und dem Entwicklungsstand aus den Koeffizienten des zweifaktoriellen Modells.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(f_{feeding}\\)\n\\(\\bar{c}_{K}\\)\n\\(\\bar{Y}\\)\n\\(\\boldsymbol{\\beta_{0}}\\)\n\\(\\boldsymbol{\\beta_{blood}}\\)\n\\(\\boldsymbol{\\beta_{ketchup}}\\)\n\\(\\boldsymbol{\\bar{c}_{K}\\cdot\\beta_{K}}\\)\n\n\n\n\nsugar\n33.69\n70.01\n58.48\n\n\n\\(11.45 = 33.69 \\cdot 0.34\\)\n\n\nblood\n29.47\n107.87\n58.48\n39.31\n\n\\(10.02 = 29.47 \\cdot 0.34\\)\n\n\nketchup\n25.06\n101.69\n58.48\n\n34.64\n\\(8.52 = 25.06 \\cdot 0.34\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 45.18— Scatterplot der Sprungweiten der Hunde-, Katzen- und Fuchsflöhe. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nMit Interaktion\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_fit &lt;- lm(jump_length ~ feeding + K + feeding:K, data = flea_model_tbl) \n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ feeding + K + feeding:K, data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.2773 -1.5927 -0.4916  1.0069 11.3471 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)       4.40476    4.81369   0.915    0.365\nfeedingblood      4.46302    5.14145   0.868    0.390\nfeedingketchup    8.16589    5.52391   1.478    0.147\nK                 0.07695    0.14109   0.545    0.588\nfeedingblood:K   -0.01191    0.15168  -0.079    0.938\nfeedingketchup:K -0.17296    0.17519  -0.987    0.329\n\nResidual standard error: 3.023 on 42 degrees of freedom\nMultiple R-squared:  0.2877,    Adjusted R-squared:  0.2029 \nF-statistic: 3.393 on 5 and 42 DF,  p-value: 0.01154\n\n\n\n\n\n\nTabelle 45.7— Zusammensetzung der Mittelwerte der Sprungweiten \\(\\bar{Y}\\) für jede Faktorkombination aus der Ernährungsart und dem Entwicklungsstand aus den Koeffizienten des zweifaktoriellen Modells.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(f_{feeding}\\)\n\\(\\bar{c}_{K}\\)\n\\(\\bar{Y}\\)\n\\(\\boldsymbol{\\beta_{0}}\\)\n\\(\\boldsymbol{\\beta_{blood}}\\)\n\\(\\boldsymbol{\\beta_{ketchup}}\\)\n\\(\\boldsymbol{\\bar{c}_{K}\\cdot\\beta_{K}}\\)\n\\(\\boldsymbol{\\bar{c}_{K}\\cdot\\beta_{blood\\times K}}\\)\n\\(\\boldsymbol{\\bar{c}_{K}\\cdot\\beta_{ketchup\\times K}}\\)\n\n\n\n\nsugar\n33.69\n70.01\n44.13\n\n\n\\(25.94 = 33.69 \\cdot 0.77\\)\n\n\n\n\nblood\n29.47\n107.87\n44.13\n44.59\n\n\\(22.69 = 29.47 \\cdot 0.77\\)\n\\(-3.54 = 29.47 \\cdot -0.12\\)\n\n\n\nketchup\n25.06\n101.69\n44.13\n\n81.63\n\\(19.29 = 25.06 \\cdot 0.77\\)\n\n\\(-43.35 = 25.06 \\cdot -1.73\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 45.19— Scatterplot der Sprungweiten der Hunde-, Katzen- und Fuchsflöhe. foo. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac1_tbl &lt;- tibble(c_1 = rnorm(15, 0, 1),\n                        f_a = gl(3, 5),\n                        y = 2 + \n                            1 * c_1 + \n                            2 * as.numeric(f_a) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ f_a + c_1, cov1_fac1_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)        f_a2        f_a3         c_1 \n          4           2           4           1 \n\n\n\n\n\n\n\n\\(c_1 + f_A + f_B\\)\nHier rechnen wir eigentlich eine klassische zweifaktorielle ANCOVA (eng. analysis of covariance)\n\n\n\n\n\n\n\n\nAbbildung 45.20— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) sowie einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln und einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\nPraktisch in RTheoretisch in RSimulation\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac2_fit &lt;- lm(jump_length ~ weight + feeding + stage, data = flea_model_tbl) \n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac2_fit |&gt; \n  coef() |&gt; round(2)\n\n\n   (Intercept)         weight   feedingblood feedingketchup  stagejuvenile \n          3.31           0.23           4.10           3.47           2.44 \n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac2_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ weight + feeding + stage, data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.6403 -1.2111 -0.4553  0.7319 11.4062 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      3.3125     2.0129   1.646 0.107137    \nweight           0.2268     0.1219   1.860 0.069697 .  \nfeedingblood     4.1038     1.0548   3.891 0.000342 ***\nfeedingketchup   3.4723     1.0537   3.295 0.001976 ** \nstagejuvenile    2.4407     1.3121   1.860 0.069703 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.944 on 43 degrees of freedom\nMultiple R-squared:  0.3082,    Adjusted R-squared:  0.2439 \nF-statistic:  4.79 on 4 and 43 DF,  p-value: 0.002763\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ mass + region + color, data = snake_tbl) |&gt; as_tibble() \n\n\n# A tibble: 8 × 5\n  `(Intercept)`  mass regionnord colorrot colorblau\n          &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1             1     6          0        0         0\n2             1     8          0        0         0\n3             1     5          0        1         0\n4             1     7          1        1         0\n5             1     9          1        1         0\n6             1    11          1        0         1\n7             1    12          1        0         1\n8             1    10          1        0         1\n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 & 6 & 0 & 0 & 0 \\\\\n  1 & 8 & 0 & 0 & 0\\\\\n  1 & 5 & 0 & 1 & 0\\\\\n  1 & 7 & 1 & 1 & 0\\\\\n  1 & 9 & 1 & 1 & 0\\\\\n  1 & 11& 1 & 0 & 1\\\\\n  1 & 12& 1 & 0 & 1\\\\\n  1 & 10& 1 & 0 & 1\\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta_{mass} \\\\\n  \\beta^{region}_{nord} \\\\\n  \\beta^{color}_{rot} \\\\\n  \\beta^{color}_{blau} \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\nfit_4 &lt;- lm(svl ~ mass + region + color, data = snake_tbl) \nfit_4 |&gt; coef() |&gt; round(2)\n\n\n(Intercept)        mass  regionnord    colorrot   colorblau \n      25.00        2.50        5.00        1.50       -2.83 \n\n\n\n\nR Code [zeigen / verbergen]\nfit_4 |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n 0.00  0.00  0.00  2.00 -2.00  2.33  0.83 -3.17 \n\n\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  50 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  25 & \\phantom{0}6 \\cdot 2.5 & 0 \\cdot 5 & 0 \\cdot 1.5& 0 \\cdot -2.83 \\\\\n  25 & \\phantom{0}8 \\cdot 2.5 & 0 \\cdot 5 & 0 \\cdot 1.5& 0 \\cdot -2.83\\\\\n  25 & \\phantom{0}5 \\cdot 2.5 & 0 \\cdot 5 & 1 \\cdot 1.5& 0 \\cdot -2.83\\\\\n  25 & \\phantom{0}7 \\cdot 2.5 & 1 \\cdot 5 & 1 \\cdot 1.5& 0 \\cdot -2.83\\\\\n  25 & \\phantom{0}9 \\cdot 2.5 & 1 \\cdot 5 & 1 \\cdot 1.5& 0 \\cdot -2.83\\\\\n  25 & 11\\cdot 2.5 & 1 \\cdot 5 & 0 \\cdot 1.5& 1 \\cdot -2.83\\\\\n  25 & 12\\cdot 2.5 & 1 \\cdot 5 & 0 \\cdot 1.5& 1 \\cdot -2.83\\\\\n  25 & 10\\cdot 2.5 & 1 \\cdot 5 & 0 \\cdot 1.5& 1 \\cdot -2.83\\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\phantom{+}0.00 \\\\\n  \\phantom{+}0.00 \\\\\n  \\phantom{+}0.00 \\\\\n  +2.00 \\\\\n  -2.00 \\\\\n  +2.33 \\\\\n  +0.83 \\\\\n  -3.17 \\\\\n\\end{pmatrix}\n\\]\n\n\nR Code [zeigen / verbergen]\nc(25 +  6*2.5 + 0*5 + 0*1.5 + 0*-2.83 + 0.00,\n  25 +  8*2.5 + 0*5 + 0*1.5 + 0*-2.83 + 0.00,\n  25 +  5*2.5 + 0*5 + 1*1.5 + 0*-2.83 + 0.00,\n  25 +  7*2.5 + 1*5 + 1*1.5 + 0*-2.83 + 2.00,\n  25 +  9*2.5 + 1*5 + 1*1.5 + 0*-2.83 - 2.00,\n  25 + 11*2.5 + 1*5 + 0*1.5 + 1*-2.83 + 2.33,\n  25 + 12*2.5 + 1*5 + 0*1.5 + 1*-2.83 + 0.83,\n  25 + 10*2.5 + 1*5 + 0*1.5 + 1*-2.83 - 3.17) \n\n\n[1] 40 45 39 51 52 57 58 49\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov1_fac2_tbl &lt;- tibble(c_1 = rnorm(30, 0, 1),\n                        f_a = rep(gl(3, 5), 2),\n                        f_b = gl(2, 15),\n                        y = 2 + \n                            1 * c_1 + \n                            2 * as.numeric(f_a) + \n                            3 * as.numeric(f_b) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + f_a + f_b, cov1_fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1        f_a2        f_a3        f_b2 \n          7           1           2           4           3 \n\n\n\n\n\n\n\n\\(c_1 + c_2 + f_A + f_B\\)\n\n\n\n\n\n\n\n\nAbbildung 45.21— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) sowie einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln und einer kategorialen Einflussvariablen als Faktor \\(f_B\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\nPraktisch in RTheoretisch in RSimulation\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_fit &lt;- lm(jump_length ~ weight + count_leg + feeding + stage, data = flea_model_tbl) \n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_fit |&gt; \n  coef() |&gt; round(2)\n\n\n   (Intercept)         weight      count_leg   feedingblood feedingketchup \n          5.71           0.10           0.01           1.48           0.52 \n stagejuvenile \n         -0.94 \n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ weight + count_leg + feeding + stage, \n    data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.5451 -1.0540 -0.2454  0.8130  4.7762 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     5.710598   1.174724   4.861 1.67e-05 ***\nweight          0.100372   0.070749   1.419   0.1634    \ncount_leg       0.009592   0.001009   9.506 4.98e-12 ***\nfeedingblood    1.480468   0.661517   2.238   0.0306 *  \nfeedingketchup  0.515165   0.676390   0.762   0.4505    \nstagejuvenile  -0.936342   0.827946  -1.131   0.2645    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.678 on 42 degrees of freedom\nMultiple R-squared:  0.7805,    Adjusted R-squared:  0.7544 \nF-statistic: 29.87 on 5 and 42 DF,  p-value: 8.213e-13\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_tbl &lt;- tibble(c_1 = rnorm(30, 0, 1),\n                        c_2 = rnorm(30, 0, 1),\n                        f_a = rep(gl(3, 5), 2),\n                        f_b = gl(2, 15),\n                        y = 2 + \n                            1 * c_1 + \n                            -1 * c_2 + \n                            2 * as.numeric(f_a) + \n                            3 * as.numeric(f_b) + \n                                rnorm(15, 0, 0.001))\n\n\n\n\nR Code [zeigen / verbergen]\nlm(y ~ c_1 + c_2 + f_a + f_b, cov2_fac2_tbl) |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)         c_1         c_2        f_a2        f_a3        f_b2 \n          7           1          -1           2           4           3",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#prädiktives-modell",
    "href": "stat-modeling-basic.html#prädiktives-modell",
    "title": "45  Multiple lineare Regression",
    "section": "45.6 Prädiktives Modell",
    "text": "45.6 Prädiktives Modell\nNeben dem klassischen kausalen Modell können wir auch ein prädiktives Modell rechnen. In einem prädiktiven Modell wollen wir wissen, welche Werte unser Messwert für neue Werte der Einflussvariable annehmen würde. Auch in einem prädiktiven Modell rechnen wir erstmal ganz normal eine multiple lineare Regression. Dann nutzen wir das Modell der Regression um neue Werte für unseren Messwert anhand neuer oder alter Werte der Einflussvariable vorherzusagen. Daher können wir auch beides miteinander verbinden. Du schaust erst was das kausale Modell ergibt und lässt dir dann neue Messwerte vorhersagen. Dabei musst du immer beachten, dass die vorhergesagten Messwerte auf der angepassten Ebene der Regression liegen. Daher nennen wir die vorhergesagten Messwerte auch angepasste Messwerte (eng. fitted). Wir werden später in der Klassifikation, der Vorhersage von \\(0/1\\)-Werten, noch andere Prädktionen und deren Maßzahlen kennen lernen. Die vorgehensweise ist aber so identisch mit der im Kapitel zur simplen linearen Regression, so dass ich hier nicht nochmal alles wiederhole. Einfach nochmal dort schauen und die Modelle von oben verwenden. Weitere allgemeine Beispiel finden sich auch in den Kapitel zu den Marginal effect models und dem Modellieren in R.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#weiteres-von-interesse",
    "href": "stat-modeling-basic.html#weiteres-von-interesse",
    "title": "45  Multiple lineare Regression",
    "section": "45.7 Weiteres von Interesse",
    "text": "45.7 Weiteres von Interesse\nIn den folgenden Abschnitten schauen wir uns noch andere Dinge von Interesse einmal an. Zum einen haben wir ein Problem, wenn unsere Einflussvariablen untereinander zu stark korreliert sind. Das zeige ich dann einmal an den Beinhaaren bei den Flöhen. Auch ist es problematisch, wenn wir eine Einheit gewählt hat, die sehr große Werte beinhaltet. Das kann ich dir gleich einmal an den Yediflöhen aufzeigen. Dann schauen wir nochmal in die Unabhängigkeitsannahme der Einflussvariablen. Neben der Korrelation sollten die Einflussvariablen auch wirklich unabhängig voneinander sein und sich nicht als Modell selbst erklären. Dann am Ende wollen wir natürlich auch noch wissen, was das beste Modell für unsere Daten wäre. Welche Einflussvariablen kann ich den reinnehmen und was ist dann das beste Modell? Darauf gehe ich dann hier auch nochmal ein.\n\n45.7.1 Einheit der Kovariaten\n\n\n\n\n\n\nAbbildung 45.22— Ein seltener Jedifloh, der so machtsensitiv ist, dass seine Fähigkeiten in der Sprungweite extrem erhöht sind.\n\n\n\nKommen wir nun nochmal zu einem Problem der Einheit. Wir können einen sehr kleinen Effekt vorliegen haben, der dann signifikant ist. Schnell denken wir dann, dass dieser Effekt sehr klein ust und damit nicht relevant. Wir sprechen aber bei einer Regression immer von der Steigung als Effekt. Wenn sich also die Einheit der Einflussvariable um Eins erhöht, dann steigt der Messwert um den Wert des Koeffizienten der Steigung. Wenn wir also sehr große Werte messen, dann ist die Änderung in einer Einheit sehr klein. Schauen wir uns mal das Beispiel der Jediflöhe an.\nManche Flöhe haben hohe Werte der Midi-Chlorianer oder einfach M-Werte. Damit sind diese Flöhe insbesondere sensitiv für die Macht und somit Jediflöhe. Jediflöhe könnten damit auch höhere Sprungweiten vorliegen haben, da die Jediflöhe ja einen teil ihrer MAcht dazu nutzen könnten weiter zu springen. Daher wollen wir mal in einer einfachen simplen Regression mit nur den M-Werten schauen, ob die M-Werte einen Einfluss auf die Sprungweiten haben. Ich lasse mir jetzt nur die Tabelle der Koeffizienten wiedergeben.\n\n\nR Code [zeigen / verbergen]\nlm(jump_length ~ M, data = flea_model_tbl) |&gt; \n  summary() |&gt; coef() |&gt; round(3)\n\n\n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)    8.038      0.736  10.928    0.000\nM              0.000      0.000   2.253    0.029\n\n\nWie wir jetzt sehen ist der Effekt mit 0.002cm extrem gering aber dennoch signifkant. Der p-Wert ist kleiner als das Signifikanzniveau \\(\\alpha\\) gleich 5%. Ist also der Wert der Midi-Chlorianer nicht relevant? Hier kommt es auf die Einheit und damit die Spannweite der M-Wert an. Die M-Werte laufen von 80.19 bis 25149.36 Anzahl Midi-Chlorianer im Blut. Damit ist eine kleine Änderung in den M-Werten auch nur mit einer kleinen Änderung in den Sprungweiten verbunden. Also Achtung bei Kovariaten mit großer Spannweite und kleinen Einheiten.\n\n\n\n\n\n\n\n\nAbbildung 45.23— Scatterplot der Sprungweite in [cm] und Anzahl Midi-Chlorianer im Blut. Die lineare Grade und die Gradengleichung wurden ergänzt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n45.7.2 Adjustierung für Confounder\n\n\n\n\n\n\n\n\nAbbildung 45.24— Scatterplot der Sprungweite in [cm] und Anzahl Midi-Chlorianer im Blut. Die lineare Grade und die Gradengleichung wurden ergänzt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nfit_1 &lt;- lm(jump_length ~ M, data = flea_model_tbl)\nfit_2 &lt;- lm(jump_length ~ M + feeding, data = flea_model_tbl)\nfit_3 &lt;- lm(jump_length ~ M + infected, data = flea_model_tbl)\n\n\nWir nutzen hier die tollen Funktionen aus dem R Paket {modelsummary} und dann dem R Paket {tinytable}\n\n\n\n\nTabelle 45.8— Interecept entfernt.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nModel\n\n        \n              \n                 \n                I\n                II\n                III\n              \n        \n        + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\n        \n                \n                  Midi-Chlorianer\n                  0.0002*\n                  0.0000\n                  0.0001+\n                \n                \n                  \n                  p = 0.029\n                  p = 0.684\n                  p = 0.091\n                \n                \n                  Ernährung (Blut)\n                  \n                  3.5526**\n                  \n                \n                \n                  \n                  \n                  p = 0.005\n                  \n                \n                \n                  Ernährung (Ketchup)\n                  \n                  2.8470*\n                  \n                \n                \n                  \n                  \n                  p = 0.037\n                  \n                \n                \n                  Flohschnupfen (nein)\n                  \n                  \n                  -0.5461\n                \n                \n                  \n                  \n                  \n                  p = 0.616\n                \n                \n                  Num.Obs.\n                  48\n                  48\n                  48\n                \n                \n                  R2\n                  0.099\n                  0.248\n                  0.104\n                \n                \n                  R2 Adj.\n                  0.080\n                  0.197\n                  0.065\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n45.7.3 Korrelation der Kovariaten\nDie Einlfussvariablen haben neben der Einheit noch andere Probleme. Teilweise sind diese Probleme nicht ganz so offensichtlich, wie gleich in meinem Beispiel gewählt. Probleme treten auf, wenn die Einflussvariablen untereinander zu stark miteinander korreliert sind. Mehr zur Korrelation erfährst du im Kapitel zur Korrelation. Hier wiederhole ich jetzt nicht die Grundlagen. Wenn also Einflussvariablen sehr stark miteinander korrelaiert sind, dann erklären die Variablen mehr oder minder das Gleiche. In der folgenden Abbildung siehst du den Zusammenhang zwischen der Sprungweite und der Anzahl an Haaren auf den Flohbeinen. Wie es so ist, können wir hier natürlich verschiedene Beine oder die mittlere Anzahl betrachten. Vermeintlich glücklicherweise haben aber alle den gleichen Koeffizienten.\n\n\n\n\n\n\n\n\nAbbildung 45.25— Zusammenhang zwischen der Sprungweite und der Anzahl an Haaren an den Flohbeinen. Eine Regressiongrade wurde für das simple lineare Modell ergänzt. (A) Mittlere Anzahl an Haaren über beide Beine. (B) Anzahl Haare auf dem linken Bein. (C) Anzahl Haare auf dem rechten Bein. [Zum Vergrößern anklicken]\n\n\n\n\n\nDann können wir uns auch einmal die Korrelation zwischen den drein Kovariaten anschauen. Wie zu erwarten ist die Korrelation maximal mit Eins. Die Sterne zeigen die Signifikanz an. Das Beispiel ist hier konstruiert, aber in biologischen Systemen oder Laborwerten können wir schnell sehr hohe Korrelationen erreichen. Das Gewicht und der BMI ist sehr hoch korreliert. Blutwerte wie Hämoglobin, Eisengehalt und Sauerstoffsättigung können das Gleiche anzeigen.\n\n\nR Code [zeigen / verbergen]\nflea_model_tbl |&gt; \n  select(count_leg, count_leg_left, count_leg_right) |&gt; \n  correlation() |&gt; \n  summary(redundant = TRUE)\n\n\n# Correlation Matrix (pearson-method)\n\nParameter       | count_leg | count_leg_left | count_leg_right\n--------------------------------------------------------------\ncount_leg       |           |        1.00*** |         1.00***\ncount_leg_left  |   1.00*** |                |         1.00***\ncount_leg_right |   1.00*** |        1.00*** |                \n\np-value adjustment method: Holm (1979)\n\n\nNaheliegend wäre es jetzt ein Modell zu bauen in dem alle drei Kovariaten enthalten sind. Dann müssen wir uns nicht entscheiden welche wir nehmen und erhalten für jede Kovariate eine Information. Wenn du nochmal auf die Abbildung schaust, wir erwarten hier eigentlich eine signifikante Steigung.\n\n\nR Code [zeigen / verbergen]\ncov2_fit &lt;- lm(jump_length ~ count_leg + count_leg_left + count_leg_right, data = flea_model_tbl) \n\n\nWenn wir nun die Koeffizienten betrachten, dann werden wir schon stutzig. Wir erhalten eine negative Steigung für die mittlere Anzahl und dann für die beiden Beine dann eine positive Steigung, die auch grob nur halb so groß ist. Das ist schon mal nicht so gut.\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; \n  coef() |&gt; round(2)\n\n\n    (Intercept)       count_leg  count_leg_left count_leg_right \n           7.51           -1.52            0.78            0.74 \n\n\nBetrachten wir also einmal das Modell in der Zusammenfassung um zu sehen, wie die Koeffizienten und die Residuen aussehen. Die Modelgüte ist akzeptabel. Was aber auffällt ist, dass keine der Kovariaten signifikant ist. Das ist sehr seltsam, wenn wir die Abbildung betrachten. Wir sehen hier die direkte Folge von hoch korrelierter Kovariaten. Wenn diese hoch korreliert sind, dann werden alle nicht signfikant.\n\n\nR Code [zeigen / verbergen]\ncov2_fit |&gt; summary()\n\n\n\nCall:\nlm(formula = jump_length ~ count_leg + count_leg_left + count_leg_right, \n    data = flea_model_tbl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.9300 -1.4445 -0.4353  1.1813  4.6256 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       7.5120     0.5244  14.325   &lt;2e-16 ***\ncount_leg        -1.5188     1.2133  -1.252    0.217    \ncount_leg_left    0.7848     0.6029   1.302    0.200    \ncount_leg_right   0.7432     0.6129   1.213    0.232    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.951 on 44 degrees of freedom\nMultiple R-squared:  0.6891,    Adjusted R-squared:  0.6679 \nF-statistic:  32.5 on 3 and 44 DF,  p-value: 3.115e-11\n\n\nDann vergleichen wir einmal alle drei Modelle mit den tollen Funktionen aus dem R Paket {modelsummary} und dann dem R Paket {tinytable}. Wir bauen also erstmal das simple Modell mit nur der mittleren Beinanzahl und dann ergänzen wir schrittweise die Anzahl der Haare der linken und rechten Beine.\n\n\nR Code [zeigen / verbergen]\nfit_1 &lt;- lm(jump_length ~ count_leg, data = flea_model_tbl) \nfit_2 &lt;- lm(jump_length ~ count_leg + count_leg_left, data = flea_model_tbl) \nfit_3 &lt;- lm(jump_length ~ count_leg + count_leg_left + count_leg_right, data = flea_model_tbl) \n\n\nJetzt können wir alle drei Modell nebeneinander direkt miteinander vergleichen. Wir sehen hier sehr schön, wie der p-Wert der mitttleren Beinanzahl immer weiter anstiegt je mehr korrelierte Kovariaten in das Modell kommen. Spannenderweise bleibt die Modellgüte immer gleich. Wir sehen also das Problem nicht, wenn wir uns zum Beispiel das Bestimmtheitsmaß nur anschauen. Du musst also immer vorab auf die Korrelation schauen.\n\n\n\n\nTabelle 45.9— Interecept entfernt.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nModel\n\n        \n              \n                 \n                I\n                II\n                III\n              \n        \n        + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\n        \n                \n                  Mittlere Beinhaare\n                  0.009***\n                  -0.050\n                  -1.519\n                \n                \n                  \n                  p = &lt;0.001\n                  p = 0.511\n                  p = 0.217\n                \n                \n                  Linke Beinhaare\n                  \n                  0.059\n                  0.785\n                \n                \n                  \n                  \n                  p = 0.438\n                  p = 0.200\n                \n                \n                  Rechte Beinhaare\n                  \n                  \n                  0.743\n                \n                \n                  \n                  \n                  \n                  p = 0.232\n                \n                \n                  Num.Obs.\n                  48\n                  48\n                  48\n                \n                \n                  R2\n                  0.674\n                  0.679\n                  0.689\n                \n                \n                  R2 Adj.\n                  0.667\n                  0.664\n                  0.668\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n45.7.4 Variance inflation factor (VIF)\nEigentlich nur für Kovariaten geht es auch mit Faktoren. Hier nochmal nach GVIF schauen.\n\\[\nVIF = \\cfrac{1}{1- R^2}\n\\]\nDie Interpretation der VIF-Werte (Variance Inflation Factor) hilft dir, den Grad der Multikollinearität in deinem Modell zu bewerten:\n\nVIF = 1: Es gibt keine Multikollinearität.\nVIF zwischen 1 und 5: Es liegt moderate Multikollinearität vor, die in der Regel unproblematisch ist.\nVIF &gt; 5: Es gibt eine hohe Multikollinearität, die die Koeffizienten unzuverlässig machen kann. Hier sollten Maßnahmen ergriffen werden.\nVIF &gt; 10: Dies deutet auf eine sehr hohe Multikollinearität hin, die dringend korrigiert werden muss.\n\n\n\nR Code [zeigen / verbergen]\njuvenile_flea_tbl &lt;- filter(flea_model_tbl, stage == \"juvenile\")\n\n\n\n\nR Code [zeigen / verbergen]\njuvenile_fit &lt;- lm(jump_length ~ K + Mg + CRP + Hb + BSG + M, \n                   data = juvenile_flea_tbl)\n\n\n\n{car}{performance}Händisch in R\n\n\n\n\nR Code [zeigen / verbergen]\nvif(juvenile_fit)\n\n\n        K        Mg       CRP        Hb       BSG         M \n 1.972761 18.659889 13.733641  8.787982  3.921379 13.132223 \n\n\n\n\nWir können uns mit der Funcktion check_model() aus dem R Paket {performance} auch die Unsicherheit mit angeben lassen. In unserem Beispiel hieft dies gerade nicht sehr viel weiter. Wir bleiben bei den geschätzen Werten und ignorieren das Intervall.\n\n\n\n\n\n\n\n\nAbbildung 45.26— Graphische Darstellung des VIF mit der Funktion check_model().\n\n\n\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nvif_fct &lt;- function(x) 1/(1-x)\n\n\n\n\nR Code [zeigen / verbergen]\nlm(K ~ Mg + CRP + Hb + BSG + M, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"K\")\n\n\n       K \n1.972761 \n\n\n\n\nR Code [zeigen / verbergen]\nlm(Mg ~ K + CRP + Hb + BSG + M, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"Mg\")\n\n\n      Mg \n18.65989 \n\n\n\n\nR Code [zeigen / verbergen]\nlm(CRP ~ K + Mg + Hb + BSG + M, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"CRP\")\n\n\n     CRP \n13.73364 \n\n\n\n\nR Code [zeigen / verbergen]\nlm(Hb ~ K + Mg + CRP + BSG + M, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"Hb\")\n\n\n      Hb \n8.787982 \n\n\n\n\nR Code [zeigen / verbergen]\nlm(BSG ~ K + Mg + CRP + Hb + M, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"BSG\")\n\n\n     BSG \n3.921379 \n\n\n\n\nR Code [zeigen / verbergen]\nlm(M ~ K + Mg + CRP + Hb + BSG, data = juvenile_flea_tbl) |&gt; \n  r2() |&gt;\n  pluck(\"R2\") |&gt; vif_fct() |&gt; set_names(\"M\")\n\n\n       M \n13.13222 \n\n\n\n\n\n\n\n45.7.5 Vergleich von Modellen\nIm Folgenden wollen wir einmal verschiedene Modelle miteinander Vergleichen und uns statistisch wiedergeben lassen, was das beste Modell ist. Und hier holen wir auch einmal kurz Luft, denn wir entschieden nur was das statistisch beste Modell ist. Es kann sein, dass ein Modell biologisch mehr Sinn macht und nicht auf Platz 1 der statistischen Maßzahlen steht. Das ist vollkommen in Ordnung. Du musst abweägen, was für sich das beste Modell ist. Im Zweifel komme ruhig nochmal in meine statistische Beratung oder schreibe mir eine Mail.\nWir bauchen uns jetzt fünf Modelle von fit_1 bis fit_5. Jedes dieser Modelle hat andere Einflussvariablen aber den gleichen Messwert. Im Weiteren sortieren wir die Modelle von einfach nach komplex. Ich versuche immmer das einfachste Modell fit_1 zu nennen und daher die niedrige Nummer zu geben. Im Idealfall benennst du die Modellobjekte nach den Modellen, die in en Objekten gespeichert sind. Oft sind die Modelle aber sehr groß und die Objekte der Fits haben dann sehr lange Namen.\n\n\nR Code [zeigen / verbergen]\nfit_1 &lt;- lm(jump_length ~ feeding, data = flea_model_tbl)\nfit_2 &lt;- lm(jump_length ~ feeding + stage, data = flea_model_tbl)\nfit_3 &lt;- lm(jump_length ~ feeding + weight, data = flea_model_tbl)\nfit_4 &lt;- lm(jump_length ~ feeding + stage + count_leg, data = flea_model_tbl)\nfit_5 &lt;- lm(jump_length ~ feeding + stage + weight, data = flea_model_tbl)\n\n\nAls Ergänzung zum Bestimmtheitsmaß \\(R^2\\) wollen wir uns noch das Akaike information criterion (abk. \\(AIC\\)) anschauen. Du kannst auch das \\(R^2\\) bzw. das \\(R^2_{adj}\\) für die Modellauswahl nehmen. Das \\(AIC\\) ist neuer und auch für komplexere Modelle geeignet. Es gilt hierbei, je kleiner das \\(AIC\\) ist, desto besser ist das \\(AIC\\). Wir wollen also Modelle haben, die ein kleines \\(AIC\\) haben. Wir gehen jetzt nicht auf die Berechnung der \\(AIC\\)’s für jedes Modell ein. Wir erhalten nur ein \\(AIC\\) für jedes Modell. Die einzelnen Werte des \\(AIC\\)’s sagen nichts aus. Ein \\(AIC\\) ist ein mathematisches Konstrukt. Wir können aber verwandte Modelle mit dem \\(AIC\\) untereinander vergleichen. Daher berechnen wir ein \\(\\Delta\\) über die \\(AIC\\). Dafür nehmen wir das Modell mit dem niedrigsten \\(AIC\\) und berechnen die jeweiligen Differenzen zu den anderen \\(i\\) Modellen. In unserem Beispiel ist \\(i\\) dann gleich fünf, da wir fünf Modelle haben.\n\\[\n\\Delta_i = AIC_i - AIC_{min}\n\\]\n\nwenn \\(\\Delta_i &lt; 2\\), gibt es keinen Unterschied zwischen den Modellen. Das \\(i\\)-te Modell ist genauso gut wie das Modell mit dem \\(AIC_{min}\\).\nwenn \\(2 &lt; \\Delta_i &lt; 4\\), dann gibt es eine starke Unterstützung für das \\(i\\)-te Modell. Das \\(i\\)-te Modell ist immer noch ähnlich gut wie das \\(AIC_{min}\\).\nwenn \\(4 &lt; \\Delta_i &lt; 7\\), dann gibt es deutlich weniger Unterstützung für das \\(i\\)-te Modell;\nModelle mit \\(\\Delta_i &gt; 10\\) sind im Vergleich zu dem besten \\(AIC\\) Modell nicht zu verwenden.\n\nNehmen wir ein \\(AIC_1 = AIC_{min} = 100\\) und \\(AIC_2\\) ist \\(100,7\\) an. Dann ist \\(\\Delta_2=0,7&lt;2\\), so dass es keinen wesentlichen Unterschied zwischen den Modellen gibt. Wir können uns entscheiden, welches der beiden Modelle wir nehmen. Hier ist dann wichtig, was auch die Biologie sagt oder eben andere Kriterien, wie Kosten und Nutzen. Wenn wir ein \\(AIC_1 = AIC_{min} = 100000\\) und \\(AIC_2\\) ist \\(100700\\) vorliegen haben, dann ist \\(\\Delta_2 = 700 \\gg 10\\), also gibt es keinen Grund für das \\(2\\)-te Modell. Das \\(2\\)-te Modell ist substantiell schlechter als das erste Modell. Mehr dazu kannst du unter Multimodel Inference: Understanding AIC and BIC in Model Selection nachlesen.\nWir können das \\(\\Delta_i\\) auch in eine Wahrscheinlichkeit umrechnen. Wir können \\(p_i\\) berechnen und damit die relative (im Vergleich zu \\(AIC_{min}\\)) Wahrscheinlichkeit, dass das \\(i\\)-te Modell den AIC minimiert.\n\\[\np_i = \\exp\\left(\\cfrac{-\\Delta_i}{2}\\right)\n\\]\nZum Beispiel entspricht \\(\\Delta_i = 1.5\\) einem \\(p_i\\) von \\(0.47\\) (ziemlich hoch) und ein \\(\\Delta_i = 15\\) entspricht einem \\(p_i =0.0005\\) (ziemlich niedrig). Im ersten Fall besteht eine Wahrscheinlichkeit von 47%, dass das \\(i\\)-te Modell tatsächlich eine bessere Beschreibung ist als das Modell, das \\(AIC_{min}\\) ergibt, und im zweiten Fall beträgt diese Wahrscheinlichkeit nur 0,05%. Wir können so einmal nachrechnen, ob sich eine Entscheidung für ein anderes Modell lohnen würde. Neben dem \\(AIC\\) gibt es auch das Bayesian information criterion (\\(BIC\\)). Auch beim \\(BIC\\) gilt, je kleiner das BIC ist, desto besser ist das BIC.\nDu siehst schon, es gibt eine Reihe von Möglichkeiten sich mit der Güte oder Qualität eines Modells zu beschäftigen. Wir nutzen die Funktion model_performance() um uns die Informationen über die Güte eines Modells wiedergeben zu lassen. Im folgenden Codeblock habe ich mich nur auf das \\(AIC\\) und das \\(BIC\\) konzentriert.\n\n\nR Code [zeigen / verbergen]\nmodel_performance(fit_1) |&gt; \n  as_tibble() |&gt; \n  select(AIC, BIC)\n\n\n# A tibble: 1 × 2\n    AIC   BIC\n  &lt;dbl&gt; &lt;dbl&gt;\n1  247.  254.\n\n\nGut soweit. Du kannst jetzt für jedes der Modelle das \\(AIC\\) berechnen und dann dir die Modelle entsprechend ordnen. Wir müssen das aber nicht tun. Wir können uns auch die Funktion compare_performance() zu nutze machen. Die Funktion gibt uns die \\(R^2\\)-Werte wieder wie auch die \\(AIC\\) sowie die \\(s^2_{\\epsilon}\\) als sigma wieder. Wir haben also alles zusammen was wir brauchen. Darüber hinaus kann die Funktion auch die Modelle rangieren. Das nutzen wir natürlich gerne.\n\n\nR Code [zeigen / verbergen]\ncomp_res &lt;- compare_performance(fit_1, fit_2, fit_3, fit_4, fit_5, rank = TRUE)\n\ncomp_res\n\n\n# Comparison of Model Performance Indices\n\nName  | Model |    R2 | R2 (adj.) |  RMSE | Sigma | AIC weights | AICc weights\n------------------------------------------------------------------------------\nfit_4 |    lm | 0.770 |     0.749 | 1.607 | 1.698 |       1.000 |        1.000\nfit_5 |    lm | 0.308 |     0.244 | 2.787 | 2.944 |    3.34e-12 |     3.34e-12\nfit_1 |    lm | 0.245 |     0.211 | 2.911 | 3.007 |    3.03e-12 |     5.30e-12\nfit_3 |    lm | 0.253 |     0.202 | 2.897 | 3.025 |    1.42e-12 |     1.93e-12\nfit_2 |    lm | 0.253 |     0.202 | 2.897 | 3.025 |    1.42e-12 |     1.93e-12\n\nName  | BIC weights | Performance-Score\n---------------------------------------\nfit_4 |       1.000 |           100.00%\nfit_5 |    3.34e-12 |             5.06%\nfit_1 |    1.97e-11 |             0.46%\nfit_3 |    3.61e-12 |             0.36%\nfit_2 |    3.61e-12 |             0.36%\n\n\nAnhand der Ausgabe der Funktion compare_performance() sehen wir, dass unser Modell fit_2 das beste Modell ist. Zwar ist die Streuung der Residuen nicht die Kleinste aller Modelle (Sigma = 1.933) aber wir haben ein hohes \\(R^2_{adj}\\) und auch ein kleines \\(AIC\\). Wir würden damit sagen, dass das Modell fit_2 mit den Variablen animal und sex für \\(x\\) das Outcome jump_length am besten statistisch beschreibt.\nIn Abbildung 45.27 sehen wir die Ausgabe der Funktion compare_performance() nochmal visualisiert. Wir können dann die einzelnen Modelle nochmal besser vergleichen. Auch siehst du hier, ob ein Modell in einem Bereich sehr schlecht ist oder aber nur in einem Bereich sehr gut.\n\n\n\n\n\n\n\n\nAbbildung 45.27— Graphische Darstellung der Funktion compare_performance() Wir sehen hier die einzelnen Gütekriterien in einer Übersicht dargestellt.\n\n\n\n\n\nZum Ende stellt sich die Frage nach dem statistischen Test. Können wir auch statistisch Testen, ob das Modell fit_1 signifikant unterschiedlich ist? Ja wir können die Funktion test_vuong() nutzen um ein Model zu den anderen Modellen zu vergleichen. Wenn du mehrere Modell miteinander vergleichen möchtest, dann muss du die Funktion mehrfach ausführen.\n\n\nR Code [zeigen / verbergen]\ntest_vuong(fit_1, fit_2, fit_3, fit_4, fit_5)\n\n\nName  | Model |   Omega2 | p (Omega2) |    LR | p (LR)\n------------------------------------------------------\nfit_1 |    lm |          |            |       |       \nfit_2 |    lm | 8.54e-03 |     0.517  | -0.38 |  0.354\nfit_3 |    lm | 5.77e-03 |     0.216  | -0.46 |  0.324\nfit_4 |    lm |     1.81 |     &lt; .001 | -3.06 |  0.001\nfit_5 |    lm |     0.06 |     0.160  | -1.19 |  0.117\nEach model is compared to fit_1.\n\n\n\n\n\n\nTabelle 45.10— Interecept entfernt.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nModel\n\n        \n              \n                 \n                I\n                II\n                III\n                IV\n                V\n              \n        \n        + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\n        \n                \n                  Ernährung (Blut)\n                  3.787***\n                  3.787***\n                  3.862***\n                  1.272+\n                  4.104***\n                \n                \n                  \n                  (1.063)\n                  (1.070)\n                  (1.076)\n                  (0.652)\n                  (1.055)\n                \n                \n                  Ernährung (Ketchup)\n                  3.167**\n                  3.167**\n                  3.240**\n                  0.302\n                  3.472**\n                \n                \n                  \n                  (1.063)\n                  (1.070)\n                  (1.075)\n                  (0.667)\n                  (1.054)\n                \n                \n                  Entwicklung (juvenile)\n                  \n                  0.581\n                  \n                  -1.825**\n                  2.441+\n                \n                \n                  \n                  \n                  (0.873)\n                  \n                  (0.548)\n                  (1.312)\n                \n                \n                  Gewicht [mg]\n                  \n                  \n                  0.054\n                  \n                  0.227+\n                \n                \n                  \n                  \n                  \n                  (0.081)\n                  \n                  (0.122)\n                \n                \n                  Anzahl Beinhaare\n                  \n                  \n                  \n                  0.010***\n                  \n                \n                \n                  \n                  \n                  \n                  \n                  (0.001)\n                  \n                \n                \n                  Num.Obs.\n                  48\n                  48\n                  48\n                  48\n                  48\n                \n                \n                  R2\n                  0.245\n                  0.253\n                  0.253\n                  0.770\n                  0.308\n                \n                \n                  R2 Adj.\n                  0.211\n                  0.202\n                  0.202\n                  0.749\n                  0.244\n                \n                \n                  AIC\n                  246.8\n                  248.3\n                  248.3\n                  193.8\n                  246.6\n                \n                \n                  BIC\n                  254.3\n                  257.7\n                  257.7\n                  205.0\n                  257.8\n                \n                \n                  RMSE\n                  2.91\n                  2.90\n                  2.90\n                  1.61\n                  2.79",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#referenzen",
    "href": "stat-modeling-basic.html#referenzen",
    "title": "45  Multiple lineare Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nDormann, C. F. (2013). Parametrische Statistik. Springer.\n\n\nGibney, M. J. (2019). Ultra-processed foods: definitions and policy issues. Current developments in nutrition, 3(2), nzy077.\n\n\nHeiss, A. (2022, Mai 20). Marginalia: A Guide to Figuring Out What the Heck Marginal Effects, Marginal Slopes, Average Marginal Effects, Marginal Effects at the Mean, and All These Other Marginal Things Are. https://doi.org/10.59350/40xaj-4e562\n\n\nKéry, M. (2010). Introduction to WinBUGS for ecologists: Bayesian approach to regression, ANOVA, mixed models and related analyses. Academic Press.\n\n\nMcGrosky, A., Luke, A., Arab, L., Bedu-Addo, K., Bonomi, A. G., Bovet, P., Brage, S., Buchowski, M. S., Butte, N., Camps, S. G., et al. (2025). Energy expenditure and obesity across the economic spectrum. Proceedings of the National Academy of Sciences, 122(29), e2420902122.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html",
    "href": "example-fleas-dogs-cats.html",
    "title": "5  Von Flöhen auf Tieren",
    "section": "",
    "text": "5.1 Von Flöhen auf Hunden\nLetzte Änderung am 06. August 2025 um 12:14:55\nDie ursprüngliche Idee zu den Sprungweiten der Hunde- und Katzenflöhe stammt von Cadiergues et al. (2000) aus der entsprechenden Veröffentlichung A comparison of jump performances of the dog flea, Ctenocephalides canis (Curtis, 1826) and the cat flea, Ctenocephalides felis felis (Bouché, 1835). Wir bauen uns hier kleinere Datensätze mit einer ähnlichen Fragestellung nach, die wir dann in den folgenden Kapiteln immer wieder nutzen. Dabei begleiten uns die Hunde- und Katzenflöhe eher in den Einführungskapiteln. Später schauen wir uns dann noch komplexere Datensätze mit einem klaren Anwendungsbezug an.\nIn unserem ersten Beispiel wollen wir uns verschiedene Daten von Hundeflöhen (eng. dog flea) anschauen. Unter anderem sind dies die Sprungweite eines Hundeflohs, die Anzahl an Haaren am rechten Bein eines Hundeflohs, die Boniturnoten auf einer Flohmesse sowie der Infektionsstatus mit Flohschnupfen. Hier nochmal detailliert dargestellt, was wir uns im Folgenden immer wieder anschauen wollen.\nErst einmal die Zahlen, so wie du die Messwerte dann auf einen karierten Zettel aus deinem Collegeblock schreiben würdest. Ich empfehle immer Papier auf dem Feld, Gewächshaus oder Stall. Ein Pad geht da mal schnell kaputt. Dann habe ich zu deinen Notizen noch die mathematischen Schreibweise sowie die Schreibweise in R ergänzt. In R nutze ich auch schon gleich ein Objekt um die Zahlen zu speichern.\nSprungweite in [cm] von verschiedenen Flöhen:\nAnzahl an Haaren am rechten Bein von verschiedenen Flöhen:\nGewicht des gesprungenen Flohes in [mg] von verschiedenen Flöhen:\nBoniturnoten [1 = schwächste bis 9 = stärkste Ausprägung] von verschiedenen Flöhen:\nInfektionstatus [0 = gesund, 1 = infiziert] mit Flohschnupfen von verschiedenen Flöhen:\nJe nachdem was wir messen, nimmt \\(Y\\) andere Zahlenräume an. Wir bezeichnen unser gemessenes \\(Y\\) auch gerne als Messwert, Outcome oder Endpunkt. Wir können die Sprungweite eben sehr einfach mit einer Kommazahl messen. Dafür benötigen wir nur ein Lineal. Das geht schlecht, wenn wir messen, ob einer unserer Hundeflöhe nieste und somit Flohschnupfen hat. Ein Lineal hilft uns hier nicht weiter. Was ähnliches haben wir auch bei der Anzahl der Flohhaare auf dem rechten Flohbein vorliegen. Hier zählen wir und können somit keine halben Flohhaare messen.\nWir sagen, \\(Y\\) folgt einer Verteilung. Die Sprungweite eines Hundeflohs ist normalverteilt, die Anzahl an Flöhen folgt einer Poisson Verteilung, die Boniturnoten sind multinominal/ordinal bzw. kategoriell verteilt. Der Infektionsstatus ist binomial verteilt. Wir werden uns später die Verteilungen anschauen und visualisieren. Das können wir hier aber noch nicht. Wichtig ist, dass du schon mal gehört hast, dass \\(Y\\) unterschiedlich verteilt ist, je nachdem welche Dinge wir messen. Die Tabelle 5.1 zeigt dir die Darstellung der Daten von oben in einer einzigen Tabelle. Bitte beachte, dass genau eine Zeile für eine Beobachtung, in diesem Fall einem Floh, vorgesehen ist.\nTabelle 5.1— Tabelle von sieben Hundeflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte animal gibt an, dass wir es hier mit Hundeflöhe zu tun haben. Die Tabelle ist im Long-Format dargestellt.\n\n\n\n\n\n\nanimal\njump_length\nflea_count\nweight\ngrade\ninfected\n\n\n\n\ndog\n5.7\n18\n2.1\n8\n0\n\n\ndog\n8.9\n22\n2.3\n8\n1\n\n\ndog\n11.8\n17\n2.8\n6\n1\n\n\ndog\n5.6\n12\n2.4\n8\n0\n\n\ndog\n9.1\n23\n1.2\n7\n1\n\n\ndog\n8.2\n18\n4.1\n7\n0\n\n\ndog\n7.6\n21\n3.2\n9\n0",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-1",
    "href": "example-fleas-dogs-cats.html#sec-example-1",
    "title": "5  Von Flöhen auf Tieren",
    "section": "",
    "text": "HandschriftlichMathematikR (built-in)\n\n\n\n\n\n\n\n\n\n\\[\nY_{jump} = \\{5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6\\}.\n\\]\n\n\n\n\nR Code [zeigen / verbergen]\ny_jump_dog &lt;- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)\ny_jump_dog\n\n\n[1]  5.7  8.9 11.8  5.6  9.1  8.2  7.6\n\n\n\n\n\n\n\nHandschriftlichMathematikR (built-in)\n\n\n\n\n\n\n\n\n\n\\[\nY_{count} = \\{18, 22, 17, 12, 23, 18, 21\\}.\n\\]\n\n\n\n\nR Code [zeigen / verbergen]\ny_count_dog &lt;- c(18, 22, 17, 12, 23, 18, 21)\ny_count_dog\n\n\n[1] 18 22 17 12 23 18 21\n\n\n\n\n\n\n\nHandschriftlichMathematikR (built-in)\n\n\n\n\n\n\n\n\n\n\\[\nY_{weight} = \\{2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2\\}.\n\\]\n\n\n\n\nR Code [zeigen / verbergen]\ny_weight_dog &lt;- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)\ny_weight_dog\n\n\n[1] 2.1 2.3 2.8 2.4 1.2 4.1 3.2\n\n\n\n\n\n\n\nHandschriftlichMathematikR (built-in)\n\n\n\n\n\n\n\n\n\n\\[\nY_{grade} = \\{8, 8, 6, 8, 7, 7, 9\\}.\n\\]\n\n\n\n\nR Code [zeigen / verbergen]\ny_grade_dog &lt;- c(8, 8, 6, 8, 7, 7, 9)\ny_grade_dog\n\n\n[1] 8 8 6 8 7 7 9\n\n\n\n\n\n\n\nHandschriftlichMathematikR (built-in)\n\n\n\n\n\n\n\n\n\n\\[\nY_{infected} = \\{0, 1, 1, 0, 1, 0, 0\\}.\n\\]\n\n\n\n\nR Code [zeigen / verbergen]\ny_infected_dog &lt;- c(0, 1, 1, 0, 1, 0, 0)\ny_infected_dog\n\n\n[1] 0 1 1 0 1 0 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatei für von Flöhen und Hunden\n\n\n\nDu findest die Datei flea_dog.xlsx auf GitHub jkruppa.github.io/data/ als Excel oder auch als CSV.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-2",
    "href": "example-fleas-dogs-cats.html#sec-example-2",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.2 Von Flöhen auf Hunden und Katzen",
    "text": "5.2 Von Flöhen auf Hunden und Katzen\n\nWir wollen jetzt das Beispiel von den Hundeflöhen um eine weitere Spezies erweitern. Wir nehmen noch die Katzen mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit von Katzenflöhen aus? Konzentrieren wir uns hier einmal auf die Sprungweite. Wir können wie in dem vorherigen Beispiel mit den Hundeflöhen die Sprungweiten [cm] der Katzenflöhe wieder in der gleichen Weise aufschreiben:\n\\[\nY_{jump} = \\{3.2, 2.2, 5.4, 4.1, 4.3, 7.9, 6.1\\}.\n\\]\nWenn wir jetzt die Sprungweiten der Hundeflöhe mit den Katzenflöhen vergleichen wollen haben wir ein Problem. Beide Zahlenvektoren heißen gleich, nämlich \\(Y_{jump}\\). Wir könnten jeweils in die Indizes noch \\(dog\\) und \\(cat\\) schreiben als \\(Y_{jump,\\, dog}\\) und \\(Y_{jump,\\, cat}\\) und erhalten folgende Vektoren. In der Mathematik würden wir jetzt Indizes vergeben, aber das macht die Sachlage nur begrenzt übersichtlicher.\n\\[\n\\begin{align}\nY_{jump,\\, dog} &= \\{5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6\\}\\\\\nY_{jump,\\, cat} &= \\{3.2, 2.2, 5.4, 4.1, 4.3, 7.9, 6.1\\}\n\\end{align}\n\\]\nDurch mehr Spezies werden die Indizes immer länger und unübersichtlicher. Auch das \\(Y\\) einfach \\(Y_{dog}\\) oder \\(Y_{cat}\\) zu nennen ist keine Lösung - wir wollen uns vielleicht später nicht nur die Sprungweite zwischen den Hunde- und Katzenflöhen vergleichen, sondern vielleicht auch die Anzahl an Flohhaaren oder den Infektionsstatus. Dann stünden wir wieder vor dem Problem die \\(Y\\) für die verschiedenen Outcomes zu unterscheiden. Daher erstellen wir uns die Tabelle 5.2. Wir haben jetzt eine Datentabelle vorliegen in der die Sprungweiten von sieben Hunden und sieben Katzen dargestellt sind.\n\n\n\n\nTabelle 5.2— Sprunglängen [cm] für Hunde- und Katzenflöhe. Die Tabelle ist im Wide-Format dargestellt.\n\n\n\n\n\n\ndog\ncat\n\n\n\n\n5.7\n3.2\n\n\n8.9\n2.2\n\n\n11.8\n5.4\n\n\n5.6\n4.1\n\n\n9.1\n4.3\n\n\n8.2\n7.9\n\n\n7.6\n6.1\n\n\n\n\n\n\n\n\nIntuitiv ist die obige Tabelle 5.2 übersichtlich und beinhaltet die Informationen die wir wollten. Wir würden sowas auch schnell in Excel bauen. Für sehr kleine Tabellen ist das auch okay, aber wir werden uns später sehr schnell mit komplexeren Fragestellungen beschäftigen und dann funktioniert das alles nicht mehr. Wir haben nämlich das Problem, das wir in dieser Tabelle 5.2 nicht noch weitere Outcomes angeben können. Wir könnten die Anzahl an Flohhaaren auf den Hunde- und Katzenflöhen nicht einfach so in dieser Form darstellen. Als Lösung ändern wir die Tabelle 5.2 in das Long-Format und erhalten die folgende Tabelle 5.3. Jede Beobachtung belegt nun eine Zeile. Dies ist sehr wichtig im Kopf zu behalten, wenn du eigene Daten in z.B. Excel erstellst.\n\n\n\n\nTabelle 5.3— Tabelle von sieben Hunde- und Katzenflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte animal gibt an, dass wir es hier mit Hunde- und Katzenflöhe zu tun haben. Die Tabelle ist im Long-Format dargestellt.\n\n\n\n\n\n\nanimal\njump_length\nflea_count\nweight\ngrade\ninfected\n\n\n\n\ndog\n5.7\n18\n2.1\n8\n0\n\n\ndog\n8.9\n22\n2.3\n8\n1\n\n\ndog\n11.8\n17\n2.8\n6\n1\n\n\ndog\n5.6\n12\n2.4\n8\n0\n\n\ndog\n9.1\n23\n1.2\n7\n1\n\n\ndog\n8.2\n18\n4.1\n7\n0\n\n\ndog\n7.6\n21\n3.2\n9\n0\n\n\ncat\n3.2\n12\n1.1\n7\n1\n\n\ncat\n2.2\n13\n2.1\n5\n0\n\n\ncat\n5.4\n11\n2.4\n7\n0\n\n\ncat\n4.1\n12\n2.1\n6\n0\n\n\ncat\n4.3\n16\n1.5\n6\n1\n\n\ncat\n7.9\n9\n3.7\n6\n0\n\n\ncat\n6.1\n7\n2.9\n5\n0\n\n\n\n\n\n\n\n\nDas Datenformat in der obigen Tabelle nennen wir auch tidy (deu. sauber) nach dem R Paket tidyr was dann auch später mit die Basis für unsere Analysen in R sein wird. Wenn ein Datensatz tidy ist, dann erfüllt er folgende Bedingungen.\n\nJede Variable ist eine Spalte; jede Spalte ist eine Variable.\nJede Beobachtung ist eine Zeile; jede Zeile ist eine Beobachtung.\nJeder Wert ist eine Zelle; jede Zelle ist ein einziger Wert.\n\nNach diesen Regeln bauen wir dann jeden Datensatz auf, den wir in einem Experiment gemessen haben.\n\n\n\n\n\n\nDatei für von Flöhen, Hunden und Katzen\n\n\n\nDu findest die Datei flea_dog_cat.xlsx auf GitHub jkruppa.github.io/data/ als Excel oder auch als CSV.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#von-wiederholten-flöhen-auf-hunden",
    "href": "example-fleas-dogs-cats.html#von-wiederholten-flöhen-auf-hunden",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.3 Von wiederholten Flöhen auf Hunden",
    "text": "5.3 Von wiederholten Flöhen auf Hunden\nDann brauchen wir noch einen Datensatz für wiederholte Messungen der Sprungweite in [cm]. Das heitß wir haben nur fünf Hundeflöhe und messen die Sprungweite der Hundeflöhe zu zwei Zeitpunkten. Wir messen einmal wie weit die Flöhe springen würden, wenn die Flöhe hungrig sind. Dann messen wir nochmal die gleichen Flöhe, wenn sich die Flöhe satt gegessen haben. Wir erhalten damit folgende Tabelle.\n\n\n\n\nTabelle 5.4— Tabelle der Sprunglängen [cm] von fünf Hundeflöhen zu zwei Zeitpunkten. Einmal wurde die Sprungweite mit den hungrigen Flöhen und einmal mit den gleichen satten Flöhen bestimmt.\n\n\n\n\n\n\nid\nhungrig\nsatt\n\n\n\n\n1\n5.2\n6.1\n\n\n2\n4.1\n5.2\n\n\n3\n3.5\n3.9\n\n\n4\n3.2\n4.1\n\n\n5\n4.6\n5.3\n\n\n\n\n\n\n\n\nManchmal sind die Daten schwer zu verstehen, wenn wir nur die Datentabelle vorliegen haben. Deshalb habe ich dir in der folgenden Abbildung nochmal die Daten als Dotplot mit den verbundenen Messungen an den Flöhen dargestellt. Wie du siehst messen wir jeden Floh zweimal.\n\n\n\n\n\n\n\n\nAbbildung 5.2— Dotplot der Sprungweiten [cm] für Hundeflöhe in zwei verschiedenen Ernährungszuständen gemessen an zwei Zeitpunkten. Die Linien verbinden die Messung an dem gleichen Floh. Die Zahlen stellen die Floh-ID dar.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-3",
    "href": "example-fleas-dogs-cats.html#sec-example-3",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.4 Von Flöhen auf Hunden, Katzen und Füchsen",
    "text": "5.4 Von Flöhen auf Hunden, Katzen und Füchsen\nWir wollen jetzt das Beispiel von den Hunde- und Katzenflöhen um eine weitere Spezies erweitern. Warum machen wir das? Später wollen wir uns anschauen, wie sich verschiedene Gruppen oder Behandlungen voneinander unterscheiden. Wir brauchen also mehr Spezies. Wir nehmen noch die Füchse mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit und den anderen Messwerten von Hunde-, Katzen- und Fuchsflöhen aus?\n\n\n\n\nTabelle 5.5— Tabelle von sieben Hunde-, Katzen und Fuchsflöhen mit der Sprunglänge [cm], Anzahl an Haaren am rechten Flohbein, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Flohschnupfen. Die erste Spalte animal gibt an, welche Flohspezies gemessen wurde. Die Tabelle ist im Long-Format dargestellt.\n\n\n\n\n\n\nanimal\njump_length\nflea_count\nweight\ngrade\ninfected\n\n\n\n\ndog\n5.7\n18\n2.1\n8\n0\n\n\ndog\n8.9\n22\n2.3\n8\n1\n\n\ndog\n11.8\n17\n2.8\n6\n1\n\n\ndog\n5.6\n12\n2.4\n8\n0\n\n\ndog\n9.1\n23\n1.2\n7\n1\n\n\ndog\n8.2\n18\n4.1\n7\n0\n\n\ndog\n7.6\n21\n3.2\n9\n0\n\n\ncat\n3.2\n12\n1.1\n7\n1\n\n\ncat\n2.2\n13\n2.1\n5\n0\n\n\ncat\n5.4\n11\n2.4\n7\n0\n\n\ncat\n4.1\n12\n2.1\n6\n0\n\n\ncat\n4.3\n16\n1.5\n6\n1\n\n\ncat\n7.9\n9\n3.7\n6\n0\n\n\ncat\n6.1\n7\n2.9\n5\n0\n\n\nfox\n7.7\n21\n3.1\n5\n1\n\n\nfox\n8.1\n25\n4.2\n4\n1\n\n\nfox\n9.1\n31\n5.1\n4\n1\n\n\nfox\n9.7\n12\n3.5\n5\n1\n\n\nfox\n10.6\n28\n3.2\n4\n0\n\n\nfox\n8.6\n18\n4.6\n4\n1\n\n\nfox\n10.3\n19\n3.7\n3\n0\n\n\n\n\n\n\n\n\nDer Datensatz in Tabelle 5.5 beginnt schon recht groß zu werden. Deshalb brauchen wir auch die Statistiksoftware R als Werkzeug um große Datensätze auswerten zu können.\n\n\n\n\n\n\nDatei für von Flöhen auf Tieren\n\n\n\nDu findest die Datei flea_dog_cat_fox.xlsx auf GitHub jkruppa.github.io/data/ als Excel oder auch als CSV.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-4",
    "href": "example-fleas-dogs-cats.html#sec-example-4",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.5 Von Flöhen auf Tieren in Habitaten",
    "text": "5.5 Von Flöhen auf Tieren in Habitaten\nWir schauen uns in diesem Beispiel wiederum drei Tierarten an: Hunde, Katzen und Füchse. Auf diesen Tierarten messen wir die Sprunglänge von jeweils zehn Tieren, lassen aber den Rest einmal weg. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte site in der wir vier verschiedene Messorte protokollieren. Es ergibt sich folgende Tabelle 5.6 und die dazugehörige Abbildung 5.3.\n\n\n\n\nTabelle 5.6— Sprunglängen [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten.\n\n\n\n\n\n\nanimal\nsite\nrep\njump_length\n\n\n\n\ncat\ncity\n1\n12.04\n\n\ncat\ncity\n2\n11.98\n\n\ncat\ncity\n3\n16.1\n\n\ncat\ncity\n4\n13.42\n\n\ncat\ncity\n5\n12.37\n\n\ncat\ncity\n6\n16.36\n\n\n…\n…\n…\n…\n\n\nfox\nfield\n5\n16.38\n\n\nfox\nfield\n6\n14.59\n\n\nfox\nfield\n7\n14.03\n\n\nfox\nfield\n8\n13.63\n\n\nfox\nfield\n9\n14.09\n\n\nfox\nfield\n10\n15.52\n\n\n\n\n\n\n\n\nDie Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Boxplot in Abbildung 5.3 an. Wir sehen hier, dass wir drei Tierarten an vier Orten die Sprungweite in [cm] gemessen haben.\n\n\n\n\n\n\n\n\nAbbildung 5.3— Boxplot der Sprungweiten [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten.\n\n\n\n\n\n\n\n\n\n\n\nDatei für von Flöhen auf Tieren in Habitaten\n\n\n\nDu findest die Datei flea_dog_cat_fox_site.xlsx auf GitHub jkruppa.github.io/data/ als Excel oder auch als CSV.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-5",
    "href": "example-fleas-dogs-cats.html#sec-example-5",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.6 Von vielen Flöhen auf Hunden und Katzen",
    "text": "5.6 Von vielen Flöhen auf Hunden und Katzen\nWir schauen uns in diesem Beispiel wiederum nur zwei Tierarten an: Hunde und Katzen. Auf diesen Tierarten messen wir wieder die Sprunglänge in [cm] von jeweils 400 Tieren. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte jump_weight in [mg] sowie sex [male, female]. Bei Versuch wurde noch in der Variable hatch_time gemessen, wie lange die Flöhe in Stunden zum Schlüpfen brauchen. Es ergibt sich folgende Tabelle 5.7 mit den ersten zehn Beobachtungen und die dazugehörige Abbildung 5.4.\n\n\n\n\nTabelle 5.7— Sprunglängen [cm], Gewichte [mg], Geschecht [sex] und Schlüpfzeit [h] für Hunde- und Katzenflöhe.\n\n\n\n\n\n\nanimal\nsex\nweight\njump_length\nflea_count\nhatch_time\n\n\n\n\ncat\nmale\n6.02\n15.79\n5\n483.60\n\n\ncat\nmale\n5.99\n18.33\n1\n82.56\n\n\ncat\nmale\n8.05\n17.58\n1\n296.73\n\n\ncat\nmale\n6.71\n14.09\n3\n140.90\n\n\ncat\nmale\n6.19\n18.22\n1\n162.20\n\n\ncat\nmale\n8.18\n13.49\n1\n167.47\n\n\ncat\nmale\n7.46\n16.28\n1\n291.20\n\n\ncat\nmale\n5.58\n14.54\n0\n112.58\n\n\ncat\nmale\n6.19\n16.36\n1\n143.97\n\n\ncat\nmale\n7.53\n15.08\n1\n766.31\n\n\n\n\n\n\n\n\nDie Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Scatterplot in Abbildung 5.4 an. Wir sehen hier, dass wir das mit dem Gewicht [mg] der Flöhe auch die Sprungweite in [cm] steigt.\n\n\n\n\n\n\n\n\nAbbildung 5.4— Scatterplot der Sprunglängen [cm] und Gewichte [mg] für Hunde- und Katzenflöhe.\n\n\n\n\n\n\n\n\n\n\n\nDatei für von vielen Flöhen auf Hunden und Katzen\n\n\n\nDu findest die Datei flea_dog_cat_length_weight.xlsx auf GitHub jkruppa.github.io/data/ als Excel oder auch als CSV.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#sec-example-flea-model",
    "href": "example-fleas-dogs-cats.html#sec-example-flea-model",
    "title": "5  Von Flöhen auf Tieren",
    "section": "5.7 Von der Modellierung von Flöhen",
    "text": "5.7 Von der Modellierung von Flöhen\n\n\n\n\n\n\nAbbildung 5.5— Junge und alte Flöhe ernären sich von verschiedenen Sachen. Hat die Ernährung und der Entwicklungsstand einen Einfluss auf die Sprungweite und andere Charakteristika von Flöhen?\n\n\n\nWenn wir uns später komplexere Modelle anschauen, dann brauchen wir auch etwas komplexere Daten. Im Folgenden habe ich einmal die Flohdaten erweitert. Wir fragen uns hier, ob die Fütterung der Flöhe einen Unterschied auf die Sprungweite hat. Darüber hinaus schauen wir uns auch noch verschiedene Entwicklungsstadien der Flöhe an. Daher haben wir hier ein zweifaktorielles Design vorliegen. Zusätzlich haben wir noch das Gewicht der Flöhe bestimmt und mit wie vielen Flöhen der einzelne Floh geschlüpft ist. Wir haben also folgende Faktoren und Einflussfaktoren vorliegen.\n\nDie Art der Fütterung feeding mit den Leveln Blut blood mit [50g/ml], Zuckerwasser als Kontrolle sugar_water mit [25g/ml] und Ketchup ketchup mit [1ml] pro Fütterung.\nDen Entwicklungsstand stage mit den zwei Leveln für juvenile Flöhe juvenile und ausgewachsenen Flöhen adult.\nDas Gewicht weight in [mg] der einzelnen Flöhe zum Zeitpunkt der Messung.\nDie Brutgröße hatched des einzelnen Flohes. Damit auch die Anzahl an Geschwistern in dem jeweiligen Wurf aus dem der Floh stammt.\n\nIm Weiteren haben wir unterschiedliche Outcomes \\(y\\) gemessen. Zum einen die Sprungweite in [cm], die Exterieurbeurteilung der Flöhe als Bonitur, die Anzahl an Haaren an dem linken sowie rechten Bein sowie der Infektionsstatus der Flöhe mit Flohschnupfen. Alle vier Messwerte folgen damit dann auch einer anderen Verteilung und haben somit auch einen anderen Zahlenraum.\n\nDie Sprungweite jump_length gemessen in [cm] gesprungen.\nDie Anzahl an Haaren am rechten sowie linken Bein count_leg_left und count_leg_right sowie die mittlere, aufgerundete Anzahl mit count_leg, als ein weiterer Indikator für Gesundheit und Aerodynamik.\nDie Exterieurbeurteilung bonitur auf einer Likert Skala von 1 bis 9, wobei 9 die stärkste Ausprägung und damit den gesundesten Floh darstellt.\nDer Infektionsstatus mit Flohschnupfen infected auf einer Skala von infiziert \\((ja/1)\\) und nicht infiziert \\((nein/0)\\).\n\nEs ergibt sich dann die folgende Abbildung der drei Endpunkte für die Sprungweite, gemittelte Anzahl an Haaren an den Beinen auf der log-Skala sowie die Exterieurbeurteilung. Der binäre Endpunkt mit dem Infektionsstatus lässt sich immer schwerer in einer Abbilung darstellen. Daher ergänze ich dazu noch die Tabelle 53.8 für eine bessere Übersicht.\n\n\n\n\n\n\n\n\nAbbildung 5.6— Visualisierung der drei Messwerte Sprungweite, Anzahl an Beinhaaren sowie der Boniturnoten für die Faktoren Ernährungsform und Entwicklungsstand.\n\n\n\n\n\nDie folgende Tabelle zeigt nochmal die Verteilung der gesunden und kranken Flöhe mit Flohschnupfen aufgeteilt für die Faktoren Ernährungsform sowie Entwicklungsstand. Dazu kommt dann noch das mittlere Gewicht in den beiden Infektionsgruppen sowie die mittlere Anzahl an Geschwistern in dem entsprechenden Wurf. Wir haben eine ungefähre Gleichverteilung von gesunden zu kranken Flöhen.\n\n\n\n\nTabelle 5.8— Deskriptive Statistik des Infektionsstatus (0 = nein / 1 = ja) mit Flohschnupfen aufgeteilt nach den Faktoren und anderen Variablen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\n0\nN = 211\n1\nN = 271\n\n\n\n\nfeeding\n\n\n\n\n\n\n    blood\n3 / 21 (14%)\n13 / 27 (48%)\n\n\n    ketchup\n9 / 21 (43%)\n7 / 27 (26%)\n\n\n    sugar_water\n9 / 21 (43%)\n7 / 27 (26%)\n\n\nstage\n\n\n\n\n\n\n    adult\n14 / 21 (67%)\n10 / 27 (37%)\n\n\n    juvenile\n7 / 21 (33%)\n17 / 27 (63%)\n\n\nweight\n11.18 (5.88)\n9.00 (5.05)\n\n\nhatched\n478.63 (249.99)\n455.82 (194.37)\n\n\n\n1 n / N (%); Mean (SD)\n\n\n\n\n\n\n\n\n\n\n\nNach dem Ende der Laufzeit unseres Experiments haben wir dann auch noch jedem Floh einmal Blut abgenommen und geschaut wie die Laborwerte aussehen. Dazu haben wir dann aber natürlich nur eine Auswahl an sechs Laborwerten genommen. Wir haben folgende sechs Werte aus dem Blut der Flöhe bestimmt.\n\nDen Kalium-Wert in \\(mmol/l\\).\nDen Magnesium-Wert in \\(mmol/l\\).\nDas C-reaktive Protein in \\(mg/l\\), wobei ein Wert unter 5 unauffällig ist.\nDer Hämoglobin-Wert in \\(mg/l\\).\nDie Blutsenkung in \\(mm\\).\nDie Midi-Chlorianer als Anzahl gemessen. Bei Menschen ist ein Wert von mindestens 5000 notwendig um die Macht zu spüren.\n\nEs ergeben sich dann folgende Boxplots in der Abbildung 5.7. Auf den ersten Blick sehen die kontinuierlichen Laborwerte alle sehr unterschiedlich aus. Den noch magst du einwenden, dass eventuell die Laborwerte doch irgendwie zusammenhängen könnten. So könnte man annehmen, dass eventuell auch hohe Kaliumwerte mit hohen Magnesiumwerten einhergehen. Solche Korrelationen werden wir uns dann in den folgenden Kapiteln anschauen.\n\n\n\n\n\n\n\n\nAbbildung 5.7— Boxplots der sechs Laborwerte für die beoden Faktoren Ernährungsform der Flöhe sowie deren Entwicklungsstand.\n\n\n\n\n\nDann haben wir einmal einen komplexen Datensatz, den wir uns dann detaillierter anschauen können. Du findest dann den Datensatz auch auf GitHub, wie du im folgenden Kasten siehst.\n\n\n\n\n\n\nDatei für die Modellierung von Flöhen\n\n\n\nDu findest die Datei fleas_model_data.xlsx auf GitHub jkruppa.github.io/data/ als Excel.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "example-fleas-dogs-cats.html#referenzen",
    "href": "example-fleas-dogs-cats.html#referenzen",
    "title": "5  Von Flöhen auf Tieren",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nCadiergues, M.-C., Joubert, C., & Franc, M. (2000). A comparison of jump performances of the dog flea, Ctenocephalides canis (Curtis, 1826) and the cat flea, Ctenocephalides felis felis (Bouché, 1835). Veterinary parasitology, 92(3), 239–241.",
    "crumbs": [
      "Datenbeispiele",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Von Flöhen auf Tieren</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bio Data Science",
    "section": "",
    "text": "Willkommen\nIn diesem Kochbuch findest du eine umfangreiche Sammlung an Rezepten aus den Bereichen Biostatistik, Biometrie, Statistik, Bio Data Science und R-Programmierung. Damit kannst du in diesen Fachgebieten tiefgreifende Kenntnisse für die Analyse von Daten erwerben, ohne an meinen Kursen teilnehmen zu müssen. Du bist herzlich eingeladen, hier und dort dich einzulesen, um zu sehen, ob etwas für dich von Interesse ist und um dir dann dein eigenes Menü zusammenzustellen. Das Buch wird kontinuierlich von mir aktualisiert und eigentlich schreibe ich die ganze Zeit mal hier und dort weiter. Zusätzlich zu den Texten stehen dir auch erläuternde YouTube-Videos zur Verfügung. Auf jeden Fall freut es mich, dass du daran interessiert bist, hier etwas Neues zu lernen, sei es aus eigenem Antrieb oder weil du dich auf eine anstehende Klausur vorbereiten möchtest. In jedem Fall empfehle ich dir, dich einfach um zuschauen. Lass dich nicht vom Umfang erschrecken, dass ist so passiert…\nWarum schreibe ich dieses Buch? Primär, weil ich selber immer schon mal so ein Buch lesen wollte. Daher soll dieses Buch auch sehr viele Ziele verfolgen. Damit wir nicht das Kind mit dem Bade ausschütten, habe ich im Folgenden nochmal aufgeschlüsselt, was oder wofür du eventuell lernen willst. Es macht nun mal einen nicht unerheblichen Unterschied, ob du die Klausur bestehen willst, eine Abschlussarbeit schreibst oder gar ein Projekt auswerten willst. Im Weiteren wirst du hier ab und zu das Bild eines niedergeschlagenen Engels der Statistik sehen.\nDeshalb ist alles manchmal nicht so mathematisch genau wie es sein könnte, aber es reicht um mit dem Material hier sinnvoll zu arbeiten. Wir wollen ja ins Tun kommen und nicht nur die Sachen hier theoretisch überdenken.",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "index.html#youtube",
    "href": "index.html#youtube",
    "title": "Bio Data Science",
    "section": "YouTube",
    "text": "YouTube\nDu liest gerade mein Buch für die Vorlesungen an der Hochschule Osnabrück in der Fakultät Agrarwissenschaften und Landschaftsarchitektur (AuL). Um den Stoff, den ich vermitteln möchte, zu erlernen, stehen dir verschiedene Möglichkeiten offen. Neben meinen Vorlesungen kannst du auch auf YouTube lernen, indem du meine Lernvideos anschaust. In den Videos wiederhole ich Inhalte der Vorlesung sowie der R Programmierung. Der große Vorteil ist aber, dass du auf Pause drücken und dir Inhalte wiederholt anschauen kannst. Gerne kannst du dir einmal das Einführungsvideo anschauen.",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "index.html#klausur",
    "href": "index.html#klausur",
    "title": "Bio Data Science",
    "section": "Klausur",
    "text": "Klausur\nIm Weiteren findest du meine gesammelten Klausurfragen für alle Module auf GitHub unter folgendem Link: gesammelten Klausurfragen auf GitHub oder auf ILIAS im entsprechenden Modul. Die Klausurfragen zu den einzelnen Vorlesungen innerhalb eines Moduls werden in den entsprechenden Übungen behandelt. Zusätzlich gibt es ein Archiv, das alle bisherigen Klausuren über alle Studiengänge hinweg enthält. Dieses Archiv findest du hier: Archive aller bisherigen Klausuren. In der  Playlist der Fragen & Antworten findest du nochmal alle Antworten zu den Klausurfragen kurz besprochen.",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "index.html#zitation",
    "href": "index.html#zitation",
    "title": "Bio Data Science",
    "section": "Zitation",
    "text": "Zitation\nVielleicht möchtest du in deiner Abschlussarbeit oder deinem Projekt auch mich hier mit meinem Openbook zitieren. Dafür hier einmal ein Zitiervorschlag. Bitte schaue dann nochmal in deine Leitfäden, wenn du unsicher bist, ob die Formatierung so richtig ist. Es gibt ja immer zig Varianten von einer Zitation.\n\n\n\n\n\n\nKruppa-Scheetz, Jochen (2025) Openbook Bio Data Science - Der endgültige Leidfaden, https://jkruppa.github.io/ (Zugriff am 3. Aug. 2025)",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "index.html#kontakt",
    "href": "index.html#kontakt",
    "title": "Bio Data Science",
    "section": "Kontakt",
    "text": "Kontakt\nNoch Fragen? Wie erreichst du mich? Am einfachsten über die gute, alte E-Mail. Bitte beachte, dass gerade kurz vor den Prüfungen ich mehr E-Mails kriege. Leider kann es dann einen Tick dauern. Einfach an j.kruppa@hs-osnabrueck.de schreiben. Du findest hier auch eine kurze Formulierungshilfe. Bitte gib immer in deiner E-Mail dein Modul - was du belegst - mit an. Pro Semester unterrichte ich immer drei sehr ähnlich klingende Module. Daher schau nochmal hier in der Liste, wenn du unsicher bist.\n\n\n\n\n\n\nHallo Herr Kruppa-Scheetz,\n… ich belege gerade Ihr Modul Modulname und hätte eine Bitte/Frage/Anregung…\n… ich benötige Hilfe bei der Planung/Auswertung meiner Bachelorarbeit…\nMit freundlichen Grüßen\nM. Muster",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "index.html#geschichten-von-interesse",
    "href": "index.html#geschichten-von-interesse",
    "title": "Bio Data Science",
    "section": "Geschichten von Interesse",
    "text": "Geschichten von Interesse\n\n“Hello Fry. It’s a [rolls dice] pleasure to meet you.” — Gary Gygax, Anthology of Interest I\n\nHier finden sich Tools & Tipps für meinen organisatorischen Ablauf sowie Geschichten von Interesse in meinen Veranstaltungen. Also eigentlich nichts von allgemeinen Interesse außerhalb des Kontext meiner Vorlesungen. Aber wie immer, wer bin ich, zu Entscheiden was für dich von Interesse ist.\n\n\n\n\n\n\nHängt die Dauer des Urinierens von der Körpergröße ab?\n\n\n\n\n\nDuration of urination does not change with body size\n\n\n\n\n\n\n\n\n\nHängt die Dauer des Gähnens von der Gehirngröße ab?\n\n\n\n\n\nThe bigger your brain, the longer you yawn und die Veröffentlichung Yawn duration predicts brain weight and cortical neuron number in mammals\n\n\n\n\n\n\n\n\n\nAls Terminplaner nuudel\n\n\n\n\n\nnuudel - nicht trackendes Termintool\n\n\n\n\n\n\n\n\n\nGummibärchen Short-URL\n\n\n\n\n\nshorturl.at/iouF4\n\n\n\n\n\n\n\n\n\nLink zu Tweedback\n\n\n\n\n\nTweedback innerhalb einer Veranstaltung\n\n\n\n\n\n\n\n\n\nUhr für die Prüfung\n\n\n\n\n\nUhr | PTB oder Uhr | Digital",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html",
    "href": "stat-linear-reg-basic.html",
    "title": "44  Simple lineare Regression",
    "section": "",
    "text": "44.1 Allgemeiner Hintergrund\nLetzte Änderung am 05. August 2025 um 20:38:45\nIn diesem Kapitel wollen wir mit den Grundlagen des statistischen Modellierens beginnen. Wir nutzen dazu die simple lineare Regression als eine Methode um zu Verstehen, was eigentlich das statistische Modellieren macht. Dabei konzentrieren wir uns auf die lineare Regression, da wir hier ein lineares Modell vorliegen haben. Wir wollen also eine Grade Linie durch Punkte ziehen. Die Punkte sind in einem Scatterplot mit einer x-Achse und einer y-Achse dargestellt. Das ist für den Anfang schwierig genug. Später können wir auch nicht lineare Zusammenhänge modellieren. Dann nutzen wir auch nur eine Einflussvariable und nennen deshalb auch die Regression eine simple lineare Regression. Später in den folgenden Kapiteln erweitern wir dann die Regression und schauen uns auch an, wie gut die Regression geklappt hat. Mit gut meine ich, in wie weit die Grade durch die Punkte auch den Zusammenhang zwischen den x-Werten und den y-Werte erklärt. Dazu dann mehr mehr in dem Kapitel zu der Modelgüte einer Regression.\nWas macht also eine simple lineare Regression? Die Regression ist eine Methode um eine lineare Grade durch eine Punktewolke in einem Scatterplot zu zeichnen. Dabei haben wir nur eine Einflussvariable \\(x\\) vorliegen, da unser Modell zuallerst simple sein soll. Der Messwert \\(y\\) ist in diesem Kapitel noch normalverteilt und damit auch kontinuierlich. Wir wollen also den Zusammenhang zwischen zwei kontinuierlichen Variablen durch eine Regression bestimmen. Wir sprechen in diesem Zusammenhang mit einer kontinuierlichen Einflussvariable von einer Kovariate. In einem nächsten Schritt ändern wir dann die Einflussvariable auf eine kategoriale Einflussvariable. Wir haben dann einen Faktor mit unterschiedlichen Gruppen vorliegen. Beide Fälle wollen wir uns dann einmal anschauen. Beginnen wollen wir aber mit einer allgemeinern Betrachtung. Welche Modelltypen oder Fragestellungen gibt es eigentlich? Bevor wir damit anfangen, einmal etwas sprachlicher Hintergrund.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#allgemeiner-hintergrund",
    "href": "stat-linear-reg-basic.html#allgemeiner-hintergrund",
    "title": "44  Simple lineare Regression",
    "section": "",
    "text": "Sprachlicher Hintergrund\n\n“In statistics courses taught by statisticians we don’t use independent variable because we use independent on to mean stochastic independence. Instead we say predictor or covariate (either). And, similarly, we don’t say”dependent variable” either. We say response.” — User berf auf r/AskStatistics\n\nWenn wir uns mit dem statistischen Modellieren beschäftigen wollen, dann brauchen wir auch Worte um über das Thema reden zu können. Statistik wird in vielen Bereichen der Wissenschaft verwendet und in jedem Bereich nennen wir dann auch Dinge anders, die eigentlich gleich sind. Daher werde ich mir es hier herausnehmen und auch die Dinge so benennen, wie ich sie für didaktisch sinnvoll finde. Wir wollen hier was verstehen und lernen, somit brauchen wir auch eine klare Sprache.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Jeder nennt in der Statistik sein Y und X wie er möchte. Da ich hier nicht nur von Y und X schreiben will, führe ich eben die Worte ein, die ich nutzen will. Damit sind die Worte dann auch richtig, da der Kontext definiert ist. Andere mögen es dann anders machen. Ich mache es eben dann so. Danke.” — Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.\n\n\n\n\nIn dem folgenden Kasten erkläre ich nochmal den Gebrauch meiner Begriffe im statistischen Testen. Es ist wichtig, dass wir hier uns klar verstehen. Zum einen ist es angenehmer auch mal ein Wort für ein Symbol zu schreiben. Auf der anderen Seite möchte ich aber auch, dass du dann das Wort richtig einem Konzept im statistischen Modellieren zuordnen kannst. Deshalb einmal hier meine persönliche und didaktische Zusammenstellung meiner Wort im statistischen Modellieren. Du kannst dann immer zu dem Kasten zurückgehen, wenn wir mal ein Wort nicht mehr ganz klar ist. Die fetten Begriffe sind die üblichen in den folgenden Kapiteln. Die anderen Worte werden immer mal wieder in der Literatur genutzt.\n\n\n\n\n\n\nWorte und Bedeutungen im statistischen Modellieren\n\n\n\n\n“Die Grenzen meiner Sprache bedeuten die Grenzen meiner Welt.” — Ludwig Wittgenstein\n\nHier kommt einmal die Tabelle mit den wichtigsten Begriffen im statistischen Modellieren und wie ich die Worte benutzen werde. Damit wir uns verstehen und du was lernen kannst. In anderen Büchern und Quellen findest du teilweise die Worte in einem anderen Sinnzusammenhang. Das ist gut so dort. Bei mir ist es anders.\n\n\n\nTabelle 44.1— Zusammenfassende Tabelle des Sprachgebrauchs in meinem statistischen Modellieren. Die fett hervorgehobenen Bezeichnungen werden hier genutzt. (LHS = left hand side, RHS = right hand side)\n\n\n\n\n\n\n\n\n\n\n\n\nSymbol\nDeutsch\nEnglisch\n\n\n\n\nLHS\n\\(Y\\) / \\(y\\)\nMesswert / Endpunkt / Outcome / Abhängige Variable\nresponse / outcome / endpoint / dependent variable\n\n\nRHS\n\\(X\\) / \\(x\\)\nEinflussvariable / Erklärende Variable / Fester Effekt / Unabhängige Variable\nrisk factor / explanatory / fixed effect / independent variable\n\n\nRHS\n\\(Z\\) / \\(z\\)\nZufälliger Effekt\nrandom effect\n\n\n\\(X\\) ist kontinuierlich\n\\(c_1\\)\nKovariate 1\ncovariate 1\n\n\n\\(X\\) ist kategorial\n\\(f_A\\)\nFaktor \\(A\\) mit Level \\(A.1\\) bis \\(A.j\\)\nfactor \\(A\\) with levels \\(A.1\\) to \\(A.j\\)\n\n\n\n\n\n\nAm Ende möchte ich nochmal darauf hinweisen, dass wirklich häufig von der abhängigen Variable (eng. dependent variable) als Messwert und unabhängigen Variablen (eng. independent variable) für die Einflussvariablen gesprochen wird. Aus meiner Erfahrung bringt die Begriffe jeder ununterbrochen durcheinander. Deshalb einfach nicht diese Worte nutzen.\n\n\n\n\n\n\nAbbildung 44.1— Am Ende läuft es dann doch auf sowas raus…\n\n\n\n\n\n\n\nDas Modell\n\n“Models are about what changes, and what doesn’t. Some are useful.” — Markus Gesmann\n\nFangen wir also erstmal allgemeiner an ein Modell und deren schreibweise zu verstehen. Was ist ein Modell im statistischen Sinne? Wenn du an ein Modell denkst und ein Modellauto oder aber ein Modell eines Hauses oder Landschaft vor dir siehst, dann ist das gar nicht so weit weg vonm einem statistischen Modell. Ein Modell eines Autos hat die Essenz eines Autos in sich. Wir erkennen das Auto wieder, haben aber natürlich nicht die gleichen Funktionalitäten wie bei einem echten Auto. So ist es auch bei dem statistischen Modellieren von Daten. Unser Auto sind also die erhobenen Daten und wir wollen ein Modell finden, was die Zusammenhänge und die Struktur in den Daten vereinfacht wiedergibt. Damit ist per se jedes Modell falsch, da es nur einen Teil der Wirklichkeit abbilden kann. Modelle sind aber manchmal nützlich. Wir können also erstmal wie folgt ein Modell zusammenfassen.\n\nWas ist ein Modell?\n\nEin Modell vereinfacht. Dabei behält es die Essenz der modellierten Sache bei. Ein statistisches Modell versucht eine Struktur in Daten zu finden. Dabei modelliert es den Zusammenhang zwischen dem Messwert und Einflussvariablen. Wir sprechen hier auch gerne von einer Modellanpassung (eng. fit).\n\n\nAllgemeiner gesprochen versucht ein statistisches Modell deine Daten in ein erklärbaren Teil und einen unerklärbaren Teil zu zerlegen. Dafür nutzen wir dann den Zusammenhang von den Messwerten und den Einflussvariablen. Wir sprechen hier auch gerne von einer Modellanpassung (eng. fit). Wir passen ein Modell den Daten an. Je mehr die Einflussvariablen unseren Messwert erklären können, desto weniger bleibt unerklärt und somit kleiner ist auch der Fehler. Hierbei müssen wir etwas mit dem Wort Fehler aufpassen. Wir haben fast immer einen unerklärten Anteil von unserem Messwert nach dem Modellieren. Wir nennen diesen Anteil Fehler, meinen damit aber nicht, dass das Modell per se fehlerhaft ist.\n\n\n\n\n\n\n\n\nAbbildung 44.2— Der Zusammenhang von Daten, dem statistischen Modell und dem Fehler. Das Modell versucht durch ein statistisches Modell \\(f(x)\\) den Zusammenhang zwischen den Einflussvariablen dem Messwert zu erklären. Den Anteil des unerklärten Messwert geht in den Fehlerterm. [Zum Vergrößern anklicken]\n\n\n\n\n\nDa wir uns natürlich für die parktische Anwendung in R bewegen, nutzen wir auch die Modellschreibweise, die in R üblich ist. In R wird diese Schreibweise auch mit der Funktion formula() genutzt. Im Folgenden siehst du einmal ein Modell in einer abstrakten Form. Wir haben den Messwert \\(Y\\) auf der linken Seite (eng. left hand side, abk. LHS) der Tilde und die Einflussvariablen \\(X\\) auf der rechten Seite (eng. right hand side, abk. RHS). Dabei steht dann das \\(X\\) hier einmal als Platzhalter und Sammelbegriff für verschiedene Arten von möglichen Variablen.\n\n\n\n\n\n\n\n\nAbbildung 44.3— Statistische Modellschreibweise mit dem Messwert auf der linken Seite und den Einflussvariablen auf der rechten Seite der Tilde. [Zum Vergrößern anklicken]\n\n\n\n\n\nWenn wir jetzt zu R wechseln, sieht es dann etwas anders aus, da wir die Platzhalter \\(Y\\) für den Messwert und \\(X\\) für die Einflussvariable durch die Namen der Spalten in unserem Datensatz ersetzen. Der Datendatz liegt dann als tibble() in R vor. Mehr dann dazu in den folgenden Beispielen in den jeweiligen Kapiteln zum Modellieren. Dann sieht das Modell in R wie in der folgenden Abbildung aus.\n\n\n\n\n\n\n\n\nAbbildung 44.4— Statistische Modellschreibweise in R mit dem Messwert auf der linken Seite und den Einflussvariablen auf der rechten Seite der Tilde. Die Platzhalter \\(Y\\) und \\(X\\) werden durch die Spaltennamen im Datensatz ersetzt. [Zum Vergrößern anklicken]\n\n\n\n\n\nJetzt haben wir verstanden über was wir sprechen wollen, was ein Modell ist und wie wir das Modell in R aufbauen. Dann können wir schon einen Schritt weitergehen und uns fragen, was wir wigentlich mit dem Modell machen wollen. Welche Forschungsfragen können wir denn mit einem statistischen Modell beantworten? Prinzipiell haben wir da zwei große Felder, die wir bearbeiten können.\n\n\nKausales vs. prädiktives Modell\n\n“Vor 2001 bestand Statistik gefühlt zu 10% aus der Prädiktion – heutzutage macht die Prädiktion die Mehrheit der Modellierungen aus.” — Gefühle einer anonymen Biometrikerin\n\nWir können ein kausuales oder ein prädiktives Modell rechnen. Wenn wir ein kausales Modell rechnen, dann haben wir die Frage im Kopf, wie ändert sich der Messwert \\(y\\), wenn sich die Einflussvariable \\(x\\) um eine Einheit ändert. Wir können die Einheit auch weglassen und allgmeiner nach der Änderung in \\(y\\) durch die Änderung in \\(x\\) sprechen. Es geht hier also um Steigung (eng. slopes) oder eben die Ableitung (eng. derivative) von \\(dy/dx\\). In einem hier besprochenen linearen Modell ist die Frage nach der Steigung einfach zu beantworten. Schwieriger wird es im nicht linearen Modell. Hier nutzen wir dann Marginal effect models um die Steigungen entlang der Kurve zu bestimmen. Hier gilt im Besonderen, dass du ohne die Einheiten der Einflussvariable und des Messwertes kein statistisches Modell interpretieren kannst.\nEine andere Frage können wir durch ein prädiktives Modell oder eine Vorhersagen (eng. predictions) herausfinden. Hier wollen wir wissen, welche Messwerte ergeben sich durch unser Modell für neue Werte der Einflussvariablen. Das können wir durch eine Vorhersage erreichen. Auch hier ist das lineare Modell einfacher zu verstehen ale eine nicht lineare Kurve. Wir können einfach neue \\(x\\)-Werte in die Formel der Gradengleichung einsetzen und erhalten die entsprechenden vorhergesagten \\(y\\)-Werte wiedergegeben. Wenn wir kein normalverteilten Messwert haben, müssen wir hier nochmal etwas mehr aufpassen. Dazu dann aber auch mehr in den entsprechenden Kapiteln zu den verschiedenen Modellierungen.\n\nWas sind Steigungen?\n\nDie Traktion der Graden über die Werte auf der x-Achse hinweg. Wenn \\(x\\) sich ändert, wir ändert sich dann der Messwert \\(y\\)? In einem linearen Modell haben wir nur einen Wert als Koeffizienten für die Steigung. Ohne die Einheiten der Einflussvariable sowie des Messwerts kann keine Steigung interpretiert werden.\n\nWas ist die Vorhersage?\n\nDie y-Werte auf der Graden für jeden beliebigen Wert auf der x-Achse. Welche Werte vom Messwert \\(y\\) sagt das Modell für \\(x\\)-Werte vorraus? Wenn wir eine neue Beobachtung machen, welchen Messwert würde sich gegeben der Einflussvariable einstellen?\n\n\nDamit ergibt sich grob die folgende Abbildung als Möglichkeiten in dem statistischen Modellieren. Wir haben hier nur ein simples Modell vorliegen und betrachten hier nur eine Einflussvariable. Die Einflussvariable kann kontinuierliche oder eben kategorial sein. Im kausalen Modell wollen wir wissen, wie sich eine Änderung in der Einflussvariablen auf den Messwert auswirkt. In dem prädiktiven Modell wollen wir eine Vorhersage des Messwertes für neue Beobachtungen machen.\n\n\n\n\n\n\n\n\nAbbildung 44.5— Das kausale und prädiktive Modell im statistischen Modellieren für den simplen Fall. In allen Fällen ist der Messwert \\(y\\) normalverteilt. (A) Kausales Modell – Wie verändert sich der Messwert \\(y\\), wenn sich die kontinuierliche Einflussvariable \\(x\\) ändert? Wie ist der numerische Zusammenhang zwischen \\(y\\) und \\(x\\)? Eine Frage nach der Steigung der Graden. (B) Kausales Modell – Wie verändert sich der Messwert \\(y\\), wenn sich die kategoriale Einflussvariable als Faktor \\(f_A\\) ändert? Wie ist der numerische Zusammenhang zwischen \\(y\\) und \\(f_A\\)? Eine Frage nach der Steigung der Graden. (C) Prädikitives Modell – Wenn \\(y\\) und \\(x\\) gemessen wurden, wie sehen dann die Werte von \\(y\\) für neue \\(x\\)-Werte aus? Können wir mit der Einflussvariable \\(x\\) die neuen Messwerte in \\(y\\) vorhersagen? [Zum Vergrößern anklicken]\n\n\n\n\n\nSoviel zu dem allgemeinen Hintergrund. Nachdem wir jetzt auch die Fragestellungen erörtert haben, wollen wir jetzt einmal verstehen, wie die simple lineare Regression als ein statistisches Modell funktioniert und wie wir dort die Gradengleichung schätzen können. Die Berechungen kommen dann nochmal extra nach der Besprechung der Daten für die Beispiele.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#theoretischer-hintergrund",
    "href": "stat-linear-reg-basic.html#theoretischer-hintergrund",
    "title": "44  Simple lineare Regression",
    "section": "44.2 Theoretischer Hintergrund",
    "text": "44.2 Theoretischer Hintergrund\nBeginnen wir damit was wir eigentlich erreichen wollen. In der folgenden Abbildung siehst du einmal die kontinuierliche Einflussvariable \\(x\\) und den kontinuierlichen Messwert \\(y\\) für sieben Beobachtungen. Jede der Beobachtungen hat einen Wert für \\(x\\) und einen Wert für \\(y\\). Wir können dann einen Scatterplot zeichnen. Jetzt wollen wir die optimale lineare Grade durch die Punkte finden. Wir erhalten dann die Gradengleichung. Darüber hinaus wollen wir auch noch wissen, wie gut die Grade durch die Punkte läuft.\n\n\n\n\n\n\n\n\nAbbildung 44.6— Visualisierung einer simplen linearen Regression mit einem kontinuierlichen Messwert (y) und einer kontinuierlichen Einflussvariable (x) dargestellt. Eine geschätzte grade wird durch die Punktewolke gelegt. Wie lautet die Gradengleichung und liegen die Punkte auf der Graden? [Zum Vergrößern anklicken]\n\n\n\n\n\nWie finden wir die optimlare Grade? Hier kommt die Methode der kleinsten Quadrate (eng. least square method) zum Einsatz. Die Methode ist alt und wird dem Mathematiker Carl Gauß zugeschrieben. Im Jahr 1801 nutze Gaus die Methode um die Bahn des Zwergplaneten Ceres für eien kurze Zeitspanne korrekt vorherzusagen. Wir wollen hier die Methode der kleinsten Quadrate anwenden, um eben die beste Grade durch die Punkte zu finden. Wie wir in den folgenden Abbildung sehen, hat die lineare Grade eine kleinere Summe an Abweichungsquadraten als die quadratische Funktion. Wir würden hier also die blaue Grade der orangenen Graden vorziehen. Prinzipiell müssten wir also eine belibige Anzahl an Graden testen, in der Praxis gibt es aber eine geschlossende Formel für die optimale lineare Grade. Bei nicht linearen Zusammenhängen sieht es dann etwas anders aus. Dazu aber später mehr in dem entsprechenden Kapitel zu nicht lineare Regression.\n\n\n\n\n\n\n\n\nAbbildung 44.7— Methode der kleinsten Quadrate zur Bestimmung der optimalen Grade durch eine Punktewolke. (A) Zwei Gradengleichungen werden beispielhaft durch die Punkte gelegt und die Abweichung der Punkte auf der Graden zu den beobachteten Werten quadriert. Anschließend werden die Abweichungsquadrate aufsummiert. (B) Je kleiner die Fläche der Abweichungsquadrate ist, desto besser passt die Grade zu den Punkten. Hier ist die Fläche der linearen Grade kleiner als der quadratischen Anpassung. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWenn du jetzt denkst ‘Hä?’, dann besuche doch einmal die fantastische Seite Explained Visually | Ordinary Least Squares Regression um selber zu erfahren, was eine lineare Regression macht. Auf der Seite findest du interaktive Abbildungen, die dir das Konzept der linearen Regression sehr anschaulich nachvollziehen lassen.\n\n\n\n\nAm Ende modellieren oder minimieren wir die Varianz. Den nichts anders sind ja die Abweichungsquadrate. Je kleiner die Beobachtungen um die Grade streuen, desto besser passt auch die Grade zu den Punkten. Und eine quadratische Streuung in der Statistik ist nichts anderes als die Varianz, die wir schon aus der deskriptiven Statistik kennen.\nNachdem wir die Methode der kleinsten Quadrate durchgeführt haben, kriegen wir folgende Gradengleichung wieder. Die Grade wird durch die Koeffizienten des y-Achsenabschnitts (eng. intercept) und der Steigung (eng. slope) beschrieben. Der nicht durch die Gradengleichung erklärte Rest wird auch Fehler (eng. error) oder im Kontext der linearen Regression dann Residuen genannt.\n\n\n\n\n\n\n\n\nAbbildung 44.8— Formelschreibweise der simplen linearen Regression beinhaltend die Koeffizienten \\(\\beta_0\\) für den y-Achsenabschnitt sowie \\(\\beta_1\\) für die Steigung der Graden für eine Einflussvariable \\(x_1\\). Die Residuen werden durch \\(\\epsilon\\) abgebildet. [Zum Vergrößern anklicken]\n\n\n\n\n\nDie Grade wird somit durch eine Gradengleichung wie oben beschreiben. Du kennst vermutlich noch die Form \\(y = mx + b\\). In der folgenden Tabelle siehst du nochmal den Vergleich von der Schreibweise der linearen Regression in der Schule und in der Statistik. Darüber hinaus sind die deutschen Begriffe den englischen Begriffen gegenüber gestellt. Warum schreiben wir die Gleichung in der Form? Damit wir später noch weitere \\(\\beta_px_p\\)-Paare ergänzen könen und so multiple lineare Modelle bauen können.\n\n\n\nTabelle 44.2— Vergleich und Übersicht der schulischen vs. statistischen Begriffe in den linearen Regression sowie die deutschen und englischen Begriffe.\n\n\n\n\n\nSchule\nStatistik\nDeutsch\nEnglisch\n\n\n\n\n\\(m\\)\n\\(\\beta_1\\)\nSteigung\nSlope\n\n\n\\(x\\)\n\\(x_1\\)\nEinflussvariable\nRisk factor\n\n\n\\(b\\)\n\\(\\beta_0\\)\ny-Achsenabschnitt\nIntercept\n\n\n\n\\(\\epsilon\\)\nResiduen\nResidual\n\n\n\n\n\n\nWir können jetzt die Gradengleichung auch gleich nochmal in der Visualisierung beschriften. In der folgenden Abbildung sehen wir die Visualisierung des kovariaten Beispieldatensatzes. Die Grade läuft durch die Punktewolke und wird durch die statistischen Maßzahlen bzw. Parameter \\(\\beta_0\\), \\(\\beta_1\\) sowie den \\(\\epsilon\\) beschrieben. Wir sehen, dass das \\(\\beta_0\\) den Intercept darstellt und das \\(\\beta_1\\) die Steigung der Graden. Wenn wir \\(x\\) um 1 Einheit erhöhen \\(x+1\\), dann steigt der \\(y\\) Wert um den Wert von \\(\\beta_1\\). Die einzelnen Abweichungen der beobachteten \\(y\\)-Wert zu den \\(y\\)-Werten auf der Grade - auch \\(\\hat{y}\\) bezeichnet - werden als Residuen oder auch \\(\\epsilon\\) abgebildet.\n\n\n\n\n\n\n\n\nAbbildung 44.9— Visualisierung einer simplen linearen Regression mit einem kontinuierlichen Messwert (y) und einer kontinuierlichen Einflussvariable (x) dargestellt. Eine geschätzte Grade wird durch die Punktewolke gelegt. Die Grade wird durch die Koeffizienten des Intercept \\(\\beta_0\\) sowie der Steigung \\(\\beta_1\\) beschrieben. [Zum Vergrößern anklicken]\n\n\n\n\n\nHier wird dann auch nochmal schneller klar, was der y-Achsenabschnitt ist und wie wir die Steigung zu interpretieren haben. Die Steigung sagt aus um welchen Wert sich der Messwert \\(Y\\) ändert, wenn sich die Einflussvariable um eine Einheit erhöht. Die Residuen sind hier auch nochmal dargestellt und beschreiben eben den Rest oder Abstand, den die lineare Gradengleichung nicht an den Messwert beschreiben kann. Wir hätten nur keine Residuen, wenn die Graden sich durch alle Punkte schlängeln würde. Das geht jedoch mit einer linearen Funktion nicht. Außer die Punkte liegen alle auf einer Linie, was in einem biologischen System sehr selten vorkommt.\nSchauen wir uns einmal den Zusammenhang von \\(y\\), den beobachteten Werten, und \\(\\hat{y}\\), den geschätzen Werten auf der Grade in unserem Beispiel an. In der folgenden Tabelle sehen wir die Berechnung der einzelnen Residuen für die Grade aus der obigen Abbildung. Die Daten kannst du dir dann nochmal im Datenabschnitt anschauen. Wir nehmen jedes beobachtete \\(y\\) und ziehen den Wert von \\(y\\) auf der Grade, bezeichnet als \\(\\hat{y}\\), ab. Diesen Schritt machen wir für jedes Wertepaar \\((y_i; \\hat{y}_i)\\). In R werden die \\(\\hat{y}\\) auch angepasste Werte (eng fitted values) genannt. Die \\(\\epsilon\\) Werte werden dann Residuen (eng. residuals) bezeichnet.\n\n\n\nTabelle 44.3— Zusammenhang zwischen den \\(y\\), den beobachteten Werten, und \\(\\hat{y}\\), den geschätzen Werten auf der Grade. Wir nennen den Abstand \\(y_i - \\hat{y}_i\\) auch Residuum oder Epsilon \\(\\epsilon\\).\n\n\n\n\n\n\n\n\n\n\n\n\nx\ny\n\\(\\boldsymbol{\\hat{y}}\\)\nResiduen (\\(\\boldsymbol{\\epsilon}\\))\nWert\n\n\n\n\n0.8\n1.2\n1.38\n\\(\\epsilon_1 = y_1 - \\hat{y}_1\\)\n\\(\\epsilon_1 = 1.2 - 1.38 = -0.18\\)\n\n\n1.0\n1.8\n1.48\n\\(\\epsilon_2 = y_2 - \\hat{y}_2\\)\n\\(\\epsilon_2 = 1.8 - 1.48 = +0.32\\)\n\n\n1.2\n1.3\n1.58\n\\(\\epsilon_3 = y_3 - \\hat{y}_3\\)\n\\(\\epsilon_3 = 1.3 - 1.58 = -0.28\\)\n\n\n1.9\n1.7\n1.94\n\\(\\epsilon_4 = y_4 - \\hat{y}_4\\)\n\\(\\epsilon_4 = 1.7 - 1.94 = -0.24\\)\n\n\n2.0\n2.6\n1.99\n\\(\\epsilon_5 = y_5 - \\hat{y}_5\\)\n\\(\\epsilon_5 = 2.6 - 1.99 = +0.61\\)\n\n\n2.7\n1.8\n2.34\n\\(\\epsilon_6 = y_6 - \\hat{y}_6\\)\n\\(\\epsilon_6 = 1.8 - 2.34 = -0.54\\)\n\n\n2.8\n2.7\n2.40\n\\(\\epsilon_7 = y_7 - \\hat{y}_7\\)\n\\(\\epsilon_7 = 2.7 - 2.40 = +0.30\\)\n\n\n\n\n\n\nDie Residuen haben einen Mittelwert von \\(\\bar{\\epsilon} = 0\\) und eine Varianz von \\(s^2_{\\epsilon} = 0.17\\). Wir schreiben, dass die Residuen normalverteilt sind mit \\(\\epsilon \\sim \\mathcal{N}(0, s^2_{\\epsilon})\\). Wir zeichnen die Grade also so durch die Punktewolke, dass die Abstände zu den Punkten, die Residuen, im Mittel null sind. Die Optimierung erreichen wir in dem wir die Varianz der Residuuen minimieren. Folglich modellieren wir die Varianz.\n\n\n\n\n\n\nWeitere Tutorien für die simple lineare Regression\n\n\n\nWir immer geht natürlich mehr als ich hier Vorstellen kann. Du findest im Folgenden Tutorien, die mich hier in dem Kapitel inspiriert haben. Ich habe mich ja in diesem Kapitel auf die Durchführbarkeit in R und die allgemeine Verständlichkeit konzentriert. Es geht aber natürlich wie immer auch mathematischer…\n\nWir funktioniert nun so eine lineare Regression und was sind den jetzt eigentlich die Koeffizienten \\(\\beta_0\\) und \\(\\beta_1\\) eigentlich? Hier gibt es die fantastische Seite Explained Visually | Ordinary Least Squares Regression, die dir nochmal erlaubt selbe mit Punkten in einem Scatterplot zu spielen und zu sehen wie sich dann die Regressionsgleichung ändert.\nDu kannst auf der Seite Manual linear regression analysis using R nochmal weiter über die lineare Regression lesen. Der Blogpost ist sehr umfangreich und erklärt nochmal schrittweise, wie die lineare Regression in R per hand funktioniert.\nSimple Regression auf Wikipedia mit weit mehr Informationen zu den Formeln und den Zusammenhängen. Ein toller zusammenfassender Artikel.\nMehr zum Modellieren findest du im Openbook “Statistical Thinking for the 21st Century” in den beiden Kapiteln Statistical Thinking for the 21st Century — What is a model? und Statistical Thinking for the 21st Century — Practical statistical modeling?",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#genutzte-r-pakete",
    "href": "stat-linear-reg-basic.html#genutzte-r-pakete",
    "title": "44  Simple lineare Regression",
    "section": "44.3 Genutzte R Pakete",
    "text": "44.3 Genutzte R Pakete\nWir wollen folgende R Pakete in diesem Kapitel nutzen.\n\n\nR Code [zeigen / verbergen]\npacman::p_load(tidyverse, magrittr, broom,\n               readxl, ggpmisc, conflicted)\nconflicts_prefer(magrittr::set_names)\nconflicts_prefer(ggplot2::annotate)\nconflicts_prefer(dplyr::filter)\n\n\nAn der Seite des Kapitels findest du den Link Quellcode anzeigen, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#daten",
    "href": "stat-linear-reg-basic.html#daten",
    "title": "44  Simple lineare Regression",
    "section": "44.4 Daten",
    "text": "44.4 Daten\nFür unsere Anwendung schauen wir uns jetzt einmal drei Datensätze an. Zuerst einen Datensatz mit der Sprungweite als kontinuierlichen Messwert und dem GEwicht als kontinuierliche Einflussvariable. Wir haben hier also einen einkovariaten Datensatz vorliegen. Dann möchte ich noch den Fall mit einer kategorialen Einflussvariable betrachten. Hier nehmen wir dann die verschiedenen Floharten als Faktor mit in den Datensatz. Wir haben dann einen einfaktoriellen Datensatz. Am Ende möchte ich dir immer nochmal zeigen, wie in R theoretisch die Berechnungen läufen. Dafür nutze ich dann einen theoretischen Datensatz mit Schlangenlängen aus Kéry (2010). Ich habe den Datensatz leicht angepasst.\n\nEinkovariater Datensatz\nWir wollen uns erstmal mit einem einfachen Datenbeispiel beschäftigen. Wir können die lineare Regression auf sehr großen Datensätzen anwenden, wie auch auf sehr kleinen Datensätzen. Prinzipiell ist das Vorgehen gleich. Wir nutzen jetzt aber erstmal einen kleinen Datensatz mit \\(n=7\\) Hundeflöhen als Beobachtungen. In der folgenden Tabelle ist der Datensatz cov1_tbl dargestellt. Wir wollen den Zusammenhang zwischen der Sprungweite in [cm] und dem Gewicht in [mg] für sieben Hundeflöhe modellieren.\n\n\nR Code [zeigen / verbergen]\ncov1_tbl &lt;- read_xlsx(\"data/regression_data.xlsx\", sheet = \"covariate\")\n\n\nDann schauen wir uns die Daten einmal in der folgenden Tabelle einmal an. Wir haben die Sprungweite und das Gewicht von sieben Hundeflöhen gemessen. Die Daten sind nach dem gewicht der Flöhe sortiert. Die Einflussvariable ist das Gewicht und der Messwert die Sprungweite.\n\n\n\n\nTabelle 44.4— Tabelle der Sprungweiten in [cm] als Messwert \\(y\\) und dem Gewicht in [mg] von Hundeflöhen.\n\n\n\n\n\n\njump_length\nweight\n\n\n\n\n1.2\n0.8\n\n\n1.8\n1.0\n\n\n1.3\n1.2\n\n\n1.7\n1.9\n\n\n2.6\n2.0\n\n\n1.8\n2.7\n\n\n2.7\n2.8\n\n\n\n\n\n\n\n\nIn der folgenden Abbildung sehen wir die Visualisierung der Daten cov1_tbl in einem Scatterplot mit einer geschätzen Grade durch die Punktewolke. Wir fragen uns, ob das Gewicht der Hundeflöhe einen Einfluss auf die Sprungweite der Flöhe hat. Da wir hier eine positive Steigung haben, können wir schließen, dass wir vermutlich einen positiven Zusammenhang vorliegen haben.\n\n\n\n\n\n\n\n\nAbbildung 44.10— Scatterplot der Beobachtungen der Sprungweite in [cm] und dem Gewicht in [mg] für sieben Hundeflöhe. Die Grade verläuft mittig durch die Punkte.\n\n\n\n\n\n\n\nEinfaktorieller Datensatz\nEtwas seltener in der reinen linearen Regression nutzen wir nur eine kategoriale Einflussvariable. Häufig sind wir dann hier schon in der einfaktoriellen ANOVA oder aber dem statistischen Gruppenvergleich. Hier wollen wir uns jetzt aber mal einen Datensatz mit der Sprungweite in [cm] als Messwert und der Tierart als kategoriale Einflussvariable anschauen. Wir haben die Sprungweite von Hunde-, Katzen- und Fuchsflöhen gemessen. Die Tierart ist unsere Gruppe und damit unserer Faktor.\n\n\nR Code [zeigen / verbergen]\nfac1_tbl &lt;- read_xlsx(\"data/regression_data.xlsx\", sheet = \"factorial\") |&gt;\n  select(animal, jump_length) |&gt; \n  mutate(animal = as_factor(animal))\n\n\nDann schauen wir uns die Daten einmal in der folgenden Tabelle als Auszug einmal an. Wichtig ist hier nochmal, dass du eben die Einflussvariable Tierart einen Faktor animal mit drei Leveln also Gruppen vorliegen hast. Wir wollen jetzt die drei Tierarten hinsichtlich ihrer Sprungweite in [cm] miteinander vergleichen.\n\n\n\n\nTabelle 44.5— Tabelle der Sprungweiten in [cm] als Messwert \\(y\\) von Hunde-, Katzen- und Fuchsflöhen. Der Datensatz ist einfaktoriell, da wir nur einen Faktor vorliegen haben.\n\n\n\n\n\n\nanimal\njump_length\n\n\n\n\ndog\n5.7\n\n\ndog\n8.9\n\n\ndog\n11.8\n\n\n…\n…\n\n\nfox\n10.6\n\n\nfox\n8.6\n\n\nfox\n10.3\n\n\n\n\n\n\n\n\nUnd dann wollen wir uns noch einmal die Daten als einen einfachen Boxplot anschauen. Wir sehen, dass die Daten so gebaut sind, dass wir einen signifikanten Unterschied zwischend den Sprungweiten der Floharten erwarten. Die Boxen der Boxplots überlappen sich nicht und die Boxplots liegen auch nicht auf einer Ebene.\n\n\n\n\n\n\n\n\nAbbildung 44.11— Beispielhafter einfaktorieller Boxplot für die Sprungweiten in [cm] gruppiert nach den Floharten.\n\n\n\n\n\n\n\nTheoretischer Datensatz\nAbschließend kommen wir noch zu einem theoretischen Datensatz dem ich Kéry (2010) entlehnt habe. Ich möchte nochmal zeigen, wie R intern mit der Modellmatrix die Berechnungen durchführt. Das hat mich interessiert und deshalb habe ich es einmal für mein Verständnis aufgeschrieben. Wenn es dich auch interessiert, dann kannst du in den entsprechenden Tabs weiter unten einmal nachschauen. Hier also erstmal ein sehr simpler theoretischer Datensatz zu Körperlängen von Schlangen. Wir müssen hier dann noch die Faktoren einmal umwandeln, damit wir auch später die Modellmatrix sauber vorliegen haben. Deshalb hier die explizite Benennung der Level in der Funktion factor().\n\n\nR Code [zeigen / verbergen]\nsnake_tbl &lt;- read_xlsx(\"data/regression_data.xlsx\", sheet = \"theory\") |&gt; \n  mutate(region = factor(region, levels = c(\"west\", \"nord\")),\n         color = factor(color, levels = c(\"schwarz\", \"rot\", \"blau\")))\n\n\nIn der folgenden Tabelle ist der Datensatz snake_tbl nochmal dargestellt. Wir haben die Schlangenlänge svl als Messwert \\(y\\) sowie das Gewicht der Schlangen mass als kontinuierliche Einflussvariable, die Sammelregion region und die Farbe der Schlangen color und als kategoriale Einflussvariablen mit unterschiedlichen Anzahlen an Gruppen. Die Region region ist also ein Faktor mit zwei Leveln und die Schlangenfarbe color ein Faktor mit drei Leveln. Ich nutze den Datensatz also einmal als einen Spieldatensatz um die Modellierung theoretisch besser nachvollziehen zu können.\n\n\n\n\nTabelle 44.6— Datensatz zu den Körperlängen als Messwert von acht Schlangen mit verschiedenen Einflussvariablen. Die Einflussvariablen haben verschiedene Eigenschaften und müssen daher unterschiedliche modelliert werden.\n\n\n\n\n\n\nsvl\nmass\nregion\ncolor\n\n\n\n\n40\n6\nwest\nschwarz\n\n\n45\n8\nwest\nschwarz\n\n\n39\n5\nwest\nrot\n\n\n51\n7\nnord\nrot\n\n\n52\n9\nnord\nrot\n\n\n57\n11\nnord\nblau\n\n\n58\n12\nnord\nblau\n\n\n49\n10\nnord\nblau",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#kausales-modell",
    "href": "stat-linear-reg-basic.html#kausales-modell",
    "title": "44  Simple lineare Regression",
    "section": "44.5 Kausales Modell",
    "text": "44.5 Kausales Modell\nBeginnen wir einmal mit dem kausalen Modell. Wir wollen also wissen, wie sich der Messwert \\(y\\) ändert, wenn sich die Einflussvariable erhöht. Wir fragen hier also nach der Steigung. Da wir eine lineare Grade vorliegen haben, ist es eben einfach, wir müssen den Koeffizienten für die Steigung bestimmen und dann noch Testen. Wir wollen ja wissen, ob der Effekt auch signifikant ist. Mit dem Effekt meinen wir im Kontext der linearen Regression eben den Koeffizienten der Steigung. Wir betrachten jetzt also einmal das einkovariate Modell, mit einer kontinuierlichen Einflussvariable sowie einem faktoriellen Modell, mit einer kategorialen Variable. Der Messwert hier ist dann immer die kontinuierliche Sprungweite.\n\n44.5.1 Einkovariates Modell\nDie simple lineare Regression ist ein einkovariates Modell. Häufig wird das einkovariate Modell dann einfach nur die lineare Regression genannt. Wir haben einen kontinuierlichen Messwert sowie eine kontinuierliche Einflussvariable. Wir nennen die kontinuierliche Einflussvariable eine Kovariate. Es ergibt sich dann das folgende abstrakte simple Modell. Auf der linken Seite ist der MEsswert und auf der rechten Seite der Tilde ist unsere eine Kovariate.\n\n\n\n\n\n\n\n\nAbbildung 44.12— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kontinuierlichen Einflussvariable als Kovariate \\(c_1\\) dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\nJetzt können wir dieses theoretische Modell einmal auf unser Beispiel zu den Sprungweiten als kontinuierlichen Messwert sowie dem Körpergewicht als Kovariate anwenden. Du findest in den folgenden Tabs einmal die Auswertung in R durch die Funktionen sowie die theoretische Betrachtung, wie R das kovariate Modell intern verrechnet. Aus praktischer Sicht brauchts du nur den ersten Tab.\n\nPraktisch in RTheoretisch in R\n\n\nFür die lineare Regression nutzen wir die Funktion lm() (eng. linear model) mit der Formelschreibweise. Wir schreiben auf der linken Seite den Messwert und auf die rechte Seite der Tilde dann die Kovariate. Dann müssen wir noch angeben in welchem Datensatz die beiden Variablen als Spalten zu finden sind. Dann schieben wir noch die Modellanpassung (eng. fit) in ein Objekt um uns verschiedene Informationen später ausgeben zu lassen. Mit Modelanpassung meinen wir, dass wir schauen, ob wir ein Modell finden, was zu den Daten passt.\n\n\nR Code [zeigen / verbergen]\ncov1_fit &lt;- lm(jump_length ~ weight, data = cov1_tbl) \n\n\nMit der Funktion coef() können wir dann die Koeffizienten der linearen Regression extrahieren. Wir erhalten einmal den Intercept als den y-Achsenabschnitt und die Steigung wieder. Die Steigung wird hier unter dem Namen der Spalte geschrieben.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; \n  coef()\n\n\n(Intercept)      weight \n  0.9686434   0.5096368 \n\n\nWir erhalten also einen y-Achsenabschnitt \\(\\beta_0\\) von \\(0.969\\) sowie eine Steigung \\(\\beta_1\\) von \\(0.51\\) wiedergegeben. In der folgenden Abbildung sehen wir dann einmal die Gerade durch die Punkte zusammen mit der Gradengleichung. Ich nutze hier die Funktion stat_poly_line() und die Funktion stat_poly_eq() um mir die Grade sowie die Gradengleichung einzeichnen zu lassen. Beide Funktionen findest du in dem R Paket {ggpmisc}.\n\n\n\n\n\n\n\n\nAbbildung 44.13— Scatterplot der Sprungweite in [cm] und dem Gewicht in [mg] von sieben Hundeflöhen. Die lineare Grade und die Gradengleichung wurden ergänzt. [Zum Vergrößern anklicken]\n\n\n\n\n\nEigentlich wollen wir ja ein kausales Modell rechnen, da wir an dem Effekt der Kovariate Gewicht in [mg] der Hundeflöhe interessiert sind. Wenn also die Kovariate \\(c_1\\) um eine Einheit ansteigt, um wie viel verändert sich dann der Messwert \\(y\\)?\nDer Koeffizient \\(\\beta_1\\) als Steigung der Graden gibt uns also den Einfluss oder den kausalen Zusammenhang zwischen dem Messwert \\(y\\) und der Kovariate \\(c_1\\) wieder. Im einem ersten Schritt schauen wir uns die Ausgabe der Funktion summary() unseres Modells an.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; summary()\n\n\nWir erhalten dann folgende Ausgabe mit den entsprechenden Kurzerkläruungen von mir. Keine Angst, die gehen wir dann alle in den nächsten Paragraphen einmal durch.\n\n\n\n\n\n\n\n\nAbbildung 44.14— Annotierte Ausgabe der Funktion summary() aus einer linearen Modellanpassung mit der Funktion lm(). Die Ausgabe der Funktion teilt sich grob in drei informative Bereiche: Informationen zu den Residuen, Informationen zu den Koeffizienten und Informationen zu der Modelgüte. [Zum Vergrößern anklicken]\n\n\n\n\n\nZuerst sehen wir nochmal welche Funktion wir aufgerufen haben und welches Modell gerechnet wurde. Dann kommen die Informationen zu den Residuen. Wenn alle Beobachtungen auf der Graden liegen würden, dann wären alle Residuen gleich Null. Bei zu wenigen Beobachtungen erhalten wir dann leider keine zusammenfassende Information zu den Residuen. Die Information zum Median und den Quartilen müssen wir uns dann selber einmal bauen.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; residuals() |&gt; summary()\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-0.5447 -0.2586 -0.1764  0.0000  0.3130  0.6121 \n\n\nDie negativen Abweichungen und die positiven Abweichungen sollten sich auf Null aufaddieren. Der Median sollte ebenfalls dabei Null sein. Das 1st Quartile und das 3rd Quartile sollten ebenfalls im Betrag gleich sein. Deshalb sind auch die Residuen bei einer guten Modellanpassung normalverteilt mit einem Mittelwert von Null. Hier haben wir aber einigermaßen normalverteilte Residuen vorliegen. Die Residuen schauen wir uns aber nochmal im Kapitel zur Modelgüte genauer an.\nDer Reststandardfehler (R Residual standard error, abk. RSE) hat mehrere Vorteile. Er sagt dir direkt, wie genau die Vorhersagen des Modells unter Verwendung der Einheiten des Messwertes sind. Der Reststandardfehler gibt an, wie weit die Datenpunkte im Durchschnitt von der Graden entfernt sind.\n\n\n\n\n\n\nAchtung, bitte beachten!\n\n\n\nDu erhälst immer eine Grade und du erhälst faktisch immer eine Modellanpassung. Du musst dann selber entscheiden, ob dein Modell zu den Daten passt. Deshalb schauen wir uns auch die Residuen an und schauen, ob die Annahme der Normalverteilung an die Residuen erfüllt ist. Wenn dies nicht der Fall ist, dann passt unser Modell nicht zu den Daten und wir müssen ein anderes Modell ausprobieren.\n\n\nAls nächstes erhalten wir die Informationen zu den Koeffizienten. Die Koeffizienten sind in einem simplen Modell der Intercept und die Steigung. Die Steigung hat immer den Namen der betrachteten Kovariate. Hier nochmal die Wiedergabe der Koeffizienten als Auszug von der obigen Tabelle.\n\n\n             Estimate Std. Error  t value   Pr(&gt;|t|)\n(Intercept) 0.9686434  0.4447001 2.178195 0.08129789\nweight      0.5096368  0.2315464 2.201013 0.07899303\n\n\nDas heißt, wir kriegen dort \\(\\beta_0\\) als y-Achsenabschnitt sowie die Steigung \\(\\beta_1\\) für das Gewicht. Dabei ist wichtig zu wissen, dass immer als erstes der y-Achsenabschnitt (Intercept) auftaucht. Dann die Steigung der Kovariate in dem Modell. Wir können die Gradengleichung wie folgt formulieren.\n\\[\njump\\_length \\sim 0.97 + 0.51 \\cdot weight\n\\]\nWas heißt die Gleichung nun? Wenn wir das Gewicht um eine Einheit erhöhen dann verändert sich die Sprungweite um den Wert von \\(\\beta_1\\). Wir haben hier eine Steigung von \\(0.51\\) vorliegen. Ohne Einheit keine Interpretation! Wir wissen, dass das Gewicht in [mg] gemessen wurde und die Sprungweite in [cm]. Damit können wir aussagen, dass wenn ein Floh 1 mg mehr wiegt der Floh 0.51 cm weiter springen würde. Schauen wir nochmal in die saubere Ausgabe der tidy() Funktion aus dem R Paket {broom}. Wir sehen nämlich noch einen \\(p\\)-Wert für den Intercept und die Steigung vom Gewicht.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; tidy()\n\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)    0.969     0.445      2.18  0.0813\n2 weight         0.510     0.232      2.20  0.0790\n\n\nDa wir hier einen p-Wert für jeden Koeffizienten haben, müssen wir auch einen Test rechnen. Wenn wir einen \\(p\\)-Wert sehen, dann brauchen wir eine Nullhypothese, die wir dann eventuell mit der Entscheidung am Signifikanzniveau \\(\\alpha\\) von 5% ablehnen können. Die Nullhypothese ist die Gleichheitshypothese. Wenn es also keinen Effekt von dem Gewicht auf die Sprungweite gebe, wie groß wäre dann \\(\\beta_1\\)? Wir hätten dann keine Steigung und die Grade würde parallel zur x-Achse laufen. Das \\(\\beta_1\\) wäre dann gleich Null. Die Nullhypothesen lauten dabei also jedesmal, dass die Koeffizienten gleich Null sind. Wir testen also, ob wir einen Intercept von Null und eine Steigung von Null als Nullhypothese ablehnen können. Wenn wir \\(i\\) Koeffizienten haben, dann haben wir alle alle \\(i\\) Koeffizienten die folgenden Hypothesenpaare.\n\\[\n\\begin{align*}\nH_0: \\beta_i &= 0\\\\  \nH_A: \\beta_i &\\neq 0 \\\\   \n\\end{align*}\n\\]\nWir haben für jedes \\(\\beta_i\\) ein eigenes Hypothesenpaar. Meistens interessiert uns der Intercept nicht. Ob der Intercept nun durch die Null geht oder nicht ist eher von geringem Interesse. Spannender ist aber wie sich der \\(p\\)-Wert berechnet. Der \\(p\\)-Wert basiert auf einer t-Statistik, also auf dem t-Test. Wir rechnen für jeden Koeffizienten \\(\\beta_i\\) einen t-Test. Das machen wir in dem wir den Koeffizienten estimate durch den Fehler des Koeffizienten std.error teilen.\n\\[\n\\begin{align*}\nT_{(Intercept)} &= \\cfrac{\\mbox{estimate}}{\\mbox{std.error}}  = \\cfrac{0.969}{0.445} = 2.18\\\\  \nT_{weight} &= \\cfrac{\\mbox{estimate}}{\\mbox{std.error}}  = \\cfrac{0.510}{0.232} = 2.20\\\\   \n\\end{align*}\n\\]\nWir sehen in diesem Fall, dass weder der Intercept noch die Steigung vom Gewicht signifikant sind, da die p-Werte mit \\(0.081\\) und \\(0.079\\) leicht über dem Signifikanzniveau von \\(\\alpha\\) gleich 5% liegen. Wir haben aber einen starkes Indiz gegen die Nullhypothese, da die Wahrscheinlichkeit die Daten zu beobachten sehr gering ist unter der Annahme das die Nullhypothese gilt.\nZun Abschluß noch die Funktion glance() ebenfalls aus dem R Paket {broom}, die uns erlaubt noch die Qualitätsmaße der linearen Regression zu erhalten. Klar sehen wir die Werte auch alle in dem dritten Abschnitt der Ausgabe, aber hier haben wir nochmal alles zusammen. Wir müssen nämlich noch schauen, ob die Regression auch funktioniert hat. Die Überprüfung geht mit einer Kovariate sehr einfach. Wir können uns die Grade ja anschauen. Das geht dann mit einem Model mit mehreren Einflussvariablen nicht mehr und wir brauchen andere statistische Maßzahlen. Im Kapitel zur Modelgüte diskutieren wir die statistischen Maßzahlen nochmal genauer. Hier reicht es zu wissen, dass wir ein hohes Bestimmtheitsmaß \\(R^2\\) (eng. r squared) nahe Eins haben wollen. Unser Bestimmtheitsmaß liegt hier bei \\(0.492\\) und ist somit gerade in Ordnung.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; glance() \n\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.492         0.391 0.455      4.84  0.0790     1  -3.24  12.5  12.3\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\nDer p-Wert in der Ausgabe soll dich nicht irrtieren sondern dieser stammt aus einer ANOVA, die in diesem simplen Fall das gleiche testet wie der t-Test in der Zeile zum Gewicht. Wir erghhalten ja auch den gleichen p-Wert. Wir testen hier, ob unsere Kovariate einen Einfluss auf die Sprungweite im Allgemeinen hat. Hier nochmal die ANOVA ausgeschrieben mit der Funktion aov().\n\n\nR Code [zeigen / verbergen]\naov(jump_length ~ weight, data = cov1_tbl) |&gt; summary()\n\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)  \nweight       1  1.001  1.0011   4.844  0.079 .\nResiduals    5  1.033  0.2066                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nGanz am Ende möchte ich dir noch die Funktion augment() aus dem Paket {broom} zeigen die dir kompakt alle Informationen zu den einzelnen Beobachtungen gibt. Die .fitted-Werte sind dabei die vorhergesagten Messwerte auf der Graden. Den Rest schauen wir uns dann noch in dem Kapitel zur Modelgüte oder dem Kapitel zu den Ausreißern teilweise an.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; augment()\n\n\n# A tibble: 7 × 8\n  jump_length weight .fitted .resid  .hat .sigma .cooksd .std.resid\n        &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1         1.2    0.8    1.38 -0.176 0.388  0.496  0.0778     -0.496\n2         1.8    1      1.48  0.322 0.297  0.471  0.151       0.844\n3         1.3    1.2    1.58 -0.280 0.228  0.483  0.0725     -0.701\n4         1.7    1.9    1.94 -0.237 0.147  0.492  0.0275     -0.564\n5         2.6    2      1.99  0.612 0.156  0.384  0.199       1.47 \n6         1.8    2.7    2.34 -0.545 0.367  0.376  0.656      -1.51 \n7         2.7    2.8    2.40  0.304 0.417  0.467  0.276       0.877\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Warum das kovariate Modell nochmal so zerforschen? Weil es mich interessiert hat, wie die Modelle intern gerechnet werden. Vor allem liest man schnell von einer Modellmatrix im Zusammenhang der Modellierung. Hier also mal alles sehr zerforscht. Braucht man nicht um es anzuwenden, ist aber hilfreich zu wissen. Denke ich.” — Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.\n\n\n\n\nFangen wir also einmal an das kovariate Modell zu zerforschen. In einem ersten Schritt wollen wir uns einmal das lineare Modell mit einer kontinuierlichen Einflussvariable anschauen. Daher bauen wir uns ein lineares Modell mit der Kovariate mass aus unseren Schlangendaten und der Körperlänge der Schlangen svl als Messwert. Die Schlangendaten habe ich extra so gebaut, dass wir uns hier leicht was anschauen können. Wir erinnern uns, dass die Einslussvariable mass eine kontinuierliche Variable ist, da wir hier nur Zahlen in der Spalte finden. Die Funktion model.matrix() gibt uns die Modellmatrix wieder.\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ mass, data = snake_tbl) |&gt; as_tibble()\n\n\n# A tibble: 8 × 2\n  `(Intercept)`  mass\n          &lt;dbl&gt; &lt;dbl&gt;\n1             1     6\n2             1     8\n3             1     5\n4             1     7\n5             1     9\n6             1    11\n7             1    12\n8             1    10\n\n\nIn der ersten Spalte ist der Intercept angegeben, danach folgt dann die Spalte mass als Kovariate. Wir können jetzt die Modellmatrix auch mathematisch schreiben und die \\(y\\) Spalte für den Messwert svl ergänzen. Eben so ergänzen wir die Koeffizienten \\(\\beta_0\\) als Intercept und \\(beta_{mass}\\) als Steigung aus der linearen Regression sowie die Residuen als Abweichung von der angepassten Grade.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 & 6 \\\\\n  1 & 8 \\\\\n  1 & 5 \\\\\n  1 & 7 \\\\\n  1 & 9 \\\\\n  1 & 11\\\\\n  1 & 12\\\\\n  1 & 10\\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta_{mass}\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\nJetzt brauche wir natürlich die Koeffizienten aus dem linearen Modell, welches wir wie folgt mit der Funktion lm() fitten. Wir nutzen dann die Funktion coef() um uns die Koeffizienten aus dem Objekt fit_1 wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nsnake_cov_fit &lt;- lm(svl ~ mass, data = snake_tbl) \nsnake_cov_fit |&gt; coef() |&gt; round(2)\n\n\n(Intercept)        mass \n      26.71        2.61 \n\n\nDie Funktion residuals() gibt uns die Residuen der Graden aus dem Objekt snake_cov_fit wieder.\n\n\nR Code [zeigen / verbergen]\nsnake_cov_fit |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n-2.36 -2.57 -0.75  6.04  1.82  1.61  0.00 -3.79 \n\n\nWir können jetzt die Koeffizienten in die Modellmatrix ergänzen. Wir haben den Intercept mit \\(\\beta_0 = 26.71\\) geschätzt. Weiter ergänzen wir die Steigung aus dem linearen Modell für mass mit \\(\\beta_{mass}=2.61\\). Ebenfalls setzen wir Werte für die Residuen für jede der Beobachtungen in die Gleichung ein. Wir erhalten dann folgende ausgefüllte Gleichung.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  26.71 & \\phantom{0}6 \\cdot 2.61\\\\\n  26.71 & \\phantom{0}8 \\cdot 2.61\\\\\n  26.71 & \\phantom{0}5 \\cdot 2.61\\\\\n  26.71 & \\phantom{0}7 \\cdot 2.61\\\\\n  26.71 & \\phantom{0}9 \\cdot 2.61\\\\\n  26.71 & 11\\cdot 2.61\\\\\n  26.71 & 12\\cdot 2.61\\\\\n  26.71 & 10\\cdot 2.61\\\\\n\\end{pmatrix}\n  +\n  \\begin{pmatrix}\n  -2.36\\\\\n  -2.57\\\\\n  -0.75 \\\\\n  +6.04\\\\\n  +1.82\\\\\n  +1.61\\\\\n  \\phantom{+}0.00\\\\\n  -3.79\\\\\n\\end{pmatrix}\n\\]\nWir können jetzt diese gewaltige Sammlung an Matrixen einmal auflösen. Steht denn nun wirklich rechts das Gleiche wie links von der Gleichung? Wir bauen uns die Zahlen von der rechten Seite der Gleichung einmal in R nach und schauen auf das Ergebnis. Wie du siehst ergänzen wir hier noch eine Reihe von Additionen um den Intercept mit der Steigung zu verbinden. Steht ja auch so in der Gleichung des linearen Modells drin, alles wird mit einem Plus miteinander verbunden.\n\n\nR Code [zeigen / verbergen]\nc(26.71 +  6*2.61 - 2.36,\n  26.71 +  8*2.61 - 2.57,\n  26.71 +  5*2.61 - 0.75,\n  26.71 +  7*2.61 + 6.04,\n  26.71 +  9*2.61 + 1.82,\n  26.71 + 11*2.61 + 1.61,\n  26.71 + 12*2.61 + 0.00,\n  26.71 + 10*2.61 - 3.79) |&gt; round() \n\n\n[1] 40 45 39 51 52 57 58 49\n\n\nOh ha! Die Zahlen, die wir rauskriegen, sind die gleichen Werte die unser Messwert der Schlangenlänge hat. Das heißt, die ganze Sache hat funktioniert. Wir können die Schlangenlänge durch die Kovariate der Körpermasse mit zwei Koeffizienten aus einem linearen Modell erklären.\n\n\n\nDann kommt hier noch ein kleiner Einschub. So wie Gauß kannst du auch die lineare Regression händisch ausrechnen. Das macht sicherlich auch dem einen oder anderen Spaß, aber nicht jedem. Ich zeige dir in dem folgenden Kasten einmal wie sich das einkovariate Modell händisch auflösen lässt. Und ja, ich nutze dann auch hier R um die Funktionen durchzuführen. Am Ende ist es dann aber auch eher ein großer Taschenrechner, den ich mit R nutze. Viel Spaß beim nachmachen.\n\n\n\n\n\n\nSimple lineare Regression händisch\n\n\n\nGut, das war jetzt die theoretische Abhandlung der linearen Regression ohne eine mathematische Formel. Es geht natürlich auch mit den nackten Zahlen. In der folgenden Tabelle siehst du einmal sieben Beobachtungen mit dem Körpergewicht als \\(y\\) sowie der Körpergröße als \\(x\\). Wir wollen jetzt einmal die Regressionsgleichung bestimmen. Wir sehen also unsere Werte für \\(\\beta_0\\) und \\(\\beta_1\\) aus?\n\n\n\n\nTabelle 44.7— Sieben Messungen der Körpergröße \\(x\\) und dem zugehörigen Körpergewicht \\(y\\).\n\n\n\n\n\n\nheight\nweight\n\n\n\n\n167\n70\n\n\n188\n83\n\n\n176\n81\n\n\n186\n90\n\n\n192\n94\n\n\n205\n100\n\n\n198\n106\n\n\n\n\n\n\n\n\nDamit wir einmal wissen, was wir als Lösung erhalten würden, hier einmal die lineare Regression mit der Funktion \\(lm()\\) und die entsprechenden Werte für den (Intercept) und der Steigung.\n\n\nR Code [zeigen / verbergen]\nlm(weight ~ height, data = by_hand_tbl) |&gt; \n  coef()\n\n\n(Intercept)      height \n -75.390377    0.877845 \n\n\nWir suchen dann damit die folgende Regressionsgleichung mit der Körpergröße als \\(x\\) und dem zugehörigen Körpergewicht als \\(y\\).\n\\[\nweight = \\beta_0 + \\beta_1 \\cdot height\n\\]\nDa es dann immer etwas schwer ist, sich den Zusammenhang zwischen Körpergewicht und Körpergröße vorzustellen, habe ich nochmal in der folgenden Abbildung den Scatterplot der Daten erstellt. Die rote Grade stellt die Regressiongleichung dar. Wir erhalten ein y-Achsenabschnitt mit \\(\\beta_0\\) von \\(-75.39\\) sowie eine Steigung mit \\(\\beta_1\\) von \\(0.88\\) aus unseren Daten.\n\n\nR Code [zeigen / verbergen]\nggplot(by_hand_tbl, aes(height, weight)) +\n  theme_minimal() +\n  geom_point() +\n  geom_function(fun = \\(x) -75.39 + 0.88 * x, color = \"#CC79A7\")\n\n\n\n\n\n\n\n\nAbbildung 44.15— Scatterplot der sieben Messungen der Körpergröße \\(x\\) und dem zugehörigen Körpergewicht \\(y\\) sowie der RegressionsGrade mit \\(y = -75.39 + 0.88 \\cdot x\\). Die Grade verlauf wie erwartet mittig durch die Punktewolke.\n\n\n\n\n\nJetzt stellt sich die Frage, wie wir händisch die Werte für den y-Achsenabschnitt mit \\(\\beta_0\\) sowie der Steigung mit \\(\\beta_1\\) berechnen. Dafür gibt es jeweils eine Formel. Hier müssen wir dann sehr viele Summen berechnen, was ich dann gleich einmal in einer Tabelle zusammenfasse.\n\nFormel für y-Achsenabschnitt mit \\(\\beta_0\\)\n\n\\[\n\\beta_0 = \\cfrac{(\\Sigma Y)(\\Sigma X^2) - (\\Sigma X)(\\Sigma XY)}{n(\\Sigma X^2) - (\\Sigma X)^2}\n\\]\n\nFormel für Steigung mit \\(\\beta_1\\)\n\n\\[\n\\beta_1 = \\cfrac{n(\\Sigma XY) - (\\Sigma X)(\\Sigma Y)}{n(\\Sigma X^2) - (\\Sigma X)^2}\n\\]\n\n\nIn der folgenden Tabelle siehst du nochmal die originalen Datenpunkte und dann die entsprechenden Werte für das Produkt von weight und height mit \\(XY\\) und dann die jeweiligen Quadrate der beiden mit \\(X^2\\) und \\(Y^2\\). Wir brauchen dann aber nicht diese Werte sondern die Summen der Werte. Das Summieren lagere ich dann nochmal in eine weitere Tabelle aus.\n\n\n\n\nTabelle 44.8— Berechnungen des Produkts von \\(X\\) und \\(Y\\) sowie deren Quadrate mit \\(X^2\\) und \\(Y^2\\).\n\n\n\n\n\n\nheight\nweight\n\\(XY\\)\n\\(X^2\\)\n\\(Y^2\\)\n\n\n\n\n167\n70\n11690\n27889\n4900\n\n\n188\n83\n15604\n35344\n6889\n\n\n176\n81\n14256\n30976\n6561\n\n\n186\n90\n16740\n34596\n8100\n\n\n192\n94\n18048\n36864\n8836\n\n\n205\n100\n20500\n42025\n10000\n\n\n198\n106\n20988\n39204\n11236\n\n\n\n\n\n\n\n\nIn der abschließenden Tabelle findest du dann einmal die Summen der beobachteten Werte \\(X\\) und \\(Y\\) sowie des Produkts von \\(X\\) und \\(Y\\) sowie deren Quadrate mit \\(X^2\\) und \\(Y^2\\). Damit haben wir dann alles zusammen um die Formel oben zu füllen.\n\n\n\n\nTabelle 44.9— Summe der Datenpunkte für \\(X\\) und \\(Y\\) sowie des Produkts von \\(X\\) und \\(Y\\) sowie deren Quadrate mit \\(X^2\\) und \\(Y^2\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\nheight \\((\\Sigma X)\\)\nweight \\((\\Sigma Y)\\)\n\\(\\Sigma XY\\)\n\\(\\Sigma X^2\\)\n\\(\\Sigma Y^2\\)\n\n\n\n\n1312\n624\n117826\n246898\n56522\n\n\n\n\n\n\n\n\nIch habe dann die ganzen Summen einmal händisch berechnet und dann in den Formeln von oben eingesetzt. Wir erhalten dann für den y-Achsenabschnitt \\(\\beta_0\\) folgenden Wert.\n\\[\n\\beta_0 = \\cfrac{624 \\cdot 246898 - 1312 \\cdot 117826}{7\\cdot 246898 - 1312^2} = -75.39038\n\\]\nDie ganze Berechnung habe ich dann auch einmal für die Steigung \\(\\beta_1\\) ebenfalls einmal durchgeführt.\n\\[\nb_1 = \\cfrac{7\\cdot 117826 - 1312\\cdot624}{7\\cdot246898 - 1312^2} = 0.877845\n\\]\nWir sehen, es kommen die gleichen Werte für den y-Achsenabschnitt \\(\\beta_0\\) und die Steigung \\(\\beta_1\\) raus. Das hat ja schonmal sehr gut geklappt. Eine andere Art die gleiche Werte effizienter zu berechnen ist die Matrixberechnung der Koeffizienten der linearen Regression. Wir könnten dann auch komplexere Modelle mit mehr als nur einem \\(x\\) und einem \\(\\beta_1\\) berechnen. Die grundlegende Formel siehst du einmal im Folgenden dargestellt.\n\\[\n\\begin{pmatrix}\n\\beta_0 \\\\\n\\beta_1\n\\end{pmatrix}\n= \\mathbf{(X^T X)^{−1}(X^T Y)}\n\\]\nWir brauchen jetzt einiges an Matrixrechnung um die jeweiligen Formelteile zu berechnen. Ich habe dir in den folgenden Tabs einmal Schritt für Schritt die einzelnen Teile berechnet. Wir immer machen wir das eigentlich nicht so richtig per Hand, sondern nutzen einen Computer. Prinzipiell wäre eine händische Lösung natürlich möglich.\n\n\\(X\\)\\(Y\\)\\(X^T\\)\\(X^T X\\)\\(X^T Y\\)\\((X^T X)^{−1}\\)\n\n\n\n\nR Code [zeigen / verbergen]\nX &lt;- as.matrix(c(167, 188, 176, 186, 192, 205, 198))\nX &lt;- cbind(rep(1, 7), X) \nX \n\n\n     [,1] [,2]\n[1,]    1  167\n[2,]    1  188\n[3,]    1  176\n[4,]    1  186\n[5,]    1  192\n[6,]    1  205\n[7,]    1  198\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nY &lt;- as.matrix(c(70, 83, 81, 90, 94, 100, 106))\nY\n\n\n     [,1]\n[1,]   70\n[2,]   83\n[3,]   81\n[4,]   90\n[5,]   94\n[6,]  100\n[7,]  106\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nXt &lt;- t(X) \nXt\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    1    1    1    1    1    1\n[2,]  167  188  176  186  192  205  198\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nXtX &lt;- Xt %*% X\nXtX\n\n\n     [,1]   [,2]\n[1,]    7   1312\n[2,] 1312 246898\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nXtY &lt;- Xt %*% Y\nXtY\n\n\n       [,1]\n[1,]    624\n[2,] 117826\n\n\n\n\n\n\nR Code [zeigen / verbergen]\nXtXinv &lt;- solve(XtX)\nXtXinv\n\n\n           [,1]         [,2]\n[1,] 35.5658312 -0.188994526\n[2,] -0.1889945  0.001008355\n\n\n\n\n\nAm Ende müssen wir dann alle Teile in der Form \\(\\mathbf{(X^T X)^{−1}(X^T Y)}\\) einmal zusammenbringen. Das siehst dann in R wie folgt aus. Wir erhalten dann eine Matrix wieder wobei die erste Zeile der y-Achsenabschnitt \\(\\beta_0\\) und die zweite Zeile die Steigung \\(\\beta_1\\) ist. Wir erhalten fast die gleichen Werte wie auch schon oben.\n\n\nR Code [zeigen / verbergen]\nXtXinv %*% Xt %*% Y\n\n\n           [,1]\n[1,] -75.390377\n[2,]   0.877845\n\n\nWenn du dich tiefer in die Thematik einlesen willst, dann sind hier weitere Quellen zu der Thematik unter den folgenden Links und Tutorien.\n\nHands-On Machine Learning with R | Linear Regression\nManual linear regression analysis using R\nLinear Regression by Hand\nHow to Perform Linear Regression by Hand\nMatrix Approach to Simple Linear Regression in R\n\n\n\nDamit haben wir das einkovariate Modell abgeschlossen. Hier ist dann auch meistens Ende, wenn wir von der klassischen linearen Regression reden. Wir haben unseren kontinuierlichen Messwert und dann noch unsere kontinuierliche Einflussvariable. Dann legen wir eine Grade durch die Punkte und erhalten die Gradengleichung. Damit sind wir dann zufrieden. Eventuell wollen wir dann noch die Modellgüte betrachten oder aber noch die Korrelation berechnen. Das können wir dann noch machen. Hier wollen wir dann nochmal den Fall der kategorialen Einflussvariable anschauen.\n\n\n44.5.2 Einfaktorielles Modell\nHier stoplerst du vielleicht einmal, denn was wir uns hier anschauen ist sehr nah an der einfaktoriellen ANOVA dran. Dort haben wir ja auch einen kontinuierlichen Messwert und einen Faktor. Wir wollen wissen, ob sich die Level des Faktors als Gruppen untereinander in dem mittleren Messwerten unterscheiden oder ob alle Gruppenmittel gleich sind. Ja, da gibt es jetzt gewisse Überschneidungen und vieles ist dann auch gleich. Insbesondere der Fall mit einem Faktor und zwei Leveln ist dann von einem Student t-Test algorithmisch nicht zu unterscheiden. Hier steigen wir also dann einmal in die einfaktoriellen Modelle aus der sich des statistischen Modellierens ein.\nHeir unterscheiden wir dann zwei einfaktorielle Modelle. Zuerst schauen wir uns einmal ein einfaktorielles Modell mit einem Faktor und zwei Leveln an. Wir haben eben die Sprungweite der HUnde- und Katzenflöhe vorliegen. Dann betrachten wir noch ein Modell mit mehr als zwei Gruppen. Wir brschränken uns gleich mal auf drei Gruppen indem wir einfach noch die Fuchsflöhe mit in unsere Betrachtung nehmen. Es gehen auch mehr als Gruppen, aber dann wird die Ausgabe nur länger, die Interpretation bleibt gleich.\n\n\\(f_A\\) mit 2 Leveln\nUnser einfaktorielles Modell mit einem Faktor und zwei Leveln sieht dann wie folgt aus. Wir haben auf der linken Seite unseren kontinuierlichen Messwert \\(Y\\) vorliegen und auf der rechten Seite dann unseren Faktor \\(f_A\\). Der Faktor hat nur zwei Gruppen und deshalb auch nur zwei Level.\n\n\n\n\n\n\n\n\nAbbildung 44.16— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit zwei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\n\n\n\\(f_A\\) mit &gt;2 Leveln\nUnser einfaktorielles Modell mit einem Faktor und drei Leveln sieht dann fast gleich aus. Wir haben auf der linken Seite unseren kontinuierlichen Messwert \\(Y\\) vorliegen und auf der rechten Seite dann unseren Faktor \\(f_A\\). Der Faktor hat jetzt aber drei Gruppen und deshalb auch nur drei Level.\n\n\n\n\n\n\n\n\nAbbildung 44.17— Schemantisches simples Modell mit einem Messwert \\(Y\\) und einer kategorialen Einflussvariablen als Faktor \\(f_A\\) mit drei Leveln dargestellt. [Zum Vergrößern anklicken]\n\n\n\n\n\nJetzt können wir uns die Auswertung einmal praktisch in R anschauen. Dafür nutze ich dann einmal den einfaktoriellen Datensatz nur mit den Hunde- und Katzenflöhen für den Fall eines Faktors mit zwei Leveln. Dann erweitere ich noch die Tierart um die Fuchsflöhe um dann drei Level vorliegen zu haben. Dann habe ich noch in dem anderen Tab mir die Sachlage theoretisch in R angeschaut, da es mich nochmal interessiert hat, wie die Berechnung intern laufen.\n\nPraktisch in RTheoretisch in R\n\n\nDann wollen wir einmal das einfaktorielle Modell auf unseren Daten zu den Sprungweiten der Floharten rechnen. Wir bauen uns dann einmal einen Datensatz nur mit den Hunde- und Katzenflöhen. Dann haben wir zwei Gruppen oder zwei Level vorliegen. Im Prinzip ist das der Student t-Test Fall und so ist dann auch das Ergebnis. Danach betrachten wir dann noch den Fall, dass wir mit den Füchsen drei Tierarten vorliegen haben. Das ist dann der einfaktoriellen ANOVA sehr viel näher. Wir sehen dann auch gleich, dass wir in der Ausgabe der lm() Funktion auch schon gleich eine ANOVA gerechnet kriegen.\n\n\\(f_A\\) mit 2 Leveln\nIn dem folgenden Schritt entferne ich einmal die Fuchsflöhe aus den Daten. Wir haben dann nur zwei Gruppen, die Hunde- und Katzenflöhe, vorliegen. Die Sprungweite ist dann unser kontinuierlicher Messwert und die Tierart dann der Faktor.\n\n\nR Code [zeigen / verbergen]\nfac1_2lvl_tbl &lt;- fac1_tbl |&gt; \n  filter(animal != \"fox\")\n\n\nDann können wir uns schon unser einfaktorielles Modell mit einem Faktor mit zwei Leveln bauen. Wir müssen hier auch nichts angeben. Ich mache das hier nur um dann gleich nochmal zu unterscheiden, wenn wir mehre Level im Faktor haben.\n\n\nR Code [zeigen / verbergen]\nfac1_2lvl_fit &lt;- lm(jump_length ~ animal, data = fac1_2lvl_tbl) \n\n\nJetzt kommt eigentlich der spannende Teil. Was sind die Koeffizienten unseres einfaktoriellen Modells? Wir erhalten einen Intercept wiedergeben sowie die Steigung von der Tierart der Katzenflöhe. Das ist auf den ersten Blick seltsam. Aber denk daran, dass in R die Level intern als Nummern codiert sind. Die Hunde haben daher das Level 1 und die Katzen das Level 2. Sehr vereinfacht ausgedrückt, können wir sagen, wenn wir also von Hunden zu Katzen wechseln ist das nichts anderes als die Einheit der Einflussvariable um Eins zu erhöhen. Soweit als simple Erklärung. Mehr dazu udn auch richtiger in dem nächste Tab zur Theorie in R.\n\n\nR Code [zeigen / verbergen]\nfac1_2lvl_fit |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)   animalcat \n       8.13       -3.39 \n\n\nUnd was sind jetzt die beiden Zahlen genau? Die \\(8.13cm\\) sind der Mittelwert der Sprungweiten der Hundeflöhe. Du siehst hier den Zusammenhang nochmal in der folgenden Abbildung visualsiert. Wie du siehst liegen die Hundeflöhe auf der y-Achse und der Mittelwert der Sprungweiten der Hundeflöhe entspricht dem Intercept. Der Koeffizient animalcat ist nichts anders als die Mittelwertsdifferenz der Hunde- und Katzenflöhe. Rechne gerne einmal nach oder schaue genau in den Abbildung.\n\n\n\n\n\n\n\n\nAbbildung 44.18— Scatterplot der Sprungweiten der Hunde- und Katzenflöhe. Der Intercept des einfaktoriellen Modells liegt auf dem Mittelwert der Hundeflöhe. Der Koeffizient der Steigung ist die Differenz des Mittelwerts der Katzen- und Hundeflöhe. [Zum Vergrößern anklicken]\n\n\n\n\n\nDann schauen wir einmal genauer in die Ausgabe der Funktion summary() unseres einfaktoriellen Modells. Auch hier erhalten wir wieder eine Menge Informationen sowie statistischen Tests, dir wir hier dann so wie einen Student t-Test interpretieren können.\n\n\nR Code [zeigen / verbergen]\nfac1_2lvl_fit |&gt; summary()\n\n\nWir erhalten dann folgende Ausgabe mit den entsprechenden Kurzerkläruungen von mir. Keine Angst, die gehen wir dann alle in den nächsten Paragraphen einmal durch.\n\n\n\n\n\n\n\n\nAbbildung 44.19— Annotierte Ausgabe der Funktion summary() aus einer linearen Modellanpassung mit der Funktion lm(). Die Ausgabe der Funktion teilt sich grob in drei informative Bereiche: Informationen zu den Residuen, Informationen zu den Koeffizienten undS Informationen zu der Modelgüte. [Zum Vergrößern anklicken]\n\n\n\n\n\nWir erhalten auch hier die Informationen zu den Residuen. Wir wollen hier einen Median von Null und gleiche absolute Werte für das 1st und 3rd Quartile haben. Ebenso sollte der minimale und maximale Wert vom Betrag her ähnlich sein. Wenn das vorliegt, dann können wir von normalverteilten Residuen ausgehen und das Modell sollte von der Seite aus stimmen.\nWenn wir die Koeffizienten betrachten, dann können wir zum einen die Frage beantworten, ob der Mittelwert der Sprungweiten der Hundeflöhe sich signifikant von Null unterscheidet. Meistens interessiert und das nicht so sehr. Dann kommt die Steigung, also die Differenz des Mittelwerts der Hundeflöhe zu dem Mittelwert der Katzenflöhe. Hier springen also die Katzenflöhe \\(-3.386cm\\) weniger weit als die Hundeflöhe. Hier testen wir dann, ob sich die Differenz signifikant von Null unterscheidet. Das ist dann aber nichts anderes als der Student t-Test, der uns auch die gleichen Zahlen liefert.\n\n\nR Code [zeigen / verbergen]\nt.test(jump_length ~ animal, data = fac1_2lvl_tbl, var.equal = TRUE) \n\n\n\n    Two Sample t-test\n\ndata:  jump_length by animal\nt = 3.1253, df = 12, p-value = 0.008768\nalternative hypothesis: true difference in means between group dog and group cat is not equal to 0\n95 percent confidence interval:\n 1.025339 5.746089\nsample estimates:\nmean in group dog mean in group cat \n         8.128571          4.742857 \n\n\nDann betrachten wir nochmal den Standardfehler der Residuen (abk. RSE, eng. residual standard error) sowie das Bestimmtheitsmaß \\(R^2\\). Standardfehler der Residuen sollte klein sein und kann hier mit \\(\\pm2cm\\) als gering angesehen werden. Wir können den Fehler ja direkt auf der Einheit der Sprungweiten interpretieren. Das Bestimmtheitsmaß ist nicht so super, wir sind hier weit von der Eins entfernt, dass heißt das die einzelnen Beobachtungen dann doch um die lokalen Mittelwerte entprechend streuen. Die Tierart ist dann doch nicht die einzige Ursache für die Sprungweitenunterschiede. Hier mag dann das Geschlecht oder das Gewicht als weitere Einflussvariablen noch eine Rolle spielen.\nAm Ende dann noch die einfaktorielle ANOVA, die wir ja auch in der Ausgabe dann noch berechnet kriegen. Da hat man dann schon mehr als man eigentlich braucht zusammen.\n\n\nR Code [zeigen / verbergen]\naov(jump_length ~ animal, data = fac1_2lvl_tbl) |&gt; summary()\n\n\n            Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nanimal       1  40.12   40.12   9.767 0.00877 **\nResiduals   12  49.29    4.11                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nDie Nutzung eines linearen Modells mit einem Fakotr mit nur zwei Leveln mag jetzt ertsmal übertrieben scheinen, aber wir können hier einmal nachvollziehen, wie die Koeffizienten zu interpretieren sind.\n\n\n\\(f_A\\) mit &gt;2 Leveln\nSo und jetzt wird es eigentlich erst interessant. Wir wollen das faktorielle Modell einmal mit drei Leveln rechnen. Damit haben wir dann ja nicht mehr zwei Gruppen vorliegen sondern mit den zusätzlichen Fuchsflöhen drei Gruppen. Jetzt ändert sich erstmal nichts an dem Modell, wir haben hier den gleichen Aufruf. Wir nutzen jetzt eben den vollen Datensatz mit allen drei Tierarten.\n\n\nR Code [zeigen / verbergen]\nfac1_3lvl_fit &lt;- lm(jump_length ~ animal, data = fac1_tbl) \n\n\nDie Koeffizienten können wir uns dann auch gleich wiedergeben lassen. Hier sehen wir dann auch das gleiche Bild wie eben schon. Wir haben anscheinend den Intercept auf dem Mittelwert der Sprungweiten der Hundeflöhe liegen.\n\n\nR Code [zeigen / verbergen]\nfac1_3lvl_fit |&gt; \n  coef() |&gt; round(2)\n\n\n(Intercept)   animalcat   animalfox \n       8.13       -3.39        1.03 \n\n\nAuch hier hilft dann einmal die folgende Visualisierung. Wir haben den Intercept auf dem Mittelwert der Sprungweiten der Hundeflöhe liegen. Die Hundeflöhe springen im Mittel eben \\(8.13cm\\) weit. Die anderen Koeffizienten sind die Änderung im Mittelwert in Bezug zu den Hundeflöhen. Wir haben hier also dann eben wieder eine Steigung aber immer in Referenz zu dem Intercept. Du kannst di Differenzen auch gut in der Abbildung nachvollziehen.\n\n\n\n\n\n\n\n\nAbbildung 44.20— Scatterplot der Sprungweiten der Hunde-, Katzen- und Fuchsflöhe. Der Intercept des einfaktoriellen Modells liegt auf dem Mittelwert der Hundeflöhe. Der Koeffizient der Steigung ist die Differenz des Mittelwerts der Katzen- und Hundeflöhe sowie die Differenz des Mittelwerts der Fuchs- und Hundeflöhe. [Zum Vergrößern anklicken]\n\n\n\n\n\nDann schauen wir einmal genauer in die Ausgabe der Funktion summary() unseres einfaktoriellen Modells. Auch hier erhalten wir wieder eine Menge Informationen sowie statistischen Tests, dir wir hier dann zeilenweise so wie einen Student t-Test interpretieren können. Das heißt, dass eben die Differenz der Mittelwerte im Bezug zu den Hundeflöhen gegen die Null testen.\n\n\nR Code [zeigen / verbergen]\nfac1_3lvl_fit |&gt; summary()\n\n\nWir erhalten dann folgende Ausgabe mit den entsprechenden Kurzerkläruungen von mir. Keine Angst, die gehen wir dann alle in den nächsten Paragraphen einmal durch.\n\n\n\n\n\n\n\n\nAbbildung 44.21— Annotierte Ausgabe der Funktion summary() aus einer linearen Modellanpassung mit der Funktion lm(). Die Ausgabe der Funktion teilt sich grob in drei informative Bereiche: Informationen zu den Residuen, Informationen zu den Koeffizienten und Informationen zu der Modelgüte. [Zum Vergrößern anklicken]\n\n\n\n\n\nWir erhalten auch hier die Informationen zu den Residuen. Wir wollen hier einen Median von Null und gleiche absolute Werte für das 1st und 3rd Quartile haben. Ebenso sollte der minimale und maximale Wert vom Betrag her ähnlich sein. Wenn das vorliegt, dann können wir von normalverteilten Residuen ausgehen und das Modell sollte von der Seite aus stimmen.\nWenn wir die Koeffizienten betrachten, dann können wir zum einen die Frage beantworten, ob der Mittelwert der Sprungweiten der Hundeflöhe sich signifikant von Null unterscheidet. Das war das Gleiche wie schon in dem obigen Modell mit zwei Leveln so. Meistens interessiert und das nicht so sehr. Dann kommt die Steigung, also die Differenz des Mittelwerts der Hundeflöhe zu dem Mittelwert der Katzenflöhe. Hier springen also die Katzenflöhe \\(-3.386cm\\) weniger weit als die Hundeflöhe. Hier testen wir dann, ob sich die Differenz signifikant von Null unterscheidet. Danach kommt dann der Test, ob sich die Differenz des Mittelwerts der Hundeflöhe zu dem Mittelwert der Fuchsflöhe signifikant unetrscheidet. Hier springen also die Fuchsflöhe \\(1.029cm\\) weiter als die Hundeflöhe. Wir erhalten keinen Test für die Differenz zwischen den Katzen- und Fuchsflöhen. Hier musst du dann auf die Posthoc-Tests ausweichen.\nAm Ende dann noch die einfaktorielle ANOVA, die wir ja auch in der Ausgabe dann noch berechnet kriegen. Hier kann die ANOVA signifkant sein und die Steigungen dennoch nicht. Das liegt eben daran, dass du nicht alle paarweisen Vergleiche hier im Modell durch die Steigungen testen kannst. Deshalb ist die ANOVA in der Modellausgabe aus dieser Sicht dann doch sinnvoll.\n\n\nR Code [zeigen / verbergen]\naov(jump_length ~ animal, data = fac1_tbl) |&gt; summary()\n\n\n            Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nanimal       2  74.68   37.34   11.89 0.000511 ***\nResiduals   18  56.53    3.14                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nDamit sind wir hier mit dieser Orchidee durch. Spannender wird es dann, wenn wir im multiplen linearen Modell verschiedene Kovariaten und Faktoren in einem Modell miteinander verbinden und dann gemeinsam zu interpretieren versuchen. Dazu dann aber mehr in den entsprechenden Kapiteln zur multiplen linearen Regression und dem Modellieren in R.\n\n\n\nSchön das wir eine etwas wirre Wiedergabe der Koeffizienten in einem faktoriellen Modell haben. Warum das so ist, wird dir klarer, wenn wir uns die Modellierung einmal etwas genauer anschauen. Wir modellieren nämlich nicht direkt die Steigung. Sonst würden wir ja bei den Koeffizienten immer ein vielfaches der Differenz zum Intercept erhalten. Das ist nicht der Fall und warum das so ist, wollen wir mal zerforschen.\n\n\\(f_A\\) mit 2 Leveln\nIn einem ersten Schritt wollen wir uns einmal das Modell mit einem Faktor mit 2 Leveln anschauen. Wir bauen uns hier ein Modell mit dem Datensatz der Körperlängen der Schlangen. Daher können wir dann die Variable region verwenden. Wir haben ja nur zwei Regionen in denen wir die Schlangen gesammelt haben. Die Funktion model.matrix() gibt uns die Modelmatrix wieder.\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ region, data = snake_tbl) |&gt; as_tibble()\n\n\n# A tibble: 8 × 2\n  `(Intercept)` regionnord\n          &lt;dbl&gt;      &lt;dbl&gt;\n1             1          0\n2             1          0\n3             1          0\n4             1          1\n5             1          1\n6             1          1\n7             1          1\n8             1          1\n\n\nIn der ersten Spalte ist der Intercept angegeben, danach folgt dann die Spalte regionwest. In dieser Spalte steht die Dummykodierung für die Variable region. Die ersten drei Schlangen kommen nicht aus der Region nord und werden deshalb mit einen Wert von 0 versehen. Die nächsten fünf Schlangen kommen aus der Region nord und erhalten daher eine 1 in der Spalte. Die Spalte gibt im Prinzip eine ja/nein Antwort auf die Frage in dem Spaltennamen. Also in unserem Fall ist es die Frage: “Kommt die Schlange aus der Region nord?”.\nDas sieht hier sehr seltsam aus, ist aber am Ende eine andere Art der Kodierung. Wir sprechen hier auch von der Dummykodierung damit wir dann die kategorialen Variablen in einem stattstischen Modell abbilden können. In der multiplen linearen Modellierung ist es dann noch wichtiger.\nWir können die Modellmatrix auch mathematisch schreiben und die \\(y\\) Spalte für das Outcome svl ergänzen. Eben so ergänzen wir die \\(\\beta\\)-Werte als mögliche Koeffizienten aus der linearen Regression sowie die Residuen als Abweichung von der gefitteten Grade. Wir sehen dann hier einmal die Dummykodierung für zwei Level eines Faktors.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 &  0  \\\\\n  1 &  0 \\\\\n  1 &  0\\\\\n  1 &  1\\\\\n  1 &  1 \\\\\n  1 &  1 \\\\\n  1 &  1 \\\\\n  1 &  1 \\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta^{region}_{nord} \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\nJetzt brauche wir die Koeffizienten aus dem linearen Modell, welches wir wie folgt fitten. Wir nutzen dann die Funktion coef() um uns die Koeffizienten wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nfit_1fac_2lvl &lt;- lm(svl ~ region, data = snake_tbl) \nfit_1fac_2lvl |&gt; coef() |&gt; round(2)\n\n\n(Intercept)  regionnord \n      41.33       12.07 \n\n\nDie Funktion residuals() gibt uns die Residuen der Graden wieder.\n\n\nR Code [zeigen / verbergen]\nfit_1fac_2lvl |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n-1.33  3.67 -2.33 -2.40 -1.40  3.60  4.60 -4.40 \n\n\nWir können jetzt die Koeffizienten ergänzen mit \\(\\beta_0 = 41.33\\) für den Intercept. Weiter ergänzen wir die Koeffizienten für die Region und das Level nord mit \\(\\beta^{region}_{nord} = 12.07\\). Ebenfalls setzen wir Werte für die Residuen für jede der Beobachtungen in die Gleichung ein. Hier sehen wir dann wunderbar, warum der Intercept der Mittelwert der Schlangen in der Region west sind. Der Unterschied zu den Schlangen in der Region nord ist ja der Koeffizient \\(\\beta^{region}_{nord}\\). Den Rechnen wir nur ein, wenn wir auch eine Schlange aus der Region nord haben.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  41.33 & 0 \\cdot 12.07  \\\\\n  41.33 & 0 \\cdot 12.07  \\\\\n  41.33 & 0 \\cdot 12.07  \\\\\n  41.33 & 1 \\cdot 12.07  \\\\\n  41.33 & 1 \\cdot 12.07  \\\\\n  41.33 & 1 \\cdot 12.07  \\\\\n  41.33 & 1 \\cdot 12.07  \\\\\n  41.33 & 1 \\cdot 12.07  \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  -1.33\\\\\n  +3.67 \\\\\n  -2.33 \\\\\n  -2.40 \\\\\n  -1.40 \\\\\n  +3.60 \\\\\n  +4.60 \\\\\n  -4.40 \\\\\n\\end{pmatrix}\n\\]\nWir können jetzt diese gewaltige Sammlung an Matrixen einmal auflösen. Steht denn nun wirklich rechts das Gleiche wie links von der Gleichung? Wir bauen uns die Zahlen von der rechten Seite der Gleichung einmal in R nach und schauen auf das Ergebnis.\n\n\nR Code [zeigen / verbergen]\nc(41.33 + 0*12.07 - 1.33,\n  41.33 + 0*12.07 + 3.67,\n  41.33 + 0*12.07 - 2.33,\n  41.33 + 1*12.07 - 2.40,\n  41.33 + 1*12.07 - 1.40,\n  41.33 + 1*12.07 + 3.60,\n  41.33 + 1*12.07 + 4.60,\n  41.33 + 1*12.07 - 4.40) |&gt; round() \n\n\n[1] 40 45 39 51 52 57 58 49\n\n\nWir kriegen am Ende die gleichen Körperlängen der Schlangen wiedergegeben. Das hat also alles so funktioniert wie es sollte. Auch hier sehen wir, dass der Wert des Koeffzienten \\(\\beta^{region}_{nord} = 12.07\\) nur im Fall von Schlangen aus der Region nord zu tragen kommt. Das sind dann eben auch die letzten fünf Schlangen. Wenn du das Prinzip verstanden hast, dann wird dir die Dummykodierung im folgenden Fall mit mehr Leveln noch klarer.\n\n\n\\(f_A\\) mit &gt;2 Leveln\nIm nächsten Schritt wollen wir uns einmal das Modell mit einem Faktor mit drei Leveln anschauen. Prinzipiell geht es auch mit noch mehr Leveln, dann erweitern wir aber die Modellmatrix immer nur um eine weitere Spalte. Wir bauen uns hier nun ein Modell mit der Variable color, die ja drei Level hat. Die Funktion model.matrix() gibt uns die Modelmatrix wieder. Wir haben ja drei Farben der Schlangenhaut mit schwarz, rot und blauer Haut vorliegen.\n\n\nR Code [zeigen / verbergen]\nmodel.matrix(svl ~ color, data = snake_tbl) |&gt; as_tibble()\n\n\n# A tibble: 8 × 3\n  `(Intercept)` colorrot colorblau\n          &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1             1        0         0\n2             1        0         0\n3             1        1         0\n4             1        1         0\n5             1        1         0\n6             1        0         1\n7             1        0         1\n8             1        0         1\n\n\nIn der ersten Spalte ist der Intercept angegeben, danach folgt dann die Spalten für color. Die Spalten colorrot und colorblau geben jeweils an, ob die Schlange das Level rot hat oder blau oder keins von beiden. Wenn die Schlange weder rot noch blau ist, dann sind beide Spalten mit einer 0 versehen. Dann ist die Schlange schwarz.\nWir können die Modellmatrix auch mathematisch schreiben und die \\(y\\) Spalte für das Outcome svl ergänzen. Eben so ergänzen wir die \\(\\beta\\)-Werte als mögliche Koeefizienten aus der linearen Regression sowie die Residuen als Abweichung von der gefitteten Grade.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  1 & 0 & 0 \\\\\n  1 & 0 & 0\\\\\n  1 & 1 & 0\\\\\n  1 & 1 & 0\\\\\n  1 & 1 & 0\\\\\n  1 & 0 & 1\\\\\n  1 & 0 & 1\\\\\n  1 & 0 & 1\\\\\n\\end{pmatrix}\n\\times\n  \\begin{pmatrix}\n  \\beta_0 \\\\\n  \\beta^{color}_{rot} \\\\\n  \\beta^{color}_{blau} \\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  \\epsilon_1 \\\\\n  \\epsilon_2 \\\\\n  \\epsilon_3 \\\\\n  \\epsilon_4 \\\\\n  \\epsilon_5 \\\\\n  \\epsilon_6 \\\\\n  \\epsilon_7 \\\\\n  \\epsilon_8 \\\\\n\\end{pmatrix}\n\\]\nJetzt brauche wir die Koeffizienten aus dem linearen Modell, welches wir wie folgt fitten. Wir nutzen dann die Funktion coef() um uns die Koeffizienten wiedergeben zu lassen.\n\n\nR Code [zeigen / verbergen]\nfit_1fac_2lvl &lt;- lm(svl ~ color, data = snake_tbl) \nfit_1fac_2lvl |&gt; coef() |&gt; round(2)\n\n\n(Intercept)    colorrot   colorblau \n      42.50        4.83       12.17 \n\n\nDie Funktion residuals() gibt uns die Residuen der Graden wieder.\n\n\nR Code [zeigen / verbergen]\nfit_1fac_2lvl |&gt; residuals() |&gt; round(2)\n\n\n    1     2     3     4     5     6     7     8 \n-2.50  2.50 -8.33  3.67  4.67  2.33  3.33 -5.67 \n\n\nWir können jetzt die Koeffizienten ergänzen mit \\(\\beta_0 = 25\\) für den Intercept. Weiter ergänzen wir die Koeffizienten für die Farbe und das Level rot mit \\(\\beta^{color}_{rot} = 4.83\\) und für die Farbe und das Level blau mit \\(\\beta^{color}_{blau} = 12.17\\). Ebenfalls setzen wir Werte für die Residuen für jede der Beobachtungen in die Gleichung ein. Auch hier sehen wir dann sehr gut, dass der Intercept der Mittelwert der schwarzen Schlangen sein muss. Die Änderung der Körperlängen der roten und blauen Schlangen zu den schwarzen Schlangen geben dann die Koeffizienten wieder.\n\\[\n\\begin{pmatrix}\n  40 \\\\\n  45 \\\\\n  39 \\\\\n  51 \\\\\n  52 \\\\\n  57 \\\\\n  58 \\\\\n  49 \\\\\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\n  42.50 & 0 \\cdot 4.83& 0 \\cdot 12.17 \\\\\n  42.50 & 0 \\cdot 4.83& 0 \\cdot 12.17\\\\\n  42.50 & 1 \\cdot 4.83& 0 \\cdot 12.17\\\\\n  42.50 & 1 \\cdot 4.83& 0 \\cdot 12.17\\\\\n  42.50 & 1 \\cdot 4.83& 0 \\cdot 12.17\\\\\n  42.50 & 0 \\cdot 4.83& 1 \\cdot 12.17\\\\\n  42.50 & 0 \\cdot 4.83& 1 \\cdot 12.17\\\\\n  42.50 & 0 \\cdot 4.83& 1 \\cdot 12.17\\\\\n\\end{pmatrix} +\n  \\begin{pmatrix}\n  -2.50 \\\\\n  +2.50 \\\\\n  -8.33 \\\\\n  +3.67 \\\\\n  +4.67 \\\\\n  +2.33 \\\\\n  +3.33 \\\\\n  -5.67 \\\\\n\\end{pmatrix}\n\\]\nWir können jetzt diese gewaltige Sammlung an Matrixen einmal auflösen. Steht denn nun wirklich rechts das Gleiche wie links von der Gleichung? Wir bauen uns die Zahlen von der rechten Seite der Gleichung einmal in R nach und schauen auf das Ergebnis.\n\n\nR Code [zeigen / verbergen]\nc(42.50 + 0*4.83 + 0*-12.17 - 2.50,\n  42.50 + 0*4.83 + 0*-12.17 + 2.50,\n  42.50 + 1*4.83 + 0*-12.17 - 8.33,\n  42.50 + 1*4.83 + 0*-12.17 + 3.67,\n  42.50 + 1*4.83 + 0*-12.17 + 4.67,\n  42.50 + 0*4.83 + 1*-12.17 + 2.33,\n  42.50 + 0*4.83 + 1*-12.17 + 3.33,\n  42.50 + 0*4.83 + 1*-12.17 - 5.67) |&gt; round()\n\n\n[1] 40 45 39 51 52 33 34 25\n\n\nWir kriegen auch hier am Ende die gleichen Körperlängen der Schlangen wiedergegeben. Das hat also alles so funktioniert wie es sollte. Je nachdem welche Farbe unsere Schlange hat, nutzen wir eben einen anderen Koeffizienten. Die Koeffizienten, die wir nicht brauchen, multiplizieren wir mit Null und daher kommen diese Koeffizienten auch nicht mit in die Berechnung der Schlangenkörperlänge.\n\n\n\n\nDamit sind wir mit dem einkovariaten und einfaktoriellen Modell durch. Wir haben jetzt verstanden, wie wir die Koeffizienten der beiden verschiedenen Modelle kausal erklären und verwenden können. In den einfaktoriellen Modell wollen wir dann meistens nicht nur die Änderung zu der Gruppe im Intercept berechnen. Daher ist das einfaktorielle Modell eher der Vorschritt für die ANOVA oder aber den Post-hoc Test. Wir wollen jetzt nochmal in die Prädiktion schauen und verstehen, wie wir dann neue Werte für unseren Messwert für bekannte oder unbekannte Werte der Einflussvariable berechnen können.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#prädiktives-modell",
    "href": "stat-linear-reg-basic.html#prädiktives-modell",
    "title": "44  Simple lineare Regression",
    "section": "44.6 Prädiktives Modell",
    "text": "44.6 Prädiktives Modell\nNeben dem klassischen kausalen Modell können wir auch ein prädiktives Modell rechnen. In einem prädiktiven Modell wollen wir wissen, welche Werte unser Messwert für neue Werte der Einflussvariable annehmen würde. Auch in einem prädiktiven Modell rechnen wir erstmal ganz normal eine lineare Regression. Dann nutzen wir das Modell der Regression um neue Werte für unseren Messwert anhand neuer oder alter Werte der Einflussvariable vorherzusagen. Daher können wir auch beides miteinander verbinden. Du schaust erst was das kausale Modell ergibt und lässt dir dann neue Messwerte vorhersagen. Dabei musst du immer beachten, dass die vorhergesagten Messwerte auf der angepassten Graden liegen. Dahe nennen wir die vorhergesagten Messwerte auch angepasste Messwerte (eng. fitted). Wir werden später in der Klassifikation, der Vorhersage von \\(0/1\\)-Werten, sowie in den Marginal effect models und dem Modellieren in R noch andere Prädktionen und deren Maßzahlen kennen lernen. Fangen wir also hier einmal an mit dem einkovariaten und einfaktoriellen Modell an. Die Vorgehensweise ist auch bei den multiplen linearen Modellen ähnlich, so dass ich mich dort auch auf dies hier beziehe.\n\n44.6.1 Einkovariates Modell\nFür unsere Vorhersage brauchen wir auch hier ein Modell. Wir nutzen hier das einkovariate Modell wie auch schon weiter oben in dem kausalen Modell zu einkovariaten Analyse. Wir nehmen als Messwert die Sprungweite der Flöhe und als Einflussvariable dann das Gewicht der Flöhe. Soweit sieht alles aus wie auch in einem kausalen Modell.\n\n\nR Code [zeigen / verbergen]\ncov1_fit &lt;- lm(jump_length ~ weight, data = cov1_tbl)\n\n\nJetzt können wir die Funktion predict() nutzen um uns neue Sprungweiten für neue Flohgewichte vorhersagen zu lassen. Oder aber wir lassen uns die Werte auf der Graden für die Sprungweiten wiedergeben. Jedes Gewicht hat ja einen Wert für die Sprungweite auf der Graden. Wir nennen diese Messwerte auf der Graden dann angepasste (eng. fitted) Werte.\n\nNeue x-WerteAlte x-Werte\n\n\nWir bauen uns hier einmal einen Datensatz nur mit dem Gewicht von vier neuen Flöhen. Wir wollen jetzt vorhersagen wie weit unsere vier neuen Flöhe gegeben ihres Gewichts springen würden.\n\n\nR Code [zeigen / verbergen]\ncov1_new_tbl &lt;- tibble(weight = c(1.7, 1.4, 2.1, 3.0))\n\n\nJetzt verbinden wir mit der Funktion predict() das einkovariate Modell und den Datensatz mit den neuen Körpergewichten der Flöhe. Dann erhalten wir die vorhergesagten Sprungweiten der vier Flöhe wieder.\n\n\nR Code [zeigen / verbergen]\npredict(cov1_fit, newdata = cov1_new_tbl) |&gt; round(2)\n\n\n   1    2    3    4 \n1.84 1.68 2.04 2.50 \n\n\nDas klingt jetzt erstmal etwas kryptisch, aber ich habe dir in der Abbildung weiter unten einmal die vier vorhergesagten Sprungweiten für die neuen Körpergewichte der Flöhe einmal dargestellt. Die vier neuen Sprungweiten liegen natürlich auf der Graden.\n\n\nDu kannst dir natürlich auch für die schon beobachteten Werte des Gewichts der Flöhe die angepassten Werte auf der Graden für die Sprungweite wiedergeben lassen. Dafür nutze ich die Funktion augment() aus dem R Paket {broom}.\n\n\nR Code [zeigen / verbergen]\ncov1_fit |&gt; augment() |&gt; \n  select(jump_length, weight, .fitted, .resid)\n\n\n# A tibble: 7 × 4\n  jump_length weight .fitted .resid\n        &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1         1.2    0.8    1.38 -0.176\n2         1.8    1      1.48  0.322\n3         1.3    1.2    1.58 -0.280\n4         1.7    1.9    1.94 -0.237\n5         2.6    2      1.99  0.612\n6         1.8    2.7    2.34 -0.545\n7         2.7    2.8    2.40  0.304\n\n\nIch habe dann noch die Residuen mit rausgezogen. Die ursprünglichen Messwerte der Sprungweite sind dann die angepassten Werte plus die Werte der Residuen. Muss ja auch sein, den die Residuen sind ja die Abstände von unserer Graden zu den einzelnen Messwerten der Beobachtungen.\n\n\n\nDann habe ich hier nochmal die Abbildung der beobachteten Sprungweiten sowie der angepassten Grade durch die Punkte in einem Scatterplot dargestellt. Die vier neuen Flöhe haben vorhergesagte Sprungweiten auf der Graden erhalten. Die beobachteten Flöhe streuen natürlich um die Grade. Hier musst du natürlich aufpassen, dass du nicht Flohgewichte weit weg von den eigentlichen beobachteten Flöhen vorhersagst, aber das ist eigentlich selbsterklärend.\n\n\n\n\n\n\n\n\nAbbildung 44.22— Scatterplot der alten Beobachtungen der Sprungweite in [cm] und dem Gewicht in [mg]. Sowie der neuen vorhergesagten Messwerte der Sprungweiten der neuen Beobachtungen auf der Graden.\n\n\n\n\n\n\n\n44.6.2 Einfaktorielles Modell\nAbschließend möchte ich nochmal kurz auf die Vorhersage des einfaktoriellen Modells eingehen. Das macht jetzt eher so halb Sinn. Wir kriegen ja die Gruppenmittelwerte für die einzelnen Level im Faktor aus einem einfaktoriellen Modell wiedergeben. Das können wir hier auch einmal machen, der Code ist der gleiche wie auch schon in einem kausalen einfaktoriellen Modell.\n\n\nR Code [zeigen / verbergen]\nfac1_fit &lt;- lm(jump_length ~ animal, data = fac1_tbl)\n\n\nJetzt haben wir die Wahl neue mittlere Sprungweiten für die Tierarten vorherzusagen oder aber die vorhergesagten mittleren Sprungweiten für die beobachteten Flöhe zu erhalten. Beides zeige ich jetzt einmal.\n\nNeue x-WerteAlte x-Werte\n\n\nWenn wir jetzt also neue Katzenflöhe und einen Fuchsfloh messen, dann können wir uns die mittlere Sprungweite der beiden Tierarten vorhersagen lassen. Wir bauen uns dafür einen neuen Datensatz. Das ist in einem einfaktoriellen Modell etwas simple, aber so funktioniert eben das Modellieren.\n\n\nR Code [zeigen / verbergen]\nfac1_new_tbl &lt;- tibble(animal = c(\"cat\", \"cat\", \"fox\"))\n\n\nJetzt nutzen wir die Funktion predict() zusammen mit dem einfaktoriellen Modell sowie den neuen Datensatz. Wir erhalten also die mittleren Sprungweiten der Katzen- und Fuchsflöhe wiedergeben.\n\n\nR Code [zeigen / verbergen]\npredict(fac1_fit, newdata = fac1_new_tbl) |&gt; round(2)\n\n\n   1    2    3 \n4.74 4.74 9.16 \n\n\nWarum jetzt zweimal der gleiche Wert und dann ein anderer Wert für die Sprungweite? Du erhälst eben zweimal die mittlere Sprungweite für die Katzenflöhe und einmal die mittlere Sprungweite für den Fuchsfloh wiedergegeben. Mehr kann das einfaktorielle Modell erstmal nicht in der Vorhersage liefern. Ich habe dir unten nochmal den Zusammenhang in einer Abbildung dargestellt.\n\n\nDann kommen hier einmal die vorhergesagten Sprungweiten für die einzelnen Flöhe aus den jeweiligen Tierarten. Wie du hier sehr gut siehst, dann liegen alle vorhergesagten Sprungweiten auf dem Mittelwert der jeweiligen Gruppe. Nichts anderes macht ja auch eine einfaktorielle Modellierung. Wir bestimmen die lokalen Mittelwerte.\n\n\nR Code [zeigen / verbergen]\nfac1_fit |&gt; augment() |&gt; \n  select(jump_length, animal, .fitted, .resid) \n\n\n# A tibble: 21 × 4\n   jump_length animal .fitted  .resid\n         &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1         5.7 dog       8.13 -2.43  \n 2         8.9 dog       8.13  0.771 \n 3        11.8 dog       8.13  3.67  \n 4         5.6 dog       8.13 -2.53  \n 5         9.1 dog       8.13  0.971 \n 6         8.2 dog       8.13  0.0714\n 7         7.6 dog       8.13 -0.529 \n 8         3.2 cat       4.74 -1.54  \n 9         2.2 cat       4.74 -2.54  \n10         5.4 cat       4.74  0.657 \n# ℹ 11 more rows\n\n\nIn einem einfaktoriellen Modell sind meistens dann die Residuen etwas größer, da wir hier ja immer die Differenz zu den lokalen Mittelwerten berechnen. Ja, das ist wirklich sehr ähnlich zu der ANOVA. Deshalb können wir auch ein lineares Modell in einer ANOVA weiter nutzen.\n\n\n\nManchmal ist es schwer zu verstehen warum wir bei einer Vorhersage in einem einfaktoriellen Modell immer den gleichen Wert für eine neue Beobachtung innnerhalb einer lokalen Gruppe erhalten. Ich habe dir in der folgenden Abbildung einmal die lokalen Mittelwerte sowie die drei neuen Beobachtungen ergänzt. Wie du siehst liegen die zwei Katzenflöhe auf dem lokalen Mittelwert der Sprungweiten der Katzenflöhe sowie der Fuchsfloh auf dem lokalen Mittel der Sprungweiten der Fuchsflöhe.\n\n\n\n\n\n\n\n\nAbbildung 44.23— Dotplot der alten Beobachtungen der Sprungweite in [cm] und der Tierart. Die neuen vorhergesagten Werte für die Sprungweiten liegen immer auf den Mittelwerten der jeweiligen Gruppen. Der Mittelwert und die Standardabweichung sind ergänzt.\n\n\n\n\n\nDas war dann auch schon unser Kapitel zu der simplen linearen Regression. Wir können natürlich auch noch mehr Einflussvariablen in ein Modell nehmen. Dann rechnen wir aber ein multiples lineares Modell. Dazu dann in dem folgenden Kapitel mehr zu den Grundlagen der multiplen linearen Regression. Je nach betrachteten Messwert müssen wir dann aber auch noch unsere Regression anpassen. Dazu findest du dann in dem großen Teil zum statistischen Modellieren mehr Informationen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#glossar",
    "href": "stat-linear-reg-basic.html#glossar",
    "title": "44  Simple lineare Regression",
    "section": "44.7 Glossar",
    "text": "44.7 Glossar\nManchmal fragst du dich sicher, was soll den das Wort hier wieder heißen. Häufig hilft ja da auch die Suchfunktion, aber ich habe hier mal alle Fachbegriffe in einer Tabelle zusammengefasst. Dadurch sollte es dir einfacher sein mal den einen oder anderen Fachbegriff aus dem statistischen Modellieren nachzuschlagen.\n\n\n\n\n\n\nGlossar zum statistischen Modellieren\n\n\n\n\n\n\nTabelle 44.10— Gossar der häufig verwendeten Symbole und Fachbegriffe im statistischen Modellieren.\n\n\n\n\n\n\n\n\n\nSymbol\nDeutsch\n\n\n\n\n\\(RHS \\sim LHS\\)\nModellschreibweise mit der rechten Seite (eng. right hand site) und der linken Seite (eng. left hand side).\n\n\n\\(RHS\\)\nRechte Seite der Tilde in der Modellschreibweise (eng. right hand site).\n\n\n\\(LHS\\)\nLinke Seite der Tilde in der Modellschreibweise (eng. left hand site).\n\n\n\\(Y \\sim X\\)\nModelschreibweise mit Platzhaltervariable X und Y für beliebige Einflussvariablen X sowie einem Messwert Y.\n\n\n\\(Y / y\\)\nDer Messwert über den du zum Beispiel den Mittelwert bilden möchtest. Der Messwert steht auf der y-Achse in unseren Abbildungen.\n\n\n\\(X / x\\)\nDie Einflussvariable die zum Beispiel deinen Messwert gruppiert. Die Einflussvariablen stehen auf der x-Achse in unseren Abbildungen.\n\n\n\\(\\epsilon\\)\nResiduen oder Fehler aus einer Regressionsanalyse. Die Differenz der beobachteten Messwerte zu den Messwerten auf der Graden.\n\n\nFehler\nAbweichung der vorhergesagten y-Werte durch das Modell auf der Graden zu den beobachteten y-Werten in den Daten. Auch Residuen gennannt.\n\n\n\\(\\beta_0\\)\nIntercept oder y-Achsenabschnitt. Wo die Grade die y-Achse schneidet.\n\n\n\\(\\beta_1\\)\nSteigung der ersten Einflussvariable. Wenn wir die Einflussvariable um eine Einheit erhöhen, dann steigt der MEsswert um den Wert des Koeffizienten der Steigung an.\n\n\nIntercept\nDer y-Achsenabschnitt wo die Grade die y-Achse schneidet.\n\n\n\\(\\hat{y}\\)\nVorhergesagte y-Werte durch das Modell auf der Graden.\n\n\nKovariate\nKontinuierliche Einflussvariable.\n\n\n\\(c_1\\)\nKovariate.\n\n\nFaktor\nKategoriale Einflussvariable.\n\n\nLevel\nGruppen eines Faktors.\n\n\n\\(f_A\\)\nFaktor.\n\n\n\\(A.1, ..., A.3\\)\nLevel eines Faktors als Gruppen.\n\n\n\\(\\mathcal{N}(0, 1)\\)\nStandardnormalverteilung mit einem Mittelwert von 0 und einer Varianz von 1.\n\n\nZufälliger Effekt\nFaktor in einem gemischten Modell, der aus einer zufälligen Population stammt.\n\n\n\\(Z / z\\)\nZufälliger Effekt.\n\n\nFester Effekt\nFaktor in einem gemischten Modell, der aus einer experimentellen Population stammt.\n\n\nschätzen\nBerechnung der Koeffizienten in einem statistischen Modell.\n\n\nKoeffizienten\nSteigung und Intercept in einem statistischen Modell. Allgemeiner die Parameter die ein statistsiches Modell wiedergibt und die Grade beschreibt.\n\n\nResiduen\nUnerklärter Rest durch die Modellierung. Konkret der Abstand zwischen den y-Messwerten und den y-Werten auf der Geraden.\n\n\nfitted\nDie angepassten y-Werte auf der Graden.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-linear-reg-basic.html#referenzen",
    "href": "stat-linear-reg-basic.html#referenzen",
    "title": "44  Simple lineare Regression",
    "section": "Referenzen",
    "text": "Referenzen\n\n\n\n\n\n\nKéry, M. (2010). Introduction to WinBUGS for ecologists: Bayesian approach to regression, ANOVA, mixed models and related analyses. Academic Press.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Simple lineare Regression</span>"
    ]
  },
  {
    "objectID": "stat-modeling-basic.html#kombiniertes-modell",
    "href": "stat-modeling-basic.html#kombiniertes-modell",
    "title": "45  Multiple lineare Regression",
    "section": "45.7 Kombiniertes Modell",
    "text": "45.7 Kombiniertes Modell\nFür unsere Vorhersage brauchen wir auch hier ein Modell. Wir nutzen hier das einkovariate Modell wie auch schon weiter oben in dem kausalen Modell zu einkovariaten Analyse. Wir nehmen als Messwert die Sprungweite der Flöhe und als Einflussvariable dann das Gewicht der Flöhe. Soweit sieht allse aus wie auch in einem kausalen Modell.\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_fit &lt;- lm(jump_length ~ weight + count_leg + feeding + stage, data = flea_model_tbl)\n\n\nJetzt können wir die Funktion predict() nutzen um uns neue Sprungweiten für neue Flohgewichte vorhersagen zu lassen. Oder aber wir lassen uns die Werte auf der Graden für die Sprungweiten wiedergeben. Jedes Gewicht hat ja einen Wert für die Sprungweite auf der Graden. Wir nennen diese Messwerte auf der Graden dann angepasste (eng. fitted) Werte.\n\nNeue x-WerteAlte x-Werte\n\n\nWir bauen uns hier einmal einen Datensatz nur mit dem Gewicht von vier neuen Flöhen. Wir wollen jetzt vorhersagen wie weit unsere vier neuen Flöhe gegeben ihres Gewichts springen würden.\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_new_tbl &lt;- tibble(weight = c(1.7, 1.4, 2.1, 3.0),\n                            count_leg = c(56, 78, 54, 78),\n                            feeding = c(\"blood\", \"blood\", \"ketchup\", \"sugar_water\"),\n                            stage = \"juvenile\")\n\n\nJetzt verbinden wir mit der Funktion predict() das einkovariate Modell und den Datensatz mit den neuen Körpergewichten der Flöhe. Dann erhalten wir die vorhergesagten Sprungweiten der vier Flöhe wieder.\n\n\nR Code [zeigen / verbergen]\npredict(cov2_fac2_fit, newdata = cov2_fac2_new_tbl) |&gt; round(2)\n\n\n    1     2     3     4 \n69.65 71.46 60.23 58.27 \n\n\nDas klingt jetzt erstmal etwas kryptisch, aber ich habe dir in der Abbildung weiter unten einmal die vier vorhergesagten Sprungweiten für die neuen Körpergewichte der Flöhe einmal dargestellt. Die vier neuen Sprungweiten liegen natürlich auf der Graden.\n\n\nDu kannst dir natürlich auch für die schon beobachteten Werte des Gewichts der Flöhe die angepassten Werte auf der Graden für die Sprungweite wiedergeben lassen. Dafür nutze ich die Funktion augment() aus dem R Paket {broom}.\n\n\nR Code [zeigen / verbergen]\ncov2_fac2_fit |&gt; augment() |&gt; \n  select(jump_length, weight, count_leg, feeding, stage, .fitted, .resid)\n\n\n# A tibble: 48 × 7\n   jump_length weight count_leg feeding     stage    .fitted .resid\n         &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1        77.2  16.4         63 sugar_water adult       79.7  -2.46\n 2        56.2  12.6         55 sugar_water adult       75.1 -18.8 \n 3        73.4  15.6        112 sugar_water adult       83.5 -10.1 \n 4        85.2  24.4        191 sugar_water adult       99.9 -14.8 \n 5        79.3  16.4        167 sugar_water adult       89.7 -10.4 \n 6        77.3  14.8         29 sugar_water adult       74.8   2.57\n 7        90.2  17.0         72 sugar_water adult       81.1   9.03\n 8        93.0  18.2        118 sugar_water adult       86.7   6.30\n 9        72.0   7.31        25 sugar_water juvenile    57.5  14.5 \n10        60.3   4.62        31 sugar_water juvenile    55.4   4.88\n# ℹ 38 more rows\n\n\nIch habe dann noch die Residuen mit rausgezogen. Die ursprünglichen Messwerte der Sprungweite sind dann die angepassten Werte plus die Werte der Residuen. Muss ja auch sein, den die Residuen sind ja die Abstände von unserer Graden zu den einzelnen Messwerten der Beobachtungen.",
    "crumbs": [
      "Grundlagen des Modellierens",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Multiple lineare Regression</span>"
    ]
  }
]