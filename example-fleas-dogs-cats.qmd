```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, openxlsx)
```

# Von Flöhen auf Tieren

*Letzte Änderung am `r format(fs::file_info("example-fleas-dogs-cats.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"I am fond of pigs. Dogs look up to us. Cats look down on us. Pigs treat us as equals." --- Winston S. Churchill"*

## Von Flöhen und Hunden {#sec-example-1}

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_weight_dog <- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
```

In unserem ersten Beispiel wollen wir uns verschiedene Daten $D$ von Hunden und Hundeflöhen anschauen. Unter anderem sind dies die Sprungweite, die Anzahl an Flöhen, die Boniturnoten auf einer Hundemesse sowie der Infektionsstatus. Hier nochmal detailiert, was wir uns im Folgenden immer wieder anschauen wollen.

-   **Sprungweite** in \[cm\] von verschiedenen Flöhen $$
    Y_{jump} = \{`r str_c(y_jump_dog, collapse = ", ")`\}.
    $$

-   **Anzahl an Flöhen** auf verschiedenen Hunden $$
      Y_{count} = \{`r str_c(y_count_dog, collapse = ", ")`\}.
      $$

-   **Gewicht des gesprungenen Flohes** auf verschiedenen Hunden $$
        Y_{weight} = \{`r str_c(y_weight_dog, collapse = ", ")`\}.
        $$

-   **Boniturnoten** \[1 = schlechteste bis 9 = beste Note\] von verschiedenen Hunden $$
      Y_{grade} = \{`r str_c(y_grade_dog, collapse = ", ")`\}.
      $$

-   **Infektionstatus** \[0 = gesund, 1 = infiziert\] mit Flöhen von verschiedenen Hunden $$
      Y_{infected} = \{`r str_c(y_infected_dog, collapse = ", ")`\}.
      $$

Je nachdem was wir messen, nimmt $Y$ andere Zahlenräume an. Wir sagen, $Y$ folgt einer Verteilung. Die Sprungweite ist normalverteilt, die Anzahl an Flöhen folgt einer Poisson Verteilung, die Boniturnoten sind multinominal/ordinal bzw. kategorial verteilt. Der Infektionsstatus ist binomial verteilt. Wir werden uns später die Verteilungen anschauen und visualisieren. Das können wir hier aber noch nicht. Wichtig ist, dass du schon mal gehört hast, dass $Y$ unterschiedlich *verteilt* ist, je nachdem welche Dinge wir messen.

@tbl-dog-long zeigt dir die Darstellung der Daten von oben in einer einzigen Tabelle. Bitte beachte, dass genau eine Zeile für eine Beobachtung, in diesem Fall einem Hund, vorgesehen ist.

```{r echo = FALSE}
#| label: tbl-dog-long
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus für Hundeflöhe. Die Tabelle ist im Long-Format dargestellt.

data_tbl <- tibble(dog = y_jump_dog) %>%
  gather(animal, jump_length) %>%
  mutate(flea_count = c(y_count_dog),
         weight = c(y_weight_dog),
         grade = c(y_grade_dog),
         infected = c(y_infected_dog))

write.csv2(data_tbl, "data/flea_dog.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog.xlsx", rowNames = FALSE)

data_tbl %>%
  kable(align = "c", "pipe")
```

::: callout-tip
## Datei für von Flöhen und Hunden

Du findest die Datei `flea_dog.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen, Hunden und Katzen {#sec-example-2}

```{r echo = FALSE}
y_jump_dog <- c(5.7, 8.9, 11.8, 5.6, 9.1, 8.2, 7.6)
y_count_dog <- c(18, 22, 17, 12, 23, 18, 21)
y_weight_dog <- c(2.1, 2.3, 2.8, 2.4, 1.2, 4.1, 3.2)
y_grade_dog <- c(8, 8, 6, 8, 7, 7, 9)
y_infected_dog <- c(0, 1, 1, 0, 1, 0, 0)
y_jump_cat <- c(3.2, 2.2, 5.4, 4.1, 4.3, 7.9, 6.1)
y_count_cat <- c(12, 13, 11, 12, 16, 9, 7)
y_weight_cat <- c(1.1, 2.1, 2.4, 2.1, 1.5, 3.7, 2.9)
y_grade_cat <- c(7, 5, 7, 6, 6, 6, 5)
y_infected_cat <- c(1, 0, 0, 0, 1, 0, 0)
```

Wir wollen jetzt das Beispiel von den Hunden und Flöhen um eine Spezies erweitern. Wir nehmen noch die Katzen mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit von Katzen und Hundeflöhen aus? Konzentrieren wir uns hier einmal auf die Sprungweite. Wir können wie in dem vorherigen Beispiel mit den Hundeflöhen die Sprungweiten \[cm\] der Katzenflöhe wieder in der gleichen Weise aufschreiben:

$$
Y_{jump} = \{`r str_c(y_jump_cat, collapse = ", ")`\}.
$$

Wenn wir jetzt die Sprungweiten der Hundeflöhe mit den Katzenflöhen vergleichen wollen haben wir ein Problem. Beide Zahlenvektoren heißen gleich, nämlich $Y_{jump}$. Wir könnten jeweils in die Indizes noch $dog$ und $cat$ schreiben als $Y_{jump,\, dog}$ und $Y_{jump,\, cat}$ und erhalten folgende Vektoren.

$$
Y_{jump,\, dog} = \{`r str_c(y_jump_dog, collapse = ", ")`\}
$$

$$
Y_{jump,\, cat} = \{`r str_c(y_jump_cat, collapse = ", ")`\}
$$

Dadurch werden die Indizes immer länger und unübersichtlicher. Auch das $Y$ einfach $Y_{dog}$ oder $Y_{cat}$ zu nennen ist keine Lösung - wir wollen uns vielleicht später nicht nur die Sprungweite vergleichen, sondern vielleicht auch die Anzahl an Flöhen oder den Infektionsstatus. Dann ständen wir wieder vor dem Problem die $Y$ für die verschiedenen Outcomes zu unterscheiden. Daher erstellen wir uns die @tbl-dog-cat-wide. Wir haben jetzte eine *Daten*tabelle.

```{r echo = FALSE}
#| label: tbl-dog-cat-wide
#| tbl-cap: Sprunglängen [cm] für Hunde- und Katzenflöhe. Die Tabelle ist im Wide-Format dargestellt.

tibble(dog = y_jump_dog,
       cat = y_jump_cat) %>%
  kable(align = "c", "pipe")

```

Intuitiv ist die @tbl-dog-cat-wide übersichtlich und beinhaltet die Informationen die wir wollten. Dennoch haben wir das Probem, das wir in dieser @tbl-dog-cat-wide nicht noch weitere Outcomes angeben können. Wir können die Anzahl an Flöhen auf den Hunde und Katzen nicht darstellen. Als Lösung ändern wir die @tbl-dog-cat-wide in das Long-Format. Dargestellt in @tbl-dog-cat-long. Jede Beobachtung belegt nun eine Zeile. Dies ist sehr wichtig im Kopf zu behalten, wenn du eigene Daten in z.B. Excel einstellst.

```{r }
#| echo: false
#| label: tbl-dog-cat-long
#| tbl-cap: Tabelle  der Sprunglängen [cm], Anzahl an Flöhen, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus von Hunde- und Katzenflöhe. Die Tabelle ist im Long-Format dargestellt.


data_tbl <- tibble(dog = y_jump_dog,
       cat = y_jump_cat) %>%
  gather(animal, jump_length) %>%
  mutate(flea_count = c(y_count_dog, y_count_cat),
         weight = c(y_weight_dog, y_weight_cat),
         grade = c(y_grade_dog, y_grade_cat),
         infected = c(y_infected_dog, y_infected_cat))

write.csv2(data_tbl, "data/flea_dog_cat.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat.xlsx", rowNames = FALSE)


data_tbl %>%
  kable(align = "c", "pipe")

```

::: callout-tip
## Datei für von Flöhen, Hunden und Katzen

Du findest die Datei `flea_dog_cat.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen auf Hunde, Katzen und Füchsen {#sec-example-3}

```{r }
#| echo: false
#| message: false

data_tbl <- read_csv2("data/flea_dog_cat.csv")
```

Wir wollen jetzt das Beispiel von den Hunde- und Katzenflöhen um eine *weitere* Spezies erweitern. Warum machen wir das? Später wollen wir uns anschauen, wie sich verschiedene Gruppen oder Behandlungen voneinander unterscheiden. Wir brauchen alos mehr Spezies. Wir nehmen noch die Füchse mit dazu und fragen uns, wie sieht es mit der Sprungfähigkeit von Hunde-, Katzen- und Fuchsflöhen aus?

```{r echo = FALSE}
#| label: tbl-dog-cat-fox
#| tbl-cap: Tabelle der Sprunglängen [cm], Anzahl an Flöhen, Gewicht der Flöhe, Boniturnote sowie der Infektionsstatus von Hunde-, Katzen- und Fuchsflöhe. 

y_jump_fox <- c(7.7, 8.1, 9.1, 9.7, 10.6, 8.6, 10.3)
y_grade_fox <- c(5, 4, 4, 5, 4, 4, 3)
y_count_fox <- c(21, 25, 31, 12, 28, 18, 19)
y_weight_fox <- c(3.1, 4.2, 5.1, 3.5, 3.2, 4.6, 3.7)
y_infected_fox <- c(1, 1, 1, 1, 0, 1, 0)

data_tbl <- rbind(data_tbl,  
                  tibble(fox = y_jump_fox) %>%
                    gather(animal, jump_length) %>%
                    mutate(flea_count = c(y_count_fox),
                           weight = c(y_weight_fox),
                           grade = c(y_grade_fox),
                           infected = c(y_infected_fox)))

write.csv2(data_tbl, "data/flea_dog_cat_fox.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_fox.xlsx", rowNames = FALSE)


data_tbl %>%
  kable(align = "c", "pipe")

```

Der Datensatz in @tbl-dog-cat-fox beginnt schon recht groß zu werden. Deshalb brauchen wir auch R als Werkzeug um große Datensätze auswerten zu können.

::: callout-tip
## Datei für von Flöhen auf Tieren

Du findest die Datei `flea_dog_cat_fox.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von Flöhen auf Tieren in Habitaten {#sec-example-4}

Wir schauen uns in diesem Beispiel wiederum drei Tierarten an: Hunde, Katzen und Füchse. Auf diesen Tierarten messen wir die Sprunglänge von jeweils zehn Tieren. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte `site` in der wir vier verschiedene Messorte protokollieren. Es ergibt sich folgende @tbl-example-4 und die dazugehörige @fig-example-4.

```{r }
#| message: false
#| echo: false

set.seed(20220812)
data_tbl <- expand_grid(animal = 1:3, site = 1:4, rep = 1:10) %>% 
  mutate(jump_length = round(8 + 5 * animal + 2.5 * site - 1.5 * animal * site + rnorm(n(), 0, 2), 2),
         animal = factor(animal, labels = c("cat", "dog", "fox")),
         site = factor(site, labels = c("city", "smalltown", "village", "field")))

write.csv2(data_tbl, "data/flea_dog_cat_fox_site.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_fox_site.xlsx", rowNames = FALSE)
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: Sprunglängen [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten. 
#| label: tbl-example-4

data_raw_tbl <- data_tbl %>% 
  mutate(animal = as.character(animal),
         site = as.character(site))

rbind(head(data_raw_tbl),
      rep("...", times = ncol(data_raw_tbl)),
      tail(data_raw_tbl)) %>% 
  kable(align = "c", "pipe")
```

[Über die explorative Datenanalyse erfährst du mehr im @sec-eda-ggplot]{.aside}

Die Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Boxplot in @fig-example-4 an. Wir sehen hier, dass wir drei Tierarten an vier Orten die Sprungweite in \[cm\] gemessen haben.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: Boxplot der Sprungweiten [cm] für Hunde-, Katzen- und Fuchsflöhe in verschiedenen Habitaten.
#| label: fig-example-4

ggplot(data_tbl, aes(animal, jump_length, fill = site)) + 
  geom_boxplot() +
  labs(x = "Tierart", y = "Sprungweite [cm]") +
  theme_bw() 
```

::: callout-tip
## Datei für von Flöhen auf Tieren in Habitaten

Du findest die Datei `flea_dog_cat_fox_site.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::

## Von vielen Flöhen auf Hunden und Katzen {#sec-example-5}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

Wir schauen uns in diesem Beispiel wiederum nur zwei Tierarten an: Hunde und Katzen. Auf diesen Tierarten messen wir wieder die Sprunglänge in \[cm\] von jeweils 400 Tieren. Im Vergleich zu dem vorherigen Beispiel erweitern wir die Daten um eine Spalte `jump_weight` in \[mg\] sowie `sex` \[male, female\]. Bei Versuch wurde noch in der Variable `hatch_time` gemessen, wie lange die Flöhe in Stunden zum Schlümpfen brauchen. Es ergibt sich folgende @tbl-example-5 mit den ersten zehn Beobachtungen und die dazugehörige @fig-example-5.

```{r }
#| message: false
#| echo: false

set.seed(20220812)
data_tbl <- expand_grid(animal = 1:3, sex = 1:2, rep = 1:100) %>% 
  mutate(weight = round(5 + 2 * sex + rnorm(n(), 0, 1), 2),
         jump_length = round(8 + 2.5 * animal + 5 * sex + rnorm(n(), 0, 2), 2),
         animal = factor(animal, labels = c("cat", "dog", "fox")),
         sex = factor(sex, labels = c("male", "female")),
         flea_count = rpois(n(), 2),
         hatch_time = round(rlnorm(n(), 5, 1), 2)) %>% 
  select(-rep)

write.csv2(data_tbl, "data/flea_dog_cat_length_weight.csv", row.names = FALSE)
write.xlsx(data_tbl, "data/flea_dog_cat_length_weight.xlsx", rowNames = FALSE)
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: Sprunglängen [cm], Gewichte [mg], Geschecht [sex] und Schlüpfzeit [h] für Hunde- und Katzenflöhe.
#| label: tbl-example-5

data_tbl %>%
  head(10) %>% 
  kable(align = "c", "pipe")
```

[Über die explorative Datenanalyse erfährst du mehr im @sec-eda-ggplot]{.aside}

Die Datentabelle ist in dieser Form schon fast nicht mehr überschaubar. Daher hilft hier die explorative Datenanalyse weiter. Wir schauen uns daher die Daten einmal als einen Scatterplot in @fig-example-5 an. Wir sehen hier, dass wir das mit dem Gewicht \[mg\] der Flöhe auch die Sprungweite in \[cm\] steigt.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: Scatterplot der Sprunglängen [cm] und Gewichte [mg] für Hunde- und Katzenflöhe.
#| label: fig-example-5

ggplot(data_tbl, aes(weight, jump_length)) + 
  geom_point() +
  labs(x = "Gewicht [mg]", y = "Sprungweite [cm]") +
  theme_bw() 
```

::: callout-tip
## Datei für von vielen Flöhen auf Hunden und Katzen

Du findest die Datei `flea_dog_cat_length_weight.xlsx` auf GitHub [jkruppa.github.io/data/](https://github.com/jkruppa/jkruppa.github.io/tree/master/data) als Excel oder auch als CSV.
:::
