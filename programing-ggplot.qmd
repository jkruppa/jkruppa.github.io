# Ein `{ggplot}` Cookbook {#sec-ggplot-cookbook}

*Letzte Änderung am `r format(fs::file_info("programing-purrr-furrr.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

```{r}
#| warning: false
#| echo: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, conflicted)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
            "#F0E442", "#F5C710", "#0072B2", "#D55E00", "#CC79A7")
```

> *"Frei ist, wer missfallen kann." --- Annette Oschmann in [Mädchen stärken](https://www.annette-oschmann.de/maedchen-staerken/)*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konzeption (seit 05.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zu Beginn des WiSe 2025/26 eine arbeitsfähige Version des Kapitels erstellt zu haben. Das Kapitel wird etappenweise geschrieben, daher bleibt hier alles soweit erstmal mehr oder minder funktional.
:::

::: {.callout-caution collapse="true"}
## Was soll das hier? Was für ein Kochbuch?

![Quelle: <https://www.gocomics.com/garfield/1991/02/24>](images/programing/programming-garfield.jpg){#fig-math-cartoon fig-align="center" width="85%"}

Dieses Kapitel dient dazu *fortgeschrittene* Programmierung in `{ggplot}` zu präsentieren. Es ist eine Sammlung von Code und Rezepten, die ich immer mal wieder nutze. Deshalb hat dieses Kapitel auch den Titel *Cookbook*. Wenn dich also Programmieren interessiert, dann kannst du dir hier noch was anschauen. Das Kapitel ist eigentlich nie fertig, da ich sicherlich immer mal wieder was ergänzen werde.
:::

In diesem Kapitel geht es hauptsächlich um

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, readxl, latex2exp, see, duke, 
               wesanderson, ggbreak, patchwork, 
               tidyplots, conflicted)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Die Daten

```{r}
#| message: false

ggplot_tbl <- read_xlsx("data/fleas_model_data.xlsx") |> 
  mutate(animal = as_factor(feeding),
         stage = as_factor(stage))
```

Betrachten wir als erstes einen Auszug aus der Datentabelle.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-model-table
#| tbl-cap: "Tabelle"

ggplot_raw_tbl <- read_xlsx("data/fleas_model_data.xlsx") 

rbind(head(ggplot_raw_tbl, n = 3),
      rep("...", times = ncol(ggplot_raw_tbl)),
      tail(ggplot_raw_tbl, n = 3)) |> 
  kable(align = "c", "pipe")
```

**old stuff**

```{r}
flea_dog_cat_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  mutate(animal = as_factor(animal))
```

## Optionen in `{ggplot}`

Im Folgenden dann noch eine Sammlung an nützlichen Optionen und Möglichkeiten, die einem das Leben einfacher machen und die Abbildungen dann noch schöner. Nicht alles musst du in `ggplot` machen, manchmal geht es dann in PowerPoint dann doch schneller mal eben einen Text zu ergänzen. Sehe das hier deshalb als Ergänzung und meinen privaten Raum, den ich nutze um mir den Code zu merken.

### Sammelstelle

[Legend Attributes](https://github.com/tidyverse/ggplot2/wiki/Legend-Attributes)

[Legenden in ggplot](https://www.tidyverse.org/blog/2024/02/ggplot2-3-5-0-legends/)

[override-aes](https://aosmith.rbind.io/2020/07/09/ggplot2-override-aes/)

[Math in R](https://cran.r-project.org/view=NumericalMathematics)

[Exploratory Data Analysis Checklist](https://bookdown.org/rdpeng/exdata/exploratory-data-analysis-checklist.html)

[Principles of Effective Data Visualization](https://www.cell.com/patterns/fulltext/S2666-3899(20)30189-6)

[Principles of Effective Data Visualization (PDF-Datei)](https://www.cell.com/action/showPdf?pii=S2666-3899%2820%2930189-6)

[An Introduction to emojifont package](https://cran.r-project.org/web/packages/emojifont/vignettes/emojifont.html)

[Emoji Unicode Tables](https://apps.timwhitlock.info/emoji/tables/unicode)

[emo(ji)](https://github.com/hadley/emo)

#### Schriftarten in ggplot

[Quick and easy ways to deal with long labels in ggplot2](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/)

[Adding Custom Fonts to ggplot in R](https://gradientdescending.com/adding-custom-fonts-to-ggplot-in-r/)

[Aesthetic specifications](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)

Die Sache mit der Schriftart in `{ggplot}`.

[Quick and easy ways to deal with long labels in ggplot2](https://www.andrewheiss.com/blog/2022/06/23/long-labels-ggplot/)

```{r}
library(ggrepel)
```

[Getting started with `{ggrepel}`](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html) [{`ggtext`}: Improved text rendering support for ggplot2](https://wilkelab.org/ggtext/)

```{r}
update_geom_defaults("label", 
                     list(family = "IBM Plex Sans Condensed"))
update_geom_defaults(ggtext::GeomRichText, 
                     list(family = "IBM Plex Sans Condensed"))
update_geom_defaults("label_repel", 
                     list(family = "IBM Plex Sans Condensed"))
```

```{r}
ggplot(tibble(x = 1:3, y = 1:3), aes(x,y)) +
  theme_minimal(base_family = "IBM Plex Sans Condensed") +
  geom_point() +
  labs(x = "Hallo", y = "Mehr zesz")
```

https://statisticaloddsandends.wordpress.com/2021/07/08/using-different-fonts-with-ggplot2/ https://www.r-bloggers.com/2019/03/adding-custom-fonts-to-ggplot-in-r/ https://stackoverflow.com/questions/34522732/changing-fonts-in-ggplot2 https://ggplot2.tidyverse.org/articles/ggplot2-specs.html

#### `{gganimate}`

[Datanovia](https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/)

[Cheat sheet `{gganimate}`](https://rstudio.github.io/cheatsheets/gganimate.pdf)

#### `{ggh4x}`

[`{ggh4x}`](https://teunbrand.github.io/ggh4x/articles/ggh4x.html)

#### `{ggsignif}`

[`{ggsignif}`](https://github.com/const-ae/ggsignif)

#### `{tidyplots}`

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-tidyplots-fac1
#| fig-align: center
#| fig-height: 3
#| fig-width: 3.5
#| fig-cap: "Beispielhafter zweifaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten und den beiden Geschlechtern."

ggplot_tbl |> 
  tidyplot(x = animal, y = jump_length, color = animal) |> 
  theme_minimal_y() |> 
  add_data_points() |> 
  add_mean_bar(alpha = 0.4) |> 
  add_sd_errorbar() |> 
  remove_legend() |> 
  adjust_size(height = NA, width = NA)
```

[`{tidyplots}`](https://jbengler.github.io/tidyplots/)

[Get started](https://jbengler.github.io/tidyplots/articles/tidyplots.html)

[Use cases](https://tidyplots.org/use-cases/)

[tidyplots cheatsheet](https://tidyplots.org/tidyplots-cheatsheet-v1.pdf)

@engler2025tidyplots

### Überschriften, Achsen und Legenden

Wenn du mehr machen willst, also die Überschriften anpassen oder aber die Achsenbeschriftung ändern, dann gibt es hier global Hilfe im [ggplot Manual](https://ggplot2.tidyverse.org/reference/index.html). Die Webseite [R Cookbook](https://ggplot2.tidyverse.org/reference/index.html) hat auch spezielle Hilfe für ggplot().

-   [Überschriften von Abbildungen](http://www.cookbook-r.com/Graphs/Titles_(ggplot2)/)
-   [Achsenbeschriftung](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/)
-   [Legende](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/)
-   [Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)

In @fig-labels-0 siehst du eine Abbildung mit Titel und veränderten Beschriftungen. Die Möglichkeiten sind nahezu unbegrenzt und sprengen auch hier den Rahmen. Im Zweifel im R Tutorium vorbeischauen oder aber in der Vorlesung fragen.

```{r }
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung mit Titel und geänderter Achsenbeschrittung. *[Zum Vergrößern anklicken]*"


ggplot(data = flea_dog_cat_tbl, aes(x = animal, y = jump_length,
                                    fill = animal)) +
  geom_boxplot() +
  labs(title = "Frischgewicht in Abhängigkeit von der Behandlung",
       x = "Behandlung", y = "Frischgewicht in kg/ha") +
  scale_x_discrete(labels = c("Katze", "Hund")) +
  scale_fill_discrete(name = "Behandlung", labels = c("Katze", "Hund")) +
  theme_minimal() 

```

### Abbildungen abspeichern

Wenn du eine Abbildung abspeichern willst, dann musst du nur nach dem `ggplot`-Code die Funktion `ggsave()` setzen. Wie du im hier im Folgenden siehst, speichere ich die Abbildung der Boxplots der Hunde- und Katzenflöhe einmal in der Datei `flea_dog_boxplot.png` ab. Dabei wähle ich eine Breite `width` und eine Höhe `height` von jeweils 5. Du musst dann immer etwas spielen, je größer die Zahlen, desto größer die Abbildung und die Auflösung.

```{r}
#| warning: false
#| echo: true
#| eval: false
#| message: false
#| label: fig-save
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abspeicherung einer Abbdilung mit `ggsave()`. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length)) +
  geom_boxplot() 

## Abspeichern des obigen ggplots  
ggsave("flea_dog_boxplot.png", width = 5, height = 5)
```

Wie immer hilft auch die [Hilfeseite von `ggsave()`](https://ggplot2.tidyverse.org/reference/ggsave.html) weiter, wenn es um mehr Optionen und Qualität der Abbildungen geht.

### Mathematische Ausdrücke in den Achsenbeschriftungen {#sec-eda-tex}

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Häufig wollen wir nicht nur einfache Achsenbeschriftungen haben, sondern auch irgendwie komplexere Einheiten wie Eisendüngergehalt im Boden in $[kg\, ha]^{-1}$ darstellen. Jetzt soll die Einheit auch in dieser Form mit in die Achsenbeschriftung. Wir können dafür zwei Wege wählen. Einmal über das R Paket `{latex2exp}` und die Funktion `TeX()` oder aber die Funktion `expression()`, wofür wir dann kein eigenes R Paket brauchen. Beide Wege haben Vor- und Nachteile. Wir gehen aber beide mal durch. Mehr Informationen durch das Tutorium [Using latex2exp](https://cran.r-project.org/web/packages/latex2exp/vignettes/using-latex2exp.html) oder aber eben der Klassiker mit [Plot math expression](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html).

Wir können die Funktion `expression()` nutzen um uns mathematische Formeln zu bauen. Leider ist das Ganze etwas frickelig und auch ich brauche immer drei Anläufe, bis die Formel dann passt. Im Folgenden aber einmal zwei Beispiel für mathematische Formeln und Ausdrücke. Beachte, dass du jedes Leerzeichen durch eine Tilde `~` abbilden musst. Ich nutze die Funktion `expression()` sehr selten und nur wenn die Formel wirklich sehr einfach ist. Da wir aber schon mit eckigen Klammern Probleme kriegen und diese so nervig mit `"` einklammern müssen, nutze ich dann das Paket `{latex2exp}` was ich im Folgenden vorstellen werde.

Hier aber erstmal zwei Beispiele für eine Formel mit der Funktion `expression()`. Wenn du mehr über die Möglichkeiten wissen willst, dann schauen auch einmal auf die Hilfeseite von [Plot math](https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html) oder du googelst dir die Lösung wie ich früher zusammen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2
#| fig-width: 5

plot(expression(Eisendüngeform~und~-höhe~"[kg ha]"^-1), cex = 1.5, main = "")
plot(expression(Fe-Gehalt~"["~mg%.%(kg~TM)^-1~"]"), cex = 1.5, main = "")
```

Für mich ausdrücklich einfacher geht es mit dem R Paket `{latex2exp}` und der Funktion `TeX()` sowie die Helferfunktion `r"()"`. Ja, hier muss man dann noch eine andere Programmiersprache kennen, aber wie immer, du wirst nur schlauer. Die Informationen zur Matheumgebung in $\LaTeX$ kommen dann nochmal extra zwischen zwei Dollarzeichen `$`. Ja, das ist etwas wirr für einen Anfänger, aber wir nutzen hier auch zwei Programmiersprachen zusammen. Zum einen $\LaTeX$ um die Mathesymbole sauber darzustellen und dann R um die Abbildungen in `ggplot()` zu bauen. Mehr Informationen zu der Matheumgebung in $\LaTeX$ findest du einmal in der [LaTeX Mathehilfe I](https://de.wikipedia.org/wiki/Hilfe:TeX) sowie der [LaTeX Mathehilfe II](https://en.wikibooks.org/wiki/LaTeX/Mathematics).

Wie bauen wir uns also unseren mathematischen Ausdruck? Als erstes brauchen wir die Funktion `Tex()`, die sagt einfach nur aus, dass jetzt $\LaTeX$-Code kommt. Dann wollen wir noch einen String brauen in dem der $\LaTeX$-Code für unseren mathematischen Ausdruck drin steht. Diesen String bauen wir mit `r"()"`. Achtung, hier ist das Gänsefüßchen oben und unten vor und nach der runden Klammer sehr wichtig. In den Ausdruck können wir dann Text schreiben `Eisengehalt` oder aber einen mathematischen Ausdruck abgrenzt von zwei Dollarzeichen `$` wie `$[kg\, ha]^{-1}$`. $\LaTeX$ kann nämlich nicht nur mathematische Ausdrücke sondern ist eigentlich ein Textverarbeitungsprogramm. Deshalb musst du hier *nochmal* zwischen Text und mathematischen Ausdruck unterscheiden.

Hier nochmal aufgeschlüsselt wie der Code aussieht. Wir schreiben den Code nachher in einer Zeile, aber zum Verständnis ist es besser, wenn wir den Code einmal aufgeklappt sehen.

```{r}
#| eval: false
TeX(
    r"(
      Eisengehalt $[kg\, ha]^{-1}$
    )"
   )
```

Wir wollen uns das Ergebnis einmal in einem simplen `plot()` anschauen. Wir nutzen die Funktionalität natürlich später in `ggplot`, aber hier ist es so einmal einfacher zu sehen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         Eisengehalt $[kg\, ha]^{-1}$
      )")
    )
```

Auch können wir sehr viel komplexere Formeln erstellen. Beachte auch hier, dass wir zwei Matheumgebungen in $\LaTeX$ vorliegen haben.

```{r}
#| warning: false
#| echo: true
#| message: false
#| fig-align: center
#| fig-height: 2.5
#| fig-width: 5

plot(cex = 2, main = "",
  TeX(r"(
         A $\LaTeX$ formula: $\frac{2hc^2}{\lambda^5}\frac{1}{e^{\frac{hc}{\lambda k_B T}} - 1}$
      )")
  )
```

In der @fig-scatter-flea-1 dann nochmal die Anwendung in einem `ggplot` in dem wir die Achsen entsprechend beschriften und dann auch noch eine ausgedachte Regressionsgeleichung zu der Abbildung ergänzen.

```{r}
#| echo: true
#| warning: false
#| message: false
#| label: fig-scatter-flea-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Zusammenhang zwischen dem Eisengehalt und -höhe im Boden und dem Eisengehalt in Salat. Zusätzlich ergänzt eine Regressiongleichung und ein ausgedachtes Bestimmtheitsmaß. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, aes(x = flea_count, y = jump_length)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  labs(x = TeX(r"(Eisengehalt und -höhe $[kg\, ha]^{-1}$)"), 
       y = TeX(r"(Fe-Gehalt $[mg \cdot (kg TM)^{-1}]$)")) +
  annotate("text", x = 10, y = 10,
           label = TeX(r"($y = \beta_0 + \beta_1 \cdot x;\; R^2 = 0.24$)"))

```

Wenn du dann mal die Funktion `Tex()` in `geom_text()` verwenden willst, dann musst du einmal etwas anpassen. Dann klappt es aber auch hier. Das hat mich mal echt Nerven und Zeit gekostet, deshalb lagere ich die Information mal hier für mich.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
#| fig-align: center
#| fig-height: 1
#| fig-width: 2

ggplot() +
  theme_void() +
  geom_text(aes(0, 0, 
                label = TeX(r'($\alpha  x^\alpha$, where $\alpha \in 1\ldots 5$)',
                                  output = "character")), parse = TRUE) 
```

### Farbpaletten

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Neben den klassischen Farben im R Paket `{ggplot2}` gibt es noch weit, weit mehr Farbpaletten. Wir nutzen in der Folge immer wieder die Okabe-Ito Farbpalette aus dem R Paket `{see}`. Die Okabe-Ito Farbpalette ist speziell so gebaut, dass die Farben sich gut für farbenblinde Personen unterscheiden. Mehr zum R Paket `{see}` auf der [Hilfeseite des Paketes](https://easystats.github.io/see/index.html). Der Kontrast zwischen den Farben ist sehr gut. Wenn du eine andere Farbpalette nutzen willst, findest du hier noch andere [Color Scales](https://easystats.github.io/see/articles/seecolorscales.html).

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-0
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Boxplots. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           fill = animal)) +
  geom_boxplot() +
  scale_fill_okabeito() +
  theme_minimal()
```

```{r}
#| warning: false
#| echo: true
#| message: false
#| label: fig-labels-see-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Beispielhafte Abbildung der Okabe-Ito Farbpalette für Punkte. *[Zum Vergrößern anklicken]*"

ggplot(data = flea_dog_cat_tbl, 
       aes(x = animal, y = jump_length,
           color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()
```

Das Ganze geht dann auch händisch mit dem folgenden Code für die [jeweiligen Farben](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#a-colorblind-friendly-palette). Anbei einmal die Farbpalette dargestellt.

```{r}
#| warning: false
#| echo: false
#| message: false
#| label: fig-ggplot-okabeito
#| fig-align: center
#| fig-height: 0.75
#| fig-width: 6
#| fig-cap: "Farbpalette nach dem Okabe-Ito-Schema ebenfalls für farbblinde Personen erstellt. *[Zum Vergrößern anklicken]*"

df <- data.frame(
  x = 1:9,
  y = 0.5,
  z = factor(1:9)
)

ggplot(df, aes(x, y)) +
  geom_tile(aes(fill = z), colour = "grey50") +
  scale_fill_okabeito() +
  theme_void() +
  theme(legend.position = "none") 

```

Die Farben sind dann in der Reihenfolge wie folgt kodiert.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", 
                "#CC79A7", "#999999", "#000000")
```

Wenn wir Boxplots einfärben wollen dann nehmen wir den folgenden Code.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_fill_manual(values = cbPalette)
```

Und das hier ist die Ergänzung für Punkte und Linien.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
scale_colour_manual(values = cbPalette)
```

Neben der Okabe-Ito Farbpalette liefert das [R Paket `{duke}`](https://cran.r-project.org/web/packages/duke/vignettes/duke.html) noch eine andere Möglichkeit eine Farbpalette für Farbblinde zu generieren.

```{r}
#| warning: false
#| echo: false
#| message: false
#| label: fig-ggplot-duke
#| fig-align: center
#| fig-height: 0.75
#| fig-width: 6
#| fig-cap: "Farbpalette nach dem Duke-Schema ebenfalls für farbblinde Personen erstellt. *[Zum Vergrößern anklicken]*"

df <- data.frame(
  x = 1:9,
  y = 0.5,
  z = factor(1:9)
)
ggplot(df, aes(x, y)) +
  geom_tile(aes(fill = z), colour = "grey50") +
  scale_duke_fill_discrete() +
  theme_void() +
  theme(legend.position = "none") 

```

Die Farben sind dann in der Reihenfolge wie folgt kodiert.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: false
dukePalette <- c("#012169", "#C84E00", "#00539B", "#339898", 
                 "#A1B70D", "#E89923", "#FFD960", "#262626")
```

Die Funktionen hier sind `scale_duke_color_discrete()` sowie `scale_duke_continuous()` und `scale_duke_fill_discrete()`.

Manchmal benötigen wir auch Farbverläufe. In R heißen diese Farbverläufe dann Farbpaletten. Eine Einführung liefert das Tutorium [Using RColorBrewer palettes](http://www.sthda.com/english/wiki/colors-in-r#using-rcolorbrewer-palettes). Ich selber nutze gerne das R Paket `{wesanderson}` welches sehr schöne Farbverläufe hat. Mehr kannst du auf der GitHub Seite [Wes Anderson Palettes](https://github.com/karthik/wesanderson) erfahren. Wir können die Paletten ganz einfach mit der Funktion `wes_palette()` laden.

```{r}
#| fig-height: 0.75
#| fig-width: 6
wes_palette("Zissou1")
```

Das schöne ist hier, dass wir einfach wie folgt Farbverläufe erstellen können. Wir wollen hier 21 Farbwerte haben und das Ganze dann als kontinuierlichen Verlauf.

```{r}
#| fig-height: 0.75
#| fig-width: 6
wes_palette("Zissou1", 21, type = "continuous")
```

### Abbildungen nebeneinander

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Das [R Paket `{patchwork}`](https://patchwork.data-imaginist.com/articles/patchwork.html) erlaubt es mehrere `ggplot` Abbildungen nebeneinander oder in einem beliebigen Layout miteinander zu verbinden. Das tolle ist, dass die Idee sehr intuitiv ist. Wir nutzen wieder das `+` um verschiedene Plots miteinander zu verbinden. Im Folgenden erschaffen wir uns zwei `ggplots` und speichern die Plots in den Objekten `p1` und `p2`. Das ist wie wir es bisher kennen, nur das jetzt keine Abbildung erscheint sondern beide Plots in zwei Objekten gespeichert sind.

```{r}
#| warning: false
#| echo: true
#| message: false

p1 <- ggplot(data = flea_dog_cat_tbl, 
             aes(x = flea_count, y = jump_length,
                 color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()

p2 <- ggplot(data = flea_dog_cat_tbl, 
                aes(x = animal, y = jump_length,
                    color = animal)) +
  geom_point() +
  scale_color_okabeito() +
  theme_minimal()
```

Wie können wir nun die beiden Abbildungen nebeneinander zeichnen? Wir nutzen einfach das `+` Symbol.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: true
#| label: fig-labels-patchwork-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 9
#| fig-cap: "Beispielhafte Abbildung der zweier Plots nebeneinander. *[Zum Vergrößern anklicken]*"

p1 + p2
```

Auf der Seite des [R Paket `{patchwork}`](https://patchwork.data-imaginist.com/articles/patchwork.html) findest du viel mehr Möglichkeiten das Layout anzupassen und auch die einzelnen [Subplots zu beschriften](https://patchwork.data-imaginist.com/articles/guides/annotation.html).

### Gebrochene $y$-Achse

::: {.callout-tip appearance="minimal"}
Besuche auch [ggplot2 extensions](https://exts.ggplot2.tidyverse.org/gallery/) für weitere tolle Möglichkeiten!
:::

Das [R Paket `{ggbreak}`](https://cran.r-project.org/web/packages/ggbreak/vignettes/ggbreak.html) erlaubt es dir in die $x$-Achse oder aber $y$-Achse Lücken einzusetzen oder aber die Achsen eben gebrochen darzustellen. Zur Demonstration bauen wir uns nochmal den `stat_tbl` für die Hunde- und Katzenflöhe. Wir berechnen hier dann die Mittelwerte und nicht mehr die Standardabweichung, da es sonst nicht so gut mit der Darstellung mit der gebrochenen $y$-Achse für dieses Beispiel klappt.

```{r}
stat_tbl <- flea_dog_cat_tbl |> 
  group_by(animal) |> 
  summarise(mean = mean(jump_length))
```

In der @fig-labels-ggbreak-1 siehst du einmal die Abbildung der Mittelwerte der Sprungweiten der Hunde- und Katzenflöhe als Barplots dargestellt. Ich habe hier einen Bruch auf der $y$-Achse mit der Funktion `scale_y_break()` bei 1 bis 4 eingefügt und den Abstand über die Option `space` etwas visuell vergrößert. Mit der Option `scales` könntest du dann noch die Skalierung der gebrochenen $y$-Achse anpassen.

```{r}
#| warning: false
#| echo: true
#| message: false
#| eval: true
#| label: fig-labels-ggbreak-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: "Beispielhafte Abbildung der Barplots mit gebrochener $y$-Achse. Die Fehlerbalken wurden aus Gründen der besseren Darstellung der zerbrochenen $y$-Achse entfernt. *[Zum Vergrößern anklicken]*"

ggplot(stat_tbl, aes(x = animal, y = mean, fill = animal)) + 
  theme_minimal() +
  geom_bar(stat = "identity") +
  scale_y_break(c(1, 4), space = 0.5)
```

## Referenzen {.unnumbered}
