```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc,
               grid, agricolae, patchwork, desplot, modelr)
```

# Versuchsplanung in R {#sec-experimental-design-r}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

::: column-margin
Ein Weiteres umfangreiches Tutorium liefert [DSFAIR von P. Schmidt](https://schmidtpaul.github.io/DSFAIR/DesigningExperiments.html). Hier finden sich auch weiterführende Literatur und weitere Beispiele.
:::

Wenn wir über die Versuchsplanung und R sprechen, dann kommen wir an folgender Sammlung nicht vorbei.

-   [Design of Experiments (DoE) & Analysis of Experimental Data](https://cran.r-project.org/web/views/ExperimentalDesign.html)

Nirgendwo sonst findest du so einen Überblick über mögliche Pakete und Anwendungen in R. Wir schauen uns hier dann nur eine Auswahl an Möglichkeiten an. Ich selber habe mir noch nicht alles angeschaut, dass ist einfach zu viel. Je nach Fragestellung bietet sich ja auch ein anderes Paket an. Wir belassen es wie immer bei den Grundlagen. Die Grundlagen sind ja meistens dann ausreichend und manchmal auch schon kompliziert genug.

Was heißt hier *nested* (deu. *verschachtelt*). Wer ist in was nested?

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
set.seed(20230811)
pacman::p_load(tidyverse, magrittr, writexl, agricolae,
               desplot,
               conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("set_names", "magrittr")
cbbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

:::

## Selbermachen mit `expand_grid()`

Wir gehen immer von einem balanzierten Design aus.

$$
y \sim \overbrace{trt}^{f_1} + \underbrace{block}_{f_2} 
$$

```{r}
crd_long_tbl <- expand_grid(trt = 1:4, block = 1:4) %>% 
  mutate(trt = factor(trt, labels = c("ctrl", "A", "B", "C")),
         block = factor(block, labels = as.roman(1:4)),
         id = sample(1:n()))

crd_plot_tbl <- crd_long_tbl %>% 
  arrange(id) %>% 
  bind_cols(expand_grid(row = 1:4, col = 1:4))
  
```

```{r}
ggdesplot(data = crd_plot_tbl, 
          form = trt ~ col + row,
          text = trt, cex = 1, show.key = FALSE, shorten = "no", flip = TRUE)
```

`pivot_wider()`

```{r}
crd_wide_tbl <- pivot_wider(crd_long_tbl, names_from = block, values_from = id)
crd_wide_tbl
```

::: {.callout-caution collapse="true"}
## Und zurück mit `pivot_longer()`

```{r}
#| eval: false
#| message: false
#| warning: false

crd_wide_tbl %>% 
  pivot_longer(cols = I:IV,
               names_to = "block",
               values_to = "id")
```
:::

```{r}
#| eval: false
#| message: false
#| warning: false
crd_wide_tbl %>% 
  write_xlsx("template_sheet.xlsx")
```

```{r}
sample(1:16) %>% 
  matrix(ncol = 4, nrow = 4)
```

$$
y \sim \overbrace{trt}^{f_1} + \underbrace{block}_{f_2} + \overbrace{location}^{f_3}
$$

```{r}
data_long_tbl <- expand_grid(location = 1:2, trt = 1:4, block = 1:4) %>% 
  mutate(location = factor(location, labels = c("north", "south")),
         trt = factor(trt, labels = c("ctrl", "A", "B", "C")),
         block = factor(block, labels = as.roman(1:4)),
         id = sample(1:n()))

data_long_tbl
```

```{r}
data_wide_lst <- data_long_tbl %>% 
  split(.$location) %>% 
  map(~pivot_wider(., names_from = block, values_from = id))

data_wide_lst
```

```{r}
data_wide_lst %>% 
  write_xlsx("template_sheet.xlsx")
```

sample ID Spalte und fertig ist

## Das R Paket `agricolae`

Für die Erstellung von komplexeren experimentellen Designs fürht kein Weg an dem R Paket `agricolae` vorbei. Bei den einfacheren Designs ist es dann so eine Sache, ob du dir mit `agricolae` einen Gefallen tust oder eher die Sache sehr stark verkomplizierst. Ich würde dir bei den einfacheren Designs empfehlen einfach `exoand_grid()` wie oben beschrieben zu nutzen. Das its einfacher und funktioniert auch gut, wenn nicht gar besser.

Wichtige Parameter bei der Erstellung des Designs:

-   `series`: Eine Konstante, die verwendet wird, um numerische Markierungsblöcke festzulegen, z. B. Nummer = 2, die Etiketten lauten: 101, 102, für die erste Reihe oder den ersten Block, 201, 202, für die folgenden, im Falle eines vollständig randomisierten Designs ist die Nummerierung fortlaufend.
-   `design`: Einige Merkmale des Entwurfs, die agricolae anfordert, werden speziell auf design.ab (faktoriell) oder design.split (geteilter Plot) angewandt, und ihre möglichen Werte sind: "rcbd", "crd" und "lsd".
-   `seed`: Der Seed für die Zufallsgenerierung und sein Wert ist ein beliebiger reeller Wert, wenn der Wert Null ist, gibt es keine reproduzierbare Generierung, in diesem Fall eine Kopie des Wertes der outdesign\$Parameter.
-   `kinds`: die Methode der Zufallsgenerierung, standardmäßig "Super-Duper".
-   `first`: Bei einigen Mustern ist die erste Wiederholung nicht zufällig, vor allem im Blockmuster, wenn Sie zu zufällig wechseln wollen, ändern Sie auf TRUE: TRUE oder FALSE. Wenn false, wird die Randomisierung nicht durchgeführt

Output design:

-   `parameters`: die Eingabe zur Generierung Design, enthalten die Saatgut zur Generierung zufällig, wenn seed=0, das Programm einen Wert zu generieren und es ist möglich, das Design zu reproduzieren.
-   `book`: Feldbuch
-   `statistics`: die Informationsstatistiken das Design, z.B. Effizienzindex, Anzahl der Behandlungen.
-   `sketch`: Verteilung der Behandlungen im Feld.

Die Aufzählung der Parzellen

-   `zigzag`: ist eine Funktion, die es Ihnen ermöglicht, die Nummerierung der Plots in der Richtung der Serpentine zu platzieren: Die Zickzack-Ausgabe wird durch ein Design erzeugt
-   `fieldbook`: Ausgabe des Zickzacks, enthält Feldbuch.

[Tutorium agricolae](https://cran.r-project.org/web/packages/agricolae/vignettes/tutorial.pdf)

R Paket `agricolae` mit Beispielen von [Experimental Designs with agricolae](https://myaseen208.com/agricolae/articles/ExperimentalDesign.html) genauer einmal an.

Der Vorteil ist hier, dass wir verschiedene Anzahlen von Individuen in die Generierung nehmen können. Also zum Beispiel drei Pflanzen in der Kontrolle und dann jeweils fünf Pflanzen in der Behandlung. Weil es aber dann meistens nicht auf die zwei Kontrollpflanzen weniger ankommt, machen wir immer ein balanziertes Design. Wenn es aber sein soll, dann ist es natürlich hier einfacher umzusetzen.

```{r}
crd_obj <- design.crd(trt = c("ctrl", "A", "B", "C"), r = c(3, 5, 5, 5), serie = 3)

crd_book <- crd_obj %>% 
  pluck("book") %>% 
  set_names(c("plots", "r", "trt"))


ggdesplot(data = crd_book, flip = TRUE,
          form = trt ~ r + plots,              # fill color per variety
          text = trt, cex = 1, shorten = "no", # show variety names per plot
          main = "Field layout", show.key = F)     # formatting



```

```{r}
rcbd_obj <- design.rcbd(trt = c("ctrl", "A", "B", "C"), r = 5)

rcbd_obj %>% pluck("book")

rcbd_obj %>% pluck("sketch")
```

## Das R Paket `desplot`

[Plotting field maps with the desplot package](https://cran.r-project.org/web/packages/desplot/vignettes/desplot_examples.html)

## Das R Paket `agridat`

[agridat: Agricultural Datasets](https://cran.r-project.org/web/packages/agridat/index.html)

## Das R Paket `dae`

[dae: Functions Useful in the Design and ANOVA of Experiments](https://cran.r-project.org/web/packages/dae/index.html)
