```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, see)
```

# Fragebogenanalyse {#sec-modeling-survey}

*Letzte Änderung am `r format(fs::file_info("stat-modeling-survey.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *"It’s always further than it looks. It’s always taller than it looks. And it’s always harder than it looks." --- The Three Rules of Mountaineering [@story2019survey]*

------------------------------------------------------------------------

![](images/caution.png){fig-align="center" width="50%"}

**Dieses Kapitel ist eine Baustelle und wird es vermutlich auch über das Sommersemester 2024 bleiben. Aktuell weiß ich nämlich noch nicht, wo ich mit dem Kapitel hin will und wo es stehen sollte. Daher können Teile des Codes und des Textes kurzfristig keinen Sinn ergeben oder nicht funktional sein. Es ist geplant eine fertige Version im Juni 2024 vorliegen zu haben.**

------------------------------------------------------------------------

Der Fragebogen. Ein kompliziertes Stück in der Gesamtbetrachtung. Zum einen ist es die Auswertung der Fragebögen, die auf verschiedenen Methoden basiert. Viele der Methoden habe ich in den vorherigen Kapiteln vorgestellt. Zum anderen können wir hier auch das Design eines Fragebogens nicht unberücksichtigt lassen. Denn ein schlechter Fragebogen wird uns auch nur schlechte Erkenntnisse bringen. Dank der heutigen Technik ist ja ein Online-Query über [LifeSurvey](https://www.limesurvey.org/de) schnell erstellt. Der Fragebogen muss dann aber dennoch die Forschungsfragen beantworten können. Da fängt dann der komplizierte Teil an sich zu Überlegen, was mache ich jetzt eigentlich mit den ganzen Fragen und möglichen Antworten. Wir auch in anderen Kapiteln bin ich kein Experte für die Erstellung eines Fragebogens geschweige denn der Durchführung der Befragung in einem entsprechenden Labor. Dafür gibt es dann andere Experten, wie im folgenden Kasten für die Angehörigen der Hochschule Osnabrück. Sicherlich gibt es an deiner Einrichtung auch die entsprechenden Stellen. Hier soll es wie immer um einen ersten Überblick über verschiedene Themen und Herausforderungen der Fragebogenanalyse gehen.

::: callout-note
## Beratung für Agrarmarketing & Fragebogenerstellung

Ich bin kein Experte für die Untiefen der Fragebogenerstellung an der Hochschule Osnabrück. Hier empfehle ich auf jeden Fall nochmal eine Beratung im Team von [Prof. Dr. Ulrich Enneking](https://www.hs-osnabrueck.de/prof-dr-ulrich-enneking). Hier in diesem Kapitel kannst du dann die Einführung lesen.
:::

!["The reason to avoid pie charts" Quelle: wumo.com](images/eda/cake_chart.jpg){#fig-wumo-pie fig-align="center" width="100%"}

@watson1998primer mit [A primer in survey research](https://web.archive.org/web/20170809134002id_/http://www.appstate.edu/~steelekm/classes/psy3100/Documents/PrimerOnSurveys.pdf)

Anzahl an Teilnehmer:innen

::: callout-caution
## Ich mache das jetzt alles in Excel und PowerPoint...

Klar, kein Problem. Viele Sachen hier kannst du auch händisch mit teilweise bedeutend Mehrarbeit auch händisch in Excel oder PowerPoint lösen. Da spricht dann auch überhaupt nichts gegen. Wie immer mache ich das hier aber auch aus der Perspektive der Data Science und da machen wir es dann Effizient. Teilweise gehen auch die Methoden hier nicht in Excel. Aber für die Übersichtstabellen und das Zusammenfassen kannst du auch Excel nutzen. Wenn es nicht mehr sein soll, dann reicht es meistens auch.
:::

Auch hier endet die Einführung mit einem Kasten für weitere Tutorien rund um das Thema Fragebogenauswertung. Das Thema ist so umfangreich, dass ich es hier nicht in einem Kapitel wirklich tiefgründig erklären kann. Dafür musst du dann nochmal rechts und links weitergucken. Ich habe versucht die Tutorien wieder etwas zu sortieren und die mir am meisten gefallen haben, weiter oben angeordnet. Nicht alle R Pakete machen auch wirklich Sinn, wenn du nur einen einfachen Fragebogen deskriptiv darstellen willst. Im Zweifel gerne mir mal eine Mail schreiben, dann können wir über die Sachlage sprechen.

::: callout-tip
## Weitere Tutorien für die Fragebogenanalyse

Wir immer geht natürlich mehr als ich hier Vorstellen kann. Du findest im Folgenden Tutorien, die mich hier in dem Kapitel inspiriert haben.

-   [Survey analysis in R](https://r-survey.r-forge.r-project.org/survey/)
-   [Analyzing Complex Survey Data](https://www.bookdown.org/rwnahhas/RMPH/survey.html)
-   [Questionnaires and Surveys: Analyses with R](https://ladal.edu.au/surveys.html#1_Introduction)
-   [The Epidemiologist R Handbook \| Survey analysis](https://epirhandbook.com/en/survey-analysis.html)
-   [Analyzing Survey Data in R](https://rpubs.com/Onduma/surveydata)
-   Vignette des [R Pakets `{survey}`](https://cran.r-project.org/web/packages/survey/)
-   [Using R for Social Work Research \| Survey Research](https://bookdown.org/bean_jerry/using_r_for_social_work_research/survey-research.html)
-   [5 Ways to Effectively Visualize Survey Data Using R](https://towardsdatascience.com/5-ways-to-effectively-visualize-survey-data-using-r-89928bf08cb2)
-   [R Paket `{likert}`](https://rcompanion.org/handbook/E_03.html) auf Rcompanion von Salvatore Mangiafico
-   [Survey data chart designs](https://graphdr.github.io/data-stories/posts/2022-02-12-survey-data-chart-designs/index.html)
-   [On Likert scales in R](https://jakec007.github.io/2021-06-23-R-likert/)
:::

## Durchführung

### Wie fang ich's an? {.unnumbered}

@story2019survey [Survey Research](https://pubs.asahq.org/anesthesiology/article/130/2/192/20077/Survey-Research)

@gaur2020reporting [Reporting Survey Based Studies – a Primer for Authors](https://pdfs.semanticscholar.org/4404/87dddb44e19046d2481df661d0352176a002.pdf)

@synodinos2003art

@bruhlmann2020quality mit [The quality of data collected online: An investigation of careless responding in a crowdsourced sample](https://www.sciencedirect.com/science/article/pii/S2590260120300096)

### Wie lang soll es sein? {.unnumbered}

@rolstad2011response [Response Burden and Questionnaire Length: Is Shorter Better? A Review and Meta-analysis](https://www.sciencedirect.com/science/article/pii/S1098301511015245)

@roszkowski1990believe mit [Believe it or not! Longer questionnaires have lower response rates](https://www.researchgate.net/profile/Michael-Roszkowski/publication/225240332_Believe_It_or_Not_Longer_Questionnaires_Have_Lower_Response_Rates/links/0c96051d1ffb9a443c000000/Believe-It-or-Not-Longer-Questionnaires-Have-Lower-Response-Rates.pdf)

### Wie soll ich's bauen? {.unnumbered}

[The 4,5, and 7 Point Likert Scale](https://www.formpl.us/blog/point-likert-scale)

[Survey Response Scales: How to Choose the Right One for your Questionnaire](https://cxl.com/blog/survey-response-scales/)

@friedman1999rating mit [Ratung the rating scales](https://rangevoting.org/RateRatingScales.html)

### Wieviele antworten mir? {.unnumbered}

@edwards2009methods [Methods to increase response to postal and electronic questionnaires](https://www.cochranelibrary.com/cdsr/doi/10.1002/14651858.MR000008.pub4/abstract)

@edwards2002increasing [Increasing response rates to postal questionnaires: systematic review](https://www.bmj.com/content/324/7347/1183.full.pdf+html)

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, gtsummary, janitor, FactoMineR,
               factoextra, corrplot, wesanderson, naniar,
               scales, conflicted)
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

Der Druck im Markt auf Bauernhöfe ist groß. Neben den bekannten Erlebnishöfen mit Spezialisierungen auf Obst und Gemüse muss sich in den Weiten Brandenburgs, Niedersachsens und Mecklenburg-Vorpommern jeder Hof was Neues einfallen lassen um Gäste zu sich zu locken. Heutzutage reicht es einfach nicht mehr Rentnern auf Elektrofahrrädern überdimensionierte Sahnetorten anzubieten. Die Enkel wollen auch was sehen. Inspiriert von der Serie [Tiger King: Großkatzen und ihre Raubtiere](https://en.wikipedia.org/wiki/Tiger_King) gibt es nun immer mehr Höfe, dich sich den einen oder anderen Tiger oder Großkatze in den Hinterhof sperren. Aufgeschreckt durch den Zwischenfall mit der [Löwin von Kleinmachnow - oder wie eine Wildsau durchs Dorf getrieben wurde](https://www.rbb24.de/panorama/beitrag/2023/07/brandenburg-kleinmachnow-suche-loewin-raubkatze-wildschwein-polizei-video.html), gab der Verband "Erlebnishöfe mit Niveau e.V." eine Umfrage mit dem Titel *Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen* unter den Mitgliedern in Auftrag. Gleichzeitig sollte auch die Zufriedenheit der Verbandsarbeit abgefragt werden und wie die betriebswirtschaftliche Struktur der 843 Betriebe um die Erlebnishöfe im Verband eigentlich so aussieht.

```{r}
tiger_tbl <- read_excel("data/survey-serengeti-tiger-king.xlsx", na = "NA",
                        sheet = "results-survey-lime") 
```

In der @tbl-survey-tiger sehen wir einen Auszug aus unseren Ergebnis der Umfrage des Verbandes. Wir haben insgesamt `r ncol(tiger_tbl)` Fragen gestellt und eine Rücklauf von 173 Fragebögen von den Erlebnishöfen erhalten. Das ist eigentlich gar nicht so schlecht, damit haben wir hier eine Rücklaufquote von gut $20.5\%$ der Fragebögen. Wir werden uns nun an den `r ncol(tiger_tbl)` beispielhaften Fragen verschiedene Herausforderungen anschauen.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-tiger
#| tbl-cap: "Auszug von fünf Fragen aus dem Fragebogen zur Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen. Insgesamt haben 173 Erlebnishöfe den Fragebogen zurückgesendet."


tiger_raw_tbl <- tiger_tbl |> 
  mutate_all(as.character) |> 
  select("geschlecht",	"alter",	"haben_Sie_tiger",	"f1Soziodemografisch",	"f2Soziodemografisch")
  

rbind(head(tiger_raw_tbl, 4),
      rep("...", times = ncol(tiger_raw_tbl)),
      tail(tiger_raw_tbl, 4)) |> 
  kable(align = "c", "pipe")

```

Wir werden jetzt den Datensatz einmal versuchen auszuwerten. Dabei gehen wir schrittweise verschiedene Analysen durch und schauen, ob wir mit den Fragebogendaten so arbeiten können. Sehr häufig müssen wir nämlich erstmal die Daten so lange bearbeiten, bis die Daten sinnvoll ausgewertet werden können.

Leider sind die Fragen in den Fragebögen sehr lang. Das macht es schwierig die Fragen sauber als Spaltennamen abzubilden. Wir erhalten zum Beispiel aus dem Online-Query Lime verkürzte Spaltennamen, die sehr wenig aussagen, aber dennoch sehr lang sind. Deshalb empfehle ich immer noch eine zusätzliche Tabelle mit Fragen-ID `ques_id`, der Lime-ID `lime_id` sowie der eigentlichen Frage `question` zu erstellen. Ich mache das meistens dann in einem zusätzlichen Tab in der Exceldatei wie in der folgenden Abbildung gezeigt. In der Exceldatei kannst du dann auch in neuen Tabs die gereinigten oder bearbeiteten Versionen des ursprünglichen Fragebogens ablegen.

![Nicht alle Änderungen müssen in R durchgeführt werden. Es empfiehlt sich aber die Tabs in Excel zu nutzen um sich neue Versionen des ursprüngliche Lime-Fragebogens anzulegen. So hast du immer das Orginal vorliegen und kannst dann schrittweise nachvollziehen, was du geändert hast.](images/survey-excel-tabs.png){#fig-survey-excel fig-align="center" width="100%"}

Ich lade dann einmal den Tab mit den Beschreibungen der Fragen.

```{r}
short_question_tbl <- read_excel("data/survey-serengeti-tiger-king.xlsx", sheet = "question-short") 
```

In der @tbl-survey-tiger-short siehst du einmal die Fragen in der Langform und die entsprechenden ID's für die Kurzform hier in R und dann eben auch in Lime. Ich nutze die Kurzform `ques_id` für die Beschriftungen von Abbildungen, da es sonst sehr schnell sehr unübersichtlich wird. Finale Abbildungen können dann am Ende immer noch entsprechend beschriftet werden. Die `lime_id` brauche ich um später noch Fragen entfernen zu können und als Verbindung zu den ursprünglichen Daten.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-tiger-short
#| tbl-cap: "Tabelle der abgekützen Fragen-ID, der ursprüngichen Lime-ID sowie dem vollständigen Fragetext. Auch hier habe ich den Fragetext gekürzt, später kann dann noch der vollständige Text ergänzt werden."

short_question_tbl |> 
  kable(align = c("cll"), "pipe")
```

## Daten preprocessing

Wenn wir uns mit Fragebögen beschäftigen, dann werten wir meisten *nicht* alle Fragen aus. Das macht auch meistens keinen Sinn. Denn wir stellen zwar recht viele Fragen, aber am Ende müssen wir auch schauen, ob alle Fragen sinnvoll beantwortet wurden oder aber ob wir sehr viele Nichtantworten haben. Davon hängt dann auch die weitere Analyse ab. Wir können uns auch überlegen einzelne Fragen zusammenzufassen, da wir feststellen, dass wir dann am Ende doch nicht so eine feingliedrige Aufteilung wollen.

Im Weiteren müssen wir dann auch unsere Antworten in Zahlen umwandeln. Wir können ja nur mit Zahlen rechnen. Nur so können wir mittlere Noten ausgeben. Die Umwandlung können wir entweder global wie folgt machen, oder aber wir definieren für jede Antwort die Reihenfolge der Antwortmöglichkeiten. Die automatisierte Zuordnung bewirkt dann, dass wir nicht die Antwortmöglichkeiten in der richtigen, logischen Reihenfolge haben, sondern in der alphanumerischen Ordnung. Für einen ersten Überblick über die Ergebnisse des Fragebogens ist das Vorgehen okay. Später werden wir dann natürlich noch die Fragen richtig formatieren. Aber erstmal müssen wir wissen welche Fragen wir überhaupt auswerten wollen.

```{r}
tiger_fct_tbl <- tiger_tbl |>
  mutate(across(everything(), as_factor))
```

Wenn du gleich die richtige Ordnung ahben willst, dann ist es ein wenig mehr Arbeit. Hier können wir dann über die Funktion `ordered()` die richtige Ordnung der Antwortmöglichkeiten über die Option `levels` erreichen. Wir haben hier verschiedene Antwortmöglichkeiten in den verschiedenen Fragen. Daher jetzt einmal die Ordnung der Antworten in logischer Reihenfolge. Mir reicht immer der schnelle Überblick, aber das ist dann ja auch Geschmackssache.

```{r}
alter_ord <- c("18-29 Jahre", "30-39 Jahre", "40-49 Jahre", "50-59 Jahre", "Über 60 Jahre")
präsent_ord <- c("sehr präsent", "eher präsent", "mäßig präsent", "weniger präsent", "gar nicht präsent")
leistung_ord <- c("Regelmäßig", "Einmal", "Noch nie", "Leistung nicht bekannt")
zustimmung_ord <- c("trifft voll zu", "trifft zu", "weder noch", "trifft nicht zu", "trifft gar nicht zu")
zufrieden_ord <- c("sehr zufrieden", "eher zufrieden", "weder noch", "eher unzufrieden", "sehr unzufrieden")
aktiv_ord <- c("sehr aktiv", "eher aktiv", "weder noch", "eher nicht aktiv", "gar nicht aktiv")
```

Du siehst, dass ist eine Menge an Arbeit und zu tippen. Deshalb kann ich dir empfehlen, dass nur bei den Fragen zu machen, die du dann am Ende des Daten Preprocessing auch wirklich nutzen willst. Besonders bei Fragebögen mir sehr vielen Fragen wird es sehr schnell sehr lang. Auf der anderen Seite macht man es dann auch nur einmal. Am Ende wandeln wir dann noch alle Fragen, die wir nicht händisch in einen geordneten Faktor umgewandelt haben, in einen Faktor mit der Funktion `mutate_if()` um.

```{r}
tiger_ord_tbl <- tiger_tbl |> 
  mutate(alter = ordered(alter, levels = alter_ord),
         f1Verbandsarbeit = ordered(f1Verbandsarbeit, levels = präsent_ord),
         f2Verbandsarbeit = ordered(f2Verbandsarbeit, levels = leistung_ord),
         f3Verbandsarbeit	= ordered(f3Verbandsarbeit, levels = zustimmung_ord), 
         f4Verbandsarbeit	= ordered(f4Verbandsarbeit, levels = zustimmung_ord), 
         f5Verbandsarbeit	= ordered(f5Verbandsarbeit, levels = zustimmung_ord),
         f1Imagearbeit = ordered(f1Imagearbeit, levels = zufrieden_ord), 
         f2Imagearbeit = ordered(f2Imagearbeit, levels = aktiv_ord),
         f3Imagearbeit = ordered(f3Imagearbeit, levels = aktiv_ord),
         f4Imagearbeit = ordered(f4Imagearbeit, levels = leistung_ord)) |> 
  mutate_if(is.character, as.factor)

```

Mit unserem geordneten Objekt `tiger_ord_tbl` können wir uns jetzt einen ersten Überblick über die Antworten der Fragen geben lassen. Dann entscheiden wir, ob wir Fragen zusammenfassen oder gar entfernen wollen. Eventuell müssen wir auch Antwortmöglichkeiten zusammenfassen, wenn einige Antworten einfach nicht ausgewählt wurden. Aber das schauen wir uns jetzt einmal in einer Übersicht an.

::: callout-caution
## Achtung, `as.factor()` vs. `as_factor()` macht einen Unterschied!

Wenn du deine Wörter `<chr>` in Zahlen umwandeln willst, dann musst du ja den Umweg über eine Faktorumwandlung gehen. Hier ist es jetzt mal sehr wichtig, dass du die Funktion `as.factor()` nutzt. Eigentlich nutze ich immer die Funktion `as_factor()` aber diese Funktion hat ein Feature, was uns hier bei den Fragebögen auf die Füße fällt. Schauen wir uns die Sachlage einmal in einem Beispiel an. Wir haben folgende drei Antworten und wollen diese einmal in einen Faktor umwandeln.

```{r}
answer_vec <- c("weder_noch",  "eher_zufrieden", "sehr_zufrieden")
```

Wenn wir jetzt die Funktion `as.factor()` nutzen, dann werden unsere Level alphanumerisch sortiert. Das hat den Vorteil, dass jede Frage immer die gleichen Antwortsortierungen erhält. Dadurch ist dann auch gewährleistet, dass in jeder Frage die Antwortmöglichkeiten dann nach der Umwandlung in eine Zahl mit `as.numeric()` auch wirklich das gleiche Wort bedeutet.

```{r}
answer_vec |> 
  as.factor() 
```

Die Sortierung in `as_factor()` wird nach dem Auftreten des Wortes in dem Vektor gemacht. Das heißt, je nach Frage, hat dann eine Frage eine andere Sortierung der Antwortmöglichkeiten. Das ist unglaublich ungünstig, da wir dann ja nach einer Umwandlung der Faktorenlevel in eine Zahl mit `as.numeric()` nicht mehr die gleichen Antwortmöglichkeiten hinter jeder Zahl haben!

```{r}
answer_vec |> 
  as_factor() 
```
:::

### Univariater Überblick

[R Paket `{gtsummary}`](https://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)

```{r}
#| echo: true
#| eval: false
#| message: false
#| warning: false
tiger_tbl |> 
  set_names(short_question_tbl$question) |> 
  tbl_summary()
```

Ich habe dir jetzt die Ausgabe der Funktion `tbl_summary()` einmal in dem folgenden Kasten eingeklappt. Sonst sehen wir vor lauter Tabelle nichts mehr und so kannst du hier übersichtlich lesen.

Nach was wollen wir nun als erstes einmal Ausschau halten?

Fehlende Werte

:   Gibt es eine Frage, bei der fast keiner geantwortet hat?

Gleiche Einträge

:   Gibt es Fragen, bei denen alle das Gleiche geantwortet haben?

::: {.callout-note collapse="true"}
## Univariate Ausgabe der Funktion `tbl_summary()`

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-tiger-summary
#| tbl-cap: "Auszug von fünf Fragen aus dem Fragebogen zur Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen. Insgesamt haben 173 Erlebnishöfe den Fragebogen zurückgesendet."
tiger_ord_tbl |> 
  set_names(short_question_tbl$question) |>
  tbl_summary()
```
:::

::: {.callout-note collapse="true"}
## Vergleichende Ausgabe der Funktion `tbl_summary()` nach Erwerb

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-tiger-summary_by
#| tbl-cap: "Auszug von fünf Fragen aus dem Fragebogen zur Nutzung von Großkatzen zur Steigerung der Attraktivität von Erlebnishöfen. Insgesamt haben 173 Erlebnishöfe den Fragebogen zurückgesendet."
tiger_ord_tbl |> 
  set_names(short_question_tbl$question) |>
  tbl_summary(by = "Halten Sie aktuell Tiger oder andere Großkatzen auf Ihrem Erlebnishof?") |> 
  add_p()
```
:::

### Zusammenfassen

#### ...von einzelnen Fragen {.unnumbered}

```{r}
feed_tbl <- tiger_fct_tbl |>
  select(matches("Fuetterung")) |> 
  mutate(across(matches("Fuetterung"), \(x) as.numeric(x)-1)) |> 
  mutate(Fuetterung = rowSums(across(matches("Fuetterung"))))
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-feed-1
#| tbl-cap: "."

feed_tbl |> 
  select(Fuetterung, everything()) |> 
  head(n = 7) |> 
  kable(align = "c", "pipe")
```

```{r}
feed_perc_obj <- feed_tbl |> 
  tabyl(Fuetterung) |> 
  round(2)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-feed-2
#| tbl-cap: "."

feed_perc_obj |> 
  kable(align = "c", "pipe")
```

Mit der R Funktion [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) können wir uns jetzt neue Werte bauen.

#### ... von Antwortenmöglichkeiten {.unnumbered}

### Flowchart oder Flussdiagramm

[Building a flowchart](https://cran.r-project.org/web/packages/Gmisc/vignettes/Grid-based_flowcharts.html)

[Data-driven flowcharts in R using DiagrammeR](https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/)

[Introducing `{ggflowchart}`](https://nrennie.rbind.io/blog/introducing-ggflowchart/)

::: callout-caution
## Argh, warum alles in R?

Ist ein guter Punkt. Du musst natürlich deine Flowchart nicht in R bauen. Wahrscheinlich geht es in PowerPoint sogar schneller und einfacher. Da ich hier aber alles in R mache und dir nicht aufschreiben kann, wie es dann in PowerPoint geht, zeige ich hier auch die R Variante. Suche dir einfach aus was für dich besser passt. Ich löse gerne meine Probleme in R.
:::

### Repräsentativer Teilnehmer

```{r}
most_common_participant_tbl <- tiger_tbl |> 
  select(geschlecht, alter, f1Soziodemografisch, f3Soziodemografisch) |> 
  mutate(string = str_c(geschlecht, alter, f1Soziodemografisch, f3Soziodemografisch, sep = " ")) |> 
  na.omit() |> 
  reframe(janitor::tabyl(string)) |> 
  arrange(desc(n)) |> 
  mutate(percent = percent(percent))
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-survey-most_common-1
#| tbl-cap: "."

most_common_participant_tbl |> 
  head() |> 
  kable(align = c("lcr"), "pipe")
```

## Korrelation der Fragen

[How does Polychoric Correlation Work? (aka Ordinal-to-Ordinal correlation)](https://www.r-bloggers.com/2021/02/how-does-polychoric-correlation-work-aka-ordinal-to-ordinal-correlation/)

[An Alternative to the Correlation Coefficient That Works For Numeric and Categorical Variables](https://rviews.rstudio.com/2021/04/15/an-alternative-to-the-correlation-coefficient-that-works-for-numeric-and-categorical-variables/)

```{r}
tiger_clean_num_tbl <- tiger_fct_tbl |> 
  mutate_all(as.numeric) |>  
  set_names(short_question_tbl$ques_id)
```

`use = "pairwise.complete.obs"`

```{r}
cor_mat <- tiger_clean_num_tbl |> 
  select(-matches("Soziodemografisch")) |> 
  cor(use = "pairwise.complete.obs")
```

```{r}
#| warning: false
#| message: false
#| label: fig-survey-corr-1
#| fig-align: center
#| fig-height: 9
#| fig-width: 9
#| fig-cap: "."
corrplot(cor_mat, method = 'number', 
         col = wes_palette("Zissou1", 8, type = "continuous"))
```

```{r}
#| warning: false
#| message: false
#| label: fig-survey-miss-1
#| fig-align: center
#| fig-height: 5
#| fig-width: 6
#| fig-cap: "."

tiger_clean_num_tbl |> 
  gg_miss_upset(nsets = 15)
```

## Hauptkomponentenanalyse

```{r}
tiger_num_tbl <- tiger_fct_tbl |> 
  mutate_all(as.numeric) |> 
  set_names(short_question_tbl$ques_id)
```

```{r}
#| warning: false
#| message: false
pca_tiger <- PCA(tiger_num_tbl, scale.unit = TRUE, 
                 ncp = 5, graph = FALSE)
```

```{r}
#| warning: false
#| message: false
#| label: fig-survey-pca-1
#| fig-align: center
#| fig-height: 7
#| fig-width: 7
#| fig-cap: "."
fviz_pca_var(pca_tiger, col.var = "cos2",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), 
             repel = TRUE)
```

```{r}
#| warning: false
#| message: false
#| label: fig-survey-pca-2
#| fig-align: center
#| fig-height: 7
#| fig-width: 7
#| fig-cap: "."
fviz_pca_ind(pca_tiger,
             col.ind = "cos2", 
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE) +
  scale_x_continuous(expand = expansion(add = c(0.5, 1))) +
  scale_y_continuous(expand = expansion(add = c(0.5, 0.5))) 
```

```{r}
ind_tiger <- get_pca_ind(pca_tiger)
grp_tiger_ind <- kmeans(ind_tiger$coord, centers = 2, nstart = 25) %>% 
  pluck("cluster") %>% 
  as_factor()
```

```{r}
#| warning: false
#| message: false
#| label: fig-survey-pca-3
#| fig-align: center
#| fig-height: 7
#| fig-width: 7
#| fig-cap: "."
fviz_pca_ind(pca_tiger,
             geom.ind = "point", 
             col.ind = grp_tiger_ind, 
             palette = c("#0072B2", "#CC79A7"),
             addEllipses = TRUE, 
             legend.title = "Groups", mean.point = FALSE) +
  geom_label(aes(label = tiger_num_tbl$s1))
```

## Lime Survey

[LifeSurvey](https://www.limesurvey.org/de)

## Referenzen {.unnumbered}
