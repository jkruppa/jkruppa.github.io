```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, tidyplots,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
## data
fac1_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  select(animal, jump_length) |> 
  mutate(animal = as_factor(animal))
```

# Der U-Test {#sec-utest}

*Letzte Änderung am `r format(fs::file_info("stat-tests-utest.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

> *Statisticians, like artists, have the bad habit of falling in love with their models." --- George Box*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Baustelle (seit 06.2025)

Dieses Kapitel wird überarbeitet. Ziel ist es die Nichtparametrik zum Start des Wintersemesters 2025/26 überarbeitet zu haben. Da ich hier direkt im Kapitel arbeite, kann es sein, dass mal die ein oder andere Funktion nicht funktioniert oder aber Teile im Nichts enden. Wird dann repariert.
:::

Der U-Test ist auch unter den Namen Wilcoxon-Mann-Whitney-Test, Mann-Whitney-U-Test oder Wilcoxon-Rangsummentest bekannt.

Wann nutzen wir den Wilcoxon-Mann-Whitney-Test? Wir nutzen den Wilcoxon-Mann-Whitney-Test wenn wir zwei Verteilungen miteinander vergleichen wollen. Das ist jetzt sehr abstrakt. Konrekt, wenn wir zwei Gruppen haben und ein nicht normalverteiltes $y$. Haben wir ein normalverteiltes $y$ rechnen wir meist einen t-Test. Wir könnten aber auch einen Wilcoxon-Mann-Whitney-Test rechnen.

Was ist jetzt der Unterschied zwischen einem Wilcoxon-Mann-Whitney-Test und einem t-Test? Der t-Test vergleicht die Mittelwerte zweier Normalverteilungen, also zum Beispiel die Verteilung der Sprungweiten der Hundeflöhe gegen die Verteilung der Sprungweiten der Katzenflöhe. Dazu nutzt der t-Test die Mittelwerte und die Standardabweichung. Beides sind Parameter einer Verteilung und somit ist der t-Test ein parametrischer Test.

::: {layout="[15,85]" layout-valign="top"}
![](images/personal_opinion.png){fig-align="center" width="100%"}

> *"foo." --- Jochen Kruppa-Scheetz, meiner bescheidener Meinung nach.*
:::

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-ggplot-utest-intro
#| fig-align: center
#| fig-height: 3.5
#| fig-width: 4
#| fig-cap: "foo *[Zum Vergrößern anklicken]*"

tidyplot(data = fac1_tbl, 
         x = animal, y = jump_length, color = animal) |> 
  add_data_points() |>
  add_mean_bar(alpha = 0.4) |> 
  add_sd_errorbar(width = 0.2) |>
  add_test_pvalue(method = "wilcox_test", hide_info = FALSE) |>
  remove_legend() |> 
  adjust_font(fontsize = 10) |>
  adjust_x_axis_title("Flohart") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  rename_x_axis_labels(new_names = c("dog" = "Hund", "cat" = "Katze")) |> 
  adjust_size(width = NA, height = NA) 
```

## Probleme

### Geringe Fallzahl

### Was ist der Effekt?

Der Wilcoxon-Mann-Whitney-Test ist die *nicht-parametrische* Variante in dem wir die Zahlen in Ränge umwandeln, also sortieren, und *mit den Rängen* der Zahlen rechnen. Die deskriptiven Maßzahlen wären dann Median, Quantile und Quartile. Das heißt wir vergleichen mit dem Wilcoxon-Mann-Whitney-Test die Mediane. Wir wollen also wissen, ob sich die Mediane zwischen den Sprungweiten von Hunde- und Katzenflöhen unterscheiden.

## Genutzte R Pakete

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
pacman::p_load(tidyverse, magrittr, broom, tidyplots, rstatix,
               readxl, coin, ggpubr, 
               conflicted)
conflicts_prefer(rstatix::wilcox_test)
```

An der Seite des Kapitels findest du den Link *Quellcode anzeigen*, über den du Zugang zum gesamten R-Code dieses Kapitels erhältst.

## Daten

#### Unabhängige Messungen {.unnumbered .unlisted}

```{r}
#| message: false

fac1_tbl <- read_excel("data/flea_dog_cat.xlsx") |> 
  select(animal, jump_length) |> 
  mutate(animal = as_factor(animal))
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-1fac-table
#| tbl-cap: "Tabelle der Sprungweiten in [cm] als Messwert $y$ von Hunde-, Katzen- und Fuchsflöhen. Der Datensatz ist einfaktoriell, da wir nur einen Faktor vorliegen haben."

fac1_raw_tbl <- read_xlsx("data/flea_dog_cat.xlsx") |>
  select(animal, jump_length) 

rbind(head(fac1_raw_tbl, n = 3),
      rep("...", times = ncol(fac1_raw_tbl)),
      tail(fac1_raw_tbl, n = 3)) |> 
  tt(width = 2/3, align = "c", theme = "striped")
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-ggplot-utest-jump
#| fig-align: center
#| fig-height: 4
#| fig-width: 8
#| fig-cap: "Darstellung der Sprungweiten in [cm] gruppiert nach Hunde- und Katzenflöhen. Die graue Raute stellt den entsprechnenden Mittelwert der Sprungweiten dar. **(A)** Einfaktorieller Boxplot. **(B)** Violinplot mit Dotplot. *[Zum Vergrößern anklicken]*"

p1 <- ggplot(data = fac1_tbl, 
       aes(x = animal, y = jump_length, fill = animal)) +
  theme_minimal() +
  geom_boxplot() +
  stat_summary(fun.y = mean, geom = "point", 
               shape=23, size = 3, fill = "gray50") +
  labs(x = "Flohart", y = "Sprungweite in [cm]") +
  theme(legend.position = "none") + 
  scale_fill_okabeito() 


p2 <- ggplot(data = fac1_tbl, 
       aes(x = animal, y = jump_length, fill = animal)) +
  theme_minimal() +
  geom_violindot(dots_size = 7, trim = FALSE) +
  stat_summary(fun.y = mean, geom = "point", 
               shape=23, size = 3, fill = "gray50") +
  labs(x = "Flohart", y = "Sprungweite in [cm]") +
  theme(legend.position = "none") + 
  scale_fill_okabeito() 

p1 + p2 +
  plot_layout(ncol = 2) +
  plot_annotation(tag_levels = 'A', tag_prefix = '(', tag_suffix = ')') &
  theme(plot.tag = element_text(size = 16, face = "bold"))
```

#### Abhängige Messungen {.unnumbered .unlisted}

```{r}
#| message: false

paired_tbl <- read_excel("data/flea_dog_cat_repeated.xlsx") 
```

```{r}
#| message: false
#| echo: false
#| tbl-cap: "Tabelle  der Sprunglängen [cm] von fünf Hundeflöhen zu zwei Zeitpunkten. Einmal wurde die Sprungweite mit den hungrigen Flöhen und einmal mit den gleichen satten Flöhen bestimmt."
#| label: tbl-data-ttest-paired

paired_tbl |> 
  tt(width = 2/3, align = "c", theme = "striped")
```

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 6
#| fig-cap: "Dotplot der Sprungweiten [cm] für Hundeflöhe in zwei verschiedenen Ernährungszuständen gemessen an zwei Zeitpunkten. Die Linien verbinden die Messung an dem gleichen Floh."
#| label: fig-example-paired

paired_tbl |> 
  pivot_longer(cols = hungrig:satt,
               values_to = "jump_length",
               names_to = "trt") |> 
ggplot(aes(trt, jump_length, fill = trt)) +
  theme_minimal() +
  geom_line(aes(group = id), color = "gray50") +
  geom_point(shape = 21, size = 4) +
  scale_fill_okabeito() +
  theme(legend.position = "none") +
  labs(x = "Ernährungszustand",
       y = "Sprungweite in [cm]")
```

## Hypothesen

Der Wilcoxon-Mann-Whitney-Test betrachtet die Mediane und Ränge um einen Unterschied nachzuweisen. Daher haben wir die Nullhypothese als Gleichheitshypothese. In unserem Beispiel lautet die Nullhypothese, dass die Mediane der beiden Levels des Faktors `animal` gleich sind. Wir vergleichen im Wilcoxon-Mann-Whitney-Test nur zwei Gruppen.

$$
H_0: \; \widetilde{y}_{cat} = \widetilde{y}_{dog}
$$

Die Alternative lautet, dass sich die beiden Gruppen im Median unterscheiden. Wir können uns über die Boxplots oder aber die berechneten Mediane dann den Unterschied bewerten.

$$
H_A: \; \widetilde{y}_{cat} \ne \widetilde{y}_{dog}
$$

Wir schauen uns jetzt einmal den Wilcoxon-Mann-Whitney-Test theoretisch an bevor wir uns mit der Anwendung des Wilcoxon-Mann-Whitney-Test in R beschäftigen.

## Theoretisch

Der Wilcoxon-Mann-Whitney-Test berechnet die U Teststatistik auf den Rängend der Daten. Es gibt genau soviele Ränge wie es Beobachtungen im Datensatz gibt. Wir haben $n = 14$ Beobachtungen in unseren Daten zu der Sprungweite in \[cm\] von den Hunde- und Katzenflöhen. Somit müssen wir auch vierzehn Ränge vergeben.

Die @tbl-utest-rank zeigt das Vorgehen der Rangvergabe. Wir sortieren als erstes das $y$ aufsteigend. In unserem Fall ist das $y$ die Sprunglänge. Dann vergeben wir die Ränge jweiles zugehörig zu der Position der Sprunglänge und der Tierart. Abschließend addieren wir die Rangsummmen für `cat` und `dog` zu den Rangsummen $R_{cat}$ und $R_{dog}$.

| Rank | animal | jump_length  |  Ränge "cat"   |  Ränge "dog"   |
|:----:|:------:|:------------:|:--------------:|:--------------:|
|  1   |  cat   |     2.2      |       1        |                |
|  2   |  cat   |     3.2      |       2        |                |
|  3   |  cat   |     4.1      |       3        |                |
|  4   |  cat   |     4.3      |       4        |                |
|  5   |  cat   |     5.4      |       5        |                |
|  6   |  dog   |     5.6      |                |       6        |
|  7   |  dog   |     5.7      |                |       7        |
|  8   |  cat   |     6.1      |       8        |                |
|  9   |  dog   |     7.6      |                |       9        |
|  10  |  cat   |     7.9      |       10       |                |
|  11  |  dog   |     8.2      |                |       11       |
|  12  |  dog   |     8.9      |                |       12       |
|  13  |  dog   |     9.1      |                |       13       |
|  14  |  dog   |     11.8     |                |       14       |
|      |        |  Rangsummen  | $R_{cat} = 33$ | $R_{dog} = 72$ |
|      |        | Gruppengröße |       7        |       7        |

: Datentablle absteigend sortiert nach der Sprunglänge in \[cm\]. Die Level `cat` und `dog` haben jeweils die entsprechenden Ränge zugeordnet bekommen und die Rangsummen wurden berechnet {#tbl-utest-rank}

Die Formel für die U Statistik sieht ein wenig wild aus, aber wir können eigentlich relativ einfach alle Zahlen einsetzen. Dann musst du dich etwas konzentrieren bei der Rechnung.

$$
U_{D} = n_1n_2 + \cfrac{n_1(n_1+1)}{2}-R_1
$$

mit

-   $R_1$ der *größeren* der beiden Rangsummen,
-   $n_1$ die Fallzahl der *größeren* der beiden Rangsummen
-   $n_2$ die Fallzahl der *kleineren* der beiden Rangsummen

Wir setzen nun die Zahlen ein. Da wir ein balanciertes Design vorliegen haben sind die Fallzahlen $n_1 = n_2 = 7$ gleich. Wir müssen nur schauen, dass wir mit $R_1$ die passende Rangsumme wählen. In unserem Fall ist $R_1 = R_{dog} = 72$.

$$
U_{D} = 7 \cdot 7 + \cfrac{7(7+1)}{2}-72 = 5
$$

Der kritische Wert für die U Statistik ist $U_{\alpha = 5\%} = 8$ für $n_1 = 7$ und $n_2 = 7$. Bei der Entscheidung mit der berechneten Teststatistik $U_{D}$ gilt, wenn $U_{D} \leq U_{\alpha = 5\%}$ wird die Nullhypothese (H$_0$) abgelehnt. Da in unserem Fall das $U_{D}$ mit $5$ kleiner ist als das $U_{\alpha = 5\%} = 8$ können wir die Nullhypothese ablehnen. Wir haben ein signifkianten Unterschied in den Medianen zwischen den beiden Tierarten im Bezug auf die Sprungweite in \[cm\] von Flöhen.

Bei grosser Stichprobe, wenn $n_1 + n_2 > 30$ ist, können wir die U Statistik auch standariseren und damit in den z-Wert transformieren.

$$
z_{D} = \cfrac{U_{D} - \bar{U}}{s_U} = \cfrac{U_{D} - \cfrac{n_1 \cdot n_2}{2}}{\sqrt{\cfrac{n_1 \cdot n_2 (n_1 + n_2 +1)}{12}}}
$$

mit

-   $\bar{U}$ dem Mittelwert der U-Verteilung ohne Unterschied zwischen den Gruppen
-   $s_U$ Standardfehler des U-Wertes
-   $n_1$ Stichprobengrösse der Gruppe mit der grösseren Rangsumme
-   $n_2$ Stichprobengrösse der Gruppe mit der kleineren Rangsumme

Wir setzen dafür ebenfalls die berechnete U Statistik ein und müssen dann wieder konzentriert rechnen.

$$
z_{D} = \cfrac{5 - \cfrac{7 \cdot 7}{2}}{\sqrt{\cfrac{7 \cdot 7 (7 + 7 +1)}{12}}} = \cfrac{-19.5}{7.83} = |-2.46|
$$

Der kritische Wert für die z-Statistik ist $z_{\alpha = 5\%} = 1.96$. Bei der Entscheidung mit der berechneten Teststatistik $z_{D}$ gilt, wenn $z_{D} \geq z_{\alpha = 5\%}$ wird die Nullhypothese (H$_0$) abgelehnt. Wir haben eine berechnete z Statistik von $z_{D} = 2.46$. Damit ist $z_{D}$ größer als $z_{\alpha = 5\%} = 1.96$ und wir können die Nullhypothese ablehnen. Wir haben einen signifkanten Unterschied zwischen den Medianen der beiden Floharten im Bezug auf die Sprunglänge in \[cm\].

::: panel-tabset
## `{coin}`

`wilcox_test()`

## `{rstatix}`

[Wilcoxon Test in R](https://www.datanovia.com/en/lessons/wilcoxon-test-in-r/)

`wilcox_test()`

## `{nparcomp}`

`npar.t.test()`
:::

## Praktisch in R

Die Nutzung des Wilcoxon-Mann-Whitney-Test in R ist relativ einfach mit der Funktion `wilxoc.test()`. Wir müssen zum einen entscheiden, ob Bindungen in den Daten vorliegen. Sollte Bindungen vorliegen, warnt uns R und wir nutzen dann die Funktion `wilcox_test()` aus dem R Paket `{coin}`.

### Ohne Bindungen

Ohne Bindungen können wir die Funktion `wilxoc.test()` nutzen. Die Funktion benötigt das Modell in `formula` Syntax in der Form `jump_length ~ animal`. Wir geben noch an, dass wir die 95% Konfidenzintervalle wiedergegeben haben wollen.

```{r}
wilcox.test(jump_length ~ animal, data = fac1_tbl, 
            conf.int = TRUE)
```

Wir sehen das der Wilcoxon-Mann-Whitney-Test ein signifikantes Ergebnis liefert, da der $p$-Wert mit 0.011 kleiner ist als das Signifikanzniveau $\alpha$ von 5%. Die Nullhypothese kann daher abgelehnt werden. Wir haben einen medianen Unterschied in den Sprungweiten von 3.5 cm \[1.0; 5.9\] zwischen Hunde- und Katzenflöhen.

### Mit Bindungen

Mit Bindungen können wir die Funktion `wilxoc_test()` aus dem R Paket `{coin}` nutzen. Wir nutzen hier als $y$ die Boniturnoten `grade` der Hunde und Katzen. Die Funktion benötigt das Modell in `formula` Syntax in der Form `grade ~ animal`. Wir geben noch an, dass wir die 95% Konfidenzintervalle wiedergegeben haben wollen. Wenn du die Funktion `wilcox.test()` nutzen würdest, würde dir R eine Warnung ausgeben: `Warning: cannot compute exact p-value with ties`. Du wüsstest dann, dass du die Funktion wechseln musst.

```{r}
coin::wilcox_test(jump_length ~ animal, data = fac1_tbl, 
            conf.int = TRUE) 
```

Wir sehen das der Wilcoxon-Mann-Whitney-Test ein signifikantes Ergebnis liefert, da der $p$-Wert mit 0.015 kleiner ist als das Signifikanzniveau $\alpha$ von 5%. Die Nullhypothese kann daher abgelehnt werden. Wir haben einen medianen Unterschied in den Boniturnoten von 2 \[0; 3\] zwischen Hunde und Katzen.

## Minimale Fallzahl je Gruppe

Häufig wird auch der Wilcoxon-Mann-Whitney-Test eingesetzt, wenn wenig Beobachtungen vorliegen. Es gibt aber eine untere Grenze der Signifikanz. Das heißt unter einer Fallzahl von $n_1 = 3$ und $n_2 = 3$ wird ein Wilcoxon-Mann-Whitney-Test nicht mehr signifikant. Egal wie groß der Unterschied ist, ein Wilcoxon-Mann-Whitney-Test wird dann die Nulhypothese nicht ablehnen können. Schauen wir das Datenbeispiel in @tbl-data-utest-2 einmal an.

```{r}
#| message: false
#| echo: false
#| tbl-cap: Kleiner Datensatz mit jeweils nur drei Beobachtungen pro Gruppe.
#| label: tbl-data-utest-2


small_tbl <- tibble(dog = c(1.2, 5.6, 3.2),
                    cat = c(100.3, 111.2, 98.5)) |> 
  gather(key = animal, value = jump_length)

small_tbl |> kable(align = "c", "pipe")

```

Wir sehen jeweils drei Beobachtunge für Hunde- und Katzensprungweiten. Der Unterschied ist numerisch riesig. Wir können uns den Unterschied nochmal in @fig-boxplot-utest-min visualisieren.

```{r}
#| message: false
#| echo: false
#| fig-align: center
#| fig-height: 5
#| fig-width: 5
#| fig-cap: Boxplot der Sprungweiten [cm] von Hunden und Katzen.
#| label: fig-boxplot-utest-min
#| 
ggplot(small_tbl, aes(x = animal, y = jump_length)) +
  geom_boxplot() +
  theme_minimal()
```

Wir sehen, der Unterschied ist riesig. Der Wilcoxon-Mann-Whitney-Test findet jedoch nur einen p-Wert von 0.1 und kann damit die Nullhypothese nicht ablehnen. Wir haben keinen signifkanten Unterschied.

```{r}
wilcox.test(jump_length ~ animal, data = small_tbl)

```

Wir sehen hier ein schönes Beispiel für die Begrenztheit von Algorithmen und mathematischen Formeln. Es gibt einen Unterschied, aber der Wilcoxon-Mann-Whitney-Test ist technisch nicht in der Lage einen Unterschied nochzuweisen. Daher solltest du immer versuchen die Ergebnisse eines Testes mit einer Abbildung zu überprüfen.

## Verbundener U-Test mit abhängigen Beobachtungen

## Ergebnisse mit `{tidyplots}`

Häufig wollen wir nicht nur den p-Wert aus einem t-Test berichten sondern natürlich auch gleich die richtige Abbildung dazu haben. Hier gibt es mit dem R Paket `{tidyplots}` eine gute Möglichkeit. Das R Paket verbindet dabei die Funktionalität von `{ggplot}` und `{ggpubr}`. Dabei bleibt es aber dann sehr einfahc zu bedienen. Insbesondere in dem Fall, dass du nur zwei Gruppen in einem t-Test miteinander vergleichen willst.

::: callout-tip
## Alternativen zu `{tidyplots}`

Das R Paket `{ggpubr}` bietet auch noch andere Alternativen für die Darstellung von statistischen Vergleichen in deinen Daten unter [ggpubr: ‘ggplot2’ Based Publication Ready Plots](https://rpkgs.datanovia.com/ggpubr/). Vielleicht findest du da auch noch eine bessere Abbildung als hier. Da wir hier sehr viel ähnliches haben, bleibe ich bei `{tidyplots}`.
:::

Neben den p-Werten, die ich hier mit der Funktion `add_test_pvalue()` ergänze kannst du auch Sterne mit der Funktion `add_test_asterisks()` nutzen. Das liegt dann ganz bei dir. Es geibt auch die Möglichkeit nicht signifikante Ergebnisse auszublenden. Mehr dazu findest du dann auf der [Hilfeseite zu den statistischen Vergleichen in `{tidyplots}`](https://jbengler.github.io/tidyplots/articles/Visualizing-data.html#statistical-comparison). Ich zeige hier dir nur die Standardanwendung. Wichtig ist auch zu wissen, dass wir immer einen Welch t-Test rechnen, also immer für die Varianzheterogenität adjustieren. Das ist auch eigentlich die bessere Variante als der Student t-Test. Häufig ist es sehr schwer in kleinen Fallzahlen abzuschätzen wie die Varianzen in den Gruppen sind. Dann lieber gleich richtig adjsutieren und auf der sicheren Seite sein.

::: panel-tabset
## Barplot

Die Standardabbildung ist sicherlich der Barplot zusammen mit der Standardabweichung als Fehlerbalken. Dann habe ich noch die einzelnen Beobachtungen ergänzt. Die Klammer über den beiden Säulen gibt den Vergleich an und die Zahl ist der p-Wert aus einem Welch t-Test. Wir sehen hier, dass sich die beiden Floharten in den Sprungweiten signifikant unterscheiden. Der p-Wert ist kleiner als das Signifikanzniveau $\alpha$ gleich 5%.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-tidyplot-barplot-ttest
#| fig-align: center
#| fig-height: 3
#| fig-width: 3.5
#| fig-cap: "Einfaktorieller Barplot für die Sprungweiten in [cm] gruppiert nach den Floharten mit mehr Optionen und angepassten Beschriftungen sowie den p-Wert aus einem Welch t-Test."

tidyplot(data = fac1_tbl, 
         x = animal, y = jump_length, color = animal) |> 
  add_data_points() |>
  add_mean_bar(alpha = 0.4, width = 0.4) |> 
  add_sd_errorbar(width = 0.2) |> 
  add_test_pvalue(method = "wilcox_test", hide_info = TRUE) |>
  remove_legend() |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Flohart") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  rename_x_axis_labels(new_names = c("dog" = "Hund", "cat" = "Katze")) |> 
  adjust_size(width = NA, height = NA) 
```

## Boxplot

Es gibt auch gute Gründe ienmal den Boxplot zu wählen, wenn wir etwas besser die Verteilung der Sprungweiten darstellen wollen. Ich habe dann noch die einzelnen Beobachtungen ergänzt. Die Klammer über den beiden Säulen gibt den Vergleich an und die Zahl ist der p-Wert aus einem Welch t-Test. Wir sehen hier, dass sich die beiden Floharten in den Sprungweiten signifikant unterscheiden. Der p-Wert ist kleiner als das Signifikanzniveau $\alpha$ gleich 5%.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-tidyplot-boxplot-ttest
#| fig-align: center
#| fig-height: 3
#| fig-width: 3.5
#| fig-cap: "Einfaktorieller Boxplot für die Sprungweiten in [cm] gruppiert nach den Floharten mit mehr Optionen und angepassten Beschriftungen sowie den p-Wert aus einem Welch t-Test."

tidyplot(data = fac1_tbl, 
         x = animal, y = jump_length, color = animal) |> 
  add_data_points() |>
  add_boxplot(alpha = 0.4, box_width = 0.3) |> 
  add_test_pvalue(method = "wilcox_test", hide_info = TRUE) |> 
  remove_legend() |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Flohart") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  rename_x_axis_labels(new_names = c("dog" = "Hund", "cat" = "Katze")) |> 
  adjust_size(width = NA, height = NA) 
```

## Gepaarter Dotplot

Am Ende wollen wir uns dann nochmal den gepaarten t-Test anschauen. Hier ist dann die Abbildung realtiv einfach. Wir können da die Daten `paired_tbl` aus dem gepaarten t-Test nutzen nachdem wir die Daten in das Long-Format überführt haben. Etwas schwieriger ist dann der p-Wert, den p-Wert müssen wir dann erst selber errechnen und dann ergänzen. Also fangen wir einmal an die Daten in das Long-Format zu überführen.

```{r}
paired_long_tbl <- paired_tbl |> 
  pivot_longer(cols = satt:hungrig,
               values_to = "jump_length",
               names_to = "trt")
```

Jetzt können wir den gepaarten t-Test rechnen und zwar aus dem R Paket `{rstatix}`. Dann müssen wir noch alles so umbauen, dass wir die Informationen dann in `{tidyplots}` auch nutzen können.

```{r}
stats_tbl <- paired_long_tbl |> 
  arrange(id) |> 
  wilcox_test(jump_length ~ trt, paired = TRUE) |> 
  add_significance() |> 
  add_xy_position()
```

Wir butzen hier die Funktion `stat_pvalue_manual()` um händisch die p-Werte zu den Dotplot mit den Mittelwert und Standardabweichung zu ergänzen. Die Verbindungen zwischen den Beobachtungen haben wir dann durch `add_line()` erzeugt. Ich gebe zu, dass ist etwas komplizierter. Wenn du dann die Sterne haben willst, dann musst due das Label auf `"p.signif"` setzen. Dann werden statt der p-Werte `"p"` dir die Sterne `*` angezeigt. Wir sehen hier, dass sich die beiden Fütterungslevel in den Sprungweiten signifikant unterscheiden. Der p-Wert ist kleiner als das Signifikanzniveau $\alpha$ gleich 5%.

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-tidyplot-barplot-ttest-paired
#| fig-align: center
#| fig-height: 3
#| fig-width: 3.5
#| fig-cap: "Dotplot mit Mittelwert und Standardabweichung für die Sprungweiten in [cm] gruppiert nach den Floharten mit mehr Optionen und angepassten Beschriftungen sowie den p-Wert aus einem paired t-Test. Gleiche Messungen an gleichen Flöhen sind mit einer Linie verbunden."

paired_long_tbl |> 
  tidyplot(x = trt, y = jump_length, color = trt, fill = NA) |> 
  add_line(group = id, color = "grey") |> 
  add_data_points() |>
  add_mean_dash(width = 0.2) |> 
  add_sd_errorbar(width = 0.2) |> 
  add(stat_pvalue_manual(stats_tbl, size = 7/.pt, label = "p",
                         bracket.nudge.y = 0.1)) |> 
  remove_legend() |> 
  adjust_font(fontsize = 9) |>
  adjust_x_axis_title("Fütterung") |>
  adjust_y_axis_title("Sprungweite in [cm]") |> 
  reorder_x_axis_labels("hungrig", "satt") |>  
  rename_x_axis_labels(new_names = c("satt" = "gefüttert", "hungrig" = "ungefüttert")) |>
  adjust_size(width = NA, height = NA) 
```
:::
