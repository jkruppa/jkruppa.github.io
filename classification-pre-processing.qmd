```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Data preprocessing {#sec-pre-processing}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, tidymodels, magrittr, conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("extract", "magrittr")
```

Am Ende des Kapitels findest du nochmal den gesamten R Code in einem Rutsch zum selber durchführen oder aber kopieren.

## Daten

In dieser Einführung nehmen wir die infizierten Ferkel als Beispiel um einmal die verschiedenen Verfahren zu demonstrieren. Ich füge hier noch die ID mit ein, die nichts anderes ist, als die Zeilennummer. Dann habe ich noch die ID an den Anfang gestellt. Wir wählen auch nur ein kleines Subset aus den Daten aus, da wir in diesem Kapitel nur Funktion demonstrieren und nicht die Ergebnisse interpretieren.

```{r}
pig_tbl <- read_excel("data/infected_pigs.xlsx") %>% 
  mutate(pig_id = 1:n()) %>% 
  select(pig_id, infected, age, crp, sex, frailty) %>% 
  select(pig_id, infected, everything())  
```

In @tbl-ml-basic-pig siehst du nochmal einen Auschnitt aus den Daten. Wir haben noch die ID mit eingefügt, damit wir einzelne Beobachtungen nachvollziehen können.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-ml-basic-pig
#| tbl-cap: Auszug aus dem Daten zu den kranken Ferkeln.

rbind(head(pig_tbl),
      rep("...", times = ncol(pig_tbl)),
      tail(pig_tbl)) %>% 
  kable(align = "c", "pipe")
```

Gehen wir jetzt mal die Preproessing Schritte, die wir für das maschinelle Lernen später brauchen einmal durch.

## Das Rezept mit `recipe()`

```{r}

pig_rec <- recipe(infected ~ ., data = pig_tbl) %>% 
  update_role(pig_id, new_role = "ID")

pig_rec %>% summary()



```

## Dummycodierung von $X$

::: column-margin
[Create Traditional Dummy Variables](https://recipes.tidymodels.org/reference/step_dummy.html)
:::

Wir werden immer häufiger davon sprechen, dass wir alle kategorialen Daten in *Dummies* überführen müssen. Das heißt, wir dürfen keine Faktoren mehr in unseren Daten haben. Wir wandeln daher alle Variablen, die ein Faktor sind, in Dummyspalten um. Die Idee von der Dummyspalte ist die gleiche wie bei der multiplen Regression. Da ich aber nicht davon ausgehe, dass du dir alles hier durchgelesen hast, kommt hier die kurze Einführung zur Dummycodierung.

Die Dummycodierung wird nur auf den Features durcgeführt. Dabei werden nur Spalten erschaffen, die $0/1$, für Level vorhanden oder Level nicht vorhanden, beinhalten. Wir werden also nur alle $x$ in Dummies umwandeln, die einem Faktor entsprechen. Dafür nutzen wir dann später eine Funktion, hier machen wir das einmal zu Veranschaulichung per Hand. In @tbl-class-basic-dummy-01 haben wir einen kleinen Ausschnitt unser Schweinedaten gegeben. Wir wollen zuerst die Spalte `sex` in eine Dummycodierung umwandeln.

| infected | age |  sex   |  frailty  |
|:--------:|:---:|:------:|:---------:|
|    1     | 24  |  male  |  robust   |
|    0     | 36  |  male  | pre-frail |
|    0     | 21  | female |   frail   |
|    1     | 34  | female |  robust   |
|    1     | 27  |  male  |   frail   |

: Beispieldatensatz für die Dummycodierung. Wir wollen die Spalten `sex` und `frailty` als Dummyspalten haben. {#tbl-class-basic-dummy-01}

In der @tbl-class-basic-dummy-02 sehen wir das Ergebnis für die Dummycodierung der Spalte `sex` in die Dummyspalte `sex_male`. Wir haben in der Dummyspalte nur noch die Information, ob das Ferkel mänlich ist oder nicht. Wenn wir eine Eins in der Spalte finden, dann ist das Ferkel männlich. Wenn wir eine Null vorfinden, dann ist das Ferkel nicht männlich also weiblich. Das *Nicht* müssen wir uns dann immer merken.

| infected | age | sex_male |
|:--------:|:---:|:--------:|
|    1     | 24  |    1     |
|    0     | 36  |    1     |
|    0     | 21  |    0     |
|    1     | 34  |    0     |
|    1     | 27  |    1     |

: Ergebnis der Dummycodierung der Spalte `sex` zu der Spalte `sex_male`. {#tbl-class-basic-dummy-02}

In der @tbl-class-basic-dummy-03 betrachten wir einen kompleren Fall. Wenn wir eine Spalte vorliegen haben mit mehr als zwei Leveln, wie zum Beispiel die Spalte `frailty`, dann erhalten wir zwei Spalten wieder. Die Spalte `frailty_robust` beschreibt das Vorhandensein des Levels `robust` und die Spalte `frailty_pre-frail` das Vorhandensein des Levels `pre-frail`. Und was ist mit dem Level `frail`? Das Level wir durch das Nichtvorhandesein von `robust` und dem Nichtvorhandensein von `pre-frail` abgebildet. Beinhalten beide Spalten die Null, so ist das Ferkel `frail`.

| infected | age | frailty_robust | frailty_pre-frail |
|:--------:|:---:|:--------------:|:-----------------:|
|    1     | 24  |       1        |         0         |
|    0     | 36  |       0        |         1         |
|    0     | 21  |       0        |         0         |
|    1     | 34  |       1        |         0         |
|    1     | 27  |       0        |         0         |

: Ergebnis der Dummycodierung für eine Spalte mit mehr als zwei Leveln. {#tbl-class-basic-dummy-03}

Wenn wir einen Faktor mit $l$ Leveln haben, erhalten wir immer $l-1$ Spalten nach der Dummycodierung wieder.

```{r}
pig_dummy_rec <- pig_rec %>% 
  step_dummy(all_nominal_predictors()) 

pig_dummy_rec 
```

Daten generieren

```{r}
pig_dummy_rec %>%
  prep() %>%
  bake(new_data = NULL)
```

## Zero Variance Spalten

::: column-margin
[Zero Variance Filter](https://recipes.tidymodels.org/reference/step_zv.html)
:::

```{r}
pig_zero_rec <- pig_rec %>% 
 step_zv(all_predictors())

pig_zero_rec
```

## Standardisieren $\mathcal{N}(0,1)$

::: column-margin
[Scaling Numeric Data](https://recipes.tidymodels.org/reference/step_scale.html)

[Centering Numeric Data](https://recipes.tidymodels.org/reference/step_center.html)

[Center and Scale Numeric Data](https://recipes.tidymodels.org/reference/step_normalize.html)
:::

```{r}
pig_scale_center_rec <- pig_rec %>% 
  step_center(all_numeric_predictors()) %>% 
  step_scale(all_numeric_predictors()) 

pig_scale_center_rec 
```

```{r}
pig_scale_center_rec <- pig_rec %>% 
  step_normalize(all_numeric_predictors()) 

pig_scale_center_rec 
```

Daten generieren

```{r}
pig_scale_center_rec  %>%
  prep() %>%
  bake(new_data = NULL) %>% 
  mutate(across(where(is.numeric), round, 2))
```

## Normalisieren $[0; 1]$

::: column-margin
[Scaling Numeric Data to a Specific Range](https://recipes.tidymodels.org/reference/step_range.html)
:::

```{r}
pig_range_rec <- pig_rec %>% 
  step_range(all_numeric_predictors(), min = 0, max = 1) 

pig_range_rec 
```

Daten generieren

```{r}
pig_range_rec  %>%
  prep() %>%
  bake(new_data = NULL) %>% 
  mutate(across(where(is.numeric), round, 2))
```

## R packages to consider

https://cran.r-project.org/web/packages/embed/embed.pdf
