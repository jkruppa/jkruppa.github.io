In diesem Zerforschenbeispiel wollen wir uns einen zweifaktoriellen Barplot anschauen. Wir haben hier ein Säulendiagramm mit *compact letter display* vorliegen. Daher brauchen wir eigentlich gar nicht so viele Zahlen. Für jede der vier Zeitpunkte und der Kontrolle jeweils einmal einen Mittelwert für die Höhe der Säule sowie einmal die Standardabweichung. Da wir hier aber noch mit `emmeans()` eine Gruppenvergleich rechnen wollen, brauchen wir mehr Beobachtungen. Wir erschaffen uns also fünf Beobachtungen je Zeit/Jod-Kombination. Für eine detaillierte Betrachtung der Erstellung der Abbildung schauen einmal in das Kapitel zum [Barplot oder Balkendiagramm oder Säulendiagramm](#sec-eda-barplot).

![Ursprüngliche Abbildung, die nachgebaut werden soll. Ein Barplot mit den zwei Faktoren Zeit und die Iodine Form.](images/eda/zerforschen_barplot_2fac.png){#fig-ur-barplot-02 fig-align="center" width="100%"}

Als erstes brauchen wir die Daten. Die Daten habe ich mir in dem Datensatz `zerforschen_barplot_2fac_target_emmeans.xlsx` selber ausgedacht. Ich habe einfach die obige Abbildung genommen und den Mittelwert abgeschätzt. Dann habe ich die fünf Werte alle um den Mittelwert streuen lassen. Ich brauche hier eigentlich mehr als fünf Werte, sonst kriegen wir bei `emmeans()` und der Interaktion im `gls()`-Modell Probleme, aber da gibt es dann bei kleinen Fallzahlen noch ein Workaround. Bitte nicht mit weniger als fünf Beobachtungen versuchen, dann wird es schwierig mit der Konsistenz der Schätzer aus dem Modell.

Ach, und ganz wichtig. Wir entfernen die Kontrolle, da wir die Kontrolle nur mit einer Iodid-Stufe gemessen haben. Dann können wir weder die Interaktion rechnen, noch anständig eine Interpretation durchführen.

```{r}
barplot_tbl <- read_excel("data/zerforschen_barplot_2fac_target_emmeans.xlsx") %>% 
  mutate(time = factor(time, 
                       levels = c("ctrl", "7", "11", "15", "19"),
                       labels = c("Contr.", "07:00", "11:00", "15:00", "19:00")),
         type = as_factor(type)) %>% 
  filter(time != "Contr.")
barplot_tbl 
```

Im Folgenden sparen wir uns den Aufruf mit `group_by()` den du aus dem [Kapitel zum Barplot](#sec-eda-barplot) schon kennst. Wir machen das alles zusammen in der Funktion `emmeans()` aus dem gleichnamigen R Paket. Der Vorteil ist, dass wir dann auch gleich die Gruppenvergleiche und auch das *compact letter display* erhalten. Einzig die Standardabweichung $s$ wird uns nicht wiedergegeben sondern der Standardfehler $SE$. Da aber folgernder Zusammenhang vorliegt, können wir gleich den Standardfehler in die Standardabweichung umrechnen.

$$
SE = \cfrac{s}{\sqrt{n}} 
$$

Wir rechnen also gleich einfach den Standardfehler $SE$ mal der $\sqrt{n}$ um dann die Standardabweichung zu erhalten. In unserem Fall ist $n=5$ nämlich die Anzahl Beobachtungen je Gruppe. Wenn du mal etwas unterschiedliche Anzahlen hast, dann kannst du auch einfach den Mittelwert der Fallzahl der Gruppen nehmen. Da überfahren wir zwar einen statistischen Engel, aber der Genauigkeit ist genüge getan.

In den beiden Tabs siehst du jetzt einmal die Modellierung unter der Annahme der Varianzhomogenität mit der Funktion `lm()` und einmal die Modellierung unter der Annahme der Varianzheterogenität mit der Funktion `gls()` aus dem R Paket `nlme`. Wie immer lässt sich an Boxplots visuell überprüfen, ob wir Homogenität oder Heterogenität vorliegen haben. Oder aber du schaust nochmal in das Kapitel [Der Pre-Test oder Vortest](#sec-pretest), wo du mehr erfährst.

Wenn du *jeden* Boxplot miteinander vergleichen willst, dann musst du in dem Code `emmeans(~ time * type)` setzen. Dann berechnet dir `emmeans` für jede Faktorkombination einen paarweisen Vergleich.

::: {.panel-tabset group="zerforschen-emmeans-barplot-2fac"}
## Varianzhomogenität

Hier gehen wir nicht weiter auf die Funktionen ein, bitte schaue dann einmal in dem Abschnitt zu [Gruppenvergleich mit dem `emmeans` Paket](#sec-posthoc-emmeans). Wir entfernen aber noch die Leerzeichen bei den Buchstaben mit der Funktion `str_trim()`. Wir rechnen hier die Vergleiche getrennt für die beiden Jodformen. Wenn du alles mit allem Vergleichen willst, dann setze bitte `emmeans(~ time * type)`.

```{r}
emmeans_homogen_tbl <- lm(iodine ~ time + type + time:type, data = barplot_tbl) %>%
  emmeans(~ time | type) %>%
  cld(Letters = letters, adjust = "none") %>% 
  as_tibble() %>% 
  mutate(.group = str_trim(.group),
         sd = SE * sqrt(5)) 
emmeans_homogen_tbl
```

In dem Objekt `emmeans_homogen_tbl` ist jetzt alles enthalten für unsere Barplots mit dem *compact letter display*. Wie dir vielleicht auffällt sind alle Standardfehler und damit alle Standardabweichungen für alle Gruppen gleich, das war ja auch unsere Annahme mit der Varianzhomogenität.

## Varianzheterogenität

Hier gehen wir nicht weiter auf die Funktionen ein, bitte schaue dann einmal in dem Abschnitt zu [Gruppenvergleich mit dem `emmeans` Paket](#sec-posthoc-emmeans). Wir entfernen aber noch die Leerzeichen bei den Buchstaben mit der Funktion `str_trim()`. Da wir hier etwas Probleme mit der Fallzahl haben, nutzen wir die Option `mode = "appx-satterthwaite"` um dennoch ein vollwertiges, angepasstes Modell zu erhalten. Du kannst die Option auch erstmal entfernen und schauen, ob es mit deinen Daten auch so klappt. Wir rechnen hier die Vergleiche getrennt für die beiden Jodformen. Wenn du alles mit allem Vergleichen willst, dann setze bitte `emmeans(~ time * type)`.

```{r}
emmeans_hetrogen_tbl <- gls(iodine ~ time + type + time:type, data = barplot_tbl, 
                            weights = varIdent(form =  ~ 1 | time*type)) %>%
  emmeans(~ time | type, mode = "appx-satterthwaite") %>%
  cld(Letters = letters, adjust = "none") %>% 
  as_tibble() %>% 
  mutate(.group = str_trim(.group),
         sd = SE * sqrt(5)) 
emmeans_hetrogen_tbl
```

In dem Objekt `emmeans_hetrogen_tbl` ist jetzt alles enthalten für unsere Barplots mit dem *compact letter display*. In diesem Fall hier sind die Standardfehler und damit auch die Standardabweichungen nicht alle gleich, wir haben ja für jede Gruppe eine eigene Standardabweichung angenommen. Die Varianzen sollten ja auch heterogen sein.
:::

Dann bauen wir usn auch schon die Abbildung. Wir müssen am Anfang einmal `scale_x_discrete()` setzen, damit wir gleich den Zielbereich ganz hinten zeichnen können. Sonst ist der blaue Bereich im Vordergrund. Dann färben wir auch mal die Balken anders ein. Muss ja auch mal sein. Auch nutzen wir die Funktion `geom_text()` um das *compact letter display* gut zu setzten. Die $y$-Position berechnet sich aus dem Mittelwert `emmean` plus Standardabweichung `sd` innerhalb des `geom_text()`. Da wir hier die Kontrollgruppe entfernen mussten, habe ich dann nochmal den Zielbereich verschoben und mit einem Pfeil ergänzt. Die beiden Tabs zeigen dir dann die Abbildungen für die beiden Annahmen der Varianzhomogenität oder Varianzheterogenität. Der Code ist der gleiche für beide Abbildungen, die Daten `emmeans_homogen_tbl` oder `emmeans_hetrogen_tbl` sind das Ausschlaggebende. Wie du sehen wirst, haben wir hier mal keinen Unterschied vorliegen.

::: {.panel-tabset group="zerforschen-emmeans-barplot-2fac"}
## Varianzhomogenität

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac-target-emmeans-1
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut. Wir nutzen das `geom_text()` um noch besser unser *compact letter display* zu setzen. Die Kontrolle wurde entfernt, sonst hätten wir hier nicht `emmeans` in der einfachen Form nutzen können. Wir rechnen hier die Vergleiche getrennt für die beiden Jodformen."

ggplot(data = emmeans_homogen_tbl, aes(x = time, y = emmean, fill = type)) +
  theme_bw() +
  scale_x_discrete() +
  annotate("rect", xmin = 0.25, xmax = 4.75, ymin = 50, ymax = 100, 
           alpha = 0.2, fill = "darkblue") +                        
  annotate("text", x = 0.5, y = 120, hjust = "left", label = "Target area", 
           size = 5) + 
  geom_curve(aes(x = 1.25, y = 120, xend = 1.7, yend = 105),   
             colour = "#555555",   
             size = 0.5,   
             curvature = -0.2,  
             arrow = arrow(length = unit(0.03, "npc"))) +
  geom_bar(stat = "identity", 
           position = position_dodge(width = 0.9, preserve = "single")) +
  geom_errorbar(aes(ymin = emmean-sd, ymax = emmean+sd),
                width = 0.2,  
                position = position_dodge(width = 0.9, preserve = "single")) +
  scale_fill_manual(name = "Type", values = c("darkgreen", "darkblue")) + 
  theme(legend.position = c(0.1, 0.8),
        legend.title = element_blank(), 
        legend.spacing.y = unit(0, "mm"), 
        panel.border = element_rect(colour = "black", fill=NA),
        axis.text = element_text(colour = 1, size = 12),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black")) +
  labs(x = "Time of application [time of day]",
       y =  expression(Iodine~content~"["*mu*g~I~100*g^'-1'~f*.*m*.*"]")) +
  scale_y_continuous(breaks = c(0, 50, 100, 150, 200),
                     limits = c(0, 200)) +
  geom_text(aes(label = .group, y = emmean + sd + 2),  
            position = position_dodge(width = 0.9), vjust = -0.25) 
```

## Varianzheterogenität

```{r}
#| message: false
#| echo: true
#| warning: false
#| label: fig-ggplot-zerforschen-barplot-2fac-target-emmeans-2
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "Die Abbildung des Säulendiagramms in `ggplot` nachgebaut. Wir nutzen das `geom_text()` um noch besser unser *compact letter display* zu setzen. Die Kontrolle wurde entfernt, sonst hätten wir hier nicht `emmeans` in der einfachen Form nutzen können. Wir rechnen hier die Vergleiche getrennt für die beiden Jodformen."

ggplot(data = emmeans_hetrogen_tbl, aes(x = time, y = emmean, fill = type)) +
  theme_bw() +
  scale_x_discrete() +
  annotate("rect", xmin = 0.25, xmax = 4.75, ymin = 50, ymax = 100, 
           alpha = 0.2, fill = "darkblue") +                        
  annotate("text", x = 0.5, y = 120, hjust = "left", label = "Target area", 
           size = 5) + 
  geom_curve(aes(x = 1.25, y = 120, xend = 1.7, yend = 105),   
             colour = "#555555",   
             size = 0.5,   
             curvature = -0.2,  
             arrow = arrow(length = unit(0.03, "npc"))) +
  geom_bar(stat = "identity", 
           position = position_dodge(width = 0.9, preserve = "single")) +
  geom_errorbar(aes(ymin = emmean-sd, ymax = emmean+sd),
                width = 0.2,  
                position = position_dodge(width = 0.9, preserve = "single")) +
  scale_fill_manual(name = "Type", values = c("darkgreen", "darkblue")) + 
  theme(legend.position = c(0.1, 0.8),
        legend.title = element_blank(), 
        legend.spacing.y = unit(0, "mm"), 
        panel.border = element_rect(colour = "black", fill=NA),
        axis.text = element_text(colour = 1, size = 12),
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black")) +
  labs(x = "Time of application [time of day]",
       y =  expression(Iodine~content~"["*mu*g~I~100*g^'-1'~f*.*m*.*"]")) +
  scale_y_continuous(breaks = c(0, 50, 100, 150, 200),
                     limits = c(0, 200)) +
  geom_text(aes(label = .group, y = emmean + sd + 2),  
            position = position_dodge(width = 0.9), vjust = -0.25) 
```
:::

Am Ende kannst du dann folgenden Code noch hinter deinen `ggplot` Code ausführen um dann deine Abbildung als `*.png`-Datei zu speichern. Dann hast du die Abbildung super nachgebaut und sie sieht auch wirklich besser aus.

```{r}
#| eval: false
ggsave("my_ggplot_barplot.png", width = 5, height = 3)
```
