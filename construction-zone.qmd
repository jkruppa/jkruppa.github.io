```{r echo = FALSE}
#| message: false
#| warning: false
pacman::p_load(tidyverse, readxl, knitr, kableExtra, performance, parameters,
               latex2exp, see, patchwork, mfp, multcomp, emmeans, janitor, effectsize,
               broom, ggmosaic, tinytable, ggrepel, glue, ggtext,
               conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
cb_pal <- c("#000000", "#E69F00", "#56B4E9", 
            "#009E73", "#F0E442", "#F5C710", 
            "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- cb_pal
theme_marginal <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 16, face = "bold"),
          plot.subtitle = element_text(size = 12, face = "italic"),
          plot.caption = element_text(face = "italic"),
          axis.title = element_text(face = "bold"),
          axis.text = element_text(size = 12),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

# Baustelle {#sec-construction}

*Letzte Änderung am `r format(fs::file_info("construction-zone.qmd")$modification_time, '%d. %B %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="100%"}

::: {.callout-caution appearance="simple"}
## Stand des Kapitels: Konstruktion (seit 07.2025)

Dieses Kapitel wird in den nächsten Wochen geschrieben. Ich plane zum Beginn des WiSe 2025/26 eine neue Version des Kapitels erstellt zu haben. Während das Kapitel entsteht, funktioniert so manches dann nicht so wie es soll.
:::

::: {.callout-caution appearance="minimal"}
## Dieses Kapitel ist archiviert

![](images/archive.png){fig-align="center" width="100%"}

Ich benötige die Thematik aktuell nicht in meiner Lehre oder der statistischen Beratung. Mir ist es als Nachschlagewerk aber immer noch wichtig zu behalten. Archivierte Kapitel werden nicht von mir weiter gepflegt oder ergänzt. Auftretende Fehler werden aber natürlich beseitigt, wenn die Fehler mir auffallen oder gemeldet werden.
:::

-   `rnorm()`: Erzeugt Zufallszahlen aus einer [Normalverteilung](https://en.wikipedia.org/wiki/Normal_distribution).
-   `runif()`: Erzeugt Zufallszahlen aus einer [Gleichverteilung](https://en.wikipedia.org/wiki/Continuous_uniform_distribution).
-   `rbinom()`: Generiert Zufallszahlen aus einer [Binomialverteilung](https://en.wikipedia.org/wiki/Binomial_distribution).
-   `rpois()`: Erzeugt Zufallszahlen aus einer [Poisson-Verteilung](https://en.wikipedia.org/wiki/Poisson_distribution).
-   `rgamma()`: Generiert Zufallszahlen aus einer [Gamma-Verteilung](https://en.wikipedia.org/wiki/Gamma_distribution).
-   `rexp()`: Erzeugt Zufallszahlen aus einer [Exponentialverteilung](https://en.wikipedia.org/wiki/Exponential_distribution).
-   `rt()`: Generiert Zufallszahlen aus einer [Student's t-Verteilung](https://en.wikipedia.org/wiki/Student%27s_t-distribution).
-   `rchisq()`: Erzeugt Zufallszahlen aus einer [Chi-Quadrat-Verteilung](https://en.wikipedia.org/wiki/Chi-squared_distribution).
-   `rbeta()`: Erzeugt Zufallszahlen aus einer [Beta-Verteilung](https://en.wikipedia.org/wiki/Beta_distribution).
-   `rf()`: Erzeugt Zufallszahlen aus einer [F-Verteilung](https://en.wikipedia.org/wiki/F-distribution).
-   `rlogis()`: Erzeugt Zufallszahlen aus einer [logistischen Verteilung](https://en.wikipedia.org/wiki/Logistic_distribution).
-   `rweibull()`: Erzeugt Zufallszahlen aus einer [Weibull-Verteilung](https://en.wikipedia.org/wiki/Weibull_distribution).

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-weibull

ggplot() +
  theme_marginal() +
  geom_vline(xintercept = c(0)) + 
  geom_hline(yintercept = c(0)) + 
  stat_function(fun = dweibull, linewidth = 1, args = list(scale = 1, shape = 1.5), 
                xlim = c(0, 8.25), aes(color = "1"), show.legend = FALSE) +
  stat_function(fun = dweibull, geom = "area", args = list(scale = 1, shape = 1.5), 
                alpha = 0.25, xlim = c(0, 8.25), aes(fill = "1")) +
  ylim(0, 2.5) + xlim(0, 3) +
  scale_color_okabeito() +
  scale_fill_okabeito()

```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-align: center
#| fig-height: 4
#| fig-width: 7
#| fig-cap: "foo. *[Zum Vergrößern anklicken]*"
#| label: fig-gen-data-beta

df <- tibble(dist = c("a", "b", "c"), beta1 = c(1,3,5), beta2 = c(3,3,3))

df |> 
  group_by(dist) |> 
  reframe(x = seq(0, 1, 0.01), y = dbeta(x, beta1, beta2)) |> 
  ggplot(aes(x, y, color = dist)) +
  theme_marginal() +
  geom_line() +
  scale_color_okabeito(labels = c(expression(beta[1]*","~beta[2]), expression(beta[1]),expression(beta[1])))
```
